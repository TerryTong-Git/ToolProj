idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,mul,8,869208350739115,8836458891590,0,881669746546665,0,"{'ok': True, 'value': 869208350739115, 'stdout': '869208350739115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15524077415466309}",1,Compute: 12456355 * 69780313
1,ilp_partition,2,2,0,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11656403541564941}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 2, 2]"
2,ilp_partition,2,1,0,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09339118003845215}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 2, 2]"
3,rod,2,8,4,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9gsdfomq/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_9gsdfomq/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11662459373474121}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
4,mul,32,1974273442988770645481568389591607485206140596767515232972981392,197226211639925355517779683559768,0,197226368439515354517739683519768,0,"{'ok': True, 'value': 1974273442988770645481568389591607485206140596767515232972981392, 'stdout': '1974273442988770645481568389591607485206140596767515232972981392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09714770317077637}",1,Compute: 40040792927378917879434480352944 * 49306552109731338620698920889243
5,add,32,125604545277261562389014136655113,125604545277261562388984136655115,0,125594555277261562389014136655113,0,"{'ok': True, 'value': 125604545277261562389014136655113, 'stdout': '125604545277261562389014136655113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09521889686584473}",1,Compute: 87058922990621400841851694887097 + 38545622286640161547162441768016
6,ilp_prod,8,137,-1,0,105,0,"{'ok': True, 'value': 137, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8fb1f9e3f9b44de4b4a3fe6fda64059d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8fb1f9e3f9b44de4b4a3fe6fda64059d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 81.5 (4)\n3  Obj 137\nOptimal - objective value 137\nOptimal objective 137 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n137.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.4065990447998047}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 22, 4, 23]
consumption (rows=resources) = [[7, 1, 2, 1], [2, 3, 6, 4], [8, 7, 2, 3], [7, 8, 5, 2]]
capacity = [32, 23, 22, 21]
upper_bounds = [3, 3, 3, 5]"
7,lcs,16,9,7,0,3,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08902740478515625}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcbddaacddccabb""
T = ""caddbaaaadadbca"""
8,sub,32,43285291119490097820512520027731,59111136407586287821431910434631,0,592,0,"{'ok': True, 'value': 43285291119490097820512520027731, 'stdout': '43285291119490097820512520027731\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10391736030578613}",1,Compute: 59270993429687410087260574857400 - 15985702310197312266748054829669
9,knap,4,27,22,0,17,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09687948226928711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 8, 6]
V = [11, 3, 15, 16]
C = 13"
10,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09800195693969727}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 2, 3]"
11,mul,16,15984415276384606203864151449594,1599484468594894868958643694545456,0,16025546069997599544945555564,0,"{'ok': True, 'value': 15984415276384606203864151449594, 'stdout': '15984415276384606203864151449594\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09977030754089355}",1,Compute: 2538957859208082 * 6295659937172117
12,lcs,32,18,10,0,20,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09415078163146973}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadddcaaccddcddbaddbdddabccdccbb""
T = ""cbcabbdbacbbcbadabbddddbdcadccdc"""
13,rod,8,92,22,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tgwrx6s1/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_tgwrx6s1/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09842514991760254}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [1, 23, 18, 11, 9, 21, 5, 19]"
14,mul,4,26225193,274,0,26104933,0,"{'ok': True, 'value': 26225193, 'stdout': '26225193\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09736800193786621}",1,Compute: 8147 * 3219
15,knap,4,24,28,0,41,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09648680686950684}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 2, 3]
V = [14, 9, 15, 3]
C = 4"
16,ilp_assign,8,41,0,0,36,0,"{'ok': True, 'value': 351, 'stdout': '351\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5520250797271729}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 12, 12, 6, 18, 3, 3], [11, 22, 24, 9, 9, 4, 13], [4, 6, 17, 10, 8, 4, 11], [6, 21, 22, 14, 5, 4, 11], [16, 11, 11, 24, 5, 12, 24], [17, 16, 20, 6, 23, 21, 3], [10, 8, 17, 13, 23, 1, 7]]"
17,add,32,128226209919515319599499220857428,128226204919545319596667220857328,0,128226209919515319599499220857428,1,"{'ok': True, 'value': 128226209919515319599499220857428, 'stdout': '128226209919515319599499220857428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10093522071838379}",1,Compute: 47789963177525673673329419833797 + 80436246741989645926169801023631
18,rod,32,1184,1035,0,1080,0,"{'ok': True, 'value': 1184, 'stdout': '1184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10085892677307129}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [37, 46, 95, 68, 42, 57, 78, 9, 48, 92, 81, 44, 60, 55, 66, 48, 3, 85, 89, 96, 38, 7, 86, 53, 75, 68, 36, 63, 87, 56, 80, 93]"
19,ilp_assign,8,31,18,0,18,0,"{'ok': True, 'value': 395, 'stdout': '395\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.23054957389831543}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 6, 17, 18, 6, 16, 4], [7, 10, 21, 10, 12, 10, 18], [1, 24, 2, 24, 21, 18, 23], [9, 8, 9, 15, 15, 24, 9], [22, 2, 8, 20, 20, 4, 7], [6, 19, 10, 4, 6, 1, 18], [16, 24, 21, 7, 24, 10, 2]]"
20,knap,16,417,152,0,1099,0,"{'ok': True, 'value': 417, 'stdout': '417\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09930157661437988}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 26, 27, 12, 14, 24, 20, 20, 5, 24, 8, 24, 25, 13, 2, 31]
V = [49, 19, 10, 1, 34, 30, 42, 10, 64, 60, 62, 4, 46, 17, 30, 47]
C = 152"
21,mul,8,4073146432182096,40744344486695648,0,407065858455456,0,"{'ok': True, 'value': 4073146432182096, 'stdout': '4073146432182096\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09491753578186035}",1,Compute: 50698156 * 80341116
22,rod,8,104,25,0,30,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1114199161529541}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 19, 9, 16, 10, 8, 24, 6]"
23,rod,16,544,46,0,55,0,"{'ok': True, 'value': 544, 'stdout': '544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11097526550292969}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [34, 40, 41, 6, 34, 45, 45, 5, 7, 2, 20, 16, 21, 14, 5, 26]"
24,sub,4,5635,5635,1,5635,1,"{'ok': True, 'value': 5635, 'stdout': '5635\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0910654067993164}",1,Compute: 6678 - 1043
25,sub,16,3303889388506150,3303889388506150,1,3303889388506150,1,"{'ok': True, 'value': 3303889388506150, 'stdout': '3303889388506150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09423971176147461}",1,Compute: 9235606047415755 - 5931716658909605
26,sub,2,46,46,1,46,1,"{'ok': True, 'value': 46, 'stdout': '46\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10145354270935059}",1,Compute: 99 - 53
27,sub,4,2770,2770,1,2770,1,"{'ok': True, 'value': 2770, 'stdout': '2770\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10103750228881836}",1,Compute: 9673 - 6903
28,knap,16,318,106,0,1053,0,"{'ok': True, 'value': 318, 'stdout': '318\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10700273513793945}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 19, 9, 23, 32, 28, 7, 4, 22, 20, 3, 21, 5, 12, 25, 15]
V = [13, 16, 44, 36, 43, 34, 16, 40, 19, 19, 2, 24, 34, 49, 22, 20]
C = 138"
29,sub,32,13934349526811592782712397518867,13934349526811592782712397518867,1,13934349526811592782712397518867,1,"{'ok': True, 'value': 13934349526811592782712397518867, 'stdout': '13934349526811592782712397518867\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10271334648132324}",1,Compute: 30224905564604453231490567495338 - 16290556037792860448778169976471
30,rod,8,184,22,0,48,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09735774993896484}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 2, 18, 10, 21, 22, 2, 15]"
31,mul,8,262783548920480,7,0,26384874644480,0,"{'ok': True, 'value': 262783548920480, 'stdout': '262783548920480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09463214874267578}",1,Compute: 25333985 * 10372768
32,rod,2,10,10,1,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9eatzrbk/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_9eatzrbk/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11307573318481445}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 4]"
33,ilp_partition,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10088992118835449}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 9, 4, 6]"
34,rod,8,48,22,0,24,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11408376693725586}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [6, 4, 8, 10, 8, 6, 1, 20]"
35,ilp_assign,32,137,185,0,185,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.25956225395202637}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[55, 65, 54, 22, 16, 11, 44], [40, 7, 57, 76, 59, 62, 66], [91, 33, 86, 85, 45, 25, 31], [66, 45, 38, 32, 37, 95, 14], [8, 84, 58, 65, 79, 30, 51], [94, 1, 56, 59, 23, 65, 36], [61, 73, 40, 96, 81, 8, 41]]"
36,ilp_partition,16,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09174466133117676}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 21, 28, 7, 36, 34, 2, 2, 10, 17, 34, 32, 48, 18, 17, 44]"
37,sub,4,4353,4353,1,4353,1,"{'ok': True, 'value': 4353, 'stdout': '4353\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10124325752258301}",1,Compute: 6672 - 2319
38,ilp_prod,8,204,108,0,100,0,"{'ok': True, 'value': 204, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/273a713775bd4a4ba3f6cd34f1e911bb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/273a713775bd4a4ba3f6cd34f1e911bb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 212 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -187 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -204 found by DiveCoefficient after 2 iterations and 0 nodes (0.01 seconds)\nCbc0031I 2 added rows had average density of 3.5\nCbc0013I At root node, 2 cuts changed objective from -212 to -204 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 2.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -204, took 2 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -212 to -204\nProbing was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                204.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n204.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1936020851135254}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 17, 12, 17]
consumption (rows=resources) = [[4, 7, 6, 1], [4, 6, 2, 1], [5, 1, 4, 3], [1, 2, 4, 1]]
capacity = [29, 26, 32, 20]
upper_bounds = [6, 4, 4, 10]"
39,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10841679573059082}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 6, 2]"
40,ilp_assign,4,12,7,0,18,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21325302124023438}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4, 9, 3], [6, 2, 10, 4], [1, 2, 1, 11], [12, 3, 12, 8]]"
41,rod,16,592,224,0,108,0,"{'ok': True, 'value': 592, 'stdout': '592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10672664642333984}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [37, 21, 34, 48, 43, 39, 41, 29, 41, 18, 4, 43, 10, 40, 40, 3]"
42,ilp_assign,8,31,0,0,104,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tprf1769/main.py"", line 35, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_tprf1769/main.py"", line 17, in hungarian_algorithm\n    smallest_uncovered = min([cost_matrix[i][j] for i, j in covered if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22509312629699707}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 23, 12, 4, 23, 14, 14], [7, 14, 11, 9, 6, 13, 1], [24, 2, 13, 15, 19, 16, 4], [5, 19, 12, 24, 9, 18, 15], [6, 7, 17, 15, 21, 1, 1], [16, 6, 7, 12, 20, 7, 17], [24, 4, 8, 21, 18, 24, 12]]"
43,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10114336013793945}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 7, 12, 6, 20, 4, 2, 3]"
44,add,2,80,80,1,80,1,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09292960166931152}",1,Compute: 43 + 37
45,rod,16,272,46,0,81,0,"{'ok': True, 'value': 272, 'stdout': '272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09292864799499512}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [17, 32, 24, 2, 7, 12, 47, 8, 10, 3, 19, 32, 10, 31, 31, 40]"
46,ilp_assign,16,70,105,0,105,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.1367812156677246}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[29, 44, 33, 2, 29, 4, 24], [32, 41, 25, 13, 37, 39, 12], [19, 33, 40, 1, 23, 10, 10], [28, 24, 14, 15, 18, 8, 7], [9, 8, 46, 20, 22, 23, 25], [31, 36, 41, 28, 6, 34, 38], [36, 33, 33, 45, 10, 9, 16]]"
47,rod,8,72,22,0,27,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11139392852783203}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 8, 9, 22, 18, 8, 3, 20]"
48,sub,4,7983,7983,1,8003,0,"{'ok': True, 'value': 7983, 'stdout': '7983\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10310196876525879}",1,Compute: 9825 - 1842
49,knap,4,25,22,0,20,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10084271430969238}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 7, 5, 5]
V = [1, 4, 13, 12]
C = 11"
50,rod,2,6,6,1,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_jx2g7aj7/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_jx2g7aj7/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08906197547912598}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 6]"
51,rod,32,2752,1055,0,657,0,"{'ok': True, 'value': 2752, 'stdout': '2752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09472894668579102}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [86, 43, 57, 9, 43, 91, 39, 27, 70, 17, 63, 45, 30, 16, 26, 1, 90, 18, 26, 76, 29, 85, 94, 17, 14, 55, 6, 19, 18, 45, 41, 92]"
52,ilp_prod,32,539,1008,0,1024,0,"{'ok': True, 'value': 539, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cb7bacf0c22e4831b7a15c4cba8d324b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cb7bacf0c22e4831b7a15c4cba8d324b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 541.818 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -539 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -539, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -541.818 to -539\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                539.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n539.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17403411865234375}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [28, 62, 54, 18, 77, 4]
consumption (rows=resources) = [[22, 22, 22, 24, 15, 23], [23, 30, 24, 12, 7, 8], [10, 13, 2, 26, 1, 17], [3, 27, 30, 15, 2, 20]]
capacity = [106, 97, 73, 122]
upper_bounds = [4, 3, 4, 3, 7, 4]"
53,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09986233711242676}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccb""
T = ""cca"""
54,add,8,134544195,134544195,1,134544195,1,"{'ok': True, 'value': 134544195, 'stdout': '134544195\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08965849876403809}",1,Compute: 68606340 + 65937855
55,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09220170974731445}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbb""
T = ""cbcd"""
56,knap,2,6,7,0,7,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09946107864379883}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 5]
V = [3, 1, 6]
C = 6"
57,add,8,167427491,167427491,1,167427491,1,"{'ok': True, 'value': 167427491, 'stdout': '167427491\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10359001159667969}",1,Compute: 84823042 + 82604449
58,add,8,47640343,47640343,1,47640343,1,"{'ok': True, 'value': 47640343, 'stdout': '47640343\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09971475601196289}",1,Compute: 17072502 + 30567841
59,ilp_partition,4,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11167097091674805}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 9, 8, 6]"
60,mul,8,1560294154409634,15586476016634494,0,155584896437964,0,"{'ok': True, 'value': 1560294154409634, 'stdout': '1560294154409634\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09975600242614746}",1,Compute: 39477753 * 39523378
61,knap,4,28,28,1,16,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11098456382751465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 3, 4, 8]
V = [15, 10, 13, 9]
C = 11"
62,add,8,128752292,128752292,1,128752292,1,"{'ok': True, 'value': 128752292, 'stdout': '128752292\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10984110832214355}",1,Compute: 73433479 + 55318813
63,ilp_prod,2,23,20,0,21,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_5maavy_c/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16870808601379395}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[1, 1], [1, 3]]
capacity = [6, 9]
upper_bounds = [6, 3]"
64,rod,8,144,22,0,36,0,"{'ok': True, 'value': 144, 'stdout': '144\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09164977073669434}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [18, 11, 23, 18, 2, 17, 21, 6]"
65,ilp_partition,32,1,1,1,525,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11193227767944336}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [63, 47, 32, 33, 42, 15, 92, 48, 71, 80, 40, 42, 32, 17, 32, 43, 93, 17, 21, 35, 15, 44, 25, 28]"
66,mul,32,2964103531609746162357853835996678973060342850976020369348905996,262358192175442856642701795945370,0,29764924668719548681858628233884523844649346543646866629458,0,"{'ok': True, 'value': 2964103531609746162357853835996678973060342850976020369348905996, 'stdout': '2964103531609746162357853835996678973060342850976020369348905996\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10176920890808105}",1,Compute: 56489631732703922772533348604054 * 52471638435088571328540359189074
67,rod,4,44,22,0,11,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09914326667785645}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 9, 10, 11]"
68,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09050822257995605}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 20, 24, 6, 30, 30, 23, 33, 31, 27, 44, 22, 13, 45, 12, 2]"
69,add,8,52276075,52276075,1,52276075,1,"{'ok': True, 'value': 52276075, 'stdout': '52276075\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10021638870239258}",1,Compute: 15943911 + 36332164
70,knap,8,122,109,0,113,0,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10869383811950684}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 12, 16, 7, 14, 2, 1, 15]
V = [18, 32, 18, 18, 9, 32, 22, 14]
C = 37"
71,add,4,8916,8916,1,8916,1,"{'ok': True, 'value': 8916, 'stdout': '8916\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0991823673248291}",1,Compute: 3967 + 4949
72,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1050107479095459}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""abb"""
73,knap,16,297,104,0,1076,0,"{'ok': True, 'value': 297, 'stdout': '297\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09943628311157227}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 7, 16, 3, 21, 12, 22, 16, 12, 12, 25, 5, 28, 29, 25, 19]
V = [36, 22, 39, 22, 62, 15, 37, 19, 18, 25, 41, 2, 42, 4, 15, 31]
C = 137"
74,mul,2,2835,2835,1,2835,1,"{'ok': True, 'value': 2835, 'stdout': '2835\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12982511520385742}",1,Compute: 81 * 35
75,mul{'ok': True, 'value': 18810136932214862364347267219664, 'stdout': '18810136932214862364347267219664\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11442327499389648}",1,Compute: 8498678451663054 * 2213301402000216
76,rod,4,20,20,1,14,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10297989845275879}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 10, 2, 4]"
77,ilp_prod,32,740,1000,0,1000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_dgelqnkh/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_dgelqnkh/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17389726638793945}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [92, 81, 41, 67, 61, 81]
consumption (rows=resources) = [[15, 16, 9, 18, 20, 1], [7, 10, 13, 18, 15, 12], [17, 14, 17, 6, 31, 3], [21, 3, 22, 20, 26, 22]]
capacity = [103, 104, 102, 115]
upper_bounds = [5, 6, 5, 5, 3, 5]"
78,ilp_assign,16,36,11,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0460596084594727}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1, 43, 20, 47, 30, 2], [48, 6, 17, 1, 42, 36, 26], [33, 5, 48, 36, 33, 3, 19], [6, 25, 5, 30, 17, 25, 30], [31, 18, 31, 3, 19, 22, 14], [14, 18, 4, 2, 45, 47, 16], [7, 1, 22, 25, 37, 21, 32]]"
79,add,2,147,147,1,147,1,"{'ok': True, 'value': 147, 'stdout': '147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09311747550964355}",1,Compute: 90 + 57
80,add,8,69034447,69034447,1,69034447,1,"{'ok': True, 'value': 69034447, 'stdout': '69034447\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10483384132385254}",1,Compute: 53057807 + 15976640
81,sub,32,28372911181282287614752575411386,28372911181282287614752575411386,1,28372851181282287614752575411386,0,"{'ok': True, 'value': 28372911181282287614752575411386, 'stdout': '28372911181282287614752575411386\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.098968505859375}",1,Compute: 66164621451224693688067239915085 - 37791710269942406073314664503699
82,sub,2,37,37,1,37,1,"{'ok': True, 'value': 37, 'stdout': '37\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10814380645751953}",1,Compute: 47 - 10
83,add,16,11415047921056045,11415048920656045,0,11415047921056045,1,"{'ok': True, 'value': 11415047921056045, 'stdout': '11415047921056045\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09563279151916504}",1,Compute: 9345890093739117 + 2069157827316928
84,add,32,70655675005770204266536006570357,70655674975769804266535956570357,0,70655674975769204266536006570357,0,"{'ok': True, 'value': 70655675005770204266536006570357, 'stdout': '70655675005770204266536006570357\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12156987190246582}",1,Compute: 29600001632726404716408853770741 + 41055673373043799550127152799616
85,mul,16,79366828826412508166893158244266,7930447528786215555651,0,793194664186486559556447558871,0,"{'ok': True, 'value': 79366828826412508166893158244266, 'stdout': '79366828826412508166893158244266\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09645462036132812}",1,Compute: 7953987887259321 * 9978243612055546
86,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0985867977142334}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 11, 2, 11, 19, 17, 10, 21]"
87,sub,32,77687399206652599225803013738638,21290157365770537270642827662504,0,77687399206652600225802963738638,0,"{'ok': True, 'value': 77687399206652599225803013738638, 'stdout': '77687399206652599225803013738638\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09247303009033203}",1,Compute: 98977556572423136496445841401142 - 21290157365770537270642827662504
88,ilp_prod,8,73,-1,0,156,0,"{'ok': True, 'value': 75, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0b6e7130ea054fbf8fb865551cd65da6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0b6e7130ea054fbf8fb865551cd65da6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 70.75 (4)\n1  Obj 75.333333\nOptimal - objective value 75.333333\nOptimal objective 75.33333333 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n75.33333337\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1663963794708252}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 11, 17, 8]
consumption (rows=resources) = [[1, 1, 2, 8], [2, 4, 1, 4], [7, 3, 4, 4], [7, 3, 2, 2]]
capacity = [18, 30, 18, 30]
upper_bounds = [3, 6, 4, 3]"
89,mul,32,2722575453291831888484428692360297456936850643812877675008329698,7,0,2726874471675654356809424434444266996496056034464546,0,"{'ok': True, 'value': 2722575453291831888484428692360297456936850643812877675008329698, 'stdout': '2722575453291831888484428692360297456936850643812877675008329698\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10172414779663086}",1,Compute: 85435366925662331178248385509083 * 31867077432473089709753666574406
90,knap,4,23,14,0,22,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09417176246643066}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 6, 2]
V = [10, 1, 6, 13]
C = 7"
91,lcs,32,21,13,0,20,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10510897636413574}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbccacdbababcddaaadbacbbcdcabac""
T = ""dcaaaaabcbdaaaabdbadacdbbdbdaacb"""
92,ilp_prod,4,60,104,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_4l7seoi4/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16883325576782227}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8, 12]
consumption (rows=resources) = [[4, 3, 1], [3, 4, 2], [4, 3, 2]]
capacity = [14, 10, 12]
upper_bounds = [3, 3, 5]"
93,mul,2,1504,1408,0,1408,0,"{'ok': True, 'value': 1504, 'stdout': '1504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09344887733459473}",1,Compute: 32 * 47
94,rod,32,2880,2231,0,90,0,"{'ok': True, 'value': 2880, 'stdout': '2880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09130978584289551}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [90, 69, 49, 16, 85, 46, 3, 56, 61, 26, 37, 14, 79, 37, 37, 92, 24, 33, 77, 96, 94, 83, 44, 24, 71, 50, 76, 32, 87, 52, 81, 35]"
95,mul,2,8633,10523,0,8623,0,"{'ok': True, 'value': 8633, 'stdout': '8633\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09846639633178711}",1,Compute: 89 * 97
96,add,16,5511749687394973,5511759687394973,0,5511750087394973,0,"{'ok': True, 'value': 5511749687394973, 'stdout': '5511749687394973\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09160780906677246}",1,Compute: 3465799601861146 + 2045950085533827
97,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09970951080322266}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""bc"""
98,mul,4,54244113,2400,0,54181183,0,"{'ok': True, 'value': 54244113, 'stdout': '54244113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10110998153686523}",1,Compute: 5461 * 9933
99,ilp_partition,8,0,1,0,8,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10117053985595703}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 10, 24, 9, 6, 4, 1, 22]"
100,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1010749340057373}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 1, 2]"
101,ilp_assign,8,30,35,0,60,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dqxxjtfs/main.py"", line 35, in <module>\n    res = hungarian_algorithm(C)\n  File ""/tmp/cot_exec_dqxxjtfs/main.py"", line 17, in hungarian_algorithm\n    smallest_uncovered = min([cost_matrix[i][j] for i, j in covered if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2076737880706787}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 18, 7, 12, 11, 5, 9], [22, 15, 23, 22, 2, 10, 4], [15, 4, 14, 10, 18, 17, 18], [17, 5, 10, 15, 16, 20, 15], [11, 12, 1, 24, 3, 10, 24], [2, 18, 18, 6, 13, 16, 4], [24, 3, 11, 6, 10, 1, 8]]"
102,sub,8,23756589,23756589,1,23756589,1,"{'ok': True, 'value': 23756589, 'stdout': '23756589\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09040164947509766}",1,Compute: 94445299 - 70688710
103,mul,4,6743680,6868480,0,6913280,0,"{'ok': True, 'value': 6743680, 'stdout': '6743680\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10539817810058594}",1,Compute: 2056 * 3280
104,lcs,16,8,7,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09598612785339355}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babbdcdcbacabdbd""
T = ""bcaccadbcccdadc"""
105,rod,16,384,54,0,236,0,"{'ok': True, 'value': 384, 'stdout': '384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0930933952331543}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [24, 31, 13, 24, 22, 40, 32, 46, 34, 36, 2, 9, 28, 10, 32, 32]"
106,ilp_partition,16,0,1,0,362,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09939169883728027}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 18, 32, 26, 6, 31, 15, 25, 48, 31, 13, 44, 48, 31, 8, 14]"
107,add,8,87766751,9366756,0,87766751,1,"{'ok': True, 'value': 87766751, 'stdout': '87766751\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10404276847839355}",1,Compute: 64630621 + 23136130
108,mul,16,10928910787873824578550672238704,24234476393334589989490142007606176,0,110059709961676645342662464,0,"{'ok': True, 'value': 10928910787873824578550672238704, 'stdout': '10928910787873824578550672238704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1000363826751709}",1,Compute: 4606426660049766 * 2372535501901544
109,ilp_partition,16,0,1,0,129,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1051027774810791}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [43, 32, 21, 5, 1, 7, 13, 33, 19, 29, 36, 48, 31, 30, 23, 43]"
110,ilp_prod,16,134,180,0,185,0,"{'ok': True, 'value': 161, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bfcd5619c7514047b3f66fcac7817c2d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bfcd5619c7514047b3f66fcac7817c2d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 136.51648 (6)\n2  Obj 161.28155\nOptimal - objective value 161.28155\nOptimal objective 161.2815534 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n161.2815568\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17369484901428223}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4, 46, 30, 37, 5]
consumption (rows=resources) = [[5, 14, 6, 16, 14, 8], [10, 16, 16, 12, 3, 2], [3, 6, 5, 13, 3, 7], [13, 3, 8, 3, 2, 15]]
capacity = [36, 40, 41, 41]
upper_bounds = [3, 3, 3, 3, 3, 3]"
111,mul,16,13480384972098610749912585611598,14646,0,13411841086445478765355644637343444,0,"{'ok': True, 'value': 13480384972098610749912585611598, 'stdout': '13480384972098610749912585611598\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09352827072143555}",1,Compute: 5184737684821213 * 2600012920916646
112,lcs,32,19,17,0,14,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10852289199829102}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddccababccbcaaabdcdbbbcdadaabca""
T = ""dabdbdddcbabcbcbbaacdabccbbabbbc"""
113,rod,8,80,22,0,32,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10063767433166504}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 20, 7, 6, 16, 23, 1, 14]"
114,ilp_assign,2,3,7,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21620798110961914}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [2, 5]]"
115,knap,2,9,6,0,24,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10310840606689453}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 2]
V = [6, 3, 3]
C = 4"
116,ilp_assign,2,5,8,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xp9ah_nl/main.py"", line 36, in <module>\n    res, assignments = assignment_problem(C)\n  File ""/tmp/cot_exec_xp9ah_nl/main.py"", line 33, in assignment_problem\n    return C.sum() + min_uncov * len(assignments), assignments\nUnboundLocalError: local variable \'min_uncov\' referenced before assignment\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2407073974609375}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 3], [2, 6]]"
117,knap,32,1890,1085,0,1043,0,"{'ok': True, 'value': 1890, 'stdout': '1890\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10555720329284668}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 44, 6, 19, 64, 23, 14, 58, 4, 56, 2, 26, 16, 17, 25, 3, 34, 54, 23, 55, 21, 22, 7, 22, 56, 34, 50, 35, 54, 28, 4, 34]
V = [61, 30, 123, 5, 90, 89, 57, 3, 27, 52, 76, 75, 118, 77, 110, 99, 101, 97, 128, 14, 83, 103, 123, 109, 38, 23, 4, 73, 60, 89, 12, 44]
C = 469"
118,mul,8,2263994500342252,220254837966936,0,22666666659387,0,"{'ok': True, 'value': 2263994500342252, 'stdout': '2263994500342252\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11382055282592773}",1,Compute: 84848594 * 26682758
119,add,4,10447,10447,1,10447,1,"{'ok': True, 'value': 10447, 'stdout': '10447\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0978555679321289}",1,Compute: 3786 + 6661
120,ilp_assign,16,88,110,0,104,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.422410249710083}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 41, 31, 20, 36, 37, 23], [30, 41, 13, 23, 47, 47, 25], [14, 35, 38, 37, 34, 3, 12], [2, 38, 37, 28, 7, 22, 35], [7, 27, 42, 27, 37, 19, 48], [21, 20, 37, 40, 26, 37, 19], [5, 36, 27, 15, 38, 18, 29]]"
121,lcs,8,5,5,1,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10719156265258789}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadbccba""
T = ""cccaabacc"""
122,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11222124099731445}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 4, 10, 6]"
123,sub,16,1403592886388150,14035828863881750,0,1403592886388160,0,"{'ok': True, 'value': 1403592886388150, 'stdout': '1403592886388150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1070098876953125}",1,Compute: 6896020900369735 - 5492428013981585
124,knap,16,369,142,0,1063,0,"{'ok': True, 'value': 369, 'stdout': '369\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11885738372802734}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 18, 27, 16, 31, 6, 11, 10, 17, 26, 10, 27, 26, 18, 12, 25]
V = [50, 26, 37, 52, 51, 18, 4, 11, 62, 22, 5, 1, 6, 4, 62, 16]
C = 142"
125,ilp_assign,2,5,4,0,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2246851921081543}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 6], [6, 2]]"
126,ilp_prod,32,519,0,0,1000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ks24qc1g/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_ks24qc1g/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17171549797058105}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [31, 89, 49, 77, 47, 84]
consumption (rows=resources) = [[11, 2, 30, 31, 21, 18], [16, 2, 28, 20, 15, 19], [8, 29, 14, 20, 23, 1], [7, 14, 32, 5, 8, 8]]
capacity = [125, 77, 97, 116]
upper_bounds = [4, 3, 3, 3, 4, 4]"
127,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09127044677734375}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 2, 3, 1]"
128,ilp_partition,16,1,1,1,242,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10350489616394043}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 11, 12, 40, 15, 12, 20, 9, 45, 13, 44, 25, 31, 38, 46, 29]"
129,add,32,142343961638261225687753382685123,142404061638261125683860062677983,0,142343961638261225687753382685123,1,"{'ok': True, 'value': 142343961638261225687753382685123, 'stdout': '142343961638261225687753382685123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09320497512817383}",1,Compute: 54228931452042965018460051477985 + 88115030186218260669293331207138
130,sub,16,395791282878155,395889282877155,0,395791282877755,0,"{'ok': True, 'value': 395791282878155, 'stdout': '395791282878155\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09066295623779297}",1,Compute: 1888153673086515 - 1492362390208360
131,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09906268119812012}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddc""
T = ""cdcd"""
132,ilp_partition,4,3,0,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10057234764099121}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 3, 12]"
133,add,8,93888010,184870110,0,93888010,1,"{'ok': True, 'value': 93888010, 'stdout': '93888010\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09923982620239258}",1,Compute: 83778824 + 10109186
134,mul,8,5047668620659288,71561359,0,4998489643381888,0,"{'ok': True, 'value': 5047668620659288, 'stdout': '5047668620659288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10159754753112793}",1,Compute: 70536232 * 71561359
135,sub,8,12179744,12179744,1,12179744,1,"{'ok': True, 'value': 12179744, 'stdout': '12179744\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09727048873901367}",1,Compute: 93399485 - 81219741
136,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09420990943908691}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 20, 44, 48, 38, 48, 26, 26, 45, 14, 47, 22, 22, 20, 16, 25]"
137,ilp_prod,16,142,138,0,165,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_f99h_bba/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_f99h_bba/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1730506420135498}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 38, 28, 28, 33, 39]
consumption (rows=resources) = [[15, 9, 13, 16, 13, 15], [16, 12, 1, 15, 15, 16], [1, 9, 12, 6, 10, 5], [13, 15, 1, 1, 13, 11]]
capacity = [45, 61, 50, 54]
upper_bounds = [3, 3, 3, 3, 3, 3]"
138,ilp_prod,32,276,170,0,105,0,"{'ok': True, 'value': 315, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8ed23e8876c04ed49b861f7178517e2b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8ed23e8876c04ed49b861f7178517e2b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 1254.8928 (6)\n3  Obj 315.43906\nOptimal - objective value 315.43906\nOptimal objective 315.4390625 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n315.4390625\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18943357467651367}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 49, 51, 53, 58, 5]
consumption (rows=resources) = [[23, 28, 26, 32, 6, 2], [16, 1, 20, 14, 8, 25], [17, 16, 7, 16, 23, 23], [28, 27, 16, 4, 7, 22]]
capacity = [97, 90, 85, 104]
upper_bounds = [3, 3, 3, 3, 3, 3]"
139,sub,4,608,,0,608,1,"{'ok': True, 'value': 608, 'stdout': '608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10156607627868652}",1,Compute: 4212 - 3604
140,add,16,10316614316289274,,0,10316614316289274,1,"{'ok': True, 'value': 10316614316289274, 'stdout': '10316614316289274\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1099555492401123}",1,Compute: 8674571061386024 + 1642043254903250
141,knap,2,6,8,0,11,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10146260261535645}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 3]
V = [6, 3, 5]
C = 4"
142,rod,32,1952,1088,0,647,0,"{'ok': True, 'value': 1952, 'stdout': '1952\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10822772979736328}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [61, 19, 54, 16, 22, 50, 40, 93, 16, 14, 38, 12, 68, 83, 63, 38, 57, 5, 56, 12, 43, 14, 94, 58, 7, 42, 86, 17, 86, 56, 1, 13]"
143,knap,16,502,1034,0,1064,0,"{'ok': True, 'value': 502, 'stdout': '502\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09304428100585938}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 30, 19, 27, 28, 9, 8, 8, 1, 25, 13, 10, 22, 30, 29, 19]
V = [52, 24, 64, 36, 49, 14, 55, 60, 48, 51, 1, 64, 45, 34, 39, 35]
C = 148"
144,rod,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10209345817565918}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
145,sub,32,20207079233867336909939730992523,20207079233867346910039730413523,0,20207079233867336909939730993523,0,"{'ok': True, 'value': 20207079233867336909939730992523, 'stdout': '20207079233867336909939730992523\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11027956008911133}",1,Compute: 92616905796047816563274873860402 - 72409826562180479653335142867879
146,ilp_prod,16,146,129,0,150,0,"{'ok': True, 'value': 146, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/040c9b08f4e649758fb6a908a2134423-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/040c9b08f4e649758fb6a908a2134423-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 174.072 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -107 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -136 found by DiveCoefficient after 487 iterations and 0 nodes (0.02 seconds)\nCbc0031I 3 added rows had average density of 6\nCbc0013I At root node, 3 cuts changed objective from -174.07222 to -149.71209 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 267 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 133 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -136 best solution, best possible -149.71209 (0.02 seconds)\nCbc0012I Integer solution of -141 found by DiveCoefficient after 516 iterations and 3 nodes (0.02 seconds)\nCbc0012I Integer solution of -146 found by rounding after 544 iterations and 6 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -146, took 591 iterations and 10 nodes (0.02 seconds)\nCbc0032I Strong branching done 24 times (43 iterations), fathomed 0 nodes and fixed 0 variables\nCbc0035I Maximum depth 2, 2 variables fixed on reduced cost\nCuts at root node changed objective from -174.072 to -149.712\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 128 times and created 318 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 128 times and created 187 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                146.00000000\nEnumerated nodes:               10\nTotal iterations:               591\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n146.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2035970687866211}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [34, 15, 32, 39, 9, 34]
consumption (rows=resources) = [[8, 14, 2, 5, 5, 13], [6, 2, 14, 14, 1, 2], [4, 12, 10, 11, 9, 9], [14, 2, 16, 15, 13, 3]]
capacity = [48, 47, 50, 37]
upper_bounds = [3, 3, 3, 3, 3, 3]"
147,ilp_partition,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14897966384887695}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 1, 1]"
148,rod,32,1184,1059,0,644,0,"{'ok': True, 'value': 1184, 'stdout': '1184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10332989692687988}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [37, 7, 67, 3, 22, 74, 69, 92, 13, 91, 43, 86, 82, 44, 29, 95, 35, 39, 54, 80, 44, 18, 73, 23, 95, 18, 18, 21, 91, 35, 38, 16]"
149,add,8,37329761,37129761,0,37330761,0,"{'ok': True, 'value': 37329761, 'stdout': '37329761\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10910153388977051}",1,Compute: 20088154 + 17241607
150,add,32,28705699853380252032059368880704,28705699853380252032059368880694,0,28705699853380252031959368880694,0,"{'ok': True, 'value': 28705699853380252032059368880704, 'stdout': '28705699853380252032059368880704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10986208915710449}",1,Compute: 14229469372967582792391213225839 + 14476230480412669239668155654865
151,rod,32,2400,1035,0,1305,0,"{'ok': True, 'value': 2400, 'stdout': '2400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12750935554504395}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [75, 41, 31, 86, 5, 12, 87, 6, 79, 75, 26, 50, 43, 17, 44, 87, 89, 5, 17, 52, 67, 55, 61, 96, 34, 42, 10, 87, 4, 52, 20, 6]"
152,add,16,12222036938391004,12122034442485034,0,12222037538491004,0,"{'ok': True, 'value': 12222036938391004, 'stdout': '12222036938391004\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10710930824279785}",1,Compute: 3483833097914847 + 8738203840476157
153,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0957193374633789}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 14, 14, 15, 8, 2, 4, 6]"
154,add,2,148,148,1,148,1,"{'ok': True, 'value': 148, 'stdout': '148\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10026240348815918}",1,Compute: 53 + 95
155,mul,8,1041199764392100,2287990,0,1050048864373300,0,"{'ok': True, 'value': 1041199764392100, 'stdout': '1041199764392100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12656259536743164}",1,Compute: 19912790 * 52287990
156,ilp_assign,32,159,110,0,205,0,"{'ok': True, 'value': 159, 'stdout': '159\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4112277030944824}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[88, 26, 16, 95, 33, 48, 90], [86, 28, 57, 25, 6, 38, 57], [2, 15, 22, 54, 73, 18, 23], [96, 32, 59, 88, 83, 77, 26], [65, 77, 42, 61, 85, 96, 95], [60, 31, 46, 63, 92, 36, 68], [33, 82, 60, 59, 15, 17, 30]]"
157,ilp_assign,32,119,117,0,114,0,"{'ok': True, 'value': 119, 'stdout': '119\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4661993980407715}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 39, 73, 77, 79, 38, 56], [66, 66, 49, 13, 4, 51, 55], [61, 10, 7, 65, 75, 62, 44], [78, 35, 58, 85, 61, 73, 95], [4, 13, 18, 52, 11, 10, 7], [10, 50, 70, 91, 34, 62, 17], [3, 32, 2, 50, 63, 32, 5]]"
158,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09353256225585938}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""cd"""
159,ilp_prod,32,279,100,0,108,0,"{'ok': True, 'value': 279, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1354f14de6294ff392d01c2cb683ccfd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1354f14de6294ff392d01c2cb683ccfd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 315.87 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -230 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 2 columns\nCbc0012I Integer solution of -279 found by DiveCoefficient after 52 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 5.6666667\nCbc0013I At root node, 3 cuts changed objective from -315.87037 to -279.00097 in 20 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 47 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 29 row cuts average 5.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -279, took 52 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -315.87 to -279.001\nProbing was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 20 times and created 47 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 20 times and created 29 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                279.00000000\nEnumerated nodes:               0\nTotal iterations:               52\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n279.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18106389045715332}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 12, 79, 6, 36, 58]
consumption (rows=resources) = [[21, 9, 19, 10, 23, 15], [28, 8, 19, 6, 13, 32], [6, 15, 10, 2, 13, 8], [7, 8, 22, 4, 7, 18]]
capacity = [124, 89, 65, 79]
upper_bounds = [3, 4, 3, 10, 5, 3]"
160,ilp_prod,4,63,53,0,55,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6nt2wthv/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16971850395202637}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 4, 9]
consumption (rows=resources) = [[1, 2, 2], [3, 4, 1], [2, 3, 2]]
capacity = [15, 8, 15]
upper_bounds = [3, 3, 7]"
161,rod,4,36,14,0,9,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09929156303405762}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 7, 5, 9]"
162,mul,32,2681334935103454121594729133050217257145432875092542651680412608,1,0,27040146959828974959447854344456999694464464,0,"{'ok': True, 'value': 2681334935103454121594729133050217257145432875092542651680412608, 'stdout': '2681334935103454121594729133050217257145432875092542651680412608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10384750366210938}",1,Compute: 71349138771841844743573061246282 * 37580480735412199996359696514144
163,ilp_assign,32,152,110,0,246,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40392231941223145}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[60, 77, 15, 31, 76, 88, 51], [65, 6, 29, 68, 24, 27, 3], [41, 3, 4, 54, 22, 92, 67], [3, 54, 3, 22, 93, 29, 47], [77, 69, 44, 50, 66, 75, 88], [25, 72, 45, 15, 34, 14, 16], [56, 59, 32, 91, 96, 50, 57]]"
164,knap,2,6,10,0,8,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1239919662475586}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 2, 4]
V = [5, 6, 4]
C = 5"
165,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10049986839294434}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""bcc"""
166,knap,4,26,22,0,16,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09547615051269531}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 1, 4, 4]
V = [15, 11, 5, 6]
C = 7"
167,lcs,16,7,6,0,8,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09337806701660156}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaabdbbbdcbadabd""
T = ""ddddcadcaacddbb"""
168,add,16,9247065117131173,9247065117131173,1,9247065117131173,1,"{'ok': True, 'value': 9247065117131173, 'stdout': '9247065117131173\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08187437057495117}",1,Compute: 6120433797706751 + 3126631319424422
169,knap,32,1614,1006,0,1088,0,"{'ok': True, 'value': 1614, 'stdout': '1614\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1246795654296875}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 40, 21, 55, 21, 23, 62, 58, 32, 50, 45, 8, 28, 48, 20, 49, 32, 59, 37, 63, 4, 26, 22, 34, 15, 38, 55, 17, 38, 62, 21, 53]
V = [111, 115, 64, 101, 19, 55, 6, 26, 96, 39, 122, 120, 38, 63, 111, 37, 18, 84, 58, 40, 74, 29, 114, 32, 5, 64, 111, 79, 92, 77, 26, 71]
C = 583"
170,rod,2,4,4,1,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_i2d9m5jt/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_i2d9m5jt/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11397838592529297}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
171,sub,16,5226907750586545,2023912395115828,0,5226907750586545,1,"{'ok': True, 'value': 5226907750586545, 'stdout': '5226907750586545\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10106039047241211}",1,Compute: 7250820145702373 - 2023912395115828
172,mul,16,15994123121968997028877584864702,16000000000000000,0,1617037885852718149649646682895426,0,"{'ok': True, 'value': -530169434162031170, 'stdout': '-530169434162031170\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21293187141418457}",0,Compute: 1632279367682487 * 9798643197136946
173,rod,16,608,46,0,84,0,"{'ok': True, 'value': 608, 'stdout': '608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09897279739379883}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [38, 47, 6, 45, 39, 27, 4, 39, 36, 16, 4, 24, 14, 28, 6, 44]"
174,knap,32,1832,486,0,1047,0,"{'ok': True, 'value': 1832, 'stdout': '1832\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10581827163696289}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [50, 51, 11, 9, 59, 1, 49, 12, 2, 40, 42, 10, 57, 58, 30, 27, 30, 15, 49, 59, 56, 40, 26, 12, 3, 29, 46, 16, 17, 15, 6, 45]
V = [6, 90, 100, 113, 24, 57, 114, 80, 78, 13, 98, 107, 6, 51, 38, 127, 24, 103, 117, 119, 65, 67, 63, 16, 13, 55, 2, 36, 81, 99, 85, 120]
C = 486"
175,mul,32,6687296950036859569017933022581525571843156897242856455484509745,1000000007,0,6708862844466223688583744789769543644889429455647666456754744645,0,"{'ok': True, 'value': 6687296950036859569017933022581525571843156897242856455484509745, 'stdout': '6687296950036859569017933022581525571843156897242856455484509745\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11034798622131348}",1,Compute: 71168497101578477390325807324433 * 93964285075348866254594072895265
176,sub,16,4133727864476152,4133727864476152,1,4133727864476152,1,"{'ok': True, 'value': 4133727864476152, 'stdout': '4133727864476152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1139669418334961}",1,Compute: 8374048209331522 - 4240320344855370
177,mul,2,663,663,1,663,1,"{'ok': True, 'value': 663, 'stdout': '663\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10205674171447754}",1,Compute: 17 * 39
178,lcs,8,6,4,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10373830795288086}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdcbddb""
T = ""ccdccabb"""
179,lcs,32,21,16,0,20,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10015702247619629}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbcdaddcbacdaababdadbcbadbbdadb""
T = ""dddcbaabaaabdcbcccabdcbcbaddcabbc"""
180,ilp_prod,8,81,100,0,0,0,"{'ok': True, 'value': 81, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a5a1893ae45649b6afcaa8193e49540c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a5a1893ae45649b6afcaa8193e49540c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 84.6 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -69 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -78 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -81 found by DiveCoefficient after 6 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 4\nCbc0013I At root node, 3 cuts changed objective from -84.6 to -81 in 5 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 7 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 9 row cuts average 3.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -81, took 6 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -84.6 to -81\nProbing was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 5 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 5 times and created 9 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 5 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                81.00000000\nEnumerated nodes:               0\nTotal iterations:               6\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n81.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1813187599182129}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 23, 17, 9]
consumption (rows=resources) = [[2, 6, 6, 3], [4, 2, 8, 4], [7, 8, 6, 3], [5, 5, 7, 2]]
capacity = [21, 17, 30, 20]
upper_bounds = [4, 3, 3, 4]"
181,ilp_assign,2,3,3,1,9,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22658491134643555}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [6, 2]]"
182,add,2,66,66,1,66,1,"{'ok': True, 'value': 66, 'stdout': '66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09611082077026367}",1,Compute: 45 + 21
183,ilp_prod,16,95,115,0,104,0,"{'ok': True, 'value': 95, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d116c5c3a9ab48dabd9b057061068c07-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d116c5c3a9ab48dabd9b057061068c07-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 111.452 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -79 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -95 found by DiveCoefficient after 12 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 5\nCbc0013I At root node, 2 cuts changed objective from -106.55556 to -95 in 9 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 11 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -95, took 12 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -106.556 to -95\nProbing was tried 9 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 9 times and created 11 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                95.00000000\nEnumerated nodes:               0\nTotal iterations:               12\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n95.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18567323684692383}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 32, 15, 16, 4, 9]
consumption (rows=resources) = [[1, 5, 5, 10, 3, 5], [16, 5, 15, 12, 10, 15], [8, 16, 2, 7, 9, 11], [2, 8, 8, 3, 11, 1]]
capacity = [58, 49, 42, 52]
upper_bounds = [3, 3, 3, 4, 4, 3]"
184,ilp_partition,4,2,0,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11168146133422852}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 1, 9, 5]"
185,rod,4,20,13,0,9,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09951257705688477}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 7, 6, 1]"
186,ilp_prod,16,162,150,0,1080,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_nbs_4lze/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""Quantity"", range(6), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16054821014404297}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 16, 39, 30, 10, 36]
consumption (rows=resources) = [[6, 9, 7, 5, 16, 14], [6, 16, 11, 10, 14, 8], [7, 9, 2, 4, 7, 11], [11, 7, 4, 3, 6, 4]]
capacity = [45, 35, 34, 32]
upper_bounds = [3, 3, 3, 3, 3, 3]"
187,mul,2,4641,4641,1,4641,1,"{'ok': True, 'value': 4641, 'stdout': '4641\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09032917022705078}",1,Compute: 51 * 91
188,ilp_assign,4,9,11,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dfqb410m/main.py"", line 40, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_dfqb410m/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09605264663696289}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 3, 2], [5, 3, 3, 10], [3, 2, 7, 1], [10, 4, 2, 11]]"
189,ilp_assign,16,76,44,0,-2,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38985371589660645}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[46, 20, 34, 2, 44, 17, 36], [18, 28, 29, 13, 42, 7, 41], [26, 40, 35, 31, 16, 25, 9], [26, 42, 45, 23, 24, 2, 19], [18, 23, 33, 42, 15, 33, 31], [18, 22, 44, 31, 31, 15, 16], [2, 17, 8, 32, 15, 42, 44]]"
190,mul,8,4003477204791939,23216368,0,3998145464346399,0,"{'ok': True, 'value': 4003477204791939, 'stdout': '4003477204791939\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1067197322845459}",1,Compute: 52859193 * 75738523
191,lcs,16,9,7,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10175180435180664}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abadcbbbdcddabba""
T = ""aabccdbbadacdcd"""
192,knap,16,374,1067,0,1073,0,"{'ok': True, 'value': 374, 'stdout': '374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08596682548522949}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 1, 27, 31, 15, 11, 27, 10, 14, 28, 18, 22, 7, 21, 18, 14]
V = [3, 13, 1, 31, 29, 23, 38, 24, 21, 33, 43, 48, 57, 60, 14, 56]
C = 135"
193,ilp_partition,32,0,1,0,525,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09537196159362793}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 28, 31, 52, 70, 57, 76, 12, 89, 90, 3, 40, 65, 74, 26, 10, 20, 81, 52, 42, 39, 4, 78, 38]"
194,rod,8,184,22,0,30,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10230422019958496}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 24, 14, 17, 19, 4, 24, 23]"
195,lcs,16,8,7,0,6,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08530831336975098}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdaccadabdbbcbcc""
T = ""cbccbcdbdaaddcac"""
196,knap,4,31,26,0,26,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09290647506713867}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 3, 2]
V = [9, 15, 16, 15]
C = 7"
197,ilp_prod,8,84,100,0,108,0,"{'ok': True, 'value': 84, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/592bd56b90844b9b99194b1282dd5c66-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/592bd56b90844b9b99194b1282dd5c66-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 72.25 (4)\n1  Obj 84\nOptimal - objective value 84\nOptimal objective 84 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n84.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16639137268066406}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 24, 11, 11]
consumption (rows=resources) = [[2, 2, 7, 8], [5, 2, 8, 8], [5, 7, 8, 3], [4, 5, 2, 1]]
capacity = [28, 22, 20, 16]
upper_bounds = [4, 3, 3, 3]"
198,knap,2,16,16,1,16,1,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10794281959533691}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 3]
V = [9, 7, 7]
C = 4"
199,add,4,9342,9342,1,9342,1,"{'ok': True, 'value': 9342, 'stdout': '9342\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09944701194763184}",1,Compute: 1487 + 7855
200,sub,2,17,17,1,17,1,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10350513458251953}",1,Compute: 35 - 18
201,add,32,145148944454944894345471951259795,145148944454944894345471951259895,0,145148944454944894345471951259825,0,"{'ok': True, 'value': 145148944454944894345471951259795, 'stdout': '145148944454944894345471951259795\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10316848754882812}",1,Compute: 58126604858379902645489566581267 + 87022339596564991699982384678528
202,sub,8,44102101,44002101,0,44102101,1,"{'ok': True, 'value': 44102101, 'stdout': '44102101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10962319374084473}",1,Compute: 93724724 - 49622623
203,sub,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09392952919006348}",1,Compute: 49 - 43
204,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1035773754119873}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 10, 3, 10, 2, 19, 11, 5]"
205,ilp_prod,32,405,1053,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_sa6et5y0/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_sa6et5y0/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1714777946472168}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 66, 23, 58, 81, 84]
consumption (rows=resources) = [[15, 24, 17, 32, 11, 15], [26, 6, 25, 7, 6, 27], [5, 11, 8, 22, 14, 25], [14, 18, 20, 15, 7, 10]]
capacity = [91, 72, 71, 104]
upper_bounds = [3, 3, 3, 3, 5, 3]"
206,add,32,64931284227890449046432294254620,64931284227890449046432294254620,1,64931284227890449046432294254620,1,"{'ok': True, 'value': 64931284227890449046432294254620, 'stdout': '64931284227890449046432294254620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08992743492126465}",1,Compute: 54204710550432681138290607435991 + 10726573677457767908141686818629
207,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10008025169372559}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""bdb"""
208,ilp_partition,16,1,100,0,1,1,"{'ok': True, 'value': 273, 'stdout': '273\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1000511646270752}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 24, 43, 6, 31, 31, 6, 5, 25, 31, 14, 24, 19, 26, 24, 9]"
209,mul,2,2346,2316,0,2316,0,"{'ok': True, 'value': 2346, 'stdout': '2346\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09270334243774414}",1,Compute: 51 * 46
210,sub,2,41,41,1,41,1,"{'ok': True, 'value': 41, 'stdout': '41\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0914621353149414}",1,Compute: 75 - 34
211,rod,16,352,60,0,84,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_iyrak90a/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_iyrak90a/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08519744873046875}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [22, 10, 38, 15, 25, 9, 15, 33, 39, 29, 31, 45, 37, 20, 30, 7]"
212,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11078310012817383}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabc""
T = ""bbdac"""
213,knap,2,10,18,0,18,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10960197448730469}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 2]
V = [10, 8, 10]
C = 2"
214,mul,2,825,825,1,825,1,"{'ok': True, 'value': 825, 'stdout': '825\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10315489768981934}",1,Compute: 15 * 55
215,add,4,4964,,0,4964,1,"{'ok': True, 'value': 4964, 'stdout': '4964\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10471153259277344}",1,Compute: 3265 + 1699
216,ilp_assign,8,26,0,0,33,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41881680488586426}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 11, 13, 20, 5, 13, 24], [15, 12, 9, 13, 11, 9, 1], [24, 8, 22, 4, 10, 2, 16], [10, 18, 11, 1, 9, 11, 1], [4, 13, 16, 5, 1, 10, 13], [24, 14, 7, 9, 11, 14, 20], [20, 6, 4, 16, 12, 7, 3]]"
217,mul,2,3102,3082,0,3082,0,"{'ok': True, 'value': 3102, 'stdout': '3102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11918425559997559}",1,Compute: 66 * 47
218,ilp_assign,16,87,110,0,105,0,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4229607582092285}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[41, 9, 40, 5, 37, 34, 39], [21, 41, 15, 5, 12, 44, 43], [48, 42, 20, 21, 19, 19, 26], [29, 2, 17, 25, 24, 25, 39], [22, 14, 10, 4, 46, 23, 12], [32, 48, 28, 22, 45, 30, 23], [42, 20, 14, 24, 7, 47, 24]]"
219,mul,32,3168103114931877877514626244802979921496706616837871532660224590,The answer is a very large number.,0,3178352344490576928354488915464366866643043434664659845344680,0,"{'ok': True, 'value': 3168103114931877877514626244802979921496706616837871532660224590, 'stdout': '3168103114931877877514626244802979921496706616837871532660224590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11663413047790527}",1,Compute: 47795592023044354569903706150885 * 66284420400199168813556657735734
220,sub,16,686939461617565,6869284461617565,0,686939456161756,0,"{'ok': True, 'value': 686939461617565, 'stdout': '686939461617565\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10413384437561035}",1,Compute: 9204793652073373 - 8517854190455808
221,add,4,9408,9408,1,9408,1,"{'ok': True, 'value': 9408, 'stdout': '9408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10396718978881836}",1,Compute: 1095 + 8313
222,ilp_prod,16,204,159,0,1035,0,"{'ok': True, 'value': 204, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/42f9b480478a411a9d79b4a082076b96-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/42f9b480478a411a9d79b4a082076b96-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 221 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -172 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -204 found by DiveCoefficient after 8 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 5\nCbc0013I At root node, 3 cuts changed objective from -221 to -204 in 5 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 10 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 10 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -204, took 8 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -221 to -204\nProbing was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 5 times and created 10 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 5 times and created 10 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                204.00000000\nEnumerated nodes:               0\nTotal iterations:               8\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n204.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20200157165527344}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 23, 44, 21, 44, 32]
consumption (rows=resources) = [[16, 10, 14, 10, 1, 5], [1, 5, 13, 9, 14, 1], [8, 11, 3, 6, 7, 2], [3, 15, 4, 11, 15, 6]]
capacity = [47, 50, 50, 34]
upper_bounds = [3, 3, 3, 3, 3, 5]"
223,ilp_assign,4,10,12,0,0,0,"{'ok': True, 'value': -5, 'stdout': '-5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22379565238952637}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5, 6, 1], [11, 3, 12, 7], [2, 1, 9, 3], [6, 4, 4, 2]]"
224,sub,4,1674,1674,1,1674,1,"{'ok': True, 'value': 1674, 'stdout': '1674\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10751199722290039}",1,Compute: 3444 - 1770
225,ilp_prod,32,208,1102,0,1035,0,"{'ok': True, 'value': 209, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cced997cb1d44ef3aeedbac5bdca2831-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cced997cb1d44ef3aeedbac5bdca2831-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 1245.5755 (6)\n4  Obj 209.28079\nOptimal - objective value 209.28079\nOptimal objective 209.2807882 - 4 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n209.28078774\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20124077796936035}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [74, 48, 3, 12, 64, 31]
consumption (rows=resources) = [[27, 19, 2, 11, 4, 27], [18, 24, 20, 4, 3, 11], [26, 10, 6, 27, 22, 1], [30, 14, 2, 6, 27, 16]]
capacity = [71, 120, 77, 69]
upper_bounds = [3, 3, 6, 3, 3, 3]"
226,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10544562339782715}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddba""
T = ""cab"""
227,ilp_assign,16,76,114,0,105,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4333152770996094}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[35, 8, 14, 27, 17, 43, 39], [4, 37, 40, 12, 37, 19, 29], [12, 11, 41, 37, 6, 42, 45], [46, 35, 47, 15, 39, 39, 33], [7, 24, 18, 37, 20, 23, 24], [31, 21, 15, 33, 48, 24, 19], [17, 3, 2, 16, 43, 20, 45]]"
228,ilp_assign,8,54,35,0,20,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21806097030639648}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 6, 16, 21, 19, 20, 16], [24, 24, 19, 19, 14, 15, 21], [9, 6, 11, 16, 23, 17, 18], [23, 16, 18, 10, 12, 4, 4], [18, 7, 7, 11, 3, 7, 12], [2, 7, 3, 18, 2, 9, 8], [7, 16, 24, 24, 15, 19, 13]]"
229,rod,2,10,6,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_58sqoshv/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_58sqoshv/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1156301498413086}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 6]"
230,add,4,15753,15753,1,15753,1,"{'ok': True, 'value': 15753, 'stdout': '15753\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11053204536437988}",1,Compute: 7155 + 8598
231,ilp_prod,4,20,30,0,30,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_pyh40l8w/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1737203598022461}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 10, 10]
consumption (rows=resources) = [[3, 2, 4], [3, 4, 4], [3, 1, 4]]
capacity = [14, 8, 10]
upper_bounds = [3, 3, 3]"
232,ilp_prod,2,14,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xm7whgzg/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17398333549499512}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 7]
consumption (rows=resources) = [[3, 3], [1, 1]]
capacity = [7, 6]
upper_bounds = [3, 3]"
233,ilp_prod,4,22,39,0,39,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0yg9lsz8/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16455078125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 10, 9]
consumption (rows=resources) = [[4, 4, 4], [3, 1, 2], [2, 4, 3]]
capacity = [13, 15, 8]
upper_bounds = [3, 3, 3]"
234,ilp_partition,32,1,14,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10866355895996094}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 32, 34, 71, 75, 56, 28, 31, 71, 31, 34, 71, 6, 92, 12, 36, 86, 77, 42, 30, 96, 11, 9, 47]"
235,sub,4,6026,6026,1,6026,1,"{'ok': True, 'value': 6026, 'stdout': '6026\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10321879386901855}",1,Compute: 9909 - 3883
236,add,16,8504521081185458,,0,8504521081185458,1,"{'ok': True, 'value': 8504521081185458, 'stdout': '8504521081185458\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10963964462280273}",1,Compute: 6959549551891018 + 1544971529294440
237,mul,8,368924957394372,275,0,370811898437912,0,"{'ok': True, 'value': 368924957394372, 'stdout': '368924957394372\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10268521308898926}",1,Compute: 19804788 * 18628069
238,mul,8,4590967340917404,460436208,0,4584626649198834,0,"{'ok': True, 'value': 4590967340917404, 'stdout': '4590967340917404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10273122787475586}",1,Compute: 56168946 * 81734974
239,sub,4,3373,3373,1,3373,1,"{'ok': True, 'value': 3373, 'stdout': '3373\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10083794593811035}",1,Compute: 5311 - 1938
240,sub,16,3053310986322709,3053310986322709,1,3053310986322709,1,"{'ok': True, 'value': 3053310986322709, 'stdout': '3053310986322709\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10236740112304688}",1,Compute: 8555705906640413 - 5502394920317704
241,knap,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10116910934448242}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 1]
V = [10, 2, 8]
C = 1"
242,sub,2,22,22,1,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10424923896789551}",1,Compute: 92 - 70
243,add,16,8199771536277551,8199771536277551,1,8199771536277551,1,"{'ok': True, 'value': 8199771536277551, 'stdout': '8199771536277551\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09403729438781738}",1,Compute: 4460555463749883 + 3739216072527668
244,ilp_prod,8,70,105,0,105,0,"{'ok': True, 'value': 70, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6ca39917e3714619b8354ca82c7fb037-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6ca39917e3714619b8354ca82c7fb037-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 75.9565 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -52 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -70 found by DiveCoefficient after 11 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3.6666667\nCbc0013I At root node, 3 cuts changed objective from -75.666667 to -70 in 7 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 16 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 25 row cuts average 3.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 4 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -70, took 11 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -75.6667 to -70\nProbing was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 7 times and created 16 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 7 times and created 25 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 7 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                70.00000000\nEnumerated nodes:               0\nTotal iterations:               11\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n70.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.181199312210083}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 14, 24, 23]
consumption (rows=resources) = [[4, 2, 8, 5], [4, 6, 1, 7], [8, 3, 3, 4], [7, 2, 2, 6]]
capacity = [19, 16, 24, 25]
upper_bounds = [3, 3, 3, 3]"
245,ilp_prod,16,188,147,0,105,0,"{'ok': True, 'value': 188, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/118e8a82136f47a49fe7767c8fb61a39-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/118e8a82136f47a49fe7767c8fb61a39-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 208 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -188 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0031I 3 added rows had average density of 4\nCbc0013I At root node, 8 cuts changed objective from -208 to -188.78954 in 7 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 23 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 28 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 3 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -188, took 27 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -208 to -188.79\nProbing was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 7 times and created 23 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 7 times and created 28 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 7 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                188.00000000\nEnumerated nodes:               0\nTotal iterations:               27\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n188.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1781773567199707}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [29, 42, 27, 21, 36, 28]
consumption (rows=resources) = [[4, 1, 12, 14, 10, 12], [8, 13, 9, 3, 2, 7], [5, 14, 4, 3, 12, 13], [1, 11, 3, 16, 7, 7]]
capacity = [39, 41, 48, 46]
upper_bounds = [5, 3, 3, 3, 3, 3]"
246,knap,2,9,14,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09995651245117188}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 4]
V = [6, 5, 9]
C = 4"
247,knap,2,15,15,1,25,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09838175773620605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 1]
V = [10, 6, 9]
C = 2"
248,knap,16,490,1043,0,1040,0,"{'ok': True, 'value': 490, 'stdout': '490\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09955549240112305}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 25, 3, 17, 3, 26, 19, 7, 25, 8, 12, 2, 10, 28, 30, 13]
V = [10, 57, 60, 36, 39, 32, 25, 57, 29, 49, 63, 49, 23, 57, 35, 17]
C = 115"
249,ilp_prod,8,76,105,0,105,0,"{'ok': True, 'value': 76, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c477bb55a4244804a96313df367d91cb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c477bb55a4244804a96313df367d91cb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 87.42 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -72 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -76 found by DiveCoefficient after 3 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 2\nCbc0013I At root node, 2 cuts changed objective from -87.42 to -76 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 4 column cuts (4 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -76, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -87.42 to -76\nProbing was tried 4 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                76.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n76.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17025113105773926}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 7, 24, 15]
consumption (rows=resources) = [[2, 2, 2, 5], [2, 7, 6, 7], [8, 4, 6, 3], [4, 8, 5, 1]]
capacity = [20, 23, 24, 24]
upper_bounds = [3, 3, 3, 3]"
250,ilp_prod,32,275,159,0,1065,0,"{'ok': True, 'value': 275, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d20965632a9e4e9fb7853f3d7659e6c2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d20965632a9e4e9fb7853f3d7659e6c2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 283.467 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -202 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -275 found by DiveCoefficient after 5 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 5.5\nCbc0013I At root node, 2 cuts changed objective from -283.46652 to -275 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 5 row cuts average 5.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -275, took 5 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -283.467 to -275\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                275.00000000\nEnumerated nodes:               0\nTotal iterations:               5\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n275.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1997978687286377}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [41, 3, 73, 14, 56, 60]
consumption (rows=resources) = [[15, 27, 26, 32, 12, 27], [7, 10, 26, 29, 32, 11], [1, 31, 11, 1, 17, 27], [31, 8, 18, 28, 28, 25]]
capacity = [91, 115, 84, 91]
upper_bounds = [3, 3, 3, 3, 3, 3]"
251,knap,8,112,149,0,100,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09987783432006836}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 16, 9, 3, 11, 10, 14, 2]
V = [28, 20, 6, 1, 20, 24, 32, 28]
C = 37"
252,add,32,126051600794930126441923512355110,26456139038494126731982431695420,0,126051599794930126441923512355110,0,"{'ok': True, 'value': 126051600794930126441923512355110, 'stdout': '126051600794930126441923512355110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10727500915527344}",1,Compute: 93327747278049333344374572639891 + 32723853516880793097548939715219
253,mul,4,93650634,93566334,0,93626334,0,"{'ok': True, 'value': 93650634, 'stdout': '93650634\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10026931762695312}",1,Compute: 9366 * 9999
254,mul,16,8712137579060522512638452590981,86895964994000000000000000000000,0,884593726051944865855451,0,"{'ok': True, 'value': 8712137579060522512638452590981, 'stdout': '8712137579060522512638452590981\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10259246826171875}",1,Compute: 6975481047896639 * 1248965844683579
255,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10099196434020996}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""cc"""
256,mul,8,2778372748727048,2835589608,0,2805815684542888,0,"{'ok': True, 'value': 2778372748727048, 'stdout': '2778372748727048\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10963678359985352}",1,Compute: 47808058 * 58115156
257,sub,32,47728083087217368601353240657674,47728083087217368601353240657674,1,47728083087217368601353240657674,1,"{'ok': True, 'value': 47728083087217368601353240657674, 'stdout': '47728083087217368601353240657674\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08470988273620605}",1,Compute: 75311717387693415208496055631151 - 27583634300476046607142814973477
258,ilp_prod,16,266,162,0,158,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_566k0d5v/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_566k0d5v/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16605305671691895}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 38, 29, 44, 14, 16]
consumption (rows=resources) = [[16, 2, 15, 16, 9, 8], [11, 3, 11, 15, 10, 11], [1, 9, 15, 14, 16, 16], [16, 5, 6, 15, 7, 16]]
capacity = [63, 56, 64, 48]
upper_bounds = [3, 7, 4, 3, 4, 3]"
259,sub,4,2953,2953,1,2953,1,"{'ok': True, 'value': 2953, 'stdout': '2953\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10047054290771484}",1,Compute: 8789 - 5836
260,lcs,32,20,20,1,1,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09753656387329102}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadbbcaacddadddcdcbbbbbdabcbdada""
T = ""cdadbbaadcdcbdbcdbddbaddcbbcabdc"""
261,add,8,111576291,57591,0,111576291,1,"{'ok': True, 'value': 111576291, 'stdout': '111576291\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10895371437072754}",1,Compute: 91404584 + 20171707
262,lcs,32,21,16,0,20,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10042047500610352}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddddaabcbbddaaddabaacdcdababccdd""
T = ""ddabcbabdbcdddcabdccbccbcabbcccad"""
263,mul,8,4996117078141008,485793384,0,4988382946585848,0,"{'ok': True, 'value': 4996117078141008, 'stdout': '4996117078141008\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09911942481994629}",1,Compute: 78081683 * 63985776
264,lcs,16,9,5,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09889054298400879}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addbccbdcadcddcd""
T = ""bcabbabadabbbcddc"""
265,sub,4,7653,7653,1,7653,1,"{'ok': True, 'value': 7653, 'stdout': '7653\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11225461959838867}",1,Compute: 9676 - 2023
266,knap,16,395,146,0,1064,0,"{'ok': True, 'value': 395, 'stdout': '395\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09634661674499512}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 6, 11, 25, 27, 15, 28, 29, 11, 6, 4, 19, 14, 30, 29, 16]
V = [58, 46, 46, 31, 61, 34, 14, 26, 43, 9, 53, 19, 14, 30, 28, 5]
C = 146"
267,sub,8,8200327,8200327,1,8200327,1,"{'ok': True, 'value': 8200327, 'stdout': '8200327\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1024010181427002}",1,Compute: 32623956 - 24423629
268,mul{'ok': True, 'value': 1963724398261414514483036278583447014620218902456181252184220235, 'stdout': '1963724398261414514483036278583447014620218902456181252184220235\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10272502899169922}",1,Compute: 27085914979177045902085730434231 * 72499836161011185148077046012685
269,ilp_prod,32,698,1034,0,1040,0,"{'ok': True, 'value': 698, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cd005662749143e695116b69289a4515-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cd005662749143e695116b69289a4515-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 741.909 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -640 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -698 found by DiveCoefficient after 8 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -741.90909 to -698 in 8 passes\nCbc0014I Cut generator 0 (Probing) - 4 row cuts average 2.0 elements, 6 column cuts (6 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 7 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -698, took 8 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -741.909 to -698\nProbing was tried 8 times and created 10 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 8 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 8 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 8 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 8 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 8 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                698.00000000\nEnumerated nodes:               0\nTotal iterations:               8\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n698.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17288947105407715}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [47, 58, 90, 24, 78, 25]
consumption (rows=resources) = [[4, 1, 15, 2, 2, 16], [19, 10, 25, 15, 6, 18], [6, 3, 10, 10, 15, 25], [24, 1, 12, 32, 18, 26]]
capacity = [79, 101, 78, 92]
upper_bounds = [3, 10, 4, 3, 5, 3]"
270,ilp_prod,8,74,100,0,100,0,"{'ok': True, 'value': 74, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/10b42b713aba4eae972e987430f76d22-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/10b42b713aba4eae972e987430f76d22-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 82.0714 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -74 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -81.285714 to -81.285714 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -74, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -81.2857 to -81.2857\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                74.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n74.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17866992950439453}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 17, 20, 4]
consumption (rows=resources) = [[6, 2, 1, 4], [4, 8, 2, 2], [8, 1, 7, 6], [8, 7, 7, 4]]
capacity = [20, 30, 18, 31]
upper_bounds = [3, 3, 3, 3]"
271,lcs,16,9,6,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0915684700012207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacbcabdacccbcab""
T = ""bacbdabcdcabadcc"""
272,ilp_prod,8,69,107,0,103,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_49ogs26u/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17100954055786133}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 9, 23, 4]
consumption (rows=resources) = [[7, 3, 6, 6], [7, 5, 1, 1], [8, 5, 6, 7], [2, 7, 1, 3]]
capacity = [20, 25, 26, 32]
upper_bounds = [3, 4, 3, 3]"
273,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10190510749816895}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcaaacd""
T = ""addccdc"""
274,knap,32,1428,1044,0,-1,0,"{'ok': True, 'value': 1428, 'stdout': '1428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09608101844787598}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 37, 40, 49, 19, 62, 8, 38, 1, 47, 11, 56, 41, 27, 38, 3, 19, 15, 24, 41, 1, 51, 46, 30, 32, 11, 27, 42, 61, 49, 58, 33]
V = [65, 76, 16, 25, 98, 109, 112, 45, 1, 39, 108, 71, 27, 78, 4, 10, 52, 9, 107, 90, 71, 120, 42, 25, 27, 23, 106, 45, 37, 56, 86, 13]
C = 517"
275,mul,16,16318044126296260553540165404113,1739302562407953,0,1651755325756176878546544564746643,0,"{'ok': True, 'value': 16318044126296260553540165404113, 'stdout': '16318044126296260553540165404113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1080167293548584}",1,Compute: 9381946809590721 * 1739302562407953
276,mul,8,7807929559210638,7838347105563858,0,782924796448592,0,"{'ok': True, 'value': 7807929559210638, 'stdout': '7807929559210638\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11287617683410645}",1,Compute: 90791781 * 85998198
277,knap,2,17,11,0,9,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1118927001953125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 4, 5]
V = [8, 9, 2]
C = 5"
278,mul,8,3515909962837632,34943654946476688,0,35084816365788928,0,"{'ok': True, 'value': 3515909962837632, 'stdout': '3515909962837632\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10177731513977051}",1,Compute: 62662272 * 56108881
279,ilp_prod,4,24,The exact value depends on the solution of the linear programming problem.,0,34,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_f0jdeiw9/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17887592315673828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 5, 4]
consumption (rows=resources) = [[2, 4, 2], [2, 2, 1], [4, 3, 2]]
capacity = [8, 10, 16]
upper_bounds = [4, 3, 4]"
280,rod,32,2368,1055,0,91,0,"{'ok': True, 'value': 2368, 'stdout': '2368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12802481651306152}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [74, 26, 48, 37, 41, 91, 85, 80, 30, 67, 73, 34, 78, 19, 54, 43, 76, 2, 70, 92, 64, 23, 79, 44, 72, 16, 6, 27, 76, 75, 28, 54]"
281,ilp_partition,16,0,1,0,36,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12361526489257812}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 40, 33, 43, 26, 30, 15, 33, 12, 47, 36, 38, 9, 18, 44, 47]"
282,knap,32,1520,1038,0,1064,0,"{'ok': True, 'value': 1520, 'stdout': '1520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10321664810180664}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 54, 57, 48, 15, 42, 20, 14, 56, 31, 61, 60, 60, 31, 47, 2, 42, 16, 54, 49, 40, 3, 19, 42, 8, 20, 55, 4, 4, 29, 29, 50]
V = [14, 91, 56, 49, 72, 39, 77, 23, 90, 107, 51, 42, 10, 38, 73, 67, 57, 73, 109, 5, 4, 95, 7, 51, 100, 94, 6, 33, 95, 91, 41, 81]
C = 545"
283,rod,16,227,46,0,84,0,"{'ok': True, 'value': 227, 'stdout': '227\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09549617767333984}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [12, 19, 43, 4, 5, 47, 34, 5, 38, 10, 23, 11, 39, 8, 37, 41]"
284,ilp_partition,2,2,1,0,6,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0982053279876709}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 5, 6]"
285,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09018850326538086}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""da"""
286,ilp_prod,2,9,12,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_988qdh5z/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17850184440612793}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3]
consumption (rows=resources) = [[1, 3], [2, 3]]
capacity = [6, 6]
upper_bounds = [3, 3]"
287,ilp_partition,2,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1043705940246582}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 4, 3, 5]"
288,mul,4,36335840,3030300,0,36658400,0,"{'ok': True, 'value': 36335840, 'stdout': '36335840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09287405014038086}",1,Compute: 6560 * 5539
289,sub,8,36811598,36811598,1,36811598,1,"{'ok': True, 'value': 36811598, 'stdout': '36811598\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10166144371032715}",1,Compute: 73777291 - 36965693
290,ilp_partition,16,0,1,0,0,1,"{'ok': True, 'value': 290, 'stdout': '290\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10129475593566895}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [43, 15, 2, 18, 13, 29, 31, 14, 44, 23, 1, 14, 23, 26, 4, 14]"
291,ilp_assign,16,57,105,0,40,0,"{'ok': True, 'value': 57, 'stdout': '57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40281057357788086}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 33, 41, 47, 43, 26, 14], [26, 33, 45, 34, 46, 3, 29], [18, 38, 46, 3, 8, 40, 16], [11, 5, 26, 35, 5, 44, 30], [36, 23, 47, 24, 32, 42, 5], [41, 2, 29, 27, 37, 18, 11], [46, 13, 30, 21, 47, 4, 40]]"
292,add,4,4174,4174,1,4174,1,"{'ok': True, 'value': 4174, 'stdout': '4174\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1051177978515625}",1,Compute: 1890 + 2284
293,knap,32,1662,1685,0,1056,0,"{'ok': True, 'value': 1662, 'stdout': '1662\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10619664192199707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 15, 46, 3, 19, 51, 34, 31, 57, 6, 41, 23, 61, 39, 47, 23, 59, 63, 6, 61, 24, 26, 3, 23, 56, 36, 37, 35, 18, 49, 38, 43]
V = [36, 9, 109, 44, 24, 127, 61, 113, 3, 98, 102, 47, 20, 35, 24, 49, 60, 43, 121, 53, 87, 105, 24, 26, 100, 100, 13, 123, 106, 33, 40, 84]
C = 540"
294,ilp_prod,16,96,105,0,109,0,"{'ok': True, 'value': 95, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3db4d7e3cef749d19669c284d2698e2d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3db4d7e3cef749d19669c284d2698e2d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 90.416666 (6)\n2  Obj 96\nOptimal - objective value 96\nOptimal objective 96 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n95.9999994\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17752289772033691}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 17, 10, 5, 18, 26]
consumption (rows=resources) = [[16, 16, 8, 3, 2, 3], [4, 15, 10, 12, 9, 13], [5, 11, 7, 12, 13, 7], [6, 8, 1, 11, 15, 5]]
capacity = [47, 48, 61, 62]
upper_bounds = [3, 3, 4, 4, 4, 3]"
295,ilp_partition,2,1,0,0,8,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10636663436889648}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 6, 3]"
296,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09789371490478516}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adab""
T = ""dab"""
297,mul,2,5766,5746,0,5736,0,"{'ok': True, 'value': 5766, 'stdout': '5766\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1091148853302002}",1,Compute: 93 * 62
298,sub,16,5212254773092073,5212254773092073,1,5212254773088073,0,"{'ok': True, 'value': 5212254773092073, 'stdout': '5212254773092073\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10815572738647461}",1,Compute: 6779309190355025 - 1567054417262952
299,add,16,16243242668579591,16243242668579591,1,16243242668579591,1,"{'ok': True, 'value': 16243242668579591, 'stdout': '16243242668579591\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09926724433898926}",1,Compute: 8919264330071476 + 7323978338508115
300,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09837985038757324}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badc""
T = ""aab"""
301,ilp_prod,8,53,105,0,108,0,"{'ok': True, 'value': 53, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b70375927ed0405482d2cdfbfef5eca9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b70375927ed0405482d2cdfbfef5eca9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 57.8462 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -53 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -57.846154 to -57.846154 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -53, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -57.8462 to -57.8462\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                53.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n53.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17528343200683594}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 8, 6, 9]
consumption (rows=resources) = [[8, 7, 1, 2], [1, 8, 1, 3], [7, 2, 1, 8], [2, 8, 4, 2]]
capacity = [21, 24, 16, 32]
upper_bounds = [3, 3, 8, 3]"
302,ilp_prod,2,18,40,0,29,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_bp3btlzp/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, upBound=upper_bounds)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16865253448486328}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[2, 3], [3, 1]]
capacity = [7, 8]
upper_bounds = [3, 3]"
303,sub,32,20417006750827820987099846619263,36046364704588048836644406002772,0,20416996750827821087100046619263,0,"{'ok': True, 'value': 20417006750827820987099846619263, 'stdout': '20417006750827820987099846619263\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10968160629272461}",1,Compute: 56463371455415869823744252622035 - 36046364704588048836644406002772
304,ilp_assign,16,43,11,0,117,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lvm0hn9g/main.py"", line 51, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_lvm0hn9g/main.py"", line 33, in hungarian_algorithm\n    uncovered_values = cost_matrix[np.logical_not(row_covered), :][np.logical_not(col_covered)]\nIndexError: boolean index did not match indexed array along dimension 0; dimension is 4 but corresponding boolean dimension is 7\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20173406600952148}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 48, 9, 1, 45, 24, 16], [4, 5, 47, 43, 3, 42, 37], [25, 38, 5, 7, 4, 5, 20], [13, 26, 48, 16, 28, 8, 47], [31, 42, 11, 37, 4, 5, 24], [12, 16, 25, 39, 12, 2, 22], [46, 18, 29, 5, 31, 37, 13]]"
305,rod,4,14,12,0,18,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1109914779663086}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 7, 7, 8]"
306,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10775637626647949}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [89, 1, 21, 39, 12, 93, 50, 64, 93, 75, 17, 55, 10, 65, 20, 22, 11, 17, 8, 71, 96, 10, 37, 84]"
307,rod,16,672,42,0,415,0,"{'ok': True, 'value': 672, 'stdout': '672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10108542442321777}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [42, 5, 28, 34, 24, 26, 39, 16, 28, 20, 34, 18, 7, 30, 27, 4]"
308,lcs,8,3,5,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09675383567810059}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbacdbda""
T = ""aaabdcc"""
309,lcs,8,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09311509132385254}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcbbacd""
T = ""aacacbc"""
310,ilp_prod,16,200,115,0,1035,0,"{'ok': True, 'value': 200, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6470014002b0434ca58c7e4cc41e9672-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6470014002b0434ca58c7e4cc41e9672-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 166.05128 (6)\n1  Obj 200\nOptimal - objective value 200\nOptimal objective 200 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n200.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2673037052154541}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [40, 12, 18, 5, 35, 8]
consumption (rows=resources) = [[9, 10, 6, 5, 12, 15], [9, 15, 5, 4, 13, 14], [2, 2, 3, 4, 2, 12], [2, 12, 9, 4, 2, 9]]
capacity = [45, 63, 45, 41]
upper_bounds = [5, 3, 4, 9, 3, 3]"
311,ilp_prod,16,190,150,0,0,0,"{'ok': True, 'value': 212, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/01e7f1a8ae5647978da9a2e7861e770e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/01e7f1a8ae5647978da9a2e7861e770e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 823.00896 (6)\n4  Obj 212.34072\nOptimal - objective value 212.34072\nOptimal objective 212.3407161 - 4 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n212.34071437499998\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20424675941467285}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [41, 45, 46, 17, 35, 20]
consumption (rows=resources) = [[2, 12, 15, 9, 1, 15], [3, 15, 8, 10, 12, 1], [11, 9, 9, 7, 16, 6], [15, 4, 1, 2, 5, 5]]
capacity = [41, 54, 48, 38]
upper_bounds = [3, 3, 3, 4, 3, 3]"
312,rod,32,1360,1080,0,508,0,"{'ok': True, 'value': 1360, 'stdout': '1360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0940399169921875}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [12, 85, 77, 59, 62, 18, 16, 10, 32, 71, 54, 68, 57, 75, 18, 74, 34, 44, 53, 83, 43, 71, 4, 79, 24, 5, 16, 30, 24, 57, 50, 72]"
313,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1065218448638916}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 20, 21, 6, 20, 21, 5, 16]"
314,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10863327980041504}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""d"""
315,rod,16,736,22,0,157,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_11khbnji/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_11khbnji/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1100759506225586}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [46, 2, 39, 28, 33, 21, 6, 4, 20, 34, 5, 45, 6, 41, 21, 9]"
316,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11641931533813477}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabbddda""
T = ""cadabaaba"""
317,mul,16,30809353478209695493840716386761,30304867337528474856696694744460,0,3078369432378488456465655363,0,"{'ok': True, 'value': 30809353478209695493840716386761, 'stdout': '30809353478209695493840716386761\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1143338680267334}",1,Compute: 4814839005705893 * 6398833572981077
318,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09601402282714844}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""a"""
319,sub,2,68,68,1,68,1,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09943771362304688}",1,Compute: 96 - 28
320,ilp_assign,32,124,,0,206,0,"{'ok': True, 'value': 124, 'stdout': '124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4859335422515869}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[76, 35, 27, 91, 37, 30, 31], [96, 62, 12, 65, 1, 52, 90], [9, 62, 93, 52, 45, 83, 58], [86, 84, 24, 47, 13, 43, 23], [73, 52, 6, 64, 26, 52, 22], [53, 35, 91, 35, 94, 21, 31], [29, 95, 32, 85, 95, 15, 33]]"
321,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08556509017944336}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddd""
T = ""adadc"""
322,sub,16,1701736213856755,1702336213865755,0,1701736213865755,0,"{'ok': True, 'value': 1701736213856755, 'stdout': '1701736213856755\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09175467491149902}",1,Compute: 9107146014694386 - 7405409800837631
323,knap,2,14,11,0,9,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1070103645324707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 1]
V = [5, 2, 9]
C = 2"
324,rod,16,184,47,0,64,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_idotdta2/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_idotdta2/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09389114379882812}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [4, 22, 26, 46, 4, 40, 39, 5, 4, 35, 29, 1, 30, 8, 42, 31]"
325,ilp_partition,2,1,0,0,8,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.101715087890625}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 1, 6]"
326,sub,4,5789,5789,1,5789,1,"{'ok': True, 'value': 5789, 'stdout': '5789\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10343289375305176}",1,Compute: 8100 - 2311
327,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10022449493408203}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 21, 19, 8, 7, 5, 9, 3]"
328,lcs,16,9,6,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09566664695739746}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbdbbcadabcbbba""
T = ""bcddbbdcbaadadb"""
329,knap,8,102,143,0,113,0,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.138519287109375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 11, 3, 7, 15, 15, 8, 10]
V = [16, 1, 16, 27, 11, 32, 17, 26]
C = 39"
330,mul,2,3026,3006,0,3026,1,"{'ok': True, 'value': 3026, 'stdout': '3026\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11195874214172363}",1,Compute: 89 * 34
331,knap,4,30,25,0,29,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09256958961486816}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 4, 1]
V = [14, 14, 9, 16]
C = 5"
332,knap,32,1715,1047,0,1047,0,"{'ok': True, 'value': 1715, 'stdout': '1715\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12432217597961426}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [43, 9, 30, 39, 31, 30, 41, 40, 49, 44, 7, 51, 34, 55, 7, 24, 46, 20, 15, 42, 31, 36, 56, 7, 10, 11, 33, 30, 30, 47, 58, 64]
V = [124, 50, 28, 58, 4, 99, 51, 123, 5, 94, 99, 22, 4, 102, 51, 115, 121, 55, 34, 75, 52, 52, 90, 81, 128, 13, 70, 115, 114, 68, 79, 10]
C = 535"
333,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1071784496307373}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 3, 1, 16, 21, 1, 8, 9]"
334,mul,4,12177574,101,0,12159414,0,"{'ok': True, 'value': 12177574, 'stdout': '12177574\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10112357139587402}",1,Compute: 7954 * 1531
335,knap,32,1666,1044,0,2435,0,"{'ok': True, 'value': 1666, 'stdout': '1666\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0997316837310791}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 44, 53, 47, 56, 7, 49, 37, 21, 14, 10, 42, 63, 34, 25, 58, 19, 20, 7, 50, 16, 29, 39, 53, 20, 6, 38, 36, 7, 16, 59, 59]
V = [114, 90, 9, 23, 46, 118, 36, 84, 21, 20, 78, 110, 36, 30, 125, 101, 52, 43, 23, 88, 56, 60, 44, 24, 82, 31, 91, 61, 100, 126, 77, 114]
C = 525"
336,add,4,11716,11716,1,11716,1,"{'ok': True, 'value': 11716, 'stdout': '11716\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09742212295532227}",1,Compute: 5227 + 6489
337,add,32,89864245059179743621877291863740,89864245059179743621877391863740,0,90064245059179743621877291863740,0,"{'ok': True, 'value': 89864245059179743621877291863740, 'stdout': '89864245059179743621877291863740\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09294700622558594}",1,Compute: 14325885144789599772413888782760 + 75538359914390143849463403080980
338,knap,2,9,7,0,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08933663368225098}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 2]
V = [5, 6, 4]
C = 4"
339,rod,8,152,22,0,22,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09944009780883789}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 24, 9, 2, 5, 2, 17, 6]"
340,add,32,62528645731612198725802718790587,62528645731612200725802718790587,0,62528645731612298725802718790587,0,"{'ok': True, 'value': 62528645731612198725802718790587, 'stdout': '62528645731612198725802718790587\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10723400115966797}",1,Compute: 40485791275246985247760500702578 + 22042854456365213478042218088009
341,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11555862426757812}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 96, 49, 22, 37, 7, 21, 84, 31, 65, 36, 41, 51, 11, 61, 10, 82, 1, 8, 64, 21, 87, 83, 55]"
342,knap,8,99,103,0,60,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09452223777770996}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 9, 14, 7, 2, 7, 9]
V = [15, 11, 14, 20, 32, 27, 7, 9]
C = 26"
343,mul,16,80865176450985610784195683866672,8108639105946886859439288,0,814466058351279045854332466984464,0,"{'ok': True, 'value': 80865176450985610784195683866672, 'stdout': '80865176450985610784195683866672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09833121299743652}",1,Compute: 9519271987184669 * 8494890844578288
344,ilp_assign,8,20,0,0,26,0,"{'ok': True, 'value': 388, 'stdout': '388\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2904481887817383}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 9, 3, 2, 7, 7, 12], [6, 5, 8, 12, 21, 4, 2], [3, 3, 8, 17, 6, 14, 4], [23, 6, 3, 24, 8, 4, 12], [19, 21, 23, 10, 22, 2, 18], [18, 2, 20, 19, 14, 6, 21], [6, 20, 11, 5, 6, 6, 19]]"
345,sub,32,76587717667500080338763183369737,76587717667500080358763183370737,0,76587717667500080359763183370737,0,"{'ok': True, 'value': 76587717667500080338763183369737, 'stdout': '76587717667500080338763183369737\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12577486038208008}",1,Compute: 93707982013700493003065205322585 - 17120264346200412664302021952848
346,add,2,111,111,1,111,1,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10149431228637695}",1,Compute: 41 + 70
347,ilp_prod,4,21,34,0,35,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_gfpdzwsp/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1798114776611328}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5, 9]
consumption (rows=resources) = [[2, 4, 3], [1, 2, 4], [3, 2, 4]]
capacity = [9, 10, 9]
upper_bounds = [3, 3, 3]"
348,ilp_prod,4,64,2,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_z71lfemz/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_z71lfemz/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18491578102111816}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8, 5]
consumption (rows=resources) = [[1, 1, 4], [3, 2, 3], [3, 1, 3]]
capacity = [16, 16, 9]
upper_bounds = [3, 8, 3]"
349,ilp_assign,2,3,4,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_nwxkabj0/main.py"", line 36, in <module>\n    res, assignments = assignment_problem(C)\n  File ""/tmp/cot_exec_nwxkabj0/main.py"", line 33, in assignment_problem\n    return C.sum() + min_uncov * len(assignments), assignments\nUnboundLocalError: local variable \'min_uncov\' referenced before assignment\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2392728328704834}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 4], [4, 1]]"
350,rod,2,6,4,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_uxgwlotc/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_uxgwlotc/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10961675643920898}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 2]"
351,ilp_prod,2,30,39,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_v861o4sw/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17956018447875977}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5]
consumption (rows=resources) = [[3, 1], [2, 1]]
capacity = [6, 7]
upper_bounds = [3, 6]"
352,knap,4,21,26,0,16,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1100468635559082}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 2, 3, 3]
V = [10, 5, 3, 16]
C = 7"
353,ilp_assign,32,134,185,0,240,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.24422383308410645}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[49, 35, 89, 60, 52, 91, 43], [10, 67, 21, 21, 13, 88, 55], [91, 27, 45, 59, 63, 35, 92], [60, 55, 50, 4, 64, 39, 81], [62, 41, 52, 46, 43, 1, 94], [87, 3, 94, 93, 4, 62, 37], [35, 75, 45, 64, 85, 45, 76]]"
354,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09964942932128906}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""c"""
355,sub,8,18452474,18452474,1,18452474,1,"{'ok': True, 'value': 18452474, 'stdout': '18452474\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09737586975097656}",1,Compute: 76268463 - 57815989
356,ilp_prod,16,304,133,0,156,0,"{'ok': True, 'value': 341, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/01a1b204a4db46268ebdb09d39af3157-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/01a1b204a4db46268ebdb09d39af3157-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 966.84427 (6)\n3  Obj 341.43224\nOptimal - objective value 341.43224\nOptimal objective 341.432243 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n341.43223952\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.175459623336792}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 36, 37, 44, 32, 41]
consumption (rows=resources) = [[16, 2, 7, 1, 5, 16], [1, 14, 11, 5, 4, 8], [7, 6, 11, 2, 16, 2], [5, 5, 16, 10, 15, 2]]
capacity = [39, 51, 37, 61]
upper_bounds = [3, 3, 3, 6, 3, 3]"
357,knap,4,7,4,0,9,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09714508056640625}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 7, 5]
V = [4, 3, 1, 1]
C = 10"
358,sub,4,2415,2415,1,2415,1,"{'ok': True, 'value': 2415, 'stdout': '2415\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10898685455322266}",1,Compute: 5716 - 3301
359,ilp_prod,2,18,24,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_4w0rnefl/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16922855377197266}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[1, 1], [2, 3]]
capacity = [9, 10]
upper_bounds = [5, 3]"
360,ilp_partition,4,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1003110408782959}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 2, 3]"
361,ilp_assign,16,64,117,0,105,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6739680767059326}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 12, 18, 13, 19, 45, 12], [45, 10, 15, 18, 41, 36, 7], [43, 34, 45, 10, 22, 1, 39], [26, 12, 44, 16, 7, 42, 16], [27, 23, 23, 13, 23, 5, 39], [27, 27, 9, 15, 5, 46, 3], [17, 47, 21, 44, 11, 28, 14]]"
362,ilp_assign,8,33,36,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9ewuphoz/main.py"", line 36, in <module>\n    res = hungarian_algorithm(C)\n  File ""/tmp/cot_exec_9ewuphoz/main.py"", line 17, in hungarian_algorithm\n    smallest_uncovered = min([cost_matrix[i][j] for i, j in covered if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24202466011047363}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 3, 5, 16, 4, 16, 14], [4, 17, 17, 7, 6, 23, 11], [6, 9, 17, 18, 23, 21, 23], [24, 6, 1, 13, 3, 9, 23], [5, 5, 8, 11, 20, 1, 5], [7, 14, 6, 21, 13, 23, 14], [8, 18, 7, 18, 8, 3, 12]]"
363,ilp_partition,4,5,1,0,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09844088554382324}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 11, 3, 9]"
364,knap,16,281,132,0,540,0,"{'ok': True, 'value': 281, 'stdout': '281\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11049246788024902}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 30, 25, 9, 7, 29, 18, 29, 27, 24, 2, 4, 20, 22, 2, 3]
V = [50, 37, 9, 21, 15, 59, 38, 47, 9, 5, 6, 19, 7, 9, 16, 1]
C = 132"
365,mul,8,3403857252156810,31504321,0,3355852434435810,0,"{'ok': True, 'value': 3403857252156810, 'stdout': '3403857252156810\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10947036743164062}",1,Compute: 39808245 * 85506338
366,lcs,4,3,3,1,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10161328315734863}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bada""
T = ""bdab"""
367,rod,2,10,5,0,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_i9o0sedm/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_i9o0sedm/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11121058464050293}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 3]"
368,add,32,127180675827644729121285437967966,94326082061988471580686540001866,0,127180675827644729081285417968966,0,"{'ok': True, 'value': 127180675827644729121285437967966, 'stdout': '127180675827644729121285437967966\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10183072090148926}",1,Compute: 94326082061988471580686540001864 + 32854593765656257540598897966102
369,mul,16,57070262345230424467223665561644,2823964,0,57646075230342950467849152558,0,"{'ok': True, 'value': 57070262345230424467223665561644, 'stdout': '57070262345230424467223665561644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09849190711975098}",1,Compute: 7944237011474868 * 7183856959805783
370,ilp_assign,16,73,110,0,113,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4137420654296875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 1, 13, 9, 8, 23, 5], [44, 4, 2, 27, 36, 14, 17], [38, 37, 12, 37, 28, 38, 8], [31, 7, 16, 28, 5, 26, 27], [29, 15, 19, 30, 25, 31, 18], [37, 42, 12, 25, 45, 15, 3], [48, 47, 3, 36, 42, 43, 12]]"
371,lcs,32,20,10,0,12,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10137128829956055}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbaaaccbccbdccbddadabbdcaaacadab""
T = ""adacccaccccbbcbdbcbdbbddbdadadbdd"""
372,ilp_prod,4,21,31,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ozz4qw1z/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1689438819885254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8, 6]
consumption (rows=resources) = [[2, 3, 1], [2, 3, 4], [4, 2, 1]]
capacity = [8, 9, 9]
upper_bounds = [3, 3, 3]"
373,knap,2,7,4,0,23,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09911847114562988}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 4]
V = [7, 2, 2]
C = 5"
374,ilp_assign,2,8,8,1,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gbdjxjqa/main.py"", line 33, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_gbdjxjqa/main.py"", line 25, in assignment_problem\n    min_val = C[augmenting_path].min()\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/numpy/core/_methods.py"", line 45, in _amin\n    return umr_minimum(a, axis, None, out, keepdims, initial, where)\nValueError: zero-size array to reduction operation minimum which has no identity\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23286199569702148}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5], [3, 5]]"
375,rod,8,48,23,0,23,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10997366905212402}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 12, 16, 2, 10, 5, 10, 23]"
376,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11260271072387695}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbabddacdccbbcbc""
T = ""daaccdcbdabcdccca"""
377,lcs,32,16,15,0,16,1,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09278059005737305}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daddacbcbbbbbdcdcccaabcabdbbddcb""
T = ""cadbacdbaaadaccccacaaadacccadcad"""
378,ilp_assign,16,69,115,0,105,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4059727191925049}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[46, 22, 43, 13, 31, 11, 31], [22, 17, 6, 31, 3, 34, 45], [23, 15, 27, 34, 15, 13, 39], [34, 44, 14, 9, 44, 10, 31], [20, 1, 28, 47, 8, 37, 26], [40, 31, 18, 2, 3, 12, 28], [11, 19, 38, 46, 10, 10, 16]]"
379,ilp_partition,16,1,1,1,130,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10880112648010254}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [29, 33, 27, 20, 7, 7, 40, 38, 44, 33, 11, 48, 6, 21, 29, 22]"
380,ilp_assign,2,5,6,0,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22696995735168457}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [4, 4]]"
381,add,32,63520839353027000111194014320847,63520839352827000111194014320847,0,63520839352827000111194014320847,0,"{'ok': True, 'value': 63520839353027000111194014320847, 'stdout': '63520839353027000111194014320847\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09959936141967773}",1,Compute: 29583642351419688567734806012012 + 33937197001607311543459208308835
382,ilp_assign,32,103,11,0,105,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3907337188720703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 49, 81, 76, 60, 2, 66], [13, 92, 38, 3, 90, 68, 96], [75, 93, 21, 82, 11, 71, 59], [32, 72, 57, 77, 19, 91, 77], [32, 8, 4, 35, 27, 50, 29], [13, 60, 92, 2, 51, 80, 93], [3, 56, 12, 39, 75, 8, 38]]"
383,ilp_assign,4,9,2,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_3_li9lbl/main.py"", line 39, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_3_li9lbl/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10088968276977539}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 9, 4], [4, 5, 2, 6], [11, 2, 8, 3], [9, 9, 3, 2]]"
384,add,8,125985862,125985862,1,126000000,0,"{'ok': True, 'value': 125985862, 'stdout': '125985862\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10847115516662598}",1,Compute: 28113934 + 97871928
385,knap,8,116,147,0,60,0,"{'ok': True, 'value': 116, 'stdout': '116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09552764892578125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 11, 3, 4, 14, 3, 3, 5]
V = [16, 13, 26, 32, 7, 6, 12, 30]
C = 26"
386,ilp_prod,4,39,70,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_88ovcjcp/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17109274864196777}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 7, 5]
consumption (rows=resources) = [[4, 1, 3], [2, 2, 1], [3, 1, 1]]
capacity = [10, 10, 9]
upper_bounds = [3, 5, 3]"
387,mul,4,62664858,6468642,0,62586888,0,"{'ok': True, 'value': 62664858, 'stdout': '62664858\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10255742073059082}",1,Compute: 9573 * 6546
388,ilp_prod,32,403,1041,0,1001,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_e20d4ajb/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_e20d4ajb/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1699671745300293}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [57, 62, 93, 46, 25, 62]
consumption (rows=resources) = [[20, 21, 24, 26, 7, 7], [7, 4, 1, 8, 1, 22], [1, 26, 15, 13, 26, 31], [24, 6, 6, 17, 13, 21]]
capacity = [95, 108, 123, 84]
upper_bounds = [3, 4, 3, 3, 4, 3]"
389,ilp_assign,16,95,110,0,116,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20736336708068848}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 25, 29, 32, 44, 2, 31], [31, 15, 16, 46, 46, 12, 27], [43, 24, 46, 42, 17, 14, 39], [8, 47, 46, 17, 16, 45, 3], [21, 33, 41, 35, 21, 48, 42], [43, 48, 20, 34, 38, 30, 46], [3, 48, 44, 22, 27, 32, 32]]"
390,ilp_prod,2,26,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_5mvlht2u/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16221165657043457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[2, 1], [1, 3]]
capacity = [6, 9]
upper_bounds = [3, 3]"
391,ilp_assign,8,34,0,0,20,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39728713035583496}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1, 2, 19, 16, 2, 5], [4, 4, 16, 4, 11, 15, 23], [14, 5, 8, 17, 19, 2, 13], [4, 4, 9, 4, 7, 20, 17], [13, 15, 2, 9, 18, 23, 2], [15, 16, 13, 15, 17, 23, 4], [14, 16, 17, 14, 22, 11, 23]]"
392,add,4,16568,16568,1,16568,1,"{'ok': True, 'value': 16568, 'stdout': '16568\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09199404716491699}",1,Compute: 9918 + 6650
393,sub,32,4882403863452672615877455287437,5882403863452672615878435387437,0,48824038634526726158783353073337,0,"{'ok': True, 'value': 4882403863452672615877455287437, 'stdout': '4882403863452672615877455287437\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1167747974395752}",1,Compute: 19758621095710597684792960647392 - 14876217232257925068915505359955
394,knap,4,27,27,1,24,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09597277641296387}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 5, 1, 3]
V = [12, 2, 13, 14]
C = 7"
395,mul{'ok': True, 'value': 919980001732141070347498000509453414284613517426373276738363152, 'stdout': '919980001732141070347498000509453414284613517426373276738363152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09570837020874023}",1,Compute: 36076883629831850922894096239528 * 25500539657793855920050778961434
396,add,4,12949,12949,1,12949,1,"{'ok': True, 'value': 12949, 'stdout': '12949\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09387803077697754}",1,Compute: 8159 + 4790
397,ilp_assign,2,8,5,0,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20422816276550293}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 6], [2, 6]]"
398,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10774922370910645}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""a"""
399,ilp_assign,2,5,8,0,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2113642692565918}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 3], [2, 6]]"
400,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09133529663085938}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""bc"""
401,ilp_prod,4,40,51,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_yd4tpad0/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.177626371383667}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 7, 7]
consumption (rows=resources) = [[3, 2, 3], [2, 4, 2], [2, 4, 3]]
capacity = [14, 10, 13]
upper_bounds = [4, 3, 4]"
402,rod,32,2816,1084,0,151,0,"{'ok': True, 'value': 2816, 'stdout': '2816\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08349251747131348}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [88, 63, 18, 39, 41, 94, 66, 54, 58, 2, 88, 11, 47, 25, 43, 80, 73, 38, 2, 96, 29, 19, 45, 84, 39, 62, 33, 21, 46, 36, 86, 90]"
403,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09270119667053223}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 7, 9, 12, 18, 12, 6]"
404,mul,8,646423234297400,322,0,640389155859320,0,"{'ok': True, 'value': 646423234297400, 'stdout': '646423234297400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09643030166625977}",1,Compute: 35369432 * 18276325
405,rod,4,36,15,0,15,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08216142654418945}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 11, 8, 10]"
406,ilp_assign,4,15,4,0,0,0,"{'ok': True, 'value': -15, 'stdout': '-15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21391916275024414}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6, 6, 9], [3, 11, 12, 5], [11, 11, 5, 5], [5, 10, 5, 1]]"
407,add,16,15016348789166785,15016348789166785,1,15016348789166785,1,"{'ok': True, 'value': 15016348789166785, 'stdout': '15016348789166785\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09365606307983398}",1,Compute: 7901368458042771 + 7114980331124014
408,ilp_prod,2,24,45,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_odi7m3oz/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16511797904968262}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 5]
consumption (rows=resources) = [[3, 2], [1, 2]]
capacity = [9, 7]
upper_bounds = [3, 3]"
409,knap,16,388,106,0,103,0,"{'ok': True, 'value': 388, 'stdout': '388\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10302281379699707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 26, 24, 7, 22, 31, 7, 11, 19, 20, 21, 8, 11, 16, 21, 26]
V = [27, 63, 50, 36, 30, 26, 50, 40, 16, 13, 8, 44, 48, 1, 25, 3]
C = 140"
410,add,8,58672260,58672260,1,58672260,1,"{'ok': True, 'value': 58672260, 'stdout': '58672260\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09308791160583496}",1,Compute: 39933047 + 18739213
411,sub,8,34130968,34130968,1,34130968,1,"{'ok': True, 'value': 34130968, 'stdout': '34130968\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09388589859008789}",1,Compute: 87728896 - 53597928
412,rod,4,36,10,0,14,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08468174934387207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 6, 3, 4]"
413,ilp_prod,8,66,100,0,100,0,"{'ok': True, 'value': 75, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/750b54fd7e244ec684a411820126bbdb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/750b54fd7e244ec684a411820126bbdb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 52 (4)\n3  Obj 75.555556\nOptimal - objective value 75.555556\nOptimal objective 75.55555556 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n75.55555464\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18146610260009766}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 14, 8, 4]
consumption (rows=resources) = [[4, 5, 4, 1], [8, 1, 2, 6], [7, 1, 4, 8], [6, 6, 2, 8]]
capacity = [20, 16, 31, 25]
upper_bounds = [3, 4, 5, 3]"
414,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09023070335388184}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddadbcad""
T = ""abdddddd"""
415,ilp_prod,16,372,164,0,165,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_5d2rzfmr/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_5d2rzfmr/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17371487617492676}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 11, 42, 25, 6, 39]
consumption (rows=resources) = [[9, 1, 1, 6, 4, 9], [8, 11, 4, 16, 13, 5], [13, 12, 11, 3, 1, 1], [13, 16, 2, 10, 2, 3]]
capacity = [46, 59, 63, 32]
upper_bounds = [3, 3, 5, 3, 4, 5]"
416,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09025311470031738}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""d"""
417,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08993387222290039}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbbadbb""
T = ""ccabbcdc"""
418,knap,16,370,152,0,104,0,"{'ok': True, 'value': 370, 'stdout': '370\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10149025917053223}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 21, 8, 21, 22, 24, 14, 24, 30, 26, 8, 18, 4, 12, 26, 19]
V = [37, 34, 1, 20, 55, 21, 15, 64, 3, 51, 39, 25, 46, 41, 9, 14]
C = 152"
419,ilp_partition,4,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07994461059570312}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 6, 3, 9]"
420,ilp_assign,8,51,65,0,68,0,"{'ok': True, 'value': 380, 'stdout': '380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2592952251434326}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 24, 10, 17, 8, 18, 11], [22, 23, 4, 10, 5, 12, 24], [16, 20, 9, 1, 15, 6, 5], [15, 17, 15, 19, 4, 22, 11], [4, 16, 2, 17, 9, 12, 9], [10, 11, 22, 20, 17, 7, 8], [17, 23, 8, 19, 18, 23, 14]]"
421,ilp_prod,4,44,33,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_26eil1qh/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_26eil1qh/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15820765495300293}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 10, 11]
consumption (rows=resources) = [[3, 3, 2], [4, 2, 3], [3, 4, 2]]
capacity = [11, 14, 9]
upper_bounds = [3, 3, 4]"
422,ilp_prod,4,40,-1,0,72,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_vqqq4mm4/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16889190673828125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 6, 7]
consumption (rows=resources) = [[2, 4, 1], [2, 2, 1], [3, 4, 4]]
capacity = [16, 8, 12]
upper_bounds = [4, 3, 3]"
423,sub,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08803653717041016}",1,Compute: 20 - 15
424,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__ns_wils/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec__ns_wils/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08919334411621094}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
425,sub,16,4058869238483781,4058869238483781,1,4058869238483781,1,"{'ok': True, 'value': 4058869238483781, 'stdout': '4058869238483781\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09962582588195801}",1,Compute: 5584900749992093 - 1526031511508312
426,sub,16,4623185590565602,4623185590565602,1,4623185590565602,1,"{'ok': True, 'value': 4623185590565602, 'stdout': '4623185590565602\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1034402847290039}",1,Compute: 6230353374784887 - 1607167784219285
427,add,2,55,55,1,55,1,"{'ok': True, 'value': 55, 'stdout': '55\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11701178550720215}",1,Compute: 17 + 38
428,add,4,11563,11056,0,11563,1,"{'ok': True, 'value': 11563, 'stdout': '11563\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10795760154724121}",1,Compute: 3233 + 8330
429,sub,4,6422,6422,1,6422,1,"{'ok': True, 'value': 6422, 'stdout': '6422\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09471273422241211}",1,Compute: 9914 - 3492
430,ilp_prod,2,16,15,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_9omj26zr/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1917269229888916}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[1, 2], [3, 3]]
capacity = [9, 8]
upper_bounds = [3, 3]"
431,ilp_partition,4,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12377452850341797}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 11, 10, 6]"
432,knap,32,1791,1084,0,1046,0,"{'ok': True, 'value': 1791, 'stdout': '1791\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11454057693481445}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 6, 60, 61, 29, 37, 55, 17, 38, 5, 37, 6, 2, 9, 31, 57, 10, 28, 32, 9, 5, 25, 22, 1, 30, 22, 5, 20, 16, 49, 57, 38]
V = [16, 51, 124, 26, 78, 51, 50, 118, 88, 90, 21, 75, 87, 53, 34, 59, 55, 21, 26, 64, 92, 96, 6, 67, 114, 45, 102, 15, 119, 123, 93, 99]
C = 423"
433,lcs,8,3,4,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08047056198120117}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdacbbdc""
T = ""adcaaada"""
434,sub,2,20,-20,0,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08933019638061523}",1,Compute: 85 - 65
435,rod,16,384,46,0,47,0,"{'ok': True, 'value': 384, 'stdout': '384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10677719116210938}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [24, 18, 22, 29, 26, 33, 30, 30, 25, 6, 11, 47, 39, 2, 12, 38]"
436,knap,2,7,9,0,8,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11288166046142578}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 5]
V = [2, 2, 7]
C = 6"
437,add,4,7346,7346,1,7346,1,"{'ok': True, 'value': 7346, 'stdout': '7346\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10406017303466797}",1,Compute: 4464 + 2882
438,ilp_prod,32,193,268,0,1014,0,"{'ok': True, 'value': 193, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/76b3ba5a3d1843988ededdeeeee74ccc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/76b3ba5a3d1843988ededdeeeee74ccc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 242.206 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -184 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 5\nCbc0013I At root node, 4 cuts changed objective from -233.95349 to -194.40687 in 87 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 158 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 69 row cuts average 4.1 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0010I After 0 nodes, 1 on tree, -184 best solution, best possible -194.40687 (0.01 seconds)\nCbc0012I Integer solution of -191 found by rounding after 297 iterations and 5 nodes (0.01 seconds)\nCbc0012I Integer solution of -193 found by DiveCoefficient after 297 iterations and 5 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -193, took 297 iterations and 5 nodes (0.01 seconds)\nCbc0032I Strong branching done 14 times (25 iterations), fathomed 0 nodes and fixed 0 variables\nCbc0035I Maximum depth 1, 0 variables fixed on reduced cost\nCuts at root node changed objective from -233.953 to -194.407\nProbing was tried 87 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 96 times and created 171 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 87 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 87 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 87 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 87 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 96 times and created 86 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                193.00000000\nEnumerated nodes:               5\nTotal iterations:               297\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.02\n\n193.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1900959014892578}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 32, 76, 30, 85, 32]
consumption (rows=resources) = [[22, 21, 32, 24, 24, 6], [10, 32, 20, 14, 31, 11], [16, 19, 7, 19, 14, 15], [9, 30, 23, 8, 4, 25]]
capacity = [91, 69, 74, 81]
upper_bounds = [4, 3, 3, 3, 3, 3]"
439,add,2,127,127,1,127,1,"{'ok': True, 'value': 127, 'stdout': '127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08518695831298828}",1,Compute: 80 + 47
440,ilp_assign,2,7,7,1,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_4w658i8y/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_4w658i8y/main.py"", line 18, in assignment_problem\n    cover_row = zero_cover[0]\nIndexError: index 0 is out of bounds for axis 0 with size 0\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22096848487854004}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [6, 3]]"
441,ilp_partition,2,3,0,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11042928695678711}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 6, 6]"
442,mul,8,1738029294980400,135023,0,173048464336480,0,"{'ok': True, 'value': 1738029294980400, 'stdout': '1738029294980400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09867596626281738}",1,Compute: 37007760 * 46963915
443,mul,32,2796193869882502419951034863675448333381047935090436443214182700,1000000007,0,277574934964444278784672666850423933883530,0,"{'ok': True, 'value': 2796193869882502419951034863675448333381047935090436443214182700, 'stdout': '2796193869882502419951034863675448333381047935090436443214182700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08356690406799316}",1,Compute: 82881505961073813864117327893615 * 33737247380564788376302186456980
444,ilp_partition,4,4,1,0,10,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09200882911682129}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 5, 8, 5]"
445,add,2,63,63,1,63,1,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11396646499633789}",1,Compute: 50 + 13
446,mul,16,79381763234577039342580206706548,78684155565414485694620045354,0,79864541408116983552666058623536000000000000000000,0,"{'ok': True, 'value': 79381763234577039342580206706548, 'stdout': '79381763234577039342580206706548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08806657791137695}",1,Compute: 8385799049311023 * 9466213388585676
447,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09068107604980469}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [56, 67, 53, 10, 89, 66, 53, 46, 29, 46, 41, 23, 28, 82, 5, 55, 25, 63, 42, 1, 77, 30, 22, 33]"
448,lcs,32,19,10,0,15,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09064507484436035}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabcbaaccaabcabacbccabcbbcdcdaad""
T = ""daaabddbabddcbdcbdabcccbcbccccdcc"""
449,knap,16,411,740,0,658,0,"{'ok': True, 'value': 411, 'stdout': '411\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11055183410644531}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 31, 6, 27, 10, 15, 20, 11, 12, 2, 12, 30, 17, 16, 8, 4]
V = [11, 43, 38, 48, 45, 45, 5, 3, 54, 14, 12, 50, 43, 1, 53, 58]
C = 111"
450,knap,8,76,240,0,79,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08258605003356934}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 15, 13, 6, 9, 14, 4, 9]
V = [13, 10, 10, 9, 28, 4, 12, 14]
C = 35"
451,knap,2,10,19,0,14,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0991520881652832}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 3]
V = [9, 8, 10]
C = 6"
452,mul,2,893,893,1,893,1,"{'ok': True, 'value': 893, 'stdout': '893\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11138439178466797}",1,Compute: 19 * 47
453,mul,2,884,90,0,884,1,"{'ok': True, 'value': 884, 'stdout': '884\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09986996650695801}",1,Compute: 68 * 13
454,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09964227676391602}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [51, 67, 71, 70, 71, 22, 54, 27, 17, 48, 15, 9, 28, 9, 16, 13, 73, 54, 34, 18, 57, 84, 59, 53]"
455,rod,16,560,36,0,165,0,"{'ok': True, 'value': 560, 'stdout': '560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0889887809753418}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 19, 36, 5, 41, 25, 1, 18, 33, 44, 44, 47, 31, 11, 34, 24]"
456,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11511683464050293}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 18, 1, 3, 13, 16, 17, 12]"
457,rod,4,40,10,0,16,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10451626777648926}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 2, 2, 8]"
458,mul,4,10003176,896,0,10011936,0,"{'ok': True, 'value': 10003176, 'stdout': '10003176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1153566837310791}",1,Compute: 4308 * 2322
459,ilp_prod,8,60,-1,0,0,0,"{'ok': True, 'value': 60, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e55305b4a0dd42ff9e736e6e11a9adf2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e55305b4a0dd42ff9e736e6e11a9adf2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 69 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -60 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -69 to -69 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -60, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -69 to -69\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                60.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n60.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17317652702331543}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 10, 20, 18]
consumption (rows=resources) = [[4, 5, 5, 4], [5, 5, 7, 6], [7, 8, 5, 8], [1, 3, 6, 4]]
capacity = [21, 26, 19, 23]
upper_bounds = [3, 3, 3, 3]"
460,lcs,16,9,7,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08279061317443848}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcccabccccabbabc""
T = ""cacbcbddbaababadc"""
461,ilp_assign,4,15,10,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_z6zvy6du/main.py"", line 39, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_z6zvy6du/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09124326705932617}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 8, 11, 1], [1, 6, 8, 8], [11, 10, 7, 3], [10, 12, 3, 7]]"
462,lcs,8,3,3,1,7,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07902860641479492}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbcbbdd""
T = ""bdaabaaab"""
463,knap,2,10,16,0,13,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08528923988342285}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 4]
V = [3, 5, 10]
C = 6"
464,ilp_assign,32,138,185,0,200,0,"{'ok': True, 'value': 138, 'stdout': '138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41808176040649414}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[80, 92, 52, 93, 87, 46, 34], [75, 4, 77, 24, 78, 80, 34], [8, 59, 46, 16, 25, 63, 61], [18, 50, 36, 64, 52, 17, 95], [31, 63, 53, 25, 79, 85, 54], [95, 75, 71, 7, 19, 13, 75], [96, 48, 94, 19, 18, 44, 39]]"
465,rod,32,752,1093,0,840,0,"{'ok': True, 'value': 752, 'stdout': '752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09302616119384766}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [3, 47, 34, 53, 33, 65, 81, 4, 57, 62, 89, 75, 47, 72, 31, 40, 17, 33, 24, 78, 59, 3, 76, 36, 17, 95, 90, 66, 88, 52, 23, 56]"
466,mul,8,448808135417922,44634266566,0,43344136433636,0,"{'ok': True, 'value': 448808135417922, 'stdout': '448808135417922\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10805535316467285}",1,Compute: 16772759 * 26758158
467,mul,16,14792790456145566753778047999300,2016331226322159,0,14790976981496575551466330,0,"{'ok': True, 'value': 14792790456145566753778047999300, 'stdout': '14792790456145566753778047999300\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0917367935180664}",1,Compute: 7336488302632700 * 2016331226322159
468,ilp_assign,32,86,114,0,186,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38994789123535156}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[81, 89, 41, 21, 40, 8, 56], [64, 2, 19, 46, 92, 5, 66], [69, 9, 70, 22, 65, 40, 38], [42, 32, 42, 76, 40, 84, 37], [63, 55, 4, 33, 89, 54, 88], [50, 53, 64, 48, 86, 64, 7], [66, 85, 77, 54, 1, 30, 9]]"
469,ilp_prod,2,29,35,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_rr0lvpbn/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15247249603271484}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 7]
consumption (rows=resources) = [[3, 1], [1, 2]]
capacity = [10, 8]
upper_bounds = [3, 4]"
470,lcs,16,7,6,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09323525428771973}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbbdadbbbdbbdcc""
T = ""acaadbbadacdadb"""
471,knap,2,10,12,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10132813453674316}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 2]
V = [7, 2, 10]
C = 4"
472,ilp_prod,8,48,100,0,110,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_hccntyum/main.py"", line 11, in <module>\n    x = LpVariable.dicts(""Items"", range(4), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17357110977172852}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 10, 12, 15]
consumption (rows=resources) = [[2, 8, 2, 3], [3, 7, 3, 8], [1, 4, 4, 7], [3, 2, 6, 5]]
capacity = [23, 16, 16, 25]
upper_bounds = [5, 3, 4, 3]"
473,lcs,8,6,5,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10111021995544434}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babcabad""
T = ""dbacadaad"""
474,rod,4,44,16,0,33,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11009550094604492}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 11, 2, 8]"
475,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10454535484313965}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""aca"""
476,knap,4,31,26,0,16,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08991026878356934}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 2, 3, 3]
V = [2, 6, 15, 16]
C = 7"
477,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_2h6eakd7/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_2h6eakd7/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11954379081726074}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 6]"
478,ilp_prod,2,24,33,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_godzio33/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16652798652648926}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 5]
consumption (rows=resources) = [[2, 2], [1, 2]]
capacity = [6, 9]
upper_bounds = [3, 3]"
479,knap,8,98,53,0,29,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09232330322265625}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 11, 1, 13, 14, 3, 2, 11]
V = [13, 29, 6, 10, 11, 20, 13, 23]
C = 28"
480,sub,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09161114692687988}",1,Compute: 67 - 65
481,add,4,10503,10503,1,10503,1,"{'ok': True, 'value': 10503, 'stdout': '10503\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08228921890258789}",1,Compute: 5678 + 4825
482,lcs,16,9,7,0,30,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10210251808166504}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caabbcacbddabbbc""
T = ""ddacdabddcacbdca"""
483,sub,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09222579002380371}",1,Compute: 64 - 62
484,ilp_assign,4,20,3,0,11,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20675110816955566}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6, 12, 3], [11, 9, 10, 3], [8, 1, 7, 4], [12, 11, 11, 11]]"
485,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09171819686889648}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""ada"""
486,knap,32,1690,1003,0,1047,0,"{'ok': True, 'value': 1690, 'stdout': '1690\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09090709686279297}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 11, 19, 11, 15, 34, 42, 60, 27, 36, 21, 32, 21, 63, 61, 45, 43, 53, 62, 48, 1, 15, 43, 39, 62, 26, 55, 53, 63, 20, 26, 59]
V = [80, 7, 107, 13, 66, 53, 88, 112, 37, 62, 5, 122, 69, 79, 85, 85, 112, 53, 34, 52, 98, 107, 76, 90, 3, 105, 9, 14, 76, 127, 46, 68]
C = 585"
487,sub,4,379,379,1,379,1,"{'ok': True, 'value': 379, 'stdout': '379\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09164309501647949}",1,Compute: 9098 - 8719
488,knap,32,2077,1008,0,1043,0,"{'ok': True, 'value': 2077, 'stdout': '2077\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09971261024475098}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [39, 48, 27, 51, 29, 53, 30, 2, 32, 53, 48, 29, 55, 7, 22, 34, 13, 54, 55, 21, 45, 6, 52, 25, 15, 43, 54, 19, 12, 53, 36, 20]
V = [38, 76, 95, 72, 40, 15, 113, 116, 116, 61, 93, 113, 102, 119, 109, 111, 106, 32, 105, 125, 45, 53, 128, 60, 64, 96, 70, 118, 75, 31, 102, 89]
C = 541"
489,add,32,103924224339912180814342554075374,103924224339912180814342554075474,0,103924224339912180814342564075374,0,"{'ok': True, 'value': 103924224339912180814342554075374, 'stdout': '103924224339912180814342554075374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10108160972595215}",1,Compute: 86209617666627470222930241226626 + 17714606673284710591412312848748
490,ilp_assign,4,17,15,0,12,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.23644208908081055}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 8, 9, 2], [5, 5, 5, 4], [10, 1, 11, 10], [9, 4, 10, 9]]"
491,lcs,32,18,16,0,20,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1142430305480957}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbacbbacbcbcbccabdbacbbdbddabda""
T = ""caaaaddbbabdbccdadcbbbdbabcdddc"""
492,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09070897102355957}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""a"""
493,rod,2,10,10,1,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_yd1umo_3/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_yd1umo_3/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08923602104187012}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 4]"
494,sub,16,706919628599182,686301962859918,0,706919628599176,0,"{'ok': True, 'value': 706919628599182, 'stdout': '706919628599182\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08519458770751953}",1,Compute: 5332899391385619 - 4625979762786437
495,add,32,109209294417630251511871440479051,109209294417630251511871440479051,1,109209304417630251511871440479051,0,"{'ok': True, 'value': 109209294417630251511871440479051, 'stdout': '109209294417630251511871440479051\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0898900032043457}",1,Compute: 65303272169088777786405423716191 + 43906022248541473725466016762860
496,add,2,55,15,0,55,1,"{'ok': True, 'value': 55, 'stdout': '55\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10092520713806152}",1,Compute: 32 + 23
497,ilp_assign,4,8,11,0,0,0,"{'ok': True, 'value': -8, 'stdout': '-8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20461320877075195}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 6, 11], [5, 1, 8, 8], [5, 12, 3, 8], [5, 6, 11, 1]]"
498,sub,16,7666389421794644,7,0,9290237063091684,0,"{'ok': True, 'value': 7666389421794644, 'stdout': '7666389421794644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09875226020812988}",1,Compute: 9470664578791358 - 1804275156996714
499,ilp_assign,32,130,10,0,114,0,"{'ok': True, 'value': 130, 'stdout': '130\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3869166374206543}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[73, 16, 31, 47, 83, 44, 55], [53, 14, 38, 24, 19, 62, 63], [17, 42, 53, 46, 45, 61, 87], [9, 2, 50, 58, 58, 39, 10], [34, 16, 75, 71, 83, 22, 40], [54, 71, 21, 70, 25, 71, 53], [40, 92, 80, 79, 28, 66, 9]]"
500,rod,8,76,22,0,50,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08447980880737305}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [6, 19, 5, 9, 16, 10, 4, 16]"
501,knap,16,303,161,0,840,0,"{'ok': True, 'value': 303, 'stdout': '303\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10834836959838867}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 23, 12, 1, 10, 30, 30, 30, 11, 19, 30, 26, 31, 23, 27, 4]
V = [10, 23, 36, 2, 5, 56, 37, 29, 4, 23, 25, 58, 37, 8, 48, 29]
C = 161"
502,ilp_assign,32,114,77,0,360,0,"{'ok': True, 'value': 114, 'stdout': '114\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4097301959991455}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[69, 55, 90, 48, 4, 63, 46], [3, 92, 5, 27, 79, 51, 59], [96, 57, 87, 52, 11, 82, 23], [95, 34, 28, 50, 62, 2, 10], [54, 30, 73, 69, 3, 84, 27], [5, 18, 18, 95, 32, 9, 25], [39, 76, 23, 86, 73, 91, 77]]"
503,add,8,132939837,132939837,1,132939837,1,"{'ok': True, 'value': 132939837, 'stdout': '132939837\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09129452705383301}",1,Compute: 33517757 + 99422080
504,rod,2,8,6,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_k0s0ew90/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_k0s0ew90/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10176992416381836}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
505,lcs,4,3,3,1,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0862112045288086}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabc""
T = ""dcbcb"""
506,add,8,122945443,84450962,0,122945443,1,"{'ok': True, 'value': 122945443, 'stdout': '122945443\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10862326622009277}",1,Compute: 38494481 + 84450962
507,rod,16,208,50,0,47,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ftikgxnr/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_ftikgxnr/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09061408042907715}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [2, 26, 6, 47, 2, 40, 16, 4, 14, 45, 18, 41, 9, 16, 46, 7]"
508,ilp_partition,4,6,3,0,1,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0905759334564209}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 1, 8, 9]"
509,knap,4,20,19,0,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08597540855407715}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 5, 8, 3]
V = [1, 11, 9, 9]
C = 11"
510,ilp_partition,4,2,0,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09546446800231934}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 3, 1, 12]"
511,sub,4,2100,2100,1,2100,1,"{'ok': True, 'value': 2100, 'stdout': '2100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08698344230651855}",1,Compute: 4280 - 2180
512,add,16,6306881608170551,6306881608170551,1,6306881608170551,1,"{'ok': True, 'value': 6306881608170551, 'stdout': '6306881608170551\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10030794143676758}",1,Compute: 1031127536510871 + 5275754071659680
513,mul,8,842744821699088,2875308,0,8481120553363368,0,"{'ok': True, 'value': 842744821699088, 'stdout': '842744821699088\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08111763000488281}",1,Compute: 46276592 * 18211039
514,lcs,4,3,3,1,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08596944808959961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbab""
T = ""bbadc"""
515,sub,16,1487204260203886,1487204260203886,1,1487204260203886,1,"{'ok': True, 'value': 1487204260203886, 'stdout': '1487204260203886\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08186888694763184}",1,Compute: 5203419295167514 - 3716215034963628
516,add,8,125023714,124725544,0,124723714,0,"{'ok': True, 'value': 125023714, 'stdout': '125023714\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08364033699035645}",1,Compute: 30614683 + 94409031
517,rod,8,136,22,0,24,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0809483528137207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 18, 19, 3, 3, 11, 24, 2]"
518,ilp_assign,2,4,2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_un129vi1/main.py"", line 28, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_un129vi1/main.py"", line 23, in assignment_problem\n    C[:, zero_cover] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22020196914672852}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 1], [3, 3]]"
519,ilp_prod,2,12,15,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_bnu8k3_0/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17746853828430176}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[1, 2], [3, 3]]
capacity = [10, 10]
upper_bounds = [3, 3]"
520,ilp_prod,8,52,73,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_3njbz30g/main.py"", line 12, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_3njbz30g/main.py"", line 12, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nTypeError: unsupported operand type(s) for *: \'int\' and \'dict\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1728520393371582}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 12, 13, 3]
consumption (rows=resources) = [[7, 1, 6, 3], [7, 1, 6, 8], [6, 8, 2, 7], [4, 5, 1, 5]]
capacity = [24, 29, 20, 24]
upper_bounds = [3, 3, 4, 3]"
521,add,32,143092766285148816513528658131693,142492766285148816515528658131793,0,143092766285148816513528658131693,1,"{'ok': True, 'value': 143092766285148816513528658131693, 'stdout': '143092766285148816513528658131693\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09193158149719238}",1,Compute: 79481830634744412423589855631075 + 63610935650404404089938802500618
522,add,16,9706559042180071,9706558942180071,0,9706558942180071,0,"{'ok': True, 'value': 9706559042180071, 'stdout': '9706559042180071\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10073685646057129}",1,Compute: 8453717072087814 + 1252841970092257
523,mul,4,6114666,6075526,0,6185966,0,"{'ok': True, 'value': 6114666, 'stdout': '6114666\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0908966064453125}",1,Compute: 1059 * 5774
524,knap,8,124,71,0,110,0,"{'ok': True, 'value': 124, 'stdout': '124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09116315841674805}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 2, 16, 10, 8, 10, 3, 8]
V = [30, 23, 1, 1, 19, 27, 18, 26]
C = 32"
525,lcs,16,8,7,0,9,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09082889556884766}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacacdbbaddddcab""
T = ""bdbbdddbacbdccd"""
526,mul,32,1030362664878583276823948179437043739292347095769482036550770590,10403399379646584404949744486119647606690446851600,0,10414134966914728788342665854653553883523644649669563646889,0,"{'ok': True, 'value': 1030362664878583276823948179437043739292347095769482036550770590, 'stdout': '1030362664878583276823948179437043739292347095769482036550770590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08944487571716309}",1,Compute: 92532556477794048302183362868310 * 11135136692412141280936487486189
527,rod,4,16,9,0,10,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11910700798034668}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 7, 5, 6]"
528,ilp_prod,16,269,126,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_bd__a290/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_bd__a290/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18570470809936523}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 43, 24, 18, 39, 27]
consumption (rows=resources) = [[15, 4, 1, 2, 3, 2], [1, 3, 2, 6, 5, 9], [11, 8, 2, 11, 14, 1], [7, 5, 16, 15, 8, 3]]
capacity = [40, 34, 45, 33]
upper_bounds = [3, 5, 3, 3, 3, 3]"
529,add,16,18006779107142600,17996779107142601,0,18006779107142600,1,"{'ok': True, 'value': 18006779107142600, 'stdout': '18006779107142600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1167440414428711}",1,Compute: 8861173655807892 + 9145605451334708
530,ilp_assign,32,157,250,0,205,0,"{'ok': True, 'value': 157, 'stdout': '157\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3933556079864502}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[51, 58, 34, 55, 51, 30, 92], [75, 26, 45, 38, 51, 3, 81], [96, 22, 55, 23, 39, 15, 27], [61, 22, 39, 67, 31, 88, 93], [84, 14, 14, 92, 66, 46, 6], [38, 70, 73, 30, 78, 42, 24], [45, 92, 14, 95, 44, 44, 60]]"
531,ilp_partition,2,0,8,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09668922424316406}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 5, 5]"
532,rod,16,196,46,0,38,0,"{'ok': True, 'value': 196, 'stdout': '196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10190773010253906}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [4, 22, 38, 33, 29, 26, 32, 19, 23, 15, 5, 23, 13, 27, 21, 19]"
533,lcs,32,20,10,0,10,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12355184555053711}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadcadacdabaaadcbdcbaabcdccbdcab""
T = ""dccbcadaadbdaccdaddbdcdcbababdac"""
534,add,32,99993836761643554063434225316917,100393836761643554052924225306917,0,100000000000000000000000000000000,0,"{'ok': True, 'value': 99993836761643554063434225316917, 'stdout': '99993836761643554063434225316917\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08203768730163574}",1,Compute: 64398900855850157926815652306664 + 35594935905793396136618573010253
535,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09377694129943848}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 11, 5, 17, 14, 14, 1, 3]"
536,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0926971435546875}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 23, 4, 23, 5, 18, 2, 18]"
537,sub,8,15631110,15631110,1,15631110,1,"{'ok': True, 'value': 15631110, 'stdout': '15631110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09555745124816895}",1,Compute: 39014742 - 23383632
538,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08359527587890625}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 3, 15, 24, 15, 15, 20]"
539,add,16,9822990650600969,,0,9823000650580969,0,"{'ok': True, 'value': 9822990650600969, 'stdout': '9822990650600969\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10146951675415039}",1,Compute: 7315188817152914 + 2507801833448055
540,knap,8,98,105,0,103,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10390925407409668}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 3, 4, 13, 16, 14, 16]
V = [17, 22, 3, 19, 19, 9, 21, 29]
C = 34"
541,ilp_prod,4,29,35,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_w_enuo4b/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16704821586608887}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7, 10]
consumption (rows=resources) = [[2, 2, 4], [1, 4, 2], [1, 3, 1]]
capacity = [10, 13, 14]
upper_bounds = [5, 3, 3]"
542,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12025284767150879}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 12, 8, 21, 14, 23, 2, 17]"
543,sub,32,59231761308684106909105589603508,24968117379138934694476801139394,0,59231761308684106909105589603508,1,"{'ok': True, 'value': 59231761308684106909105589603508, 'stdout': '59231761308684106909105589603508\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09292030334472656}",1,Compute: 84199878687823041603582390742902 - 24968117379138934694476801139394
544,sub,16,1295172121093221,13051721221093221,0,1295172121093211,0,"{'ok': True, 'value': 1295172121093221, 'stdout': '1295172121093221\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10252261161804199}",1,Compute: 8204429428974789 - 6909257307881568
545,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11693286895751953}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 2, 9, 3]"
546,sub,16,5424995804715914,5425000004715914,0,5425000004715914,0,"{'ok': True, 'value': 5424995804715914, 'stdout': '5424995804715914\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09692192077636719}",1,Compute: 8465633226871375 - 3040637422155461
547,ilp_prod,4,19,34,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_nzvvvhr4/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1804196834564209}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 4, 8]
consumption (rows=resources) = [[2, 2, 4], [2, 4, 4], [4, 3, 1]]
capacity = [13, 10, 15]
upper_bounds = [3, 3, 3]"
548,ilp_prod,16,273,153,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_enmx74us/main.py"", line 11, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(6), range(4)), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 466, in dicts\n    d[i] = LpVariable.dicts(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16144847869873047}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [44, 47, 20, 37, 40, 3]
consumption (rows=resources) = [[6, 4, 12, 8, 7, 3], [3, 15, 16, 14, 11, 9], [4, 7, 7, 2, 13, 13], [6, 14, 7, 6, 8, 8]]
capacity = [34, 57, 41, 60]
upper_bounds = [5, 3, 3, 4, 3, 3]"
549,ilp_prod,4,33,72,0,33,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xsmi8c3y/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16480398178100586}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 9]
consumption (rows=resources) = [[2, 4, 2], [4, 4, 1], [2, 3, 3]]
capacity = [15, 10, 9]
upper_bounds = [3, 3, 3]"
550,lcs,32,18,16,0,20,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834040641784668}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addbcdcbbbddcaaadbadacadcdddcdcd""
T = ""ccbdbddcbbcbccbdccbbacdcbccadccd"""
551,ilp_prod,2,19,19,1,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_5rqrr14o/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16684842109680176}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[1, 3], [3, 1]]
capacity = [10, 8]
upper_bounds = [3, 3]"
552,rod,4,48,22,0,18,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09590363502502441}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 9, 12, 4]"
553,sub,16,1357022751504812,1357022751504812,1,1357022751504812,1,"{'ok': True, 'value': 1357022751504812, 'stdout': '1357022751504812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08081436157226562}",1,Compute: 5543384494286539 - 4186361742781727
554,sub,2,32,32,1,32,1,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09889841079711914}",1,Compute: 80 - 48
555,add,32,120328523266757234462813057380745,120328523266757234462813057380745,1,119328523266757234462813057380745,0,"{'ok': True, 'value': 120328523266757234462813057380745, 'stdout': '120328523266757234462813057380745\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1000204086303711}",1,Compute: 90443747178122302251510461356873 + 29884776088634932211302596023872
556,ilp_prod,4,48,-1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xmgviovl/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1636371612548828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 7]
consumption (rows=resources) = [[2, 1, 3], [3, 3, 4], [4, 2, 1]]
capacity = [16, 13, 12]
upper_bounds = [3, 4, 3]"
557,add,2,39,39,1,39,1,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10001683235168457}",1,Compute: 21 + 18
558,knap,8,89,114,0,113,0,"{'ok': True, 'value': 89, 'stdout': '89\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09139013290405273}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 11, 3, 10, 7, 16, 1, 5]
V = [9, 8, 31, 7, 4, 7, 12, 26]
C = 27"
559,add,32,131064437279333264174424666941704,131064437279333264174424666941704,1,131064437279333264174424666941704,1,"{'ok': True, 'value': 131064437279333264174424666941704, 'stdout': '131064437279333264174424666941704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09055709838867188}",1,Compute: 60628110869074712502143876185071 + 70436326410258551672280790756633
560,mul,2,1980,1980,1,1980,1,"{'ok': True, 'value': 1980, 'stdout': '1980\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10366058349609375}",1,Compute: 99 * 20
561,knap,4,21,27,0,24,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10158658027648926}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 8, 7]
V = [9, 6, 15, 12]
C = 10"
562,knap,16,426,149,0,1053,0,"{'ok': True, 'value': 426, 'stdout': '426\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09212684631347656}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [20, 19, 29, 8, 29, 4, 26, 31, 22, 27, 17, 2, 2, 25, 10, 27]
V = [33, 63, 41, 32, 30, 12, 49, 36, 60, 13, 3, 48, 34, 16, 38, 49]
C = 149"
563,ilp_prod,32,244,352,0,1008,0,"{'ok': True, 'value': 244, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ca2ff316a6ee414c954e91324715459c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ca2ff316a6ee414c954e91324715459c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 266.037 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -229 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -244 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -266.03704 to -244 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 3 row cuts average 2.7 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -244, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -266.037 to -244\nProbing was tried 2 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                244.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n244.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18045735359191895}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 23, 49, 33, 77, 61]
consumption (rows=resources) = [[9, 20, 31, 14, 27, 9], [10, 7, 29, 7, 14, 1], [23, 4, 27, 21, 30, 18], [15, 32, 24, 19, 16, 8]]
capacity = [78, 100, 72, 128]
upper_bounds = [3, 3, 3, 3, 3, 4]"
564,mul,32,4328208053319933877574904404395170603042864468315217155182864374,0,0,433842782935426896536222938845736446496695466468868646826626,0,"{'ok': True, 'value': 4328208053319933877574904404395170603042864468315217155182864374, 'stdout': '4328208053319933877574904404395170603042864468315217155182864374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09236264228820801}",1,Compute: 47822885283407792007186189362974 * 90504954430710831783907324646101
565,ilp_assign,4,6,3,0,6,1,"{'ok': True, 'value': -5, 'stdout': '-5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20984101295471191}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1, 7, 9], [3, 3, 2, 10], [12, 6, 5, 1], [8, 11, 1, 9]]"
566,ilp_assign,16,70,110,0,11,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41414642333984375}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 28, 4, 31, 24, 16, 7], [42, 19, 4, 38, 30, 30, 7], [48, 22, 3, 20, 2, 14, 36], [18, 35, 29, 44, 40, 27, 31], [9, 10, 45, 35, 45, 41, 25], [12, 35, 35, 40, 20, 10, 10], [30, 26, 44, 32, 1, 31, 9]]"
567,lcs,16,10,8,0,1,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09265613555908203}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdcdaacdadcacbd""
T = ""bcbaddcabcadcaadb"""
568,knap,32,1550,10444,0,1046,0,"{'ok': True, 'value': 1550, 'stdout': '1550\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11841678619384766}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 44, 50, 35, 3, 46, 59, 61, 56, 55, 62, 16, 7, 29, 57, 63, 43, 50, 30, 43, 60, 54, 2, 51, 61, 48, 51, 42, 15, 56, 60, 31]
V = [117, 1, 30, 72, 90, 20, 49, 117, 86, 36, 38, 85, 3, 84, 41, 4, 20, 44, 79, 100, 37, 123, 5, 21, 21, 59, 117, 62, 93, 21, 99, 103]
C = 673"
569,mul,32,2448456711345579172538984276315786438586691583517303789475603320,"The exact result of the multiplication is too large to be represented in a standard integer data type. Therefore, it is not possible to provide an answer in this format.",0,2458156409678834556544556577477856474446666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 2448456711345579172538984276315786438586691583517303789475603320, 'stdout': '2448456711345579172538984276315786438586691583517303789475603320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08638119697570801}",1,Compute: 79438345811192186190248061232716 * 30822100917924860417863252657770
570,add,16,6025269665758821,12345678901234567890123456789012345678901234567890123456789012345678901234567890,0,5925269665758821,0,"{'ok': True, 'value': 6025269665758821, 'stdout': '6025269665758821\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09174203872680664}",1,Compute: 3669351036114377 + 2355918629644444
571,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09037399291992188}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 19, 2, 3, 4, 12, 24, 4]"
572,lcs,32,19,16,0,16,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10263824462890625}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddbccbcccabbadabbdbbbcdcdcabbca""
T = ""cdcdbcdbadcbcaadcaabcdccdbaabaacc"""
573,lcs,16,10,7,0,8,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09430575370788574}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdddaadcbdbcbbc""
T = ""ddcadcadcbccdadbb"""
574,rod,2,8,8,1,8,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_c8ydqxls/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_c8ydqxls/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09148097038269043}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
575,ilp_prod,32,221,0,0,1059,0,"{'ok': True, 'value': 221, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4df7b79facdd4ca6b7533976cb85626a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4df7b79facdd4ca6b7533976cb85626a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 272.053 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -92 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -221 found by DiveCoefficient after 8 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 4.75\nCbc0013I At root node, 4 cuts changed objective from -272.05281 to -221 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 6 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 8 row cuts average 5.1 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -221, took 8 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -272.053 to -221\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 8 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 4 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                221.00000000\nEnumerated nodes:               0\nTotal iterations:               8\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n221.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1696152687072754}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [92, 37, 90, 92, 3, 28]
consumption (rows=resources) = [[10, 28, 23, 5, 21, 20], [21, 27, 29, 8, 13, 23], [21, 27, 16, 31, 30, 10], [24, 17, 26, 21, 24, 19]]
capacity = [66, 105, 82, 65]
upper_bounds = [3, 3, 3, 3, 3, 3]"
576,sub,8,32022452,32022452,1,32022452,1,"{'ok': True, 'value': 32022452, 'stdout': '32022452\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09758758544921875}",1,Compute: 55415810 - 23393358
577,ilp_assign,32,113,11,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_bm689d3f/main.py"", line 23, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_bm689d3f/main.py"", line 4, in hungarian_algorithm\n    cost_matrix[i] = [x - np.min(cost_matrix[i]) for x in cost_matrix[i]]\n  File ""/tmp/cot_exec_bm689d3f/main.py"", line 4, in <listcomp>\n    cost_matrix[i] = [x - np.min(cost_matrix[i]) for x in cost_matrix[i]]\nNameError: name \'np\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0853118896484375}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 30, 8, 25, 87, 14, 42], [2, 69, 48, 41, 43, 12, 40], [67, 64, 94, 16, 76, 48, 67], [39, 36, 2, 49, 83, 16, 71], [52, 38, 10, 37, 33, 33, 53], [75, 63, 10, 74, 69, 92, 45], [18, 63, 95, 59, 66, 31, 6]]"
578,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09336543083190918}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdb""
T = ""cacca"""
579,sub,32,52590087649286119830527420278626,62843869299287029711421120623426,0,52589987649286119830527420278626,0,"{'ok': True, 'value': 52590087649286119830527420278626, 'stdout': '52590087649286119830527420278626\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08164548873901367}",1,Compute: 62947442854298048953442262823456 - 10357355205011929122914842544830
580,rod,32,2240,1258,0,646,0,"{'ok': True, 'value': 2240, 'stdout': '2240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10885763168334961}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [70, 66, 56, 15, 28, 33, 91, 82, 3, 26, 16, 7, 53, 11, 63, 79, 92, 91, 66, 2, 66, 45, 72, 56, 28, 92, 57, 32, 26, 48, 62, 47]"
581,rod,8,19,18,0,16,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08482909202575684}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [1, 3, 8, 8, 8, 8, 11, 7]"
582,sub,32,7815688989480847927962794932540,78115688989480847928962794932540,0,7814489798948084792838280503254,0,"{'ok': True, 'value': 7815688989480847927962794932540, 'stdout': '7815688989480847927962794932540\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08433675765991211}",1,Compute: 67247651893910329851934932687753 - 59431962904429481923972137755213
583,sub,16,8087108777909359,1896381399844493,0,8087108777909359,1,"{'ok': True, 'value': 8087108777909359, 'stdout': '8087108777909359\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09295415878295898}",1,Compute: 9983490177753852 - 1896381399844493
584,knap,2,12,9,0,44,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08719158172607422}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 4]
V = [7, 4, 5]
C = 5"
585,sub,2,9,9,1,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09091448783874512}",1,Compute: 39 - 30
586,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09132575988769531}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 3, 2]"
587,mul,32,2700402569325225192275675388136023113037945242664520392643094304,2736894658584556061288536963413556333448339432674463486464,0,273440402698797952147595579407619464642664864864,0,"{'ok': True, 'value': 2700402569325225192275675388136023113037945242664520392643094304, 'stdout': '2700402569325225192275675388136023113037945242664520392643094304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10214424133300781}",1,Compute: 47409168077185688794689220359272 * 56959501270487743073472691753332
588,rod,8,168,22,0,90,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10266685485839844}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 9, 14, 12, 6, 10, 19, 16]"
589,add,4,7770,7770,1,7770,1,"{'ok': True, 'value': 7770, 'stdout': '7770\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0837247371673584}",1,Compute: 6450 + 1320
590,sub,4,6094,,0,6094,1,"{'ok': True, 'value': 6094, 'stdout': '6094\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10193634033203125}",1,Compute: 7831 - 1737
591,rod,32,1664,1136,0,514,0,"{'ok': True, 'value': 1664, 'stdout': '1664\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09441947937011719}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [52, 2, 72, 79, 52, 53, 80, 16, 30, 16, 26, 12, 46, 89, 55, 7, 30, 82, 55, 78, 32, 53, 92, 22, 5, 44, 82, 32, 24, 54, 93, 53]"
592,ilp_partition,16,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09529447555541992}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 27, 18, 37, 8, 39, 30, 17, 27, 41, 48, 42, 8, 8, 17, 48]"
593,ilp_partition,4,7,1,0,5,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1077117919921875}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 12, 3, 10]"
594,add,16,7453805839032516,18852402349009066,0,7453805839032516,1,"{'ok': True, 'value': 7453805839032516, 'stdout': '7453805839032516\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09267973899841309}",1,Compute: 1268733030140850 + 6185072808891666
595,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09457874298095703}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""ddd"""
596,mul,16,5875709166145349391601538290624,0,0,6002395957391632652663224752,0,"{'ok': True, 'value': 5875709166145349391601538290624, 'stdout': '5875709166145349391601538290624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10061049461364746}",1,Compute: 2520509463551512 * 2331159335488552
597,add,16,14321938385529840,14321938385529840,1,14321938385530040,0,"{'ok': True, 'value': 14321938385529840, 'stdout': '14321938385529840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11456871032714844}",1,Compute: 5381441752456611 + 8940496633073229
598,rod,32,1440,94,0,805,0,"{'ok': True, 'value': 1440, 'stdout': '1440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11760807037353516}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [45, 81, 44, 30, 25, 30, 28, 85, 43, 87, 27, 11, 60, 49, 41, 95, 82, 53, 83, 80, 22, 51, 90, 96, 80, 66, 60, 58, 32, 44, 70, 12]"
599,ilp_assign,4,19,55,0,28,0,"{'ok': True, 'value': 235, 'stdout': '235\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21762919425964355}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5, 7, 9], [8, 6, 6, 1], [6, 5, 8, 5], [12, 7, 9, 12]]"
600,mul,2,1122,12,0,1122,1,"{'ok': True, 'value': 1122, 'stdout': '1122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08345460891723633}",1,Compute: 51 * 22
601,lcs,16,9,6,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10941386222839355}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcbccaddbabaadc""
T = ""abbabbdccbabcdcaa"""
602,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11356902122497559}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [87, 20, 67, 51, 53, 44, 9, 90, 46, 75, 24, 95, 50, 41, 51, 35, 37, 6, 88, 70, 64, 5, 68, 73]"
603,add,8,95915992,95915992,1,95915992,1,"{'ok': True, 'value': 95915992, 'stdout': '95915992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0823068618774414}",1,Compute: 51435788 + 44480204
604,knap,8,98,147,0,147,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09193086624145508}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 4, 2, 13, 12, 5, 7, 4]
V = [1, 10, 17, 10, 31, 9, 12, 31]
C = 28"
605,rod,4,22,15,0,24,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09898233413696289}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 11, 12, 12]"
606,ilp_prod,8,78,105,0,105,0,"{'ok': True, 'value': 78, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ac375e534ce445e690fdc35270db7940-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ac375e534ce445e690fdc35270db7940-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 84.4857 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -67 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -78 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 2\nCbc0013I At root node, 2 cuts changed objective from -82.478261 to -78 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -78, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -82.4783 to -78\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                78.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n78.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17882776260375977}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 17, 24, 19]
consumption (rows=resources) = [[2, 7, 5, 5], [5, 8, 8, 1], [1, 7, 2, 8], [3, 7, 6, 3]]
capacity = [19, 21, 29, 26]
upper_bounds = [4, 3, 3, 3]"
607,rod,2,10,2,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_nxs854_9/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_nxs854_9/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0834813117980957}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 1]"
608,lcs,32,17,15,0,16,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09045028686523438}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcccabcbadaaabccbdcbaabcaabaaad""
T = ""bdaccdaccdadcdddacaddbbccdcdcbbbb"""
609,mul,4,90221196,8847006,0,90394996,0,"{'ok': True, 'value': 90221196, 'stdout': '90221196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10685062408447266}",1,Compute: 9516 * 9481
610,rod,4,10,12,0,8,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0828239917755127}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 5, 7, 8]"
611,knap,16,403,146,0,1048,0,"{'ok': True, 'value': 403, 'stdout': '403\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08672046661376953}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 22, 2, 29, 16, 23, 23, 19, 28, 6, 25, 22, 28, 11, 20, 4]
V = [21, 47, 58, 10, 18, 5, 23, 51, 41, 49, 15, 1, 37, 58, 37, 23]
C = 146"
612,ilp_prod,16,264,155,0,155,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0mc9uo1l/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_0mc9uo1l/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18767690658569336}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 14, 34, 32, 27, 26]
consumption (rows=resources) = [[4, 4, 3, 11, 11, 2], [1, 6, 1, 12, 4, 10], [3, 7, 2, 13, 4, 9], [2, 7, 8, 4, 11, 5]]
capacity = [43, 59, 33, 32]
upper_bounds = [10, 4, 4, 3, 3, 3]"
613,ilp_partition,4,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09162282943725586}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 8, 3]"
614,rod,2,6,6,1,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_jkxaohf5/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_jkxaohf5/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0875403881072998}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 6]"
615,ilp_prod,32,318,1056,0,1002,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6v8drd8i/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_6v8drd8i/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16556572914123535}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [43, 69, 7, 77, 11, 86]
consumption (rows=resources) = [[5, 32, 15, 30, 16, 23], [5, 6, 29, 19, 25, 31], [28, 32, 13, 18, 18, 25], [15, 3, 20, 7, 23, 29]]
capacity = [117, 100, 109, 69]
upper_bounds = [3, 3, 3, 3, 3, 3]"
616,ilp_partition,16,1,1,1,6,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09269309043884277}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 22, 16, 34, 36, 22, 7, 24, 31, 6, 17, 28, 20, 39, 29, 33]"
617,rod,8,63,22,0,34,0,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08987045288085938}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [6, 15, 24, 22, 22, 13, 13, 15]"
618,sub,32,47444406610515042749722802918286,-46364413409515042749724789099268,0,47444406610515042750022802918286,0,"{'ok': True, 'value': 47444406610515042749722802918286, 'stdout': '47444406610515042749722802918286\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09003448486328125}",1,Compute: 90969644030842867329562041303060 - 43525237420327824579839238384774
619,sub,8,24357358,24357358,1,24357358,1,"{'ok': True, 'value': 24357358, 'stdout': '24357358\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10966038703918457}",1,Compute: 41316672 - 16959314
620,rod,16,464,46,0,161,0,"{'ok': True, 'value': 464, 'stdout': '464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09874176979064941}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [29, 28, 23, 43, 39, 1, 29, 11, 5, 32, 47, 6, 3, 29, 22, 13]"
621,mul,32,3223881285603051778079050166496209219997648124017641927931730794,1000000007,0,323604668132959747556578477256825642669564766666344626452666,0,"{'ok': True, 'value': 3223881285603051778079050166496209219997648124017641927931730794, 'stdout': '3223881285603051778079050166496209219997648124017641927931730794\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09212660789489746}",1,Compute: 55763065596556736723761280110193 * 57813917709038584811629691157258
622,ilp_assign,4,19,16,0,12,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2373645305633545}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 8, 1, 9], [12, 6, 9, 7], [12, 4, 11, 10], [7, 9, 5, 10]]"
623,mul,32,635318673151642147509839941603244336447576203186879624530683580,6346433724776036649553331201108172321220,0,6238835238446463645856448868294436676664340349426455984544,0,"{'ok': True, 'value': 635318673151642147509839941603244336447576203186879624530683580, 'stdout': '635318673151642147509839941603244336447576203186879624530683580\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09295892715454102}",1,Compute: 32448835403984611822243310985645 * 19579090135038469623751066005804
624,ilp_assign,16,55,164,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_615gkhry/main.py"", line 35, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_615gkhry/main.py"", line 17, in hungarian_algorithm\n    smallest_uncovered = min([cost_matrix[i][j] for i, j in covered if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24917101860046387}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[48, 12, 26, 7, 40, 20, 11], [44, 9, 19, 9, 45, 8, 8], [43, 40, 27, 33, 4, 14, 41], [16, 16, 3, 39, 13, 40, 11], [15, 20, 40, 30, 12, 27, 13], [13, 32, 6, 6, 2, 16, 5], [25, 42, 19, 8, 3, 19, 7]]"
625,knap,16,377,108,0,1034,0,"{'ok': True, 'value': 377, 'stdout': '377\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1243441104888916}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 8, 21, 30, 17, 27, 21, 10, 2, 26, 7, 25, 20, 15, 22, 2]
V = [15, 40, 32, 1, 44, 19, 13, 47, 39, 7, 5, 60, 20, 17, 11, 63]
C = 130"
626,ilp_prod,4,24,24,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_uju2lt1l/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_uju2lt1l/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22510576248168945}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 4, 6]
consumption (rows=resources) = [[1, 3, 4], [4, 3, 2], [2, 3, 1]]
capacity = [12, 16, 8]
upper_bounds = [4, 3, 3]"
627,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12489748001098633}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [83, 2, 25, 66, 44, 86, 40, 44, 66, 66, 3, 26, 18, 11, 52, 34, 12, 54, 33, 7, 13, 58, 14, 22]"
628,rod,8,56,22,0,15,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09104013442993164}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 12, 3, 24, 3, 9, 17, 12]"
629,mul{'ok': True, 'value': 8017521442386884350856173876927343346309159617127817638106131360, 'stdout': '8017521442386884350856173876927343346309159617127817638106131360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09221005439758301}",1,Compute: 88140120461970299091146147284256 * 90963359255291620539587725361685
630,knap,32,1728,1000,0,1093,0,"{'ok': True, 'value': 1728, 'stdout': '1728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10711097717285156}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 47, 47, 9, 52, 5, 42, 12, 58, 45, 60, 44, 45, 32, 53, 48, 16, 60, 49, 37, 34, 22, 24, 14, 49, 53, 6, 56, 54, 31, 40, 13]
V = [114, 38, 94, 123, 117, 18, 100, 85, 100, 113, 24, 59, 89, 82, 8, 52, 86, 70, 10, 46, 78, 92, 60, 90, 65, 51, 73, 55, 26, 118, 1, 31]
C = 593"
631,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09553050994873047}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [78, 13, 93, 29, 82, 59, 31, 53, 25, 4, 95, 90, 80, 31, 78, 7, 79, 30, 63, 74, 62, 37, 83, 38]"
632,ilp_assign,16,46,11,0,117,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_palyh03z/main.py"", line 39, in <module>\n    res = hungarian_algorithm(C)\n  File ""/tmp/cot_exec_palyh03z/main.py"", line 20, in hungarian_algorithm\n    min_uncovered = min([cost_matrix[i][j] for i, j in covered if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.26645612716674805}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 31, 19, 39, 45, 47, 46], [35, 44, 10, 44, 29, 13, 9], [37, 7, 15, 30, 31, 2, 30], [10, 9, 11, 43, 35, 19, 36], [10, 5, 37, 5, 45, 31, 8], [4, 30, 47, 22, 16, 18, 30], [4, 8, 5, 40, 38, 24, 3]]"
633,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1112215518951416}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [84, 19, 57, 86, 12, 61, 44, 33, 35, 32, 25, 68, 8, 33, 34, 6, 47, 6, 48, 79, 92, 42, 53, 60]"
634,add,16,12068496973911792,12068496973911892,0,12068496973911792,1,"{'ok': True, 'value': 12068496973911792, 'stdout': '12068496973911792\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10044121742248535}",1,Compute: 6049392727442711 + 6019104246469081
635,knap,16,495,1043,0,1043,0,"{'ok': True, 'value': 495, 'stdout': '495\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10782146453857422}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 11, 31, 8, 24, 10, 19, 25, 13, 10, 9, 18, 18, 32, 8, 12]
V = [50, 4, 43, 59, 45, 42, 22, 17, 57, 49, 60, 55, 56, 60, 51, 16]
C = 136"
636,lcs,8,3,4,0,5,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10325908660888672}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcadabdc""
T = ""baaaacc"""
637,ilp_partition,16,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09598088264465332}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 34, 24, 46, 42, 31, 6, 46, 42, 13, 38, 18, 29, 11, 40, 21]"
638,rod,32,2816,1084,0,2728,0,"{'ok': True, 'value': 2816, 'stdout': '2816\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0971674919128418}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [88, 46, 91, 23, 78, 39, 47, 49, 76, 53, 33, 53, 77, 54, 30, 81, 33, 46, 25, 16, 3, 91, 30, 92, 29, 94, 50, 21, 81, 24, 28, 41]"
639,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08257412910461426}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""cad"""
640,ilp_prod,8,88,-1,0,105,0,"{'ok': True, 'value': 88, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e7dc2886581648d89c34e15d7162735f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e7dc2886581648d89c34e15d7162735f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 95.3226 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -81 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -88 found by DiveCoefficient after 60 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 3\nCbc0013I At root node, 3 cuts changed objective from -95.322581 to -88.263562 in 32 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 53 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -88, took 60 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -95.3226 to -88.2636\nProbing was tried 32 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 32 times and created 53 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 32 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 32 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 32 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 32 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                88.00000000\nEnumerated nodes:               0\nTotal iterations:               60\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n88.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19491934776306152}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 7, 15, 22]
consumption (rows=resources) = [[2, 3, 1, 7], [5, 8, 2, 4], [2, 8, 7, 8], [3, 6, 5, 3]]
capacity = [21, 19, 29, 31]
upper_bounds = [3, 3, 4, 3]"
641,ilp_assign,32,127,145,0,165,0,"{'ok': True, 'value': 127, 'stdout': '127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3886723518371582}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 12, 15, 70, 90, 40, 31], [48, 80, 67, 80, 59, 35, 67], [44, 37, 37, 76, 88, 36, 4], [43, 96, 19, 83, 17, 36, 66], [18, 57, 66, 34, 72, 6, 79], [5, 23, 44, 80, 20, 51, 43], [14, 17, 64, 53, 55, 89, 96]]"
642,rod,4,40,22,0,48,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08555316925048828}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 5, 7, 12]"
643,add,8,115164995,115155005,0,115165095,0,"{'ok': True, 'value': 115164995, 'stdout': '115164995\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10302281379699707}",1,Compute: 34069109 + 81095886
644,sub,32,28421447138399477537854382537831,-28421437138399477537854382537831,0,28421447138399477537854382537831,1,"{'ok': True, 'value': 28421447138399477537854382537831, 'stdout': '28421447138399477537854382537831\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08218169212341309}",1,Compute: 59408900533479770199504508845795 - 30987453395080292661650126307964
645,ilp_prod,2,36,48,0,48,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_su32_e_v/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18229317665100098}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6]
consumption (rows=resources) = [[3, 1], [1, 1]]
capacity = [6, 8]
upper_bounds = [3, 6]"
646,ilp_assign,8,23,11,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_qavxwmgu/main.py"", line 35, in <module>\n    res = hungarian_algorithm(C)\n  File ""/tmp/cot_exec_qavxwmgu/main.py"", line 17, in hungarian_algorithm\n    smallest_uncovered = min([cost_matrix[i][j] for i, j in covered if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19512104988098145}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 22, 13, 22, 6, 2, 22], [17, 11, 22, 11, 1, 20, 13], [21, 19, 4, 22, 22, 20, 17], [15, 9, 3, 2, 21, 17, 8], [15, 14, 19, 14, 2, 20, 7], [10, 5, 8, 6, 11, 23, 15], [2, 21, 11, 2, 10, 24, 10]]"
647,mul,16,19638458896247302563745938418664,195543438243733556,0,196501648883898345555646644066,0,"{'ok': True, 'value': 19638458896247302563745938418664, 'stdout': '19638458896247302563745938418664\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1058816909790039}",1,Compute: 2889103911305524 * 6797422141653986
648,ilp_partition,4,0,1,0,18,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.110931396484375}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 10, 7, 9]"
649,ilp_partition,4,3,1,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09672212600708008}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 7, 8, 9]"
650,add,2,88,88,1,88,1,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10074734687805176}",1,Compute: 40 + 48
651,knap,4,13,4,0,14,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09033751487731934}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 4, 2]
V = [3, 10, 1, 3]
C = 6"
652,knap,4,29,20,0,14,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09098124504089355}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 7, 6, 2]
V = [3, 5, 15, 14]
C = 11"
653,rod,2,8,8,1,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09927654266357422}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
654,knap,32,1644,1585,0,1088,0,"{'ok': True, 'value': 1644, 'stdout': '1644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10721302032470703}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [61, 11, 32, 41, 23, 7, 22, 10, 44, 31, 37, 51, 50, 46, 40, 25, 49, 10, 38, 12, 37, 44, 40, 42, 31, 34, 9, 11, 3, 61, 27, 26]
V = [83, 123, 32, 96, 59, 84, 85, 75, 56, 60, 85, 95, 34, 78, 36, 64, 51, 30, 56, 85, 66, 105, 100, 25, 14, 6, 114, 112, 33, 21, 95, 59]
C = 502"
655,rod,16,376,47,0,237,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ktmp6mzz/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_ktmp6mzz/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10204482078552246}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 47, 23, 30, 44, 32, 2, 4, 14, 23, 4, 30, 20, 7, 43, 11]"
656,rod,32,2304,1055,0,724,0,"{'ok': True, 'value': 2304, 'stdout': '2304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10238766670227051}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [72, 52, 20, 12, 90, 74, 62, 13, 33, 77, 88, 59, 84, 1, 58, 37, 39, 60, 49, 29, 11, 63, 96, 14, 3, 51, 55, 54, 82, 16, 13, 60]"
657,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09516620635986328}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 21, 81, 84, 5, 3, 86, 17, 59, 13, 3, 10, 80, 24, 27, 43, 78, 23, 9, 48, 90, 12, 44, 24]"
658,sub,4,3113,3113,1,3113,1,"{'ok': True, 'value': 3113, 'stdout': '3113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08969902992248535}",1,Compute: 8741 - 5628
659,mul,2,1134,378,0,1134,1,"{'ok': True, 'value': 1134, 'stdout': '1134\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08294081687927246}",1,Compute: 27 * 42
660,ilp_partition,8,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09177732467651367}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 9, 11, 24, 17, 17, 10, 14]"
661,ilp_prod,8,73,-1,0,108,0,"{'ok': True, 'value': 80, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bead9c0ab8374d9eba1f7e73fd847972-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bead9c0ab8374d9eba1f7e73fd847972-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (-1) rows, 4 (0) columns and 12 (-4) elements\n0  Obj -0 Dual inf 65.749996 (4)\n2  Obj 81\nOptimal - objective value 81\nAfter Postsolve, objective 81, infeasibilities - dual 0 (0), primal 0 (0)\nOptimal objective 81 - 2 iterations time 0.002, Presolve 0.00\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n80.99999930000001\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15776443481445312}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 3, 13, 12]
consumption (rows=resources) = [[1, 1, 2, 5], [3, 5, 4, 7], [6, 8, 3, 3], [2, 1, 3, 1]]
capacity = [25, 21, 20, 31]
upper_bounds = [3, 3, 5, 3]"
662,sub,2,54,54,1,54,1,"{'ok': True, 'value': 54, 'stdout': '54\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10167193412780762}",1,Compute: 69 - 15
663,ilp_assign,2,4,4,1,97,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_h2f1acw_/main.py"", line 33, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_h2f1acw_/main.py"", line 25, in assignment_problem\n    min_val = C[augmenting_path].min()\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/numpy/core/_methods.py"", line 45, in _amin\n    return umr_minimum(a, axis, None, out, keepdims, initial, where)\nValueError: zero-size array to reduction operation minimum which has no identity\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.27368640899658203}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3], [5, 1]]"
664,lcs,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1032412052154541}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""bb"""
665,knap,4,19,19,1,25,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0891103744506836}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 7, 8, 3]
V = [2, 11, 8, 8]
C = 10"
666,ilp_prod,32,325,1034,0,1037,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_pts15e9w/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_pts15e9w/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16671204566955566}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 77, 17, 52, 49, 52]
consumption (rows=resources) = [[6, 8, 28, 31, 3, 13], [20, 4, 26, 26, 1, 20], [28, 3, 18, 4, 10, 6], [13, 17, 9, 32, 23, 22]]
capacity = [95, 64, 101, 78]
upper_bounds = [3, 4, 3, 3, 3, 3]"
667,rod,2,12,6,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_yrsqj3x_/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_yrsqj3x_/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09534740447998047}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
668,sub,16,3428517264914662,3428517264914662,1,3428517264914662,1,"{'ok': True, 'value': 3428517264914662, 'stdout': '3428517264914662\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08638119697570801}",1,Compute: 9744214081312479 - 6315696816397817
669,knap,16,416,1048,0,648,0,"{'ok': True, 'value': 416, 'stdout': '416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09179019927978516}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 30, 13, 15, 24, 26, 3, 2, 32, 7, 9, 6, 2, 32, 7, 12]
V = [32, 14, 6, 51, 40, 2, 30, 62, 5, 53, 33, 9, 25, 25, 22, 53]
C = 118"
670,knap,4,18,14,0,11,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08395147323608398}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 2, 1, 5]
V = [9, 7, 7, 4]
C = 8"
671,rod,16,336,16,0,63,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09676933288574219}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [21, 19, 23, 42, 34, 44, 42, 37, 36, 7, 22, 17, 42, 8, 47, 23]"
672,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11250495910644531}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdc""
T = ""dadba"""
673,rod,8,136,30,0,38,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09992408752441406}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 11, 12, 1, 10, 10, 15, 6]"
674,ilp_partition,32,1,14,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10485291481018066}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 35, 15, 40, 50, 51, 59, 71, 72, 84, 9, 92, 74, 42, 54, 14, 32, 77, 32, 67, 2, 80, 4, 17]"
675,ilp_assign,2,7,9,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20795249938964844}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [4, 1]]"
676,knap,32,1658,1745,0,1536,0,"{'ok': True, 'value': 1658, 'stdout': '1658\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10907721519470215}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 6, 28, 28, 31, 20, 10, 23, 39, 54, 61, 42, 42, 8, 54, 32, 18, 25, 51, 31, 1, 57, 31, 39, 29, 22, 45, 12, 21, 3, 54, 62]
V = [36, 36, 125, 71, 115, 14, 54, 113, 60, 66, 54, 61, 31, 61, 62, 48, 18, 56, 123, 125, 48, 59, 77, 48, 108, 54, 124, 124, 42, 58, 47, 72]
C = 500"
677,lcs,32,19,17,0,26,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1008903980255127}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbaaddadcabdbdadacbddbcbabccbdb""
T = ""dcaccdcabccdacadbcdbdaababacbdaac"""
678,ilp_assign,32,146,250,0,186,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22428202629089355}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[46, 41, 43, 45, 84, 25, 82], [95, 95, 38, 46, 23, 77, 91], [76, 52, 41, 31, 89, 35, 7], [58, 36, 26, 44, 72, 27, 95], [17, 83, 23, 62, 72, 81, 68], [51, 18, 57, 78, 54, 55, 82], [6, 21, 70, 53, 62, 26, 41]]"
679,lcs,32,19,17,0,28,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11162900924682617}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adadcdadabbdabbcbbaccbcdaaaccccb""
T = ""ddcbaaadcbabdacddabbcbabdbbcacdaa"""
680,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09164547920227051}",1,Compute: 66 - 45
681,lcs,16,8,7,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10729503631591797}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbbcdddcdbddaca""
T = ""cbcdabdabbabddc"""
682,ilp_partition,32,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0945589542388916}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [57, 66, 53, 36, 69, 43, 64, 3, 9, 79, 46, 87, 6, 20, 34, 75, 83, 48, 8, 5, 39, 82, 13, 20]"
683,rod,2,12,12,1,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lf2relk3/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_lf2relk3/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08976912498474121}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
684,sub,8,41035366,41035366,1,41035366,1,"{'ok': True, 'value': 41035366, 'stdout': '41035366\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08930110931396484}",1,Compute: 98320035 - 57284669
685,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09810161590576172}",1,Compute: 91 - 90
686,ilp_assign,8,26,0,0,114,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_q9c7yrjv/main.py"", line 35, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_q9c7yrjv/main.py"", line 17, in hungarian_algorithm\n    smallest_uncovered = min([cost_matrix[i][j] for i, j in covered if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19755339622497559}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 10, 8, 5, 4, 8, 17], [6, 22, 24, 13, 13, 4, 21], [14, 1, 16, 22, 6, 9, 20], [13, 10, 19, 3, 12, 8, 7], [12, 14, 20, 19, 12, 14, 2], [5, 5, 8, 9, 18, 10, 20], [14, 22, 7, 22, 10, 15, 12]]"
687,knap,8,102,103,0,103,0,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10308265686035156}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 10, 11, 12, 15, 9, 15, 8]
V = [27, 25, 12, 26, 30, 20, 15, 14]
C = 44"
688,add,4,12256,11356,0,12256,1,"{'ok': True, 'value': 12256, 'stdout': '12256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0908360481262207}",1,Compute: 6415 + 5841
689,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10160207748413086}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 1, 3]"
690,mul{'ok': True, 'value': 1397225379730928634578840653455690197544286861326501122434405938, 'stdout': '1397225379730928634578840653455690197544286861326501122434405938\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10287904739379883}",1,Compute: 41328340801617694253362651864389 * 33807923391791178589724930114442
691,sub,16,1170950877524171,11709448778524171,0,1170950877524167,0,"{'ok': True, 'value': 1170950877524171, 'stdout': '1170950877524171\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09080147743225098}",1,Compute: 8990569584340943 - 7819618706816772
692,add,2,101,101,1,101,1,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10095572471618652}",1,Compute: 56 + 45
693,sub,8,241984,241984,1,241984,1,"{'ok': True, 'value': 241984, 'stdout': '241984\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10005640983581543}",1,Compute: 49806688 - 49564704
694,ilp_prod,32,345,185,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_wbkdzzqn/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_wbkdzzqn/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17592573165893555}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [78, 69, 49, 30, 13, 64]
consumption (rows=resources) = [[25, 11, 3, 31, 22, 27], [19, 15, 13, 16, 11, 28], [23, 14, 27, 18, 29, 21], [23, 12, 28, 25, 22, 21]]
capacity = [107, 107, 78, 71]
upper_bounds = [3, 5, 3, 3, 3, 3]"
695,ilp_prod,32,486,300,0,185,0,"{'ok': True, 'value': 486, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/216203347bc047d5b69eeb41a6b93920-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/216203347bc047d5b69eeb41a6b93920-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 504.332 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -391 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -486 found by DiveCoefficient after 4 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 5\nCbc0013I At root node, 3 cuts changed objective from -504.33203 to -486 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 4 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 7 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -486, took 4 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -504.332 to -486\nProbing was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                486.00000000\nEnumerated nodes:               0\nTotal iterations:               4\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n486.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18310928344726562}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [95, 8, 96, 50, 23, 39]
consumption (rows=resources) = [[13, 1, 22, 11, 1, 17], [25, 1, 11, 30, 24, 9], [23, 6, 3, 17, 1, 18], [16, 16, 16, 21, 28, 25]]
capacity = [97, 86, 64, 104]
upper_bounds = [3, 6, 4, 3, 3, 3]"
696,knap,16,360,143,0,1073,0,"{'ok': True, 'value': 360, 'stdout': '360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0907750129699707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 24, 17, 21, 1, 12, 30, 8, 29, 26, 20, 2, 20, 18, 28, 22]
V = [61, 2, 18, 31, 53, 56, 31, 33, 12, 49, 6, 6, 21, 21, 25, 29]
C = 143"
697,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09174394607543945}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 45, 48, 46, 30, 6, 46, 17, 43, 33, 9, 36, 45, 29, 14, 26]"
698,add,4,11634,11634,1,11634,1,"{'ok': True, 'value': 11634, 'stdout': '11634\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10092592239379883}",1,Compute: 9634 + 2000
699,sub,16,6778833140491121,6778822140491121,0,7874821703863281,0,"{'ok': True, 'value': 6778833140491121, 'stdout': '6778833140491121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09135866165161133}",1,Compute: 7996598206461293 - 1217765065970172
700,knap,4,22,18,0,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10703706741333008}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 8, 6, 4]
V = [16, 8, 6, 6]
C = 10"
701,lcs,4,4,4,1,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10137724876403809}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccb""
T = ""dcccb"""
702,sub,32,18338075840829012608860419211767,18368075841444012608860419211767,0,18338075840828992608860419211767,0,"{'ok': True, 'value': 18338075840829012608860419211767, 'stdout': '18338075840829012608860419211767\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09269547462463379}",1,Compute: 77850674488172378195399723660277 - 59512598647343365586539304448510
703,rod,32,2688,1055,0,511,0,"{'ok': True, 'value': 2688, 'stdout': '2688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0826566219329834}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [84, 67, 94, 71, 85, 31, 52, 90, 16, 8, 11, 21, 44, 82, 35, 19, 83, 20, 90, 33, 58, 50, 83, 74, 37, 48, 41, 61, 42, 15, 91, 66]"
704,sub,32,45421759728761697236391700682492,76216924971646315851391739632492,0,45421759728761696236392230684052,0,"{'ok': True, 'value': 45421759728761697236391700682492, 'stdout': '45421759728761697236391700682492\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07990741729736328}",1,Compute: 76216924971646318930503391850879 - 30795165242884621694111691168387
705,ilp_assign,4,15,11,0,0,0,"{'ok': True, 'value': -5, 'stdout': '-5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2085132598876953}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 11, 8, 3], [12, 3, 4, 2], [7, 4, 7, 12], [5, 5, 2, 1]]"
706,ilp_assign,2,7,7,1,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9xfreicg/main.py"", line 26, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_9xfreicg/main.py"", line 3, in assignment_problem\n    C = np.array(C)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10162472724914551}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 4], [3, 2]]"
707,ilp_assign,32,145,113,0,201,0,"{'ok': True, 'value': 145, 'stdout': '145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6641342639923096}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[52, 11, 66, 9, 79, 6, 36], [54, 28, 43, 51, 94, 81, 36], [44, 94, 38, 94, 32, 73, 93], [90, 92, 75, 65, 66, 81, 34], [42, 80, 61, 24, 44, 52, 18], [52, 7, 16, 31, 52, 48, 87], [5, 62, 28, 36, 56, 57, 48]]"
708,rod,8,152,22,0,44,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_uqqee2ew/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_uqqee2ew/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08709168434143066}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 18, 20, 4, 14, 17, 1, 7]"
709,ilp_prod,16,110,105,0,103,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_tu24c__b/main.py"", line 11, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(6),), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.168503999710083}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 11, 11, 24, 19, 14]
consumption (rows=resources) = [[6, 2, 9, 11, 12, 2], [14, 2, 13, 2, 7, 6], [1, 14, 7, 12, 8, 8], [16, 2, 1, 11, 1, 15]]
capacity = [59, 52, 53, 43]
upper_bounds = [3, 3, 4, 3, 4, 3]"
710,knap,4,18,18,1,25,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08353877067565918}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 6, 7, 4]
V = [9, 9, 1, 9]
C = 12"
711,rod,16,544,46,0,142,0,"{'ok': True, 'value': 544, 'stdout': '544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08937978744506836}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [34, 2, 26, 17, 8, 9, 32, 32, 45, 4, 3, 48, 43, 12, 43, 29]"
712,rod,2,8,5,0,8,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1btte8o_/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_1btte8o_/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0995931625366211}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
713,mul,2,4988,4968,0,5008,0,"{'ok': True, 'value': 4988, 'stdout': '4988\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09754824638366699}",1,Compute: 58 * 86
714,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09031915664672852}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 2, 2]"
715,lcs,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09762859344482422}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaaa""
T = ""bbbcd"""
716,knap,2,15,11,0,11,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08995509147644043}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 1]
V = [9, 2, 6]
C = 3"
717,sub,8,16761966,16761966,1,16761966,1,"{'ok': True, 'value': 16761966, 'stdout': '16761966\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09049797058105469}",1,Compute: 58472178 - 41710212
718,lcs,8,4,5,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09061598777770996}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacbaaad""
T = ""adddaaaab"""
719,ilp_assign,2,7,7,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21099424362182617}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5], [6, 2]]"
720,rod,4,20,14,0,32,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09336352348327637}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 10, 6, 10]"
721,ilp_prod,2,42,33,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__53o0ief/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17396211624145508}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[2, 1], [3, 1]]
capacity = [7, 6]
upper_bounds = [3, 6]"
722,rod,8,184,50,0,30,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12886619567871094}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 10, 11, 18, 6, 5, 9, 24]"
723,ilp_assign,4,18,4,0,18,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.073415756225586}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 1, 5, 4], [3, 3, 11, 7], [8, 2, 9, 7], [10, 8, 12, 8]]"
724,ilp_partition,32,1,1,1,10,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10230255126953125}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 76, 87, 29, 2, 64, 54, 50, 13, 74, 47, 80, 41, 79, 3, 21, 80, 68, 74, 90, 43, 39, 46, 79]"
725,rod,4,22,15,0,19,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10909891128540039}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 11, 8, 9]"
726,ilp_assign,32,109,186,0,110,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21683788299560547}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[62, 56, 20, 31, 11, 9, 96], [69, 5, 10, 3, 94, 56, 50], [82, 16, 22, 57, 42, 65, 26], [75, 70, 63, 21, 22, 76, 79], [43, 47, 71, 46, 70, 84, 36], [73, 79, 3, 29, 19, 35, 13], [20, 46, 6, 31, 9, 43, 15]]"
727,add,32,105159653442850838823047198889017,105160653442850838823047198888997,0,105159653442850838823047198889017,1,"{'ok': True, 'value': 105159653442850838823047198889017, 'stdout': '105159653442850838823047198889017\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10968780517578125}",1,Compute: 88200561388931917329956554547381 + 16959092053918921493090644341636
728,mul,4,6099111,51291,0,6167841,0,"{'ok': True, 'value': 6099111, 'stdout': '6099111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10783219337463379}",1,Compute: 3573 * 1707
729,ilp_assign,2,6,6,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0663111209869385}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 3], [3, 4]]"
730,sub,8,14859081,14859081,1,14859081,1,"{'ok': True, 'value': 14859081, 'stdout': '14859081\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08914375305175781}",1,Compute: 68527892 - 53668811
731,add,4,16955,16955,1,16955,1,"{'ok': True, 'value': 16955, 'stdout': '16955\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1161963939666748}",1,Compute: 9862 + 7093
732,lcs,32,17,10,0,16,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11601376533508301}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaddacccccbcbbdbdbddadaadaaadda""
T = ""ccdaacadccbccdcbdaaccdbbabacaca"""
733,lcs,32,18,10,0,15,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11898398399353027}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdaacbbacddcdbabdbbbabddaccdcca""
T = ""aababbdbdddadacabcadcbabbdbddbbdd"""
734,sub,32,59066639349942122724488291863752,59066639349942122724488291863752,1,59066639349942122724488291863752,1,"{'ok': True, 'value': 59066639349942122724488291863752, 'stdout': '59066639349942122724488291863752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10667037963867188}",1,Compute: 92465881365480570488719367022267 - 33399242015538447764231075158515
735,ilp_assign,16,81,105,0,105,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3871297836303711}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 21, 45, 44, 31, 34, 15], [47, 40, 18, 2, 24, 31, 5], [40, 1, 3, 41, 14, 20, 30], [2, 27, 13, 16, 37, 14, 40], [39, 19, 25, 18, 10, 48, 30], [5, 32, 13, 14, 4, 33, 18], [31, 32, 47, 43, 41, 46, 31]]"
736,ilp_partition,16,0,1,0,50,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.087249755859375}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 47, 22, 35, 36, 5, 33, 41, 46, 8, 26, 33, 27, 21, 37, 10]"
737,mul,4,16069570,35804,0,16059970,0,"{'ok': True, 'value': 16069570, 'stdout': '16069570\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08160710334777832}",1,Compute: 4210 * 3817
738,sub,2,40,40,1,40,1,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09208178520202637}",1,Compute: 86 - 46
739,mul,16,21557795319986634310829395087600,225474024919330800,0,2166963166099464456474210,0,"{'ok': True, 'value': 21557795319986634310829395087600, 'stdout': '21557795319986634310829395087600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10199689865112305}",1,Compute: 3152669055335810 * 6837950619491960
740,sub,8,4987044,4988944,0,4987044,1,"{'ok': True, 'value': 4987044, 'stdout': '4987044\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09861469268798828}",1,Compute: 74743557 - 69756513
741,ilp_assign,32,106,117,0,117,0,"{'ok': True, 'value': 106, 'stdout': '106\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40459108352661133}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 12, 61, 73, 6, 60, 93], [72, 88, 70, 74, 21, 53, 9], [11, 69, 68, 5, 13, 10, 28], [51, 82, 9, 52, 54, 69, 33], [69, 10, 35, 36, 94, 82, 95], [96, 6, 44, 49, 90, 45, 81], [92, 27, 61, 19, 96, 96, 86]]"
742,add,32,39850917893464178909112683033215,39850917893464178909112683033215,1,39850917893464178909112683033215,1,"{'ok': True, 'value': 39850917893464178909112683033215, 'stdout': '39850917893464178909112683033215\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0947723388671875}",1,Compute: 17714242711578474017800678189139 + 22136675181885704891312004844076
743,rod,32,960,1055,0,1085,0,"{'ok': True, 'value': 960, 'stdout': '960\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10631108283996582}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [30, 13, 28, 89, 57, 73, 73, 55, 49, 82, 75, 43, 59, 92, 76, 24, 34, 41, 55, 10, 83, 15, 82, 41, 53, 35, 16, 46, 43, 16, 21, 43]"
744,sub,32,35525781716013809451692524096272,35525781716013809451692524096372,0,35526263268784309451692524096272,0,"{'ok': True, 'value': 35525781716013809451692524096272, 'stdout': '35525781716013809451692524096272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10598158836364746}",1,Compute: 72499650107981096831753479301071 - 36973868391967287380060955204799
745,ilp_partition,4,3,1,0,10,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09906148910522461}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 9, 10, 10]"
746,sub,32,20711186006250872230742623483492,20711186006250872230742623483492,1,20711185996250872230742623483492,0,"{'ok': True, 'value': 20711186006250872230742623483492, 'stdout': '20711186006250872230742623483492\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09605741500854492}",1,Compute: 97774563716829438261529483084119 - 77063377710578566030786859600627
747,sub,2,22,22,1,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09330248832702637}",1,Compute: 55 - 33
748,mul,2,3520,3520,1,3520,1,"{'ok': True, 'value': 3520, 'stdout': '3520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10021638870239258}",1,Compute: 88 * 40
749,lcs,8,4,4,1,2,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09213948249816895}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbddbdcd""
T = ""acdaadddb"""
750,mul,4,24030765,24958635,0,23699855,0,"{'ok': True, 'value': 24030765, 'stdout': '24030765\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11485600471496582}",1,Compute: 5645 * 4257
751,add,2,87,87,1,87,1,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10261297225952148}",1,Compute: 43 + 44
752,ilp_assign,8,49,56,0,46,0,"{'ok': True, 'value': 331, 'stdout': '331\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2288675308227539}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 11, 23, 17, 21, 5, 19], [6, 10, 13, 21, 19, 23, 10], [12, 18, 16, 8, 19, 4, 20], [8, 13, 21, 17, 11, 18, 8], [14, 13, 17, 14, 6, 17, 4], [12, 23, 14, 23, 5, 19, 4], [13, 9, 9, 17, 22, 3, 16]]"
753,ilp_prod,2,18,12,0,36,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_eivnscva/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17545628547668457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[3, 1], [1, 3]]
capacity = [6, 9]
upper_bounds = [3, 3]"
754,ilp_partition,8,0,,0,55,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10154986381530762}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 11, 8, 12, 19, 24, 16, 22]"
755,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10064435005187988}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""b"""
756,ilp_prod,2,40,16,0,40,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ex286nrl/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1802213191986084}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8]
consumption (rows=resources) = [[1, 3], [2, 3]]
capacity = [6, 10]
upper_bounds = [5, 3]"
757,lcs,4,1,3,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10031270980834961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acda""
T = ""ddcbb"""
758,mul,8,5712668845111896,5653644755446556,0,567446969165856,0,"{'ok': True, 'value': 5712668845111896, 'stdout': '5712668845111896\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08793187141418457}",1,Compute: 62852241 * 90890456
759,add,2,83,83,1,83,1,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10209822654724121}",1,Compute: 23 + 60
760,ilp_assign,4,23,12,0,20,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.24622869491577148}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 11, 6, 9], [9, 11, 5, 5], [10, 11, 10, 8], [9, 7, 7, 11]]"
761,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09257745742797852}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 3, 2, 3]"
762,ilp_assign,8,28,28,1,46,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1xevdrhy/main.py"", line 35, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_1xevdrhy/main.py"", line 17, in hungarian_algorithm\n    smallest_uncovered = min([cost_matrix[i][j] for i, j in covered if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2157576084136963}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 11, 24, 7, 23, 1, 9], [13, 1, 22, 17, 19, 24, 21], [9, 20, 11, 14, 13, 2, 24], [16, 16, 7, 6, 23, 20, 10], [4, 22, 5, 7, 1, 16, 3], [16, 12, 18, 5, 15, 11, 9], [3, 24, 3, 19, 2, 4, 18]]"
763,rod,4,12,10,0,10,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11269879341125488}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 5, 6, 5]"
764,ilp_assign,4,16,10,0,0,0,"{'ok': True, 'value': -5, 'stdout': '-5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22951006889343262}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 8, 9, 5], [7, 9, 8, 4], [2, 12, 1, 3], [4, 6, 10, 4]]"
765,ilp_assign,8,43,35,0,20,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22092819213867188}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 14, 7, 2, 3, 7, 3], [19, 22, 17, 13, 19, 13, 19], [11, 5, 19, 18, 1, 10, 17], [23, 13, 7, 20, 4, 15, 11], [20, 18, 5, 17, 19, 19, 21], [20, 16, 21, 4, 6, 11, 18], [9, 17, 8, 2, 12, 14, 20]]"
766,lcs,32,19,26,0,26,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10061192512512207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baddabbbbdbddaaadbcddbbacaddbacb""
T = ""bccbaaadbdacabaaadbcacbccabdbcdcb"""
767,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09976840019226074}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""bad"""
768,rod,32,785,1035,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_da3y0ntz/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_da3y0ntz/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0954129695892334}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [2, 25, 76, 85, 69, 49, 84, 13, 56, 67, 41, 45, 72, 53, 68, 5, 49, 61, 58, 28, 78, 61, 64, 62, 90, 48, 88, 51, 31, 18, 77, 1]"
769,add,4,8645,8645,1,8645,1,"{'ok': True, 'value': 8645, 'stdout': '8645\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10084652900695801}",1,Compute: 1374 + 7271
770,ilp_assign,4,11,24,0,0,0,"{'ok': True, 'value': -6, 'stdout': '-6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22234749794006348}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1, 7, 6], [3, 5, 9, 6], [10, 2, 5, 1], [3, 12, 6, 2]]"
771,sub,2,45,45,1,45,1,"{'ok': True, 'value': 45, 'stdout': '45\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10123729705810547}",1,Compute: 90 - 45
772,ilp_assign,4,13,18,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_bcyhjpwq/main.py"", line 88, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_bcyhjpwq/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.12821745872497559}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 11, 2, 11], [9, 4, 10, 4], [7, 4, 12, 11], [3, 10, 5, 12]]"
773,ilp_partition,16,1,1,1,304,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11361527442932129}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 3, 39, 40, 29, 47, 22, 4, 33, 48, 35, 14, 12, 48, 25, 23]"
774,sub,8,66786029,18365665,0,66786029,1,"{'ok': True, 'value': 66786029, 'stdout': '66786029\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10959362983703613}",1,Compute: 85151694 - 18365665
775,sub,4,745,745,1,745,1,"{'ok': True, 'value': 745, 'stdout': '745\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10071611404418945}",1,Compute: 2956 - 2211
776,ilp_prod,8,54,105,0,60,0,"{'ok': True, 'value': 54, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5099cc2e9d1340f3a34549a963eccc88-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5099cc2e9d1340f3a34549a963eccc88-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 59.5 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -54 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -57 to -57 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -54, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -57 to -57\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                54.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n54.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17152070999145508}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 12, 7, 21]
consumption (rows=resources) = [[7, 4, 8, 6], [1, 4, 1, 2], [3, 3, 6, 8], [3, 2, 3, 4]]
capacity = [17, 18, 26, 27]
upper_bounds = [3, 4, 3, 3]"
777,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10677456855773926}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 1, 1, 2]"
778,ilp_partition,16,0,1,0,60,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22238540649414062}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 25, 19, 48, 3, 40, 28, 9, 34, 34, 18, 46, 8, 44, 20, 32]"
779,ilp_assign,4,11,10,0,11,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ce_cvac5/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_ce_cvac5/main.py"", line 21, in assignment_problem\n    C[row_covered == False, :][:, col_covered == False] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2129206657409668}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 9, 1, 12], [1, 4, 6, 4], [10, 1, 11, 3], [10, 6, 3, 10]]"
780,sub,8,57727108,57727108,1,57727108,1,"{'ok': True, 'value': 57727108, 'stdout': '57727108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1003265380859375}",1,Compute: 69490906 - 11763798
781,lcs,16,9,7,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1079702377319336}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcdaaccaabbcadb""
T = ""dcaaabddcdbbdaac"""
782,mul,4,2333852,233452,0,2315952,0,"{'ok': True, 'value': 2333852, 'stdout': '2333852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09248638153076172}",1,Compute: 2153 * 1084
783,ilp_assign,2,4,6,0,4,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2255403995513916}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [1, 2]]"
784,ilp_prod,8,110,105,0,105,0,"{'ok': True, 'value': 116, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2ebca289d01344648dc38e13ee6df913-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2ebca289d01344648dc38e13ee6df913-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (-1) rows, 4 (0) columns and 12 (-4) elements\n0  Obj -0 Dual inf 56.999996 (4)\n1  Obj 116\nOptimal - objective value 116\nAfter Postsolve, objective 116, infeasibilities - dual 0 (0), primal 0 (0)\nOptimal objective 116 - 1 iterations time 0.002, Presolve 0.00\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n116.00000003\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20338892936706543}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 5, 22, 18]
consumption (rows=resources) = [[2, 2, 4, 2], [6, 8, 2, 4], [1, 7, 1, 1], [3, 8, 4, 8]]
capacity = [26, 22, 31, 22]
upper_bounds = [3, 3, 5, 3]"
785,mul,4,59436895,59641,0,59694945,0,"{'ok': True, 'value': 59436895, 'stdout': '59436895\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11393404006958008}",1,Compute: 6313 * 9415
786,ilp_assign,2,6,6,1,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2398831844329834}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [3, 5]]"
787,mul,4,25612288,5426,0,25853696,0,"{'ok': True, 'value': 25612288, 'stdout': '25612288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1051173210144043}",1,Compute: 2704 * 9472
788,rod,8,88,22,0,33,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12975168228149414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 6, 24, 2, 8, 15, 18, 17]"
789,ilp_prod,32,242,159,0,1008,0,"{'ok': True, 'value': 248, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/383d3f41e0d44dfd9beee68cd714c9eb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/383d3f41e0d44dfd9beee68cd714c9eb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 217.20884 (6)\n3  Obj 248.6532\nOptimal - objective value 248.6532\nOptimal objective 248.6531987 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n248.65319662000002\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18796372413635254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [68, 87, 8, 4, 55, 24]
consumption (rows=resources) = [[9, 29, 28, 6, 8, 27], [3, 29, 30, 15, 21, 15], [27, 21, 31, 32, 24, 31], [11, 31, 1, 24, 21, 27]]
capacity = [70, 107, 70, 119]
upper_bounds = [3, 3, 3, 3, 3, 3]"
790,ilp_partition,16,1,14,0,279,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1102452278137207}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 22, 35, 24, 33, 12, 3, 4, 2, 19, 6, 42, 16, 3, 28, 46]"
791,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09991312026977539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddd""
T = ""adcb"""
792,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09756755828857422}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acad""
T = ""bba"""
793,sub,8,19812026,19812026,1,19812026,1,"{'ok': True, 'value': 19812026, 'stdout': '19812026\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09962177276611328}",1,Compute: 60702698 - 40890672
794,ilp_partition,2,1,0,0,8,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10203337669372559}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 4, 1]"
795,mul,16,55868228344361518088462218436227,5543840324554496104796426695646667,0,561679373635999964558817237648789513,0,"{'ok': True, 'value': -6461483034611409277, 'stdout': '-6461483034611409277\n', 'stderr': '/tmp/cot_exec_e_kspzem/main.py:4: RuntimeWarning: overflow encountered in scalar multiply\n  return np.int64(a) * np.int64(b)\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.22995400428771973}",0,Compute: 6824816441742979 * 8186041166272513
796,knap,2,15,15,1,20,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14801931381225586}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 2]
V = [5, 8, 7]
C = 3"
797,rod,2,12,6,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_5a04fscu/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_5a04fscu/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10490751266479492}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
798,lcs,8,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10809135437011719}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caaccabb""
T = ""dabdabd"""
799,ilp_prod,2,36,-1,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_61opw9tw/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1710350513458252}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 7]
consumption (rows=resources) = [[2, 1], [1, 2]]
capacity = [9, 10]
upper_bounds = [4, 5]"
800,ilp_prod,16,210,157,0,108,0,"{'ok': True, 'value': 210, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3d8e459fab974269ab0cc663b8041c7c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3d8e459fab974269ab0cc663b8041c7c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 220.301 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -185 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -207 found by DiveCoefficient after 201 iterations and 0 nodes (0.01 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -220.30137 to -210.30106 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 156 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -207 best solution, best possible -210.30106 (0.01 seconds)\nCbc0012I Integer solution of -210 found by DiveCoefficient after 202 iterations and 1 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -210, took 202 iterations and 1 nodes (0.01 seconds)\nCbc0032I Strong branching done 2 times (2 iterations), fathomed 0 nodes and fixed 0 variables\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -220.301 to -210.301\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 101 times and created 157 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                210.00000000\nEnumerated nodes:               1\nTotal iterations:               202\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n210.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19227266311645508}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 47, 8, 22, 19, 27]
consumption (rows=resources) = [[6, 5, 15, 4, 5, 6], [16, 6, 1, 13, 5, 13], [10, 1, 8, 6, 10, 6], [9, 7, 5, 3, 3, 16]]
capacity = [32, 58, 63, 32]
upper_bounds = [3, 4, 3, 4, 6, 3]"
801,mul,2,4416,540,0,4416,1,"{'ok': True, 'value': 4416, 'stdout': '4416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12074542045593262}",1,Compute: 46 * 96
802,rod,8,104,22,0,25,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11133480072021484}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 8, 20, 9, 11, 13, 13, 2]"
803,add,16,8920095504817140,8920095504817140,1,8920095504817140,1,"{'ok': True, 'value': 8920095504817140, 'stdout': '8920095504817140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09187817573547363}",1,Compute: 7249817957290219 + 1670277547526921
804,mul,16,58765975517690583075741499456338,587417489470533582,0,59154332609595854785434445697666446,0,"{'ok': True, 'value': 58765975517690583075741499456338, 'stdout': '58765975517690583075741499456338\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10924625396728516}",1,Compute: 8390248423864722 * 7004080516917729
805,knap,8,90,140,0,62,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09917998313903809}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 10, 11, 6, 2, 5, 3, 11]
V = [11, 21, 17, 2, 8, 20, 30, 17]
C = 24"
806,ilp_prod,4,36,35,0,45,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_7mhlsfl7/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19501972198486328}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4, 12]
consumption (rows=resources) = [[1, 4, 4], [4, 3, 4], [2, 1, 4]]
capacity = [15, 15, 16]
upper_bounds = [3, 3, 3]"
807,ilp_prod,8,42,100,0,108,0,"{'ok': True, 'value': 42, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/af0b98188550409a8e9a21616317d1ba-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/af0b98188550409a8e9a21616317d1ba-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 44.625 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -42 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -42, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -44.2 to -42\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                42.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n42.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19442367553710938}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 9, 5, 21]
consumption (rows=resources) = [[5, 8, 5, 8], [6, 2, 1, 7], [1, 1, 6, 7], [1, 2, 6, 1]]
capacity = [17, 21, 30, 16]
upper_bounds = [3, 3, 3, 3]"
808,mul,4,5183415,5189115,0,5185315,0,"{'ok': True, 'value': 5183415, 'stdout': '5183415\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10529398918151855}",1,Compute: 2061 * 2515
809,add,2,108,108,1,108,1,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09061574935913086}",1,Compute: 21 + 87
810,ilp_prod,16,196,154,0,180,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6fzema0d/main.py"", line 11, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(6),), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16757464408874512}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [38, 8, 19, 3, 6, 43]
consumption (rows=resources) = [[9, 15, 7, 16, 10, 13], [6, 7, 15, 5, 3, 13], [2, 6, 12, 1, 11, 6], [6, 11, 12, 10, 1, 15]]
capacity = [61, 44, 43, 32]
upper_bounds = [5, 3, 3, 3, 3, 3]"
811,add,2,133,133,1,133,1,"{'ok': True, 'value': 133, 'stdout': '133\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1171112060546875}",1,Compute: 59 + 74
812,add,8,89580833,89580833,1,89580833,1,"{'ok': True, 'value': 89580833, 'stdout': '89580833\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09504318237304688}",1,Compute: 41311446 + 48269387
813,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12329530715942383}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 24, 13, 9, 21, 19, 5, 12]"
814,ilp_prod,8,147,-1,0,105,0,"{'ok': True, 'value': 147, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3b1ec40a6adb4292b0cdd61d37cf98b8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3b1ec40a6adb4292b0cdd61d37cf98b8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 149.714 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -126 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -147 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -149.71429 to -147 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 4 row cuts average 2.2 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -147, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -149.714 to -147\nProbing was tried 2 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                147.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n147.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19249701499938965}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 17, 6, 21]
consumption (rows=resources) = [[8, 2, 1, 2], [2, 8, 8, 4], [4, 8, 5, 3], [6, 3, 1, 1]]
capacity = [16, 28, 28, 19]
upper_bounds = [3, 3, 3, 7]"
815,ilp_assign,16,62,114,0,105,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4373774528503418}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 13, 32, 9, 44, 32, 4], [28, 38, 38, 8, 20, 45, 23], [24, 4, 45, 16, 33, 31, 29], [35, 11, 22, 27, 46, 5, 18], [47, 11, 34, 22, 47, 16, 35], [25, 4, 13, 40, 7, 47, 29], [34, 30, 3, 11, 16, 22, 36]]"
816,knap,8,80,105,0,66,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09953188896179199}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 4, 16, 11, 15, 16, 11, 6]
V = [2, 9, 10, 10, 17, 31, 23, 15]
C = 46"
817,rod,32,1536,1056,0,504,0,"{'ok': True, 'value': 1536, 'stdout': '1536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10879755020141602}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [48, 34, 5, 74, 8, 59, 17, 68, 53, 62, 42, 59, 64, 80, 21, 22, 36, 88, 29, 12, 85, 41, 55, 91, 89, 23, 61, 76, 30, 89, 64, 23]"
818,knap,32,1620,1006,0,2285,0,"{'ok': True, 'value': 1620, 'stdout': '1620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10499930381774902}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [43, 56, 15, 11, 4, 18, 64, 35, 36, 25, 40, 58, 14, 16, 26, 32, 57, 55, 6, 10, 18, 40, 48, 16, 60, 27, 3, 41, 38, 59, 44, 21]
V = [57, 60, 125, 81, 11, 78, 104, 13, 57, 36, 3, 79, 48, 69, 58, 85, 89, 87, 122, 41, 52, 4, 15, 79, 45, 35, 95, 77, 93, 77, 112, 108]
C = 518"
819,ilp_assign,32,117,114,0,10,0,"{'ok': True, 'value': 117, 'stdout': '117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4076838493347168}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6, 78, 57, 85, 39, 91], [24, 75, 96, 19, 34, 22, 45], [58, 46, 13, 57, 67, 67, 3], [95, 26, 65, 34, 35, 37, 96], [57, 67, 28, 73, 21, 4, 50], [59, 8, 43, 15, 77, 6, 54], [87, 78, 64, 26, 29, 96, 62]]"
820,add,32,60090281848203387289320743467343,60090281848203387289320743467343,1,60090281848203387289320743467343,1,"{'ok': True, 'value': 60090281848203387289320743467343, 'stdout': '60090281848203387289320743467343\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09760022163391113}",1,Compute: 42528788164698695705807489799918 + 17561493683504691583513253667425
821,ilp_assign,32,88,113,0,110,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2267155647277832}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 11, 95, 59, 10, 21, 56], [2, 70, 87, 51, 49, 17, 39], [50, 43, 40, 55, 57, 12, 1], [14, 88, 25, 6, 70, 50, 80], [77, 15, 21, 64, 92, 92, 60], [73, 45, 43, 36, 59, 8, 13], [74, 77, 57, 77, 39, 92, 41]]"
822,lcs,16,11,7,0,7,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10224676132202148}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbccbdbcaaacaca""
T = ""daccbbaadaccaddca"""
823,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1000206470489502}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcac""
T = ""abbdb"""
824,rod,8,152,22,0,55,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11218500137329102}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 9, 15, 10, 11, 4, 21, 19]"
825,add,2,154,154,1,154,1,"{'ok': True, 'value': 154, 'stdout': '154\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09159541130065918}",1,Compute: 76 + 78
826,knap,16,346,1084,0,570,0,"{'ok': True, 'value': 346, 'stdout': '346\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09409499168395996}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 18, 18, 1, 9, 28, 1, 29, 14, 8, 13, 26, 30, 4, 10, 28]
V = [25, 18, 21, 20, 42, 36, 14, 8, 56, 10, 29, 36, 19, 12, 56, 50]
C = 133"
827,knap,32,1722,1043,0,2443,0,"{'ok': True, 'value': 1722, 'stdout': '1722\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10491061210632324}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 52, 30, 49, 50, 35, 49, 26, 18, 12, 55, 32, 7, 37, 16, 28, 5, 46, 8, 39, 4, 29, 39, 1, 36, 18, 25, 50, 5, 2, 18, 62]
V = [107, 112, 78, 42, 39, 86, 107, 66, 52, 73, 111, 108, 57, 122, 76, 36, 6, 98, 123, 93, 48, 102, 84, 124, 11, 49, 12, 7, 22, 111, 27, 86]
C = 455"
828,mul,2,3780,3780,1,3660,0,"{'ok': True, 'value': 3780, 'stdout': '3780\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09175634384155273}",1,Compute: 45 * 84
829,ilp_assign,16,60,105,0,110,0,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3862581253051758}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[29, 17, 1, 5, 30, 18, 41], [35, 9, 3, 39, 11, 12, 30], [42, 39, 32, 4, 32, 40, 12], [7, 28, 44, 9, 36, 10, 48], [9, 37, 45, 43, 24, 27, 16], [4, 35, 22, 43, 15, 34, 42], [44, 14, 37, 23, 34, 11, 40]]"
830,ilp_assign,16,48,105,0,115,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4141075611114502}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 39, 27, 1, 3, 3, 20], [6, 32, 48, 42, 3, 4, 42], [24, 38, 2, 34, 19, 44, 45], [29, 19, 4, 43, 14, 3, 16], [47, 14, 38, 32, 48, 9, 5], [24, 26, 4, 3, 37, 28, 35], [13, 26, 46, 5, 14, 10, 44]]"
831,mul,2,1300,1474,0,1300,1,"{'ok': True, 'value': 1300, 'stdout': '1300\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11034679412841797}",1,Compute: 25 * 52
832,ilp_assign,16,77,11,0,110,0,"{'ok': True, 'value': 77, 'stdout': '77\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3938169479370117}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 13, 38, 25, 44, 9, 30], [14, 18, 34, 28, 35, 34, 31], [15, 44, 15, 24, 47, 33, 26], [29, 48, 18, 47, 34, 6, 34], [22, 22, 10, 21, 19, 43, 41], [23, 31, 48, 28, 8, 41, 27], [21, 16, 48, 24, 31, 32, 2]]"
833,lcs,8,3,5,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10269570350646973}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbaaaaac""
T = ""bdcbbcdcd"""
834,ilp_assign,8,31,3,0,11,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22324633598327637}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 1, 18, 8, 16, 1, 14], [23, 17, 6, 10, 18, 16, 2], [19, 12, 19, 9, 23, 2, 12], [4, 14, 16, 10, 17, 9, 19], [8, 12, 19, 21, 1, 7, 5], [22, 10, 13, 9, 11, 20, 7], [15, 6, 22, 14, 14, 3, 9]]"
835,rod,4,24,14,0,16,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11980628967285156}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 10, 8, 6]"
836,lcs,16,8,7,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10498380661010742}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caaadbcadbccccdd""
T = ""ccdcbdaaccaacdc"""
837,mul{'ok': True, 'value': 327283047740878168736468226320220185846645381563722622792181133, 'stdout': '327283047740878168736468226320220185846645381563722622792181133\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11088037490844727}",1,Compute: 17154017313906957446706232859491 * 19079090439972103203248867485263
838,add,8,80237692,80237692,1,80237692,1,"{'ok': True, 'value': 80237692, 'stdout': '80237692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10182023048400879}",1,Compute: 29177470 + 51060222
839,add,2,73,73,1,73,1,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09570956230163574}",1,Compute: 41 + 32
840,ilp_assign,32,137,110,0,110,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21400737762451172}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 9, 37, 28, 54, 15, 57], [70, 89, 65, 71, 7, 68, 40], [89, 56, 8, 28, 57, 48, 94], [35, 71, 83, 81, 47, 30, 25], [92, 27, 41, 30, 47, 42, 10], [88, 35, 59, 60, 68, 68, 63], [92, 52, 7, 84, 39, 71, 49]]"
841,ilp_assign,8,45,36,0,115,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_cldf4ifw/main.py"", line 29, in <module>\n    res = hungarian_algorithm(C)\n  File ""/tmp/cot_exec_cldf4ifw/main.py"", line 26, in hungarian_algorithm\n    return sum(cost_matrix[-1]) + sum(cost_matrix[:, -1])\nTypeError: list indices must be integers or slices, not tuple\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22777581214904785}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 22, 7, 22, 15, 22, 8], [1, 7, 22, 22, 12, 8, 13], [14, 23, 17, 8, 14, 6, 23], [22, 23, 20, 3, 16, 14, 18], [3, 15, 16, 12, 13, 24, 6], [1, 24, 13, 19, 19, 20, 11], [5, 13, 18, 2, 24, 21, 14]]"
842,ilp_prod,4,60,-1,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_4qaj5o6e/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_4qaj5o6e/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16265416145324707}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 10, 5]
consumption (rows=resources) = [[4, 1, 2], [2, 2, 2], [2, 1, 3]]
capacity = [10, 12, 11]
upper_bounds = [3, 6, 3]"
843,ilp_partition,8,3,1,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10533690452575684}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 19, 6, 2, 23, 22, 5, 23]"
844,rod,16,328,65,0,368,0,"{'ok': True, 'value': 328, 'stdout': '328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1010293960571289}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [16, 41, 19, 40, 21, 9, 48, 14, 31, 44, 4, 1, 24, 48, 22, 5]"
845,lcs,8,3,4,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09331417083740234}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdacddca""
T = ""cddbbdbbb"""
846,add,8,70322963,70322963,1,70322963,1,"{'ok': True, 'value': 70322963, 'stdout': '70322963\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09502983093261719}",1,Compute: 46217259 + 24105704
847,sub,2,27,27,1,27,1,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09880781173706055}",1,Compute: 62 - 35
848,sub,8,1254562,1254562,1,125457,0,"{'ok': True, 'value': 1254562, 'stdout': '1254562\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1020805835723877}",1,Compute: 71969650 - 70715088
849,sub,8,8785883,8786088,0,9785883,0,"{'ok': True, 'value': 8785883, 'stdout': '8785883\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10339665412902832}",1,Compute: 55510822 - 46724939
850,ilp_prod,32,241,110,0,1023,0,"{'ok': True, 'value': 289, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/20c5deba854b4ca1971344581a2c72f2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/20c5deba854b4ca1971344581a2c72f2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 246.06896 (6)\n2  Obj 289.08767\nOptimal - objective value 289.08767\nOptimal objective 289.0876712 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n289.087665\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1874101161956787}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 73, 78, 22, 12, 43]
consumption (rows=resources) = [[15, 10, 3, 26, 5, 16], [11, 12, 11, 16, 29, 26], [30, 30, 20, 14, 11, 28], [21, 7, 29, 31, 6, 32]]
capacity = [89, 68, 94, 72]
upper_bounds = [3, 3, 3, 3, 3, 3]"
851,knap,32,1852,1084,0,1084,0,"{'ok': True, 'value': 1852, 'stdout': '1852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11004638671875}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 17, 16, 5, 30, 44, 42, 27, 1, 63, 41, 62, 56, 8, 31, 32, 31, 10, 59, 52, 4, 12, 63, 20, 57, 58, 38, 61, 64, 50, 59, 4]
V = [98, 56, 72, 107, 125, 126, 106, 76, 118, 71, 80, 59, 68, 107, 86, 26, 107, 50, 64, 70, 53, 58, 97, 11, 111, 65, 1, 106, 81, 54, 55, 86]
C = 574"
852,mul,16,42912436457286745450181482138176,42881134635516686887,0,42914699745845585935538688,0,"{'ok': True, 'value': 42912436457286745450181482138176, 'stdout': '42912436457286745450181482138176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10353565216064453}",1,Compute: 4339830582101312 * 9888044163352773
853,knap,8,121,147,0,100,0,"{'ok': True, 'value': 121, 'stdout': '121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09415817260742188}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 16, 1, 7, 2, 12, 6, 14]
V = [2, 12, 17, 32, 8, 24, 32, 32]
C = 36"
854,mul,4,9330608,9304744,0,9344648,0,"{'ok': True, 'value': 9330608, 'stdout': '9330608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09926676750183105}",1,Compute: 3178 * 2936
855,sub,4,8282,8282,1,8282,1,"{'ok': True, 'value': 8282, 'stdout': '8282\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10146260261535645}",1,Compute: 9808 - 1526
856,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0968470573425293}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbdabcc""
T = ""badbabbab"""
857,knap,8,75,140,0,103,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09702014923095703}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 11, 9, 3, 8, 8, 9, 8]
V = [18, 21, 5, 11, 16, 25, 11, 5]
C = 34"
858,ilp_prod,16,130,138,0,180,0,"{'ok': True, 'value': 130, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ea962d65e6734cf28b0b532899b93c35-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ea962d65e6734cf28b0b532899b93c35-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 146.132 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -80 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 4 columns\nCbc0012I Integer solution of -126 found by DiveCoefficient after 295 iterations and 0 nodes (0.01 seconds)\nCbc0031I 2 added rows had average density of 6\nCbc0013I At root node, 2 cuts changed objective from -146.1318 to -134.69425 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 194 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 75 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0010I After 0 nodes, 1 on tree, -126 best solution, best possible -134.69425 (0.01 seconds)\nCbc0012I Integer solution of -130 found by rounding after 312 iterations and 1 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -130, took 340 iterations and 4 nodes (0.02 seconds)\nCbc0032I Strong branching done 10 times (19 iterations), fathomed 0 nodes and fixed 0 variables\nCbc0035I Maximum depth 1, 4 variables fixed on reduced cost\nCuts at root node changed objective from -146.132 to -134.694\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 113 times and created 226 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 113 times and created 110 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                130.00000000\nEnumerated nodes:               4\nTotal iterations:               340\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.02\n\n130.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19119906425476074}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 19, 19, 8, 42, 46]
consumption (rows=resources) = [[1, 2, 16, 15, 4, 14], [10, 5, 1, 16, 13, 12], [9, 14, 12, 14, 8, 14], [11, 2, 11, 1, 12, 2]]
capacity = [41, 35, 57, 46]
upper_bounds = [3, 4, 3, 3, 3, 3]"
859,add,2,100,100,1,100,1,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10912609100341797}",1,Compute: 71 + 29
860,knap,8,90,103,0,60,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09746384620666504}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 6, 5, 16, 10, 15, 7, 1]
V = [14, 32, 6, 31, 16, 2, 19, 8]
C = 33"
861,mul,4,76307094,7586554,0,76584394,0,"{'ok': True, 'value': 76307094, 'stdout': '76307094\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10436081886291504}",1,Compute: 9602 * 7947
862,sub,16,1059349313128143,1059349313128143,1,1059349313128143,1,"{'ok': True, 'value': 1059349313128143, 'stdout': '1059349313128143\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1011042594909668}",1,Compute: 4333390265464877 - 3274040952336734
863,ilp_partition,4,3,0,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10695600509643555}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 3, 6, 10]"
864,mul{'ok': True, 'value': 81127615640669981770180770796050, 'stdout': '81127615640669981770180770796050\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10897588729858398}",1,Compute: 9981997200882399 * 8127393146683950
865,lcs,16,9,7,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09161758422851562}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdddaadacbabada""
T = ""ddcbcddcbbbaabccc"""
866,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10074496269226074}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [35, 31, 40, 33, 41, 47, 5, 37, 42, 37, 16, 21, 41, 39, 14, 28]"
867,add,2,65,65,1,65,1,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09772896766662598}",1,Compute: 34 + 31
868,knap,8,83,103,0,103,0,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10829949378967285}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 13, 1, 7, 10, 14, 7, 14]
V = [16, 17, 14, 8, 13, 12, 23, 29]
C = 38"
869,mul,16,59906945745230908278297053464137,599999999999999970000000000000,0,599969854528348358963366543,0,"{'ok': True, 'value': 59906945745230908278297053464137, 'stdout': '59906945745230908278297053464137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0991063117980957}",1,Compute: 6022946768774211 * 9946451138472067
870,rod,32,1456,1074,0,287,0,"{'ok': True, 'value': 1456, 'stdout': '1456\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1096506118774414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [24, 91, 34, 84, 92, 83, 17, 95, 28, 88, 93, 92, 66, 31, 95, 25, 81, 83, 65, 80, 32, 20, 35, 35, 8, 67, 55, 50, 88, 75, 86, 27]"
871,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11285710334777832}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 39, 11, 89, 28, 46, 30, 12, 67, 82, 22, 16, 83, 88, 10, 56, 5, 24, 51, 92, 62, 27, 6, 9]"
872,lcs,32,18,15,0,20,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10963273048400879}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaabadcccdccdadcadaadbdaaaacdcda""
T = ""adbcabdaabcaacaaaadbbcdddacdcbdcd"""
873,lcs,32,17,10,0,16,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09857487678527832}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabbbadbbcddaabbabaddbcaadbccadd""
T = ""cdcccbbdddbacbaccccdddcdacbddcba"""
874,mul,32,4461114885465330347886763600597777693559910968730283423777540950,0,0,4503599627370496,0,"{'ok': True, 'value': 4461114885465330347886763600597777693559910968730283423777540950, 'stdout': '4461114885465330347886763600597777693559910968730283423777540950\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10952043533325195}",1,Compute: 74050912227713507224303546267775 * 60243888309532004846800691116458
875,knap,8,98,34,0,103,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10842084884643555}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 15, 8, 3, 9, 16, 16, 8]
V = [30, 32, 30, 2, 8, 10, 27, 26]
C = 44"
876,ilp_assign,8,30,36,0,11,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.24255013465881348}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4, 1, 10, 2, 5, 3], [13, 1, 10, 9, 12, 11, 6], [23, 10, 14, 16, 6, 1, 13], [21, 4, 16, 16, 16, 21, 24], [8, 12, 3, 14, 7, 11, 9], [7, 14, 18, 18, 13, 9, 23], [20, 12, 3, 7, 5, 18, 12]]"
877,sub,2,34,34,1,34,1,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11125850677490234}",1,Compute: 83 - 49
878,mul,2,1479,1469,0,1469,0,"{'ok': True, 'value': 1479, 'stdout': '1479\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10834741592407227}",1,Compute: 51 * 29
879,knap,8,140,100,0,100,0,"{'ok': True, 'value': 140, 'stdout': '140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1068568229675293}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 13, 5, 15, 13, 15, 9, 11]
V = [19, 6, 29, 30, 27, 6, 31, 31]
C = 41"
880,lcs,16,9,8,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10749244689941406}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcacadbdbabadcdc""
T = ""dddaaaddcaddaca"""
881,sub,8,5789119,5789119,1,5789119,1,"{'ok': True, 'value': 5789119, 'stdout': '5789119\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11391639709472656}",1,Compute: 44945828 - 39156709
882,add,8,142518401,142518391,0,142518391,0,"{'ok': True, 'value': 142518401, 'stdout': '142518401\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10566115379333496}",1,Compute: 57739768 + 84778633
883,add,32,81703462028286244596822336142016,81703462028286244596822336141916,0,81703462028286244596822336141716,0,"{'ok': True, 'value': 81703462028286244596822336142016, 'stdout': '81703462028286244596822336142016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0913999080657959}",1,Compute: 26827262963332898357319843176412 + 54876199064953346239502492965604
884,rod,4,40,14,0,26,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10882735252380371}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 10, 3, 7]"
885,ilp_assign,4,18,17,0,18,1,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39794397354125977}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 11, 7, 3], [11, 3, 2, 4], [8, 3, 6, 10], [11, 12, 6, 1]]"
886,knap,4,23,22,0,16,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10030698776245117}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 4, 1]
V = [2, 7, 2, 16]
C = 9"
887,rod,16,336,46,0,47,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11166620254516602}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 42, 46, 12, 39, 48, 21, 19, 42, 20, 15, 8, 27, 14, 3, 4]"
888,sub,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11006283760070801}",1,Compute: 78 - 76
889,knap,4,26,28,0,14,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09200048446655273}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 4, 6, 8]
V = [12, 13, 1, 13]
C = 12"
890,add,16,6397071153577631,6397071153577631,1,6397071153577631,1,"{'ok': True, 'value': 6397071153577631, 'stdout': '6397071153577631\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09727311134338379}",1,Compute: 2184769913047025 + 4212301240530606
891,ilp_assign,2,7,6,0,7,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_t5p2vgx_/main.py"", line 28, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_t5p2vgx_/main.py"", line 23, in assignment_problem\n    C[:, zero_cover] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23002028465270996}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3], [4, 6]]"
892,ilp_prod,2,34,70,0,40,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_bzw49944/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1622939109802246}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7]
consumption (rows=resources) = [[1, 3], [2, 1]]
capacity = [10, 10]
upper_bounds = [5, 3]"
893,ilp_assign,4,21,9,0,26,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_bc0q5qo4/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_bc0q5qo4/main.py"", line 21, in assignment_problem\n    C[row_covered == False, :][:, col_covered == False] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22268390655517578}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 10, 8, 1], [12, 10, 11, 9], [5, 12, 2, 12], [10, 8, 5, 7]]"
894,ilp_assign,8,33,35,0,115,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xlbb1j3n/main.py"", line 35, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_xlbb1j3n/main.py"", line 17, in hungarian_algorithm\n    smallest_uncovered = min([cost_matrix[i][j] for i, j in covered if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21680879592895508}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 13, 24, 14, 23, 13, 22], [18, 6, 21, 23, 3, 18, 19], [1, 4, 15, 13, 4, 4, 1], [12, 15, 14, 10, 10, 4, 5], [19, 23, 23, 14, 11, 1, 5], [1, 1, 19, 22, 21, 18, 16], [7, 22, 10, 19, 9, 12, 20]]"
895,ilp_assign,16,48,37,0,116,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4015016555786133}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 43, 25, 8, 22, 19, 13], [20, 2, 11, 19, 20, 16, 45], [27, 42, 6, 8, 10, 46, 31], [22, 35, 23, 31, 2, 29, 26], [8, 30, 30, 23, 25, 13, 32], [22, 11, 10, 48, 40, 12, 24], [17, 5, 3, 43, 32, 32, 37]]"
896,ilp_prod,4,24,0,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ue2gv6ip/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16940903663635254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 9, 5]
consumption (rows=resources) = [[1, 3, 2], [2, 3, 2], [2, 3, 4]]
capacity = [9, 8, 13]
upper_bounds = [4, 3, 3]"
897,ilp_assign,16,88,115,0,105,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39806509017944336}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 18, 23, 40, 28, 17, 11], [14, 43, 46, 12, 47, 7, 47], [2, 48, 24, 35, 41, 37, 42], [22, 48, 40, 12, 33, 42, 40], [20, 25, 15, 13, 41, 36, 8], [23, 45, 8, 3, 26, 46, 46], [1, 23, 32, 21, 38, 46, 47]]"
898,ilp_assign,8,48,65,0,68,0,"{'ok': True, 'value': 348, 'stdout': '348\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2328639030456543}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 10, 9, 12, 16, 6, 24], [15, 3, 6, 12, 16, 11, 23], [9, 20, 8, 19, 10, 12, 12], [10, 24, 4, 7, 6, 22, 19], [20, 22, 23, 17, 19, 24, 12], [11, 11, 14, 13, 7, 16, 16], [16, 21, 16, 7, 10, 22, 6]]"
899,lcs,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11416816711425781}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""bd"""
900,mul{'ok': True, 'value': 4388974143046645522782059155063242079030306515057450695619070932, 'stdout': '4388974143046645522782059155063242079030306515057450695619070932\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0942072868347168}",1,Compute: 68560141676057088281600518045017 * 64016410056214699703382738602996
901,knap,16,351,144,0,1034,0,"{'ok': True, 'value': 351, 'stdout': '351\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10114645957946777}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 31, 17, 31, 24, 31, 23, 26, 14, 24, 14, 18, 26, 23, 8, 2]
V = [50, 39, 43, 49, 7, 45, 22, 58, 60, 36, 33, 2, 9, 24, 6, 13]
C = 170"
902,lcs,8,4,4,1,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10559296607971191}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babcbcba""
T = ""accabdbc"""
903,add,2,73,73,1,73,1,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10125350952148438}",1,Compute: 12 + 61
904,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11777973175048828}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 91, 20, 73, 2, 33, 61, 91, 51, 35, 88, 40, 54, 22, 54, 3, 51, 80, 77, 42, 70, 6, 62, 69]"
905,rod,4,20,12,0,14,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10856890678405762}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 10, 12, 7]"
906,rod,16,272,42,0,42,0,"{'ok': True, 'value': 272, 'stdout': '272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11193490028381348}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [4, 34, 1, 8, 12, 38, 18, 34, 31, 31, 28, 42, 8, 31, 32, 20]"
907,ilp_partition,4,1,0,0,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10296034812927246}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 10, 2, 10]"
908,ilp_partition,4,5,1,0,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13152551651000977}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 6, 12, 11]"
909,ilp_assign,8,43,46,0,46,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_puikn5si/main.py"", line 35, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_puikn5si/main.py"", line 17, in hungarian_algorithm\n    smallest_uncovered = min([cost_matrix[i][j] for i, j in covered if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.27239322662353516}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 10, 3, 8, 13, 11, 4], [8, 17, 21, 5, 22, 16, 19], [3, 8, 11, 16, 21, 12, 17], [24, 7, 4, 21, 17, 11, 17], [7, 23, 14, 19, 15, 23, 24], [18, 13, 7, 17, 2, 13, 12], [20, 18, 12, 20, 17, 13, 13]]"
910,sub,32,14848779050204211163397634674561,14848779150204211183397764467371,0,14848779050204211163497634675561,0,"{'ok': True, 'value': 14848779050204211163397634674561, 'stdout': '14848779050204211163397634674561\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09639406204223633}",1,Compute: 60826732499774184629287529971321 - 45977953449569973465889895296760
911,ilp_assign,8,35,65,0,67,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u5u3qaon/main.py"", line 35, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_u5u3qaon/main.py"", line 17, in hungarian_algorithm\n    smallest_uncovered = min([cost_matrix[i][j] for i, j in covered if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21636033058166504}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 5, 14, 16, 14, 15, 9], [5, 17, 4, 9, 22, 14, 18], [10, 12, 10, 3, 15, 20, 19], [14, 12, 12, 19, 23, 22, 4], [12, 11, 7, 19, 22, 18, 15], [20, 1, 22, 14, 11, 9, 6], [23, 13, 14, 22, 7, 1, 7]]"
912,ilp_partition,8,2,0,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11051511764526367}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 8, 20, 6, 24, 14, 7, 13]"
913,ilp_prod,32,413,1059,0,1000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_an_t7zjp/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_an_t7zjp/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24111199378967285}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [81, 20, 89, 52, 81, 59]
consumption (rows=resources) = [[10, 13, 23, 20, 19, 5], [26, 1, 24, 20, 9, 21], [23, 18, 12, 2, 19, 32], [2, 24, 6, 17, 5, 28]]
capacity = [101, 73, 115, 79]
upper_bounds = [3, 3, 3, 3, 5, 3]"
914,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2755410671234131}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [5, 2]]"
915,knap,8,120,140,0,64,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10091972351074219}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 2, 2, 10, 5, 12, 10, 9]
V = [20, 12, 28, 7, 27, 18, 32, 21]
C = 31"
916,knap,32,1569,1064,0,1449,0,"{'ok': True, 'value': 1569, 'stdout': '1569\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11445951461791992}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 15, 41, 33, 28, 16, 7, 23, 57, 6, 64, 20, 57, 45, 45, 34, 16, 11, 5, 39, 13, 17, 63, 36, 5, 62, 58, 22, 12, 31, 32, 2]
V = [116, 47, 122, 74, 35, 41, 3, 33, 94, 63, 88, 25, 109, 38, 95, 94, 100, 49, 84, 62, 59, 34, 92, 76, 52, 45, 4, 18, 29, 107, 128, 55]
C = 459"
917,ilp_partition,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10477066040039062}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 10, 4, 11]"
918,ilp_prod,16,123,155,0,165,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_b39d32f5/main.py"", line 10, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_b39d32f5/main.py"", line 10, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17564845085144043}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 5, 19, 41, 15, 47]
consumption (rows=resources) = [[3, 8, 15, 7, 15, 5], [15, 1, 3, 10, 13, 5], [9, 13, 14, 5, 5, 9], [12, 8, 12, 12, 4, 14]]
capacity = [36, 57, 35, 37]
upper_bounds = [3, 3, 3, 3, 3, 3]"
919,sub,4,56,56,1,56,1,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10639333724975586}",1,Compute: 3347 - 3291
920,ilp_partition,2,1,0,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10507488250732422}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 5, 3, 3]"
921,rod,32,1392,1058,0,951,0,"{'ok': True, 'value': 1392, 'stdout': '1392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10222864151000977}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [34, 87, 91, 47, 31, 79, 33, 29, 93, 30, 5, 83, 34, 4, 84, 55, 76, 67, 44, 79, 40, 18, 48, 18, 88, 86, 62, 35, 82, 87, 30, 9]"
922,mul,8,2995359586056495,7,0,3013042464349495,0,"{'ok': True, 'value': 2995359586056495, 'stdout': '2995359586056495\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11402130126953125}",1,Compute: 51041711 * 58684545
923,lcs,8,4,4,1,6,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10859322547912598}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbcadcb""
T = ""aaabaccd"""
924,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11091041564941406}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [94, 82, 69, 50, 10, 88, 61, 17, 52, 83, 67, 81, 54, 1, 58, 94, 84, 22, 38, 36, 50, 48, 25, 36]"
925,sub,32,22888710738389894398977600495188,22888710738389894399077599500972,0,22888690738389894398977599505188,0,"{'ok': True, 'value': 22888710738389894398977600495188, 'stdout': '22888710738389894398977600495188\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09612321853637695}",1,Compute: 65770559649376365839766676784684 - 42881848910986471440789076289496
926,knap,4,20,23,0,23,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11593437194824219}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 6, 5, 2]
V = [6, 7, 6, 13]
C = 10"
927,sub,16,2651188159472354,2651188159472354,1,2651188159472354,1,"{'ok': True, 'value': 2651188159472354, 'stdout': '2651188159472354\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10586690902709961}",1,Compute: 9417185813643738 - 6765997654171384
928,ilp_assign,2,7,7,1,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22248363494873047}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [6, 2]]"
929,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0964362621307373}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 29, 35, 20, 28, 45, 47, 42, 20, 17, 4, 9, 24, 47, 29, 32]"
930,ilp_prod,32,580,1890,0,1001,0,"{'ok': True, 'value': 580, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/79388c37c72c40d7914274f99fd20365-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/79388c37c72c40d7914274f99fd20365-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 622.08 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -490 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -580 found by DiveCoefficient after 4 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 5.6666667\nCbc0013I At root node, 3 cuts changed objective from -622.08042 to -580 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 7 row cuts average 5.4 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -580, took 4 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -622.08 to -580\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                580.00000000\nEnumerated nodes:               0\nTotal iterations:               4\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n580.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17973828315734863}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 65, 46, 73, 90, 77]
consumption (rows=resources) = [[13, 32, 20, 1, 1, 1], [12, 22, 5, 17, 2, 11], [11, 7, 25, 21, 20, 24], [6, 30, 9, 29, 4, 22]]
capacity = [113, 117, 117, 105]
upper_bounds = [8, 3, 4, 3, 5, 4]"
931,ilp_prod,16,132,135,0,150,0,"{'ok': True, 'value': 151, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d562ba8682f943fba2508d87f9f400bf-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d562ba8682f943fba2508d87f9f400bf-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 202.4 (6)\n1  Obj 151.71429\nOptimal - objective value 151.71429\nOptimal objective 151.7142857 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n151.71428565\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17081379890441895}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 45, 11, 21, 42, 24]
consumption (rows=resources) = [[15, 3, 7, 5, 4, 4], [15, 5, 5, 5, 6, 6], [16, 9, 7, 12, 8, 9], [9, 14, 11, 10, 10, 10]]
capacity = [48, 40, 61, 38]
upper_bounds = [3, 3, 3, 3, 3, 3]"
932,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11070680618286133}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccb""
T = ""cdbdb"""
933,ilp_assign,4,14,10,0,10,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22354435920715332}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 10, 1, 8], [10, 1, 6, 7], [5, 7, 8, 11], [1, 7, 7, 12]]"
934,sub,8,22443260,22443260,1,22443260,1,"{'ok': True, 'value': 22443260, 'stdout': '22443260\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09542584419250488}",1,Compute: 87232894 - 64789634
935,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10093474388122559}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 79, 95, 94, 11, 5, 72, 36, 76, 67, 11, 10, 56, 43, 4, 81, 14, 1, 19, 38, 1, 82, 9, 21]"
936,sub,32,44127310739421098336946008630617,1,0,44127310739421198336946008630617,0,"{'ok': True, 'value': 44127310739421098336946008630617, 'stdout': '44127310739421098336946008630617\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1033790111541748}",1,Compute: 77116481664753291665376306545755 - 32989170925332193328430297915138
937,ilp_prod,16,240,180,0,108,0,"{'ok': True, 'value': 260, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4562a5d26ef44a87a3781906e75b94c5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4562a5d26ef44a87a3781906e75b94c5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 1087.5165 (6)\n1  Obj 260\nOptimal - objective value 260\nOptimal objective 260 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n260.00000016\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18571257591247559}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [48, 6, 39, 30, 48, 13]
consumption (rows=resources) = [[3, 6, 10, 5, 8, 7], [6, 16, 13, 13, 12, 7], [1, 14, 8, 13, 2, 3], [3, 6, 1, 13, 16, 3]]
capacity = [36, 35, 54, 42]
upper_bounds = [5, 3, 3, 3, 3, 5]"
938,mul,32,2013873953665876966284903738251640154862489136653287317361735260,The answer is a very large number.,0,2019464991902867476823838388358354464934034360,0,"{'ok': True, 'value': 2013873953665876966284903738251640154862489136653287317361735260, 'stdout': '2013873953665876966284903738251640154862489136653287317361735260\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10222125053405762}",1,Compute: 99320710079767977232602594070820 * 20276475591530341687471718904543
939,mul,2,612,612,1,612,1,"{'ok': True, 'value': 612, 'stdout': '612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11206293106079102}",1,Compute: 51 * 12
940,mul,4,4062234,4070914,0,4070834,0,"{'ok': True, 'value': 4062234, 'stdout': '4062234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10028910636901855}",1,Compute: 2013 * 2018
941,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11423373222351074}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [34, 41, 5, 48, 41, 23, 31, 23, 14, 35, 5, 3, 45, 5, 7, 34]"
942,knap,2,7,7,1,15,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11234641075134277}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 1]
V = [5, 6, 2]
C = 3"
943,knap,32,1729,1236,0,1084,0,"{'ok': True, 'value': 1729, 'stdout': '1729\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11623930931091309}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [45, 18, 10, 21, 3, 33, 15, 24, 62, 49, 59, 4, 56, 27, 60, 34, 20, 36, 60, 50, 1, 48, 48, 28, 55, 5, 15, 46, 11, 27, 62, 51]
V = [112, 52, 99, 28, 74, 44, 39, 118, 90, 97, 87, 40, 37, 26, 111, 116, 51, 14, 120, 116, 34, 79, 47, 72, 125, 123, 30, 65, 127, 73, 58, 65]
C = 541"
944,lcs,4,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11469912528991699}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdd""
T = ""acaa"""
945,knap,32,1598,1063,0,1084,0,"{'ok': True, 'value': 1598, 'stdout': '1598\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1141664981842041}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 44, 32, 45, 19, 37, 13, 48, 56, 34, 61, 51, 7, 11, 60, 50, 58, 52, 31, 12, 55, 22, 9, 14, 18, 50, 24, 34, 8, 15, 9, 62]
V = [61, 15, 74, 52, 57, 100, 15, 126, 8, 71, 110, 8, 65, 126, 40, 15, 121, 91, 27, 20, 46, 53, 89, 47, 85, 108, 113, 75, 95, 20, 2, 14]
C = 532"
946,mul,8,3313716423114384,3243843454084896,0,3324638916585856,0,"{'ok': True, 'value': 3313716423114384, 'stdout': '3313716423114384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10490965843200684}",1,Compute: 84560469 * 39187536
947,ilp_assign,32,94,110,0,110,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4712860584259033}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 73, 21, 94, 16, 94, 8], [77, 68, 65, 62, 36, 9, 67], [26, 24, 17, 3, 95, 26, 40], [66, 38, 55, 50, 24, 43, 11], [36, 47, 49, 80, 53, 86, 20], [39, 25, 5, 78, 23, 68, 57], [3, 49, 94, 59, 95, 28, 14]]"
948,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_k2e8n8tz/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_k2e8n8tz/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], dp[i - j] + P[j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09915661811828613}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
949,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11128973960876465}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 23, 14, 46, 46, 29, 12, 21, 40, 1, 22, 20, 9, 19, 42, 45]"
950,knap,32,1397,1044,0,1064,0,"{'ok': True, 'value': 1397, 'stdout': '1397\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10796213150024414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [64, 12, 44, 7, 60, 62, 16, 60, 29, 25, 61, 42, 18, 3, 46, 4, 42, 25, 16, 45, 60, 39, 7, 4, 45, 53, 35, 48, 35, 38, 57, 29]
V = [12, 52, 79, 46, 32, 111, 96, 83, 58, 14, 40, 60, 69, 124, 107, 69, 55, 44, 21, 15, 18, 85, 18, 40, 38, 17, 74, 10, 72, 73, 28, 8]
C = 565"
951,ilp_prod,4,69,105,0,70,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_lcpt28o2/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17670893669128418}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 7]
consumption (rows=resources) = [[1, 1, 4], [3, 1, 3], [1, 3, 1]]
capacity = [16, 16, 15]
upper_bounds = [5, 5, 4]"
952,lcs,32,18,15,0,16,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1040036678314209}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccbbcccccddcacdaabdbaadbbbccdcd""
T = ""dddbcaadcbbbdbdcdaaadaddcacaabadd"""
953,sub,4,1174,1174,1,1174,1,"{'ok': True, 'value': 1174, 'stdout': '1174\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1028435230255127}",1,Compute: 5600 - 4426
954,ilp_partition,8,1,1,1,20,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10687041282653809}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 24, 11, 7, 15, 5, 4, 8]"
955,add,2,96,96,1,96,1,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1112668514251709}",1,Compute: 49 + 47
956,rod,4,32,10,0,11,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1000828742980957}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 9, 6, 1]"
957,mul,4,16085797,16443844,0,16054997,0,"{'ok': True, 'value': 16085797, 'stdout': '16085797\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10062813758850098}",1,Compute: 3761 * 4277
958,knap,16,432,1080,0,550,0,"{'ok': True, 'value': 432, 'stdout': '432\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10667824745178223}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 31, 27, 7, 6, 25, 7, 14, 27, 26, 8, 7, 9, 16, 30, 6]
V = [43, 40, 10, 28, 38, 63, 60, 25, 13, 18, 62, 28, 15, 45, 45, 20]
C = 131"
959,ilp_assign,4,13,7,0,16,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dl13o4_r/main.py"", line 39, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_dl13o4_r/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0966176986694336}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3, 4, 10], [6, 8, 7, 8], [2, 10, 4, 7], [10, 7, 7, 1]]"
960,mul,32,1757109390129300701194409962310589600181440101053796307586483296,176633344833143247953847316552831663646654322232864222088,0,176334266684262329388452684444966954364588642644646464,0,"{'ok': True, 'value': 1757109390129300701194409962310589600181440101053796307586483296, 'stdout': '1757109390129300701194409962310589600181440101053796307586483296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09671545028686523}",1,Compute: 84210071007374229982832338460652 * 20865786824659387715949304111048
961,add,16,9931768421412161,9931768421412161,1,9931768421412161,1,"{'ok': True, 'value': 9931768421412161, 'stdout': '9931768421412161\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0958857536315918}",1,Compute: 1365098512968276 + 8566669908443885
962,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10104703903198242}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 35, 91, 25, 80, 45, 63, 76, 94, 96, 49, 25, 52, 17, 68, 28, 13, 39, 96, 70, 70, 26, 83, 65]"
963,lcs,8,5,5,1,6,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10897660255432129}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabcaaac""
T = ""adadaac"""
964,add,4,12534,3643,0,12534,1,"{'ok': True, 'value': 12534, 'stdout': '12534\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10735678672790527}",1,Compute: 8891 + 3643
965,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11658096313476562}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcc""
T = ""bcaa"""
966,ilp_prod,8,56,-1,0,108,0,"{'ok': True, 'value': 56, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6afd3ca5869b44e6aeeceb3439aa2740-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6afd3ca5869b44e6aeeceb3439aa2740-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 57.6286 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -46 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 1 rows 2 columns\nCbc0012I Integer solution of -56 found by DiveCoefficient after 3 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3\nCbc0013I At root node, 2 cuts changed objective from -57.628571 to -56 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -56, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -57.6286 to -56\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                56.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n56.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18759584426879883}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 19, 13, 9]
consumption (rows=resources) = [[3, 7, 2, 4], [4, 2, 8, 4], [8, 2, 2, 6], [6, 8, 7, 3]]
capacity = [23, 32, 22, 22]
upper_bounds = [3, 3, 3, 3]"
967,rod,4,22,12,0,18,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10153698921203613}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 11, 7, 9]"
968,add,32,102333302560288604416458834145796,102333302559288594416458834145796,0,102333302560288604417098834145796,0,"{'ok': True, 'value': 102333302560288604416458834145796, 'stdout': '102333302560288604416458834145796\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10641193389892578}",1,Compute: 90921400843696558812159583653256 + 11411901716592045604299250492540
969,ilp_partition,2,0,0,1,6,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10223841667175293}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 6, 3]"
970,add,2,105,105,1,105,1,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10947656631469727}",1,Compute: 13 + 92
971,ilp_partition,2,2,0,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11425662040710449}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 2, 5, 2]"
972,knap,32,1639,1044,0,1685,0,"{'ok': True, 'value': 1639, 'stdout': '1639\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1151130199432373}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 41, 19, 53, 38, 5, 5, 12, 22, 12, 55, 59, 20, 11, 56, 62, 10, 6, 1, 11, 29, 62, 32, 2, 53, 54, 16, 19, 22, 37, 51, 17]
V = [30, 18, 104, 74, 111, 75, 42, 38, 92, 12, 79, 47, 79, 74, 92, 15, 15, 24, 101, 55, 3, 120, 71, 33, 19, 37, 107, 123, 47, 46, 113, 93]
C = 450"
973,add,8,66336805,54397340,0,66336805,1,"{'ok': True, 'value': 66336805, 'stdout': '66336805\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09836006164550781}",1,Compute: 11939465 + 54397340
974,add,4,14279,14279,1,14279,1,"{'ok': True, 'value': 14279, 'stdout': '14279\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10423040390014648}",1,Compute: 8129 + 6150
975,ilp_prod,2,14,0,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_etjl84i6/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18219947814941406}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[2, 1], [1, 2]]
capacity = [6, 8]
upper_bounds = [3, 4]"
976,add,16,10654731794226326,10654731794226326,1,10654731794226326,1,"{'ok': True, 'value': 10654731794226326, 'stdout': '10654731794226326\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10688328742980957}",1,Compute: 6404488505816986 + 4250243288409340
977,mul,4,2962998,298098,0,2954898,0,"{'ok': True, 'value': 2962998, 'stdout': '2962998\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09935474395751953}",1,Compute: 2526 * 1173
978,add,4,13575,13575,1,13575,1,"{'ok': True, 'value': 13575, 'stdout': '13575\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09069967269897461}",1,Compute: 6744 + 6831
979,knap,8,79,105,0,104,0,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11569929122924805}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 3, 13, 13, 11, 7, 9, 14]
V = [29, 8, 17, 1, 21, 16, 5, 21]
C = 39"
980,rod,32,2208,1055,0,1005,0,"{'ok': True, 'value': 2208, 'stdout': '2208\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10242581367492676}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [69, 83, 32, 15, 67, 36, 27, 5, 60, 1, 89, 6, 74, 18, 57, 89, 57, 20, 57, 9, 68, 90, 93, 23, 55, 31, 14, 19, 56, 21, 55, 5]"
981,mul,16,9751858325197048546863586604850,0,0,982049595596949847844333266650,0,"{'ok': True, 'value': 9751858325197048546863586604850, 'stdout': '9751858325197048546863586604850\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10853934288024902}",1,Compute: 5044286072301450 * 1933248468746693
982,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10677480697631836}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [89, 92, 66, 27, 94, 6, 8, 41, 56, 78, 93, 30, 88, 38, 17, 33, 65, 55, 88, 44, 35, 55, 7, 58]"
983,ilp_prod,32,253,1002,0,187,0,"{'ok': True, 'value': 253, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/551fd445b54f46bfa7dc41fad20c7f10-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/551fd445b54f46bfa7dc41fad20c7f10-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 293.996 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -236 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -253 found by DiveCoefficient after 19 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 2.6666667\nCbc0013I At root node, 3 cuts changed objective from -293.99597 to -253.03809 in 10 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 16 row cuts average 4.6 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 19 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -253, took 19 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 2 variables fixed on reduced cost\nCuts at root node changed objective from -293.996 to -253.038\nProbing was tried 10 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 10 times and created 16 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 10 times and created 19 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                253.00000000\nEnumerated nodes:               0\nTotal iterations:               19\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n253.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19447040557861328}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 62, 28, 27, 17, 56]
consumption (rows=resources) = [[18, 14, 27, 24, 8, 22], [20, 16, 12, 2, 4, 18], [28, 27, 13, 4, 17, 7], [25, 15, 20, 25, 8, 7]]
capacity = [89, 107, 86, 111]
upper_bounds = [3, 3, 3, 3, 5, 4]"
984,rod,2,12,12,1,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gj3vztz1/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_gj3vztz1/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11517953872680664}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
985,sub,4,2767,2767,1,2767,1,"{'ok': True, 'value': 2767, 'stdout': '2767\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10340142250061035}",1,Compute: 6993 - 4226
986,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10180902481079102}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 33, 58, 44, 59, 59, 36, 86, 63, 16, 63, 74, 27, 61, 15, 29, 22, 38, 8, 50, 91, 25, 9, 14]"
987,add,4,7192,7192,1,7192,1,"{'ok': True, 'value': 7192, 'stdout': '7192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0977022647857666}",1,Compute: 3195 + 3997
988,ilp_prod,2,56,-1,0,60,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__x0lfc17/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18493127822875977}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[3, 1], [3, 1]]
capacity = [9, 7]
upper_bounds = [3, 7]"
989,knap,2,9,17,0,13,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11573314666748047}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 5]
V = [8, 9, 8]
C = 6"
990,rod,16,576,16,0,164,0,"{'ok': True, 'value': 576, 'stdout': '576\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09771943092346191}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [36, 25, 3, 39, 23, 14, 28, 23, 35, 5, 30, 11, 11, 21, 43, 35]"
991,add,16,10530486214961920,11111111111111111,0,10530486214961920,1,"{'ok': True, 'value': 10530486214961920, 'stdout': '10530486214961920\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09829258918762207}",1,Compute: 6512619186740868 + 4017867028221052
992,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_j7ck83up/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_j7ck83up/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09096813201904297}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 5]"
993,ilp_prod,4,50,33,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_49pakxdw/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19818520545959473}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 10, 10]
consumption (rows=resources) = [[4, 2, 2], [3, 4, 2], [3, 4, 2]]
capacity = [10, 11, 15]
upper_bounds = [3, 3, 5]"
994,ilp_partition,8,0,3,0,34,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11079216003417969}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 13, 12, 14, 21, 6, 21, 1]"
995,ilp_prod,2,16,16,1,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_w3192_vv/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1694929599761963}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[3, 2], [2, 3]]
capacity = [8, 6]
upper_bounds = [3, 3]"
996,ilp_assign,2,6,6,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21767210960388184}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [5, 2]]"
997,mul{'ok': True, 'value': -5534750394981020432, 'stdout': '-5534750394981020432\n', 'stderr': '/tmp/cot_exec_x19cv357/main.py:4: RuntimeWarning: overflow encountered in scalar multiply\n  return np.int64(a) * np.int64(b)\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2393028736114502}",0,Compute: 5160563364690296 * 9677397621555394
998,knap,8,117,110,0,60,0,"{'ok': True, 'value': 117, 'stdout': '117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09882569313049316}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 2, 9, 6, 13, 3, 7, 9]
V = [25, 31, 32, 24, 19, 5, 15, 25]
C = 28"
999,lcs,8,4,4,1,2,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10680389404296875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccabcdaa""
T = ""bdacbca"""
