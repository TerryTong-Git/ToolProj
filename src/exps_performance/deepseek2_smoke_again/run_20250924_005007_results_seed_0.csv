idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,rod,16,352,45,0,29,0,"{'ok': True, 'value': 352, 'stdout': '352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1451258659362793}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [22, 37, 4, 6, 33, 34, 17, 9, 17, 22, 28, 8, 48, 26, 45, 1]"
1,sub,4,2175,2175,1,2175,1,"{'ok': True, 'value': 2175, 'stdout': '2175\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10335826873779297}",1,Compute: 9905 - 7730
2,ilp_partition,4,6,0,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09400582313537598}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 11, 5, 11]"
3,ilp_assign,16,105,1,0,49,0,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.6592178344726562}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 30, 2, 21, 25, 8, 44], [26, 12, 25, 40, 47, 35, 48], [28, 20, 12, 27, 36, 18, 42], [34, 8, 27, 48, 47, 6, 23], [41, 1, 35, 31, 19, 47, 25], [37, 29, 41, 32, 23, 31, 33], [33, 16, 2, 24, 15, 16, 20]]"
4,add,16,7710349994693310,57777444444444444,0,7710349994693310,1,"{'ok': True, 'value': 7710349994693310, 'stdout': '7710349994693310\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09961438179016113}",1,Compute: 1550168928425851 + 6160181066267459
5,sub,4,553,553,1,553,1,"{'ok': True, 'value': 553, 'stdout': '553\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10313796997070312}",1,Compute: 3573 - 3020
6,sub,16,2793905415068721,2793905415068721,1,2793905415068721,1,"{'ok': True, 'value': 2793905415068721, 'stdout': '2793905415068721\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10460519790649414}",1,Compute: 8928991557295045 - 6135086142226324
7,knap,16,420,1043,0,1048,0,"{'ok': True, 'value': 420, 'stdout': '420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09565877914428711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 23, 15, 8, 27, 32, 6, 30, 20, 2, 22, 31, 8, 20, 7, 24]
V = [6, 24, 40, 24, 44, 62, 29, 49, 44, 2, 48, 44, 58, 27, 59, 54]
C = 151"
8,lcs,4,3,3,1,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08737897872924805}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbd""
T = ""bbbbd"""
9,add,16,17731907340954129,17731907340954129,1,17731907340954129,1,"{'ok': True, 'value': 17731907340954129, 'stdout': '17731907340954129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08962535858154297}",1,Compute: 9444754194954687 + 8287153145999442
10,ilp_prod,16,132,138,0,159,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_1wy2zcv5/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""Quantity"", range(6), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22771763801574707}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 30, 42, 3, 34, 16]
consumption (rows=resources) = [[10, 7, 1, 10, 4, 14], [12, 13, 12, 13, 7, 11], [1, 2, 4, 14, 4, 14], [11, 8, 11, 11, 12, 12]]
capacity = [41, 52, 53, 37]
upper_bounds = [3, 4, 3, 3, 3, 3]"
11,rod,2,12,12,1,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__r7n1z96/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec__r7n1z96/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08620595932006836}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 6]"
12,ilp_prod,2,21,21,1,21,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ja5au8r6/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15722346305847168}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[1, 1], [1, 3]]
capacity = [10, 7]
upper_bounds = [7, 3]"
13,lcs,32,19,10,0,24,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08432173728942871}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badcccbdabaadabbdccdccbaccbabccd""
T = ""baabdddadcdabbcdbccddccadacddbb"""
14,sub,8,5338410,5338410,1,5338410,1,"{'ok': True, 'value': 5338410, 'stdout': '5338410\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09418392181396484}",1,Compute: 39120586 - 33782176
15,mul,2,406,406,1,406,1,"{'ok': True, 'value': 406, 'stdout': '406\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0856320858001709}",1,Compute: 29 * 14
16,knap,8,58,110,0,21,0,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09056425094604492}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 9, 13, 6, 8, 4, 6, 16]
V = [16, 1, 15, 10, 10, 10, 12, 5]
C = 35"
17,lcs,8,3,5,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09058904647827148}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbadcccb""
T = ""aaaacbbb"""
18,mul,8,3969565102442620,403549521,0,395354885964616,0,"{'ok': True, 'value': 3969565102442620, 'stdout': '3969565102442620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09485459327697754}",1,Compute: 56485532 * 70275785
19,add,4,8809,8809,1,8809,1,"{'ok': True, 'value': 8809, 'stdout': '8809\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10508847236633301}",1,Compute: 2875 + 5934
20,lcs,8,4,5,0,6,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10174226760864258}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbacddd""
T = ""bdbaabdca"""
21,ilp_assign,4,18,5,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8xgnobba/main.py"", line 29, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_8xgnobba/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11955571174621582}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 8, 10, 2], [5, 9, 8, 9], [11, 7, 8, 5], [3, 4, 9, 6]]"
22,mul,32,489609894588175025430912293831244786193479704576686284778774185,17807776858897895005337297430021,0,475372898818448998974375679478191663536449446555155555,0,"{'ok': True, 'value': 489609894588175025430912293831244786193479704576686284778774185, 'stdout': '489609894588175025430912293831244786193479704576686284778774185\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1186680793762207}",1,Compute: 27494161593985543586135614534485 * 17807776858897895005337297430021
23,mul,8,1863959050052255,184467440737095,0,1880230953569115,0,"{'ok': True, 'value': 1863959050052255, 'stdout': '1863959050052255\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11372208595275879}",1,Compute: 20787409 * 89667695
24,add,8,152864519,152864519,1,152864519,1,"{'ok': True, 'value': 152864519, 'stdout': '152864519\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11318755149841309}",1,Compute: 60162640 + 92701879
25,sub,8,22789722,22789722,1,22789722,1,"{'ok': True, 'value': 22789722, 'stdout': '22789722\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08451414108276367}",1,Compute: 91709201 - 68919479
26,sub,32,7062792981060630128918080327802,70528044381060630059918080327802,0,70627929810606301099180804327802,0,"{'ok': True, 'value': 7062792981060630128918080327802, 'stdout': '7062792981060630128918080327802\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0930624008178711}",1,Compute: 48306587277238128358914468337774 - 41243794296177498229996388009972
27,ilp_prod,32,374,"The exact answer would be the result of solving the linear programming problem. However, without a specific linear programming solver, I cannot provide the exact numerical answer. The answer would be a floating-point number representing the maximum possible profit.",0,1000,0,"{'ok': True, 'value': 421, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4cb60e3fdf1d433bbb4164906a5b97e6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4cb60e3fdf1d433bbb4164906a5b97e6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 1981.3599 (6)\n3  Obj 421.37673\nOptimal - objective value 421.37673\nOptimal objective 421.3767293 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n421.3767327\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17170953750610352}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [74, 91, 34, 35, 96, 20]
consumption (rows=resources) = [[22, 20, 15, 29, 1, 1], [17, 29, 22, 25, 27, 21], [17, 3, 7, 2, 22, 31], [29, 12, 16, 7, 5, 9]]
capacity = [96, 118, 65, 78]
upper_bounds = [3, 4, 4, 3, 3, 3]"
28,ilp_partition,8,1,3,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08542752265930176}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 8, 10, 19, 1, 16, 23, 5]"
29,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0878438949584961}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 4, 2, 3]"
30,sub,8,46974726,46974726,1,46974726,1,"{'ok': True, 'value': 46974726, 'stdout': '46974726\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09084558486938477}",1,Compute: 66056529 - 19081803
31,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09483122825622559}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""ac"""
32,add,8,46681780,46681780,1,46681780,1,"{'ok': True, 'value': 46681780, 'stdout': '46681780\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09023189544677734}",1,Compute: 15906864 + 30774916
33,mul,8,185747110482570,188489457740,0,188487238896610,0,"{'ok': True, 'value': 185747110482570, 'stdout': '185747110482570\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09261894226074219}",1,Compute: 14207046 * 13074295
34,ilp_assign,8,25,36,0,56,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4465947151184082}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 10, 20, 5, 16, 15, 1], [20, 11, 5, 14, 1, 10, 6], [19, 6, 3, 14, 17, 15, 18], [21, 5, 14, 11, 5, 23, 18], [12, 19, 6, 3, 3, 8, 4], [7, 16, 23, 21, 7, 1, 13], [11, 9, 12, 19, 9, 15, 17]]"
35,add,32,58224111217826764239805231127258,48224111217426764239850231157758,0,58224111217826764239805231127258,1,"{'ok': True, 'value': 58224111217826764239805231127258, 'stdout': '58224111217826764239805231127258\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10796093940734863}",1,Compute: 32627128502612862462141768948860 + 25596982715213901777663462178398
36,sub,2,33,33,1,33,1,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0975947380065918}",1,Compute: 83 - 50
37,rod,2,10,10,1,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_v6wngaaz/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_v6wngaaz/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09483075141906738}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
38,rod,32,2080,-1,0,3210,0,"{'ok': True, 'value': 2080, 'stdout': '2080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10520386695861816}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [65, 13, 85, 9, 70, 76, 31, 21, 43, 91, 78, 48, 75, 75, 77, 90, 1, 56, 59, 94, 15, 86, 21, 59, 6, 30, 83, 69, 31, 65, 21, 94]"
39,ilp_partition,2,1,1,1,7,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10164356231689453}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 4, 6, 6]"
40,ilp_assign,16,63,The actual minimum total cost would be found using the Hungarian algorithm and is not provided here.,0,105,0,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4056837558746338}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 22, 23, 41, 3, 9, 29], [6, 35, 22, 9, 27, 22, 3], [29, 27, 40, 12, 23, 30, 30], [16, 23, 38, 40, 1, 44, 37], [15, 35, 5, 16, 6, 39, 12], [27, 29, 16, 44, 20, 40, 43], [40, 7, 1, 32, 41, 4, 2]]"
41,ilp_assign,8,35,2,0,43,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40447068214416504}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 11, 9, 20, 21, 11, 3], [12, 1, 15, 20, 6, 12, 20], [10, 23, 9, 16, 1, 15, 6], [8, 12, 8, 4, 21, 2, 13], [15, 13, 21, 20, 2, 11, 1], [22, 1, 15, 9, 7, 23, 6], [15, 4, 23, 24, 13, 18, 2]]"
42,rod,8,56,-1,0,74,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08858108520507812}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 14, 2, 22, 10, 20, 6, 10]"
43,ilp_assign,32,104,185,0,116,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39934301376342773}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[58, 17, 78, 66, 34, 66, 17], [89, 76, 25, 95, 10, 6, 81], [5, 40, 36, 94, 62, 31, 59], [67, 80, 26, 47, 95, 49, 28], [55, 66, 77, 18, 10, 75, 30], [82, 55, 39, 27, 38, 19, 21], [36, 46, 14, 19, 48, 88, 89]]"
44,knap,32,1653,1158,0,1073,0,"{'ok': True, 'value': 1653, 'stdout': '1653\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08896279335021973}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [47, 36, 13, 29, 3, 33, 24, 40, 23, 26, 46, 37, 5, 11, 59, 8, 2, 12, 2, 29, 17, 4, 46, 22, 1, 16, 48, 16, 17, 43, 30, 6]
V = [8, 77, 126, 122, 15, 11, 109, 93, 105, 45, 22, 52, 56, 127, 45, 29, 26, 113, 37, 6, 40, 51, 65, 80, 57, 122, 83, 73, 40, 19, 100, 3]
C = 375"
45,lcs,16,7,6,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09417510032653809}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbabaddcddacdaa""
T = ""bbbcdbcdbacbbbb"""
46,knap,32,1362,1086,0,1459,0,"{'ok': True, 'value': 1362, 'stdout': '1362\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0995481014251709}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [53, 48, 46, 48, 61, 59, 39, 48, 5, 54, 4, 6, 42, 28, 17, 53, 51, 20, 51, 39, 20, 18, 25, 20, 25, 52, 2, 14, 36, 61, 53, 37]
V = [62, 41, 37, 11, 96, 96, 80, 66, 17, 4, 81, 29, 9, 15, 55, 33, 58, 103, 22, 70, 38, 105, 10, 55, 44, 123, 1, 37, 88, 86, 112, 85]
C = 567"
47,add,2,147,147,1,147,1,"{'ok': True, 'value': 147, 'stdout': '147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09305953979492188}",1,Compute: 75 + 72
48,knap,8,68,53,0,43,0,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09436964988708496}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 8, 3, 3, 3, 1, 11, 4]
V = [16, 2, 3, 7, 20, 6, 26, 9]
C = 22"
49,ilp_assign,4,17,20,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_pt8ipp8v/main.py"", line 33, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_pt8ipp8v/main.py"", line 8, in hungarian_algorithm\n    cost_matrix[:,j] = [x - np.min(cost_matrix[:,j]) for x in cost_matrix[:,j]]\nTypeError: list indices must be integers or slices, not tuple\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21185922622680664}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 1, 6], [11, 9, 4, 12], [6, 3, 9, 9], [12, 10, 10, 7]]"
50,ilp_prod,32,284,100,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ixwuvn50/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18415236473083496}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 29, 49, 58, 20, 85]
consumption (rows=resources) = [[12, 8, 6, 31, 4, 22], [5, 32, 6, 26, 7, 15], [7, 23, 19, 27, 20, 17], [9, 3, 27, 21, 8, 21]]
capacity = [106, 115, 89, 74]
upper_bounds = [8, 3, 3, 3, 4, 3]"
51,ilp_partition,2,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0901041030883789}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 6, 1]"
52,ilp_prod,8,46,105,0,105,0,"{'ok': True, 'value': 50, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e06cce79807845b39213082c45696fba-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e06cce79807845b39213082c45696fba-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (-1) rows, 4 (0) columns and 12 (-4) elements\n0  Obj -0 Dual inf 44.142853 (4)\n3  Obj 50.02381\nOptimal - objective value 50.02381\nAfter Postsolve, objective 50.02381, infeasibilities - dual 0 (0), primal 0 (0)\nOptimal objective 50.02380952 - 3 iterations time 0.002, Presolve 0.00\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n50.02380941999999\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16098690032958984}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 17, 8, 6]
consumption (rows=resources) = [[1, 8, 7, 7], [6, 6, 4, 6], [8, 3, 1, 8], [3, 1, 2, 1]]
capacity = [20, 19, 17, 26]
upper_bounds = [3, 3, 3, 3]"
53,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09112048149108887}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 2, 5]"
54,knap,4,16,26,0,26,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11203360557556152}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 7, 7]
V = [1, 14, 9, 15]
C = 11"
55,mul,16,9514771375237662064820859284484,945433826757486056795954,0,94638939381823435486896846666,0,"{'ok': True, 'value': 9514771375237662064820859284484, 'stdout': '9514771375237662064820859284484\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08143258094787598}",1,Compute: 3026482928792246 * 3143837781049254
56,sub,32,8168451361527005159785252402331,81668451362537005160785252402331,0,79680441516469550169785252402331,0,"{'ok': True, 'value': 8168451361527005159785252402331, 'stdout': '8168451361527005159785252402331\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0938115119934082}",1,Compute: 62516919082316242569089684765497 - 54348467720789237409304432363166
57,lcs,16,9,6,0,2,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08452010154724121}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdcbacbaddccbba""
T = ""bbcbbdbaabdddabc"""
58,knap,8,108,149,0,66,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1032552719116211}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 1, 10, 8, 7, 3, 5, 8]
V = [14, 29, 21, 1, 17, 27, 9, 22]
C = 27"
59,add,8,73465728,73465728,1,73465728,1,"{'ok': True, 'value': 73465728, 'stdout': '73465728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08283567428588867}",1,Compute: 18000127 + 55465601
60,mul,2,1100,1100,1,1100,1,"{'ok': True, 'value': 1100, 'stdout': '1100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09618878364562988}",1,Compute: 55 * 20
61,knap,4,20,16,0,16,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08568263053894043}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 7, 7, 3]
V = [1, 5, 2, 15]
C = 12"
62,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10609793663024902}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 5, 2]"
63,rod,8,88,22,0,80,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_fg1mdhsr/main.py"", line 11, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_fg1mdhsr/main.py"", line 6, in rod_cutting\n    dp[i] = max(dp[i], dp[i - j] + P[j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10089707374572754}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [6, 22, 12, 14, 14, 14, 12, 19]"
64,rod,8,88,-1,0,67,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09453701972961426}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 21, 1, 12, 16, 20, 23, 10]"
65,sub,16,4499466285623176,4499466285623176,1,4499466285623176,1,"{'ok': True, 'value': 4499466285623176, 'stdout': '4499466285623176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09095644950866699}",1,Compute: 7437719688167025 - 2938253402543849
66,lcs,16,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09435343742370605}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadcbacdbddabccc""
T = ""dadadcdcdacbddcdb"""
67,ilp_assign,8,35,10,0,46,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4618198871612549}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 11, 24, 15, 18, 23], [20, 4, 6, 6, 20, 19, 20], [2, 15, 9, 7, 18, 2, 16], [3, 1, 21, 2, 20, 7, 6], [16, 22, 7, 17, 10, 19, 24], [19, 3, 5, 12, 18, 1, 20], [11, 21, 10, 18, 8, 19, 10]]"
68,mul{'ok': True, 'value': 1640356241120061941031384497370405072047354709210546715153934763, 'stdout': '1640356241120061941031384497370405072047354709210546715153934763\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08970499038696289}",1,Compute: 76303788176467233543193332826173 * 21497703853528498669926631245831
69,mul,2,378,378,1,378,1,"{'ok': True, 'value': 378, 'stdout': '378\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10010051727294922}",1,Compute: 18 * 21
70,sub,32,26258427375640274383334844736913,26258427375640274383335034735013,0,26258427375640274383334844736913,1,"{'ok': True, 'value': 26258427375640274383334844736913, 'stdout': '26258427375640274383334844736913\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09728384017944336}",1,Compute: 84616647653938860794364507119887 - 58358220278298586411029662382974
71,add,32,141802453514639949632791856419449,141802453514639949632791861429449,0,141802453514639949632792266419449,0,"{'ok': True, 'value': 141802453514639949632791856419449, 'stdout': '141802453514639949632791856419449\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0852975845336914}",1,Compute: 43973149901225464806169472766927 + 97829303613414484826622383652522
72,ilp_partition,32,0,10,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_w95wux2w/main.py"", line 10, in <module>\n    res = partition(weights)\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09659624099731445}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 54, 48, 1, 91, 83, 22, 60, 25, 6, 83, 40, 91, 85, 23, 22, 19, 2, 29, 27, 71, 9, 11, 90]"
73,ilp_prod,4,57,104,0,60,0,"{'ok': True, 'value': 59, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/03358ca1db07418da639d51a61905729-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/03358ca1db07418da639d51a61905729-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (0) rows, 3 (0) columns and 9 (0) elements\n0  Obj -0 Dual inf 30 (3)\n3  Obj 59.428571\nOptimal - objective value 59.428571\nOptimal objective 59.42857143 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n59.42857120000001\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1741621494293213}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 12, 5]
consumption (rows=resources) = [[4, 1, 2], [1, 4, 2], [2, 1, 1]]
capacity = [13, 16, 8]
upper_bounds = [3, 4, 6]"
74,rod,4,40,10,0,23,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08360910415649414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 6, 2, 5]"
75,lcs,16,10,8,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08437180519104004}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbaccaadbaddaba""
T = ""bbccaccacacbdad"""
76,ilp_prod,2,14,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_cm08sd4w/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16674137115478516}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[3, 3], [1, 3]]
capacity = [6, 10]
upper_bounds = [3, 3]"
77,ilp_assign,2,3,4,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3840460777282715}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [1, 2]]"
78,add,8,105288746,106288746,0,105288746,1,"{'ok': True, 'value': 105288746, 'stdout': '105288746\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08723163604736328}",1,Compute: 56146884 + 49141862
79,knap,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10379815101623535}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 1]
V = [5, 8, 2]
C = 3"
80,mul{'ok': True, 'value': 428483229011412947799843655282652129188026984166013526453173376, 'stdout': '428483229011412947799843655282652129188026984166013526453173376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08758759498596191}",1,Compute: 10895982125618928736390278347712 * 39324883619618974666082074532398
81,knap,8,97,100,0,60,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09116029739379883}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 5, 12, 5, 4, 11, 11, 3]
V = [24, 13, 13, 19, 28, 25, 26, 3]
C = 30"
82,add,2,120,120,1,120,1,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08815169334411621}",1,Compute: 42 + 78
83,ilp_assign,4,14,-2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_sjzwyvn4/main.py"", line 29, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_sjzwyvn4/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0842902660369873}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 8, 7, 1], [8, 12, 1, 9], [7, 8, 4, 7], [4, 5, 8, 8]]"
84,ilp_prod,16,102,The actual answer would be the maximum profit found by the linear programming solver.,0,156,0,"{'ok': True, 'value': 102, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c15495206454483fa542a4a18c50b856-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c15495206454483fa542a4a18c50b856-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 108.357 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -102 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -107.71429 to -107.71429 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -102, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -107.714 to -107.714\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                102.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n102.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18324732780456543}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 20, 27, 41, 20, 27]
consumption (rows=resources) = [[5, 5, 1, 3, 6, 2], [11, 12, 15, 14, 7, 13], [2, 12, 13, 15, 13, 9], [4, 6, 10, 6, 13, 9]]
capacity = [40, 37, 51, 59]
upper_bounds = [3, 3, 3, 3, 3, 3]"
85,rod,4,48,13,0,22,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10641765594482422}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 5, 6, 1]"
86,rod,16,344,502,0,235,0,"{'ok': True, 'value': 344, 'stdout': '344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10307145118713379}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [8, 43, 3, 14, 17, 15, 8, 41, 34, 15, 46, 13, 33, 19, 28, 19]"
87,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08747434616088867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""accd""
T = ""caab"""
88,ilp_assign,32,148,198,0,114,0,"{'ok': True, 'value': 148, 'stdout': '148\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3992328643798828}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[88, 2, 15, 27, 12, 51, 4], [19, 48, 88, 38, 32, 5, 16], [42, 30, 27, 34, 75, 51, 80], [89, 45, 90, 69, 29, 29, 16], [77, 76, 79, 72, 20, 38, 80], [77, 58, 46, 48, 95, 83, 58], [30, 47, 88, 95, 91, 44, 49]]"
89,knap,16,422,102,0,102,0,"{'ok': True, 'value': 422, 'stdout': '422\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1100914478302002}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 7, 16, 14, 20, 17, 4, 7, 10, 32, 17, 9, 6, 8, 13, 16]
V = [29, 17, 58, 26, 64, 64, 14, 47, 55, 23, 1, 53, 17, 17, 50, 48]
C = 102"
90,ilp_prod,8,108,100,0,105,0,"{'ok': True, 'value': 108, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3f8630e57c36499783bf36f781e0799a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3f8630e57c36499783bf36f781e0799a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 53 (4)\n2  Obj 108\nOptimal - objective value 108\nOptimal objective 108 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n108.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17671871185302734}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 19, 7]
consumption (rows=resources) = [[3, 2, 6, 4], [1, 1, 8, 8], [2, 1, 3, 8], [3, 5, 2, 5]]
capacity = [27, 20, 30, 27]
upper_bounds = [9, 5, 3, 3]"
91,ilp_assign,2,4,5,0,4,1,"{'ok': True, 'value': 1, 'stdout': '1.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20715999603271484}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3], [2, 1]]"
92,knap,32,1777,1050,0,1050,0,"{'ok': True, 'value': 1777, 'stdout': '1777\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09197711944580078}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 33, 22, 5, 16, 49, 23, 22, 63, 15, 37, 25, 35, 18, 46, 27, 17, 30, 8, 29, 49, 8, 34, 58, 62, 41, 48, 62, 61, 14, 40, 13]
V = [65, 12, 30, 16, 13, 17, 119, 84, 123, 88, 121, 75, 114, 84, 5, 107, 102, 13, 35, 123, 53, 75, 66, 49, 124, 92, 90, 126, 107, 48, 26, 105]
C = 505"
93,knap,4,19,26,0,15,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0995032787322998}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 8, 4, 8]
V = [4, 7, 6, 15]
C = 11"
94,ilp_assign,4,9,10,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tro1s8qh/main.py"", line 30, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_tro1s8qh/main.py"", line 21, in assignment_problem\n    C[:, c] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21300172805786133}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 10, 9, 2], [5, 2, 12, 2], [5, 1, 12, 3], [10, 11, 3, 7]]"
95,rod,8,84,22,0,44,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_sssl8cq7/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_sssl8cq7/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09605884552001953}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 21, 4, 8, 12, 24, 16, 15]"
96,lcs,32,19,12,0,18,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10366940498352051}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbacabdcbddabdbadcdacdaccabcbcd""
T = ""dcadabbaabdabdbabcbdbaadbcaaddcd"""
97,rod,16,168,46,0,40,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09966683387756348}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [10, 15, 15, 42, 40, 27, 39, 33, 12, 10, 43, 4, 48, 16, 7, 38]"
98,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3924438953399658}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 3], [1, 5]]"
99,ilp_assign,8,44,45,0,46,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39945220947265625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5, 4, 2, 20, 18, 3], [19, 24, 20, 14, 15, 21, 15], [13, 1, 24, 20, 21, 17, 21], [11, 23, 17, 7, 5, 20, 10], [18, 10, 22, 13, 20, 17, 2], [15, 19, 19, 8, 13, 9, 18], [22, 10, 24, 4, 11, 19, 23]]"
100,knap,16,478,1045,0,1045,0,"{'ok': True, 'value': 478, 'stdout': '478\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08908343315124512}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 4, 20, 31, 24, 31, 9, 15, 4, 29, 16, 16, 15, 3, 19, 8]
V = [50, 44, 54, 45, 19, 50, 59, 17, 54, 21, 30, 5, 48, 60, 59, 15]
C = 137"
101,mul,2,7650,7650,1,7650,1,"{'ok': True, 'value': 7650, 'stdout': '7650\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09556341171264648}",1,Compute: 85 * 90
102,ilp_assign,8,36,36,1,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 5, 5, 19, 7, 21, 12], [12, 4, 4, 13, 16, 5, 11], [19, 17, 7, 20, 8, 20, 19], [15, 20, 10, 4, 5, 14, 4], [24, 7, 23, 5, 6, 23, 9], [9, 22, 11, 6, 15, 23, 11], [18, 4, 3, 13, 1, 2, 7]]"
103,add,16,6243867234091392,6243867234091392,1,6243867234091392,1,"{'ok': True, 'value': 6243867234091392, 'stdout': '6243867234091392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09423136711120605}",1,Compute: 3768167450808919 + 2475699783282473
104,ilp_assign,16,73,0,0,105,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39006614685058594}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 6, 33, 38, 18, 2, 9], [4, 5, 36, 22, 5, 38, 47], [18, 10, 23, 41, 38, 42, 16], [39, 1, 28, 35, 22, 28, 48], [26, 44, 25, 30, 44, 8, 34], [1, 29, 17, 44, 8, 23, 5], [32, 22, 34, 26, 25, 7, 35]]"
105,sub,8,50908484,50908484,1,50908484,1,"{'ok': True, 'value': 50908484, 'stdout': '50908484\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09051179885864258}",1,Compute: 95517595 - 44609111
106,ilp_assign,4,7,20,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gjli3r9d/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_gjli3r9d/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08243584632873535}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5, 3, 6], [2, 3, 11, 1], [11, 3, 10, 9], [4, 1, 1, 7]]"
107,mul,4,3080083,56,0,3055833,0,"{'ok': True, 'value': 3080083, 'stdout': '3080083\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09671998023986816}",1,Compute: 2903 * 1061
108,lcs,32,18,10,0,20,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09467363357543945}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caddcbaccacdadabbbbcdbddccbcccba""
T = ""ddbbcabcbcbdbbdadacacacaacddbac"""
109,lcs,8,4,5,0,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08549880981445312}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacccabb""
T = ""addcbccd"""
110,ilp_prod,16,363,1017,0,1020,0,"{'ok': True, 'value': 393, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7796d343d31b441292988e7ff2fe4eec-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7796d343d31b441292988e7ff2fe4eec-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 897.77967 (6)\n4  Obj 393.29474\nOptimal - objective value 393.29474\nOptimal objective 393.2947368 - 4 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n393.29473740000003\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17940497398376465}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [43, 48, 39, 21, 39, 36]
consumption (rows=resources) = [[3, 2, 3, 10, 6, 9], [8, 3, 4, 7, 2, 10], [14, 9, 3, 2, 1, 5], [8, 3, 14, 5, 12, 3]]
capacity = [45, 46, 62, 37]
upper_bounds = [4, 6, 3, 4, 3, 4]"
111,add,32,41633636576856997500898443832254,,0,41633636576856997500998443832254,0,"{'ok': True, 'value': 41633636576856997500898443832254, 'stdout': '41633636576856997500898443832254\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09284663200378418}",1,Compute: 12842473472303414570776368778170 + 28791163104553582930122075054084
112,add,2,60,60,1,60,1,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08508825302124023}",1,Compute: 43 + 17
113,add,8,155124327,155124327,1,155124327,1,"{'ok': True, 'value': 155124327, 'stdout': '155124327\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09015750885009766}",1,Compute: 80774895 + 74349432
114,rod,2,4,3,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_uknt00a7/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_uknt00a7/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10065245628356934}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 1]"
115,add,32,94627045315906235114510329471178,94626945315906235114508329467178,0,94627045315906235114509339471178,0,"{'ok': True, 'value': 94627045315906235114510329471178, 'stdout': '94627045315906235114510329471178\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08347225189208984}",1,Compute: 68030648039426894416215489087323 + 26596397276479340698294840383855
116,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09454584121704102}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbabdaa""
T = ""dbcddadbb"""
117,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09739255905151367}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 2, 3]"
118,ilp_assign,16,78,32,0,116,0,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3884127140045166}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 28, 28, 18, 19, 9, 2], [16, 9, 40, 32, 14, 36, 36], [43, 32, 32, 4, 40, 43, 36], [31, 3, 2, 45, 47, 40, 7], [44, 15, 37, 5, 35, 16, 10], [28, 37, 43, 42, 47, 20, 10], [41, 42, 14, 17, 40, 37, 30]]"
119,rod,32,1408,82,0,1075,0,"{'ok': True, 'value': 1408, 'stdout': '1408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08854150772094727}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [44, 40, 45, 81, 20, 56, 35, 53, 71, 22, 24, 53, 79, 87, 8, 60, 87, 30, 88, 40, 80, 86, 39, 17, 27, 15, 52, 26, 10, 55, 82, 36]"
120,add,16,7892037659053040,7892037659052940,0,7892037659052940,0,"{'ok': True, 'value': 7892037659053040, 'stdout': '7892037659053040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08553075790405273}",1,Compute: 3061712297550381 + 4830325361502659
121,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10505986213684082}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [52, 24, 42, 73, 92, 50, 26, 46, 82, 48, 6, 61, 25, 67, 35, 8, 13, 8, 34, 11, 37, 68, 54, 51]"
122,ilp_prod,8,88,108,0,0,0,"{'ok': True, 'value': 91, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f07319c14b8442a0b9d11096f38fe429-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f07319c14b8442a0b9d11096f38fe429-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 51.6 (4)\n2  Obj 91.384615\nOptimal - objective value 91.384615\nOptimal objective 91.38461538 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n91.3846155\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1774754524230957}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6, 18, 18]
consumption (rows=resources) = [[3, 5, 5, 3], [1, 3, 6, 6], [4, 2, 8, 3], [5, 6, 4, 2]]
capacity = [23, 27, 28, 19]
upper_bounds = [3, 3, 3, 4]"
123,mul,2,2496,2496,1,2592,0,"{'ok': True, 'value': 2496, 'stdout': '2496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09613299369812012}",1,Compute: 96 * 26
124,ilp_partition,32,1,1,1,10,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08831071853637695}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [87, 86, 45, 34, 16, 21, 22, 39, 31, 65, 80, 6, 93, 52, 69, 16, 91, 48, 82, 19, 23, 45, 76, 67]"
125,sub,32,33139416617258066350162831128645,-73139416613238066350213231131345,0,33139416617258066340162831128645,0,"{'ok': True, 'value': 33139416617258066350162831128645, 'stdout': '33139416617258066350162831128645\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09945559501647949}",1,Compute: 73754487146973364916414052101116 - 40615070529715298566251220972471
126,sub,2,32,32,1,32,1,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09161686897277832}",1,Compute: 80 - 48
127,knap,8,99,110,0,113,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08936047554016113}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 10, 13, 11, 10, 3, 4, 16]
V = [24, 6, 15, 9, 27, 16, 2, 32]
C = 38"
128,sub,16,38828317808646,38838327780856,0,3882831779054,0,"{'ok': True, 'value': 38828317808646, 'stdout': '38828317808646\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09042978286743164}",1,Compute: 2831072795134495 - 2792244477325849
129,sub,2,45,45,1,45,1,"{'ok': True, 'value': 45, 'stdout': '45\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08852648735046387}",1,Compute: 66 - 21
130,ilp_assign,8,27,10,0,46,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37819933891296387}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 23, 17, 9, 15, 15, 4], [19, 10, 11, 23, 3, 23, 14], [11, 24, 1, 4, 23, 11, 19], [4, 18, 7, 19, 22, 22, 1], [1, 1, 10, 24, 15, 4, 17], [22, 1, 16, 24, 8, 9, 17], [10, 9, 7, 24, 13, 20, 15]]"
131,knap,16,476,117,0,844,0,"{'ok': True, 'value': 476, 'stdout': '476\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08402347564697266}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 23, 2, 31, 28, 15, 4, 20, 13, 14, 8, 26, 8, 4, 17, 21]
V = [44, 7, 58, 20, 3, 53, 33, 62, 35, 29, 38, 21, 32, 26, 63, 32]
C = 117"
132,sub,8,55903071,55903071,1,55903071,1,"{'ok': True, 'value': 55903071, 'stdout': '55903071\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0850667953491211}",1,Compute: 79887300 - 23984229
133,mul,2,5292,5322,0,5292,1,"{'ok': True, 'value': 5292, 'stdout': '5292\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08289265632629395}",1,Compute: 63 * 84
134,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10327339172363281}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 68, 72, 48, 45, 42, 47, 50, 71, 88, 28, 89, 19, 86, 96, 56, 59, 63, 60, 64, 65, 82, 43, 78]"
135,sub,16,2944799055948094,2944789055948104,0,2944799055948094,1,"{'ok': True, 'value': 2944799055948094, 'stdout': '2944799055948094\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09640979766845703}",1,Compute: 9281341088614123 - 6336542032666029
136,ilp_partition,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08636331558227539}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 10, 6, 5]"
137,add,4,7809,7809,1,7809,1,"{'ok': True, 'value': 7809, 'stdout': '7809\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08388400077819824}",1,Compute: 2671 + 5138
138,mul,8,1419558719762050,100000001080,0,14102011684673550,0,"{'ok': True, 'value': 1419558719762050, 'stdout': '1419558719762050\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09672117233276367}",1,Compute: 52108825 * 27242194
139,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08583617210388184}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 44, 48, 1, 2, 1, 16, 24, 13, 5, 14, 3, 14, 42, 39, 38]"
140,ilp_assign,2,7,7,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21343255043029785}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [6, 3]]"
141,ilp_prod,2,18,22,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_k0ttw79r/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, upBound=upper_bounds)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15839648246765137}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6]
consumption (rows=resources) = [[2, 3], [3, 1]]
capacity = [10, 7]
upper_bounds = [3, 3]"
142,lcs,2,1,0,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10287022590637207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""bd"""
143,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08811283111572266}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbda""
T = ""acddc"""
144,add,32,74168401231896843584343261022800,74168401231896843584341260982799,0,74168401231906843584343261022799,0,"{'ok': True, 'value': 74168401231896843584343261022800, 'stdout': '74168401231896843584343261022800\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10506439208984375}",1,Compute: 50100575797921377219785391253456 + 24067825433975466364557869769344
145,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08291006088256836}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daba""
T = ""cab"""
146,ilp_assign,2,8,8,1,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lfdkj5u6/main.py"", line 30, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_lfdkj5u6/main.py"", line 3, in assignment_problem\n    C = np.array(C)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08412647247314453}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [6, 4]]"
147,knap,32,1689,1036,0,1439,0,"{'ok': True, 'value': 1689, 'stdout': '1689\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10740971565246582}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [59, 42, 43, 2, 25, 31, 50, 22, 17, 51, 5, 7, 52, 33, 60, 31, 7, 53, 53, 57, 8, 50, 28, 53, 54, 3, 63, 29, 17, 11, 10, 9]
V = [92, 18, 11, 21, 48, 80, 37, 122, 62, 53, 59, 83, 93, 20, 65, 128, 29, 32, 32, 101, 64, 80, 48, 72, 122, 110, 54, 127, 113, 98, 1, 38]
C = 517"
148,lcs,2,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09008598327636719}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""bcb"""
149,ilp_prod,32,391,1000,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_yxfziwu5/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""Quantity"", range(6), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1613912582397461}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [65, 6, 83, 67, 93, 18]
consumption (rows=resources) = [[27, 2, 24, 20, 22, 27], [4, 4, 20, 10, 18, 32], [22, 14, 15, 3, 1, 23], [10, 29, 27, 14, 10, 26]]
capacity = [118, 64, 93, 117]
upper_bounds = [4, 4, 3, 5, 3, 3]"
150,ilp_assign,32,108,0,0,110,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0466346740722656}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[42, 52, 40, 24, 14, 44, 60], [25, 17, 60, 61, 69, 32, 83], [37, 9, 85, 8, 41, 90, 41], [80, 30, 4, 24, 90, 61, 93], [83, 42, 87, 70, 58, 32, 45], [12, 38, 14, 80, 38, 14, 20], [68, 78, 94, 75, 2, 63, 21]]"
151,knap,32,1601,1034,0,1446,0,"{'ok': True, 'value': 1601, 'stdout': '1601\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09642648696899414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 61, 11, 40, 64, 22, 22, 41, 38, 43, 40, 25, 30, 52, 20, 30, 15, 1, 9, 11, 11, 23, 64, 34, 6, 17, 54, 17, 11, 39, 34, 62]
V = [52, 22, 30, 97, 25, 69, 38, 52, 105, 63, 54, 28, 119, 53, 54, 19, 102, 108, 23, 94, 17, 101, 7, 42, 33, 21, 6, 97, 128, 107, 82, 39]
C = 478"
152,mul,4,15575056,28290,0,15795936,0,"{'ok': True, 'value': 15575056, 'stdout': '15575056\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09369969367980957}",1,Compute: 4714 * 3304
153,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8k6n6i5h/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_8k6n6i5h/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08636116981506348}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
154,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09344005584716797}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 2, 2]"
155,sub,2,16,16,1,16,1,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10090827941894531}",1,Compute: 34 - 18
156,ilp_assign,32,125,1,0,114,0,"{'ok': True, 'value': 125, 'stdout': '125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4057881832122803}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 39, 48, 80, 44, 25, 32], [19, 35, 73, 75, 54, 9, 9], [52, 24, 91, 57, 34, 91, 92], [5, 71, 41, 2, 60, 8, 2], [45, 48, 7, 33, 17, 34, 13], [35, 34, 42, 86, 49, 57, 19], [43, 30, 19, 84, 76, 67, 39]]"
157,ilp_assign,16,63,10,0,117,0,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39264678955078125}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 45, 42, 48, 4, 46, 31], [9, 13, 28, 10, 41, 3, 14], [11, 36, 46, 2, 14, 5, 10], [35, 1, 13, 26, 41, 48, 46], [36, 43, 47, 47, 31, 45, 40], [1, 46, 30, 34, 26, 18, 2], [29, 46, 47, 12, 32, 13, 5]]"
158,add,16,12960286218828775,12960286218828775,1,12960286218828775,1,"{'ok': True, 'value': 12960286218828775, 'stdout': '12960286218828775\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08142662048339844}",1,Compute: 5743620449442913 + 7216665769385862
159,add,2,127,127,1,127,1,"{'ok': True, 'value': 127, 'stdout': '127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08343243598937988}",1,Compute: 91 + 36
160,ilp_assign,4,13,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_aeeecu6n/main.py"", line 29, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_aeeecu6n/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11203503608703613}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 8, 6, 7], [4, 7, 1, 10], [1, 7, 2, 5], [4, 12, 6, 3]]"
161,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08712387084960938}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 10, 8, 5]"
162,ilp_prod,2,18,36,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_wyeg8u4j/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1688525676727295}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[1, 1], [3, 3]]
capacity = [9, 10]
upper_bounds = [3, 3]"
163,ilp_partition,16,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08569073677062988}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 28, 44, 23, 6, 1, 41, 31, 45, 48, 2, 16, 5, 42, 19, 44]"
164,lcs,16,10,8,0,3,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09387516975402832}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbddabbabdddcba""
T = ""dbdbacddddcbacbcc"""
165,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09211993217468262}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [27, 21, 46, 19, 42, 21, 37, 36, 8, 44, 16, 13, 26, 27, 10, 39]"
166,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09932994842529297}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcd""
T = ""cca"""
167,ilp_prod,16,141,165,0,108,0,"{'ok': True, 'value': 155, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1f62f76d3b03493c9fb2533e4c6823f1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1f62f76d3b03493c9fb2533e4c6823f1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 696 (6)\n1  Obj 156\nOptimal - objective value 156\nOptimal objective 156 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n155.99999982\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16350793838500977}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 15, 6, 36, 42, 42]
consumption (rows=resources) = [[14, 16, 5, 14, 3, 6], [6, 11, 6, 14, 12, 14], [14, 10, 7, 13, 14, 14], [8, 15, 3, 1, 16, 2]]
capacity = [52, 53, 52, 62]
upper_bounds = [3, 3, 7, 3, 3, 3]"
168,lcs,8,4,4,1,6,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1008918285369873}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaccbdb""
T = ""bbdbdbaa"""
169,lcs,32,19,10,0,24,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0808417797088623}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbcccdbcbdabbbccadbccdbbaadacca""
T = ""dddbdcbdcccacbacbdaabbdbbadbbdb"""
170,rod,16,624,50,0,502,0,"{'ok': True, 'value': 624, 'stdout': '624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11067891120910645}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [39, 39, 16, 30, 41, 27, 36, 21, 36, 15, 3, 2, 18, 40, 26, 45]"
171,add,4,15775,8284,0,15775,1,"{'ok': True, 'value': 15775, 'stdout': '15775\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09790968894958496}",1,Compute: 7491 + 8284
172,ilp_prod,16,192,144,0,240,0,"{'ok': True, 'value': 200, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e257c327426841b58c9e9f8af3cd83fe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e257c327426841b58c9e9f8af3cd83fe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 213.24444 (6)\n1  Obj 200\nOptimal - objective value 200\nOptimal objective 200 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n200.00000016\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1720132827758789}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 48, 12, 48, 17, 33]
consumption (rows=resources) = [[14, 10, 12, 6, 9, 10], [13, 12, 8, 8, 7, 14], [5, 13, 10, 7, 6, 2], [11, 11, 2, 10, 7, 16]]
capacity = [40, 34, 42, 45]
upper_bounds = [3, 3, 3, 4, 4, 3]"
173,ilp_prod,8,69,112,0,0,0,"{'ok': True, 'value': 78, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a510860a55e14e389b99d719b273d076-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a510860a55e14e389b99d719b273d076-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 90.8 (4)\n2  Obj 78.2\nOptimal - objective value 78.2\nOptimal objective 78.2 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n78.19999977\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1817610263824463}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 16, 15, 23]
consumption (rows=resources) = [[4, 5, 8, 7], [1, 7, 5, 8], [3, 7, 7, 7], [5, 8, 6, 5]]
capacity = [29, 21, 27, 17]
upper_bounds = [3, 3, 3, 3]"
174,sub,8,42812889,42812889,1,42812889,1,"{'ok': True, 'value': 42812889, 'stdout': '42812889\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09566783905029297}",1,Compute: 86571778 - 43758889
175,mul,4,33600560,33530,0,33533320,0,"{'ok': True, 'value': 33600560, 'stdout': '33600560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09723377227783203}",1,Compute: 4060 * 8276
176,ilp_assign,8,53,45,0,74,0,"{'ok': True, 'value': 53, 'stdout': '53\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.401411771774292}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 23, 7, 17, 10, 24, 3], [4, 17, 14, 22, 18, 12, 6], [5, 4, 10, 24, 24, 10, 6], [16, 10, 8, 18, 19, 23, 8], [3, 16, 7, 12, 14, 9, 11], [4, 5, 15, 21, 12, 17, 5], [3, 15, 13, 16, 11, 20, 10]]"
177,ilp_partition,32,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08894610404968262}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [87, 40, 32, 9, 61, 64, 2, 93, 38, 21, 3, 64, 69, 14, 20, 52, 39, 78, 30, 90, 62, 48, 73, 52]"
178,ilp_partition,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08696103096008301}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 3, 8, 5]"
179,mul,4,23622644,57419,0,23453644,0,"{'ok': True, 'value': 23622644, 'stdout': '23622644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09957480430603027}",1,Compute: 5717 * 4132
180,ilp_prod,2,21,35,0,21,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__8i_nx_6/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1603531837463379}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7]
consumption (rows=resources) = [[1, 2], [3, 2]]
capacity = [9, 6]
upper_bounds = [3, 3]"
181,ilp_partition,8,0,1,0,26,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08635163307189941}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 13, 10, 20, 23, 7, 14, 1]"
182,ilp_assign,32,71,11,0,128,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20967936515808105}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[85, 7, 26, 35, 53, 34, 94], [5, 43, 29, 59, 12, 81, 58], [16, 71, 43, 74, 27, 19, 9], [44, 6, 36, 76, 5, 89, 9], [1, 81, 26, 26, 14, 17, 93], [11, 79, 8, 74, 73, 61, 2], [69, 14, 54, 60, 57, 11, 52]]"
183,lcs,32,21,26,0,26,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09369993209838867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbabacabbddcadaddaabddcbdcbaadac""
T = ""bbdbbadbbbdcaadadcccabcacabdaaaca"""
184,rod,2,6,2,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_d1ijfoex/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_d1ijfoex/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10350751876831055}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 1]"
185,sub,32,12835601013190631365395630825916,12835561013285621365392730728311,0,128356010131906313653956308265916,0,"{'ok': True, 'value': 12835601013190631365395630825916, 'stdout': '12835601013190631365395630825916\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08655023574829102}",1,Compute: 88224498181327731976047656786206 - 75388897168137100610652025960290
186,rod,2,8,8,1,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_exl3ibey/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_exl3ibey/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09012389183044434}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
187,knap,16,364,154,0,1048,0,"{'ok': True, 'value': 364, 'stdout': '364\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08636093139648438}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [20, 26, 7, 25, 27, 22, 14, 16, 11, 29, 25, 21, 29, 10, 7, 19]
V = [58, 15, 18, 39, 32, 44, 53, 43, 9, 47, 64, 2, 15, 19, 18, 33]
C = 154"
188,ilp_assign,32,91,-44,0,117,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4282369613647461}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[86, 5, 31, 15, 15, 12, 18], [12, 25, 70, 40, 80, 73, 86], [64, 74, 23, 79, 76, 35, 24], [26, 3, 90, 43, 90, 73, 86], [26, 60, 46, 9, 61, 59, 47], [5, 68, 25, 10, 28, 95, 62], [95, 21, 15, 91, 58, 66, 4]]"
189,ilp_partition,4,2,1,0,6,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09008264541625977}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 7, 7, 12]"
190,ilp_partition,16,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09085774421691895}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 40, 38, 27, 46, 2, 21, 12, 26, 47, 45, 34, 46, 20, 3, 45]"
191,knap,2,8,10,0,11,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09102392196655273}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 3]
V = [8, 1, 7]
C = 5"
192,ilp_partition,32,1,1,1,10,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09279561042785645}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 36, 38, 89, 65, 5, 60, 23, 48, 12, 96, 25, 78, 65, 21, 47, 16, 64, 87, 63, 13, 65, 83, 9]"
193,add,8,56952892,57052892,0,57052892,0,"{'ok': True, 'value': 56952892, 'stdout': '56952892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09004902839660645}",1,Compute: 27928755 + 29024137
194,add,32,143460581671707206919222194465984,143460581671707207919222194465984,0,143460581671707207509222194465984,0,"{'ok': True, 'value': 143460581671707206919222194465984, 'stdout': '143460581671707206919222194465984\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08997011184692383}",1,Compute: 70360507656466400176425046319352 + 73100074015240806742797148146632
195,add,4,14715,14715,1,14715,1,"{'ok': True, 'value': 14715, 'stdout': '14715\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09294867515563965}",1,Compute: 4807 + 9908
196,sub,32,15209145105557164237839535479698,151093253055571753378397354806898,0,152091451055571642378395354800798,0,"{'ok': True, 'value': 15209145105557164237839535479698, 'stdout': '15209145105557164237839535479698\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09384679794311523}",1,Compute: 96299465898166092554739735652451 - 81090320792608928316900200172753
197,ilp_partition,2,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08918619155883789}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 4, 5]"
198,lcs,16,9,7,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08467507362365723}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbacdacbdbdadbc""
T = ""ccadacddcbbcddcbb"""
199,ilp_prod,16,168,105,0,100,0,"{'ok': True, 'value': 171, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8d3a8652cba844aeaae96e167bb4dd43-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8d3a8652cba844aeaae96e167bb4dd43-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 115.75 (6)\n5  Obj 171.96667\nOptimal - objective value 171.96667\nOptimal objective 171.9666667 - 5 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n171.96666530000002\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19294190406799316}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 7, 9, 34, 41]
consumption (rows=resources) = [[4, 3, 7, 13, 11, 9], [2, 16, 11, 4, 11, 9], [1, 9, 2, 2, 13, 12], [1, 16, 12, 6, 8, 6]]
capacity = [64, 42, 49, 60]
upper_bounds = [10, 3, 3, 4, 3, 4]"
200,ilp_assign,8,33,,0,36,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4451174736022949}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 13, 13, 10, 6, 13, 1], [22, 11, 21, 14, 17, 7, 17], [12, 20, 8, 22, 2, 14, 16], [17, 21, 2, 7, 11, 15, 24], [6, 19, 7, 7, 2, 7, 4], [10, 11, 11, 24, 10, 5, 6], [19, 24, 14, 9, 2, 13, 4]]"
201,rod,16,256,50,0,100,0,"{'ok': True, 'value': 256, 'stdout': '256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10467815399169922}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [11, 32, 38, 34, 30, 35, 45, 34, 12, 1, 46, 7, 2, 31, 10, 14]"
202,ilp_assign,8,47,17,0,76,0,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4166526794433594}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 16, 6, 13, 8, 14, 13], [5, 18, 21, 15, 20, 23, 12], [2, 21, 20, 17, 8, 7, 17], [13, 16, 8, 19, 24, 3, 18], [4, 5, 6, 10, 1, 11, 4], [5, 20, 21, 17, 20, 6, 18], [14, 9, 1, 12, 5, 2, 17]]"
203,sub,4,2356,2356,1,2356,1,"{'ok': True, 'value': 2356, 'stdout': '2356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1123044490814209}",1,Compute: 8274 - 5918
204,ilp_assign,16,96,0,0,105,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39899373054504395}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 44, 37, 46, 33, 25, 11], [25, 30, 3, 17, 30, 24, 41], [20, 25, 40, 28, 34, 5, 27], [31, 48, 20, 16, 2, 27, 19], [39, 29, 37, 38, 31, 25, 44], [22, 47, 23, 39, 9, 23, 20], [37, 30, 10, 34, 14, 20, 6]]"
205,ilp_partition,16,0,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ugkesinf/main.py"", line 10, in <module>\n    res = partition(weights)\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11557197570800781}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 48, 47, 47, 14, 20, 1, 8, 24, 34, 15, 37, 2, 25, 3, 9]"
206,rod,16,384,46,0,46,0,"{'ok': True, 'value': 384, 'stdout': '384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13671612739562988}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [24, 38, 6, 21, 42, 25, 8, 33, 21, 4, 5, 4, 19, 20, 46, 3]"
207,ilp_prod,2,18,42,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_7akmiubg/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1769416332244873}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[1, 3], [2, 2]]
capacity = [9, 6]
upper_bounds = [3, 3]"
208,ilp_assign,8,35,0,0,68,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3806478977203369}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 21, 21, 23, 21, 10, 1], [3, 15, 9, 21, 13, 7, 6], [24, 15, 1, 6, 1, 6, 19], [22, 2, 3, 12, 2, 22, 8], [8, 16, 9, 10, 19, 12, 24], [21, 18, 11, 21, 23, 16, 20], [17, 2, 8, 5, 24, 7, 8]]"
209,sub,2,44,44,1,44,1,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.083648681640625}",1,Compute: 82 - 38
210,ilp_assign,16,74,11,0,20,0,"{'ok': True, 'value': 74, 'stdout': '74\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42569518089294434}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 47, 1, 24, 46, 8, 25], [23, 39, 32, 31, 46, 24, 36], [10, 11, 2, 26, 38, 16, 7], [9, 13, 20, 18, 30, 39, 47], [17, 15, 20, 4, 34, 10, 15], [39, 23, 22, 43, 37, 13, 31], [8, 41, 32, 17, 13, 26, 27]]"
211,ilp_partition,8,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08944153785705566}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 12, 19, 9, 5, 7, 17, 6]"
212,lcs,32,18,10,0,20,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09386563301086426}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbcccadadbcbbbbabccaadccaadabad""
T = ""bbddcdddabcaaddcdcbcbdadabbaddccd"""
213,sub,4,2676,2676,1,2676,1,"{'ok': True, 'value': 2676, 'stdout': '2676\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08559632301330566}",1,Compute: 4534 - 1858
214,knap,2,9,5,0,5,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09221029281616211}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 1]
V = [1, 4, 5]
C = 2"
215,add,4,7088,7088,1,7088,1,"{'ok': True, 'value': 7088, 'stdout': '7088\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10930919647216797}",1,Compute: 5424 + 1664
216,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11578512191772461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcac""
T = ""ddad"""
217,add,2,120,120,1,120,1,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10096073150634766}",1,Compute: 55 + 65
218,sub,4,5779,5779,1,5780,0,"{'ok': True, 'value': 5779, 'stdout': '5779\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08505368232727051}",1,Compute: 9118 - 3339
219,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09615063667297363}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcd""
T = ""baca"""
220,mul,2,4620,4620,1,4620,1,"{'ok': True, 'value': 4620, 'stdout': '4620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10528302192687988}",1,Compute: 60 * 77
221,mul,4,49533120,99600,0,48769920,0,"{'ok': True, 'value': 49533120, 'stdout': '49533120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0840766429901123}",1,Compute: 6720 * 7371
222,add,4,12440,12440,1,12437,0,"{'ok': True, 'value': 12440, 'stdout': '12440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09354853630065918}",1,Compute: 6797 + 5643
223,ilp_prod,2,16,The solution to this problem would be the maximum profit that can be achieved while satisfying all the constraints.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_hyif1fp2/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15578341484069824}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[3, 1], [3, 3]]
capacity = [7, 6]
upper_bounds = [3, 3]"
224,mul,4,7887990,8075930,0,8005110,0,"{'ok': True, 'value': 7887990, 'stdout': '7887990\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08608150482177734}",1,Compute: 4346 * 1815
225,mul,4,34542158,140,0,34105658,0,"{'ok': True, 'value': 34542158, 'stdout': '34542158\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08948731422424316}",1,Compute: 4214 * 8197
226,knap,4,14,13,0,13,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09466123580932617}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 6, 4, 3]
V = [8, 1, 6, 6]
C = 7"
227,ilp_prod,2,16,20,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_2d4kmk69/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, upBound=upper_bounds)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16219758987426758}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4]
consumption (rows=resources) = [[2, 3], [3, 2]]
capacity = [8, 6]
upper_bounds = [3, 3]"
228,sub,16,2119438012622778,2119437996622778,0,2119437996372778,0,"{'ok': True, 'value': 2119438012622778, 'stdout': '2119438012622778\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09700894355773926}",1,Compute: 4047963086170812 - 1928525073548034
229,mul,2,4270,1037,0,4270,1,"{'ok': True, 'value': 4270, 'stdout': '4270\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09467363357543945}",1,Compute: 61 * 70
230,ilp_prod,2,12,36,0,18,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_bs78pi17/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16413092613220215}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[2, 3], [3, 1]]
capacity = [6, 6]
upper_bounds = [3, 3]"
231,ilp_partition,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08912825584411621}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 4, 2]"
232,ilp_partition,4,0,4,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09411287307739258}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 10, 10, 7]"
233,ilp_partition,8,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08379101753234863}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 15, 20, 14, 22, 19, 23, 8]"
234,lcs,16,11,7,0,15,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09803247451782227}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddcacaaddabaada""
T = ""bdcdaabbbdbdbaad"""
235,lcs,32,20,10,0,16,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09615778923034668}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adaaadbdabcdcbcdaaadcbaadddccbba""
T = ""bbcacddbabdacdcbbadbbacbdcbabcbba"""
236,add,2,109,109,1,109,1,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10225343704223633}",1,Compute: 61 + 48
237,knap,32,1585,1663,0,1053,0,"{'ok': True, 'value': 1585, 'stdout': '1585\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09677362442016602}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [51, 49, 13, 15, 55, 12, 30, 19, 49, 28, 3, 35, 10, 18, 37, 35, 21, 5, 10, 49, 32, 9, 27, 50, 57, 3, 4, 49, 34, 28, 9, 14]
V = [66, 26, 119, 111, 84, 54, 98, 85, 9, 111, 2, 109, 3, 14, 3, 59, 74, 55, 5, 80, 29, 58, 109, 63, 78, 95, 127, 102, 93, 4, 8, 19]
C = 430"
238,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08760809898376465}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 4, 6]"
239,rod,16,148,46,0,142,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_me7nxtx9/main.py"", line 11, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_me7nxtx9/main.py"", line 6, in rod_cutting\n    dp[i] = max(dp[i], dp[i - j] + P[j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09254169464111328}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 3, 21, 37, 9, 48, 4, 20, 38, 17, 39, 47, 15, 42, 34, 21]"
240,mul,32,690690362341860718174526583432138090399470015953741350777287238,7332210966,0,70467844814259474394478942784259526665666333464964684667666,0,"{'ok': True, 'value': 690690362341860718174526583432138090399470015953741350777287238, 'stdout': '690690362341860718174526583432138090399470015953741350777287238\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08376359939575195}",1,Compute: 11210773322109667575301150627947 * 61609519923098856454524645302354
241,ilp_partition,4,1,0,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08456254005432129}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 12, 1]"
242,mul,2,9108,,0,9108,1,"{'ok': True, 'value': 9108, 'stdout': '9108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10132384300231934}",1,Compute: 92 * 99
243,rod,8,80,-1,0,46,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_j1tm6s5g/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_j1tm6s5g/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08193159103393555}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 18, 4, 17, 10, 3, 4, 18]"
244,sub,4,1320,1320,1,1320,1,"{'ok': True, 'value': 1320, 'stdout': '1320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08517599105834961}",1,Compute: 8725 - 7405
245,ilp_prod,16,144,105,0,150,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_l9d6ns9a/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_l9d6ns9a/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16774439811706543}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 32, 9, 48, 12, 24]
consumption (rows=resources) = [[2, 4, 10, 10, 9, 6], [7, 13, 16, 1, 9, 13], [4, 10, 12, 13, 10, 10], [3, 15, 8, 10, 16, 1]]
capacity = [47, 33, 39, 33]
upper_bounds = [4, 3, 3, 3, 3, 3]"
246,ilp_prod,16,178,168,0,159,0,"{'ok': True, 'value': 198, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/308ce3d25c2144ddb5b53f2804024c1c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/308ce3d25c2144ddb5b53f2804024c1c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 836.09253 (6)\n3  Obj 198.18077\nOptimal - objective value 198.18077\nOptimal objective 198.1807692 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n198.18076626\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15924787521362305}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [44, 25, 47, 29, 37, 22]
consumption (rows=resources) = [[16, 16, 15, 11, 10, 3], [4, 4, 3, 8, 14, 15], [3, 15, 1, 6, 5, 14], [11, 6, 11, 6, 8, 16]]
capacity = [57, 42, 38, 55]
upper_bounds = [3, 3, 3, 5, 3, 3]"
247,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08540034294128418}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 22, 12, 5, 14, 7, 7, 6]"
248,ilp_partition,32,0,15,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09877896308898926}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 35, 90, 50, 7, 21, 73, 96, 49, 36, 11, 73, 34, 10, 60, 22, 31, 62, 34, 63, 86, 82, 60, 15]"
249,ilp_prod,32,434,1057,0,1003,0,"{'ok': True, 'value': 470, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b2b88318b67a4b84b57e5708dd3cc0d2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b2b88318b67a4b84b57e5708dd3cc0d2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 2808.6127 (6)\n6  Obj 470.32314\nOptimal - objective value 470.32314\nOptimal objective 470.3231397 - 6 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n470.32313426\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16530489921569824}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [67, 66, 38, 73, 78, 81]
consumption (rows=resources) = [[20, 15, 8, 11, 9, 1], [11, 7, 6, 19, 30, 26], [1, 9, 15, 14, 31, 28], [28, 17, 16, 2, 26, 25]]
capacity = [82, 107, 78, 95]
upper_bounds = [3, 5, 5, 5, 3, 3]"
250,ilp_partition,32,1,1,1,406,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09192085266113281}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [76, 59, 47, 4, 12, 9, 58, 84, 36, 26, 94, 68, 62, 79, 71, 63, 65, 83, 38, 67, 93, 27, 56, 10]"
251,add,4,15314,15314,1,15314,1,"{'ok': True, 'value': 15314, 'stdout': '15314\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08266210556030273}",1,Compute: 6833 + 8481
252,add,8,75005548,74975548,0,75005548,1,"{'ok': True, 'value': 75005548, 'stdout': '75005548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08864545822143555}",1,Compute: 61745150 + 13260398
253,ilp_prod,2,42,21,0,21,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xetqmpoj/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15209507942199707}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[1, 1], [1, 1]]
capacity = [6, 8]
upper_bounds = [6, 6]"
254,knap,16,415,103,0,104,0,"{'ok': True, 'value': 415, 'stdout': '415\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08494138717651367}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 7, 7, 6, 6, 1, 12, 17, 30, 10, 20, 19, 15, 21, 18, 9]
V = [64, 22, 43, 26, 31, 17, 51, 61, 49, 8, 24, 3, 37, 13, 7, 55]
C = 105"
255,add,16,10261087934064473,10261087934064473,1,10261087934064473,1,"{'ok': True, 'value': 10261087934064473, 'stdout': '10261087934064473\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0919346809387207}",1,Compute: 2468918630842112 + 7792169303222361
256,ilp_partition,32,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09592318534851074}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [80, 37, 78, 32, 85, 61, 90, 78, 78, 21, 29, 78, 79, 47, 72, 24, 12, 95, 42, 71, 69, 44, 50, 54]"
257,rod,32,1136,83,0,109,0,"{'ok': True, 'value': 1136, 'stdout': '1136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08589792251586914}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [20, 71, 18, 78, 77, 44, 87, 37, 71, 50, 65, 62, 41, 58, 70, 74, 58, 23, 58, 54, 76, 14, 53, 80, 18, 78, 82, 3, 26, 83, 27, 19]"
258,add,4,16673,16673,1,16673,1,"{'ok': True, 'value': 16673, 'stdout': '16673\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09424567222595215}",1,Compute: 7950 + 8723
259,add,4,3734,3734,1,3734,1,"{'ok': True, 'value': 3734, 'stdout': '3734\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08581185340881348}",1,Compute: 1580 + 2154
260,rod,32,992,1055,0,287,0,"{'ok': True, 'value': 992, 'stdout': '992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09546995162963867}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [31, 16, 2, 77, 61, 64, 30, 31, 79, 17, 90, 73, 85, 25, 85, 37, 91, 93, 90, 72, 7, 50, 7, 93, 71, 84, 68, 83, 59, 90, 53, 31]"
261,mul,16,15282014865865836765380674788832,1899997672794508,0,1539996055279206084524032365588416,0,"{'ok': True, 'value': 15282014865865836765380674788832, 'stdout': '15282014865865836765380674788832\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08695197105407715}",1,Compute: 8043175570520104 * 1899997672794508
262,knap,16,379,1445,0,1099,0,"{'ok': True, 'value': 379, 'stdout': '379\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08534407615661621}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 27, 12, 30, 14, 17, 27, 28, 32, 4, 22, 32, 22, 4, 21, 32]
V = [47, 57, 9, 12, 37, 38, 56, 44, 59, 15, 45, 58, 53, 5, 51, 45]
C = 177"
263,ilp_partition,32,1,1,1,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_aawjlzv4/main.py"", line 10, in <module>\n    res = partition(weights)\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0956265926361084}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [74, 59, 59, 49, 46, 85, 80, 50, 12, 25, 69, 8, 41, 11, 13, 42, 82, 46, 33, 23, 9, 87, 83, 47]"
264,sub,32,25640359478087914131698979732908,25640359478087914131700980134908,0,25639359478087914131700980032908,0,"{'ok': True, 'value': 25640359478087914131698979732908, 'stdout': '25640359478087914131698979732908\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09944367408752441}",1,Compute: 42465496285487950334261175102524 - 16825136807400036202562195369616
265,knap,8,78,22,0,60,0,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08876276016235352}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 15, 3, 10, 5, 7, 16, 12]
V = [10, 10, 28, 17, 14, 8, 11, 9]
C = 36"
266,rod,16,176,46,0,84,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09010744094848633}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [11, 7, 24, 23, 19, 11, 30, 43, 28, 13, 42, 48, 16, 6, 8, 27]"
267,mul{'ok': True, 'value': 1269475949903148881558870239847752346182005248790343836018946775, 'stdout': '1269475949903148881558870239847752346182005248790343836018946775\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09145689010620117}",1,Compute: 62898089589566050470794553566435 * 20183060537879006051019996631165
268,knap,8,113,147,0,103,0,"{'ok': True, 'value': 113, 'stdout': '113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10165548324584961}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 10, 16, 14, 11, 13, 2, 4]
V = [4, 22, 11, 18, 29, 20, 27, 31]
C = 39"
269,lcs,2,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10061120986938477}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""cdd"""
270,ilp_prod,8,85,101,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_u1z2g02x/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_u1z2g02x/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16271328926086426}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7, 17, 16]
consumption (rows=resources) = [[2, 6, 4, 2], [6, 3, 4, 4], [6, 8, 6, 8], [5, 5, 1, 3]]
capacity = [24, 22, 32, 19]
upper_bounds = [3, 3, 5, 4]"
271,ilp_prod,4,36,39,0,30,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_q4rt8_1m/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, lowBound=0) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17162799835205078}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 3, 9]
consumption (rows=resources) = [[4, 4, 1], [1, 4, 2], [2, 2, 2]]
capacity = [10, 11, 8]
upper_bounds = [3, 3, 4]"
272,add,16,13183771212111376,13183771212111376,1,13183771212111376,1,"{'ok': True, 'value': 13183771212111376, 'stdout': '13183771212111376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08470869064331055}",1,Compute: 8490422567957501 + 4693348644153875
273,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08369040489196777}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 17, 20, 15, 6, 19, 13, 8]"
274,mul,32,1241009425288246666318032560111876456976942201975329430884195140,19943891583899710455085066900490,0,12425654463474905996389880081957219689810,0,"{'ok': True, 'value': 1241009425288246666318032560111876456976942201975329430884195140, 'stdout': '1241009425288246666318032560111876456976942201975329430884195140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09210872650146484}",1,Compute: 62225038682525119924449400409786 * 19943891583899710455085066900490
275,knap,2,5,9,0,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09288644790649414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 5]
V = [5, 1, 3]
C = 5"
276,ilp_partition,2,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08154678344726562}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 4, 6]"
277,sub,8,10651389,46128048,0,10651389,1,"{'ok': True, 'value': 10651389, 'stdout': '10651389\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08162784576416016}",1,Compute: 56779437 - 46128048
278,rod,4,24,6,0,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_jr4tide_/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_jr4tide_/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08400321006774902}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 1, 2, 4]"
279,mul,16,27521161068747982140689840388824,6127058951892290,0,265845599156983174586362856352549955296,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_qvjxy_cg/main.py"", line 3, in <module>\n    res = math.pow(3117850743493954, 8826965539058156)\nOverflowError: math range error\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0800631046295166}",0,Compute: 3117850743493954 * 8826965539058156
280,rod,32,1072,-1,0,1055,0,"{'ok': True, 'value': 1072, 'stdout': '1072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0845499038696289}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [32, 67, 77, 1, 87, 16, 84, 8, 21, 2, 63, 77, 23, 18, 38, 39, 25, 45, 65, 13, 80, 45, 6, 44, 78, 12, 3, 43, 38, 33, 62, 23]"
281,knap,2,10,11,0,14,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08038878440856934}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 1]
V = [4, 2, 10]
C = 5"
282,ilp_prod,8,121,138,0,165,0,"{'ok': True, 'value': 121, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7eba085bda144fa08623a31c82e408e1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7eba085bda144fa08623a31c82e408e1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 74.392857 (4)\n1  Obj 121\nOptimal - objective value 121\nOptimal objective 121 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n121.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17009520530700684}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 23, 6, 8]
consumption (rows=resources) = [[8, 4, 2, 7], [5, 1, 5, 1], [1, 3, 6, 3], [7, 4, 4, 1]]
capacity = [22, 30, 30, 26]
upper_bounds = [3, 5, 5, 3]"
283,mul,8,1439887157673510,1448009865412010,0,145638155952010,0,"{'ok': True, 'value': 1439887157673510, 'stdout': '1439887157673510\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08805155754089355}",1,Compute: 21933093 * 65649070
284,ilp_partition,16,0,1,0,80,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0899810791015625}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [42, 40, 17, 17, 28, 29, 29, 27, 27, 46, 27, 17, 7, 10, 35, 34]"
285,mul,8,1718371373696110,1705072907753665,0,1690888008423610,0,"{'ok': True, 'value': 1718371373696110, 'stdout': '1718371373696110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09365725517272949}",1,Compute: 64918651 * 26469610
286,rod,32,2944,-1,0,920,0,"{'ok': True, 'value': 2944, 'stdout': '2944\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08463239669799805}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [92, 12, 94, 45, 79, 41, 32, 78, 25, 71, 59, 11, 14, 8, 22, 72, 71, 41, 67, 62, 56, 60, 92, 85, 19, 9, 39, 93, 80, 36, 92, 57]"
287,ilp_assign,4,14,8,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_0vifof6m/main.py"", line 33, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_0vifof6m/main.py"", line 8, in hungarian_algorithm\n    cost_matrix[:,j] = [x - np.min(cost_matrix[:,j]) for x in cost_matrix[:,j]]\nTypeError: list indices must be integers or slices, not tuple\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22169756889343262}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 12, 10, 8], [12, 12, 2, 8], [9, 6, 6, 2], [11, 1, 4, 4]]"
288,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08919167518615723}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""dab"""
289,add,4,8759,8759,1,8759,1,"{'ok': True, 'value': 8759, 'stdout': '8759\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09496235847473145}",1,Compute: 5080 + 3679
290,knap,4,18,20,0,27,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10648465156555176}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 7, 2, 7]
V = [12, 16, 2, 1]
C = 12"
291,ilp_prod,8,92,103,0,108,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_g64mx3n_/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\n  File ""/tmp/cot_exec_g64mx3n_/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nTypeError: LpVariable.__init__() got an unexpected keyword argument \'upper_bound\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16149187088012695}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 23, 12, 20]
consumption (rows=resources) = [[4, 7, 2, 7], [1, 1, 2, 6], [1, 5, 5, 1], [1, 1, 1, 3]]
capacity = [21, 31, 18, 20]
upper_bounds = [5, 3, 3, 3]"
292,sub,4,3230,3230,1,3230,1,"{'ok': True, 'value': 3230, 'stdout': '3230\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08524489402770996}",1,Compute: 7801 - 4571
293,ilp_partition,2,2,1,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08388805389404297}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 6, 3]"
294,sub,8,25562352,25562352,1,25562352,1,"{'ok': True, 'value': 25562352, 'stdout': '25562352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09401464462280273}",1,Compute: 56763597 - 31201245
295,ilp_prod,2,12,The maximum profit that can be achieved.,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_l74hkz_4/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None, LpInteger)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17411303520202637}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[1, 2], [3, 3]]
capacity = [6, 7]
upper_bounds = [3, 3]"
296,sub,32,33377053252336174684687828817262,33376953252336174684687828817262,0,33376953252336174684687828817262,0,"{'ok': True, 'value': 33377053252336174684687828817262, 'stdout': '33377053252336174684687828817262\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09903120994567871}",1,Compute: 91094381014671506109280156001779 - 57717327762335331424592327184517
297,ilp_partition,16,1,1,1,6,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08883166313171387}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 9, 45, 5, 29, 24, 14, 40, 11, 45, 46, 44, 18, 6, 42, 44]"
298,ilp_prod,32,285,365,0,1032,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_mdbavjs_/main.py"", line 10, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_mdbavjs_/main.py"", line 10, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16838669776916504}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [74, 34, 9, 56, 91, 95]
consumption (rows=resources) = [[4, 9, 19, 31, 1, 20], [5, 8, 16, 32, 4, 4], [25, 13, 21, 27, 32, 25], [8, 29, 10, 7, 2, 18]]
capacity = [67, 126, 76, 109]
upper_bounds = [3, 3, 3, 3, 3, 3]"
299,lcs,16,9,7,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09305238723754883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbabddbabcbcacc""
T = ""babcbdcaaddabacd"""
300,ilp_prod,4,66,110,0,66,1,"{'ok': True, 'value': 68, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/dce0c6cf46d74672a1ed4192bf8f7f0d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/dce0c6cf46d74672a1ed4192bf8f7f0d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (0) rows, 3 (0) columns and 9 (0) elements\n0  Obj -0 Dual inf 26 (3)\n1  Obj 68.5\nOptimal - objective value 68.5\nOptimal objective 68.5 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n68.5\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15842890739440918}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 11, 5]
consumption (rows=resources) = [[1, 2, 1], [3, 1, 2], [4, 2, 4]]
capacity = [16, 10, 13]
upper_bounds = [3, 6, 3]"
301,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08328628540039062}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 4, 1]"
302,mul,2,8160,8320,0,8256,0,"{'ok': True, 'value': 8160, 'stdout': '8160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08066892623901367}",1,Compute: 96 * 85
303,ilp_prod,2,32,28,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_b_c4tac5/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16295623779296875}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4]
consumption (rows=resources) = [[1, 3], [2, 1]]
capacity = [10, 9]
upper_bounds = [4, 3]"
304,rod,4,16,15,0,19,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.094879150390625}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 8, 12, 11]"
305,ilp_partition,4,5,1,0,8,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0860588550567627}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 12, 1, 4]"
306,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11499714851379395}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdb""
T = ""cbca"""
307,knap,16,428,136,0,1085,0,"{'ok': True, 'value': 428, 'stdout': '428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09506702423095703}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 10, 14, 20, 5, 13, 2, 29, 25, 28, 31, 14, 18, 5, 23, 32]
V = [55, 43, 3, 5, 15, 61, 57, 26, 58, 1, 33, 32, 6, 30, 41, 36]
C = 136"
308,mul,32,4096170051259187385677995529522926867882562209162868551920947552,7,0,41328694435807958996549545394453979649534464,0,"{'ok': True, 'value': 4096170051259187385677995529522926867882562209162868551920947552, 'stdout': '4096170051259187385677995529522926867882562209162868551920947552\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08464813232421875}",1,Compute: 53676834235894005617380545717872 * 76311692177256889676919912019066
309,knap,2,9,7,0,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09625077247619629}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 5]
V = [7, 2, 2]
C = 4"
310,knap,16,460,104,0,650,0,"{'ok': True, 'value': 460, 'stdout': '460\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09539532661437988}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 6, 4, 1, 9, 15, 1, 9, 19, 12, 11, 32, 3, 32, 20, 16]
V = [46, 16, 27, 29, 20, 20, 36, 62, 40, 58, 38, 25, 44, 27, 18, 60]
C = 104"
311,mul,8,997893356876519,9977368755489,0,99783174031659,0,"{'ok': True, 'value': 997893356876519, 'stdout': '997893356876519\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08583545684814453}",1,Compute: 99181561 * 10061279
312,ilp_assign,16,59,0,0,110,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.74505615234375}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 30, 7, 9, 32, 31, 29], [12, 14, 48, 12, 46, 8, 41], [46, 41, 23, 9, 37, 34, 12], [38, 42, 36, 29, 15, 15, 36], [27, 31, 41, 12, 3, 40, 34], [18, 19, 33, 7, 2, 32, 18], [28, 3, 46, 17, 31, 3, 35]]"
313,mul,4,54803359,551909,0,54535949,0,"{'ok': True, 'value': 54803359, 'stdout': '54803359\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0856163501739502}",1,Compute: 8551 * 6409
314,ilp_partition,16,0,1,0,30,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0926828384399414}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 33, 38, 19, 18, 7, 25, 34, 42, 23, 6, 47, 17, 24, 14, 38]"
315,knap,32,1530,106,0,2575,0,"{'ok': True, 'value': 1530, 'stdout': '1530\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08811044692993164}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 47, 23, 50, 23, 57, 44, 47, 47, 47, 47, 42, 20, 9, 1, 51, 4, 57, 30, 56, 50, 38, 51, 32, 42, 60, 3, 60, 39, 13, 2, 57]
V = [101, 82, 69, 6, 103, 31, 101, 92, 1, 114, 85, 21, 2, 70, 21, 125, 7, 57, 60, 93, 113, 14, 4, 13, 68, 97, 106, 104, 54, 79, 5, 57]
C = 590"
316,rod,4,11,10,0,10,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10300517082214355}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 2, 10, 6]"
317,lcs,4,0,2,0,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11436843872070312}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddc""
T = ""baaa"""
318,mul,2,7663,7633,0,7623,0,"{'ok': True, 'value': 7663, 'stdout': '7663\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08902406692504883}",1,Compute: 79 * 97
319,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08464741706848145}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 3, 1]"
320,mul,16,9708817804940804360665227229350,96945856662422082147,0,974076692786816788989646885,0,"{'ok': True, 'value': 9708817804940804360665227229350, 'stdout': '9708817804940804360665227229350\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09334564208984375}",1,Compute: 1918849392016890 * 5059708096598415
321,add,16,13135452036387774,13464431036347774,0,13135452036387774,1,"{'ok': True, 'value': 13135452036387774, 'stdout': '13135452036387774\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09354448318481445}",1,Compute: 9882776597345170 + 3252675439042604
322,lcs,32,20,26,0,16,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08466506004333496}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabaabccbabcbabcaaaaccddcbcabbbb""
T = ""cbbcabbbdccbabbbdadadaacdbaadbbdd"""
323,lcs,16,8,6,0,3,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09393596649169922}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabcddacadcbaacd""
T = ""ccaaadbdbdddbba"""
324,knap,8,91,120,0,110,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08874082565307617}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 14, 6, 2, 10, 16, 3, 12]
V = [7, 7, 32, 16, 3, 2, 6, 30]
C = 39"
325,ilp_assign,8,30,46,0,40,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.48270606994628906}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 22, 7, 3, 22, 2, 8], [24, 6, 12, 13, 21, 17, 20], [22, 12, 14, 7, 13, 24, 2], [20, 24, 8, 19, 1, 15, 24], [1, 14, 5, 7, 3, 19, 21], [5, 11, 9, 10, 15, 11, 17], [14, 16, 11, 9, 17, 10, 15]]"
326,mul,4,13783374,48,0,13710814,0,"{'ok': True, 'value': 13783374, 'stdout': '13783374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08134078979492188}",1,Compute: 3117 * 4422
327,ilp_partition,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08765935897827148}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 7, 4, 2]"
328,mul{'ok': True, 'value': 29757038943931996778487667695954, 'stdout': '29757038943931996778487667695954\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08702945709228516}",1,Compute: 3994301292830017 * 7449873397719762
329,rod,32,2080,1082,0,884,0,"{'ok': True, 'value': 2080, 'stdout': '2080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09759402275085449}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [65, 28, 48, 60, 29, 64, 10, 25, 48, 81, 47, 50, 57, 31, 67, 20, 66, 13, 87, 50, 55, 40, 79, 46, 57, 65, 71, 30, 35, 86, 47, 47]"
330,sub,4,2459,2459,1,2460,0,"{'ok': True, 'value': 2459, 'stdout': '2459\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09678339958190918}",1,Compute: 8247 - 5788
331,add,2,121,121,1,121,1,"{'ok': True, 'value': 121, 'stdout': '121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08037590980529785}",1,Compute: 84 + 37
332,rod,32,3040,-1,0,1010,0,"{'ok': True, 'value': 3040, 'stdout': '3040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09448647499084473}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [95, 29, 39, 70, 79, 66, 49, 24, 3, 61, 65, 74, 55, 12, 58, 21, 87, 69, 66, 19, 56, 53, 1, 69, 87, 87, 2, 37, 43, 41, 84, 95]"
333,mul{'ok': True, 'value': 2061422047450862697609900830171999678622444725249685568505219109, 'stdout': '2061422047450862697609900830171999678622444725249685568505219109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09056973457336426}",1,Compute: 27079324569947202745439517993837 * 76125312584001496205593676719257
334,ilp_assign,4,11,3,0,-1,0,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20484089851379395}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 5, 5, 4], [1, 8, 6, 9], [6, 2, 2, 5], [10, 7, 4, 12]]"
335,sub,8,46504399,46504399,1,46504399,1,"{'ok': True, 'value': 46504399, 'stdout': '46504399\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09166598320007324}",1,Compute: 83454345 - 36949946
336,add,8,163294569,163294569,1,163294569,1,"{'ok': True, 'value': 163294569, 'stdout': '163294569\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09855771064758301}",1,Compute: 79174739 + 84119830
337,add,8,130957985,130958085,0,130958005,0,"{'ok': True, 'value': 130957985, 'stdout': '130957985\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10095739364624023}",1,Compute: 95517870 + 35440115
338,knap,8,114,110,0,142,0,"{'ok': True, 'value': 114, 'stdout': '114\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10647726058959961}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 10, 14, 15, 7, 6, 1, 9]
V = [7, 25, 17, 13, 32, 31, 17, 26]
C = 32"
339,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0817861557006836}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdabdcc""
T = ""ddabcbbb"""
340,sub,2,39,39,1,39,1,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08625078201293945}",1,Compute: 85 - 46
341,sub,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08550858497619629}",1,Compute: 87 - 80
342,sub,16,2898307141365729,2898307141365729,1,2898307141365729,1,"{'ok': True, 'value': 2898307141365729, 'stdout': '2898307141365729\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09682273864746094}",1,Compute: 4192632314447824 - 1294325173082095
343,knap,4,18,22,0,22,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0946359634399414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 1, 5, 5]
V = [16, 2, 9, 2]
C = 9"
344,rod,32,2624,-1,0,320,0,"{'ok': True, 'value': 2624, 'stdout': '2624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10403275489807129}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [82, 27, 22, 60, 32, 41, 54, 7, 1, 30, 53, 61, 32, 44, 84, 32, 43, 92, 34, 73, 39, 49, 40, 20, 15, 72, 90, 81, 55, 3, 51, 40]"
345,add,32,105586935961077934799337866132976,23892560811175684062316475317638,0,105586935961077934800337866133076,0,"{'ok': True, 'value': 105586935961077934799337866132976, 'stdout': '105586935961077934799337866132976\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08088541030883789}",1,Compute: 81694375149902250737021390815338 + 23892560811175684062316475317638
346,ilp_assign,32,131,493,0,110,0,"{'ok': True, 'value': 131, 'stdout': '131\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39276933670043945}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[60, 25, 2, 30, 83, 24, 2], [49, 21, 7, 72, 46, 56, 9], [47, 55, 86, 2, 53, 53, 45], [42, 43, 93, 55, 48, 46, 56], [89, 44, 16, 87, 65, 72, 70], [16, 79, 93, 70, 54, 82, 11], [31, 16, 40, 10, 33, 36, 25]]"
347,knap,16,363,141,0,840,0,"{'ok': True, 'value': 363, 'stdout': '363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1127629280090332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 14, 23, 15, 32, 4, 27, 30, 3, 21, 13, 21, 11, 2, 21, 32]
V = [10, 52, 40, 23, 29, 3, 61, 15, 27, 58, 38, 39, 38, 1, 45, 35]
C = 141"
348,knap,8,82,110,0,62,0,"{'ok': True, 'value': 82, 'stdout': '82\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08966588973999023}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 13, 14, 3, 7, 7, 7, 16]
V = [6, 13, 7, 9, 13, 28, 26, 17]
C = 35"
349,ilp_partition,16,1,1,1,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_7dqvwyry/main.py"", line 10, in <module>\n    res = partition(weights)\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08023786544799805}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 23, 36, 35, 18, 27, 7, 45, 32, 45, 10, 28, 39, 1, 23, 12]"
350,ilp_assign,16,97,15,0,110,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40897369384765625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[30, 12, 38, 27, 19, 13, 36], [43, 18, 23, 41, 39, 21, 25], [39, 39, 45, 46, 38, 27, 47], [8, 25, 14, 3, 45, 14, 32], [43, 48, 22, 33, 15, 36, 48], [16, 32, 46, 48, 31, 16, 8], [9, 10, 47, 18, 21, 9, 3]]"
351,knap,16,403,1043,0,1099,0,"{'ok': True, 'value': 403, 'stdout': '403\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08665728569030762}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 32, 8, 5, 27, 13, 12, 14, 18, 24, 29, 29, 27, 14, 29, 22]
V = [13, 28, 62, 40, 14, 3, 5, 10, 30, 55, 42, 13, 12, 62, 38, 64]
C = 164"
352,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07890987396240234}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""da"""
353,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07871770858764648}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""b"""
354,ilp_prod,32,192,195,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_qjyh4dkk/main.py"", line 10, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_qjyh4dkk/main.py"", line 10, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.236846923828125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 5, 48, 51, 73, 22]
consumption (rows=resources) = [[14, 26, 13, 1, 7, 7], [13, 8, 4, 27, 17, 9], [9, 9, 15, 23, 31, 29], [23, 29, 24, 9, 19, 16]]
capacity = [111, 128, 65, 124]
upper_bounds = [5, 4, 4, 3, 3, 3]"
355,add,2,73,73,1,73,1,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08529329299926758}",1,Compute: 46 + 27
356,ilp_assign,4,14,2,0,0,0,"{'ok': True, 'value': 37, 'stdout': '37\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20334291458129883}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 5, 10, 3], [8, 2, 2, 8], [7, 10, 7, 9], [2, 5, 8, 4]]"
357,sub,8,7008232,,0,7008232,1,"{'ok': True, 'value': 7008232, 'stdout': '7008232\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09646129608154297}",1,Compute: 92336634 - 85328402
358,rod,8,64,22,0,24,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0864565372467041}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [8, 15, 21, 20, 17, 18, 12, 6]"
359,sub,32,46670814042830996955558628916052,46670763742831001056158628912453,0,46670956827751000000000000000052,0,"{'ok': True, 'value': 46670814042830996955558628916052, 'stdout': '46670814042830996955558628916052\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09846782684326172}",1,Compute: 93915417137184494811403299845366 - 47244603094353497855844670929314
360,add,4,11307,11307,1,11307,1,"{'ok': True, 'value': 11307, 'stdout': '11307\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0861823558807373}",1,Compute: 5300 + 6007
361,knap,2,6,8,0,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08943295478820801}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 3]
V = [6, 6, 2]
C = 4"
362,sub,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09161520004272461}",1,Compute: 51 - 41
363,mul{'ok': True, 'value': 46476853288980757508045746092541, 'stdout': '46476853288980757508045746092541\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09194397926330566}",1,Compute: 5590125871702067 * 8314097813835023
364,ilp_assign,2,7,5,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5167548656463623}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [3, 2]]"
365,sub,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09513711929321289}",1,Compute: 95 - 90
366,knap,32,1588,1004,0,1085,0,"{'ok': True, 'value': 1588, 'stdout': '1588\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0973517894744873}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 6, 2, 47, 16, 24, 35, 1, 34, 5, 54, 54, 1, 9, 55, 36, 26, 32, 40, 15, 10, 48, 52, 7, 45, 30, 37, 49, 1, 60, 41, 17]
V = [25, 7, 97, 33, 75, 1, 95, 78, 117, 48, 32, 71, 37, 124, 77, 7, 29, 61, 111, 105, 14, 99, 90, 17, 91, 55, 91, 40, 104, 123, 55, 6]
C = 447"
367,sub,2,27,27,1,27,1,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08337545394897461}",1,Compute: 86 - 59
368,add,8,165443610,165443610,1,165443610,1,"{'ok': True, 'value': 165443610, 'stdout': '165443610\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09756684303283691}",1,Compute: 82708193 + 82735417
369,ilp_partition,32,0,1,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_5jkq62dl/main.py"", line 10, in <module>\n    res = partition(weights)\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08968615531921387}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 79, 87, 74, 55, 91, 31, 55, 23, 93, 45, 33, 71, 90, 74, 74, 79, 74, 23, 66, 21, 32, 4, 29]"
370,add,32,112245885721498653611933052946548,34705179260231243924104736274951,0,112245885721498653611933052946548,1,"{'ok': True, 'value': 112245885721498653611933052946548, 'stdout': '112245885721498653611933052946548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09754419326782227}",1,Compute: 77540706461267409687828316671597 + 34705179260231243924104736274951
371,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09376716613769531}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 12, 5, 1, 15, 14, 19, 4]"
372,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08805704116821289}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 3, 4, 2]"
373,ilp_prod,16,210,103,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_jksddo_g/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_jksddo_g/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1550281047821045}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [32, 11, 16, 20, 14, 47]
consumption (rows=resources) = [[4, 8, 5, 3, 9, 15], [16, 12, 1, 5, 7, 12], [8, 2, 1, 9, 6, 2], [15, 9, 12, 4, 13, 9]]
capacity = [52, 57, 53, 56]
upper_bounds = [3, 4, 4, 5, 4, 3]"
374,lcs,8,6,4,0,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09312963485717773}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddabdcba""
T = ""dbdcdbadb"""
375,ilp_prod,32,395,195,0,1000,0,"{'ok': True, 'value': 426, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/823c57e3d495428dbafbe0a4b775ef98-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/823c57e3d495428dbafbe0a4b775ef98-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 1909.5428 (6)\n3  Obj 426.3592\nOptimal - objective value 426.3592\nOptimal objective 426.3592046 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n426.3592029\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16673874855041504}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [79, 21, 79, 40, 32, 72]
consumption (rows=resources) = [[12, 17, 13, 1, 1, 28], [7, 22, 14, 14, 4, 2], [19, 8, 21, 23, 6, 13], [21, 16, 17, 18, 21, 30]]
capacity = [65, 101, 111, 108]
upper_bounds = [5, 3, 5, 4, 5, 3]"
376,sub,4,1944,1944,1,1944,1,"{'ok': True, 'value': 1944, 'stdout': '1944\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10453939437866211}",1,Compute: 8744 - 6800
377,rod,4,24,14,0,16,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08420872688293457}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 10, 3, 10]"
378,ilp_prod,4,36,36,1,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_nw4jn7sq/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16455769538879395}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 5, 12]
consumption (rows=resources) = [[3, 1, 3], [3, 2, 3], [4, 1, 2]]
capacity = [12, 10, 13]
upper_bounds = [3, 5, 3]"
379,lcs,16,10,8,0,8,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0878913402557373}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbddacdccdcdcab""
T = ""cbacaddbdbdcaabc"""
380,rod,2,8,6,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ovkr1clt/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_ovkr1clt/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10417842864990234}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
381,sub,32,59862236526963095582627896327757,19312345016508301171844455371269,0,59862236526963095582627896327757,1,"{'ok': True, 'value': 59862236526963095582627896327757, 'stdout': '59862236526963095582627896327757\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0995631217956543}",1,Compute: 79174581543471396754472351699026 - 19312345016508301171844455371269
382,knap,4,23,17,0,22,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08421921730041504}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 6, 4]
V = [12, 6, 5, 11]
C = 8"
383,add,2,126,126,1,126,1,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09906148910522461}",1,Compute: 71 + 55
384,add,8,110952744,111352744,0,110952744,1,"{'ok': True, 'value': 110952744, 'stdout': '110952744\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08650422096252441}",1,Compute: 67682834 + 43269910
385,ilp_assign,4,14,2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_f77dkoo3/main.py"", line 29, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_f77dkoo3/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09148716926574707}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 5, 2, 8], [3, 6, 4, 12], [3, 6, 8, 4], [2, 11, 7, 7]]"
386,ilp_prod,2,32,16,0,16,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_4w4j1m5e/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1692028045654297}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8]
consumption (rows=resources) = [[2, 3], [2, 3]]
capacity = [8, 9]
upper_bounds = [4, 3]"
387,mul{'ok': True, 'value': 24696998611004016696117162059413, 'stdout': '24696998611004016696117162059413\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08897876739501953}",1,Compute: 2958845452418093 * 8346836294143241
388,mul,8,785462441660454,770864388369334,0,773815485964301,0,"{'ok': True, 'value': 785462441660454, 'stdout': '785462441660454\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08237934112548828}",1,Compute: 53388318 * 14712253
389,rod,16,320,60,0,56,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08572840690612793}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 14, 3, 36, 28, 27, 35, 22, 14, 9, 19, 6, 9, 4, 22, 4]"
390,ilp_prod,4,48,39,0,45,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ae0463f0a1e145048a1294dc2cfd8e4a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ae0463f0a1e145048a1294dc2cfd8e4a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (0) rows, 3 (0) columns and 9 (0) elements\n0  Obj -0 Dual inf 22 (3)\n2  Obj 48\nOptimal - objective value 48\nOptimal objective 48 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.00000018\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16275906562805176}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3, 12]
consumption (rows=resources) = [[2, 4, 2], [4, 1, 4], [1, 4, 3]]
capacity = [11, 16, 15]
upper_bounds = [4, 3, 4]"
391,lcs,8,5,4,0,6,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0840597152709961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbbcabb""
T = ""dbbbbbcad"""
392,ilp_assign,16,34,30,0,113,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41405582427978516}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 28, 4, 25, 5, 30, 14], [42, 43, 21, 2, 10, 29, 33], [47, 30, 44, 27, 33, 3, 9], [10, 15, 32, 5, 3, 5, 35], [2, 1, 35, 21, 43, 5, 24], [3, 14, 31, 36, 5, 38, 13], [48, 20, 20, 2, 15, 32, 41]]"
393,ilp_prod,16,231,105,0,106,0,"{'ok': True, 'value': 235, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/71b6850c9c0a4fbd83c1460ca7e79187-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/71b6850c9c0a4fbd83c1460ca7e79187-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 776.19243 (6)\n1  Obj 235.375\nOptimal - objective value 235.375\nOptimal objective 235.375 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n235.375\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16080093383789062}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 35, 3, 12, 26, 33]
consumption (rows=resources) = [[4, 8, 13, 8, 9, 2], [1, 12, 9, 11, 1, 1], [13, 8, 15, 16, 10, 5], [13, 1, 7, 8, 14, 3]]
capacity = [37, 51, 36, 53]
upper_bounds = [3, 4, 3, 3, 3, 7]"
394,ilp_partition,16,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11260557174682617}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 48, 16, 15, 19, 46, 48, 28, 19, 27, 4, 41, 4, 26, 26, 18]"
395,add,4,4333,4333,1,4333,1,"{'ok': True, 'value': 4333, 'stdout': '4333\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0901193618774414}",1,Compute: 1354 + 2979
396,mul,8,3328333097349520,335377751120,0,68647280,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ajmsivek/main.py"", line 3, in <module>\n    res = math.pow(68647280, 48484559)\nOverflowError: math range error\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1020956039428711}",0,Compute: 68647280 * 48484559
397,lcs,8,5,5,1,6,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11039519309997559}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabadccb""
T = ""acbccddcc"""
398,mul,4,27848675,193,0,27835825,0,"{'ok': True, 'value': 27848675, 'stdout': '27848675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10870099067687988}",1,Compute: 8131 * 3425
399,knap,32,1672,2645,0,1000,0,"{'ok': True, 'value': 1672, 'stdout': '1672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09552359580993652}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 51, 10, 55, 42, 54, 19, 41, 29, 50, 52, 26, 13, 25, 41, 1, 63, 49, 54, 51, 63, 56, 17, 58, 42, 35, 21, 30, 23, 10, 49, 24]
V = [122, 45, 53, 79, 100, 40, 42, 13, 42, 52, 29, 18, 76, 89, 120, 45, 21, 113, 53, 109, 104, 97, 33, 98, 27, 48, 59, 126, 112, 100, 8, 65]
C = 589"
400,knap,2,10,20,0,11,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08602356910705566}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 3]
V = [10, 1, 10]
C = 5"
401,rod,32,2176,-1,0,1000,0,"{'ok': True, 'value': 2176, 'stdout': '2176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08675885200500488}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [68, 19, 96, 83, 49, 5, 58, 16, 73, 59, 77, 42, 8, 22, 93, 37, 22, 68, 25, 32, 80, 52, 19, 26, 44, 78, 60, 6, 22, 48, 53, 15]"
402,mul{'ok': True, 'value': 468627243581675566493029950566530523053872700070295621412844425, 'stdout': '468627243581675566493029950566530523053872700070295621412844425\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08728313446044922}",1,Compute: 10738603728698200720540645025825 * 43639494986606180468730641022569
403,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0863802433013916}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaa""
T = ""abd"""
404,rod,8,120,-1,0,30,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08687758445739746}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 6, 6, 15, 9, 23, 6, 15]"
405,sub,16,521296591403590,521396591403590,0,521396589140359,0,"{'ok': True, 'value': 521296591403590, 'stdout': '521296591403590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11354398727416992}",1,Compute: 8056943747323441 - 7535647155919851
406,ilp_partition,16,1,1,1,60,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08446192741394043}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 5, 35, 25, 48, 8, 33, 12, 34, 8, 29, 14, 12, 47, 48, 21]"
407,add,8,40136423,39136423,0,40136423,1,"{'ok': True, 'value': 40136423, 'stdout': '40136423\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08589744567871094}",1,Compute: 14177143 + 25959280
408,ilp_assign,4,18,23,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_51tlz137/main.py"", line 33, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_51tlz137/main.py"", line 8, in hungarian_algorithm\n    cost_matrix[:,j] = [x - np.min(cost_matrix[:,j]) for x in cost_matrix[:,j]]\nTypeError: list indices must be integers or slices, not tuple\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20604991912841797}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 11, 12, 10], [8, 11, 10, 4], [10, 8, 1, 4], [8, 10, 6, 9]]"
409,rod,8,112,-1,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_yvqxo6f9/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_yvqxo6f9/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08655858039855957}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 21, 1, 19, 14, 20, 8, 10]"
410,ilp_assign,8,21,10,0,20,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4063386917114258}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 19, 14, 12, 3, 11, 9], [12, 4, 10, 19, 5, 12, 2], [24, 1, 21, 20, 13, 1, 14], [8, 14, 19, 15, 10, 1, 6], [23, 19, 15, 18, 3, 21, 1], [22, 2, 3, 5, 13, 13, 20], [6, 24, 8, 21, 18, 4, 1]]"
411,mul,32,3878620706815417934376497837293442785092082073995071216818577640,76686779466869900053758586388480,0,39064844314353474864476322789296566665656333463664684664666828380,0,"{'ok': True, 'value': 3878620706815417934376497837293442785092082073995071216818577640, 'stdout': '3878620706815417934376497837293442785092082073995071216818577640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14190387725830078}",1,Compute: 47104367644760913426094993329460 * 82340999375390395643832110745634
412,lcs,32,21,13,0,24,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09495091438293457}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdaadbabdbcaacacbacddcaadcbaadb""
T = ""cddccddadcbbbbcdcdccadccbcabbacdb"""
413,sub,32,54228809234862329309995974463541,37242727965753107919846384498798,0,54228809234862329310000000000000,0,"{'ok': True, 'value': 54228809234862329309995974463541, 'stdout': '54228809234862329309995974463541\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09650063514709473}",1,Compute: 91471537200615437229842358962339 - 37242727965753107919846384498798
414,ilp_assign,4,15,6,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_385ca5tb/main.py"", line 29, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_385ca5tb/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08782029151916504}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 12, 8, 4], [1, 9, 10, 7], [2, 9, 3, 4], [4, 7, 7, 8]]"
415,ilp_assign,32,157,0,0,117,0,"{'ok': True, 'value': 157, 'stdout': '157\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43085145950317383}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 65, 29, 32, 93, 43, 94], [63, 16, 71, 77, 66, 21, 69], [34, 81, 62, 63, 42, 38, 56], [88, 85, 45, 17, 89, 73, 82], [60, 42, 43, 15, 64, 94, 17], [19, 38, 77, 90, 39, 52, 22], [95, 26, 27, 54, 43, 93, 20]]"
416,ilp_assign,8,34,46,0,69,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4294447898864746}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 10, 11, 1, 19, 20, 20], [10, 4, 11, 23, 3, 5, 13], [15, 9, 12, 9, 20, 22, 24], [8, 23, 6, 18, 15, 15, 9], [16, 4, 3, 22, 6, 18, 2], [9, 12, 11, 12, 2, 13, 22], [11, 6, 10, 16, 2, 18, 17]]"
417,lcs,32,20,10,0,14,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08963251113891602}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbaacadccdbcdadcccabdbbadbabcac""
T = ""bacdacaacaadddccabcbadaaaabcdda"""
418,ilp_assign,8,39,46,0,50,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43454980850219727}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 8, 10, 10, 6, 2, 6], [6, 19, 6, 11, 20, 23, 8], [10, 2, 15, 19, 5, 21, 11], [19, 2, 24, 18, 17, 24, 5], [14, 18, 7, 15, 23, 20, 14], [7, 12, 11, 20, 10, 19, 13], [18, 20, 8, 14, 11, 2, 5]]"
419,lcs,16,8,10,0,2,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10014772415161133}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbdcdcdbbdabcca""
T = ""dbdbccacadaaaadc"""
420,lcs,8,5,6,0,6,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08918619155883789}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccdbddb""
T = ""dcbbcbcd"""
421,knap,8,105,110,0,60,0,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09807419776916504}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 1, 12, 12, 7, 2, 7, 15]
V = [14, 14, 1, 10, 16, 30, 31, 6]
C = 36"
422,ilp_prod,16,96,"The actual answer to the problem would be the maximum profit obtained from the linear programming solution, which is not provided in the problem statement.",0,170,0,"{'ok': True, 'value': 96, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4e598c1e79e14fd49b4284d821c9b929-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4e598c1e79e14fd49b4284d821c9b929-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 102.4 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -65 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -96 found by DiveCoefficient after 6 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 5.6666667\nCbc0013I At root node, 3 cuts changed objective from -102.4 to -96 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 10 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -96, took 6 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -102.4 to -96\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 10 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                96.00000000\nEnumerated nodes:               0\nTotal iterations:               6\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n96.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17434024810791016}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 10, 19, 19, 31, 34]
consumption (rows=resources) = [[8, 9, 14, 15, 10, 15], [8, 14, 4, 14, 13, 7], [4, 12, 8, 1, 3, 1], [14, 12, 7, 7, 11, 14]]
capacity = [38, 34, 63, 59]
upper_bounds = [4, 3, 3, 3, 3, 3]"
423,ilp_assign,4,20,2,0,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2141740322113037}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 3, 8, 9], [6, 3, 7, 5], [7, 2, 10, 9], [6, 4, 8, 4]]"
424,ilp_prod,8,98,85,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_5eh9u6pz/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\n  File ""/tmp/cot_exec_5eh9u6pz/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nTypeError: LpVariable.__init__() got an unexpected keyword argument \'upper_bound\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17075586318969727}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 17, 17, 12]
consumption (rows=resources) = [[2, 4, 6, 4], [7, 1, 6, 3], [3, 8, 2, 2], [3, 1, 4, 3]]
capacity = [16, 32, 29, 29]
upper_bounds = [4, 3, 3, 4]"
425,sub,32,2804810652542738837717078853390,28048106525427489837717078853390,0,28048096525427288837717078953390,0,"{'ok': True, 'value': 2804810652542738837717078853390, 'stdout': '2804810652542738837717078853390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08982706069946289}",1,Compute: 76200530991042858559514035245375 - 73395720338500119721796956391985
426,rod,32,1216,1084,0,1040,0,"{'ok': True, 'value': 1216, 'stdout': '1216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10442948341369629}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [38, 22, 87, 70, 91, 45, 95, 83, 96, 21, 30, 83, 63, 4, 58, 22, 93, 33, 52, 4, 73, 66, 89, 53, 10, 22, 86, 51, 12, 15, 26, 84]"
427,ilp_prod,2,16,35,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_9osuhb3k/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16363883018493652}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 5]
consumption (rows=resources) = [[3, 1], [3, 3]]
capacity = [10, 8]
upper_bounds = [3, 3]"
428,rod,4,48,12,0,13,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08715963363647461}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 1, 10, 8]"
429,knap,2,9,10,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08503246307373047}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 1]
V = [8, 4, 1]
C = 3"
430,ilp_partition,16,1,1,1,498,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0975942611694336}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [38, 31, 22, 1, 1, 18, 14, 34, 37, 36, 12, 46, 26, 39, 31, 37]"
431,ilp_assign,4,8,5,0,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21144914627075195}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 4, 1, 1], [1, 3, 4, 8], [11, 10, 4, 11], [11, 2, 9, 7]]"
432,sub,2,25,25,1,25,1,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1056966781616211}",1,Compute: 75 - 50
433,mul,8,1662074253081872,166438539527312,0,1656268840479532,0,"{'ok': True, 'value': 1662074253081872, 'stdout': '1662074253081872\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09004330635070801}",1,Compute: 33371944 * 49804538
434,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08351612091064453}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcdcabadddcdbaa""
T = ""cddbabcbbcbdacdba"""
435,knap,8,101,110,0,66,0,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08601093292236328}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 9, 4, 9, 15, 9, 14, 2]
V = [5, 10, 29, 4, 23, 22, 17, 27]
C = 33"
436,sub,32,379432001808739259111085136407,3804320018088839259111085135407,0,38043200017888739269110861136407,0,"{'ok': True, 'value': 379432001808739259111085136407, 'stdout': '379432001808739259111085136407\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08656668663024902}",1,Compute: 49260301715766295748910163331234 - 48880869713957556489799078194827
437,mul,16,48801434796248569179938513843810,486234957043636655944074,0,4873293288884983663684410,0,"{'ok': True, 'value': 48801434796248569179938513843810, 'stdout': '48801434796248569179938513843810\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10389304161071777}",1,Compute: 5325068108564410 * 9164471477418341
438,sub,4,5124,5124,1,5124,1,"{'ok': True, 'value': 5124, 'stdout': '5124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0927267074584961}",1,Compute: 9569 - 4445
439,ilp_prod,8,80,100,0,0,0,"{'ok': True, 'value': 83, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/43384c08224c4f87b61e48f37282eb41-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/43384c08224c4f87b61e48f37282eb41-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 57.166666 (4)\n3  Obj 83.604651\nOptimal - objective value 83.604651\nOptimal objective 83.60465116 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n83.6046522\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16095328330993652}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 13, 23, 8]
consumption (rows=resources) = [[7, 5, 3, 3], [2, 4, 6, 8], [2, 6, 7, 5], [8, 1, 3, 6]]
capacity = [21, 31, 23, 23]
upper_bounds = [3, 3, 3, 3]"
440,ilp_prod,8,43,100,0,105,0,"{'ok': True, 'value': 45, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5b0b125ca8354321a0fb966dc32fb947-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5b0b125ca8354321a0fb966dc32fb947-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 39 (4)\n1  Obj 45\nOptimal - objective value 45\nOptimal objective 45 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n45.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1604759693145752}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 20, 7, 6]
consumption (rows=resources) = [[2, 2, 2, 4], [2, 8, 7, 2], [2, 8, 8, 3], [2, 3, 6, 7]]
capacity = [32, 20, 18, 32]
upper_bounds = [9, 3, 3, 4]"
441,mul,2,6862,7002,0,6902,0,"{'ok': True, 'value': 6862, 'stdout': '6862\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08408284187316895}",1,Compute: 73 * 94
442,add,8,93933447,,0,93933447,1,"{'ok': True, 'value': 93933447, 'stdout': '93933447\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08814048767089844}",1,Compute: 25649514 + 68283933
443,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08026719093322754}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badbddbd""
T = ""dabaaaabd"""
444,ilp_prod,32,310,The maximum profit is calculated using the linear programming approach.,0,1050,0,"{'ok': True, 'value': 338, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/32ae9ec1d27842baa518f165c91c7c41-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/32ae9ec1d27842baa518f165c91c7c41-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 288.78794 (6)\n4  Obj 338.78\nOptimal - objective value 338.78\nOptimal objective 338.78 - 4 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n338.78\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15547990798950195}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [40, 75, 66, 64, 5, 13]
consumption (rows=resources) = [[19, 4, 18, 32, 29, 11], [16, 1, 32, 4, 22, 29], [10, 8, 7, 12, 27, 9], [4, 27, 27, 16, 11, 24]]
capacity = [87, 74, 71, 80]
upper_bounds = [4, 3, 3, 3, 3, 3]"
445,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09812045097351074}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 6, 8, 2]"
446,mul,8,4022689654487309,400847266867699,0,4005965654465932,0,"{'ok': True, 'value': 4022689654487309, 'stdout': '4022689654487309\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07921600341796875}",1,Compute: 47154181 * 85309289
447,ilp_partition,4,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0782783031463623}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 6, 4, 10]"
448,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09394478797912598}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabc""
T = ""bcc"""
449,lcs,8,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08948230743408203}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdddddab""
T = ""dcbabba"""
450,rod,8,40,19,0,18,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09043288230895996}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 1, 3, 11, 11, 15, 7, 8]"
451,mul,16,26247758573390687232654404752528,7665347487816152,0,26869516882381636886666048448,0,"{'ok': True, 'value': 26247758573390687232654404752528, 'stdout': '26247758573390687232654404752528\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09772562980651855}",1,Compute: 3978050126675336 * 6598146764763698
452,lcs,4,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12197566032409668}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acca""
T = ""dbb"""
453,sub,4,2045,2045,1,2045,1,"{'ok': True, 'value': 2045, 'stdout': '2045\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0946969985961914}",1,Compute: 7609 - 5564
454,sub,4,199,199,1,199,1,"{'ok': True, 'value': 199, 'stdout': '199\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0986180305480957}",1,Compute: 9009 - 8810
455,ilp_assign,32,110,119,0,110,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_73k6dvdi/main.py"", line 30, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_73k6dvdi/main.py"", line 17, in assignment_problem\n    covered.add(zero[0])\nIndexError: invalid index to scalar variable.\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2158193588256836}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[95, 89, 62, 4, 3, 94, 73], [5, 31, 48, 43, 32, 87, 20], [60, 61, 96, 1, 72, 36, 7], [4, 39, 71, 18, 11, 56, 83], [72, 54, 43, 52, 26, 32, 34], [11, 83, 36, 56, 21, 82, 17], [23, 76, 22, 33, 87, 35, 93]]"
456,knap,4,11,11,1,13,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.091278076171875}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 7, 7]
V = [6, 1, 5, 5]
C = 8"
457,ilp_prod,8,85,115,0,110,0,"{'ok': True, 'value': 94, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cae73c2f5a234192a9316519dc68b513-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cae73c2f5a234192a9316519dc68b513-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 60 (4)\n5  Obj 94.129032\nOptimal - objective value 94.129032\nOptimal objective 94.12903226 - 5 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n94.12903299999999\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1748976707458496}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 15, 20, 14]
consumption (rows=resources) = [[1, 6, 4, 7], [1, 7, 5, 3], [5, 1, 5, 2], [6, 7, 1, 5]]
capacity = [23, 21, 24, 27]
upper_bounds = [4, 3, 4, 3]"
458,mul,4,59228486,27934,0,59455846,0,"{'ok': True, 'value': 59228486, 'stdout': '59228486\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0944814682006836}",1,Compute: 9587 * 6178
459,ilp_assign,32,158,0,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gabg3a0c/main.py"", line 35, in <module>\n    res = hungarian_algorithm(C)\n  File ""/tmp/cot_exec_gabg3a0c/main.py"", line 15, in hungarian_algorithm\n    smallest_uncovered = min([x for i in range(n) for x in cost_matrix[i] if x > 0 and (i not in covered_rows or i not in covered_columns)])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2049083709716797}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[30, 57, 88, 6, 81, 65, 60], [42, 39, 57, 65, 7, 75, 47], [80, 61, 62, 30, 79, 81, 28], [93, 11, 39, 35, 6, 44, 12], [43, 63, 67, 21, 21, 82, 30], [69, 6, 51, 88, 24, 34, 46], [65, 25, 29, 91, 68, 69, 11]]"
460,ilp_assign,2,2,5,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3941667079925537}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [1, 1]]"
461,add,32,69427519221367702546490830358939,69427429221367702546474830358939,0,69427519221367692546490829359039,0,"{'ok': True, 'value': 69427519221367702546490830358939, 'stdout': '69427519221367702546490830358939\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10103178024291992}",1,Compute: 25375998895577647457033888319100 + 44051520325790055089456942039839
462,sub,32,47161659588755788203363195038935,24058803880330943718439750657814,0,47161669588755788203363195038935,0,"{'ok': True, 'value': 47161659588755788203363195038935, 'stdout': '47161659588755788203363195038935\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0875391960144043}",1,Compute: 71220463469086731921802945696749 - 24058803880330943718439750657814
463,add,2,91,91,1,91,1,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09448814392089844}",1,Compute: 80 + 11
464,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08793997764587402}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""accb""
T = ""dcbb"""
465,sub,32,60294627598833819870345492825519,60294627598833819870345492825519,1,60294627598834819844145492825519,0,"{'ok': True, 'value': 60294627598833819870345492825519, 'stdout': '60294627598833819870345492825519\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08699464797973633}",1,Compute: 84673215012462337595477245001374 - 24378587413628517725131752175855
466,knap,2,10,9,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10363006591796875}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 1]
V = [3, 1, 7]
C = 4"
467,mul,4,28448448,3389328,0,28456704,0,"{'ok': True, 'value': 28448448, 'stdout': '28448448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10606122016906738}",1,Compute: 8328 * 3416
468,ilp_assign,2,6,1,0,7,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43985414505004883}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [5, 2]]"
469,rod,2,8,8,1,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10057759284973145}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
470,sub,16,3698577758109634,3700577758110634,0,3700577758109634,0,"{'ok': True, 'value': 3698577758109634, 'stdout': '3698577758109634\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10176706314086914}",1,Compute: 5998434158839146 - 2299856400729512
471,rod,4,16,10,0,11,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08796119689941406}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 7, 7, 7]"
472,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0838930606842041}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabc""
T = ""cab"""
473,ilp_partition,32,0,10,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1131281852722168}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 9, 73, 27, 11, 5, 8, 14, 6, 30, 6, 59, 82, 10, 57, 33, 96, 14, 36, 21, 18, 48, 89, 50]"
474,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08365321159362793}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 4, 3, 5]"
475,add,32,93609394972052552377051788870961,93609494972052552477051788870961,0,93609494972052552477051788870961,0,"{'ok': True, 'value': 93609394972052552377051788870961, 'stdout': '93609394972052552377051788870961\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09920525550842285}",1,Compute: 61629991553492842567428379159141 + 31979403418559709809623409711820
476,rod,32,864,-1,0,94,0,"{'ok': True, 'value': 864, 'stdout': '864\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08516383171081543}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [27, 11, 46, 80, 17, 10, 33, 26, 14, 7, 54, 68, 45, 93, 78, 54, 23, 67, 22, 35, 3, 32, 65, 61, 2, 52, 12, 72, 31, 29, 94, 50]"
477,knap,4,25,22,0,22,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09272170066833496}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 4, 7, 3]
V = [1, 5, 13, 12]
C = 10"
478,sub,8,61870820,61870820,1,61870820,1,"{'ok': True, 'value': 61870820, 'stdout': '61870820\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10526061058044434}",1,Compute: 84865227 - 22994407
479,add,2,116,116,1,116,1,"{'ok': True, 'value': 116, 'stdout': '116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09449219703674316}",1,Compute: 19 + 97
480,ilp_prod,2,21,-1,0,21,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_c59148sp/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16209125518798828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[3, 2], [1, 2]]
capacity = [10, 10]
upper_bounds = [3, 5]"
481,sub,8,19793031,19793031,1,19793031,1,"{'ok': True, 'value': 19793031, 'stdout': '19793031\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08355236053466797}",1,Compute: 31665872 - 11872841
482,rod,2,5,2,0,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_rg_evf_g/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_rg_evf_g/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08138799667358398}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 5]"
483,sub,4,2612,2612,1,2612,1,"{'ok': True, 'value': 2612, 'stdout': '2612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08474564552307129}",1,Compute: 5898 - 3286
484,sub,8,68601129,68601130,0,68601129,1,"{'ok': True, 'value': 68601129, 'stdout': '68601129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11201119422912598}",1,Compute: 88678478 - 20077349
485,mul{'ok': True, 'value': 5426229554265516627366122134337752500518063525306691881382539244, 'stdout': '5426229554265516627366122134337752500518063525306691881382539244\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08318161964416504}",1,Compute: 77101560009372419926248951170438 * 70377688254373937175946778262738
486,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09412527084350586}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""cd"""
487,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11241698265075684}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [90, 41, 44, 64, 33, 25, 74, 29, 88, 23, 54, 72, 40, 6, 12, 88, 68, 3, 29, 47, 54, 26, 10, 49]"
488,knap,8,93,110,0,103,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08870267868041992}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 7, 6, 3, 9, 15, 11, 13]
V = [4, 23, 25, 25, 9, 10, 3, 20]
C = 36"
489,mul,16,11487324550235069012545827639544,,0,111906994678779554964668454636,0,"{'ok': True, 'value': 11487324550235069012545827639544, 'stdout': '11487324550235069012545827639544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10128641128540039}",1,Compute: 6139099261826504 * 1871174265199511
490,rod,16,336,30,0,171,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09011030197143555}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [9, 42, 5, 34, 8, 8, 47, 4, 8, 10, 25, 40, 20, 2, 29, 7]"
491,lcs,16,8,5,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1018679141998291}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abacccdcbdbabbdb""
T = ""bdabbdabccababa"""
492,rod,4,48,12,0,48,1,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08962559700012207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 12, 11, 7]"
493,ilp_assign,8,26,18,0,39,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3809974193572998}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 14, 8, 11, 14, 19, 4], [11, 3, 16, 20, 16, 10, 8], [13, 23, 2, 12, 11, 6, 3], [18, 9, 15, 1, 20, 21, 6], [5, 24, 18, 19, 11, 22, 24], [15, 23, 3, 13, 9, 15, 10], [1, 13, 1, 15, 4, 5, 10]]"
494,rod,4,24,15,0,11,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08297920227050781}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 7, 3, 11]"
495,mul,8,6655668900731876,6638313966243956,0,670818983561196,0,"{'ok': True, 'value': 6655668900731876, 'stdout': '6655668900731876\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07831454277038574}",1,Compute: 78814838 * 84446902
496,mul,8,1738713507180702,17474935922,0,1755478500552222,0,"{'ok': True, 'value': 1738713507180702, 'stdout': '1738713507180702\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08166956901550293}",1,Compute: 46950878 * 37032609
497,add,4,9911,10911,0,9911,1,"{'ok': True, 'value': 9911, 'stdout': '9911\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11524558067321777}",1,Compute: 2115 + 7796
498,knap,4,24,24,1,13,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10324406623840332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 5, 5]
V = [7, 11, 13, 9]
C = 8"
499,add,4,6207,6207,1,6207,1,"{'ok': True, 'value': 6207, 'stdout': '6207\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09775924682617188}",1,Compute: 1004 + 5203
500,sub,32,36266642324715381722073065840218,36266642324715381722073065840218,1,36264842324715381722073065840218,0,"{'ok': True, 'value': 36266642324715381722073065840218, 'stdout': '36266642324715381722073065840218\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0824739933013916}",1,Compute: 76231290968983448276220373478643 - 39964648644268066554147307638425
501,mul,8,2776688555475744,28043464866194688,0,27703435543338844,0,"{'ok': True, 'value': 2776688555475744, 'stdout': '2776688555475744\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09359598159790039}",1,Compute: 54034344 * 51387476
502,sub,32,31232326505906304312329506333822,31232526506406304312330506333822,0,31232358505906304312329506333822,0,"{'ok': True, 'value': 31232326505906304312329506333822, 'stdout': '31232326505906304312329506333822\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08806538581848145}",1,Compute: 59525917903680137268337403725103 - 28293591397773832956007897391281
503,mul,16,56729778541842019130387777425728,56766663366396463187456,0,5616985037115483209649604862336,0,"{'ok': True, 'value': 56729778541842019130387777425728, 'stdout': '56729778541842019130387777425728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08073711395263672}",1,Compute: 6548224808248931 * 8663382856125888
504,ilp_prod,4,32,37,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_3ntxflkg/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\n  File ""/tmp/cot_exec_3ntxflkg/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nTypeError: LpVariable.__init__() got an unexpected keyword argument \'upper_bound\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15937566757202148}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4, 5]
consumption (rows=resources) = [[3, 1, 2], [2, 1, 3], [2, 1, 4]]
capacity = [8, 12, 14]
upper_bounds = [3, 8, 3]"
505,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08526873588562012}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""baa"""
506,ilp_prod,32,252,109,0,1000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_tzmjpet6/main.py"", line 10, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_tzmjpet6/main.py"", line 10, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15278100967407227}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [92, 4, 6, 29, 21, 34]
consumption (rows=resources) = [[21, 15, 13, 29, 19, 31], [27, 16, 20, 16, 25, 6], [11, 5, 25, 22, 6, 1], [2, 9, 25, 19, 27, 13]]
capacity = [121, 77, 75, 84]
upper_bounds = [3, 4, 3, 3, 3, 3]"
507,ilp_assign,32,116,0,0,40,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_oewx7yz7/main.py"", line 38, in <module>\n    res = hungarian_algorithm(np.array(C))\n  File ""/tmp/cot_exec_oewx7yz7/main.py"", line 16, in hungarian_algorithm\n    cost_matrix[i][j] = \'star\'\nValueError: invalid literal for int() with base 10: \'star\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20220565795898438}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[43, 42, 18, 11, 41, 14, 40], [6, 86, 12, 68, 84, 63, 4], [47, 73, 75, 13, 36, 52, 47], [76, 73, 90, 21, 14, 82, 20], [90, 38, 35, 3, 83, 47, 92], [43, 63, 72, 88, 44, 66, 23], [29, 59, 25, 48, 78, 4, 10]]"
508,sub,2,49,49,1,49,1,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0956275463104248}",1,Compute: 72 - 23
509,add,4,10474,11474,0,10474,1,"{'ok': True, 'value': 10474, 'stdout': '10474\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.081207275390625}",1,Compute: 4583 + 5891
510,rod,4,36,12,0,13,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0792703628540039}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 1, 9, 12]"
511,ilp_prod,4,55,33,0,35,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_zuarkd_f/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\n  File ""/tmp/cot_exec_zuarkd_f/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nTypeError: LpVariable.__init__() got an unexpected keyword argument \'upper_bound\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15034747123718262}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5, 11]
consumption (rows=resources) = [[3, 1, 1], [4, 3, 2], [2, 2, 2]]
capacity = [10, 11, 13]
upper_bounds = [3, 3, 5]"
512,lcs,32,18,10,0,15,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0848240852355957}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccdabaadbacbcaddcaabcaacbbbbcaa""
T = ""daadbcddcdbabdbacacddbdbadaaccc"""
513,mul,8,2088613591272000,98622225,0,2091611527680000,0,"{'ok': True, 'value': 2088613591272000, 'stdout': '2088613591272000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09448099136352539}",1,Compute: 21177920 * 98622225
514,mul{'ok': True, 'value': 21947464445775339272309214115454, 'stdout': '21947464445775339272309214115454\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10485959053039551}",1,Compute: 8078158768089262 * 2716889464029017
515,ilp_assign,8,19,35,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 6, 15, 9, 6, 2, 12], [22, 10, 24, 11, 21, 9, 8], [13, 1, 2, 22, 4, 5, 20], [11, 19, 6, 1, 2, 18, 6], [19, 5, 3, 5, 5, 18, 6], [14, 13, 1, 12, 10, 12, 19], [1, 8, 19, 1, 12, 12, 11]]"
516,knap,32,1629,1093,0,1064,0,"{'ok': True, 'value': 1629, 'stdout': '1629\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09198594093322754}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [63, 30, 8, 6, 51, 12, 64, 44, 60, 48, 41, 27, 6, 3, 27, 43, 41, 30, 60, 44, 43, 21, 20, 20, 43, 28, 49, 45, 55, 47, 48, 43]
V = [1, 3, 11, 97, 99, 42, 62, 61, 76, 53, 31, 3, 122, 119, 68, 102, 68, 105, 112, 110, 90, 24, 12, 68, 68, 24, 109, 117, 90, 76, 111, 64]
C = 585"
517,add,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10133576393127441}",1,Compute: 15 + 43
518,knap,8,121,114,0,60,0,"{'ok': True, 'value': 121, 'stdout': '121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08374595642089844}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 5, 5, 16, 2, 11, 8, 6]
V = [30, 21, 29, 15, 18, 13, 7, 23]
C = 33"
519,add,32,121159019639525074677115845348310,121159019639525074677115845348310,1,121159019639525074677115845348310,1,"{'ok': True, 'value': 121159019639525074677115845348310, 'stdout': '121159019639525074677115845348310\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08236813545227051}",1,Compute: 70912182501578528487148746920320 + 50246837137946546189967098427990
520,sub,2,78,,0,78,1,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10331583023071289}",1,Compute: 88 - 10
521,rod,8,160,22,0,100,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10106706619262695}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 10, 24, 2, 8, 4, 22, 6]"
522,sub,4,6314,6314,1,6314,1,"{'ok': True, 'value': 6314, 'stdout': '6314\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0907289981842041}",1,Compute: 9516 - 3202
523,mul,16,42416786593112765373419822097580,411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411972571462820411,0,423493260842383369334606266,0,"{'ok': True, 'value': 42416786593112765373419822097580, 'stdout': '42416786593112765373419822097580\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.080780029296875}",1,Compute: 6099608163780290 * 6954018267105302
524,rod,8,96,-1,0,44,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__xedxyhf/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec__xedxyhf/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09111905097961426}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 17, 11, 16, 21, 24, 15, 24]"
525,knap,8,90,114,0,60,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09008359909057617}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 14, 7, 15, 7, 13, 3, 4]
V = [26, 8, 30, 11, 3, 13, 15, 16]
C = 39"
526,sub,16,772088485332852,772082485332852,0,772088485332852,1,"{'ok': True, 'value': 772088485332852, 'stdout': '772088485332852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09873151779174805}",1,Compute: 2135370349478251 - 1363281864145399
527,rod,2,8,8,1,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_kjt0ii6a/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_kjt0ii6a/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08831000328063965}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 3]"
528,rod,4,14,-1,0,13,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10811781883239746}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 7, 11, 7]"
529,ilp_prod,16,153,100,0,1005,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_cdh9ri__/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub=upper_bounds[j]) for j in range(len(profit))]\n  File ""/tmp/cot_exec_cdh9ri__/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub=upper_bounds[j]) for j in range(len(profit))]\nTypeError: LpVariable.__init__() got an unexpected keyword argument \'ub\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16287946701049805}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 24, 43, 20, 43, 21]
consumption (rows=resources) = [[5, 14, 13, 8, 4, 8], [9, 15, 5, 10, 5, 9], [2, 1, 8, 12, 11, 4], [15, 2, 9, 5, 16, 7]]
capacity = [46, 53, 37, 38]
upper_bounds = [3, 3, 3, 3, 3, 5]"
530,rod,4,44,22,0,55,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09205794334411621}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 11, 11, 7]"
531,sub,2,28,28,1,28,1,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09538459777832031}",1,Compute: 80 - 52
532,add,2,101,101,1,101,1,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1092379093170166}",1,Compute: 74 + 27
533,lcs,16,7,7,1,5,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0928349494934082}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcadadcacaacaaaa""
T = ""dcaababbbdcdbad"""
534,lcs,4,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08938407897949219}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcac""
T = ""cbb"""
535,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08769559860229492}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 24, 20, 13, 22, 14, 12, 10]"
536,knap,8,62,100,0,33,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08876347541809082}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 14, 6, 7, 1, 12, 16, 5]
V = [18, 6, 18, 15, 1, 10, 14, 1]
C = 33"
537,sub,8,32845797,32845797,1,32845797,1,"{'ok': True, 'value': 32845797, 'stdout': '32845797\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11385965347290039}",1,Compute: 56176662 - 23330865
538,rod,8,184,-1,0,60,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0960690975189209}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 13, 21, 16, 8, 13, 21, 24]"
539,rod,16,264,2,0,50,0,"{'ok': True, 'value': 264, 'stdout': '264\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09152603149414062}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [12, 33, 39, 26, 21, 7, 11, 8, 36, 10, 31, 10, 1, 39, 3, 20]"
540,ilp_partition,8,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10276317596435547}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 9, 6, 11, 15, 3, 12, 12]"
541,ilp_partition,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08644556999206543}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 2, 2]"
542,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0849764347076416}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 7, 12, 1, 10, 20, 14, 24]"
543,sub,8,65171668,65171668,1,65171668,1,"{'ok': True, 'value': 65171668, 'stdout': '65171668\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10143518447875977}",1,Compute: 79823532 - 14651864
544,ilp_assign,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39454197883605957}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5], [4, 1]]"
545,rod,16,272,,0,160,0,"{'ok': True, 'value': 272, 'stdout': '272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08752179145812988}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [15, 34, 9, 31, 20, 38, 3, 29, 46, 29, 35, 10, 42, 33, 25, 6]"
546,ilp_partition,2,3,0,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08443045616149902}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 1, 4]"
547,sub,4,1093,1093,1,1093,1,"{'ok': True, 'value': 1093, 'stdout': '1093\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1003725528717041}",1,Compute: 8666 - 7573
548,add,32,70142496387448969673838437217611,171765007246182823967787682727601,0,17176500724618282396778768272761,0,"{'ok': True, 'value': 70142496387448969673838437217611, 'stdout': '70142496387448969673838437217611\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09464859962463379}",1,Compute: 11291390095414872699327693945557 + 58851106292034096974510743272054
549,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08621644973754883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdad""
T = ""dabbd"""
550,add,16,10499277778271646,10439278775271646,0,10499277778271646,1,"{'ok': True, 'value': 10499277778271646, 'stdout': '10499277778271646\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09381723403930664}",1,Compute: 8527840481422844 + 1971437296848802
551,ilp_assign,32,115,0,0,118,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0611064434051514}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[70, 61, 61, 7, 73, 82, 52], [19, 69, 55, 16, 7, 2, 10], [88, 26, 95, 17, 74, 65, 89], [43, 36, 58, 94, 85, 19, 86], [38, 43, 89, 89, 44, 28, 36], [45, 12, 5, 51, 65, 70, 61], [59, 74, 26, 77, 10, 62, 16]]"
552,knap,32,1638,1000,0,1043,0,"{'ok': True, 'value': 1638, 'stdout': '1638\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09821581840515137}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [35, 37, 56, 21, 58, 53, 52, 39, 34, 3, 34, 47, 24, 43, 43, 60, 46, 58, 56, 24, 63, 45, 38, 24, 25, 62, 23, 54, 3, 1, 61, 21]
V = [63, 62, 116, 121, 102, 34, 105, 17, 5, 93, 66, 85, 42, 109, 85, 64, 22, 113, 8, 25, 95, 12, 82, 104, 27, 43, 24, 108, 110, 29, 109, 98]
C = 621"
553,rod,16,312,50,0,84,0,"{'ok': True, 'value': 312, 'stdout': '312\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0913078784942627}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [13, 39, 47, 39, 33, 36, 1, 15, 11, 1, 37, 29, 17, 19, 39, 39]"
554,ilp_prod,16,180,164,0,1005,0,"{'ok': True, 'value': 192, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4cd6ae5550854097b2f07e04abd892fe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4cd6ae5550854097b2f07e04abd892fe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 693.52538 (6)\n5  Obj 192.04724\nOptimal - objective value 192.04724\nOptimal objective 192.0472441 - 5 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n192.04724375\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17476582527160645}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 23, 15, 36, 22, 45]
consumption (rows=resources) = [[16, 7, 2, 2, 9, 12], [6, 16, 10, 13, 8, 1], [5, 9, 6, 13, 10, 9], [1, 12, 4, 12, 11, 11]]
capacity = [46, 64, 47, 48]
upper_bounds = [3, 4, 6, 3, 4, 3]"
555,ilp_assign,4,9,11,0,5,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.236250638961792}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 2, 1, 3], [6, 1, 6, 10], [3, 8, 7, 11], [4, 7, 8, 4]]"
556,ilp_assign,8,30,11,0,46,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42601752281188965}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 11, 6, 22, 1, 11, 5], [4, 17, 11, 20, 8, 4, 24], [24, 18, 4, 24, 22, 16, 17], [20, 23, 16, 10, 11, 20, 3], [7, 2, 21, 13, 9, 17, 23], [11, 8, 19, 11, 9, 24, 24], [23, 3, 15, 5, 2, 22, 4]]"
557,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08640408515930176}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbd""
T = ""bdbca"""
558,knap,16,391,160,0,1099,0,"{'ok': True, 'value': 391, 'stdout': '391\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10236835479736328}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 20, 14, 32, 30, 12, 19, 31, 24, 7, 1, 22, 23, 30, 10, 18]
V = [7, 9, 58, 24, 64, 39, 20, 21, 10, 31, 21, 59, 5, 16, 46, 43]
C = 160"
559,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08726930618286133}",1,Compute: 21 - 20
560,ilp_assign,32,97,114,0,110,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dtavl2in/main.py"", line 30, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_dtavl2in/main.py"", line 17, in assignment_problem\n    covered.add(zero[0])\nIndexError: invalid index to scalar variable.\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19923138618469238}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[79, 5, 2, 71, 77, 96, 4], [90, 1, 50, 70, 56, 31, 58], [68, 12, 4, 54, 22, 57, 48], [66, 65, 37, 59, 87, 33, 55], [80, 2, 93, 12, 41, 61, 20], [53, 63, 96, 16, 16, 88, 89], [27, 16, 3, 66, 15, 20, 14]]"
561,add,16,14629106125867674,14629106125867674,1,14637076125867674,0,"{'ok': True, 'value': 14629106125867674, 'stdout': '14629106125867674\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08526062965393066}",1,Compute: 6471064307351005 + 8158041818516669
562,ilp_partition,4,2,1,0,6,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08587312698364258}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 8, 12, 9]"
563,ilp_partition,8,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09898781776428223}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 19, 22, 22, 12, 12, 3, 14]"
564,ilp_assign,16,61,28,0,114,0,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39963603019714355}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 1, 12, 27, 42, 26, 23], [3, 4, 48, 40, 11, 23, 12], [30, 19, 40, 31, 42, 46, 21], [20, 42, 7, 24, 12, 32, 3], [45, 30, 28, 18, 24, 13, 1], [24, 16, 40, 34, 8, 14, 25], [20, 11, 2, 27, 40, 24, 40]]"
565,ilp_partition,16,0,1,0,130,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09656691551208496}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 34, 43, 2, 44, 44, 21, 32, 16, 24, 35, 22, 42, 38, 40, 4]"
566,lcs,16,9,7,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10078644752502441}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcacbbcabaddcbad""
T = ""cdaaabdaaddbacab"""
567,add,8,108732811,108732811,1,108732811,1,"{'ok': True, 'value': 108732811, 'stdout': '108732811\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09687471389770508}",1,Compute: 14266838 + 94465973
568,add,32,123267493193544257470276728410428,123267963193544267565876628450426,0,123267493193544257669276728410428,0,"{'ok': True, 'value': 123267493193544257470276728410428, 'stdout': '123267493193544257470276728410428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08522248268127441}",1,Compute: 61557229027054155794738807013545 + 61710264166490101675537921396883
569,mul,4,22115970,313,0,22323870,0,"{'ok': True, 'value': 22115970, 'stdout': '22115970\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08384299278259277}",1,Compute: 2727 * 8110
570,add,16,11306331226305740,1753168332424495,0,11306331226305740,1,"{'ok': True, 'value': 11306331226305740, 'stdout': '11306331226305740\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09436321258544922}",1,Compute: 9553162893881245 + 1753168332424495
571,lcs,16,8,6,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09357404708862305}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdaadbccabacccc""
T = ""adcccabdcbbadca"""
572,lcs,8,3,4,0,5,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09634971618652344}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdcdcab""
T = ""bbaaadbdb"""
573,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09244298934936523}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""aad"""
574,knap,32,1794,128,0,1093,0,"{'ok': True, 'value': 1794, 'stdout': '1794\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10518884658813477}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 11, 49, 53, 64, 48, 36, 14, 21, 40, 2, 21, 51, 31, 55, 22, 54, 20, 16, 57, 46, 39, 22, 2, 8, 52, 53, 42, 34, 57, 46, 15]
V = [88, 99, 52, 51, 95, 2, 96, 89, 51, 64, 89, 39, 98, 23, 103, 125, 49, 102, 128, 105, 71, 11, 46, 106, 29, 107, 57, 46, 102, 94, 128, 8]
C = 545"
575,mul,32,1295443579502725039544137065209756004868170640373117602172762160,95450567331567514651440104101680,0,The result is a very large number that is beyond the range of standard integer types.,0,"{'ok': True, 'value': 1295443579502725039544137065209756004868170640373117602172762160, 'stdout': '1295443579502725039544137065209756004868170640373117602172762160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09640908241271973}",1,Compute: 13571879305889620843645731887537 * 95450567331567514651440104101680
576,ilp_assign,32,136,125,0,117,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3948671817779541}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[52, 2, 31, 57, 75, 11, 8], [74, 27, 76, 22, 80, 69, 70], [48, 22, 93, 25, 4, 61, 72], [80, 60, 69, 48, 76, 45, 86], [61, 9, 56, 64, 58, 78, 60], [52, 80, 18, 51, 88, 56, 5], [50, 35, 5, 38, 27, 8, 77]]"
577,ilp_assign,32,105,115,0,165,0,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39444661140441895}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[78, 2, 93, 20, 92, 49, 83], [89, 60, 47, 61, 37, 12, 70], [14, 81, 46, 96, 23, 69, 94], [78, 83, 96, 8, 46, 54, 45], [18, 92, 32, 91, 3, 76, 69], [62, 82, 17, 92, 79, 56, 31], [67, 73, 35, 20, 7, 86, 79]]"
578,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09605240821838379}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcc""
T = ""dacb"""
579,add,16,8615284584052797,8615284584048897,0,8615284584052897,0,"{'ok': True, 'value': 8615284584052797, 'stdout': '8615284584052797\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09474706649780273}",1,Compute: 4831101653605709 + 3784182930447088
580,ilp_prod,8,115,103,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_qk236bp_/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\n  File ""/tmp/cot_exec_qk236bp_/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nTypeError: LpVariable.__init__() got an unexpected keyword argument \'upper_bound\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16612696647644043}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 23, 9, 11]
consumption (rows=resources) = [[2, 3, 8, 6], [6, 5, 8, 6], [4, 3, 8, 3], [6, 4, 8, 3]]
capacity = [19, 30, 26, 21]
upper_bounds = [3, 5, 3, 3]"
581,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09407591819763184}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 26, 7, 1, 8, 37, 2, 19, 3, 2, 25, 36, 40, 36, 10, 32]"
582,ilp_prod,8,63,101,0,105,0,"{'ok': True, 'value': 65, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f3994a6c582e4bba842d2c8a0a3ee740-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f3994a6c582e4bba842d2c8a0a3ee740-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 46.2 (4)\n2  Obj 65.16\nOptimal - objective value 65.16\nOptimal objective 65.16 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n65.16\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17381048202514648}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 5, 18, 7]
consumption (rows=resources) = [[2, 7, 5, 4], [2, 7, 1, 8], [6, 1, 4, 5], [7, 8, 5, 2]]
capacity = [17, 18, 27, 28]
upper_bounds = [4, 3, 3, 3]"
583,rod,32,1728,-1,0,674,0,"{'ok': True, 'value': 1728, 'stdout': '1728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0849769115447998}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [54, 34, 19, 88, 36, 91, 96, 94, 95, 64, 95, 93, 23, 52, 26, 38, 52, 82, 65, 26, 4, 9, 60, 47, 27, 51, 56, 5, 12, 48, 69, 26]"
584,ilp_assign,2,5,3,0,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21075081825256348}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 2], [6, 1]]"
585,add,8,146497742,146497742,1,146497742,1,"{'ok': True, 'value': 146497742, 'stdout': '146497742\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10213899612426758}",1,Compute: 52350548 + 94147194
586,mul,4,11582406,172250,0,11648926,0,"{'ok': True, 'value': 11582406, 'stdout': '11582406\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09417152404785156}",1,Compute: 6919 * 1674
587,rod,4,48,15,0,22,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08692479133605957}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 2, 11, 9]"
588,lcs,32,18,10,0,15,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09424376487731934}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccbbbaadbdbaccdbacbbdaddcadcacb""
T = ""abbddaadccdddbbdaacbadadbdbabba"""
589,ilp_prod,8,72,100,0,0,0,"{'ok': True, 'value': 72, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b3cfb6c909804c4aafaced9a66bc08f2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b3cfb6c909804c4aafaced9a66bc08f2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 52.166666 (4)\n1  Obj 72\nOptimal - objective value 72\nOptimal objective 72 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n72.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17019200325012207}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 24, 13, 8]
consumption (rows=resources) = [[5, 6, 2, 2], [7, 6, 6, 5], [6, 1, 4, 5], [3, 3, 3, 8]]
capacity = [23, 18, 32, 24]
upper_bounds = [3, 3, 3, 3]"
590,rod,4,36,4,0,3,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0949866771697998}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 1, 3, 3]"
591,mul,2,1980,1980,1,1980,1,"{'ok': True, 'value': 1980, 'stdout': '1980\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08362364768981934}",1,Compute: 20 * 99
592,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08297252655029297}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""dcb"""
593,knap,32,1525,-1,0,1294,0,"{'ok': True, 'value': 1525, 'stdout': '1525\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0985255241394043}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [42, 14, 12, 18, 33, 61, 35, 12, 10, 24, 26, 43, 23, 28, 33, 49, 25, 12, 34, 60, 5, 42, 23, 19, 59, 26, 32, 53, 3, 24, 21, 33]
V = [29, 5, 72, 97, 7, 3, 9, 48, 58, 51, 16, 66, 125, 106, 5, 29, 92, 64, 41, 61, 20, 17, 115, 95, 12, 96, 41, 109, 40, 52, 49, 124]
C = 467"
594,rod,32,1392,207,0,145,0,"{'ok': True, 'value': 1392, 'stdout': '1392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09043478965759277}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [32, 87, 88, 82, 72, 59, 66, 48, 24, 30, 76, 53, 87, 50, 42, 25, 66, 53, 77, 13, 25, 48, 33, 74, 82, 70, 50, 92, 1, 27, 7, 61]"
595,ilp_prod,16,196,165,0,0,0,"{'ok': True, 'value': 196, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a98c72bfd64f4b589500b1230725de59-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a98c72bfd64f4b589500b1230725de59-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 207.097 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -165 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -173 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -196 found by DiveCoefficient after 4 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 4\nCbc0013I At root node, 4 cuts changed objective from -207.09709 to -196 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 4 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 6 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -196, took 4 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -207.097 to -196\nProbing was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                196.00000000\nEnumerated nodes:               0\nTotal iterations:               4\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n196.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1821737289428711}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 15, 40, 45, 3, 8]
consumption (rows=resources) = [[14, 9, 7, 4, 11, 8], [11, 16, 13, 7, 8, 13], [3, 16, 16, 1, 15, 7], [1, 7, 8, 10, 6, 3]]
capacity = [63, 57, 57, 43]
upper_bounds = [4, 3, 3, 4, 3, 4]"
596,ilp_assign,32,106,16,0,116,0,"{'ok': True, 'value': 106, 'stdout': '106\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42264842987060547}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 74, 27, 96, 79, 19, 17], [20, 17, 65, 27, 50, 68, 55], [68, 39, 32, 8, 63, 18, 45], [88, 13, 54, 14, 70, 78, 10], [74, 81, 78, 42, 91, 32, 67], [30, 87, 13, 5, 5, 88, 92], [40, 53, 45, 13, 3, 3, 16]]"
597,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08803820610046387}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 47, 28, 72, 63, 68, 60, 36, 88, 89, 26, 14, 20, 81, 12, 40, 39, 67, 56, 60, 73, 63, 25]"
598,ilp_prod,32,288,1012,0,255,0,"{'ok': True, 'value': 326, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1c74f61c1b034e5bba7120085a440c0f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1c74f61c1b034e5bba7120085a440c0f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 341.65915 (6)\n4  Obj 326.65695\nOptimal - objective value 326.65695\nOptimal objective 326.6569456 - 4 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n326.65694212000005\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16119599342346191}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [65, 50, 13, 91, 38, 79]
consumption (rows=resources) = [[12, 31, 7, 8, 29, 10], [24, 21, 25, 8, 9, 23], [31, 16, 27, 29, 3, 3], [12, 27, 11, 27, 11, 26]]
capacity = [72, 99, 93, 82]
upper_bounds = [3, 3, 3, 3, 3, 3]"
599,add,8,91962201,91962191,0,91962191,0,"{'ok': True, 'value': 91962201, 'stdout': '91962201\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08552002906799316}",1,Compute: 46506443 + 45455758
600,mul,2,3420,418,0,3420,1,"{'ok': True, 'value': 3420, 'stdout': '3420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09041357040405273}",1,Compute: 45 * 76
601,ilp_prod,4,18,The optimal solution to the linear programming problem will give the maximum profit.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_d92mmp6m/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16096782684326172}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 9, 3]
consumption (rows=resources) = [[3, 4, 1], [4, 3, 4], [2, 3, 2]]
capacity = [10, 9, 13]
upper_bounds = [3, 3, 3]"
602,knap,8,75,147,0,64,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09425735473632812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 7, 10, 13, 9, 7, 12, 14]
V = [21, 2, 3, 13, 13, 11, 30, 6]
C = 44"
603,add,32,77510340023375471541048541869824,77510340023375471541048541869824,1,77510340023375471541048541869824,1,"{'ok': True, 'value': 77510340023375471541048541869824, 'stdout': '77510340023375471541048541869824\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0929253101348877}",1,Compute: 54687837303176941468267609650182 + 22822502720198530072780932219642
604,add,2,111,111,1,111,1,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09928083419799805}",1,Compute: 22 + 89
605,ilp_partition,32,1,1,1,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dy2l661h/main.py"", line 10, in <module>\n    res = partition(weights)\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09089374542236328}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 71, 26, 57, 18, 45, 51, 53, 3, 75, 15, 69, 10, 66, 33, 36, 4, 20, 60, 38, 96, 58, 2, 13]"
606,sub,32,2073501057509462988546865836787,20734500957509462988546865836787,0,20734990575094632988446865836787,0,"{'ok': True, 'value': 2073501057509462988546865836787, 'stdout': '2073501057509462988546865836787\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10213780403137207}",1,Compute: 54393652335986786133204236798674 - 52320151278477323144657370961887
607,knap,16,417,108,0,108,0,"{'ok': True, 'value': 417, 'stdout': '417\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08975076675415039}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 18, 14, 20, 10, 1, 26, 17, 16, 2, 3, 12, 29, 10, 15, 22]
V = [39, 51, 10, 61, 29, 35, 34, 5, 47, 39, 33, 30, 40, 43, 38, 36]
C = 108"
608,lcs,16,11,7,0,10,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10267257690429688}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adaabbcdbccccaad""
T = ""addaadbdbdacdccba"""
609,mul,4,72480000,72480,0,72480000,1,"{'ok': True, 'value': 72480000, 'stdout': '72480000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11432504653930664}",1,Compute: 8000 * 9060
610,add,16,15307088527543793,15307088527541493,0,15307088527543793,1,"{'ok': True, 'value': 15307088527543793, 'stdout': '15307088527543793\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0861504077911377}",1,Compute: 9016596476847407 + 6290492050696386
611,mul,8,1062473512323944,108565333346244,0,1064446530516284,0,"{'ok': True, 'value': 1062473512323944, 'stdout': '1062473512323944\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08658170700073242}",1,Compute: 11103394 * 95689076
612,sub,16,2108560845280986,2108560845280986,1,2108560845280986,1,"{'ok': True, 'value': 2108560845280986, 'stdout': '2108560845280986\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10361075401306152}",1,Compute: 6815749479533315 - 4707188634252329
613,add,32,110014074139098790687633433527634,110014074138898788687633423907634,0,110014074138998790687633433527634,0,"{'ok': True, 'value': 110014074139098790687633433527634, 'stdout': '110014074139098790687633433527634\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0969841480255127}",1,Compute: 52239224965433536555818087153820 + 57774849173665254131815346373814
614,ilp_assign,2,7,7,1,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2459728717803955}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6], [6, 1]]"
615,sub,16,6122959017497639,6122959017497639,1,6122958987507639,0,"{'ok': True, 'value': 6122959017497639, 'stdout': '6122959017497639\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09271526336669922}",1,Compute: 9649716290783764 - 3526757273286125
616,ilp_partition,8,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0969691276550293}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 1, 8, 20, 13, 5, 9, 24]"
617,add,32,101114658647774027444456791462691,102622908647824027442670791462693,0,101114658647774027436456789462691,0,"{'ok': True, 'value': 101114658647774027444456791462691, 'stdout': '101114658647774027444456791462691\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10204100608825684}",1,Compute: 24803205613361105999134964193934 + 76311453034412921445321827268757
618,lcs,4,2,3,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09401750564575195}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbd""
T = ""dcacb"""
619,rod,2,8,5,0,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_829dd45_/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_829dd45_/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08879661560058594}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
620,ilp_assign,8,34,10,0,56,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4082322120666504}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 11, 13, 22, 11, 13, 9], [23, 1, 7, 23, 15, 10, 13], [14, 24, 24, 22, 5, 6, 16], [7, 6, 20, 7, 3, 9, 17], [17, 6, 19, 6, 22, 16, 4], [16, 8, 14, 6, 4, 2, 17], [2, 23, 24, 3, 24, 24, 4]]"
621,ilp_assign,2,9,11,0,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4111340045928955}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [5, 4]]"
622,ilp_prod,4,49,39,0,43,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__kaob4t2/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\n  File ""/tmp/cot_exec__kaob4t2/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nTypeError: LpVariable.__init__() got an unexpected keyword argument \'upper_bound\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16294407844543457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 10, 9]
consumption (rows=resources) = [[1, 2, 2], [3, 3, 2], [2, 3, 2]]
capacity = [10, 14, 15]
upper_bounds = [4, 4, 5]"
623,lcs,8,4,4,1,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07846403121948242}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabccccc""
T = ""adbdcdc"""
624,ilp_assign,32,73,0,0,187,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.7468137741088867}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[63, 58, 32, 22, 82, 77, 93], [94, 31, 80, 23, 52, 3, 73], [83, 18, 85, 90, 32, 59, 50], [48, 78, 88, 64, 9, 66, 74], [65, 43, 14, 27, 60, 15, 3], [96, 59, 1, 19, 64, 27, 10], [17, 55, 80, 76, 66, 3, 23]]"
625,knap,4,32,22,0,22,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08998489379882812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 3, 6]
V = [12, 10, 10, 11]
C = 5"
626,sub,8,26525107,26525107,1,26525107,1,"{'ok': True, 'value': 26525107, 'stdout': '26525107\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09036970138549805}",1,Compute: 63557257 - 37032150
627,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08930563926696777}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 2, 4]"
628,ilp_partition,32,1,2,0,980,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08270454406738281}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 13, 34, 15, 5, 18, 33, 73, 95, 72, 19, 88, 8, 4, 95, 24, 5, 90, 14, 6, 57, 48, 6, 2]"
629,mul,4,50759962,148414,0,49969622,0,"{'ok': True, 'value': 50759962, 'stdout': '50759962\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08746862411499023}",1,Compute: 6418 * 7909
630,ilp_assign,32,136,0,0,110,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2556900978088379}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[59, 75, 18, 36, 2, 73, 62], [40, 82, 71, 93, 13, 14, 85], [39, 12, 25, 34, 32, 94, 42], [76, 82, 38, 85, 27, 73, 89], [14, 68, 83, 70, 58, 61, 47], [17, 54, 14, 50, 53, 86, 14], [8, 31, 57, 42, 70, 37, 52]]"
631,mul,16,8324994187396642450020481414200,8233606458886668646603020,0,8338905849296856784468495045550,0,"{'ok': True, 'value': 8324994187396642450020481414200, 'stdout': '8324994187396642450020481414200\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08033990859985352}",1,Compute: 1356611726935550 * 6136607860675044
632,ilp_prod,32,531,1455,0,1000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_t0yctazj/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""Quantity"", range(6), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1787428855895996}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [75, 82, 33, 68, 95, 45]
consumption (rows=resources) = [[21, 18, 24, 10, 7, 2], [29, 4, 22, 8, 14, 9], [12, 7, 8, 23, 19, 9], [18, 17, 3, 23, 25, 30]]
capacity = [104, 83, 86, 128]
upper_bounds = [3, 5, 3, 3, 4, 4]"
633,ilp_partition,4,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08953547477722168}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 8, 11, 4]"
634,sub,8,26026548,26026548,1,26026548,1,"{'ok': True, 'value': 26026548, 'stdout': '26026548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08858704566955566}",1,Compute: 54504053 - 28477505
635,sub,16,500005848910306,,0,499948489206,0,"{'ok': True, 'value': 500005848910306, 'stdout': '500005848910306\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0934903621673584}",1,Compute: 4704994886308672 - 4204989037398366
636,knap,16,407,104,0,673,0,"{'ok': True, 'value': 407, 'stdout': '407\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09430956840515137}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 26, 24, 8, 10, 31, 25, 23, 18, 10, 9, 5, 10, 6, 17, 3]
V = [29, 46, 50, 45, 14, 61, 4, 26, 53, 3, 53, 55, 32, 14, 11, 44]
C = 123"
637,knap,4,27,14,0,14,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08532476425170898}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 3, 2]
V = [6, 4, 13, 14]
C = 6"
638,knap,2,6,7,0,1,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08549237251281738}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 4, 4]
V = [1, 5, 6]
C = 4"
639,knap,4,14,19,0,10,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08704996109008789}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 2, 8]
V = [5, 2, 9, 11]
C = 9"
640,mul,32,4647394059996771667484828612560727454228691735820981520727106677,76037009511361804558977330343787,0,4485637666284685298426406664854924853494694476947,0,"{'ok': True, 'value': 4647394059996771667484828612560727454228691735820981520727106677, 'stdout': '4647394059996771667484828612560727454228691735820981520727106677\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09475016593933105}",1,Compute: 61120158326352069040367315309471 * 76037009511361804558977330343787
641,sub,8,58144257,58144257,1,58144257,1,"{'ok': True, 'value': 58144257, 'stdout': '58144257\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08616948127746582}",1,Compute: 99034975 - 40890718
642,ilp_prod,32,729,1053,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_nmk0r5he/main.py"", line 10, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_nmk0r5he/main.py"", line 10, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16873764991760254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 25, 81, 54, 15, 92]
consumption (rows=resources) = [[3, 5, 7, 19, 22, 23], [6, 27, 7, 11, 32, 18], [14, 24, 8, 28, 3, 8], [29, 32, 11, 27, 6, 18]]
capacity = [101, 66, 85, 106]
upper_bounds = [3, 3, 9, 3, 3, 3]"
643,add,32,53919060261758057530191361525779,53918959261758057530191361525779,0,53919060261758057530191361525779,1,"{'ok': True, 'value': 53919060261758057530191361525779, 'stdout': '53919060261758057530191361525779\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08691191673278809}",1,Compute: 31968065975515623236897443486581 + 21950994286242434293293918039198
644,knap,32,1777,105,0,1093,0,"{'ok': True, 'value': 1777, 'stdout': '1777\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10334944725036621}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [26, 12, 50, 61, 43, 49, 16, 39, 47, 3, 21, 16, 3, 34, 42, 16, 31, 13, 60, 61, 63, 30, 1, 32, 37, 44, 29, 43, 52, 16, 26, 22]
V = [105, 17, 105, 117, 8, 36, 2, 48, 30, 117, 82, 114, 66, 6, 58, 106, 86, 75, 65, 120, 63, 112, 112, 68, 98, 85, 50, 27, 60, 120, 39, 11]
C = 519"
645,rod,8,184,22,0,95,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1041707992553711}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 9, 12, 9, 6, 6, 8, 15]"
646,add,32,168989528298833728991939670361127,165989526298833728292939667361227,0,168989528298833728992939670361127,0,"{'ok': True, 'value': 168989528298833728991939670361127, 'stdout': '168989528298833728991939670361127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09811544418334961}",1,Compute: 92628739660253910124905664336201 + 76360788638579818867034006024926
647,mul,32,1145141577466809767771104374669738322395387086448731936538585813,31238833152206969911641544745457,0,113056506824369459863898723644929699495656363666695396662653,0,"{'ok': True, 'value': 1145141577466809767771104374669738322395387086448731936538585813, 'stdout': '1145141577466809767771104374669738322395387086448731936538585813\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0887441635131836}",1,Compute: 36657629684414364306225821283109 * 31238833152206969911641544745457
648,sub,4,3834,3834,1,3834,1,"{'ok': True, 'value': 3834, 'stdout': '3834\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09651303291320801}",1,Compute: 7091 - 3257
649,add,8,174047442,173947442,0,173947442,0,"{'ok': True, 'value': 174047442, 'stdout': '174047442\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0912930965423584}",1,Compute: 88407344 + 85640098
650,sub,2,22,22,1,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08616971969604492}",1,Compute: 47 - 25
651,ilp_partition,4,3,0,0,5,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09620904922485352}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 8, 7, 8]"
652,lcs,8,3,5,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09230995178222656}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccacaaa""
T = ""abadddacb"""
653,rod,8,96,-1,0,58,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9n8ntqub/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_9n8ntqub/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0946359634399414}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 22, 19, 15, 9, 18, 6, 15]"
654,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08802056312561035}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [32, 13, 15, 24, 31, 38, 24, 35, 28, 34, 19, 28, 17, 19, 32, 39]"
655,rod,4,20,10,0,7,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1008305549621582}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 5, 7, 6]"
656,add,4,16311,,0,16311,1,"{'ok': True, 'value': 16311, 'stdout': '16311\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08605241775512695}",1,Compute: 9743 + 6568
657,ilp_prod,32,361,189,0,280,0,"{'ok': True, 'value': 369, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/13eb948d50904aa190efb8bd6590543e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/13eb948d50904aa190efb8bd6590543e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 1459.2555 (6)\n3  Obj 369.56977\nOptimal - objective value 369.56977\nOptimal objective 369.5697674 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n369.5697671\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1589677333831787}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [55, 33, 5, 87, 34, 33]
consumption (rows=resources) = [[32, 31, 22, 12, 21, 16], [31, 4, 22, 4, 2, 22], [2, 32, 28, 19, 2, 5], [6, 28, 2, 18, 2, 1]]
capacity = [92, 69, 106, 67]
upper_bounds = [3, 3, 3, 3, 4, 3]"
658,ilp_assign,32,108,42,0,-298,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_73xcj4ac/main.py"", line 54, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_73xcj4ac/main.py"", line 29, in hungarian_algorithm\n    x, y = path[-1]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2014622688293457}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[53, 46, 48, 78, 88, 78, 44], [95, 8, 93, 32, 96, 35, 20], [40, 21, 38, 38, 57, 66, 4], [4, 44, 53, 86, 76, 8, 80], [25, 44, 29, 42, 94, 66, 71], [35, 10, 74, 12, 19, 42, 67], [22, 45, 74, 18, 3, 35, 79]]"
659,ilp_prod,16,203,178,0,165,0,"{'ok': True, 'value': 203, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b76490e36b1f4a88b02de7025c467599-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b76490e36b1f4a88b02de7025c467599-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 211.066 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -187 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -203 found by DiveCoefficient after 10 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 5.25\nCbc0013I At root node, 4 cuts changed objective from -210.5 to -203 in 6 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 11 row cuts average 5.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 21 row cuts average 5.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -203, took 10 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -210.5 to -203\nProbing was tried 6 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 6 times and created 11 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 6 times and created 21 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                203.00000000\nEnumerated nodes:               0\nTotal iterations:               10\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n203.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1670999526977539}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 15, 7, 39, 47, 23]
consumption (rows=resources) = [[2, 9, 16, 14, 4, 6], [9, 7, 8, 11, 6, 2], [2, 1, 7, 4, 2, 16], [3, 10, 7, 12, 14, 6]]
capacity = [47, 64, 42, 61]
upper_bounds = [7, 5, 3, 3, 4, 3]"
660,lcs,16,8,6,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1063375473022461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaacbdbbbbaaddc""
T = ""aaaabdcadcabacc"""
661,ilp_partition,16,0,1,0,210,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08641219139099121}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 37, 17, 28, 4, 17, 7, 45, 46, 37, 25, 14, 35, 24, 14, 10]"
662,knap,8,99,140,0,66,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09551334381103516}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 11, 5, 11, 8, 5, 9, 6]
V = [8, 29, 31, 14, 12, 23, 16, 6]
C = 31"
663,ilp_partition,4,8,1,0,6,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08438658714294434}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 1, 10, 9]"
664,mul,32,3908650383660901472787691118377770538632865665951568910954120842,1000000007,0,38464844124350494694078922889459526665666333163964684664662,0,"{'ok': True, 'value': 3908650383660901472787691118377770538632865665951568910954120842, 'stdout': '3908650383660901472787691118377770538632865665951568910954120842\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08363008499145508}",1,Compute: 72202116658689451468627836061499 * 54134844856940899192345297596158
665,knap,8,81,113,0,113,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09483647346496582}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 9, 10, 6, 6, 8, 5, 5]
V = [15, 17, 32, 20, 10, 18, 14, 6]
C = 28"
666,ilp_assign,4,21,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lmp8jh46/main.py"", line 20, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_lmp8jh46/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10971689224243164}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 9, 8, 10], [10, 4, 11, 7], [9, 5, 8, 4], [6, 9, 11, 1]]"
667,knap,2,8,14,0,12,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0874173641204834}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 3]
V = [6, 2, 8]
C = 5"
668,ilp_partition,4,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09932661056518555}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 9, 6]"
669,sub,8,47917174,47917174,1,47917174,1,"{'ok': True, 'value': 47917174, 'stdout': '47917174\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1009063720703125}",1,Compute: 75132161 - 27214987
670,rod,16,704,42,0,124,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08774209022521973}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 22, 19, 41, 28, 22, 42, 13, 41, 2, 42, 28, 10, 21, 5, 9]"
671,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_asirjlmi/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_asirjlmi/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0956268310546875}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
672,rod,32,726,-1,0,432,0,"{'ok': True, 'value': 726, 'stdout': '726\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08238959312438965}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [12, 36, 69, 6, 2, 60, 10, 8, 45, 82, 70, 5, 53, 91, 70, 68, 35, 4, 61, 30, 88, 11, 81, 69, 85, 2, 25, 44, 48, 96, 21, 91]"
673,lcs,32,20,16,0,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10313224792480469}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdbcdbadaddaadaabdbaaadccacddaa""
T = ""abdaddbabdaabbaaaacbcacbcbadabc"""
674,mul,2,1480,40,0,1480,1,"{'ok': True, 'value': 1480, 'stdout': '1480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08664083480834961}",1,Compute: 40 * 37
675,sub,4,5404,5404,1,5404,1,"{'ok': True, 'value': 5404, 'stdout': '5404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08800554275512695}",1,Compute: 6822 - 1418
676,rod,2,4,3,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_0xca_irv/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_0xca_irv/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08714032173156738}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 3]"
677,ilp_assign,8,38,36,0,52,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5177536010742188}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 5, 10, 2, 14, 23, 3], [15, 19, 6, 3, 4, 13, 8], [10, 21, 4, 14, 21, 19, 10], [18, 1, 19, 2, 13, 24, 14], [17, 12, 8, 8, 6, 21, 21], [4, 4, 18, 20, 5, 10, 12], [16, 17, 8, 14, 5, 20, 20]]"
678,ilp_prod,2,18,35,0,30,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_f_t90qps/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20297789573669434}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 5]
consumption (rows=resources) = [[2, 2], [2, 2]]
capacity = [6, 7]
upper_bounds = [3, 3]"
679,rod,32,2624,1052,0,544,0,"{'ok': True, 'value': 2624, 'stdout': '2624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10279273986816406}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [82, 66, 28, 42, 40, 5, 32, 67, 32, 96, 86, 79, 64, 15, 72, 60, 36, 95, 81, 69, 84, 42, 33, 73, 77, 32, 5, 59, 43, 54, 60, 22]"
680,lcs,32,21,10,0,24,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08544683456420898}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabccadbcacabbdccaabccdacaccbdad""
T = ""dddcdbdcaddbccbabbdadcccdaaaccd"""
681,add,8,67359983,67360033,0,67359983,1,"{'ok': True, 'value': 67359983, 'stdout': '67359983\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09675097465515137}",1,Compute: 45417669 + 21942314
682,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09364724159240723}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadcbabd""
T = ""abacabbd"""
683,lcs,8,4,2,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371233940124512}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccdcdab""
T = ""daabacab"""
684,ilp_prod,16,250,148,0,185,0,"{'ok': True, 'value': 250, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1b0f322833824a98863641dc813c5e30-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1b0f322833824a98863641dc813c5e30-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 260.286 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -250 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 3 cuts changed objective from -260.28571 to -250 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -250, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -260.286 to -250\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                250.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n250.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21437788009643555}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [48, 11, 30, 10, 10, 16]
consumption (rows=resources) = [[4, 6, 7, 7, 12, 3], [8, 9, 7, 7, 9, 3], [7, 16, 8, 3, 12, 1], [10, 6, 7, 1, 15, 12]]
capacity = [46, 57, 40, 55]
upper_bounds = [5, 3, 5, 6, 3, 4]"
685,knap,4,25,29,0,24,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09549784660339355}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 5, 1]
V = [14, 9, 9, 11]
C = 8"
686,ilp_prod,16,272,"The actual maximum profit would be the optimal value of the objective function, which can be obtained by solving the linear programming problem.",0,103,0,"{'ok': True, 'value': 286, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6491b85855c0463e802d3503abb6fe9b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6491b85855c0463e802d3503abb6fe9b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 809.55844 (6)\n4  Obj 286.26007\nOptimal - objective value 286.26007\nOptimal objective 286.2600733 - 4 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n286.26007205999997\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17057394981384277}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 32, 30, 17, 36, 11]
consumption (rows=resources) = [[6, 16, 5, 1, 2, 13], [5, 2, 7, 13, 7, 16], [1, 13, 4, 9, 15, 2], [11, 16, 2, 16, 5, 5]]
capacity = [54, 61, 52, 35]
upper_bounds = [3, 3, 8, 3, 3, 3]"
687,mul,8,585788309717932,58643963932,0,583813564446992,0,"{'ok': True, 'value': 585788309717932, 'stdout': '585788309717932\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09306931495666504}",1,Compute: 11895173 * 49245884
688,ilp_assign,16,54,105,0,114,0,"{'ok': True, 'value': 54, 'stdout': '54\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4346592426300049}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 16, 23, 41, 4, 4, 42], [29, 21, 35, 25, 3, 3, 34], [2, 12, 36, 5, 16, 32, 44], [36, 36, 33, 16, 4, 15, 29], [1, 9, 3, 11, 29, 16, 31], [7, 43, 46, 47, 21, 44, 35], [28, 42, 37, 29, 37, 16, 16]]"
689,sub,2,12,12,1,12,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09769463539123535}",1,Compute: 79 - 67
690,add,4,11669,11669,1,11669,1,"{'ok': True, 'value': 11669, 'stdout': '11669\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08381271362304688}",1,Compute: 2516 + 9153
691,rod,16,480,502,0,432,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08360958099365234}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 47, 31, 40, 48, 37, 27, 14, 14, 44, 1, 46, 14, 24, 48, 11]"
692,knap,32,1909,2268,0,1084,0,"{'ok': True, 'value': 1909, 'stdout': '1909\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09580278396606445}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [61, 9, 26, 33, 53, 27, 16, 56, 29, 59, 29, 33, 3, 39, 53, 50, 45, 40, 1, 30, 34, 52, 28, 9, 46, 1, 18, 57, 42, 1, 11, 8]
V = [70, 99, 113, 98, 113, 40, 30, 4, 107, 87, 54, 69, 93, 83, 114, 47, 13, 117, 77, 58, 83, 54, 123, 83, 124, 11, 88, 126, 91, 65, 78, 114]
C = 499"
693,mul,16,18276489170606059196198822064768,18236459439626295859264192,0,18252003915537456486466048,0,"{'ok': True, 'value': 18276489170606059196198822064768, 'stdout': '18276489170606059196198822064768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10394096374511719}",1,Compute: 9715099744491531 * 1881245653804928
694,ilp_assign,4,17,2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1c95py_d/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_1c95py_d/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09160709381103516}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 7, 3, 4], [5, 4, 12, 8], [11, 6, 5, 7], [10, 3, 2, 7]]"
695,ilp_assign,8,36,405,0,33,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4043588638305664}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 2, 10, 15, 14, 8, 24], [24, 16, 1, 17, 20, 24, 13], [23, 11, 7, 19, 12, 10, 6], [6, 24, 23, 9, 7, 4, 12], [24, 13, 5, 10, 9, 23, 20], [6, 13, 1, 22, 3, 6, 13], [14, 3, 3, 22, 19, 8, 18]]"
696,knap,4,17,19,0,9,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10600757598876953}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 1, 8]
V = [9, 7, 3, 14]
C = 9"
697,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08295822143554688}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 5, 1]"
698,ilp_prod,2,15,18,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_diunkvz8/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1604747772216797}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3]
consumption (rows=resources) = [[2, 2], [1, 3]]
capacity = [10, 10]
upper_bounds = [5, 3]"
699,mul,4,27392508,174072,0,27255868,0,"{'ok': True, 'value': 27392508, 'stdout': '27392508\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08352327346801758}",1,Compute: 7293 * 3756
700,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0931551456451416}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""db"""
701,ilp_assign,8,39,40,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 23, 15, 22, 20, 9, 14], [2, 8, 19, 9, 7, 11, 22], [4, 23, 9, 16, 12, 10, 2], [9, 23, 4, 12, 10, 7, 11], [8, 8, 7, 7, 22, 13, 4], [18, 9, 22, 6, 12, 13, 1], [18, 22, 2, 18, 14, 22, 4]]"
702,add,16,18316131367908334,18316131367908334,1,18316131367908334,1,"{'ok': True, 'value': 18316131367908334, 'stdout': '18316131367908334\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09520697593688965}",1,Compute: 8661604300299705 + 9654527067608629
703,ilp_assign,16,48,11,0,105,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39768075942993164}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[42, 48, 34, 27, 42, 11, 28], [41, 2, 18, 17, 6, 1, 29], [19, 18, 24, 3, 27, 3, 40], [3, 13, 39, 1, 10, 6, 13], [33, 42, 26, 27, 45, 21, 7], [7, 42, 16, 21, 6, 41, 12], [12, 35, 16, 46, 32, 34, 40]]"
704,rod,32,1040,-1,0,123,0,"{'ok': True, 'value': 1040, 'stdout': '1040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08405399322509766}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [24, 65, 89, 34, 58, 96, 14, 10, 60, 46, 38, 18, 39, 44, 11, 39, 46, 44, 50, 7, 22, 21, 73, 49, 6, 37, 8, 54, 43, 27, 56, 34]"
705,ilp_assign,16,83,0,0,104,0,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39098310470581055}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 18, 23, 26, 7, 21, 38], [10, 25, 33, 19, 17, 23, 11], [37, 4, 8, 13, 31, 6, 21], [15, 17, 29, 11, 28, 41, 14], [36, 34, 36, 30, 12, 32, 45], [9, 31, 31, 36, 47, 24, 44], [40, 44, 33, 45, 3, 14, 11]]"
706,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08554911613464355}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""bad"""
707,ilp_prod,32,581,1053,0,1014,0,"{'ok': True, 'value': 634, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a849333598e147f2be9e50c0879467ad-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a849333598e147f2be9e50c0879467ad-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 448.94406 (6)\n2  Obj 634.35849\nOptimal - objective value 634.35849\nOptimal objective 634.3584906 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n634.35849026\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16659283638000488}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 48, 34, 75, 83, 42]
consumption (rows=resources) = [[23, 13, 3, 25, 11, 19], [30, 11, 27, 17, 6, 19], [9, 9, 11, 25, 3, 27], [20, 7, 26, 21, 2, 19]]
capacity = [87, 68, 65, 108]
upper_bounds = [3, 6, 3, 3, 7, 3]"
708,rod,2,6,2,0,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_edk9f9q0/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_edk9f9q0/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09210991859436035}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
709,rod,16,752,54,0,81,0,"{'ok': True, 'value': 752, 'stdout': '752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09385204315185547}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [47, 19, 36, 45, 20, 27, 39, 21, 32, 46, 20, 4, 2, 32, 47, 9]"
710,ilp_partition,32,1,1,1,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_peikvcyv/main.py"", line 10, in <module>\n    res = partition(weights)\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09130215644836426}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 75, 83, 17, 65, 26, 36, 67, 54, 86, 63, 56, 91, 26, 11, 7, 72, 41, 76, 42, 2, 90, 61, 51]"
711,ilp_assign,32,142,12,0,205,0,"{'ok': True, 'value': 142, 'stdout': '142\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3967885971069336}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[85, 34, 60, 77, 32, 79, 55], [72, 47, 52, 74, 85, 71, 36], [6, 16, 43, 17, 67, 87, 23], [8, 10, 31, 30, 70, 89, 70], [96, 70, 61, 63, 66, 13, 46], [13, 43, 26, 58, 12, 12, 16], [82, 62, 86, 19, 61, 38, 12]]"
712,rod,2,4,3,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_asldyftj/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_asldyftj/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0855710506439209}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 1]"
713,rod,2,6,6,1,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_v5pr2fg1/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_v5pr2fg1/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09912371635437012}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 2]"
714,sub,16,5081554837446238,2541596793583920,0,5081554837446238,1,"{'ok': True, 'value': 5081554837446238, 'stdout': '5081554837446238\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371567726135254}",1,Compute: 7623151631030158 - 2541596793583920
715,add,4,13228,,0,13228,1,"{'ok': True, 'value': 13228, 'stdout': '13228\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08369636535644531}",1,Compute: 7640 + 5588
716,mul,32,2896241033413983276197977268621269470880189330358301310995208950,198,0,2906099999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,"{'ok': True, 'value': 2896241033413983276197977268621269470880189330358301310995208950, 'stdout': '2896241033413983276197977268621269470880189330358301310995208950\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09255838394165039}",1,Compute: 31510381252446534271900088488550 * 91913868328365999928030631287449
717,sub,4,6981,6981,1,6981,1,"{'ok': True, 'value': 6981, 'stdout': '6981\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08701109886169434}",1,Compute: 9706 - 2725
718,knap,4,19,18,0,18,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08368325233459473}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 7, 4]
V = [1, 12, 6, 7]
C = 10"
719,sub,16,7154514179942130,7154464180042130,0,7154514180042130,0,"{'ok': True, 'value': 7154514179942130, 'stdout': '7154514179942130\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1053612232208252}",1,Compute: 8902237489708006 - 1747723309765876
720,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08919978141784668}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 71, 68, 1, 3, 84, 96, 80, 82, 63, 4, 51, 96, 70, 21, 80, 28, 6, 11, 80, 91, 61, 30, 51]"
721,rod,32,2848,-1,0,505,0,"{'ok': True, 'value': 2848, 'stdout': '2848\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09633278846740723}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [89, 26, 24, 81, 32, 76, 53, 39, 40, 93, 1, 59, 8, 26, 59, 60, 4, 12, 18, 65, 48, 74, 54, 36, 21, 78, 65, 8, 41, 42, 39, 20]"
722,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09299755096435547}",1,Compute: 73 - 52
723,rod,2,10,5,0,10,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__94ad_d1/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec__94ad_d1/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0993504524230957}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 5]"
724,add,16,8830030502432476,8829930502432476,0,8829930502432476,0,"{'ok': True, 'value': 8830030502432476, 'stdout': '8830030502432476\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10279321670532227}",1,Compute: 1267331892403372 + 7562698610029104
725,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09403038024902344}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 20, 4, 20, 6, 12, 9, 15]"
726,rod,2,5,5,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_qjokrur5/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_qjokrur5/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09705209732055664}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 5]"
727,ilp_assign,16,64,11,0,117,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40842437744140625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[30, 9, 17, 8, 11, 24, 33], [46, 31, 38, 3, 36, 39, 12], [44, 46, 27, 41, 13, 18, 1], [41, 38, 23, 1, 43, 41, 21], [22, 7, 42, 13, 6, 35, 25], [3, 25, 46, 37, 19, 16, 9], [36, 7, 23, 36, 14, 45, 13]]"
728,mul,16,22960608095384222471090316488448,228386386624833664,0,228349135821958395668992,0,"{'ok': True, 'value': 22960608095384222471090316488448, 'stdout': '22960608095384222471090316488448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11020994186401367}",1,Compute: 3390669455891104 * 6771703462716312
729,ilp_assign,2,4,0,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.447390079498291}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1], [3, 1]]"
730,rod,32,2016,1050,0,642,0,"{'ok': True, 'value': 2016, 'stdout': '2016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08987259864807129}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [63, 71, 14, 31, 43, 81, 67, 43, 48, 92, 76, 54, 44, 90, 70, 69, 9, 68, 69, 39, 18, 47, 93, 31, 64, 82, 18, 84, 36, 11, 19, 42]"
731,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09050583839416504}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 24, 17, 19, 67, 8, 71, 89, 57, 47, 76, 54, 28, 84, 31, 40, 41, 39, 82, 19, 63, 65, 37, 42]"
732,add,4,17146,16846,0,17146,1,"{'ok': True, 'value': 17146, 'stdout': '17146\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0857851505279541}",1,Compute: 7527 + 9619
733,mul,2,1768,1768,1,1768,1,"{'ok': True, 'value': 1768, 'stdout': '1768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08704113960266113}",1,Compute: 52 * 34
734,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09282398223876953}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 5, 1]"
735,sub,2,43,43,1,43,1,"{'ok': True, 'value': 43, 'stdout': '43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0902559757232666}",1,Compute: 79 - 36
736,ilp_prod,32,720,1050,0,1080,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_fxee894f/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15647411346435547}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 90, 19, 10, 29, 7]
consumption (rows=resources) = [[12, 5, 31, 26, 30, 12], [21, 14, 14, 29, 29, 14], [1, 1, 2, 16, 25, 2], [9, 3, 12, 19, 24, 15]]
capacity = [71, 125, 107, 123]
upper_bounds = [5, 8, 3, 3, 3, 5]"
737,mul,2,3015,3015,1,2955,0,"{'ok': True, 'value': 3015, 'stdout': '3015\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09396791458129883}",1,Compute: 45 * 67
738,sub,32,44283696323850401930937897831847,21106588428868627450577498059041,0,44283706323850399930937900031847,0,"{'ok': True, 'value': 44283696323850401930937897831847, 'stdout': '44283696323850401930937897831847\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09420514106750488}",1,Compute: 65390284752719029381515395890888 - 21106588428868627450577498059041
739,sub,4,7086,7086,1,7086,1,"{'ok': True, 'value': 7086, 'stdout': '7086\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08356451988220215}",1,Compute: 9072 - 1986
740,sub,32,32823395787203048006652357265044,32823395787203048006652357265044,1,32823395787203047956652357265044,0,"{'ok': True, 'value': 32823395787203048006652357265044, 'stdout': '32823395787203048006652357265044\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08378195762634277}",1,Compute: 56288287250404443531798507584830 - 23464891463201395525146150319786
741,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09246110916137695}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""a"""
742,ilp_prod,32,550,300,0,1008,0,"{'ok': True, 'value': 578, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a8554f00a2b145ca8e5aae59c44fc421-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a8554f00a2b145ca8e5aae59c44fc421-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 501.04167 (6)\n4  Obj 578.91026\nOptimal - objective value 578.91026\nOptimal objective 578.9102564 - 4 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n578.9102576399999\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17574214935302734}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [88, 29, 93, 61, 26, 66]
consumption (rows=resources) = [[15, 3, 14, 3, 18, 3], [4, 24, 13, 29, 14, 8], [23, 19, 13, 16, 11, 7], [27, 23, 30, 20, 19, 10]]
capacity = [71, 65, 72, 118]
upper_bounds = [3, 3, 3, 3, 3, 8]"
743,ilp_prod,4,45,57,0,108,0,"{'ok': True, 'value': 52, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/aeae26651c134146ad76473c908f7021-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/aeae26651c134146ad76473c908f7021-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (0) rows, 3 (0) columns and 9 (0) elements\n0  Obj -0 Dual inf 34.333333 (3)\n3  Obj 52.48\nOptimal - objective value 52.48\nOptimal objective 52.48 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n52.480000000000004\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1630725860595703}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 9, 12]
consumption (rows=resources) = [[1, 3, 3], [3, 1, 4], [2, 3, 1]]
capacity = [13, 14, 9]
upper_bounds = [4, 3, 3]"
744,add,16,9080357612535050,,0,9079357612535050,0,"{'ok': True, 'value': 9080357612535050, 'stdout': '9080357612535050\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08349061012268066}",1,Compute: 2883778441790991 + 6196579170744059
745,rod,2,12,6,0,12,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6oqdwrcw/main.py"", line 10, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_6oqdwrcw/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0889577865600586}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 1]"
746,ilp_prod,32,437,189,0,1000,0,"{'ok': True, 'value': 465, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a028f7d83de84cfea7f8c3b8767d487d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a028f7d83de84cfea7f8c3b8767d487d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 498.75115 (6)\n3  Obj 465.14078\nOptimal - objective value 465.14078\nOptimal objective 465.1407767 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n465.140769\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19608139991760254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [93, 72, 45, 37, 76, 65]
consumption (rows=resources) = [[13, 29, 13, 32, 5, 5], [18, 16, 31, 23, 16, 6], [21, 31, 9, 22, 13, 32], [9, 22, 14, 8, 14, 25]]
capacity = [122, 82, 124, 97]
upper_bounds = [4, 4, 3, 3, 5, 3]"
747,rod,8,44,22,0,27,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0901479721069336}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 3, 18, 15, 5, 4, 1, 17]"
748,knap,32,1690,1045,0,1459,0,"{'ok': True, 'value': 1690, 'stdout': '1690\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09000110626220703}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 31, 54, 28, 54, 9, 2, 54, 52, 61, 22, 56, 19, 24, 23, 11, 14, 7, 35, 25, 8, 38, 6, 35, 3, 38, 24, 40, 56, 34, 1, 37]
V = [60, 119, 43, 119, 10, 98, 125, 29, 72, 85, 9, 121, 78, 8, 48, 29, 53, 118, 50, 33, 80, 105, 14, 45, 71, 127, 12, 126, 109, 77, 7, 66]
C = 465"
749,ilp_prod,16,134,146,0,1034,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_gs63trbo/main.py"", line 10, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_gs63trbo/main.py"", line 10, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17308425903320312}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 34, 32, 22, 29, 26]
consumption (rows=resources) = [[6, 3, 4, 5, 13, 9], [3, 10, 6, 16, 14, 8], [12, 9, 9, 11, 6, 9], [7, 4, 10, 13, 13, 11]]
capacity = [61, 38, 36, 47]
upper_bounds = [3, 3, 4, 3, 3, 4]"
750,ilp_prod,2,16,20,0,36,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_k4box4cm/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1544938087463379}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4]
consumption (rows=resources) = [[1, 2], [3, 2]]
capacity = [6, 6]
upper_bounds = [3, 3]"
751,add,16,11557561100251715,11557561097251715,0,11557561095251715,0,"{'ok': True, 'value': 11557561100251715, 'stdout': '11557561100251715\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09748387336730957}",1,Compute: 2139360784240622 + 9418200316011093
752,add,2,142,142,1,142,1,"{'ok': True, 'value': 142, 'stdout': '142\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09394502639770508}",1,Compute: 66 + 76
753,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08346819877624512}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 10, 16, 9, 13, 23, 20, 8]"
754,lcs,8,4,4,1,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09273409843444824}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badacdba""
T = ""aacacbccd"""
755,knap,32,1743,2545,0,2456,0,"{'ok': True, 'value': 1743, 'stdout': '1743\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09885478019714355}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 62, 8, 28, 49, 36, 24, 55, 62, 5, 60, 64, 12, 4, 45, 21, 43, 43, 60, 48, 17, 52, 54, 19, 8, 53, 41, 8, 62, 58, 19, 14]
V = [40, 104, 30, 90, 57, 4, 96, 7, 27, 94, 91, 12, 109, 70, 94, 111, 26, 25, 41, 89, 89, 108, 30, 111, 30, 19, 78, 44, 100, 39, 106, 59]
C = 576"
756,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09346365928649902}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 3, 15, 29, 27, 32, 47, 18, 19, 39, 6, 2, 17, 6, 7, 16]"
757,add,2,115,115,1,115,1,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09418654441833496}",1,Compute: 87 + 28
758,sub,32,46025238201622092048799832756006,46025238199622092048800832755906,0,46025238199622092048799832755996,0,"{'ok': True, 'value': 46025238201622092048799832756006, 'stdout': '46025238201622092048799832756006\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09529304504394531}",1,Compute: 66766875952478989509410770973427 - 20741637750856897460610938217421
759,ilp_assign,32,90,0,0,44,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4244530200958252}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 9, 49, 72, 30, 81, 64], [12, 52, 63, 30, 1, 94, 78], [51, 23, 68, 74, 48, 43, 83], [25, 91, 39, 5, 84, 78, 83], [11, 41, 62, 6, 22, 33, 9], [50, 61, 20, 75, 35, 50, 19], [69, 7, 24, 36, 89, 17, 96]]"
760,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09991979598999023}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 5, 9, 1, 15, 11, 16, 12]"
761,lcs,32,17,12,0,24,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09462952613830566}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadccdacaccbbcbabbddaabbabdbddbb""
T = ""cbadcccddccdaadabccadcdbccacbdb"""
762,ilp_prod,16,176,155,0,155,0,"{'ok': True, 'value': 200, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/93541f29d9cf47cea65080eafd9d400d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/93541f29d9cf47cea65080eafd9d400d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 581.55611 (6)\n3  Obj 200.44677\nOptimal - objective value 200.44677\nOptimal objective 200.4467668 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n200.4467664\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1733076572418213}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 32, 15, 40, 26, 20]
consumption (rows=resources) = [[2, 5, 1, 12, 15, 10], [10, 11, 6, 1, 10, 6], [1, 15, 15, 4, 14, 16], [3, 2, 15, 14, 8, 9]]
capacity = [40, 62, 60, 37]
upper_bounds = [6, 4, 3, 3, 3, 3]"
763,rod,2,6,6,1,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_nl4yd5t0/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_nl4yd5t0/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09320211410522461}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
764,ilp_prod,8,60,100,0,108,0,"{'ok': True, 'value': 63, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/acf4409de36f4c379bf7a475aebf6b34-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/acf4409de36f4c379bf7a475aebf6b34-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 39.191652 (4)\n1  Obj 63.333333\nOptimal - objective value 63.333333\nOptimal objective 63.33333333 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n63.3333333\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.165726900100708}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 20, 10, 6]
consumption (rows=resources) = [[7, 6, 6, 7], [5, 4, 2, 3], [7, 6, 5, 6], [6, 1, 1, 1]]
capacity = [20, 24, 22, 20]
upper_bounds = [3, 3, 3, 3]"
765,mul,4,4871304,28,0,4919424,0,"{'ok': True, 'value': 4871304, 'stdout': '4871304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08497810363769531}",1,Compute: 2088 * 2333
766,knap,32,1974,121,0,1459,0,"{'ok': True, 'value': 1974, 'stdout': '1974\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08815431594848633}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 63, 46, 10, 42, 29, 5, 38, 6, 56, 34, 47, 9, 42, 12, 5, 50, 12, 52, 58, 28, 47, 4, 51, 58, 50, 26, 5, 31, 8, 38, 37]
V = [98, 119, 86, 106, 98, 30, 106, 117, 75, 121, 54, 2, 71, 104, 54, 110, 17, 81, 104, 123, 3, 101, 116, 60, 3, 43, 62, 54, 126, 76, 121, 63]
C = 510"
767,sub,4,4275,4275,1,4275,1,"{'ok': True, 'value': 4275, 'stdout': '4275\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08559799194335938}",1,Compute: 7249 - 2974
768,rod,4,48,24,0,36,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10213232040405273}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 12, 1, 12]"
769,knap,16,374,1034,0,1064,0,"{'ok': True, 'value': 374, 'stdout': '374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09038233757019043}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 14, 20, 6, 14, 11, 16, 28, 21, 19, 11, 16, 32, 1, 9, 32]
V = [9, 1, 40, 57, 35, 26, 18, 44, 40, 18, 24, 42, 52, 38, 45, 58]
C = 127"
770,mul,4,8257665,82208,0,8250315,0,"{'ok': True, 'value': 8257665, 'stdout': '8257665\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0895838737487793}",1,Compute: 7473 * 1105
771,ilp_partition,2,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11020755767822266}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 5, 6, 2]"
772,knap,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09160447120666504}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 1]
V = [4, 1, 1]
C = 4"
773,rod,4,28,10,0,47,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09035873413085938}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 8, 9, 3]"
774,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09640812873840332}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 16, 12, 22, 16, 20, 23, 5]"
775,ilp_assign,32,99,11,0,110,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4042038917541504}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[71, 54, 15, 27, 47, 49, 24], [24, 52, 33, 80, 94, 20, 6], [47, 94, 87, 4, 34, 61, 42], [77, 22, 92, 79, 28, 86, 9], [90, 8, 25, 4, 64, 77, 46], [51, 62, 9, 12, 14, 90, 93], [31, 13, 31, 53, 28, 25, 95]]"
776,ilp_assign,8,31,46,0,74,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.423001766204834}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 23, 9, 11, 9, 15, 1], [11, 24, 11, 21, 8, 12, 24], [12, 12, 23, 13, 7, 1, 13], [21, 19, 18, 10, 13, 20, 1], [18, 4, 11, 1, 14, 5, 3], [5, 2, 22, 18, 10, 7, 21], [12, 8, 19, 3, 8, 22, 14]]"
777,ilp_prod,16,144,159,0,156,0,"{'ok': True, 'value': 144, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/374aa021ebc24cb3a2e03ce254a315e2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/374aa021ebc24cb3a2e03ce254a315e2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 145.903 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -131 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -144 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -145.90345 to -144 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 2.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -144, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -145.903 to -144\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                144.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n144.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1881859302520752}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 35, 13, 23, 48, 36]
consumption (rows=resources) = [[7, 9, 12, 8, 13, 12], [13, 11, 11, 14, 13, 10], [8, 4, 9, 3, 11, 15], [5, 16, 3, 9, 7, 6]]
capacity = [39, 49, 52, 33]
upper_bounds = [3, 3, 3, 3, 3, 3]"
778,ilp_assign,16,69,125,0,104,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39727330207824707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 27, 43, 32, 31, 21, 47], [37, 11, 16, 23, 21, 40, 11], [37, 27, 48, 25, 22, 21, 48], [35, 27, 10, 29, 6, 42, 45], [20, 25, 13, 2, 45, 34, 29], [15, 20, 1, 43, 1, 19, 40], [1, 4, 39, 16, 33, 22, 24]]"
779,sub,16,2431711349330824,2431711349330825,0,2431711349330824,1,"{'ok': True, 'value': 2431711349330824, 'stdout': '2431711349330824\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08423304557800293}",1,Compute: 9956741148044098 - 7525029798713274
780,ilp_prod,4,52,-1,0,43,0,"{'ok': True, 'value': 61, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d1cadf7905444b25821f35705841c147-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d1cadf7905444b25821f35705841c147-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (0) rows, 3 (0) columns and 9 (0) elements\n0  Obj -0 Dual inf 34.666666 (3)\n2  Obj 61.5\nOptimal - objective value 61.5\nOptimal objective 61.5 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n61.5\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17470121383666992}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 11, 10]
consumption (rows=resources) = [[4, 1, 1], [4, 3, 1], [1, 1, 3]]
capacity = [13, 9, 15]
upper_bounds = [3, 3, 5]"
781,ilp_assign,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_60l3344m/main.py"", line 58, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_60l3344m/main.py"", line 53, in assignment_problem\n    total_min_cost = sum(min_cost_assignment[i] * cost_matrix[i][min_cost_assignment[i]] for i in range(n))\n  File ""/tmp/cot_exec_60l3344m/main.py"", line 53, in <genexpr>\n    total_min_cost = sum(min_cost_assignment[i] * cost_matrix[i][min_cost_assignment[i]] for i in range(n))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2344682216644287}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4], [3, 3]]"
782,knap,16,305,173,0,1085,0,"{'ok': True, 'value': 305, 'stdout': '305\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08577466011047363}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 11, 15, 28, 25, 18, 14, 23, 20, 30, 9, 28, 25, 29, 27, 14]
V = [7, 33, 7, 62, 7, 53, 23, 4, 2, 33, 23, 9, 5, 35, 43, 3]
C = 173"
783,add,4,6607,6722,0,6607,1,"{'ok': True, 'value': 6607, 'stdout': '6607\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09539794921875}",1,Compute: 4211 + 2396
784,add,8,93596716,93596716,1,93596716,1,"{'ok': True, 'value': 93596716, 'stdout': '93596716\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1007242202758789}",1,Compute: 75100960 + 18495756
785,knap,8,109,149,0,66,0,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834341049194336}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 16, 9, 6, 1, 7, 11, 9]
V = [7, 2, 28, 20, 21, 13, 22, 27]
C = 32"
786,mul,32,6978346787846746158452723146097710190122315227762546150723501390,7246844648985666648,0,698726494654749175463895553497947899495744366664694460560250,0,"{'ok': True, 'value': 6978346787846746158452723146097710190122315227762546150723501390, 'stdout': '6978346787846746158452723146097710190122315227762546150723501390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09332084655761719}",1,Compute: 86087794136580527762861636405485 * 81060815390105329119993949810374
787,ilp_prod,32,558,1893,0,1029,0,"{'ok': True, 'value': 604, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/920663b6705943cbbb2bde9ced911a85-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/920663b6705943cbbb2bde9ced911a85-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 190.46201 (6)\n3  Obj 604.46975\nOptimal - objective value 604.46975\nOptimal objective 604.4697544 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n604.4697596\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16557955741882324}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [61, 94, 91, 46, 24, 60]
consumption (rows=resources) = [[18, 5, 21, 31, 16, 6], [18, 13, 6, 31, 2, 3], [20, 13, 8, 25, 19, 32], [8, 19, 12, 21, 4, 7]]
capacity = [66, 127, 91, 106]
upper_bounds = [3, 5, 3, 3, 4, 3]"
788,rod,8,80,22,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__j_czvm5/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec__j_czvm5/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0937812328338623}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 3, 21, 13, 7, 9, 24, 13]"
789,ilp_partition,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08672213554382324}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 4, 2, 3]"
790,mul,4,14404860,107882660,0,14430180,0,"{'ok': True, 'value': 14404860, 'stdout': '14404860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09537982940673828}",1,Compute: 5065 * 2844
791,ilp_partition,16,0,1,0,160,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08416533470153809}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 48, 45, 4, 1, 18, 25, 34, 42, 42, 26, 13, 42, 46, 4, 25]"
792,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39504575729370117}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [1, 2]]"
793,ilp_partition,4,6,1,0,1,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08426594734191895}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 3, 9, 11]"
794,lcs,8,5,5,1,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08466410636901855}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbccaaab""
T = ""bddccada"""
795,ilp_assign,16,39,16,0,105,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38585519790649414}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 6, 28, 37, 33, 15, 33], [46, 22, 18, 33, 25, 29, 7], [37, 1, 42, 27, 6, 23, 19], [35, 48, 4, 4, 24, 12, 7], [16, 23, 34, 3, 22, 36, 16], [37, 15, 21, 6, 44, 6, 4], [7, 21, 32, 25, 41, 45, 26]]"
796,knap,2,7,10,0,10,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10602164268493652}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 5]
V = [2, 5, 7]
C = 5"
797,rod,4,20,11,0,16,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08356213569641113}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 7, 11, 3]"
798,sub,8,16633491,16633491,1,16633491,1,"{'ok': True, 'value': 16633491, 'stdout': '16633491\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08140897750854492}",1,Compute: 56616608 - 39983117
799,add,32,48994902148688164256776131167091,48994902148688164256776131167091,1,48994902148688164256776131167091,1,"{'ok': True, 'value': 48994902148688164256776131167091, 'stdout': '48994902148688164256776131167091\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11999201774597168}",1,Compute: 25286530183183406584938268342771 + 23708371965504757671837862824320
800,rod,4,32,6,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_rp4kmolw/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_rp4kmolw/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09182524681091309}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 1, 6, 1]"
801,ilp_prod,32,317,100,0,1002,0,"{'ok': True, 'value': 353, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d8bca65b8f26437ba761c4c9af109fbe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d8bca65b8f26437ba761c4c9af109fbe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 390.11858 (6)\n3  Obj 353.44164\nOptimal - objective value 353.44164\nOptimal objective 353.4416442 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n353.441647\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16801929473876953}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 48, 23, 73, 80, 89]
consumption (rows=resources) = [[3, 21, 5, 27, 1, 26], [9, 7, 32, 14, 24, 19], [1, 31, 25, 3, 2, 25], [4, 16, 18, 17, 30, 19]]
capacity = [78, 90, 116, 79]
upper_bounds = [10, 3, 3, 3, 3, 3]"
802,rod,16,240,50,0,84,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tar66gin/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_tar66gin/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08905315399169922}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [4, 30, 12, 34, 48, 31, 9, 2, 16, 12, 13, 39, 3, 22, 23, 31]"
803,ilp_assign,2,3,8,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38652801513671875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [1, 6]]"
804,ilp_prod,2,40,-1,0,26,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_3u94tj4d/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17955923080444336}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[3, 2], [2, 1]]
capacity = [10, 7]
upper_bounds = [3, 5]"
805,sub,16,5862201284164277,5862201284164277,1,5862201284164277,1,"{'ok': True, 'value': 5862201284164277, 'stdout': '5862201284164277\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09565353393554688}",1,Compute: 9324107193244256 - 3461905909079979
806,knap,2,10,11,0,2,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09125161170959473}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 5]
V = [10, 1, 1]
C = 7"
807,ilp_prod,4,22,33,0,35,0,"{'ok': True, 'value': 22, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b53ca03819034cb8a36b84556ae11c8b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b53ca03819034cb8a36b84556ae11c8b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 1 (-2) rows, 2 (-1) columns and 2 (-7) elements\n0  Obj -0 Dual inf 20.333331 (2)\n1  Obj 22\nOptimal - objective value 22\nAfter Postsolve, objective 22, infeasibilities - dual 0 (0), primal 0 (0)\nOptimal objective 22 - 1 iterations time 0.002, Presolve 0.00\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n22.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15973401069641113}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 7, 6]
consumption (rows=resources) = [[4, 3, 4], [4, 3, 4], [4, 1, 2]]
capacity = [10, 8, 16]
upper_bounds = [3, 3, 3]"
808,ilp_prod,4,62,70,0,70,0,"{'ok': True, 'value': 62, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d8dd1ec4c6114ee0a25ad517dc72996e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d8dd1ec4c6114ee0a25ad517dc72996e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (0) rows, 3 (0) columns and 9 (0) elements\n0  Obj -0 Dual inf 23 (3)\n2  Obj 62\nOptimal - objective value 62\nOptimal objective 62 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n62.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16159725189208984}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 7, 6]
consumption (rows=resources) = [[4, 1, 3], [1, 1, 1], [3, 1, 2]]
capacity = [14, 8, 13]
upper_bounds = [3, 8, 4]"
809,rod,8,104,19,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_pgdtsn6c/main.py"", line 11, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_pgdtsn6c/main.py"", line 6, in rod_cutting\n    dp[i] = max(dp[i], dp[i - j] + P[j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0844869613647461}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 1, 4, 1, 4, 11, 24, 7]"
810,ilp_prod,4,55,58,0,66,0,"{'ok': True, 'value': 57, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2678fd6b1dbd4eb687db709a7009e4d0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2678fd6b1dbd4eb687db709a7009e4d0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (0) rows, 3 (0) columns and 9 (0) elements\n0  Obj -0 Dual inf 35 (3)\n1  Obj 57.25\nOptimal - objective value 57.25\nOptimal objective 57.25 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n57.25\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1895456314086914}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 9, 4]
consumption (rows=resources) = [[2, 4, 3], [1, 4, 4], [2, 4, 4]]
capacity = [11, 14, 11]
upper_bounds = [5, 3, 3]"
811,add,16,10773109569860720,10773109569860720,1,10773109569860720,1,"{'ok': True, 'value': 10773109569860720, 'stdout': '10773109569860720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08768200874328613}",1,Compute: 3346930820983675 + 7426178748877045
812,ilp_assign,16,50,8,0,104,0,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3961670398712158}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[33, 33, 11, 32, 5, 14, 32], [24, 31, 48, 39, 27, 17, 12], [48, 1, 42, 32, 17, 3, 5], [39, 42, 47, 3, 23, 36, 31], [28, 37, 41, 32, 8, 13, 43], [4, 24, 25, 17, 23, 34, 39], [22, 9, 22, 10, 8, 47, 23]]"
813,mul,4,34008874,31834,0,33753934,0,"{'ok': True, 'value': 34008874, 'stdout': '34008874\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09794831275939941}",1,Compute: 7382 * 4607
814,ilp_assign,8,33,0,0,76,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4511222839355469}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 4, 5, 2, 1, 9, 14], [17, 22, 19, 10, 3, 11, 16], [19, 11, 9, 11, 8, 2, 24], [17, 8, 15, 17, 23, 1, 22], [13, 11, 2, 17, 7, 23, 24], [4, 18, 8, 1, 24, 18, 11], [5, 23, 8, 19, 16, 18, 16]]"
815,sub,2,40,40,1,40,1,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08985304832458496}",1,Compute: 61 - 21
816,knap,16,464,240,0,293,0,"{'ok': True, 'value': 464, 'stdout': '464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11359524726867676}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 1, 2, 30, 4, 10, 6, 4, 17, 20, 5, 5, 6, 15, 3, 21]
V = [43, 60, 4, 63, 52, 38, 4, 31, 46, 45, 42, 22, 54, 25, 51, 7]
C = 77"
817,lcs,8,4,5,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11974763870239258}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acacbcaa""
T = ""bcdcddaa"""
818,ilp_prod,4,14,15,0,27,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2aec6e3e89e845a286cdacfdbf81922a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2aec6e3e89e845a286cdacfdbf81922a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (0) rows, 3 (0) columns and 9 (0) elements\n0  Obj -0 Dual inf 9.9999997 (3)\n3  Obj 16.3\nOptimal - objective value 16.3\nOptimal objective 16.3 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.3\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1714341640472412}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3, 4]
consumption (rows=resources) = [[2, 2, 4], [1, 4, 4], [3, 2, 2]]
capacity = [13, 16, 11]
upper_bounds = [3, 4, 3]"
819,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08808135986328125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcc""
T = ""abac"""
820,ilp_prod,4,55,60,0,45,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ybtiq0j2/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, lowBound=0) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1604475975036621}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 5, 10]
consumption (rows=resources) = [[3, 3, 3], [1, 4, 3], [2, 3, 3]]
capacity = [16, 10, 14]
upper_bounds = [5, 3, 3]"
821,lcs,32,19,10,0,14,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09423398971557617}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daddacbdbaabbcdbbddaccdadcaabcbd""
T = ""bbdbbbcdcbcdbdbacaddbdaadbbbdabdb"""
822,ilp_prod,4,25,0,0,33,0,"{'ok': True, 'value': 27, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6024a04ff4be4688a88925b0cf4ee6fa-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6024a04ff4be4688a88925b0cf4ee6fa-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 3 (0) rows, 3 (0) columns and 9 (0) elements\n0  Obj -0 Dual inf 19 (3)\n2  Obj 27.75\nOptimal - objective value 27.75\nOptimal objective 27.75 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n27.75\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2015836238861084}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 3, 5]
consumption (rows=resources) = [[4, 1, 4], [4, 4, 1], [4, 4, 2]]
capacity = [10, 13, 15]
upper_bounds = [3, 3, 3]"
823,mul,2,1728,2424,0,1728,1,"{'ok': True, 'value': 1728, 'stdout': '1728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0925896167755127}",1,Compute: 24 * 72
824,sub,8,33509044,33509044,1,33509044,1,"{'ok': True, 'value': 33509044, 'stdout': '33509044\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09499430656433105}",1,Compute: 72509215 - 39000171
825,knap,2,15,16,0,9,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09040999412536621}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 3]
V = [6, 7, 9]
C = 5"
826,rod,8,128,-1,0,40,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09427380561828613}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 14, 15, 15, 12, 1, 7, 19]"
827,add,16,9738464851029639,9738464851029639,1,9738464851029639,1,"{'ok': True, 'value': 9738464851029639, 'stdout': '9738464851029639\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0911557674407959}",1,Compute: 8198127216730284 + 1540337634299355
828,mul,32,2140064715206032763756498195327322303271654267119415173679812792,1000000007,0,214056549526058878468758586864587496495744366664664,0,"{'ok': True, 'value': 2140064715206032763756498195327322303271654267119415173679812792, 'stdout': '2140064715206032763756498195327322303271654267119415173679812792\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08405375480651855}",1,Compute: 40849843944103939974751427287674 * 52388565257050850720537989556108
829,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09333539009094238}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""dc"""
830,add,2,138,138,1,138,1,"{'ok': True, 'value': 138, 'stdout': '138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0937037467956543}",1,Compute: 50 + 88
831,mul,2,8272,3324,0,8312,0,"{'ok': True, 'value': 8272, 'stdout': '8272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08468508720397949}",1,Compute: 88 * 94
832,rod,16,576,65,0,129,0,"{'ok': True, 'value': 576, 'stdout': '576\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0902552604675293}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [36, 14, 14, 9, 40, 29, 25, 46, 10, 6, 17, 48, 47, 47, 25, 21]"
833,rod,4,16,8,0,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_73x1p2l3/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_73x1p2l3/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0855100154876709}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 8, 1, 5]"
834,knap,4,27,26,0,33,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10179519653320312}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 4, 6, 3]
V = [13, 11, 9, 16]
C = 10"
835,ilp_prod,4,36,105,0,0,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cc227f02a3614ed09878870924c47552-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cc227f02a3614ed09878870924c47552-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 38.6667 - 0.00 seconds\nCgl0004I processed model has 2 rows, 3 columns (3 integer (0 of which binary)) and 6 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -36 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -38.666667 to -38.666667 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -36, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -38.6667 to -38.6667\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1712496280670166}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8, 12]
consumption (rows=resources) = [[1, 1, 2], [3, 2, 3], [3, 3, 3]]
capacity = [16, 15, 10]
upper_bounds = [3, 3, 3]"
836,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09541201591491699}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 19, 18, 7, 5, 13, 19, 22]"
837,knap,32,1598,1044,0,2433,0,"{'ok': True, 'value': 1598, 'stdout': '1598\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09810376167297363}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [40, 64, 3, 64, 50, 38, 54, 26, 38, 11, 50, 39, 3, 7, 14, 3, 13, 19, 3, 38, 23, 7, 29, 19, 59, 8, 47, 40, 60, 32, 46, 50]
V = [84, 123, 19, 62, 20, 117, 11, 49, 67, 26, 101, 90, 104, 75, 96, 27, 9, 23, 57, 128, 2, 108, 53, 59, 71, 92, 12, 84, 31, 8, 92, 43]
C = 498"
838,mul{'ok': True, 'value': 10124408248081506014734868356440, 'stdout': '10124408248081506014734868356440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08884358406066895}",1,Compute: 3262867933223653 * 3102916959951480
839,ilp_prod,2,18,18,1,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_dmp78p_8/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17476224899291992}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[2, 2], [1, 2]]
capacity = [8, 6]
upper_bounds = [4, 3]"
840,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09039044380187988}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 85, 16, 83, 30, 83, 73, 18, 8, 57, 9, 44, 16, 45, 89, 41, 8, 54, 10, 36, 72, 50, 34, 56]"
841,knap,16,365,144,0,106,0,"{'ok': True, 'value': 365, 'stdout': '365\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08766913414001465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 17, 9, 20, 3, 13, 19, 17, 16, 6, 30, 8, 32, 21, 12, 20]
V = [14, 1, 27, 29, 47, 23, 48, 43, 30, 40, 25, 8, 49, 33, 38, 50]
C = 132"
842,sub,4,114,114,1,114,1,"{'ok': True, 'value': 114, 'stdout': '114\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09876847267150879}",1,Compute: 5746 - 5632
843,sub,16,4758069426576989,-524193057342301,0,-544103036342301,0,"{'ok': True, 'value': 4758069426576989, 'stdout': '4758069426576989\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09243512153625488}",1,Compute: 9223029345870895 - 4464959919293906
844,ilp_prod,32,305,1011,0,1003,0,"{'ok': True, 'value': 349, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e134e8bbc29e471e8f5a9aeb2b0640cf-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e134e8bbc29e471e8f5a9aeb2b0640cf-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 374.78456 (6)\n2  Obj 349.29542\nOptimal - objective value 349.29542\nOptimal objective 349.295416 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n349.295415861\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16546916961669922}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [50, 61, 90, 10, 56, 40]
consumption (rows=resources) = [[26, 11, 13, 29, 3, 7], [9, 19, 32, 23, 29, 20], [5, 15, 25, 25, 22, 18], [26, 9, 27, 30, 26, 19]]
capacity = [95, 103, 89, 68]
upper_bounds = [3, 5, 3, 3, 3, 3]"
845,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09635353088378906}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [39, 50, 68, 77, 47, 88, 69, 66, 16, 30, 59, 55, 54, 65, 78, 38, 35, 67, 36, 84, 30, 1, 40, 25]"
846,add,2,151,151,1,151,1,"{'ok': True, 'value': 151, 'stdout': '151\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08524060249328613}",1,Compute: 80 + 71
847,mul,2,3010,147,0,3010,1,"{'ok': True, 'value': 3010, 'stdout': '3010\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09972786903381348}",1,Compute: 43 * 70
848,sub,16,4563932715563078,4563932715563078,1,4563932715563078,1,"{'ok': True, 'value': 4563932715563078, 'stdout': '4563932715563078\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08590435981750488}",1,Compute: 6564796303029816 - 2000863587466738
849,rod,8,176,22,0,66,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09416937828063965}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 8, 1, 4, 15, 24, 17, 6]"
850,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08375239372253418}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbb""
T = ""adaa"""
851,ilp_prod,16,247,145,0,102,0,"{'ok': True, 'value': 247, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3f65ed6ade6d41f18fe45a37ce53be61-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3f65ed6ade6d41f18fe45a37ce53be61-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 281.216 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -247 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 0 rows 0 columns\nCbc0013I At root node, 12 cuts changed objective from -277.96552 to -277.96552 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 5 row cuts average 2.6 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 1.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -247, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -277.966 to -277.966\nProbing was tried 1 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                247.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n247.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15778136253356934}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 17, 35, 32, 13, 32]
consumption (rows=resources) = [[12, 8, 5, 4, 10, 16], [2, 13, 7, 14, 15, 5], [13, 2, 1, 8, 12, 1], [5, 3, 4, 8, 6, 13]]
capacity = [55, 45, 36, 58]
upper_bounds = [3, 3, 6, 3, 3, 3]"
852,sub,16,1168298352604683,1168301352604683,0,1168298352604683,1,"{'ok': True, 'value': 1168298352604683, 'stdout': '1168298352604683\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10322308540344238}",1,Compute: 3907165485675603 - 2738867133070920
853,rod,32,2752,1055,0,2084,0,"{'ok': True, 'value': 2752, 'stdout': '2752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09358453750610352}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [86, 16, 75, 54, 48, 60, 71, 77, 42, 13, 46, 83, 5, 59, 48, 38, 83, 65, 18, 37, 87, 16, 53, 14, 93, 66, 12, 74, 23, 14, 88, 90]"
854,mul,8,1966455276086701,213565204444441,0,20000000000000000,0,"{'ok': True, 'value': 1966455276086701, 'stdout': '1966455276086701\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08702397346496582}",1,Compute: 21350677 * 92102713
855,sub,4,3003,3003,1,3003,1,"{'ok': True, 'value': 3003, 'stdout': '3003\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08496546745300293}",1,Compute: 9217 - 6214
856,ilp_prod,32,416,The total profit from the selected products.,0,1005,0,"{'ok': True, 'value': 416, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fbc803fa2eb74d7cac5a93ffd1eaf157-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fbc803fa2eb74d7cac5a93ffd1eaf157-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 449.412 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -326 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -335 found by DiveCoefficient after 109 iterations and 0 nodes (0.01 seconds)\nCbc0031I 4 added rows had average density of 5.75\nCbc0013I At root node, 4 cuts changed objective from -449.41206 to -416.10534 in 39 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 88 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 40 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0010I After 0 nodes, 1 on tree, -335 best solution, best possible -416.10534 (0.01 seconds)\nCbc0012I Integer solution of -416 found by rounding after 110 iterations and 1 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -416, took 110 iterations and 1 nodes (0.01 seconds)\nCbc0032I Strong branching done 8 times (17 iterations), fathomed 0 nodes and fixed 0 variables\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -449.412 to -416.105\nProbing was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 40 times and created 88 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nKnapsack was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 40 times and created 42 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                416.00000000\nEnumerated nodes:               1\nTotal iterations:               110\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n416.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18880629539489746}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [85, 83, 36, 66, 81, 88]
consumption (rows=resources) = [[27, 17, 2, 32, 18, 28], [32, 32, 26, 27, 14, 20], [31, 23, 23, 12, 23, 15], [4, 8, 2, 23, 10, 24]]
capacity = [101, 113, 122, 121]
upper_bounds = [3, 3, 4, 3, 5, 3]"
857,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08764767646789551}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""cc"""
858,ilp_partition,16,0,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_pistjuic/main.py"", line 12, in <module>\n    res = partition(weights)\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09312939643859863}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 30, 45, 47, 30, 1, 26, 8, 17, 14, 38, 25, 13, 6, 7, 8]"
859,rod,16,368,50,0,145,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_b0_balya/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_b0_balya/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09130477905273438}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [23, 28, 7, 48, 8, 44, 2, 10, 35, 37, 24, 16, 2, 6, 36, 7]"
860,lcs,8,4,4,1,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08649039268493652}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdcccdd""
T = ""dcbbdbcbb"""
861,lcs,32,19,10,0,13,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08521533012390137}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdbcdbccbbcbaccdcddcaabcaabcdda""
T = ""dacadcbcdddaccadccbbabccabdddcbdb"""
862,sub,16,339440790605791,339440790505791,0,339440790595791,0,"{'ok': True, 'value': 339440790605791, 'stdout': '339440790605791\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0851752758026123}",1,Compute: 4355868522809974 - 4016427732204183
863,ilp_prod,8,92,106,0,104,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0c8fijbj/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\n  File ""/tmp/cot_exec_0c8fijbj/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nTypeError: LpVariable.__init__() got an unexpected keyword argument \'upper_bound\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16438770294189453}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 23, 19, 19]
consumption (rows=resources) = [[4, 7, 5, 7], [1, 1, 7, 2], [5, 1, 1, 8], [7, 6, 8, 8]]
capacity = [31, 21, 16, 27]
upper_bounds = [3, 4, 3, 3]"
864,rod,32,1312,-1,0,250,0,"{'ok': True, 'value': 1312, 'stdout': '1312\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08511662483215332}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [41, 12, 32, 34, 45, 33, 21, 22, 82, 75, 30, 19, 38, 82, 86, 64, 53, 58, 20, 7, 91, 48, 7, 43, 13, 27, 80, 4, 20, 39, 90, 8]"
865,rod,2,4,2,0,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1le9dlc6/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_1le9dlc6/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0912017822265625}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
866,rod,32,3040,-1,0,674,0,"{'ok': True, 'value': 3040, 'stdout': '3040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09023356437683105}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [95, 94, 60, 32, 22, 46, 20, 19, 43, 22, 50, 92, 71, 45, 45, 41, 51, 21, 57, 50, 17, 89, 96, 59, 44, 81, 24, 77, 7, 5, 58, 34]"
867,mul,32,1428852596277303145762897938295145994653915998175091602653880060,4800000000000000000000,0,14304144314354774034148349889748646665666333464964684664666420,0,"{'ok': True, 'value': 1428852596277303145762897938295145994653915998175091602653880060, 'stdout': '1428852596277303145762897938295145994653915998175091602653880060\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09965801239013672}",1,Compute: 16245644418890404414136045616370 * 87952965080033148206708641043438
868,ilp_prod,8,30,107,0,102,0,"{'ok': True, 'value': 35, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/18745ccc152b4971810227c1c34f792b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/18745ccc152b4971810227c1c34f792b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 29 (4)\n1  Obj 35.75\nOptimal - objective value 35.75\nOptimal objective 35.75 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n35.75\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18078351020812988}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 13, 6, 6]
consumption (rows=resources) = [[2, 5, 5, 6], [3, 1, 8, 7], [7, 4, 2, 7], [5, 8, 7, 8]]
capacity = [28, 20, 29, 22]
upper_bounds = [4, 3, 3, 3]"
869,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10655808448791504}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 7, 23, 6, 16, 15, 2, 24]"
870,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08610987663269043}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 34, 45, 67, 78, 86, 48, 33, 14, 10, 29, 39, 34, 73, 83, 68, 7, 51, 81, 68, 18, 14, 40, 92]"
871,rod,2,3,2,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_shmd7bu0/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_shmd7bu0/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09411025047302246}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 3]"
872,knap,2,4,7,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09619402885437012}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 1]
V = [1, 5, 3]
C = 4"
873,ilp_partition,4,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10071992874145508}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 2, 2, 10]"
874,rod,16,320,46,0,133,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0998387336730957}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 22, 37, 22, 21, 6, 20, 41, 26, 5, 45, 32, 40, 41, 21, 38]"
875,ilp_assign,16,73,42,0,104,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40256309509277344}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 31, 38, 34, 22, 42, 44], [31, 28, 35, 18, 40, 3, 5], [6, 15, 13, 14, 18, 42, 42], [21, 42, 35, 12, 35, 26, 15], [16, 33, 6, 2, 24, 1, 12], [20, 26, 31, 4, 10, 43, 45], [24, 39, 8, 20, 10, 25, 43]]"
876,lcs,16,8,7,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09582376480102539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcbbbcaacddcbac""
T = ""abadaccbaaaabcaa"""
877,add,8,87072141,87072141,1,87072141,1,"{'ok': True, 'value': 87072141, 'stdout': '87072141\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09248685836791992}",1,Compute: 61579452 + 25492689
878,ilp_assign,16,65,0,0,103,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3937833309173584}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 18, 10, 44, 17, 15, 36], [46, 27, 14, 16, 44, 3, 33], [9, 18, 38, 24, 15, 17, 15], [48, 2, 34, 39, 46, 5, 32], [18, 35, 14, 2, 23, 25, 27], [29, 36, 24, 28, 46, 47, 17], [18, 35, 19, 44, 22, 37, 19]]"
879,ilp_partition,8,1,1,1,13,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08372855186462402}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 13, 13, 2, 10, 6, 6, 11]"
880,sub,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0840158462524414}",1,Compute: 47 - 40
881,mul,4,31444768,16156,0,31759888,0,"{'ok': True, 'value': 31444768, 'stdout': '31444768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0859215259552002}",1,Compute: 5429 * 5792
882,ilp_assign,4,21,0,0,-3,0,"{'ok': True, 'value': 37, 'stdout': '37\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20807385444641113}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 9, 8, 4], [11, 12, 6, 11], [6, 7, 5, 6], [7, 12, 5, 2]]"
883,ilp_assign,2,3,5,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4000258445739746}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [2, 3]]"
884,ilp_prod,4,24,45,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_y3mj7oyv/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, lowBound=0) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15195298194885254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 12, 5]
consumption (rows=resources) = [[3, 1, 4], [1, 4, 3], [3, 3, 4]]
capacity = [14, 10, 8]
upper_bounds = [3, 3, 3]"
885,knap,16,383,104,0,643,0,"{'ok': True, 'value': 383, 'stdout': '383\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0902090072631836}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 18, 23, 13, 21, 10, 5, 25, 13, 14, 14, 25, 11, 32, 20, 6]
V = [13, 40, 28, 4, 7, 45, 12, 58, 38, 40, 64, 49, 36, 29, 48, 14]
C = 133"
886,knap,2,9,9,1,6,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09439301490783691}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 4]
V = [6, 9, 3]
C = 6"
887,knap,4,20,25,0,14,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10121464729309082}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 1, 4]
V = [8, 9, 6, 14]
C = 9"
888,add,4,12622,12622,1,12622,1,"{'ok': True, 'value': 12622, 'stdout': '12622\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09250259399414062}",1,Compute: 2936 + 9686
889,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09357237815856934}",1,Compute: 59 + 63
890,lcs,16,10,8,0,11,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09456586837768555}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdccdccbaccbabdb""
T = ""bddbccdaddabacca"""
891,knap,32,1676,2443,0,1299,0,"{'ok': True, 'value': 1676, 'stdout': '1676\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09038805961608887}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 53, 62, 23, 15, 33, 57, 55, 39, 18, 38, 52, 50, 4, 37, 5, 33, 30, 8, 60, 12, 47, 6, 21, 29, 31, 56, 41, 34, 5, 32, 40]
V = [17, 63, 82, 48, 104, 81, 19, 67, 77, 83, 23, 84, 8, 75, 120, 120, 25, 116, 122, 13, 5, 36, 106, 46, 29, 1, 62, 102, 106, 2, 89, 98]
C = 523"
892,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37885570526123047}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [4, 1]]"
893,knap,2,7,2,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08169174194335938}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 2]
V = [1, 7, 1]
C = 2"
894,sub,16,118700103186604,118700103186604,1,117700103185,0,"{'ok': True, 'value': 118700103186604, 'stdout': '118700103186604\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0919342041015625}",1,Compute: 8420966413003583 - 8302266309816979
895,ilp_prod,8,63,65,0,63,1,"{'ok': True, 'value': 65, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/37f5be76a4a84eaaac4387b138dedace-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/37f5be76a4a84eaaac4387b138dedace-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 45.333333 (4)\n1  Obj 65.4\nOptimal - objective value 65.4\nOptimal objective 65.4 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n65.4\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16834449768066406}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 3, 12, 8]
consumption (rows=resources) = [[2, 3, 5, 3], [7, 5, 7, 6], [7, 8, 8, 2], [5, 6, 5, 5]]
capacity = [25, 28, 32, 16]
upper_bounds = [3, 3, 3, 3]"
896,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08029532432556152}",1,Compute: 52 + 70
897,mul,8,821212823625946,8000000000000,0,831354405964246,0,"{'ok': True, 'value': 821212823625946, 'stdout': '821212823625946\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10178875923156738}",1,Compute: 25389242 * 32344913
898,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09318923950195312}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 5, 17, 4, 11, 19, 19, 18]"
899,sub,16,3367278173107920,3367278173107920,1,3367278173107920,1,"{'ok': True, 'value': 3367278173107920, 'stdout': '3367278173107920\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09265685081481934}",1,Compute: 9222809134480766 - 5855530961372846
900,knap,4,22,22,1,12,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11814212799072266}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 1, 1, 8]
V = [3, 12, 10, 5]
C = 8"
901,mul{'ok': True, 'value': 544430102304096825154606234830045344225997199031268580226236320, 'stdout': '544430102304096825154606234830045344225997199031268580226236320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10580921173095703}",1,Compute: 42576375867997776773780023829130 * 12787140549304332674272838104464
902,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09363269805908203}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""ddd"""
903,ilp_assign,2,2,2,1,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38402295112609863}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3], [6, 1]]"
904,add,16,12017351579542721,12017351579542721,1,11917351579542721,0,"{'ok': True, 'value': 12017351579542721, 'stdout': '12017351579542721\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09374475479125977}",1,Compute: 7920347103759780 + 4097004475782941
905,lcs,32,21,10,0,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09369969367980957}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daccdabbddccbabccadbdababacdbaca""
T = ""abbabbbcbbabccdbccbddabcbcdcbadda"""
906,lcs,32,16,10,0,24,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11081385612487793}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbabcbbcacbaaaabdbcaaccddbdaaaad""
T = ""cacaabbbadabbdbbbbbbbabbdacdcbbbc"""
907,add,16,9731214030696438,9731214030696438,1,9731214030696438,1,"{'ok': True, 'value': 9731214030696438, 'stdout': '9731214030696438\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08329439163208008}",1,Compute: 6177116007873265 + 3554098022823173
908,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08351254463195801}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""cba"""
909,ilp_assign,4,18,11,0,12,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_rdzz66nk/main.py"", line 26, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_rdzz66nk/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09493827819824219}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4, 8, 5], [6, 11, 8, 10], [3, 9, 11, 2], [4, 5, 9, 11]]"
910,mul,2,1122,1152,0,1122,1,"{'ok': True, 'value': 1122, 'stdout': '1122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08434629440307617}",1,Compute: 33 * 34
911,add,32,114972507876736682911507834485582,114972505876736685011487834485582,0,115000000000000000000000000000000,0,"{'ok': True, 'value': 114972507876736682911507834485582, 'stdout': '114972507876736682911507834485582\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09152722358703613}",1,Compute: 91058914207675897908147204743891 + 23913593669060785003360629741691
912,ilp_prod,8,62,84,0,0,0,"{'ok': True, 'value': 64, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ab066e8db0d14d8597571f5407e0bcf8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ab066e8db0d14d8597571f5407e0bcf8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 65 (4)\n3  Obj 64\nOptimal - objective value 64\nOptimal objective 64 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n64.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1611309051513672}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 12, 15, 17]
consumption (rows=resources) = [[5, 1, 3, 8], [3, 2, 2, 8], [5, 5, 5, 7], [1, 5, 6, 8]]
capacity = [18, 17, 25, 23]
upper_bounds = [3, 4, 3, 3]"
913,mul,16,30898791521507738221283728969000,31240566629842444500000000000000,0,304389798883374656862660516050,0,"{'ok': True, 'value': 30898791521507738221283728969000, 'stdout': '30898791521507738221283728969000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08664298057556152}",1,Compute: 5212418257303622 * 5927918673489500
914,add,8,190667088,190667088,1,191067088,0,"{'ok': True, 'value': 190667088, 'stdout': '190667088\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10567927360534668}",1,Compute: 91490973 + 99176115
915,rod,16,688,54,0,123,0,"{'ok': True, 'value': 688, 'stdout': '688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09150481224060059}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [43, 20, 28, 25, 19, 21, 31, 4, 16, 18, 45, 22, 27, 21, 4, 6]"
916,knap,2,8,8,1,11,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08719325065612793}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 5]
V = [6, 2, 3]
C = 5"
917,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08821606636047363}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [32, 25, 12, 21, 32, 2, 35, 46, 13, 20, 22, 44, 38, 42, 16, 11]"
918,ilp_assign,16,72,105,0,110,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ozue8t3h/main.py"", line 9, in <module>\n    res = hungarian_algorithm(C)\nNameError: name \'hungarian_algorithm\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2241208553314209}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 46, 21, 25, 32, 26, 40], [34, 26, 3, 38, 21, 10, 11], [17, 41, 45, 11, 38, 11, 30], [7, 39, 48, 23, 40, 40, 15], [35, 41, 40, 26, 21, 9, 38], [34, 39, 29, 34, 7, 26, 25], [19, 22, 29, 37, 43, 41, 21]]"
919,mul,2,4488,384,0,4488,1,"{'ok': True, 'value': 4488, 'stdout': '4488\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0998392105102539}",1,Compute: 51 * 88
920,rod,16,191,100,0,43,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_0f9upo0y/main.py"", line 12, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_0f9upo0y/main.py"", line 5, in rod_cutting\n    dp[i] = P[i]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08412456512451172}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [1, 16, 38, 8, 5, 42, 3, 13, 16, 10, 14, 22, 27, 34, 27, 6]"
921,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39887547492980957}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [3, 3]]"
922,ilp_prod,4,51,65,0,110,0,"{'ok': True, 'value': 52, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fc52a7fca16f455384cd20851dfa948a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fc52a7fca16f455384cd20851dfa948a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 2 (-1) rows, 3 (0) columns and 6 (-3) elements\n0  Obj -0 Dual inf 29.33333 (3)\n1  Obj 52.75\nOptimal - objective value 52.75\nAfter Postsolve, objective 52.75, infeasibilities - dual 0 (0), primal 0 (0)\nOptimal objective 52.75 - 1 iterations time 0.002, Presolve 0.00\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n52.75\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17885255813598633}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 10, 11]
consumption (rows=resources) = [[1, 1, 3], [1, 1, 1], [4, 3, 4]]
capacity = [13, 14, 16]
upper_bounds = [4, 5, 4]"
923,add,4,9696,9796,0,9706,0,"{'ok': True, 'value': 9696, 'stdout': '9696\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0885324478149414}",1,Compute: 8569 + 1127
924,add,2,103,103,1,103,1,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0856776237487793}",1,Compute: 81 + 22
925,ilp_prod,8,50,60,0,60,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_boghs4dc/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_boghs4dc/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1910548210144043}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4, 15, 5]
consumption (rows=resources) = [[7, 8, 8, 3], [3, 1, 2, 3], [2, 7, 2, 5], [2, 2, 4, 5]]
capacity = [28, 21, 32, 30]
upper_bounds = [4, 3, 3, 6]"
926,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0889885425567627}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 8, 1, 4]"
927,sub,16,2263258896659069,2263258896659069,1,2263258896659069,1,"{'ok': True, 'value': 2263258896659069, 'stdout': '2263258896659069\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09435176849365234}",1,Compute: 8599046266962764 - 6335787370303695
928,lcs,32,18,13,0,20,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09021115303039551}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbadbdcccbdaacdcbadbbbccaddbabb""
T = ""bdadbbadaabdccdaaabcabdaccccccdb"""
929,lcs,16,10,5,0,8,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0877218246459961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadccaddbabadcac""
T = ""dbcdadddbbaabdc"""
930,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10171198844909668}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""cad"""
931,sub,8,63552289,63552289,1,63552289,1,"{'ok': True, 'value': 63552289, 'stdout': '63552289\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08420276641845703}",1,Compute: 76498810 - 12946521
932,knap,16,451,151,0,858,0,"{'ok': True, 'value': 451, 'stdout': '451\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10706186294555664}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 9, 16, 11, 23, 22, 15, 16, 3, 13, 32, 24, 12, 26, 31, 32]
V = [27, 58, 50, 39, 30, 16, 60, 54, 35, 41, 12, 13, 20, 29, 64, 24]
C = 151"
933,knap,16,411,1034,0,1080,0,"{'ok': True, 'value': 411, 'stdout': '411\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10184025764465332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 26, 24, 14, 16, 13, 21, 2, 7, 4, 6, 15, 23, 7, 26, 18]
V = [26, 24, 57, 58, 59, 29, 12, 24, 16, 44, 24, 10, 34, 56, 39, 27]
C = 112"
934,knap,32,1448,1745,0,2145,0,"{'ok': True, 'value': 1448, 'stdout': '1448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11072397232055664}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 60, 46, 62, 27, 52, 44, 13, 27, 8, 8, 58, 30, 13, 43, 22, 19, 63, 33, 47, 2, 15, 31, 60, 56, 60, 57, 6, 50, 16, 58, 9]
V = [84, 105, 35, 46, 44, 89, 112, 53, 25, 105, 78, 108, 54, 8, 62, 25, 7, 91, 119, 49, 84, 3, 68, 34, 38, 74, 16, 53, 72, 14, 73, 67]
C = 558"
935,ilp_prod,16,90,165,0,150,0,"{'ok': True, 'value': 90, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b39e3c44b1db4775ac789edd1050cddf-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b39e3c44b1db4775ac789edd1050cddf-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 97.0909 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -84 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -90 found by DiveCoefficient after 3 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3\nCbc0013I At root node, 2 cuts changed objective from -97.090909 to -90 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 2.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 3 row cuts average 3.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -90, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -97.0909 to -90\nProbing was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                90.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n90.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2178330421447754}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 30, 12, 22, 5, 9]
consumption (rows=resources) = [[4, 10, 15, 10, 5, 14], [9, 12, 9, 14, 14, 10], [16, 14, 8, 6, 15, 10], [5, 4, 6, 5, 9, 10]]
capacity = [49, 38, 52, 39]
upper_bounds = [3, 3, 3, 3, 3, 3]"
936,lcs,16,9,7,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09095001220703125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbaccabadadccdba""
T = ""bbdbcaabaccdccccb"""
937,add,4,13491,13491,1,13491,1,"{'ok': True, 'value': 13491, 'stdout': '13491\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08445858955383301}",1,Compute: 9932 + 3559
938,ilp_partition,8,0,3,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09880733489990234}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 15, 6, 13, 14, 12, 4, 11]"
939,ilp_assign,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40583324432373047}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [1, 5]]"
940,knap,32,1737,1045,0,1084,0,"{'ok': True, 'value': 1737, 'stdout': '1737\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0913393497467041}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 25, 30, 48, 28, 59, 47, 40, 17, 12, 39, 34, 37, 52, 15, 62, 60, 55, 47, 10, 52, 34, 16, 34, 6, 36, 13, 9, 29, 58, 17, 50]
V = [52, 96, 120, 67, 89, 35, 125, 43, 74, 39, 6, 72, 97, 34, 10, 100, 101, 5, 50, 86, 90, 100, 99, 83, 70, 58, 126, 83, 77, 81, 47, 4]
C = 542"
941,knap,4,18,4,0,17,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09400343894958496}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 1, 3, 6]
V = [1, 16, 2, 1]
C = 8"
942,ilp_prod,32,407,227,0,1003,0,"{'ok': True, 'value': 435, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c5b4f0ec451e4a0b9cb713ff53683722-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c5b4f0ec451e4a0b9cb713ff53683722-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 1567.7972 (6)\n3  Obj 435.36736\nOptimal - objective value 435.36736\nOptimal objective 435.367357 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n435.36735964\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2101588249206543}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [67, 21, 57, 94, 28, 34]
consumption (rows=resources) = [[6, 9, 31, 18, 6, 12], [2, 10, 20, 32, 16, 12], [24, 4, 16, 28, 32, 2], [1, 7, 15, 4, 2, 24]]
capacity = [91, 70, 124, 70]
upper_bounds = [5, 7, 3, 3, 3, 3]"
943,ilp_assign,16,29,286,0,76,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.667083740234375}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 18, 47, 25, 31, 26, 43], [12, 19, 46, 19, 39, 17, 1], [14, 15, 15, 30, 1, 6, 26], [21, 5, 32, 1, 46, 24, 29], [43, 32, 4, 18, 37, 44, 18], [13, 12, 39, 36, 17, 17, 33], [6, 7, 27, 25, 34, 5, 23]]"
944,ilp_assign,4,16,14,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_hc_4wz50/main.py"", line 33, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_hc_4wz50/main.py"", line 8, in hungarian_algorithm\n    cost_matrix[:,j] = [x - np.min(cost_matrix[:,j]) for x in cost_matrix[:,j]]\nTypeError: list indices must be integers or slices, not tuple\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22388529777526855}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 7, 4, 7], [1, 10, 5, 1], [10, 6, 12, 6], [6, 11, 8, 11]]"
945,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1092524528503418}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""a"""
946,mul{'ok': True, 'value': 37921216593650006713681882012584, 'stdout': '37921216593650006713681882012584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0929257869720459}",1,Compute: 6217219175789292 * 6099385516489502
947,mul,4,11220115,1478765,0,11285365,0,"{'ok': True, 'value': 11220115, 'stdout': '11220115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08314824104309082}",1,Compute: 1165 * 9631
948,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08676505088806152}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [59, 61, 68, 83, 14, 74, 84, 11, 73, 49, 55, 74, 94, 24, 84, 19, 25, 75, 93, 50, 71, 27, 2, 79]"
949,mul,16,50138072129103174321490924158594,5287380877646033,0,498446891592284878856885667844654918,0,"{'ok': True, 'value': 50138072129103174321490924158594, 'stdout': '50138072129103174321490924158594\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08823132514953613}",1,Compute: 9482591341410018 * 5287380877646033
950,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08514618873596191}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""cab"""
951,knap,8,99,140,0,60,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08510637283325195}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 9, 12, 10, 7, 10, 13, 3]
V = [12, 25, 8, 7, 9, 30, 10, 28]
C = 40"
952,rod,4,40,10,0,15,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371710777282715}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 3, 7, 5]"
953,knap,32,1761,1054,0,1699,0,"{'ok': True, 'value': 1761, 'stdout': '1761\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09295105934143066}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 23, 16, 39, 5, 52, 55, 15, 30, 21, 45, 11, 19, 31, 64, 43, 57, 37, 58, 37, 58, 3, 2, 12, 63, 35, 37, 56, 12, 47, 31, 29]
V = [103, 74, 111, 89, 87, 16, 115, 114, 47, 83, 64, 68, 84, 102, 91, 65, 68, 121, 123, 87, 108, 28, 5, 5, 80, 59, 56, 38, 46, 25, 125, 88]
C = 540"
954,ilp_partition,16,0,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_oieazcmd/main.py"", line 10, in <module>\n    res = partition(weights)\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10346031188964844}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [48, 11, 39, 1, 45, 46, 20, 28, 27, 3, 13, 36, 5, 32, 12, 48]"
955,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1018056869506836}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [35, 48, 37, 21, 15, 11, 32, 27, 8, 23, 4, 6, 10, 8, 7, 25]"
956,lcs,8,4,5,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08437895774841309}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daacccdd""
T = ""cdcbadcca"""
957,ilp_prod,16,122,150,0,168,0,"{'ok': True, 'value': 122, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1756d8762ec846fea187ae2e99db01f8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1756d8762ec846fea187ae2e99db01f8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 126.921 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -88 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -122 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3\nCbc0013I At root node, 3 cuts changed objective from -126.92105 to -122.92157 in 5 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 9 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -122, took 5 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -126.921 to -122.922\nProbing was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 5 times and created 9 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                122.00000000\nEnumerated nodes:               0\nTotal iterations:               5\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n122.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17233538627624512}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 14, 22, 33, 31, 34]
consumption (rows=resources) = [[7, 10, 6, 7, 6, 9], [4, 14, 12, 16, 14, 4], [14, 9, 6, 13, 2, 1], [9, 11, 6, 10, 15, 12]]
capacity = [53, 58, 57, 37]
upper_bounds = [4, 3, 4, 3, 3, 3]"
958,lcs,16,8,6,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09238290786743164}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbbbacdaaacbbcd""
T = ""ccccdbdbdbdccaab"""
959,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09514617919921875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""b"""
960,add,8,121218489,,0,121218489,1,"{'ok': True, 'value': 121218489, 'stdout': '121218489\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08843111991882324}",1,Compute: 68344354 + 52874135
961,ilp_assign,2,7,7,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1r2ufm5p/main.py"", line 30, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_1r2ufm5p/main.py"", line 3, in assignment_problem\n    C = np.array(C)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08431863784790039}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [3, 6]]"
962,rod,8,60,-1,0,93,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_kcf8kfha/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_kcf8kfha/main.py"", line 7, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09403800964355469}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 13, 23, 20, 11, 18, 5, 2]"
963,ilp_assign,4,7,15,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ph0n_ucn/main.py"", line 23, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_ph0n_ucn/main.py"", line 3, in assignment_problem\n    cost_matrix = np.array(cost_matrix)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09866571426391602}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 3, 12, 6], [1, 4, 1, 1], [7, 9, 1, 3], [2, 10, 10, 4]]"
964,ilp_prod,4,42,36,0,42,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_sfpro6_h/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_sfpro6_h/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1677229404449463}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 12]
consumption (rows=resources) = [[1, 3, 2], [4, 1, 1], [1, 1, 3]]
capacity = [15, 13, 9]
upper_bounds = [3, 5, 3]"
965,ilp_partition,8,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08769369125366211}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 20, 8, 13, 20, 16, 16, 20]"
966,ilp_assign,4,14,11,0,-20,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20763325691223145}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 10, 11, 6], [4, 7, 9, 9], [2, 9, 2, 12], [8, 2, 9, 8]]"
967,sub,32,8246193549949779819980378903075,8245623550000780375943038903057,0,8246193549949779720080388903077,0,"{'ok': True, 'value': 8246193549949779819980378903075, 'stdout': '8246193549949779819980378903075\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08174443244934082}",1,Compute: 40156300776555950493485711113798 - 31910107226606170673505332210723
968,ilp_partition,4,1,0,0,5,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09120988845825195}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 4, 11, 1]"
969,mul,8,6305754793381400,623894683862420,0,6310343553823220,0,"{'ok': True, 'value': 6305754793381400, 'stdout': '6305754793381400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09209918975830078}",1,Compute: 77475160 * 81390665
970,lcs,32,18,10,0,22,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08531904220581055}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacdcbccddbdcddbbdbbbcaaddacacbb""
T = ""acaaabcdadbdabcbcbacdaaacacdddc"""
971,knap,8,93,110,0,100,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09366154670715332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 7, 10, 4, 15, 9, 8, 9]
V = [20, 6, 24, 10, 29, 2, 25, 29]
C = 37"
972,rod,8,72,-1,0,24,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09271025657653809}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 17, 4, 18, 22, 22, 11, 1]"
973,knap,4,15,17,0,16,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09144115447998047}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 1, 4]
V = [11, 3, 2, 12]
C = 5"
974,ilp_prod,2,16,The solution to the problem is found using linear programming techniques.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_7htnmrrb/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1683943271636963}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 5]
consumption (rows=resources) = [[1, 3], [3, 3]]
capacity = [8, 7]
upper_bounds = [3, 3]"
975,knap,4,26,22,0,27,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08533191680908203}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 3, 4, 8]
V = [14, 5, 12, 10]
C = 11"
976,add,32,105644311618440656237414590391497,105644311618440656237414590391507,0,105644311618440656237414590391597,0,"{'ok': True, 'value': 105644311618440656237414590391497, 'stdout': '105644311618440656237414590391497\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09786057472229004}",1,Compute: 72051133410661423150078310630018 + 33593178207779233087336279761479
977,lcs,4,3,1,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08817744255065918}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addd""
T = ""ddd"""
978,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08538174629211426}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 5, 7, 9]"
979,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09752416610717773}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""a"""
980,add,16,12688773957492775,12688773957492775,1,12688773957492775,1,"{'ok': True, 'value': 12688773957492775, 'stdout': '12688773957492775\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08359503746032715}",1,Compute: 6053830446487104 + 6634943511005671
981,lcs,32,17,15,0,24,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371782302856445}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbdcbabcccbcdccadcbcbadcdaacbbd""
T = ""dabcacbbddddbaadccdddcdddbaacca"""
982,knap,16,339,129,0,104,0,"{'ok': True, 'value': 339, 'stdout': '339\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10708761215209961}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 28, 28, 31, 13, 11, 31, 4, 13, 3, 32, 1, 11, 7, 11, 14]
V = [15, 16, 55, 25, 3, 21, 49, 21, 16, 54, 43, 29, 59, 8, 15, 15]
C = 129"
983,add,32,85090874343960722123374031120288,16329276003556095564468903332869,0,70394525940760336113352018120708,0,"{'ok': True, 'value': 85090874343960722123374031120288, 'stdout': '85090874343960722123374031120288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09692668914794922}",1,Compute: 68761598340404626558905127787419 + 16329276003556095564468903332869
984,mul{'ok': True, 'value': 3284988205592670026568634543672321479955645967980422266208543166, 'stdout': '3284988205592670026568634543672321479955645967980422266208543166\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08508801460266113}",1,Compute: 40921523051977069280218530706123 * 80275316278433584959021141682042
985,ilp_prod,2,18,18,1,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_pv4hwp0q/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(2)])\n  File ""/tmp/cot_exec_pv4hwp0q/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(2)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1830134391784668}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[2, 1], [1, 3]]
capacity = [9, 8]
upper_bounds = [4, 3]"
986,add,2,71,71,1,71,1,"{'ok': True, 'value': 71, 'stdout': '71\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09488487243652344}",1,Compute: 49 + 22
987,knap,2,8,11,0,3,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0926976203918457}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 3]
V = [3, 2, 8]
C = 4"
988,mul,2,462,462,1,462,1,"{'ok': True, 'value': 462, 'stdout': '462\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09708094596862793}",1,Compute: 33 * 14
989,mul,32,5941591638852638884052159028592269722583400544770833848524300236,76031971873314394202552685499932,0,599999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,"{'ok': True, 'value': 5941591638852638884052159028592269722583400544770833848524300236, 'stdout': '5941591638852638884052159028592269722583400544770833848524300236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09299278259277344}",1,Compute: 78145962710958062625478258341173 * 76031971873314394202552685499932
990,mul,8,3859636368994812,7,0,3840216959461352,0,"{'ok': True, 'value': 3859636368994812, 'stdout': '3859636368994812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09302854537963867}",1,Compute: 72137244 * 53504073
991,mul,8,3995143642696312,3953476391478912,0,4000000000000000,0,"{'ok': True, 'value': 3995143642696312, 'stdout': '3995143642696312\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09213614463806152}",1,Compute: 42351836 * 94332242
992,rod,8,184,-1,0,50,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__r7e0sw2/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec__r7e0sw2/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], dp[i - j] + P[j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09627270698547363}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 19, 1, 18, 13, 1, 4, 4]"
993,ilp_prod,8,66,100,0,108,0,"{'ok': True, 'value': 66, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/65b1a36682a74514bffd2d793921e2b2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/65b1a36682a74514bffd2d793921e2b2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 47.333333 (4)\n2  Obj 66.727273\nOptimal - objective value 66.727273\nOptimal objective 66.72727273 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n66.7272719\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17567849159240723}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 12, 16, 5]
consumption (rows=resources) = [[4, 2, 3, 8], [3, 8, 6, 8], [3, 8, 5, 8], [6, 4, 1, 6]]
capacity = [32, 24, 28, 19]
upper_bounds = [3, 3, 4, 3]"
994,ilp_prod,8,31,78,0,0,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/84ca7707ecb84e40ac84afcc24419fca-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/84ca7707ecb84e40ac84afcc24419fca-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 19.163365 (4)\n1  Obj 36\nOptimal - objective value 36\nOptimal objective 36 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0000004\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21726036071777344}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 14, 6, 3]
consumption (rows=resources) = [[7, 6, 3, 8], [4, 7, 1, 4], [8, 7, 7, 3], [3, 7, 7, 8]]
capacity = [22, 24, 18, 21]
upper_bounds = [3, 3, 3, 3]"
995,sub,2,12,12,1,12,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08507156372070312}",1,Compute: 40 - 28
996,mul{'ok': True, 'value': -5171162796716891545, 'stdout': '-5171162796716891545\n', 'stderr': '/tmp/cot_exec_s7abpfwz/main.py:4: RuntimeWarning: overflow encountered in scalar multiply\n  return np.int64(a) * np.int64(b)\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21295857429504395}",0,Compute: 6716420573663239 * 3999145013494433
997,knap,2,9,11,0,11,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09074807167053223}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 4]
V = [2, 2, 9]
C = 5"
998,ilp_prod,4,46,The exact answer will depend on the solution of the linear programming problem. It cannot be determined without solving the problem.,0,108,0,"{'ok': True, 'value': 52, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a827c57bfce54daab9a9743826902cc4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a827c57bfce54daab9a9743826902cc4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 29 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 2 (-1) rows, 3 (0) columns and 6 (-3) elements\n0  Obj -0 Dual inf 33.33333 (3)\n1  Obj 52.666667\nOptimal - objective value 52.666667\nAfter Postsolve, objective 52.666667, infeasibilities - dual 0 (0), primal 0 (0)\nOptimal objective 52.66666667 - 1 iterations time 0.002, Presolve 0.00\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n52.666667000000004\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16141819953918457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 8, 12]
consumption (rows=resources) = [[3, 4, 2], [2, 1, 2], [1, 2, 4]]
capacity = [11, 15, 14]
upper_bounds = [3, 3, 3]"
999,mul,16,33110953036925319949160854441239,33016298488855588155311,0,32968920288985469586466818448448,0,"{'ok': True, 'value': 33110953036925319949160854441239, 'stdout': '33110953036925319949160854441239\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11648917198181152}",1,Compute: 8878585961646673 * 3729304776679143
