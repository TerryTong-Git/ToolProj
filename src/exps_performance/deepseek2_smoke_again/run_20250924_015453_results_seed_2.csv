idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,ilp_partition,4,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15160584449768066}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 11, 5, 11]"
1,ilp_partition,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1021432876586914}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 2, 3, 9]"
2,rod,4,16,13,0,9,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08816075325012207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 6, 7, 4]"
3,ilp_assign,4,16,3,0,19,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.4407172203063965}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 10, 10, 7], [6, 9, 4, 5], [11, 3, 11, 5], [10, 10, 4, 11]]"
4,ilp_prod,32,372,300,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_nsw_ip1m/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_nsw_ip1m/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.25185608863830566}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 36, 52, 75, 15, 69]
consumption (rows=resources) = [[30, 19, 32, 8, 15, 16], [3, 6, 27, 25, 2, 28], [1, 1, 1, 8, 31, 22], [22, 23, 6, 3, 15, 10]]
capacity = [75, 117, 87, 89]
upper_bounds = [3, 3, 3, 4, 3, 3]"
5,sub,4,2385,2385,1,2385,1,"{'ok': True, 'value': 2385, 'stdout': '2385\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08981752395629883}",1,Compute: 9814 - 7429
6,ilp_assign,8,20,44,0,46,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.2622628211975098}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 23, 18, 15, 11, 22, 16], [23, 24, 13, 10, 4, 13, 1], [3, 2, 2, 3, 23, 12, 12], [1, 19, 16, 1, 3, 10, 16], [4, 13, 16, 1, 23, 2, 3], [12, 1, 8, 22, 6, 12, 3], [6, 4, 11, 18, 11, 3, 13]]"
7,rod,2,6,6,1,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_oxza2cks/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_oxza2cks/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08973264694213867}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
8,mul,32,624197856190792560367568811761286248393556605275896336196557560,"The final answer will be the result of the multiplication modulo a given number. This number is not provided in the problem statement, so it is not possible to give a definitive answer without more information.",0,30035959916475630546394097651276,0,"{'ok': True, 'value': 624197856190792560367568811761286248393556605275896336196557560, 'stdout': '624197856190792560367568811761286248393556605275896336196557560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10220813751220703}",1,Compute: 20781684951190828996285570924810 * 30035959916475630546394097651276
9,sub,32,52702866917222968392529472282621,52702966917222968192529472282621,0,52702866917222968392529472282621,1,"{'ok': True, 'value': 52702866917222968392529472282621, 'stdout': '52702866917222968392529472282621\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.087493896484375}",1,Compute: 90891856561373323701787398844740 - 38188989644150355309257926562119
10,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0981283187866211}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adac""
T = ""baddb"""
11,ilp_assign,2,5,5,1,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22198748588562012}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [3, 3]]"
12,lcs,8,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08972311019897461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdabdada""
T = ""dcbdccccb"""
13,rod,32,3008,1084,0,135,0,"{'ok': True, 'value': 3008, 'stdout': '3008\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10249757766723633}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [94, 15, 48, 43, 49, 27, 85, 24, 56, 96, 24, 85, 67, 26, 75, 94, 69, 42, 9, 64, 82, 10, 6, 59, 47, 52, 31, 13, 19, 70, 68, 41]"
14,ilp_assign,2,7,8,0,210,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2155759334564209}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 4], [4, 5]]"
15,add,32,129416430488653610218983532347111,129416430488653610168983532344111,0,129417430488653610218983532347111,0,"{'ok': True, 'value': 129416430488653610218983532347111, 'stdout': '129416430488653610218983532347111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09759378433227539}",1,Compute: 99767161917853953257229652945243 + 29649268570799656961753879401868
16,mul,8,5100799961828662,496656556575336,0,5099666399952912,0,"{'ok': True, 'value': 5100799961828662, 'stdout': '5100799961828662\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09664416313171387}",1,Compute: 54642091 * 93349282
17,rod,8,56,22,0,22,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09782958030700684}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 3, 2, 17, 19, 20, 22, 10]"
18,ilp_prod,32,376,1875,0,1000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0awlsghf/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""Quantity"", range(6), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16434478759765625}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [94, 50, 75, 46, 75, 37]
consumption (rows=resources) = [[20, 2, 5, 12, 21, 28], [16, 20, 27, 16, 23, 10], [19, 22, 24, 32, 23, 21], [5, 32, 9, 31, 28, 16]]
capacity = [127, 91, 80, 121]
upper_bounds = [4, 3, 3, 3, 3, 3]"
19,ilp_partition,8,1,1,1,10,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08717775344848633}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 16, 23, 8, 18, 10, 13, 1]"
20,sub,32,20656049658049209707414804361844,20656050659049219708484804366284,0,20656049658049219707414804361844,0,"{'ok': True, 'value': 20656049658049209707414804361844, 'stdout': '20656049658049209707414804361844\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09087944030761719}",1,Compute: 87560446509031519041706943882857 - 66904396850982309334292139521013
21,ilp_prod,4,44,43,0,45,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_pah59mww/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_pah59mww/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15602326393127441}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3, 12]
consumption (rows=resources) = [[1, 3, 3], [1, 4, 2], [4, 1, 2]]
capacity = [11, 10, 14]
upper_bounds = [3, 3, 3]"
22,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08780860900878906}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""a"""
23,mul,4,68547700,57,0,68833700,0,"{'ok': True, 'value': 68547700, 'stdout': '68547700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10274386405944824}",1,Compute: 7870 * 8710
24,ilp_partition,4,3,0,0,5,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0878744125366211}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 8, 12, 1]"
25,lcs,16,8,6,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09212589263916016}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcaabaccbbbacbb""
T = ""ddbdbbacbcabcddd"""
26,add,8,133866618,133866618,1,133866618,1,"{'ok': True, 'value': 133866618, 'stdout': '133866618\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10242319107055664}",1,Compute: 90187682 + 43678936
27,ilp_assign,2,3,3,1,1,0,"{'ok': True, 'value': -16, 'stdout': '-16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22825241088867188}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 2], [1, 4]]"
28,ilp_assign,32,141,114,0,206,0,"{'ok': True, 'value': 141, 'stdout': '141\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3923220634460449}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[57, 92, 75, 12, 56, 37, 55], [38, 9, 90, 75, 43, 75, 2], [15, 70, 57, 4, 19, 37, 53], [9, 57, 56, 8, 1, 48, 49], [58, 56, 62, 85, 3, 39, 25], [79, 34, 95, 35, 81, 47, 72], [33, 11, 54, 52, 19, 28, 11]]"
29,ilp_prod,4,50,45,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_o44plvsd/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16049456596374512}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 12, 7]
consumption (rows=resources) = [[2, 1, 4], [1, 1, 4], [2, 3, 3]]
capacity = [8, 15, 13]
upper_bounds = [4, 4, 3]"
30,lcs,16,9,7,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10989689826965332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcddcadacabbcacd""
T = ""baaacbcadbabcaca"""
31,ilp_prod,32,366,198,0,1050,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_kj8w59n6/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_kj8w59n6/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18289828300476074}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [50, 54, 76, 50, 74, 6]
consumption (rows=resources) = [[15, 8, 24, 11, 10, 11], [27, 3, 32, 15, 8, 9], [6, 16, 15, 28, 29, 9], [17, 22, 18, 22, 18, 17]]
capacity = [67, 93, 115, 128]
upper_bounds = [3, 5, 3, 4, 3, 6]"
32,lcs,8,4,4,1,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10379910469055176}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcabada""
T = ""dddcbbc"""
33,sub,4,1647,1647,1,1647,1,"{'ok': True, 'value': 1647, 'stdout': '1647\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09445881843566895}",1,Compute: 6043 - 4396
34,knap,8,118,103,0,60,0,"{'ok': True, 'value': 118, 'stdout': '118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09447479248046875}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 12, 11, 14, 14, 7, 6, 4]
V = [30, 1, 22, 19, 26, 6, 32, 30]
C = 41"
35,ilp_assign,16,47,4,0,110,0,"{'ok': True, 'value': -127, 'stdout': '-127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21122121810913086}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 10, 8, 35, 43, 16, 18], [7, 45, 17, 48, 7, 10, 41], [47, 32, 47, 13, 41, 8, 41], [6, 8, 13, 8, 22, 26, 22], [6, 26, 17, 13, 45, 8, 8], [16, 44, 45, 46, 37, 4, 2], [14, 8, 23, 30, 32, 48, 36]]"
36,mul,2,3038,392,0,2998,0,"{'ok': True, 'value': 3038, 'stdout': '3038\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09884166717529297}",1,Compute: 62 * 49
37,lcs,2,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10109686851501465}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""ab"""
38,rod,32,880,1082,0,94,0,"{'ok': True, 'value': 880, 'stdout': '880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09427762031555176}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [27, 55, 49, 11, 57, 48, 50, 4, 31, 26, 54, 75, 91, 5, 53, 33, 37, 6, 25, 69, 73, 56, 5, 58, 34, 94, 54, 58, 78, 51, 48, 48]"
39,ilp_prod,4,36,108,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_be7cj9zo/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16185855865478516}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 6, 12]
consumption (rows=resources) = [[2, 2, 4], [4, 1, 4], [4, 3, 1]]
capacity = [15, 8, 14]
upper_bounds = [3, 4, 3]"
40,ilp_prod,16,184,142,0,156,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_5tgo5j8n/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_5tgo5j8n/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16412639617919922}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [34, 28, 11, 40, 42, 38]
consumption (rows=resources) = [[15, 1, 14, 14, 11, 5], [13, 16, 4, 11, 8, 5], [9, 1, 13, 7, 4, 11], [5, 2, 7, 8, 15, 8]]
capacity = [44, 49, 51, 34]
upper_bounds = [3, 3, 3, 3, 3, 4]"
41,ilp_assign,2,5,6,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20506834983825684}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [3, 1]]"
42,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10884547233581543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaabdbb""
T = ""cacacbb"""
43,add,4,18650,18650,1,18650,1,"{'ok': True, 'value': 18650, 'stdout': '18650\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10043001174926758}",1,Compute: 9640 + 9010
44,ilp_prod,4,60,69,0,63,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_rv08k0zu/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16889405250549316}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 9, 4]
consumption (rows=resources) = [[2, 2, 2], [1, 4, 1], [2, 4, 1]]
capacity = [10, 14, 11]
upper_bounds = [5, 3, 5]"
45,sub,32,35417391865982546200481370204233,354173918660825462004823702041338,0,35417391866002546200481370204233,0,"{'ok': True, 'value': 35417391865982546200481370204233, 'stdout': '35417391865982546200481370204233\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09960269927978516}",1,Compute: 82635033930930675309559119372934 - 47217642064948129109077749168701
46,rod,16,344,46,0,80,0,"{'ok': True, 'value': 344, 'stdout': '344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11166930198669434}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 43, 37, 37, 17, 17, 23, 36, 30, 2, 32, 4, 30, 2, 24, 14]"
47,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20142769813537598}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 3], [3, 2]]"
48,add,4,10338,10338,1,10338,1,"{'ok': True, 'value': 10338, 'stdout': '10338\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11302995681762695}",1,Compute: 5585 + 4753
49,sub,32,203253787959413087524696473905,20325378879594130875246964864905,0,20325378878594130875247064863905,0,"{'ok': True, 'value': 203253787959413087524696473905, 'stdout': '203253787959413087524696473905\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09453630447387695}",1,Compute: 39572847988331570176134576218723 - 39369594200372157088609879744818
50,mul,16,9913993643185117721256733780432,9904987560001420,0,"The result is too large to fit in a standard integer type. The actual result would be a float, which is not suitable for this problem.",0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ull_nx8f/main.py"", line 3, in <module>\n    res = math.pow(3951211074045599, 2509102515000368)\nOverflowError: math range error\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09668803215026855}",0,Compute: 3951211074045599 * 2509102515000368
51,rod,16,304,65,0,85,0,"{'ok': True, 'value': 304, 'stdout': '304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11356759071350098}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [19, 4, 13, 30, 8, 41, 37, 24, 18, 6, 11, 34, 45, 5, 40, 20]"
52,ilp_prod,2,28,136,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ql1bi0ce/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17409086227416992}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[3, 2], [1, 2]]
capacity = [8, 8]
upper_bounds = [3, 4]"
53,rod,8,88,22,0,14,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09810566902160645}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 7, 14, 4, 6, 4, 2, 16]"
54,ilp_prod,4,41,61,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_1l5911ew/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15744638442993164}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 9, 4]
consumption (rows=resources) = [[4, 4, 1], [1, 2, 1], [2, 2, 1]]
capacity = [12, 16, 16]
upper_bounds = [3, 3, 10]"
55,knap,2,12,9,0,12,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08519315719604492}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 3]
V = [3, 9, 3]
C = 2"
56,add,8,105009408,105009408,1,105009408,1,"{'ok': True, 'value': 105009408, 'stdout': '105009408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09531283378601074}",1,Compute: 71912001 + 33097407
57,add,2,91,91,1,91,1,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08549118041992188}",1,Compute: 49 + 42
58,ilp_assign,4,12,-6,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.065950870513916}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 2, 7, 5], [3, 5, 4, 7], [1, 11, 7, 7], [6, 2, 4, 8]]"
59,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11397790908813477}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""d"""
60,ilp_prod,8,84,100,0,0,0,"{'ok': True, 'value': 85, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/94f0d8ab8b83461a9b913a633352e489-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/94f0d8ab8b83461a9b913a633352e489-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 71 (4)\n2  Obj 85.714286\nOptimal - objective value 85.714286\nOptimal objective 85.71428571 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n85.7142848\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16119766235351562}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 8, 22, 21]
consumption (rows=resources) = [[1, 4, 7, 7], [5, 5, 1, 5], [8, 4, 3, 3], [4, 5, 5, 6]]
capacity = [27, 32, 26, 18]
upper_bounds = [3, 3, 3, 3]"
61,rod,16,352,502,0,208,0,"{'ok': True, 'value': 352, 'stdout': '352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10768938064575195}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [22, 36, 4, 31, 9, 6, 47, 28, 11, 43, 24, 4, 2, 21, 10, 18]"
62,knap,4,20,17,0,18,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11326766014099121}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 8, 2]
V = [10, 10, 1, 7]
C = 9"
63,rod,8,46,24,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_t5g9k8j1/main.py"", line 11, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_t5g9k8j1/main.py"", line 6, in rod_cutting\n    dp[i] = max(dp[i], dp[i - j] + P[j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08695340156555176}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 3, 21, 23, 16, 21, 24, 1]"
64,add,4,15567,15567,1,15567,1,"{'ok': True, 'value': 15567, 'stdout': '15567\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09090995788574219}",1,Compute: 7761 + 7806
65,sub,4,6908,6908,1,6908,1,"{'ok': True, 'value': 6908, 'stdout': '6908\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09926080703735352}",1,Compute: 8460 - 1552
66,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09622430801391602}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""a"""
67,ilp_assign,2,8,8,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21874332427978516}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5], [3, 4]]"
68,knap,2,5,7,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1045064926147461}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 3]
V = [5, 2, 4]
C = 3"
69,ilp_prod,16,86,198,0,1005,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_7k5d8sz6/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""Quantity"", range(6), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16586065292358398}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 26, 7, 8, 43, 39]
consumption (rows=resources) = [[13, 6, 5, 5, 10, 5], [2, 5, 9, 12, 14, 11], [12, 14, 13, 14, 13, 12], [4, 8, 3, 1, 8, 5]]
capacity = [36, 43, 33, 35]
upper_bounds = [3, 3, 3, 3, 3, 3]"
70,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09418392181396484}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [39, 26, 22, 38, 34, 37, 46, 17, 46, 16, 4, 15, 1, 45, 48, 21]"
71,sub,8,3542926,3543026,0,3543026,0,"{'ok': True, 'value': 3542926, 'stdout': '3542926\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09090662002563477}",1,Compute: 81636524 - 78093598
72,ilp_assign,32,84,11,0,110,0,"{'ok': True, 'value': 563, 'stdout': '563\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20615291595458984}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 20, 4, 16, 22, 6, 12], [46, 66, 76, 92, 70, 88, 17], [91, 16, 58, 10, 76, 69, 71], [80, 11, 96, 33, 48, 74, 58], [18, 76, 46, 30, 68, 1, 57], [35, 66, 94, 38, 78, 19, 24], [93, 61, 87, 29, 6, 40, 62]]"
73,ilp_prod,32,475,247,0,279,0,"{'ok': True, 'value': 525, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4681f82c339349c6bff646fba4139820-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4681f82c339349c6bff646fba4139820-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 347.84091 (6)\n2  Obj 525.06618\nOptimal - objective value 525.06618\nOptimal objective 525.0661765 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n525.066178\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18556475639343262}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [78, 20, 66, 11, 91, 45]
consumption (rows=resources) = [[11, 23, 23, 30, 9, 6], [12, 16, 18, 2, 9, 19], [24, 19, 8, 19, 8, 23], [15, 4, 30, 4, 22, 13]]
capacity = [75, 73, 77, 120]
upper_bounds = [3, 3, 3, 3, 5, 3]"
74,add,16,9946382498654505,9946382498654495,0,9946382498654505,1,"{'ok': True, 'value': 9946382498654505, 'stdout': '9946382498654505\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10541868209838867}",1,Compute: 5508164852793641 + 4438217645860864
75,ilp_assign,4,12,0,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__y4vbyjk/main.py"", line 30, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec__y4vbyjk/main.py"", line 23, in assignment_problem\n    C += np.inf\nnumpy.core._exceptions.UFuncTypeError: Cannot cast ufunc \'add\' output from dtype(\'float64\') to dtype(\'int64\') with casting rule \'same_kind\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21244502067565918}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 6, 5, 10], [4, 11, 12, 6], [7, 10, 3, 1], [1, 2, 4, 7]]"
76,lcs,32,21,16,0,22,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10207104682922363}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baddcdabdcbcadcdbbacddabdaabbdca""
T = ""bcbdcdbdabcacdccabdaccacdbddaaabd"""
77,mul,32,4380955734559326561690398798021501113753704408259467305210666230,36,0,436968845523842597196357441786966687445273640597842749264650,0,"{'ok': True, 'value': 4380955734559326561690398798021501113753704408259467305210666230, 'stdout': '4380955734559326561690398798021501113753704408259467305210666230\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08857131004333496}",1,Compute: 44716463842944723625163242527373 * 97971873400954203705323821522510
78,mul,2,704,704,1,704,1,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10113143920898438}",1,Compute: 16 * 44
79,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09947538375854492}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 3, 7, 10, 5, 4, 12, 17]"
80,knap,16,430,1076,0,1074,0,"{'ok': True, 'value': 430, 'stdout': '430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09470796585083008}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [26, 13, 13, 32, 24, 4, 5, 31, 4, 30, 13, 5, 13, 8, 1, 6]
V = [39, 23, 56, 54, 30, 32, 63, 42, 27, 61, 13, 40, 40, 33, 21, 27]
C = 114"
81,lcs,32,18,10,0,16,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11023855209350586}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcbbaabadcbcbdddacddddacbddaabd""
T = ""dcdcbdacaabbcaacbbbdabcaacccddbca"""
82,ilp_partition,16,0,1,0,240,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08523774147033691}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 32, 37, 28, 42, 37, 11, 44, 36, 31, 16, 33, 15, 18, 34, 48]"
83,add,32,144864406192628961986643681058452,144864406223577162185643741038452,0,144864406192628961946643679058352,0,"{'ok': True, 'value': 144864406192628961986643681058452, 'stdout': '144864406192628961986643681058452\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09285950660705566}",1,Compute: 47804105783040387563421676194271 + 97060300409588574423222004864181
84,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09754037857055664}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcacaccd""
T = ""dccbdbcd"""
85,ilp_prod,8,168,65,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_f4gpv0q1/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, lowBound=0, upBound=upper_bounds[j], cat=\'Integer\') for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16407537460327148}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 4, 21, 8]
consumption (rows=resources) = [[2, 8, 2, 7], [6, 8, 2, 4], [5, 8, 2, 1], [5, 4, 2, 1]]
capacity = [16, 17, 31, 28]
upper_bounds = [3, 3, 8, 3]"
86,lcs,4,2,2,1,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09419918060302734}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbd""
T = ""dbdc"""
87,rod,2,4,3,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_sgxepw1b/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_sgxepw1b/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09766840934753418}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 3]"
88,ilp_assign,4,12,0,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ubfoi1vx/main.py"", line 30, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_ubfoi1vx/main.py"", line 23, in assignment_problem\n    C += np.inf\nnumpy.core._exceptions.UFuncTypeError: Cannot cast ufunc \'add\' output from dtype(\'float64\') to dtype(\'int64\') with casting rule \'same_kind\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20714521408081055}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 10, 11, 6], [4, 4, 2, 9], [6, 5, 6, 1], [2, 6, 11, 12]]"
89,knap,4,20,14,0,14,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09003853797912598}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 8, 2, 6]
V = [8, 2, 12, 4]
C = 11"
90,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09421181678771973}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacddbab""
T = ""ccbdcacc"""
91,rod,8,64,22,0,26,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12070608139038086}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [6, 16, 15, 18, 14, 1, 8, 24]"
92,sub,32,8568338050822611744099909687543,-85358339512431611744108910097541,0,84692822241284997356638456450133,0,"{'ok': True, 'value': 8568338050822611744099909687543, 'stdout': '8568338050822611744099909687543\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0944676399230957}",1,Compute: 74692822241284997356638456450139 - 66124484190462385612538546762596
93,rod,4,44,13,0,14,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09376907348632812}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 5, 3, 4]"
94,add,16,4248690660612537,4248690659612537,0,4248696660612537,0,"{'ok': True, 'value': 4248690660612537, 'stdout': '4248690660612537\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08694338798522949}",1,Compute: 2230498285910826 + 2018192374701711
95,ilp_partition,4,2,0,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09478211402893066}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 12, 8]"
96,rod,4,48,12,0,24,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08734822273254395}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 3, 7, 3]"
97,ilp_partition,32,1,1,1,50,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10171151161193848}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [52, 76, 65, 65, 12, 24, 33, 68, 85, 2, 56, 59, 3, 78, 53, 11, 49, 72, 89, 76, 33, 35, 12, 67]"
98,knap,2,17,17,1,10,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08559060096740723}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 2]
V = [7, 6, 10]
C = 4"
99,ilp_prod,2,56,-1,0,35,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xye6amjg/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17332172393798828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5]
consumption (rows=resources) = [[1, 1], [1, 3]]
capacity = [9, 8]
upper_bounds = [8, 3]"
100,sub,16,6033027736503031,1340732290580810,0,6033027736502931,0,"{'ok': True, 'value': 6033027736503031, 'stdout': '6033027736503031\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09576272964477539}",1,Compute: 7373760027083841 - 1340732290580810
101,ilp_assign,32,122,244,0,201,0,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39847683906555176}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[66, 19, 45, 25, 50, 4, 43], [58, 42, 66, 56, 4, 93, 50], [92, 54, 58, 89, 43, 20, 17], [56, 61, 4, 60, 13, 7, 41], [86, 63, 65, 38, 74, 45, 78], [68, 56, 53, 27, 9, 86, 6], [31, 39, 81, 53, 80, 91, 61]]"
102,ilp_prod,8,66,103,0,66,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_12xrtccq/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_12xrtccq/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18132400512695312}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 11, 22, 11]
consumption (rows=resources) = [[4, 8, 5, 6], [4, 7, 6, 6], [2, 4, 1, 8], [4, 4, 5, 7]]
capacity = [16, 29, 30, 17]
upper_bounds = [4, 3, 3, 3]"
103,add,8,134048844,134048844,1,134048844,1,"{'ok': True, 'value': 134048844, 'stdout': '134048844\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09531188011169434}",1,Compute: 38550509 + 95498335
104,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09920287132263184}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cc""
T = ""dca"""
105,ilp_prod,16,220,156,0,155,0,"{'ok': True, 'value': 220, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/dc46c4d9205942a4893b0953a2d6bbd0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/dc46c4d9205942a4893b0953a2d6bbd0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 243 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -213 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -220 found by DiveCoefficient after 81 iterations and 0 nodes (0.01 seconds)\nCbc0031I 4 added rows had average density of 5\nCbc0013I At root node, 4 cuts changed objective from -243 to -220.00004 in 20 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 51 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 37 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -220, took 81 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -243 to -220\nProbing was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 20 times and created 51 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 20 times and created 37 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                220.00000000\nEnumerated nodes:               0\nTotal iterations:               81\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n220.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17317485809326172}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [41, 5, 45, 33, 7, 25]
consumption (rows=resources) = [[13, 4, 1, 14, 2, 1], [12, 2, 1, 6, 3, 13], [5, 12, 15, 12, 9, 9], [4, 4, 1, 10, 5, 3]]
capacity = [59, 47, 55, 64]
upper_bounds = [3, 4, 3, 4, 6, 3]"
106,ilp_prod,8,100,108,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_m3pxc5x7/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_m3pxc5x7/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1781313419342041}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 13, 15, 21]
consumption (rows=resources) = [[5, 8, 2, 2], [3, 4, 2, 8], [3, 3, 6, 4], [6, 1, 6, 2]]
capacity = [22, 20, 31, 32]
upper_bounds = [4, 3, 5, 3]"
107,ilp_prod,16,204,150,0,180,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_lkr_tr1o/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_lkr_tr1o/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17285370826721191}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 18, 13, 36, 46, 33]
consumption (rows=resources) = [[15, 5, 13, 3, 7, 8], [1, 9, 14, 10, 6, 12], [13, 16, 2, 10, 7, 7], [4, 10, 10, 10, 10, 4]]
capacity = [40, 56, 47, 43]
upper_bounds = [3, 3, 3, 4, 4, 4]"
108,ilp_partition,32,1,1,1,40,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09170985221862793}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 91, 9, 41, 4, 44, 32, 38, 42, 39, 35, 13, 25, 95, 68, 52, 58, 68, 68, 61, 54, 39, 46, 5]"
109,rod,8,176,50,0,40,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09200787544250488}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 24, 8, 24, 18, 20, 20, 4]"
110,ilp_assign,32,113,10,0,206,0,"{'ok': True, 'value': 113, 'stdout': '113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3929736614227295}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[73, 12, 11, 31, 84, 62, 45], [52, 66, 74, 11, 62, 13, 63], [81, 80, 7, 7, 53, 88, 22], [87, 61, 24, 52, 79, 2, 23], [10, 11, 52, 59, 87, 41, 23], [33, 16, 16, 31, 95, 47, 17], [49, 92, 61, 12, 58, 28, 10]]"
111,knap,4,14,14,1,9,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11534500122070312}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 6, 8, 5]
V = [10, 3, 5, 4]
C = 13"
112,rod,8,64,22,0,20,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10377621650695801}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [8, 13, 12, 2, 24, 23, 12, 10]"
113,add,16,8061869256868976,8061879256868976,0,8061859256868976,0,"{'ok': True, 'value': 8061869256868976, 'stdout': '8061869256868976\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1095120906829834}",1,Compute: 1653085493955497 + 6408783762913479
114,ilp_prod,4,24,35,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_e_ecd6rt/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16831016540527344}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4, 5]
consumption (rows=resources) = [[3, 2, 1], [2, 1, 1], [1, 4, 4]]
capacity = [8, 8, 11]
upper_bounds = [3, 3, 3]"
115,ilp_assign,32,134,105,0,110,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_f6hdq9au/main.py"", line 47, in <module>\n    res = hungarian_algorithm(C)\n  File ""/tmp/cot_exec_f6hdq9au/main.py"", line 25, in hungarian_algorithm\n    min_uncovered = min([(i, j) for i, j in np.argwhere(cost_matrix == 0) if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2211754322052002}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 28, 68, 33, 40, 15, 14], [64, 90, 21, 67, 1, 90, 39], [75, 2, 21, 76, 57, 35, 48], [80, 21, 1, 25, 92, 31, 96], [91, 13, 27, 55, 83, 52, 61], [94, 47, 31, 27, 74, 10, 87], [62, 96, 20, 87, 92, 45, 24]]"
116,knap,8,115,103,0,60,0,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09438729286193848}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 12, 7, 9, 7, 15, 15, 8]
V = [32, 22, 19, 22, 24, 1, 29, 28]
C = 43"
117,lcs,2,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10729217529296875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""ab"""
118,knap,8,105,103,0,64,0,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10393023490905762}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 15, 8, 8, 13, 9, 6, 7]
V = [25, 21, 5, 20, 32, 17, 1, 28]
C = 37"
119,ilp_assign,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20084095001220703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [2, 5]]"
120,rod,32,3072,1055,0,640,0,"{'ok': True, 'value': 3072, 'stdout': '3072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08766651153564453}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [96, 73, 25, 2, 64, 52, 94, 13, 8, 47, 90, 79, 49, 81, 69, 66, 52, 68, 39, 12, 32, 40, 13, 24, 61, 61, 16, 13, 52, 60, 13, 52]"
121,mul,8,971332411647062,999999997,0,96883999592452,0,"{'ok': True, 'value': 971332411647062, 'stdout': '971332411647062\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09412646293640137}",1,Compute: 51290714 * 18937783
122,add,4,11856,7856,0,11856,1,"{'ok': True, 'value': 11856, 'stdout': '11856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09577417373657227}",1,Compute: 6313 + 5543
123,sub,4,3346,3346,1,3346,1,"{'ok': True, 'value': 3346, 'stdout': '3346\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1136479377746582}",1,Compute: 7858 - 4512
124,sub,2,14,14,1,14,1,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0915067195892334}",1,Compute: 77 - 63
125,lcs,8,5,4,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08733510971069336}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbccbaca""
T = ""bbacbad"""
126,sub,16,4180041001583547,4180041001583547,1,4180640991583547,0,"{'ok': True, 'value': 4180041001583547, 'stdout': '4180041001583547\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09090614318847656}",1,Compute: 9009867060906591 - 4829826059323044
127,lcs,8,5,4,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10357904434204102}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abccaacc""
T = ""daccbcaa"""
128,ilp_prod,2,40,49,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_erx5m88j/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15984845161437988}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3]
consumption (rows=resources) = [[2, 1], [1, 2]]
capacity = [10, 7]
upper_bounds = [5, 3]"
129,sub,8,62067599,15639002,0,62067599,1,"{'ok': True, 'value': 62067599, 'stdout': '62067599\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09746432304382324}",1,Compute: 77706601 - 15639002
130,ilp_prod,2,24,14,0,24,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_tmwhplfb/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18448185920715332}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[2, 2], [3, 3]]
capacity = [10, 10]
upper_bounds = [3, 3]"
131,ilp_assign,2,3,3,1,-2,0,"{'ok': True, 'value': -22, 'stdout': '-22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2113637924194336}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [1, 6]]"
132,knap,2,13,13,1,20,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08974218368530273}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 1]
V = [10, 6, 7]
C = 3"
133,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08716893196105957}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 22, 24, 10, 23, 15, 24, 20]"
134,knap,8,81,103,0,60,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09073472023010254}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 7, 3, 15, 10, 11, 6, 16]
V = [7, 1, 8, 24, 21, 27, 22, 17]
C = 40"
135,sub,8,35137873,118,0,35137873,1,"{'ok': True, 'value': 35137873, 'stdout': '35137873\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09724140167236328}",1,Compute: 85291356 - 50153483
136,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0974419116973877}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""bb"""
137,mul{'ok': True, 'value': 9371907163327607360521298283440, 'stdout': '9371907163327607360521298283440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0957639217376709}",1,Compute: 1360567087544170 * 6888235978311032
138,add,32,126072687483954994907555300720539,126072687483954993007555450720539,0,126072687483954994907555280720539,0,"{'ok': True, 'value': 126072687483954994907555300720539, 'stdout': '126072687483954994907555300720539\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09946632385253906}",1,Compute: 39501890065778368479454683889466 + 86570797418176626428100616831073
139,knap,32,1603,1056,0,1086,0,"{'ok': True, 'value': 1603, 'stdout': '1603\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0955204963684082}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 39, 30, 37, 11, 59, 12, 57, 22, 57, 1, 52, 53, 20, 57, 10, 41, 47, 46, 7, 47, 7, 1, 2, 52, 58, 58, 6, 62, 23, 3, 46]
V = [54, 125, 27, 90, 34, 31, 44, 6, 83, 72, 58, 89, 73, 65, 109, 54, 114, 66, 73, 54, 92, 93, 7, 37, 75, 79, 7, 103, 104, 100, 39, 86]
C = 530"
140,knap,8,97,140,0,60,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09340620040893555}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 12, 2, 9, 7, 16, 8, 6]
V = [22, 26, 15, 10, 11, 20, 15, 30]
C = 36"
141,mul,32,2132294310352981794453831122031859960399477936358525861754511620,The result is a very large number that can't be represented as an integer.,0,213788433766785993868313988589366656590666066666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 2132294310352981794453831122031859960399477936358525861754511620, 'stdout': '2132294310352981794453831122031859960399477936358525861754511620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09433221817016602}",1,Compute: 56288466020885033386626033484266 * 37881549473418308627638989280570
142,ilp_prod,32,448,0,0,1034,0,"{'ok': True, 'value': 462, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b28a3366ae5640819273430c6b5ccaac-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b28a3366ae5640819273430c6b5ccaac-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 106.03568 (6)\n4  Obj 462.21875\nOptimal - objective value 462.21875\nOptimal objective 462.21875 - 4 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n462.21875\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1714324951171875}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 35, 29, 64, 20, 22]
consumption (rows=resources) = [[2, 14, 11, 11, 11, 28], [22, 16, 15, 9, 16, 12], [17, 32, 32, 15, 26, 32], [12, 4, 7, 13, 11, 26]]
capacity = [113, 81, 118, 115]
upper_bounds = [3, 3, 3, 7, 4, 3]"
143,rod,2,4,2,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9j82g84_/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_9j82g84_/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10578417778015137}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 1]"
144,add,2,83,83,1,83,1,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09449648857116699}",1,Compute: 32 + 51
145,rod,4,32,10,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_vvckw1xj/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_vvckw1xj/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08753776550292969}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 1, 2, 7]"
146,ilp_partition,4,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08925342559814453}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 12, 4]"
147,rod,16,208,46,0,32,0,"{'ok': True, 'value': 208, 'stdout': '208\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09673428535461426}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [13, 25, 32, 26, 9, 1, 20, 28, 3, 28, 16, 21, 27, 4, 6, 21]"
148,mul,4,25028452,2510592,0,25106332,0,"{'ok': True, 'value': 25028452, 'stdout': '25028452\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09384441375732422}",1,Compute: 2956 * 8467
149,mul,4,73451776,74864704,0,73075936,0,"{'ok': True, 'value': 73451776, 'stdout': '73451776\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08837270736694336}",1,Compute: 9584 * 7664
150,knap,4,22,14,0,16,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09944725036621094}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 1, 3]
V = [8, 12, 10, 4]
C = 9"
151,knap,16,429,129,0,658,0,"{'ok': True, 'value': 429, 'stdout': '429\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10878372192382812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 30, 17, 13, 31, 18, 30, 5, 14, 18, 1, 13, 8, 13, 21, 18]
V = [7, 45, 2, 17, 64, 59, 39, 55, 25, 13, 52, 46, 62, 39, 17, 9]
C = 129"
152,lcs,8,3,4,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08566164970397949}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcdaaca""
T = ""ccbbcdbb"""
153,knap,8,93,103,0,100,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09403514862060547}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 9, 8, 14, 12, 7, 14, 3]
V = [5, 8, 11, 23, 26, 27, 29, 11]
C = 38"
154,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09282875061035156}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdbccddbbccdaaa""
T = ""adaabddababcbbdd"""
155,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09306859970092773}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcaddcac""
T = ""bccaaca"""
156,add,8,132218818,132218818,1,132218818,1,"{'ok': True, 'value': 132218818, 'stdout': '132218818\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08902621269226074}",1,Compute: 98991781 + 33227037
157,lcs,8,6,5,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0956563949584961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caadbbad""
T = ""cdadabbab"""
158,sub,8,20154210,14351029,0,20154210,1,"{'ok': True, 'value': 20154210, 'stdout': '20154210\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09461188316345215}",1,Compute: 34505239 - 14351029
159,sub,32,78512764608123666807687244757607,95239224422461533785080088100727,0,78512764608123666807687244757607,1,"{'ok': True, 'value': 78512764608123666807687244757607, 'stdout': '78512764608123666807687244757607\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09894418716430664}",1,Compute: 97097719957387963449235959582177 - 18584955349264296641548714824570
160,rod,8,88,22,0,30,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08309793472290039}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 22, 20, 1, 10, 21, 16, 13]"
161,mul,32,3563357048091865096474464439419843489838734206806304416984906552,The exact answer is too large to fit into a standard data type and cannot be provided in this format.,0,36297044859919413265410137254467865858568652268685642192888,0,"{'ok': True, 'value': 3563357048091865096474464439419843489838734206806304416984906552, 'stdout': '3563357048091865096474464439419843489838734206806304416984906552\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08969259262084961}",1,Compute: 51498710374849266161875674902072 * 69193131675625864500762721087841
162,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09583711624145508}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabd""
T = ""baccd"""
163,mul,2,2231,2271,0,2271,0,"{'ok': True, 'value': 2231, 'stdout': '2231\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09609127044677734}",1,Compute: 97 * 23
164,sub,16,2423157643169728,2423157643169728,1,2423157643169728,1,"{'ok': True, 'value': 2423157643169728, 'stdout': '2423157643169728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09705424308776855}",1,Compute: 3970054519764018 - 1546896876594290
165,ilp_assign,32,111,235,0,255,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2352433204650879}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[63, 64, 50, 96, 30, 5, 48], [29, 2, 6, 59, 82, 77, 34], [91, 32, 56, 57, 52, 64, 20], [77, 77, 10, 54, 33, 93, 41], [81, 4, 29, 35, 40, 76, 72], [19, 69, 72, 39, 95, 39, 58], [38, 63, 8, 54, 20, 23, 78]]"
166,add,4,9053,8873,0,9053,1,"{'ok': True, 'value': 9053, 'stdout': '9053\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09087800979614258}",1,Compute: 7413 + 1640
167,sub,2,26,0,0,26,1,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10606932640075684}",1,Compute: 74 - 48
168,mul,16,20941652365474514220206293283086,20990484348338429656443920,0,2100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 20941652365474514220206293283086, 'stdout': '20941652365474514220206293283086\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09089231491088867}",1,Compute: 8233308907819643 * 2543528076006602
169,mul,32,7401362219454486529599144724810195769411433610884658425106705056,473446785,0,749434674199687776665404993664644960964666359448568496549856,0,"{'ok': True, 'value': 7401362219454486529599144724810195769411433610884658425106705056, 'stdout': '7401362219454486529599144724810195769411433610884658425106705056\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0953986644744873}",1,Compute: 96696478547735158522176604032356 * 76542210539763678941479845753576
170,ilp_assign,2,2,2,1,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2058122158050537}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [1, 4]]"
171,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0926046371459961}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 4, 2]"
172,ilp_prod,16,116,155,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_yohcshqa/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_yohcshqa/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1808779239654541}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 15, 10, 5, 42, 43]
consumption (rows=resources) = [[3, 1, 12, 8, 9, 14], [10, 3, 15, 7, 5, 3], [7, 4, 6, 9, 5, 13], [15, 11, 13, 11, 15, 5]]
capacity = [34, 52, 44, 33]
upper_bounds = [3, 3, 3, 3, 3, 3]"
173,rod,2,5,5,1,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ge_g_u5s/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_ge_g_u5s/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09148502349853516}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 5]"
174,mul,8,4844805177431590,480438243534531,0,4787689433625490,0,"{'ok': True, 'value': 4844805177431590, 'stdout': '4844805177431590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09079289436340332}",1,Compute: 52392749 * 92470910
175,mul,2,6882,7002,0,6902,0,"{'ok': True, 'value': 6882, 'stdout': '6882\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08666586875915527}",1,Compute: 74 * 93
176,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0914621353149414}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [93, 48, 34, 94, 66, 79, 94, 95, 7, 6, 83, 17, 87, 13, 61, 21, 33, 14, 81, 32, 84, 2, 9, 75]"
177,mul,4,60619050,6059250,0,60575250,0,"{'ok': True, 'value': 60619050, 'stdout': '60619050\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0864861011505127}",1,Compute: 6225 * 9738
178,ilp_prod,16,205,103,0,156,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_spl9401y/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_spl9401y/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16681146621704102}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 27, 19, 38, 43, 6]
consumption (rows=resources) = [[12, 8, 15, 16, 7, 6], [14, 7, 10, 1, 9, 10], [5, 10, 15, 1, 4, 8], [1, 7, 6, 2, 14, 8]]
capacity = [53, 61, 46, 49]
upper_bounds = [4, 4, 3, 3, 3, 5]"
179,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09438776969909668}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 4, 2, 1]"
180,add,2,124,124,1,124,1,"{'ok': True, 'value': 124, 'stdout': '124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09357857704162598}",1,Compute: 87 + 37
181,knap,16,442,133,0,1073,0,"{'ok': True, 'value': 442, 'stdout': '442\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09363484382629395}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 17, 20, 10, 6, 15, 11, 1, 10, 29, 23, 26, 11, 21, 15, 29]
V = [64, 55, 57, 7, 24, 50, 53, 22, 52, 63, 48, 26, 37, 5, 28, 21]
C = 133"
182,ilp_prod,8,84,105,0,105,0,"{'ok': True, 'value': 84, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e4db2ead31b841fb9b1707ba6d94f4cc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e4db2ead31b841fb9b1707ba6d94f4cc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 99.75 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -84 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 2 rows 2 columns\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -99.75 to -99.75 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -84, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -99.75 to -99.75\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                84.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n84.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17460417747497559}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 11, 12, 12]
consumption (rows=resources) = [[2, 3, 1, 3], [2, 7, 4, 1], [5, 8, 5, 1], [3, 3, 2, 7]]
capacity = [19, 16, 16, 30]
upper_bounds = [3, 3, 3, 4]"
183,ilp_assign,8,43,35,0,11,0,"{'ok': True, 'value': -44, 'stdout': '-44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22895312309265137}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 24, 15, 8, 8, 3, 8], [16, 12, 10, 23, 15, 14, 8], [2, 1, 7, 5, 20, 21, 24], [8, 21, 10, 22, 4, 20, 16], [17, 14, 10, 11, 19, 11, 5], [6, 16, 11, 12, 24, 6, 3], [14, 18, 10, 17, 9, 22, 23]]"
184,rod,8,184,39,0,145,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0917205810546875}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 19, 22, 18, 17, 12, 11, 22]"
185,add,4,5810,5810,1,5810,1,"{'ok': True, 'value': 5810, 'stdout': '5810\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09216809272766113}",1,Compute: 1501 + 4309
186,add,2,38,38,1,38,1,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08681750297546387}",1,Compute: 17 + 21
187,add,8,188534487,188534487,1,188534487,1,"{'ok': True, 'value': 188534487, 'stdout': '188534487\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09272074699401855}",1,Compute: 89671608 + 98862879
188,sub,4,4202,4202,1,4202,1,"{'ok': True, 'value': 4202, 'stdout': '4202\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10438013076782227}",1,Compute: 5460 - 1258
189,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0988461971282959}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 26, 14, 16, 18, 27, 31, 21, 33, 24, 37, 43, 4, 16, 15, 32]"
190,rod,2,8,6,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ty8048bp/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_ty8048bp/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09265780448913574}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
191,mul,32,2961602320689461088914027320863573464515675038593912596079841881,29869246947544666475950365264648,0,2976055267853838987751959857546564674691363654664464265661,0,"{'ok': True, 'value': 2961602320689461088914027320863573464515675038593912596079841881, 'stdout': '2961602320689461088914027320863573464515675038593912596079841881\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09097051620483398}",1,Compute: 41847461876237627470264238390903 * 70771372692764356427558219012527
192,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09200859069824219}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdb""
T = ""bacb"""
193,rod,16,336,46,0,157,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09093403816223145}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 42, 33, 9, 32, 40, 9, 14, 46, 36, 39, 1, 12, 39, 9, 9]"
194,ilp_assign,32,225,86,0,185,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21778249740600586}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[46, 29, 22, 51, 59, 49, 35], [40, 65, 91, 53, 78, 56, 57], [60, 68, 57, 36, 36, 81, 67], [91, 19, 80, 39, 47, 91, 84], [26, 14, 25, 68, 86, 63, 95], [60, 71, 90, 61, 85, 58, 77], [78, 80, 3, 27, 69, 79, 44]]"
195,ilp_partition,4,5,1,0,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09478402137756348}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 9, 12, 11]"
196,lcs,16,7,7,1,10,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09415841102600098}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcabcdbccbaabad""
T = ""aaccaaadadadbcaa"""
197,sub,8,40669325,40669325,1,40669325,1,"{'ok': True, 'value': 40669325, 'stdout': '40669325\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10250616073608398}",1,Compute: 56010280 - 15340955
198,sub,32,64247298870379426400739952306111,14133642558175770573075045777935,0,78380941428555196973814998084041,0,"{'ok': True, 'value': 64247298870379426400739952306111, 'stdout': '64247298870379426400739952306111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09883618354797363}",1,Compute: 78380941428555196973814998084046 - 14133642558175770573075045777935
199,rod,32,2464,1055,0,325,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_f784ltma/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_f784ltma/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09545564651489258}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [77, 1, 96, 54, 85, 90, 88, 68, 16, 81, 26, 68, 53, 92, 33, 29, 15, 52, 85, 60, 5, 95, 35, 96, 37, 81, 79, 90, 27, 76, 85, 53]"
200,ilp_prod,4,22,,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__dn7r9rl/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15512609481811523}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3, 3]
consumption (rows=resources) = [[1, 1, 2], [3, 1, 4], [2, 2, 2]]
capacity = [9, 8, 8]
upper_bounds = [3, 4, 3]"
201,add,32,61273782308583529208248419102365,61273782278583529208248419102365,0,61273782308583529208248419102365,1,"{'ok': True, 'value': 61273782308583529208248419102365, 'stdout': '61273782308583529208248419102365\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0901343822479248}",1,Compute: 37457794769082792106047087827314 + 23815987539500737102201331275051
202,sub,8,44738525,44738525,1,44738525,1,"{'ok': True, 'value': 44738525, 'stdout': '44738525\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09271717071533203}",1,Compute: 86782320 - 42043795
203,knap,2,9,12,0,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10033488273620605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 3]
V = [8, 3, 9]
C = 4"
204,rod,16,704,64,0,162,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09694099426269531}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 28, 11, 35, 37, 22, 16, 15, 45, 9, 47, 37, 44, 31, 40, 44]"
205,mul,4,20530634,1985966,0,20139494,0,"{'ok': True, 'value': 20530634, 'stdout': '20530634\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09446501731872559}",1,Compute: 3478 * 5903
206,sub,16,3135310368773072,3135310368773072,1,3135310368773072,1,"{'ok': True, 'value': 3135310368773072, 'stdout': '3135310368773072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10834240913391113}",1,Compute: 7834968727591667 - 4699658358818595
207,knap,2,8,11,0,14,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10175490379333496}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 3]
V = [8, 3, 6]
C = 5"
208,rod,4,48,14,0,21,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09854650497436523}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 5, 6, 9]"
209,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08910465240478516}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 8, 7, 19, 18, 3, 8, 10]"
210,knap,16,459,103,0,748,0,"{'ok': True, 'value': 459, 'stdout': '459\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08940982818603516}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 13, 3, 24, 28, 17, 13, 1, 6, 21, 16, 8, 28, 29, 2, 13]
V = [50, 46, 64, 21, 33, 36, 40, 58, 9, 34, 51, 31, 55, 36, 28, 18]
C = 120"
211,knap,4,17,10,0,7,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09864377975463867}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 7, 3, 7]
V = [8, 9, 4, 3]
C = 10"
212,lcs,8,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08826279640197754}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddaddbdc""
T = ""bdbcacaab"""
213,sub,16,4679360794963071,4679360794963071,1,4679360794963071,1,"{'ok': True, 'value': 4679360794963071, 'stdout': '4679360794963071\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10526537895202637}",1,Compute: 7635905374742587 - 2956544579779516
214,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10291504859924316}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 46, 66, 75, 20, 81, 95, 51, 78, 19, 57, 58, 23, 20, 68, 16, 18, 92, 69, 13, 65, 14, 59, 17]"
215,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09833645820617676}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 4, 6, 1]"
216,add,16,10042528992061505,10042528992061565,0,10042528992061505,1,"{'ok': True, 'value': 10042528992061505, 'stdout': '10042528992061505\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10051441192626953}",1,Compute: 1437884414714901 + 8604644577346604
217,ilp_partition,16,0,1,0,40,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09639930725097656}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 10, 6, 8, 32, 40, 41, 17, 47, 19, 22, 25, 17, 2, 2, 34]"
218,ilp_partition,8,1,1,1,18,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08962273597717285}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 17, 10, 19, 14, 7, 19, 12]"
219,ilp_prod,32,372,159,0,1029,0,"{'ok': True, 'value': 372, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/34081d26e10c4a97ae59c82925526893-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/34081d26e10c4a97ae59c82925526893-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 380.189 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -317 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -372 found by DiveCoefficient after 6 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -380.18861 to -372 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 5 row cuts average 3.8 elements, 4 column cuts (4 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -372, took 6 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -380.189 to -372\nProbing was tried 2 times and created 9 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                372.00000000\nEnumerated nodes:               0\nTotal iterations:               6\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n372.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19979476928710938}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [38, 93, 51, 14, 13, 32]
consumption (rows=resources) = [[7, 18, 21, 6, 19, 15], [14, 16, 23, 29, 5, 24], [31, 7, 20, 21, 23, 3], [4, 1, 21, 22, 28, 17]]
capacity = [73, 90, 75, 79]
upper_bounds = [3, 4, 3, 3, 3, 3]"
220,rod,4,32,12,0,18,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08658313751220703}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 9, 7, 10]"
221,rod,4,24,12,0,14,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09328818321228027}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 2, 12, 4]"
222,rod,16,384,64,0,84,0,"{'ok': True, 'value': 384, 'stdout': '384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08803200721740723}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [24, 10, 44, 31, 43, 1, 33, 10, 45, 30, 21, 8, 28, 13, 44, 33]"
223,lcs,16,9,8,0,5,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08909034729003906}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdaaddabdcaaadac""
T = ""bcbdbaaaaadddcab"""
224,add,32,69923983248795669814058445861821,74927283248795669813788445861821,0,69923983248795669814058445861821,1,"{'ok': True, 'value': 69923983248795669814058445861821, 'stdout': '69923983248795669814058445861821\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10122156143188477}",1,Compute: 22500340847441201023393777850908 + 47423642401354468790664668010913
225,add,16,10296108094818382,11336317294818382,0,10296108094818382,1,"{'ok': True, 'value': 10296108094818382, 'stdout': '10296108094818382\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08684444427490234}",1,Compute: 4179923241155320 + 6116184853663062
226,sub,2,44,44,1,44,1,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09192085266113281}",1,Compute: 88 - 44
227,ilp_assign,4,19,6,0,20,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21826601028442383}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3, 11, 3], [5, 5, 8, 9], [9, 9, 5, 5], [10, 6, 9, 10]]"
228,add,16,6291378537456734,6291378537456734,1,6291378537456734,1,"{'ok': True, 'value': 6291378537456734, 'stdout': '6291378537456734\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09801363945007324}",1,Compute: 3702244207679384 + 2589134329777350
229,lcs,16,10,8,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09040117263793945}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caacdabaacdddcdd""
T = ""bdabdbaadcbaddddc"""
230,rod,8,176,22,0,24,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09840989112854004}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 15, 23, 1, 1, 16, 4, 24]"
231,rod,4,24,4,0,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_wdw8x_yk/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_wdw8x_yk/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1007225513458252}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 12, 2, 1]"
232,sub,8,18464311,18464311,1,18464311,1,"{'ok': True, 'value': 18464311, 'stdout': '18464311\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09888696670532227}",1,Compute: 99943745 - 81479434
233,ilp_prod,16,322,109,0,1056,0,"{'ok': True, 'value': 328, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8de9cc893ad542e29ae7f722026e9732-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8de9cc893ad542e29ae7f722026e9732-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 795.34873 (6)\n2  Obj 328.13333\nOptimal - objective value 328.13333\nOptimal objective 328.1333333 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n328.13333179999995\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18492555618286133}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [37, 24, 19, 46, 46, 16]
consumption (rows=resources) = [[3, 4, 15, 4, 7, 12], [12, 7, 2, 11, 8, 11], [12, 1, 11, 1, 4, 1], [7, 2, 8, 14, 4, 7]]
capacity = [43, 64, 34, 55]
upper_bounds = [3, 9, 3, 3, 6, 3]"
234,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09492874145507812}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 1, 2]"
235,mul,16,86410745901299993588960194329812,86138341461549296576424286,0,86209605953162858969679442596025262,0,"{'ok': True, 'value': 86410745901299993588960194329812, 'stdout': '86410745901299993588960194329812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09877252578735352}",1,Compute: 9728635935983932 * 8882102945356091
236,sub,8,5713599,5713599,1,571360,0,"{'ok': True, 'value': 5713599, 'stdout': '5713599\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11797499656677246}",1,Compute: 48255071 - 42541472
237,ilp_assign,32,135,20,0,180,0,"{'ok': True, 'value': 1536, 'stdout': '1536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22579741477966309}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 62, 63, 2, 53, 62, 72], [84, 82, 91, 31, 7, 79, 15], [36, 59, 22, 14, 35, 92, 28], [39, 19, 33, 8, 36, 36, 36], [82, 68, 80, 65, 78, 4, 62], [39, 73, 48, 43, 20, 49, 65], [88, 48, 42, 52, 96, 71, 56]]"
238,sub,16,2393638738993416,2393638738993416,1,2393638738993416,1,"{'ok': True, 'value': 2393638738993416, 'stdout': '2393638738993416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08857107162475586}",1,Compute: 7800777030403190 - 5407138291409774
239,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08779525756835938}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 1, 2]"
240,knap,2,6,11,0,11,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09205746650695801}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 5]
V = [6, 5, 6]
C = 5"
241,rod,32,555,91,0,694,0,"{'ok': True, 'value': 555, 'stdout': '555\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09513306617736816}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [7, 15, 54, 41, 53, 42, 70, 15, 39, 27, 50, 7, 94, 68, 19, 84, 38, 53, 82, 21, 31, 42, 69, 85, 84, 91, 54, 27, 35, 31, 34, 9]"
242,knap,32,1768,100,0,1046,0,"{'ok': True, 'value': 1768, 'stdout': '1768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09673476219177246}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 53, 14, 60, 24, 23, 15, 12, 2, 9, 39, 16, 19, 5, 62, 7, 2, 47, 51, 50, 5, 24, 22, 47, 54, 55, 62, 39, 14, 26, 54, 60]
V = [113, 10, 17, 121, 126, 78, 108, 2, 90, 63, 108, 19, 17, 107, 11, 12, 21, 58, 15, 66, 114, 128, 46, 105, 76, 15, 35, 80, 107, 19, 105, 100]
C = 490"
243,ilp_assign,8,30,2,0,20,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4121227264404297}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 8, 20, 13, 14, 16, 7], [10, 1, 15, 18, 14, 3, 9], [19, 4, 14, 8, 11, 2, 6], [10, 24, 13, 5, 13, 13, 2], [23, 21, 13, 3, 4, 6, 22], [11, 14, 13, 18, 24, 1, 9], [10, 23, 12, 6, 9, 12, 20]]"
244,ilp_partition,2,1,9,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10854506492614746}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 1, 4]"
245,lcs,16,9,7,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10123205184936523}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadcdbccbbddccab""
T = ""acddbdbcdadacaac"""
246,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09786152839660645}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 3, 3, 4]"
247,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08765697479248047}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""da"""
248,ilp_partition,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10300993919372559}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 5, 1, 1]"
249,ilp_assign,16,109,105,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__wz99bs1/main.py"", line 19, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec__wz99bs1/main.py"", line 9, in hungarian_algorithm\n    return int(min(min(zeros)))\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22404098510742188}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 39, 8, 20, 8, 14, 21], [14, 4, 25, 22, 5, 35, 33], [28, 45, 18, 8, 7, 22, 9], [20, 43, 22, 18, 10, 29, 32], [22, 25, 31, 24, 42, 29, 21], [28, 43, 30, 46, 40, 34, 36], [48, 22, 40, 24, 19, 32, 48]]"
250,ilp_prod,32,376,1080,0,1008,0,"{'ok': True, 'value': 389, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f7fb531e21c24ac6af5d7bb3ad2ea334-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f7fb531e21c24ac6af5d7bb3ad2ea334-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 167.49428 (6)\n5  Obj 389.19355\nOptimal - objective value 389.19355\nOptimal objective 389.1935484 - 5 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n389.19354756000007\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1651012897491455}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [46, 75, 64, 94, 23, 24]
consumption (rows=resources) = [[19, 18, 11, 18, 20, 21], [27, 14, 13, 4, 1, 4], [17, 27, 24, 28, 26, 14], [32, 24, 23, 9, 16, 18]]
capacity = [74, 104, 118, 103]
upper_bounds = [3, 4, 4, 4, 3, 3]"
251,ilp_prod,16,118,120,0,103,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xftv6u1t/main.py"", line 11, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(6),), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18216562271118164}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 18, 16, 34, 27, 29]
consumption (rows=resources) = [[15, 8, 2, 5, 2, 11], [6, 9, 5, 12, 15, 11], [11, 15, 12, 6, 12, 10], [12, 13, 4, 1, 7, 2]]
capacity = [34, 42, 57, 45]
upper_bounds = [3, 3, 4, 3, 3, 3]"
252,lcs,4,2,2,1,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08784651756286621}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbb""
T = ""babc"""
253,ilp_assign,2,7,,0,7,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21484756469726562}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6], [4, 1]]"
254,sub,16,6136538078107472,,0,6136538078107472,1,"{'ok': True, 'value': 6136538078107472, 'stdout': '6136538078107472\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1000518798828125}",1,Compute: 8990707897723297 - 2854169819615825
255,mul,32,389978845599571315277538746624811801611299729923077070226176713,The result of the multiplication is a very large number that can't be represented as an integer.,0,392314404295264942960994606432648665621555825161526524963,0,"{'ok': True, 'value': 389978845599571315277538746624811801611299729923077070226176713, 'stdout': '389978845599571315277538746624811801611299729923077070226176713\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2152571678161621}",1,Compute: 15855163282450851888277358881537 * 24596331091160440624492456802249
256,ilp_assign,2,8,3,0,-2,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2312018871307373}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 6], [6, 5]]"
257,sub,16,6217196973960220,6217197974016150,0,6217196973960220,1,"{'ok': True, 'value': 6217196973960220, 'stdout': '6217196973960220\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11092257499694824}",1,Compute: 8254722799022360 - 2037525825062140
258,ilp_assign,32,123,28,0,117,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21347856521606445}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[86, 31, 89, 77, 93, 49, 1], [66, 66, 70, 3, 48, 67, 20], [36, 79, 34, 20, 85, 60, 50], [8, 88, 63, 74, 9, 92, 76], [91, 37, 61, 16, 80, 81, 7], [76, 45, 72, 60, 25, 71, 47], [16, 23, 25, 77, 61, 15, 3]]"
259,rod,32,1760,1082,0,655,0,"{'ok': True, 'value': 1760, 'stdout': '1760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10709667205810547}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [55, 46, 35, 79, 52, 67, 2, 11, 89, 49, 12, 82, 74, 13, 12, 74, 56, 62, 24, 33, 24, 58, 23, 40, 14, 85, 36, 1, 65, 88, 96, 81]"
260,ilp_assign,4,27,3,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.066206455230713}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 3, 5, 6], [11, 7, 11, 11], [11, 1, 3, 6], [12, 11, 9, 10]]"
261,ilp_partition,8,0,0,1,8,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09937810897827148}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 12, 7, 24, 9, 18, 12, 2]"
262,ilp_assign,4,15,-5,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_236dkmws/main.py"", line 30, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_236dkmws/main.py"", line 23, in assignment_problem\n    C += np.inf\nnumpy.core._exceptions.UFuncTypeError: Cannot cast ufunc \'add\' output from dtype(\'float64\') to dtype(\'int64\') with casting rule \'same_kind\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20373845100402832}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 12, 10, 2], [7, 7, 7, 10], [8, 10, 5, 7], [1, 5, 1, 1]]"
263,ilp_prod,4,41,54,0,44,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6j8wa751/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15910720825195312}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 9, 11]
consumption (rows=resources) = [[1, 4, 3], [2, 2, 4], [2, 2, 2]]
capacity = [16, 12, 16]
upper_bounds = [6, 4, 3]"
264,add,4,11383,11383,1,11383,1,"{'ok': True, 'value': 11383, 'stdout': '11383\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09029412269592285}",1,Compute: 2637 + 8746
265,mul,8,3610753282041269,3604934448443439,0,3600434350363999,0,"{'ok': True, 'value': 3610753282041269, 'stdout': '3610753282041269\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09689569473266602}",1,Compute: 70105157 * 51504817
266,ilp_prod,2,22,136,0,60,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_l5f10w2k/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15736722946166992}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[2, 2], [2, 3]]
capacity = [10, 7]
upper_bounds = [3, 3]"
267,knap,4,28,22,0,16,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08695006370544434}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 6, 2]
V = [10, 2, 12, 16]
C = 5"
268,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_humoqsrm/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_humoqsrm/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09340667724609375}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 6]"
269,add,8,156007232,156007232,1,156007232,1,"{'ok': True, 'value': 156007232, 'stdout': '156007232\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0944509506225586}",1,Compute: 84497383 + 71509849
270,lcs,16,9,7,0,53,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11165213584899902}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbaacbcdbcaccdc""
T = ""baabbbabcdcabaad"""
271,ilp_partition,16,0,1,0,84,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09698677062988281}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 7, 40, 17, 17, 1, 1, 35, 4, 10, 12, 21, 45, 13, 10, 6]"
272,lcs,32,21,15,0,20,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09813237190246582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abababaaacbcccbbacdaadccabcaacdd""
T = ""caaaacbacdaacdbdbbdadccbadabbbcd"""
273,add,32,95380588749940588030548872777170,95380588749940587930548872777169,0,95380588750940588030548872777170,0,"{'ok': True, 'value': 95380588749940588030548872777170, 'stdout': '95380588749940588030548872777170\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1022183895111084}",1,Compute: 20340980722030297537704809867896 + 75039608027910290492844062909274
274,ilp_prod,2,40,40,1,40,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_9e1xi5yi/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)),), lowBound=0, upBound=upper_bounds)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17147135734558105}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 5]
consumption (rows=resources) = [[1, 1], [2, 1]]
capacity = [8, 8]
upper_bounds = [4, 8]"
275,ilp_partition,32,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09521293640136719}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [91, 42, 80, 63, 75, 34, 12, 41, 66, 20, 86, 30, 10, 96, 6, 59, 9, 37, 77, 42, 28, 75, 88, 48]"
276,mul,8,297088142661216,30119131011552,0,298039993393936,0,"{'ok': True, 'value': 297088142661216, 'stdout': '297088142661216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08893537521362305}",1,Compute: 22656789 * 13112544
277,ilp_assign,8,39,24,0,20,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.47336316108703613}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 7, 5, 23, 1, 17, 9], [9, 12, 17, 13, 13, 16, 19], [6, 5, 4, 10, 12, 7, 8], [22, 9, 8, 16, 12, 4, 17], [4, 20, 21, 17, 21, 12, 7], [10, 22, 9, 23, 4, 24, 7], [24, 24, 5, 24, 9, 4, 7]]"
278,add,2,72,72,1,72,1,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08657336235046387}",1,Compute: 32 + 40
279,mul,32,1601577252915258761470969495286594951626456388505329550532632150,The result is a very large number that can't be represented as an integer.,0,161932880664334636876296798575965646749393834846454649656250,0,"{'ok': True, 'value': 1601577252915258761470969495286594951626456388505329550532632150, 'stdout': '1601577252915258761470969495286594951626456388505329550532632150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10919427871704102}",1,Compute: 92804416066472529952843705445394 * 17257554336294788643880765155475
280,add,2,151,151,1,151,1,"{'ok': True, 'value': 151, 'stdout': '151\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13617563247680664}",1,Compute: 91 + 60
281,add,2,125,125,1,125,1,"{'ok': True, 'value': 125, 'stdout': '125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11287069320678711}",1,Compute: 56 + 69
282,ilp_prod,16,162,150,0,180,0,"{'ok': True, 'value': 168, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/523583d1d8b04a278d3e4655af979089-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/523583d1d8b04a278d3e4655af979089-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 85.342858 (6)\n4  Obj 168.42857\nOptimal - objective value 168.42857\nOptimal objective 168.4285714 - 4 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n168.42857154\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1955883502960205}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [45, 11, 39, 42, 16, 11]
consumption (rows=resources) = [[10, 2, 4, 15, 8, 13], [9, 5, 7, 16, 11, 14], [7, 6, 1, 14, 11, 13], [15, 13, 14, 16, 11, 14]]
capacity = [46, 41, 60, 57]
upper_bounds = [3, 4, 4, 3, 3, 3]"
283,lcs,32,18,3,0,14,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08899426460266113}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbaccdcbaababdcacbbbbdcdcdaadcdd""
T = ""abaacddcbddadcdcacbcdacdbdbccab"""
284,rod,8,168,22,0,22,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1060478687286377}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 12, 2, 10, 3, 4, 9, 14]"
285,lcs,16,9,6,0,29,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08810949325561523}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caddaaabbcabbaca""
T = ""cdbadbcabddbbcd"""
286,ilp_assign,8,32,10,0,117,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5522205829620361}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 15, 5, 6, 3, 11, 9], [2, 19, 12, 18, 18, 8, 4], [23, 24, 10, 22, 2, 7, 4], [19, 2, 20, 10, 21, 20, 11], [21, 18, 20, 14, 18, 24, 3], [5, 7, 23, 15, 1, 14, 20], [9, 9, 11, 20, 8, 17, 14]]"
287,knap,16,405,107,0,958,0,"{'ok': True, 'value': 405, 'stdout': '405\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09035277366638184}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 7, 1, 8, 20, 11, 14, 22, 29, 31, 25, 10, 19, 9, 11, 13]
V = [32, 24, 34, 52, 4, 6, 14, 13, 12, 31, 58, 55, 11, 41, 42, 53]
C = 130"
288,ilp_prod,32,341,108,0,1035,0,"{'ok': True, 'value': 362, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2de85e6aa2c549ea947d779996e39ec7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2de85e6aa2c549ea947d779996e39ec7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 1217.915 (6)\n3  Obj 362.37317\nOptimal - objective value 362.37317\nOptimal objective 362.3731656 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n362.373165868\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18021011352539062}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 78, 42, 62, 71, 15]
consumption (rows=resources) = [[25, 29, 28, 18, 2, 15], [12, 5, 27, 3, 23, 12], [9, 24, 9, 10, 15, 2], [30, 13, 25, 23, 28, 16]]
capacity = [124, 89, 66, 124]
upper_bounds = [4, 3, 3, 5, 3, 7]"
289,ilp_prod,8,80,108,0,107,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_sc21ka5i/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_sc21ka5i/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15492939949035645}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 17, 21, 5]
consumption (rows=resources) = [[5, 7, 6, 1], [7, 5, 8, 4], [2, 2, 1, 8], [4, 5, 7, 6]]
capacity = [30, 25, 24, 28]
upper_bounds = [3, 4, 3, 3]"
290,ilp_assign,32,121,16,0,18,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ls8p_1zz/main.py"", line 23, in <module>\n    min_total_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_ls8p_1zz/main.py"", line 17, in hungarian_algorithm\n    cost_matrix[:, j] = [x - min_uncovered for x in cost_matrix[:, j]]\nTypeError: list indices must be integers or slices, not tuple\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20677614212036133}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 2, 76, 93, 17, 45, 31], [22, 51, 38, 40, 64, 2, 64], [61, 75, 57, 13, 62, 32, 10], [28, 38, 95, 35, 27, 57, 39], [69, 56, 42, 90, 51, 13, 96], [58, 77, 81, 43, 12, 90, 16], [84, 89, 52, 38, 86, 89, 22]]"
291,lcs,16,10,6,0,8,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0864713191986084}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbcbcaadaabcdac""
T = ""ccacbaccacadbbdc"""
292,rod,2,10,4,0,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_je7nqohs/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_je7nqohs/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10096931457519531}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 4]"
293,mul,32,852689445891350607345562126520379798223353583362489586439773520,79812204572181010000000000000000,0,859995062649538226785999857596564674932480654604464464648,0,"{'ok': True, 'value': 852689445891350607345562126520379798223353583362489586439773520, 'stdout': '852689445891350607345562126520379798223353583362489586439773520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08510231971740723}",1,Compute: 26327249222614720519483381421990 * 32388094885313840283613088888248
294,sub,8,10664314,10664314,1,10664314,1,"{'ok': True, 'value': 10664314, 'stdout': '10664314\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10849380493164062}",1,Compute: 36217405 - 25553091
295,ilp_assign,8,45,36,0,46,0,"{'ok': True, 'value': -66, 'stdout': '-66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2366015911102295}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 5, 10, 5, 12, 23, 2], [18, 22, 24, 12, 19, 22, 18], [15, 2, 24, 2, 24, 5, 19], [11, 5, 22, 21, 5, 18, 23], [2, 11, 22, 17, 24, 14, 22], [9, 7, 21, 17, 22, 16, 8], [10, 3, 22, 16, 15, 23, 9]]"
296,ilp_partition,16,1,1,1,28,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09215617179870605}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [39, 38, 18, 23, 23, 41, 11, 15, 48, 33, 10, 33, 6, 19, 10, 2]"
297,add,16,10381001587884161,10380991587884161,0,10380991587884161,0,"{'ok': True, 'value': 10381001587884161, 'stdout': '10381001587884161\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0998682975769043}",1,Compute: 7628192184276166 + 2752809403607995
298,add,16,8044772320654618,8044772320654618,1,8044772320654618,1,"{'ok': True, 'value': 8044772320654618, 'stdout': '8044772320654618\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09099078178405762}",1,Compute: 1609981337355422 + 6434790983299196
299,sub,4,1543,1543,1,1543,1,"{'ok': True, 'value': 1543, 'stdout': '1543\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08945512771606445}",1,Compute: 4641 - 3098
300,ilp_assign,32,74,155,0,226,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_3xbztdqd/main.py"", line 39, in <module>\n    res = hungarian_algorithm(np.array(C))\n  File ""/tmp/cot_exec_3xbztdqd/main.py"", line 14, in hungarian_algorithm\n    cost_matrix[i][j] = \'*\'\nValueError: invalid literal for int() with base 10: \'*\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20863604545593262}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[74, 41, 73, 83, 13, 78, 4], [21, 60, 60, 14, 59, 95, 74], [19, 19, 17, 50, 80, 22, 28], [89, 94, 3, 62, 69, 79, 43], [14, 53, 36, 55, 14, 89, 58], [28, 21, 63, 23, 11, 11, 27], [86, 55, 73, 72, 9, 57, 53]]"
301,ilp_prod,2,32,16,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_mjcn_3du/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1872234344482422}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8]
consumption (rows=resources) = [[2, 3], [2, 3]]
capacity = [8, 10]
upper_bounds = [4, 3]"
302,add,16,12997742416386074,5,0,12997742416386074,1,"{'ok': True, 'value': 12997742416386074, 'stdout': '12997742416386074\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09210085868835449}",1,Compute: 3658359516145982 + 9339382900240092
303,rod,32,816,1055,0,876,0,"{'ok': True, 'value': 816, 'stdout': '816\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1030130386352539}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [6, 51, 50, 38, 36, 61, 52, 46, 68, 28, 37, 20, 57, 88, 36, 68, 79, 26, 5, 40, 17, 22, 85, 95, 26, 86, 28, 76, 6, 27, 56, 66]"
304,ilp_partition,4,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08637046813964844}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 4, 4]"
305,mul,4,17907022,18840262,0,17705922,0,"{'ok': True, 'value': 17907022, 'stdout': '17907022\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08617830276489258}",1,Compute: 8218 * 2179
306,ilp_assign,8,25,22,0,18,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6691079139709473}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 8, 19, 22, 7, 18, 2], [16, 14, 14, 13, 16, 5, 3], [4, 22, 21, 9, 4, 4, 14], [13, 5, 13, 2, 12, 21, 24], [15, 9, 11, 3, 7, 8, 20], [3, 2, 8, 5, 22, 13, 12], [21, 6, 3, 8, 14, 24, 22]]"
307,ilp_assign,16,60,104,0,117,0,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3944978713989258}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 37, 45, 43, 22, 3, 30], [23, 17, 23, 44, 10, 44, 30], [33, 19, 35, 24, 42, 1, 9], [8, 7, 16, 5, 5, 28, 43], [23, 16, 20, 14, 28, 6, 16], [4, 20, 39, 31, 48, 9, 28], [14, 9, 45, 31, 45, 28, 25]]"
308,ilp_partition,4,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10011434555053711}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 4, 12, 7]"
309,knap,32,1566,2085,0,1456,0,"{'ok': True, 'value': 1566, 'stdout': '1566\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10971355438232422}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [41, 15, 27, 39, 46, 23, 26, 44, 56, 14, 30, 59, 55, 50, 45, 55, 7, 23, 60, 37, 11, 14, 5, 63, 33, 61, 32, 27, 55, 55, 38, 9]
V = [109, 83, 48, 123, 40, 118, 71, 19, 10, 71, 89, 63, 35, 69, 6, 8, 97, 86, 107, 72, 60, 6, 12, 36, 17, 43, 46, 53, 100, 64, 75, 77]
C = 577"
310,sub,32,7626792996041418657405915221494,7626792995941418657456025141498,0,7626793006041418657405915221494,0,"{'ok': True, 'value': 7626792996041418657405915221494, 'stdout': '7626792996041418657405915221494\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10151362419128418}",1,Compute: 18647655914449770421058294288396 - 11020862918408351763652379066902
311,ilp_prod,32,279,150,0,2550,0,"{'ok': True, 'value': 302, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/335fb7b2dfea487a89b8e8c45f7e26fa-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/335fb7b2dfea487a89b8e8c45f7e26fa-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 286.28571 (6)\n3  Obj 302.10625\nOptimal - objective value 302.10625\nOptimal objective 302.1062478 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n302.10625330000005\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16492176055908203}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 75, 39, 23, 67, 35]
consumption (rows=resources) = [[11, 11, 7, 29, 11, 32], [28, 17, 5, 12, 32, 10], [25, 32, 24, 14, 11, 10], [11, 28, 11, 29, 8, 10]]
capacity = [81, 109, 83, 94]
upper_bounds = [3, 3, 3, 3, 3, 3]"
312,knap,16,432,159,0,1075,0,"{'ok': True, 'value': 432, 'stdout': '432\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08801770210266113}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 31, 32, 29, 1, 5, 16, 28, 28, 13, 23, 28, 32, 16, 17, 2]
V = [29, 15, 43, 58, 21, 31, 32, 37, 51, 63, 44, 49, 57, 56, 3, 34]
C = 159"
313,sub,2,22,22,1,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08746814727783203}",1,Compute: 94 - 72
314,ilp_prod,4,53,-1,0,56,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ymlu90hn/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1595151424407959}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 8, 11]
consumption (rows=resources) = [[2, 4, 2], [1, 3, 3], [3, 4, 2]]
capacity = [11, 12, 15]
upper_bounds = [5, 3, 4]"
315,lcs,8,4,4,1,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09034419059753418}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcaccaad""
T = ""aadbcbdcd"""
316,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09813976287841797}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 1, 3]"
317,ilp_prod,16,108,155,0,165,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_23pbgznh/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_23pbgznh/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16448068618774414}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4, 34, 26, 36, 3]
consumption (rows=resources) = [[14, 10, 1, 11, 16, 1], [1, 4, 12, 4, 5, 16], [15, 12, 15, 12, 2, 13], [1, 2, 14, 15, 5, 3]]
capacity = [33, 56, 44, 40]
upper_bounds = [3, 3, 3, 3, 3, 3]"
318,knap,32,1782,104,0,1044,0,"{'ok': True, 'value': 1782, 'stdout': '1782\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10294008255004883}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [59, 35, 11, 20, 6, 33, 44, 3, 40, 51, 20, 7, 35, 41, 36, 6, 5, 41, 49, 40, 63, 47, 24, 61, 29, 55, 36, 9, 33, 25, 59, 1]
V = [110, 80, 42, 6, 35, 7, 98, 124, 113, 36, 30, 90, 32, 81, 60, 35, 120, 61, 30, 32, 108, 111, 105, 13, 70, 22, 119, 37, 120, 127, 41, 104]
C = 512"
319,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0992286205291748}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dc""
T = ""dbb"""
320,rod,16,184,64,0,60,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08845257759094238}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [6, 23, 18, 25, 4, 29, 45, 9, 47, 12, 2, 3, 35, 1, 14, 38]"
321,ilp_prod,4,32,-1,0,36,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_pvgwel47/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1738135814666748}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4, 6]
consumption (rows=resources) = [[3, 1, 2], [2, 1, 4], [3, 4, 1]]
capacity = [12, 10, 13]
upper_bounds = [4, 3, 3]"
322,knap,8,83,103,0,47,0,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08572268486022949}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 10, 13, 9, 5, 4, 13]
V = [12, 23, 10, 22, 26, 6, 11, 8]
C = 31"
323,mul,8,1127595186000554,7,0,11250000000000,0,"{'ok': True, 'value': 1127595186000554, 'stdout': '1127595186000554\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10190939903259277}",1,Compute: 89729693 * 12566578
324,lcs,32,19,17,0,20,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10095977783203125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addccbabdbcadaccdacaabcbcbbcccca""
T = ""daddaddbaacccbabcbadbbddbdacbada"""
325,sub,8,52123153,52123153,1,52123153,1,"{'ok': True, 'value': 52123153, 'stdout': '52123153\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08530783653259277}",1,Compute: 68765541 - 16642388
326,ilp_partition,4,4,8,0,2,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09761738777160645}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 7, 9, 11]"
327,mul,8,413014499248935,87898,0,41341343687525,0,"{'ok': True, 'value': 413014499248935, 'stdout': '413014499248935\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10810565948486328}",1,Compute: 30759987 * 13427005
328,ilp_prod,32,577,315,0,1004,0,"{'ok': True, 'value': 577, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7fabaf35d4d5432ca85c470c849e0c6a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7fabaf35d4d5432ca85c470c849e0c6a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 642.791 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -489 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 4 columns\nCbc0012I Integer solution of -565 found by DiveCoefficient after 218 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 6\nCbc0013I At root node, 3 cuts changed objective from -642.79105 to -620.00247 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 180 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -565 best solution, best possible -620.00247 (0.01 seconds)\nCbc0012I Integer solution of -577 found by rounding after 219 iterations and 1 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -577, took 283 iterations and 8 nodes (0.02 seconds)\nCbc0032I Strong branching done 26 times (52 iterations), fathomed 1 nodes and fixed 1 variables\nCbc0035I Maximum depth 3, 6 variables fixed on reduced cost\nCuts at root node changed objective from -642.791 to -620.002\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 122 times and created 210 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                577.00000000\nEnumerated nodes:               8\nTotal iterations:               283\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.02\n\n577.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19402766227722168}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [87, 3, 79, 74, 75, 20]
consumption (rows=resources) = [[31, 4, 4, 6, 1, 21], [17, 15, 14, 10, 17, 19], [6, 24, 14, 21, 28, 11], [13, 10, 22, 29, 3, 28]]
capacity = [128, 120, 108, 128]
upper_bounds = [4, 4, 5, 4, 3, 4]"
329,ilp_prod,32,420,1002,0,1008,0,"{'ok': True, 'value': 432, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8360dd743be14caaab57cf3e61872d6c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8360dd743be14caaab57cf3e61872d6c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 109.59477 (6)\n3  Obj 432.44444\nOptimal - objective value 432.44444\nOptimal objective 432.4444444 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n432.4444404\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1725311279296875}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 19, 84, 91, 24, 84]
consumption (rows=resources) = [[15, 32, 18, 8, 1, 13], [28, 20, 15, 24, 4, 19], [3, 17, 21, 30, 18, 5], [16, 26, 18, 32, 10, 12]]
capacity = [117, 95, 107, 66]
upper_bounds = [3, 3, 3, 3, 5, 5]"
330,ilp_assign,16,73,10,0,115,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3861815929412842}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[33, 13, 39, 28, 24, 9, 48], [46, 2, 31, 20, 12, 23, 7], [21, 16, 42, 22, 48, 26, 41], [16, 26, 4, 4, 19, 18, 38], [13, 35, 32, 46, 41, 29, 28], [1, 1, 28, 10, 18, 37, 48], [12, 23, 28, 39, 25, 2, 48]]"
331,knap,16,370,143,0,1093,0,"{'ok': True, 'value': 370, 'stdout': '370\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08981561660766602}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 13, 26, 8, 3, 18, 23, 30, 2, 13, 14, 27, 8, 24, 26, 21]
V = [7, 24, 54, 28, 34, 59, 40, 16, 30, 1, 3, 13, 44, 30, 13, 51]
C = 143"
332,add,32,134201208185936217086328472378757,99202977617390831274861994083460,0,134202208186936217086328472379757,0,"{'ok': True, 'value': 134201208185936217086328472378757, 'stdout': '134201208185936217086328472378757\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11775779724121094}",1,Compute: 34998230568545385811466478295297 + 99202977617390831274861994083460
333,ilp_assign,8,35,35,1,6,0,"{'ok': True, 'value': -48, 'stdout': '-48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22094941139221191}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 13, 5, 18, 15, 6, 16], [9, 12, 22, 7, 23, 11, 12], [16, 23, 24, 14, 21, 6, 8], [21, 2, 10, 7, 4, 22, 14], [15, 15, 1, 6, 24, 3, 3], [1, 16, 10, 6, 12, 7, 17], [10, 10, 9, 10, 11, 24, 4]]"
334,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09006738662719727}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""c"""
335,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10436892509460449}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [88, 38, 76, 83, 74, 3, 42, 84, 17, 50, 8, 77, 66, 80, 60, 35, 81, 77, 3, 49, 34, 56, 2, 5]"
336,add,32,39651781595977365223264072486707,39651781592977365223304072486687,0,39651781595977365223264072486687,0,"{'ok': True, 'value': 39651781595977365223264072486707, 'stdout': '39651781595977365223264072486707\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09811019897460938}",1,Compute: 14960896384081926230954834789144 + 24690885211895438992309237697563
337,rod,16,608,46,0,191,0,"{'ok': True, 'value': 608, 'stdout': '608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09284567832946777}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [38, 34, 18, 31, 15, 40, 32, 14, 33, 14, 8, 16, 46, 41, 34, 7]"
338,ilp_partition,16,1,1,1,180,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10227227210998535}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 26, 47, 18, 27, 30, 3, 36, 2, 18, 27, 40, 23, 33, 42, 27]"
339,ilp_partition,4,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08936381340026855}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 7, 10, 12]"
340,add,4,7745,7745,1,7745,1,"{'ok': True, 'value': 7745, 'stdout': '7745\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10157132148742676}",1,Compute: 6120 + 1625
341,add,4,8003,8003,1,8003,1,"{'ok': True, 'value': 8003, 'stdout': '8003\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10099053382873535}",1,Compute: 4422 + 3581
342,add,4,4647,4647,1,4647,1,"{'ok': True, 'value': 4647, 'stdout': '4647\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09677791595458984}",1,Compute: 3262 + 1385
343,mul{'ok': True, 'value': 4299225065150844536661597315418696348328436344854239127387930320, 'stdout': '4299225065150844536661597315418696348328436344854239127387930320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09804749488830566}",1,Compute: 88953227685300692032929438671082 * 48331299234701982472988144194760
344,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08820390701293945}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 4, 16, 14, 15, 12, 17, 17]"
345,ilp_prod,8,96,126,0,0,0,"{'ok': True, 'value': 107, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/899540f3d06f4da9a9f30abd488aff90-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/899540f3d06f4da9a9f30abd488aff90-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 47 (4)\n1  Obj 107.14286\nOptimal - objective value 107.14286\nOptimal objective 107.1428571 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n107.1428572\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16993141174316406}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 18, 20, 4]
consumption (rows=resources) = [[3, 4, 5, 1], [3, 5, 1, 2], [8, 5, 7, 8], [5, 2, 5, 3]]
capacity = [29, 28, 31, 23]
upper_bounds = [3, 5, 4, 3]"
346,add,8,86264052,86264052,1,86264052,1,"{'ok': True, 'value': 86264052, 'stdout': '86264052\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09571218490600586}",1,Compute: 66292913 + 19971139
347,add,4,12665,,0,12665,1,"{'ok': True, 'value': 12665, 'stdout': '12665\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10980701446533203}",1,Compute: 9962 + 2703
348,sub,8,682938,682938,1,682938,1,"{'ok': True, 'value': 682938, 'stdout': '682938\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08826208114624023}",1,Compute: 38732797 - 38049859
349,add,2,98,98,1,98,1,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09674429893493652}",1,Compute: 14 + 84
350,ilp_prod,4,28,33,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_dlibeko4/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16588878631591797}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 6, 11]
consumption (rows=resources) = [[4, 1, 4], [3, 1, 4], [3, 3, 4]]
capacity = [11, 10, 11]
upper_bounds = [3, 3, 3]"
351,knap,2,12,11,0,12,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0992441177368164}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 2]
V = [9, 5, 3]
C = 5"
352,add,8,62281562,62281562,1,62281562,1,"{'ok': True, 'value': 62281562, 'stdout': '62281562\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08469152450561523}",1,Compute: 38318235 + 23963327
353,rod,32,1014,1072,0,83,0,"{'ok': True, 'value': 1014, 'stdout': '1014\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09626126289367676}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [27, 34, 96, 32, 43, 78, 8, 22, 82, 71, 53, 37, 86, 12, 28, 27, 2, 81, 17, 72, 59, 21, 36, 80, 9, 53, 54, 83, 37, 29, 15, 14]"
354,ilp_prod,8,63,105,0,0,0,"{'ok': True, 'value': 69, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/22598eee77764b1f9eabf77747748cfa-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/22598eee77764b1f9eabf77747748cfa-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 58 (4)\n1  Obj 69.75\nOptimal - objective value 69.75\nOptimal objective 69.75 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n69.75\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.171370267868042}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 18, 5, 21]
consumption (rows=resources) = [[8, 8, 5, 7], [3, 3, 3, 3], [5, 2, 5, 6], [6, 4, 8, 5]]
capacity = [24, 30, 22, 28]
upper_bounds = [3, 3, 3, 3]"
355,ilp_prod,8,95,76,0,0,0,"{'ok': True, 'value': 95, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3509c83d3bdd48d2aad2f04a682b9f23-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3509c83d3bdd48d2aad2f04a682b9f23-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 95 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -95 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -95, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -95 to -95\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                95.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n95.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17887544631958008}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7, 19, 19]
consumption (rows=resources) = [[6, 8, 6, 3], [6, 5, 3, 6], [1, 2, 3, 2], [4, 5, 6, 7]]
capacity = [30, 17, 18, 30]
upper_bounds = [3, 3, 5, 3]"
356,ilp_assign,32,79,49,0,130,0,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3874936103820801}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[48, 55, 11, 54, 42, 14, 80], [77, 62, 12, 3, 28, 81, 42], [34, 21, 38, 75, 10, 32, 26], [19, 20, 26, 69, 6, 57, 18], [8, 37, 23, 41, 5, 91, 34], [61, 93, 27, 14, 79, 24, 44], [61, 5, 25, 4, 26, 15, 54]]"
357,sub,2,29,29,1,29,1,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08738970756530762}",1,Compute: 85 - 56
358,lcs,4,3,3,1,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09980106353759766}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcd""
T = ""dbdd"""
359,add,8,116092783,,0,116092783,1,"{'ok': True, 'value': 116092783, 'stdout': '116092783\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09123778343200684}",1,Compute: 62821080 + 53271703
360,knap,8,117,140,0,58,0,"{'ok': True, 'value': 117, 'stdout': '117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09279060363769531}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 2, 8, 9, 2, 13, 16, 12]
V = [21, 15, 22, 30, 21, 22, 12, 29]
C = 33"
361,lcs,32,21,15,0,20,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09922671318054199}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbdbcbddaabbcbdbbdbcbbcbcdcbdba""
T = ""dbcbbdcdaadbbdbbadacaccdbdadcdcab"""
362,mul,16,48560305299319091666402125398150,49043483384333165739333275,0,487287365955879705776433650,0,"{'ok': True, 'value': 48560305299319091666402125398150, 'stdout': '48560305299319091666402125398150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08902239799499512}",1,Compute: 5045669695769917 * 9624154617181950
363,add,4,11146,11164,0,11146,1,"{'ok': True, 'value': 11146, 'stdout': '11146\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09179377555847168}",1,Compute: 7892 + 3254
364,add,4,14380,,0,14380,1,"{'ok': True, 'value': 14380, 'stdout': '14380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09961962699890137}",1,Compute: 8600 + 5780
365,add,16,13267656655447531,32977166564532361,0,13267656655447531,1,"{'ok': True, 'value': 13267656655447531, 'stdout': '13267656655447531\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10076522827148438}",1,Compute: 3901061919286579 + 9366594736160952
366,sub,8,56140272,56140272,1,56140272,1,"{'ok': True, 'value': 56140272, 'stdout': '56140272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10536551475524902}",1,Compute: 83705167 - 27564895
367,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0993342399597168}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddda""
T = ""ddccb"""
368,mul,32,4275346185943552111694844627382329449167878271415857968372253100,"The actual answer to the multiplication is too large to fit into a standard data type in many programming languages. However, the simplified problem can be computed using the distributive property of multiplication over addition{'ok': True, 'value': 4275346185943552111694844627382329449167878271415857968372253100, 'stdout': '4275346185943552111694844627382329449167878271415857968372253100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0982367992401123}",1,Compute: 67828585262886541730717012138405 * 63031628470111609781212425737020
369,ilp_prod,4,39,119,0,65,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_a_qeefgq/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15909934043884277}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7, 8]
consumption (rows=resources) = [[1, 2, 2], [2, 1, 3], [4, 2, 2]]
capacity = [11, 14, 12]
upper_bounds = [3, 5, 4]"
370,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10183238983154297}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 1, 4]"
371,knap,8,119,64,0,60,0,"{'ok': True, 'value': 119, 'stdout': '119\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0923759937286377}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 1, 9, 7, 13, 1, 7, 2]
V = [32, 12, 24, 30, 25, 31, 2, 14]
C = 25"
372,sub,16,2080271911727769,2080271911727769,1,2080271911727769,1,"{'ok': True, 'value': 2080271911727769, 'stdout': '2080271911727769\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08700013160705566}",1,Compute: 9711114191331390 - 7630842279603621
373,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08407092094421387}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""b"""
374,ilp_partition,16,1,1,1,214,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09460616111755371}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 34, 42, 27, 3, 47, 44, 3, 22, 16, 41, 44, 13, 4, 38, 26]"
375,sub,32,3592578680602234789227584596423,-3592578669552234878922758459642,0,35925786780602224799227584596423,0,"{'ok': True, 'value': 3592578680602234789227584596423, 'stdout': '3592578680602234789227584596423\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1073150634765625}",1,Compute: 43694102432983866458919422078516 - 40101523752381631669691837482093
376,ilp_prod,16,180,140,0,166,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_99b5yagn/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_99b5yagn/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1782546043395996}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 27, 27, 42, 21, 41]
consumption (rows=resources) = [[3, 7, 12, 14, 12, 13], [3, 4, 16, 1, 5, 6], [2, 3, 4, 7, 7, 4], [16, 12, 8, 6, 7, 12]]
capacity = [59, 34, 39, 49]
upper_bounds = [3, 4, 3, 4, 4, 4]"
377,knap,32,1777,1044,0,1074,0,"{'ok': True, 'value': 1777, 'stdout': '1777\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12511754035949707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 59, 64, 56, 19, 37, 12, 40, 64, 64, 36, 58, 40, 22, 37, 21, 59, 9, 15, 59, 43, 54, 48, 20, 33, 57, 24, 39, 42, 13, 40, 17]
V = [72, 25, 94, 97, 114, 12, 91, 41, 109, 40, 118, 89, 59, 84, 125, 21, 117, 116, 54, 113, 89, 34, 33, 113, 91, 17, 57, 9, 40, 41, 69, 106]
C = 608"
378,rod,2,4,2,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_m9efjrcz/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_m9efjrcz/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09782719612121582}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 1]"
379,mul,8,1744791393347584,6750,0,1732606433599944,0,"{'ok': True, 'value': 1744791393347584, 'stdout': '1744791393347584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09463810920715332}",1,Compute: 66814283 * 26114048
380,mul,8,1746938956160949,173422886,0,23873307,0,"{'ok': True, 'value': 1746938956160949, 'stdout': '1746938956160949\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15442109107971191}",1,Compute: 73175407 * 23873307
381,ilp_prod,16,146,158,0,153,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_wo6qergj/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_wo6qergj/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18570160865783691}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 7, 23, 31, 27, 42]
consumption (rows=resources) = [[8, 2, 8, 15, 15, 6], [14, 7, 2, 16, 15, 4], [13, 4, 8, 9, 8, 15], [9, 10, 9, 16, 8, 10]]
capacity = [59, 61, 47, 50]
upper_bounds = [3, 5, 5, 3, 3, 3]"
382,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08784174919128418}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 23, 34, 27, 34, 31, 20, 1, 40, 35, 41, 24, 23, 32, 3, 8]"
383,sub,4,3869,3869,1,3869,1,"{'ok': True, 'value': 3869, 'stdout': '3869\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09024167060852051}",1,Compute: 9770 - 5901
384,add,4,6984,,0,7084,0,"{'ok': True, 'value': 6984, 'stdout': '6984\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09083390235900879}",1,Compute: 4209 + 2775
385,add,2,118,118,1,118,1,"{'ok': True, 'value': 118, 'stdout': '118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09410667419433594}",1,Compute: 74 + 44
386,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09564948081970215}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 1, 5]"
387,add,8,145247338,,0,145247338,1,"{'ok': True, 'value': 145247338, 'stdout': '145247338\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09717893600463867}",1,Compute: 92185974 + 53061364
388,ilp_prod,16,192,140,0,162,0,"{'ok': True, 'value': 194, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c51937dda51c49e8b1e14cbd9012d966-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c51937dda51c49e8b1e14cbd9012d966-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 79.750523 (6)\n3  Obj 194.09412\nOptimal - objective value 194.09412\nOptimal objective 194.0941176 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n194.09411862000002\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18485569953918457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 37, 39, 34, 12, 38]
consumption (rows=resources) = [[10, 2, 8, 1, 10, 7], [6, 11, 14, 9, 13, 6], [5, 4, 2, 1, 3, 9], [12, 10, 5, 14, 7, 13]]
capacity = [46, 46, 48, 51]
upper_bounds = [4, 4, 3, 3, 3, 3]"
389,ilp_partition,8,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10143494606018066}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 2, 1, 10, 21, 2, 24, 11]"
390,add,16,10207107728817515,9235107734817515,0,9134787553595515,0,"{'ok': True, 'value': 10207107728817515, 'stdout': '10207107728817515\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09595465660095215}",1,Compute: 1191466865802379 + 9015640863015136
391,knap,32,1577,1004,0,1050,0,"{'ok': True, 'value': 1577, 'stdout': '1577\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11849641799926758}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [33, 64, 30, 50, 16, 3, 11, 28, 2, 57, 9, 28, 57, 11, 57, 2, 5, 8, 33, 44, 14, 57, 26, 36, 57, 29, 25, 29, 4, 63, 40, 56]
V = [121, 78, 52, 47, 4, 59, 112, 30, 58, 57, 39, 100, 97, 65, 5, 66, 54, 23, 122, 45, 66, 126, 63, 48, 87, 25, 35, 105, 60, 9, 46, 90]
C = 492"
392,add,16,13371087564946677,13371087564946677,1,13371087564946677,1,"{'ok': True, 'value': 13371087564946677, 'stdout': '13371087564946677\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10378456115722656}",1,Compute: 5643657843702432 + 7727429721244245
393,ilp_prod,32,306,166,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_vr915wyb/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_vr915wyb/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17096614837646484}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 88, 18, 26, 52, 42]
consumption (rows=resources) = [[1, 9, 27, 12, 21, 9], [21, 27, 28, 2, 19, 32], [27, 6, 7, 28, 18, 18], [32, 4, 24, 26, 21, 3]]
capacity = [107, 83, 126, 113]
upper_bounds = [3, 3, 3, 4, 4, 3]"
394,rod,4,48,12,0,33,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10093808174133301}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 6, 9, 2]"
395,lcs,8,5,4,0,6,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09873747825622559}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baacdabc""
T = ""cdabcbcc"""
396,sub,32,37255696142819710347949948161345,37256696142819710347949948161345,0,37255696142819710347949948161345,1,"{'ok': True, 'value': 37255696142819710347949948161345, 'stdout': '37255696142819710347949948161345\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09202384948730469}",1,Compute: 56770062470956759068780560442754 - 19514366328137048720830612281409
397,sub,4,4931,4931,1,4931,1,"{'ok': True, 'value': 4931, 'stdout': '4931\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09259271621704102}",1,Compute: 8040 - 3109
398,ilp_prod,4,61,55,0,35,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_vzb0umn2/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_vzb0umn2/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1649916172027588}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 11, 10]
consumption (rows=resources) = [[4, 3, 1], [1, 1, 2], [1, 1, 2]]
capacity = [8, 12, 12]
upper_bounds = [3, 3, 6]"
399,lcs,32,19,10,0,20,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10014891624450684}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdbcabbadbaddbbcdbabcdbddcaacad""
T = ""bcbaaccbbdbaabaddcaddaadcdabdabb"""
400,ilp_prod,8,38,105,0,105,0,"{'ok': True, 'value': 40, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2997ba405fd04d0eb87cdb3704082e65-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2997ba405fd04d0eb87cdb3704082e65-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 43 (4)\n1  Obj 40.333333\nOptimal - objective value 40.333333\nOptimal objective 40.33333333 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n40.33333329\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1681814193725586}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 6, 13, 6]
consumption (rows=resources) = [[5, 8, 6, 3], [5, 3, 5, 1], [4, 5, 7, 1], [8, 2, 2, 4]]
capacity = [17, 29, 29, 30]
upper_bounds = [3, 3, 3, 5]"
401,ilp_partition,8,0,1,0,8,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09800148010253906}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 23, 8, 3, 9, 9, 20, 5]"
402,knap,4,28,28,1,24,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09631681442260742}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 6, 2]
V = [6, 14, 7, 14]
C = 8"
403,ilp_assign,4,16,0,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_zu7_40ug/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_zu7_40ug/main.py"", line 21, in assignment_problem\n    C[row_covered == False, :][:, col_covered == False] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20260953903198242}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5, 3, 8], [8, 1, 7, 9], [7, 3, 4, 10], [6, 9, 7, 5]]"
404,add,16,8287404793690571,8287404793690571,1,8287404793690571,1,"{'ok': True, 'value': 8287404793690571, 'stdout': '8287404793690571\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09310650825500488}",1,Compute: 1268513625119048 + 7018891168571523
405,add,4,11122,10922,0,11122,1,"{'ok': True, 'value': 11122, 'stdout': '11122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11155462265014648}",1,Compute: 5462 + 5660
406,mul{'ok': True, 'value': 1336806925621727663770601300490572866119156449001432216083146806, 'stdout': '1336806925621727663770601300490572866119156449001432216083146806\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09537601470947266}",1,Compute: 29031553976652711937788526547734 * 46046688602917810286485987045809
407,ilp_assign,4,16,2,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6m3b56ta/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_6m3b56ta/main.py"", line 21, in assignment_problem\n    C[row_covered == False, :][:, col_covered == False] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21395659446716309}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 5, 4, 11], [8, 7, 1, 5], [9, 5, 5, 6], [4, 10, 11, 7]]"
408,mul,32,3881616669792596085045725070396714513001726190662286617340126930,7676748563571501866,0,3803985662858643997669929327446868674632363484664464965664281820,0,"{'ok': True, 'value': 3881616669792596085045725070396714513001726190662286617340126930, 'stdout': '3881616669792596085045725070396714513001726190662286617340126930\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09438395500183105}",1,Compute: 44642685764326973229642216189170 * 86948547188312624697372449417329
409,ilp_partition,2,1,0,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0980226993560791}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 1, 6, 3]"
410,knap,32,1578,1043,0,1064,0,"{'ok': True, 'value': 1578, 'stdout': '1578\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09203720092773438}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 7, 39, 27, 53, 5, 25, 44, 23, 8, 50, 27, 46, 34, 21, 5, 49, 62, 38, 2, 13, 47, 27, 56, 28, 2, 58, 35, 18, 32, 25, 13]
V = [118, 11, 119, 74, 94, 127, 60, 5, 55, 7, 32, 64, 92, 16, 70, 10, 15, 11, 2, 110, 100, 80, 56, 109, 50, 93, 124, 9, 49, 51, 87, 5]
C = 465"
411,knap,4,16,16,1,15,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09576606750488281}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 2, 6]
V = [5, 8, 8, 15]
C = 7"
412,ilp_partition,32,0,1,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0976874828338623}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [86, 20, 53, 49, 67, 40, 9, 56, 32, 39, 38, 32, 93, 67, 12, 33, 26, 67, 29, 24, 27, 13, 54, 16]"
413,ilp_partition,16,1,1,1,135,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09129476547241211}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [38, 44, 3, 30, 20, 48, 17, 41, 3, 43, 46, 37, 34, 39, 28, 48]"
414,ilp_partition,2,0,10,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09513592720031738}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 6, 4]"
415,mul,16,13059423702069715230671532964626,3367284423505714,0,1304447828413978564664634466463409,0,"{'ok': True, 'value': 13059423702069715230671532964626, 'stdout': '13059423702069715230671532964626\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08648419380187988}",1,Compute: 3878325101053809 * 3367284423505714
416,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09349799156188965}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbca""
T = ""adca"""
417,ilp_partition,32,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09301495552062988}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [76, 39, 36, 40, 61, 95, 48, 95, 16, 55, 55, 2, 44, 10, 96, 42, 73, 94, 47, 9, 56, 78, 96, 10]"
418,ilp_assign,2,10,10,1,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__zzqzqy7/main.py"", line 27, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec__zzqzqy7/main.py"", line 3, in assignment_problem\n    C = np.array(C)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09149479866027832}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5], [5, 6]]"
419,mul,4,14753610,14040,0,14739465,0,"{'ok': True, 'value': 14753610, 'stdout': '14753610\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09554338455200195}",1,Compute: 7155 * 2062
420,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0933218002319336}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""ab"""
421,sub,8,10105203,10105203,1,10105203,1,"{'ok': True, 'value': 10105203, 'stdout': '10105203\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09520697593688965}",1,Compute: 35150257 - 25045054
422,add,16,11834345491177016,11834345491177016,1,11834345491177016,1,"{'ok': True, 'value': 11834345491177016, 'stdout': '11834345491177016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09023928642272949}",1,Compute: 4553279029894225 + 7281066461282791
423,add,32,85555487671307893907602245415859,55489610746100401602085498472249,0,85555487671307893907602245415869,0,"{'ok': True, 'value': 85555487671307893907602245415859, 'stdout': '85555487671307893907602245415859\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1027064323425293}",1,Compute: 44168451939620401602085498472249 + 41387035731687492305516746943610
424,mul,16,18999413831011589646112180556994,64,0,19106629148228858669665669859516666,0,"{'ok': True, 'value': -5620621474904517438, 'stdout': '-5620621474904517438\n', 'stderr': '/tmp/cot_exec_dy_a6b0i/main.py:4: RuntimeWarning: overflow encountered in scalar multiply\n  return np.int64(a) * np.int64(b)\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21439766883850098}",0,Compute: 2852169824650577 * 6661389397925922
425,add,32,129800461161932191351039188954972,129790461161932191350979188954972,0,130000461161932191351039188954972,0,"{'ok': True, 'value': 129800461161932191351039188954972, 'stdout': '129800461161932191351039188954972\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10475397109985352}",1,Compute: 67399281380163123741389437610078 + 62401179781769067609649751344894
426,knap,8,74,140,0,83,0,"{'ok': True, 'value': 74, 'stdout': '74\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09727215766906738}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 11, 9, 3, 15, 9, 10, 3]
V = [8, 12, 2, 8, 29, 16, 30, 7]
C = 33"
427,ilp_prod,2,24,40,0,26,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_17fe0y1_/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16329050064086914}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[2, 3], [3, 2]]
capacity = [10, 6]
upper_bounds = [3, 3]"
428,mul,2,896,896,1,896,1,"{'ok': True, 'value': 896, 'stdout': '896\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09799599647521973}",1,Compute: 64 * 14
429,add,4,11599,,0,11609,0,"{'ok': True, 'value': 11599, 'stdout': '11599\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08576345443725586}",1,Compute: 9493 + 2106
430,lcs,32,19,16,0,26,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09767937660217285}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbaabbcddbdaadbaaaabacabacbbdccb""
T = ""dccbdcaadcbdcbddaaaccbbbccdbcaa"""
431,rod,16,560,46,0,496,0,"{'ok': True, 'value': 560, 'stdout': '560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10474562644958496}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 41, 9, 13, 18, 23, 48, 36, 39, 10, 18, 27, 6, 48, 48, 41]"
432,ilp_assign,32,109,13,0,110,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_x4x_6e8x/main.py"", line 31, in <module>\n    res = hungarian_algorithm(np.array(C))\n  File ""/tmp/cot_exec_x4x_6e8x/main.py"", line 14, in hungarian_algorithm\n    cost_matrix[i][j] = \'*\'\nValueError: invalid literal for int() with base 10: \'*\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20441293716430664}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 57, 29, 69, 31, 95, 4], [80, 2, 70, 63, 96, 94, 68], [85, 21, 55, 43, 6, 42, 73], [42, 88, 78, 64, 1, 83, 39], [8, 61, 51, 41, 29, 48, 69], [17, 24, 91, 67, 43, 93, 79], [50, 16, 2, 78, 28, 71, 54]]"
433,rod,8,80,22,0,32,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10536956787109375}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 20, 16, 9, 8, 14, 4, 8]"
434,lcs,4,3,2,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09732937812805176}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacb""
T = ""aabb"""
435,lcs,8,4,5,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09966230392456055}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbadbdda""
T = ""cdcccdacd"""
436,rod,32,2144,2139,0,1000,0,"{'ok': True, 'value': 2144, 'stdout': '2144\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09471344947814941}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [67, 66, 47, 83, 28, 79, 32, 61, 58, 4, 59, 3, 70, 96, 64, 5, 23, 79, 66, 22, 9, 94, 60, 44, 23, 15, 4, 34, 77, 50, 96, 14]"
437,ilp_assign,2,3,6,0,1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2138042449951172}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 6], [5, 1]]"
438,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10595965385437012}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcc""
T = ""abda"""
439,ilp_prod,16,126,150,0,105,0,"{'ok': True, 'value': 126, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/955c3589e4e947f6963ae5d2d2991bbf-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/955c3589e4e947f6963ae5d2d2991bbf-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 144.437 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -96 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -126 found by DiveCoefficient after 326 iterations and 0 nodes (0.02 seconds)\nCbc0031I 5 added rows had average density of 5.2\nCbc0013I At root node, 5 cuts changed objective from -144.43714 to -129.19187 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 221 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 107 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -126 best solution, best possible -129.19184 (0.02 seconds)\nCbc0001I Search completed - best objective -126, took 382 iterations and 4 nodes (0.03 seconds)\nCbc0032I Strong branching done 14 times (36 iterations), fathomed 0 nodes and fixed 2 variables\nCbc0035I Maximum depth 1, 1 variables fixed on reduced cost\nCuts at root node changed objective from -144.437 to -129.192\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)\nGomory was tried 112 times and created 245 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nTwoMirCuts was tried 112 times and created 140 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                126.00000000\nEnumerated nodes:               4\nTotal iterations:               382\nTime (CPU seconds):             0.03\nTime (Wallclock seconds):       0.03\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.03   (Wallclock seconds):       0.03\n\n126.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19449877738952637}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 39, 37, 27, 31, 29]
consumption (rows=resources) = [[9, 2, 9, 14, 7, 9], [8, 14, 16, 1, 9, 14], [2, 13, 3, 15, 12, 6], [15, 10, 13, 4, 2, 13]]
capacity = [35, 37, 41, 47]
upper_bounds = [3, 3, 3, 3, 3, 3]"
440,sub,16,73625476231681,73625476231681,1,73625476231681,1,"{'ok': True, 'value': 73625476231681, 'stdout': '73625476231681\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09865474700927734}",1,Compute: 5709721773151217 - 5636096296919536
441,ilp_assign,4,24,4,0,21,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22709178924560547}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 8, 6, 9], [3, 4, 4, 2], [5, 9, 8, 8], [8, 11, 12, 9]]"
442,add,8,32661552,32661552,1,32661552,1,"{'ok': True, 'value': 32661552, 'stdout': '32661552\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11871170997619629}",1,Compute: 16118699 + 16542853
443,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09456682205200195}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [82, 80, 22, 26, 66, 87, 61, 59, 69, 21, 25, 25, 46, 69, 43, 67, 62, 91, 57, 84, 64, 70, 90, 60]"
444,ilp_partition,16,0,1,0,136,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09474039077758789}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [48, 42, 15, 8, 24, 15, 7, 21, 46, 8, 1, 8, 33, 40, 37, 33]"
445,ilp_partition,16,0,1,0,80,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10607409477233887}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 21, 42, 25, 36, 4, 3, 26, 28, 20, 45, 41, 15, 21, 29, 4]"
446,rod,32,1664,1095,0,86,0,"{'ok': True, 'value': 1664, 'stdout': '1664\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10790657997131348}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [52, 25, 84, 35, 63, 41, 17, 29, 39, 92, 59, 42, 92, 58, 8, 69, 41, 78, 69, 62, 19, 78, 13, 22, 3, 38, 86, 42, 63, 81, 1, 57]"
447,knap,8,111,103,0,110,0,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08816790580749512}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 16, 9, 3, 9, 5, 11, 14]
V = [25, 13, 31, 19, 27, 7, 27, 26]
C = 39"
448,mul,16,7256454733987875846440615619532,2480965365284800,0,730119378657758364725444594,0,"{'ok': True, 'value': 7256454733987875846440615619532, 'stdout': '7256454733987875846440615619532\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834205150604248}",1,Compute: 2185769382207754 * 3319862924723758
449,sub,4,1045,1045,1,1045,1,"{'ok': True, 'value': 1045, 'stdout': '1045\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0835115909576416}",1,Compute: 5171 - 4126
450,knap,32,1727,10038,0,1054,0,"{'ok': True, 'value': 1727, 'stdout': '1727\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10497426986694336}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 43, 31, 37, 2, 31, 26, 6, 10, 51, 41, 24, 31, 50, 22, 27, 46, 56, 5, 60, 55, 25, 39, 8, 34, 55, 59, 29, 61, 64, 59, 20]
V = [72, 114, 73, 1, 78, 32, 105, 90, 16, 1, 25, 59, 42, 96, 74, 28, 75, 66, 128, 113, 75, 119, 89, 2, 107, 102, 113, 2, 20, 83, 79, 120]
C = 554"
451,ilp_partition,4,3,1,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10214519500732422}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 9, 10, 2]"
452,rod,2,8,5,0,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6sk5v71v/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_6sk5v71v/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10701489448547363}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
453,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.101776123046875}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 35, 47, 34, 18, 4, 17, 32, 24, 31, 4, 8, 10, 34, 48, 13]"
454,ilp_prod,32,224,189,0,1059,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_b0oekpet/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17777562141418457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [37, 58, 5, 67, 43, 34]
consumption (rows=resources) = [[2, 15, 6, 19, 12, 5], [9, 15, 12, 29, 13, 25], [21, 21, 30, 16, 10, 24], [8, 6, 5, 22, 24, 1]]
capacity = [85, 68, 72, 94]
upper_bounds = [3, 3, 3, 3, 3, 3]"
455,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09860968589782715}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 1, 2]"
456,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u_gc5i19/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_u_gc5i19/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09514570236206055}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
457,ilp_partition,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08647036552429199}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 4, 2, 4]"
458,ilp_prod,32,323,168,0,106,0,"{'ok': True, 'value': 323, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fef4a98254da402f84700614d52edafc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fef4a98254da402f84700614d52edafc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 358.19 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -318 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -323 found by DiveCoefficient after 36 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 4.5\nCbc0013I At root node, 4 cuts changed objective from -358.18952 to -323.00001 in 12 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 35 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 29 row cuts average 4.6 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -323, took 36 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -358.19 to -323\nProbing was tried 12 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 12 times and created 35 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 12 times and created 29 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                323.00000000\nEnumerated nodes:               0\nTotal iterations:               36\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n323.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17389678955078125}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 51, 9, 53, 5, 47]
consumption (rows=resources) = [[6, 7, 4, 15, 11, 13], [9, 28, 5, 15, 7, 20], [8, 16, 27, 12, 28, 9], [30, 13, 14, 16, 5, 27]]
capacity = [111, 111, 101, 109]
upper_bounds = [3, 3, 3, 6, 3, 4]"
459,add,32,80367059146519136068487134572721,80363059146519136128487134572722,0,80367059146519136068487134572721,1,"{'ok': True, 'value': 80367059146519136068487134572721, 'stdout': '80367059146519136068487134572721\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10723018646240234}",1,Compute: 29095869593183940002640297261460 + 51271189553335196065846837311261
460,knap,16,436,162,0,1048,0,"{'ok': True, 'value': 436, 'stdout': '436\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10413265228271484}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 31, 30, 2, 19, 32, 3, 31, 23, 14, 31, 18, 32, 31, 6, 5]
V = [64, 4, 26, 16, 10, 55, 34, 44, 38, 46, 4, 45, 16, 46, 31, 55]
C = 162"
461,sub,32,17576437599688822348740283903675,17576437603928822348943283903675,0,17576437604688822348738283903675,0,"{'ok': True, 'value': 17576437599688822348740283903675, 'stdout': '17576437599688822348740283903675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0858011245727539}",1,Compute: 82307054814392394821957855860014 - 64730617214703572473217571956339
462,lcs,32,20,12,0,21,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09215450286865234}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acacacadcadbbbbdaadabaadaacaccba""
T = ""babcccbaaacdbabdbaabdbdadacbabddb"""
463,ilp_prod,16,445,158,0,1050,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ib9dyppa/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_ib9dyppa/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16300034523010254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [35, 13, 42, 29, 17, 41]
consumption (rows=resources) = [[9, 2, 1, 16, 4, 2], [2, 9, 15, 12, 9, 4], [16, 4, 7, 11, 14, 3], [4, 3, 2, 16, 4, 4]]
capacity = [54, 42, 64, 46]
upper_bounds = [4, 4, 3, 3, 4, 10]"
464,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09256982803344727}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""b"""
465,sub,8,60165644,14172602,0,60165644,1,"{'ok': True, 'value': 60165644, 'stdout': '60165644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09633803367614746}",1,Compute: 74338246 - 14172602
466,ilp_prod,8,32,117,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_fkrfqob1/main.py"", line 11, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(4), range(4)), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 466, in dicts\n    d[i] = LpVariable.dicts(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16411161422729492}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 8, 8]
consumption (rows=resources) = [[1, 2, 3, 8], [8, 3, 1, 4], [4, 7, 4, 3], [4, 6, 6, 6]]
capacity = [25, 18, 28, 19]
upper_bounds = [3, 3, 3, 3]"
467,ilp_partition,4,3,0,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08885025978088379}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 3, 6, 9]"
468,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10598206520080566}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 44, 11, 48, 11, 7, 17, 4, 10, 46, 20, 30, 44, 21, 5, 19]"
469,add,16,12119524096961453,17519525087561324,0,12119524097061453,0,"{'ok': True, 'value': 12119524096961453, 'stdout': '12119524096961453\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09494519233703613}",1,Compute: 7597842775783696 + 4521681321177757
470,ilp_assign,8,30,28,0,39,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39317798614501953}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 20, 7, 3, 17, 13, 18], [13, 20, 1, 16, 2, 19, 6], [15, 7, 13, 24, 1, 21, 21], [8, 2, 13, 1, 9, 11, 21], [12, 13, 14, 5, 15, 5, 2], [7, 23, 13, 5, 17, 7, 1], [17, 24, 20, 4, 9, 14, 20]]"
471,ilp_partition,8,2,1,0,10,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08701252937316895}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 16, 15, 23, 14, 22, 16, 1]"
472,ilp_prod,4,37,76,0,55,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_4py2_bcb/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20019006729125977}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 11, 5]
consumption (rows=resources) = [[3, 2, 1], [2, 1, 3], [1, 3, 4]]
capacity = [13, 10, 9]
upper_bounds = [4, 3, 3]"
473,mul,16,35076302094944823093391329880189,349888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888,0,349705649699918959999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,"{'ok': True, 'value': 35076302094944823093391329880189, 'stdout': '35076302094944823093391329880189\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1029367446899414}",1,Compute: 4888956601060283 * 7174598786034983
474,ilp_assign,16,46,106,0,110,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22309255599975586}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[33, 46, 38, 45, 7, 17, 33], [33, 4, 48, 22, 33, 8, 34], [10, 14, 28, 5, 22, 48, 35], [6, 32, 35, 19, 47, 10, 42], [26, 3, 7, 22, 21, 41, 30], [11, 47, 40, 44, 4, 47, 16], [46, 43, 7, 10, 26, 16, 3]]"
475,knap,4,21,22,0,24,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10189056396484375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 7, 8, 8]
V = [9, 3, 7, 12]
C = 14"
476,add,2,141,141,1,141,1,"{'ok': True, 'value': 141, 'stdout': '141\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0923306941986084}",1,Compute: 64 + 77
477,rod,4,40,16,0,18,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09846234321594238}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 7, 8, 8]"
478,rod,2,10,5,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_wu61hvyr/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_wu61hvyr/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09447479248046875}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
479,rod,16,336,46,0,66,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_q12jtokv/main.py"", line 12, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_q12jtokv/main.py"", line 5, in rod_cutting\n    dp[i] = P[i]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10262203216552734}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [21, 2, 10, 45, 23, 37, 28, 36, 25, 39, 37, 1, 21, 22, 40, 10]"
480,ilp_assign,16,97,105,0,113,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40834498405456543}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 12, 19, 26, 5, 43, 45], [28, 41, 6, 25, 41, 44, 12], [24, 24, 26, 18, 24, 30, 8], [45, 11, 41, 27, 43, 17, 47], [22, 2, 13, 43, 5, 20, 46], [30, 23, 8, 29, 24, 48, 27], [47, 27, 13, 34, 44, 40, 40]]"
481,add,32,164702382838694336797896480460600,1,0,164690382838694336797906480460600,0,"{'ok': True, 'value': 164702382838694336797896480460600, 'stdout': '164702382838694336797896480460600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10235476493835449}",1,Compute: 74253874122781121861929541295955 + 90448508715913214935966939164645
482,mul,16,7720133104888063325712389405412,7484348338431356343433354,0,7733650284064432544492221266062012,0,"{'ok': True, 'value': 7720133104888063325712389405412, 'stdout': '7720133104888063325712389405412\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09082221984863281}",1,Compute: 4151139133005303 * 1859762551321404
483,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11229944229125977}",1,Compute: 75 - 74
484,lcs,16,9,5,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08852601051330566}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdbbabcabdbdcdd""
T = ""ddcbadbbdcbadcab"""
485,rod,16,544,502,0,310,0,"{'ok': True, 'value': 544, 'stdout': '544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0966956615447998}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [34, 31, 17, 8, 2, 34, 17, 19, 9, 43, 27, 13, 5, 21, 30, 19]"
486,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09601044654846191}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddaccccdbcbdbdba""
T = ""ddbbccbbbccbbdb"""
487,ilp_assign,4,19,1,0,18,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_w6e6cvhj/main.py"", line 30, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_w6e6cvhj/main.py"", line 23, in assignment_problem\n    C += np.inf\nnumpy.core._exceptions.UFuncTypeError: Cannot cast ufunc \'add\' output from dtype(\'float64\') to dtype(\'int64\') with casting rule \'same_kind\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22796297073364258}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 3, 10], [10, 5, 7, 6], [3, 10, 11, 1], [11, 9, 10, 8]]"
488,knap,2,8,10,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08737373352050781}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 5]
V = [1, 8, 5]
C = 5"
489,sub,16,5673688928562792,5673688928562792,1,5673688928562792,1,"{'ok': True, 'value': 5673688928562792, 'stdout': '5673688928562792\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08490777015686035}",1,Compute: 7990002238192827 - 2316313309630035
490,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09753251075744629}",1,Compute: 56 - 55
491,ilp_prod,4,30,45,0,60,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_mheg3fva/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_mheg3fva/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16871929168701172}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 10, 3]
consumption (rows=resources) = [[2, 3, 3], [4, 3, 3], [1, 3, 1]]
capacity = [14, 11, 10]
upper_bounds = [3, 3, 3]"
492,knap,2,10,18,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09552288055419922}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 4]
V = [1, 10, 7]
C = 5"
493,knap,8,110,103,0,52,0,"{'ok': True, 'value': 110, 'stdout': '110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10058116912841797}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 4, 6, 11, 8, 10, 10, 13]
V = [21, 30, 15, 7, 23, 21, 8, 6]
C = 34"
494,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10284090042114258}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 58, 10, 21, 30, 88, 82, 49, 70, 44, 88, 29, 21, 19, 61, 40, 33, 51, 33, 49, 44, 88, 54, 29]"
495,add,32,102442003422576604931735936915217,0,0,102441993422576604929735936915217,0,"{'ok': True, 'value': 102442003422576604931735936915217, 'stdout': '102442003422576604931735936915217\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08920764923095703}",1,Compute: 21754304553897761905304751492051 + 80687698868678843026431185423166
496,rod,16,768,46,0,60,0,"{'ok': True, 'value': 768, 'stdout': '768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09520816802978516}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [48, 5, 6, 11, 15, 47, 9, 14, 25, 12, 12, 23, 43, 1, 20, 11]"
497,ilp_assign,8,31,6,0,46,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40486955642700195}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 15, 18, 11, 16, 13, 21], [4, 10, 16, 7, 22, 4, 1], [14, 8, 10, 16, 22, 3, 14], [2, 4, 17, 23, 3, 24, 11], [12, 6, 24, 20, 12, 9, 12], [10, 7, 5, 1, 8, 2, 4], [18, 14, 16, 23, 12, 20, 9]]"
498,add,2,95,95,1,95,1,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0929718017578125}",1,Compute: 30 + 65
499,lcs,16,9,6,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08880782127380371}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacdbcdcaaacacdd""
T = ""cbaabaacbdcabdba"""
500,knap,16,429,143,0,1084,0,"{'ok': True, 'value': 429, 'stdout': '429\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09165143966674805}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 15, 11, 32, 22, 32, 26, 26, 4, 2, 22, 3, 10, 23, 31, 21]
V = [52, 6, 62, 45, 48, 14, 12, 54, 55, 44, 42, 12, 13, 18, 47, 37]
C = 143"
501,ilp_assign,16,58,10,0,110,0,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4148745536804199}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4, 44, 19, 20, 4, 28], [6, 12, 14, 35, 24, 2, 48], [39, 33, 9, 36, 10, 13, 38], [41, 11, 9, 7, 39, 45, 11], [46, 15, 38, 20, 36, 10, 22], [20, 12, 12, 24, 44, 24, 39], [1, 22, 23, 18, 48, 17, 15]]"
502,rod,4,40,12,0,14,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1597437858581543}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 8, 12, 2]"
503,mul,8,1775637156141471,17850746847000000,0,1733533855946571,0,"{'ok': True, 'value': 1775637156141471, 'stdout': '1775637156141471\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08822107315063477}",1,Compute: 19513123 * 90997077
504,mul,2,3315,3315,1,3315,1,"{'ok': True, 'value': 3315, 'stdout': '3315\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09276986122131348}",1,Compute: 85 * 39
505,ilp_assign,16,76,100,0,110,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4131166934967041}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[41, 4, 30, 40, 8, 14, 34], [35, 38, 5, 31, 31, 24, 28], [23, 33, 34, 8, 5, 41, 30], [42, 33, 18, 24, 37, 30, 48], [17, 16, 29, 23, 27, 16, 19], [7, 1, 39, 38, 40, 12, 9], [30, 42, 35, 17, 5, 12, 17]]"
506,add,8,65493382,65493382,1,65493382,1,"{'ok': True, 'value': 65493382, 'stdout': '65493382\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0875246524810791}",1,Compute: 29875583 + 35617799
507,knap,8,65,103,0,60,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08884835243225098}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 6, 1, 9, 16, 16, 6, 14]
V = [11, 6, 3, 14, 25, 29, 6, 22]
C = 39"
508,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10730504989624023}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""d"""
509,ilp_partition,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0910191535949707}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 3, 8]"
510,rod,4,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10509657859802246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 3, 3, 3]"
511,lcs,32,19,12,0,22,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09833168983459473}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabcdbaadadccbbbadacbdcaabadcdbb""
T = ""aacaacaacddcdddcaabbcaadadbddaac"""
512,ilp_assign,16,45,34,0,117,0,"{'ok': True, 'value': 45, 'stdout': '45\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39374709129333496}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 36, 14, 30, 4, 25, 39], [2, 2, 41, 46, 25, 8, 12], [28, 24, 25, 20, 13, 9, 32], [43, 15, 3, 31, 9, 16, 12], [14, 40, 31, 38, 32, 31, 9], [5, 6, 26, 17, 25, 15, 35], [1, 27, 40, 41, 14, 28, 29]]"
513,sub,16,7792945375864644,1343183392212491,0,7792945375864644,1,"{'ok': True, 'value': 7792945375864644, 'stdout': '7792945375864644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08889412879943848}",1,Compute: 9136128768077135 - 1343183392212491
514,ilp_prod,32,282,0,0,1065,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_qi8h1_3w/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_qi8h1_3w/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15943574905395508}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 17, 94, 81, 21, 35]
consumption (rows=resources) = [[18, 21, 19, 19, 9, 14], [31, 19, 25, 23, 25, 26], [30, 18, 21, 19, 31, 23], [11, 8, 10, 23, 21, 12]]
capacity = [71, 86, 124, 66]
upper_bounds = [3, 3, 3, 3, 3, 3]"
515,knap,8,92,105,0,113,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08791613578796387}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 15, 5, 16, 14, 3, 14, 6]
V = [19, 15, 7, 6, 16, 32, 18, 16]
C = 37"
516,ilp_prod,32,325,1065,0,1002,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_tpwk93ux/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_tpwk93ux/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15592670440673828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [69, 47, 45, 77, 31, 15]
consumption (rows=resources) = [[30, 4, 25, 14, 30, 9], [9, 12, 20, 30, 12, 21], [32, 18, 26, 4, 31, 18], [5, 16, 24, 14, 15, 9]]
capacity = [71, 114, 75, 77]
upper_bounds = [3, 4, 3, 3, 3, 4]"
517,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0883936882019043}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdad""
T = ""bcaad"""
518,add,16,10562806354908421,10562806354908421,1,10562806354908421,1,"{'ok': True, 'value': 10562806354908421, 'stdout': '10562806354908421\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08637428283691406}",1,Compute: 7738800393267750 + 2824005961640671
519,knap,2,10,13,0,21,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1043691635131836}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 2]
V = [3, 8, 10]
C = 4"
520,sub,8,12986111,12986111,1,12986111,1,"{'ok': True, 'value': 12986111, 'stdout': '12986111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09487462043762207}",1,Compute: 55109296 - 42123185
521,lcs,16,10,7,0,9,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09973573684692383}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caabbccbdaaadcbc""
T = ""cbcbcabcdbbcaaab"""
522,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09849882125854492}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adaddaadddadcdbc""
T = ""dbcacaabcbadaacb"""
523,add,32,98678226720459087182773313188344,35514390363102898822215960153548,0,98678226720459087182773313188344,1,"{'ok': True, 'value': 98678226720459087182773313188344, 'stdout': '98678226720459087182773313188344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0973670482635498}",1,Compute: 63163836357356188360557353034796 + 35514390363102898822215960153548
524,add,2,126,126,1,126,1,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0930178165435791}",1,Compute: 31 + 95
525,ilp_assign,4,18,44,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0398402214050293}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5, 6, 8], [12, 11, 5, 8], [12, 4, 6, 9], [1, 10, 1, 12]]"
526,rod,8,64,96,0,23,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09238409996032715}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 16, 19, 10, 13, 16, 23, 4]"
527,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09581732749938965}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 8, 28, 60, 6, 80, 74, 16, 12, 53, 32, 16, 24, 81, 76, 2, 13, 19, 87, 11, 64, 96, 56, 70]"
528,ilp_assign,8,39,11,0,36,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38990092277526855}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 8, 19, 16, 21, 11, 20], [2, 18, 22, 17, 7, 4, 2], [2, 16, 7, 4, 11, 21, 12], [6, 14, 10, 8, 2, 7, 15], [1, 19, 21, 15, 2, 15, 23], [23, 21, 18, 14, 12, 15, 9], [23, 3, 19, 10, 3, 7, 12]]"
529,knap,32,1445,1005,0,1039,0,"{'ok': True, 'value': 1445, 'stdout': '1445\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11933040618896484}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [62, 10, 26, 52, 40, 22, 2, 26, 18, 10, 24, 12, 45, 11, 64, 49, 26, 18, 31, 48, 46, 26, 6, 23, 38, 10, 7, 14, 32, 59, 34, 63]
V = [88, 16, 28, 11, 54, 11, 117, 82, 10, 84, 119, 105, 44, 13, 54, 42, 104, 45, 19, 73, 81, 14, 110, 42, 11, 56, 60, 1, 29, 121, 64, 94]
C = 477"
530,ilp_partition,4,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09980916976928711}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 2, 1, 9]"
531,sub,2,8,8,1,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08786535263061523}",1,Compute: 69 - 61
532,add,8,100621287,100621287,1,100621287,1,"{'ok': True, 'value': 100621287, 'stdout': '100621287\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09043073654174805}",1,Compute: 43454127 + 57167160
533,ilp_prod,2,15,19,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_lojy5qqw/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16176104545593262}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[2, 1], [2, 2]]
capacity = [8, 7]
upper_bounds = [3, 3]"
534,ilp_assign,8,40,28,0,49,0,"{'ok': True, 'value': -67, 'stdout': '-67\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2112720012664795}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 5, 4, 11, 14, 15, 21], [2, 8, 10, 10, 18, 2, 17], [20, 12, 19, 4, 7, 2, 17], [21, 14, 12, 20, 18, 7, 15], [2, 9, 20, 1, 15, 8, 18], [15, 7, 16, 7, 6, 12, 8], [23, 15, 17, 19, 20, 6, 12]]"
535,ilp_assign,32,103,114,0,240,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21067070960998535}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 86, 64, 94, 59, 78, 11], [90, 10, 38, 93, 38, 31, 14], [67, 65, 59, 13, 20, 26, 54], [83, 17, 34, 37, 87, 57, 77], [66, 41, 74, 72, 7, 52, 35], [82, 94, 9, 55, 64, 57, 65], [75, 69, 59, 19, 24, 62, 28]]"
536,add,8,174167546,174167546,1,174167546,1,"{'ok': True, 'value': 174167546, 'stdout': '174167546\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09758925437927246}",1,Compute: 81105664 + 93061882
537,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09858870506286621}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadd""
T = ""bcac"""
538,add,4,8662,8662,1,8662,1,"{'ok': True, 'value': 8662, 'stdout': '8662\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10644149780273438}",1,Compute: 4478 + 4184
539,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09937238693237305}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [40, 39, 96, 44, 14, 81, 38, 37, 43, 81, 91, 95, 45, 96, 9, 39, 90, 19, 89, 49, 9, 14, 7, 89]"
540,rod,4,36,18,0,30,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08612823486328125}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 9, 8, 9]"
541,ilp_prod,16,402,141,0,156,0,"{'ok': True, 'value': 405, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cf4b488566dd4d0599cafc90ba917fee-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cf4b488566dd4d0599cafc90ba917fee-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 716.50192 (6)\n7  Obj 405.2\nOptimal - objective value 405.2\nOptimal objective 405.2 - 7 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n405.199999913\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1789379119873047}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 44, 25, 6, 47, 6]
consumption (rows=resources) = [[10, 2, 2, 16, 14, 6], [4, 2, 16, 10, 2, 12], [1, 6, 5, 1, 15, 10], [12, 6, 3, 1, 2, 8]]
capacity = [38, 54, 56, 55]
upper_bounds = [3, 9, 3, 3, 3, 4]"
542,ilp_partition,16,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12425661087036133}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 12, 16, 2, 12, 29, 20, 46, 26, 32, 22, 13, 27, 5, 46, 20]"
543,mul,2,6156,6116,0,6166,0,"{'ok': True, 'value': 6156, 'stdout': '6156\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08958554267883301}",1,Compute: 81 * 76
544,ilp_prod,4,51,55,0,93,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_z73yvudk/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15805649757385254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 10, 11]
consumption (rows=resources) = [[4, 4, 1], [1, 3, 4], [2, 4, 1]]
capacity = [15, 15, 16]
upper_bounds = [3, 3, 3]"
545,ilp_partition,32,1,10,0,67,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11307740211486816}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 13, 16, 67, 19, 68, 14, 24, 37, 60, 77, 10, 21, 76, 35, 84, 71, 46, 39, 41, 19, 11, 1, 1]"
546,ilp_partition,4,3,0,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08968591690063477}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 12, 7, 5]"
547,lcs,16,9,7,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12769198417663574}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccabccaaaacadca""
T = ""abbadacbadbcddabd"""
548,lcs,4,1,3,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09778833389282227}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadd""
T = ""bdaac"""
549,mul,8,663558831829996,6523576536,0,65616935543684,0,"{'ok': True, 'value': 663558831829996, 'stdout': '663558831829996\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09593081474304199}",1,Compute: 51150604 * 12972649
550,sub,16,2117782852676956,2117782852676956,1,2117782852676956,1,"{'ok': True, 'value': 2117782852676956, 'stdout': '2117782852676956\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08944082260131836}",1,Compute: 5857899053571028 - 3740116200894072
551,ilp_assign,4,15,-11,0,40,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_75tj_6qj/main.py"", line 30, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_75tj_6qj/main.py"", line 23, in assignment_problem\n    C += np.inf\nnumpy.core._exceptions.UFuncTypeError: Cannot cast ufunc \'add\' output from dtype(\'float64\') to dtype(\'int64\') with casting rule \'same_kind\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22354912757873535}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 7, 10, 3], [12, 1, 10, 11], [7, 2, 6, 3], [9, 9, 4, 2]]"
552,ilp_partition,32,0,22,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0927424430847168}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 80, 28, 39, 8, 42, 67, 57, 36, 25, 51, 58, 27, 2, 37, 10, 83, 59, 15, 51, 81, 83, 19, 92]"
553,mul{'ok': True, 'value': 65712973711834969224024719567124, 'stdout': '65712973711834969224024719567124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08964657783508301}",1,Compute: 7509365753771706 * 8750802113857554
554,knap,16,399,148,0,1064,0,"{'ok': True, 'value': 399, 'stdout': '399\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10075759887695312}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 8, 24, 19, 14, 29, 15, 15, 16, 31, 23, 32, 32, 3, 13, 7]
V = [50, 26, 31, 63, 10, 21, 1, 20, 60, 21, 20, 3, 24, 27, 40, 62]
C = 148"
555,add,32,188468873067001647129008399407739,71,0,188468873066991647129008400007739,0,"{'ok': True, 'value': 188468873067001647129008399407739, 'stdout': '188468873067001647129008399407739\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0977487564086914}",1,Compute: 98823013639518812843148281489574 + 89645859427482834285860117918165
556,knap,4,21,16,0,16,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1037282943725586}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 2, 2, 8]
V = [6, 5, 15, 3]
C = 9"
557,rod,2,8,5,0,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_yad5e1q_/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_yad5e1q_/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0893716812133789}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
558,ilp_assign,8,41,,0,110,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20427346229553223}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 16, 21, 9, 10, 9, 9], [24, 21, 19, 14, 13, 20, 15], [24, 20, 7, 20, 12, 22, 2], [5, 2, 16, 14, 19, 5, 9], [17, 6, 8, 13, 24, 11, 5], [3, 23, 20, 4, 8, 16, 6], [20, 11, 8, 24, 18, 4, 23]]"
559,knap,32,2005,2508,0,1043,0,"{'ok': True, 'value': 2005, 'stdout': '2005\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1032872200012207}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [49, 26, 18, 38, 23, 56, 35, 8, 21, 16, 62, 63, 13, 62, 25, 45, 61, 32, 42, 62, 64, 34, 43, 15, 10, 21, 28, 27, 60, 35, 27, 62]
V = [51, 128, 53, 111, 37, 13, 121, 118, 123, 87, 68, 45, 128, 9, 82, 22, 127, 20, 123, 111, 126, 97, 33, 89, 102, 91, 19, 74, 52, 72, 70, 118]
C = 591"
560,mul,2,391,391,1,391,1,"{'ok': True, 'value': 391, 'stdout': '391\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08765149116516113}",1,Compute: 23 * 17
561,ilp_prod,8,91,105,0,105,0,"{'ok': True, 'value': 91, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d486be28b169476a910befbe52f5ea1f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d486be28b169476a910befbe52f5ea1f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 96.4286 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -69 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -91 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3\nCbc0013I At root node, 2 cuts changed objective from -96.428571 to -91 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -91, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -96.4286 to -91\nProbing was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                91.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n91.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17587804794311523}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 5, 17, 15]
consumption (rows=resources) = [[4, 8, 6, 1], [7, 4, 2, 2], [8, 6, 1, 2], [4, 2, 1, 8]]
capacity = [16, 31, 21, 29]
upper_bounds = [3, 3, 3, 3]"
562,knap,32,1461,1006,0,1003,0,"{'ok': True, 'value': 1461, 'stdout': '1461\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10632753372192383}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 46, 35, 38, 34, 5, 51, 28, 56, 31, 48, 64, 21, 48, 7, 51, 22, 51, 32, 42, 36, 16, 57, 12, 45, 22, 29, 56, 3, 36, 54, 33]
V = [121, 11, 45, 75, 12, 8, 119, 35, 86, 78, 69, 7, 38, 15, 21, 71, 54, 99, 110, 24, 17, 11, 29, 96, 113, 38, 119, 67, 119, 26, 66, 53]
C = 566"
563,rod,4,28,10,0,17,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09124493598937988}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 5, 7, 3]"
564,ilp_prod,8,68,108,0,108,0,"{'ok': True, 'value': 68, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/958793d771f14d1ab2bd9440720394b7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/958793d771f14d1ab2bd9440720394b7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 75.6957 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -53 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -68 found by DiveCoefficient after 3 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 2.5\nCbc0013I At root node, 2 cuts changed objective from -75.695652 to -68 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 2.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -68, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -75.6957 to -68\nProbing was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                68.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n68.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1701347827911377}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 19, 4, 15]
consumption (rows=resources) = [[8, 5, 6, 4], [5, 7, 1, 1], [7, 2, 1, 2], [1, 3, 6, 7]]
capacity = [20, 21, 22, 21]
upper_bounds = [3, 3, 3, 3]"
565,ilp_assign,16,80,26,0,117,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21960711479187012}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[41, 30, 12, 19, 42, 38, 42], [2, 44, 16, 48, 24, 25, 23], [18, 19, 22, 5, 27, 43, 29], [47, 28, 31, 7, 18, 22, 7], [30, 22, 28, 5, 12, 24, 14], [10, 26, 39, 36, 26, 31, 6], [16, 21, 6, 35, 35, 44, 1]]"
566,sub,32,20384036728477012086049776150414,20384603895617012086049076150414,0,20383970728476012086049276150414,0,"{'ok': True, 'value': 20384036728477012086049776150414, 'stdout': '20384036728477012086049776150414\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10910487174987793}",1,Compute: 40913666914195462548535899633221 - 20529630185718450462486123482807
567,ilp_partition,4,1,11,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08552289009094238}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 8, 3, 5]"
568,rod,8,168,22,0,30,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09069585800170898}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 9, 7, 5, 16, 14, 2, 22]"
569,lcs,32,15,10,0,18,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10278630256652832}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacbddacabcaacccaaaccbddcdcaadad""
T = ""cdbdddddbdbbcddaaddbbcbdbdadcca"""
570,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08795595169067383}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""aad"""
571,ilp_assign,32,195,42,0,185,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20523500442504883}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[56, 53, 79, 75, 23, 11, 51], [37, 55, 60, 23, 88, 94, 88], [92, 37, 49, 84, 95, 48, 73], [68, 8, 43, 91, 69, 45, 44], [68, 12, 85, 61, 86, 53, 95], [39, 22, 84, 81, 63, 76, 53], [5, 50, 6, 74, 57, 86, 44]]"
572,ilp_prod,16,105,128,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_j_wqgmge/main.py"", line 10, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_j_wqgmge/main.py"", line 10, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18516302108764648}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [41, 21, 5, 7, 19, 21]
consumption (rows=resources) = [[13, 13, 4, 4, 15, 6], [1, 2, 5, 11, 8, 2], [16, 3, 3, 3, 16, 13], [7, 1, 11, 11, 13, 8]]
capacity = [53, 46, 35, 36]
upper_bounds = [3, 4, 3, 3, 3, 3]"
573,ilp_prod,4,30,34,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_n7n5d41e/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19973444938659668}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 9, 5]
consumption (rows=resources) = [[2, 4, 2], [1, 3, 4], [2, 1, 3]]
capacity = [10, 11, 16]
upper_bounds = [5, 3, 3]"
574,add,2,101,101,1,101,1,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09264850616455078}",1,Compute: 87 + 14
575,ilp_prod,8,72,105,0,105,0,"{'ok': True, 'value': 72, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/dde040151cbf451cbe82a68c5b9148a7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/dde040151cbf451cbe82a68c5b9148a7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 72 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -54 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 2 columns\nCbc0012I Integer solution of -72 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -72 to -72 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -72, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -72 to -72\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                72.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n72.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1746382713317871}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 7, 11, 6]
consumption (rows=resources) = [[6, 7, 8, 8], [5, 2, 6, 6], [2, 8, 2, 6], [8, 7, 7, 2]]
capacity = [28, 22, 18, 24]
upper_bounds = [3, 3, 3, 3]"
576,mul,4,10641976,10684756,0,10605956,0,"{'ok': True, 'value': 10641976, 'stdout': '10641976\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09422802925109863}",1,Compute: 2014 * 5284
577,sub,2,39,3,0,39,1,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09246468544006348}",1,Compute: 94 - 55
578,ilp_partition,4,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09856700897216797}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 10, 6, 1]"
579,rod,16,624,368,0,65,0,"{'ok': True, 'value': 624, 'stdout': '624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09697365760803223}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [39, 30, 2, 24, 26, 3, 10, 9, 36, 8, 9, 8, 33, 5, 4, 40]"
580,ilp_prod,8,85,100,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ghnd0lie/main.py"", line 11, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(4), range(4)), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 466, in dicts\n    d[i] = LpVariable.dicts(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16924142837524414}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 9, 18, 19]
consumption (rows=resources) = [[4, 3, 6, 6], [6, 1, 6, 3], [3, 2, 6, 4], [1, 7, 2, 5]]
capacity = [29, 29, 25, 27]
upper_bounds = [4, 3, 4, 4]"
581,add,32,164207876840876886295788068015212,657432010100957320000000000000000,0,164207876840876886305788068015212,0,"{'ok': True, 'value': 164207876840876886295788068015212, 'stdout': '164207876840876886295788068015212\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09069609642028809}",1,Compute: 86942855835657953956464079496675 + 77265021005218932339323988518537
582,ilp_partition,2,0,1,0,8,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09113001823425293}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 5, 6]"
583,ilp_prod,16,136,120,0,1050,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ing4w_10/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_ing4w_10/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17332768440246582}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 30, 20, 25, 34, 28]
consumption (rows=resources) = [[7, 13, 13, 10, 1, 12], [5, 8, 14, 5, 6, 5], [16, 10, 1, 12, 7, 16], [2, 13, 15, 5, 10, 8]]
capacity = [51, 51, 34, 44]
upper_bounds = [3, 3, 3, 3, 4, 3]"
584,ilp_prod,8,23,110,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0pqt9x4d/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, lowBound=0, upBound=upper_bounds[j], cat=\'Integer\') for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.166792631149292}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 10, 5, 6]
consumption (rows=resources) = [[5, 8, 5, 7], [8, 8, 4, 2], [2, 3, 7, 6], [1, 4, 7, 8]]
capacity = [31, 16, 22, 18]
upper_bounds = [3, 3, 3, 3]"
585,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11227679252624512}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcc""
T = ""cadab"""
586,mul,4,12006711,203,0,11935381,0,"{'ok': True, 'value': 12006711, 'stdout': '12006711\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09647226333618164}",1,Compute: 6129 * 1959
587,add,8,112704945,112704945,1,112704945,1,"{'ok': True, 'value': 112704945, 'stdout': '112704945\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11199641227722168}",1,Compute: 52070721 + 60634224
588,add,32,132040627059701377202170619007087,131740627060201377702164124207087,0,132040627059701377202170649007087,0,"{'ok': True, 'value': 132040627059701377202170619007087, 'stdout': '132040627059701377202170619007087\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09688162803649902}",1,Compute: 57421551830160934795577093105202 + 74619075229540442406593525901885
589,sub,2,28,28,1,28,1,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10515332221984863}",1,Compute: 73 - 45
590,add,8,156183032,156183032,1,156182732,0,"{'ok': True, 'value': 156183032, 'stdout': '156183032\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10846900939941406}",1,Compute: 65423322 + 90759710
591,mul,16,39961573206456412854109618865024,371134546,0,398209545331591845584865448888128,0,"{'ok': True, 'value': -1320582668026084480, 'stdout': '-1320582668026084480\n', 'stderr': '/tmp/cot_exec_lr6ceq4p/main.py:4: RuntimeWarning: overflow encountered in scalar multiply\n  return np.int64(a) * np.int64(b)\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20935893058776855}",0,Compute: 9261328364285168 * 4314885687517768
592,mul,2,1804,336,0,1784,0,"{'ok': True, 'value': 1804, 'stdout': '1804\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1010446548461914}",1,Compute: 44 * 41
593,ilp_assign,8,43,20,0,18,0,"{'ok': True, 'value': -17, 'stdout': '-17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.378920316696167}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 15, 19, 4, 3, 23, 22], [2, 10, 23, 6, 23, 15, 2], [13, 23, 16, 4, 12, 11, 1], [14, 15, 24, 14, 7, 13, 3], [13, 5, 11, 8, 20, 14, 22], [6, 24, 19, 16, 5, 16, 19], [14, 16, 13, 15, 15, 24, 21]]"
594,add,4,11625,1783,0,11625,1,"{'ok': True, 'value': 11625, 'stdout': '11625\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08850526809692383}",1,Compute: 9842 + 1783
595,sub,2,22,22,1,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09594488143920898}",1,Compute: 71 - 49
596,ilp_prod,4,24,33,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_oet_izke/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18966245651245117}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3, 7]
consumption (rows=resources) = [[2, 4, 4], [1, 2, 1], [1, 2, 1]]
capacity = [12, 16, 10]
upper_bounds = [6, 3, 3]"
597,knap,4,15,26,0,15,1,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10536575317382812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 8, 3]
V = [2, 1, 11, 13]
C = 8"
598,sub,2,68,68,1,68,1,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.099578857421875}",1,Compute: 99 - 31
599,ilp_assign,32,190,240,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xl7528ax/main.py"", line 29, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_xl7528ax/main.py"", line 18, in hungarian_algorithm\n    cost_matrix[i] = [float(\'inf\')] * n\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22766542434692383}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[96, 40, 82, 16, 66, 60, 66], [17, 3, 91, 48, 13, 92, 68], [68, 79, 68, 10, 71, 45, 89], [45, 94, 54, 19, 70, 9, 96], [18, 54, 88, 2, 28, 33, 56], [23, 54, 74, 65, 39, 89, 81], [15, 23, 67, 71, 45, 7, 43]]"
600,sub,32,21431353700466435956206817086149,21431353699946136006206817086150,0,21431353700466436056206817086149,0,"{'ok': True, 'value': 21431353700466435956206817086149, 'stdout': '21431353700466435956206817086149\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0982053279876709}",1,Compute: 36740064773358034421054562742541 - 15308711072891598464847745656392
601,add,2,145,145,1,145,1,"{'ok': True, 'value': 145, 'stdout': '145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10152363777160645}",1,Compute: 79 + 66
602,add,2,150,150,1,150,1,"{'ok': True, 'value': 150, 'stdout': '150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08753824234008789}",1,Compute: 75 + 75
603,knap,16,396,138,0,1055,0,"{'ok': True, 'value': 396, 'stdout': '396\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10018634796142578}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [20, 16, 31, 6, 19, 29, 1, 12, 1, 24, 18, 27, 25, 20, 2, 26]
V = [34, 60, 50, 10, 24, 37, 4, 21, 47, 54, 62, 1, 8, 40, 39, 7]
C = 138"
604,rod,32,2624,1055,0,1000,0,"{'ok': True, 'value': 2624, 'stdout': '2624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08546066284179688}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [82, 5, 30, 80, 21, 4, 34, 77, 34, 86, 48, 2, 46, 87, 48, 83, 77, 38, 17, 53, 59, 93, 9, 86, 82, 78, 37, 64, 81, 52, 66, 60]"
605,ilp_assign,4,14,3,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_fspbxso_/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_fspbxso_/main.py"", line 21, in assignment_problem\n    C[row_covered == False, :][:, col_covered == False] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20052886009216309}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 7, 9, 5], [10, 7, 7, 5], [1, 5, 3, 5], [1, 4, 1, 4]]"
606,add,16,17497501415891529,17497501415891539,0,17497501415891539,0,"{'ok': True, 'value': 17497501415891529, 'stdout': '17497501415891529\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09624958038330078}",1,Compute: 8124109448971170 + 9373391966920359
607,mul,16,42431686718355015767512155058788,4254340338021306543936594,0,431484899360485794568444534468,0,"{'ok': True, 'value': 42431686718355015767512155058788, 'stdout': '42431686718355015767512155058788\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10021090507507324}",1,Compute: 5218042746513468 * 8131724629259991
608,mul,16,11633446243391226730430551037337,114650585044956958361,0,11534833588437039526648466455466663,0,"{'ok': True, 'value': 11633446243391226730430551037337, 'stdout': '11633446243391226730430551037337\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09707832336425781}",1,Compute: 3697107637051959 * 3146634446560943
609,knap,32,1855,1023,0,1048,0,"{'ok': True, 'value': 1855, 'stdout': '1855\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11338996887207031}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 27, 24, 1, 57, 43, 21, 34, 34, 22, 37, 63, 50, 3, 26, 12, 2, 20, 19, 63, 20, 60, 1, 5, 40, 49, 43, 28, 22, 26, 24, 52]
V = [120, 93, 4, 89, 45, 111, 3, 51, 55, 108, 76, 7, 113, 109, 20, 121, 68, 65, 68, 112, 32, 7, 52, 32, 62, 108, 104, 117, 116, 83, 98, 52]
C = 479"
610,mul,8,5092376411582015,5084753052992215,0,5091859378726225,0,"{'ok': True, 'value': 5092376411582015, 'stdout': '5092376411582015\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0966956615447998}",1,Compute: 68723495 * 74099497
611,ilp_assign,8,41,36,0,35,0,"{'ok': True, 'value': -68, 'stdout': '-68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21289825439453125}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 15, 17, 22, 18, 18, 19], [1, 5, 3, 11, 3, 16, 12], [3, 5, 12, 5, 21, 7, 22], [16, 24, 18, 7, 15, 23, 20], [14, 21, 10, 18, 11, 5, 14], [2, 8, 21, 3, 2, 9, 20], [24, 10, 2, 22, 10, 2, 16]]"
612,ilp_prod,4,51,45,0,45,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_h6bz2iqy/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19948148727416992}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 3, 12]
consumption (rows=resources) = [[3, 1, 2], [2, 1, 2], [2, 2, 1]]
capacity = [10, 9, 11]
upper_bounds = [3, 5, 4]"
613,knap,4,20,,0,18,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09853219985961914}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 3, 6]
V = [5, 10, 5, 3]
C = 6"
614,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09777975082397461}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 16, 5, 18, 21, 7, 8, 11]"
615,ilp_assign,2,6,7,0,13,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21520638465881348}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [3, 2]]"
616,sub,32,21336548385987204256244262408818,21336548386187204256244262408818,0,21336548386397204256244262408818,0,"{'ok': True, 'value': 21336548385987204256244262408818, 'stdout': '21336548385987204256244262408818\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08540010452270508}",1,Compute: 79325579149782754151844189987836 - 57989030763795549895599927579018
617,knap,2,10,7,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08869147300720215}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 1]
V = [10, 6, 7]
C = 1"
618,lcs,2,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08683586120605469}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cc""
T = ""da"""
619,ilp_partition,16,1,1,1,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09739017486572266}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [34, 22, 18, 31, 17, 30, 34, 33, 28, 6, 2, 14, 18, 39, 21, 32]"
620,ilp_prod,32,276,149,0,1053,0,"{'ok': True, 'value': 276, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e5499460c8cc4b50aa2c01c8be66bd9c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e5499460c8cc4b50aa2c01c8be66bd9c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 278.08 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -276 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -276, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -276 to -276\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                276.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n276.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16858172416687012}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [53, 6, 85, 33, 32, 39]
consumption (rows=resources) = [[13, 13, 20, 10, 16, 15], [5, 21, 26, 20, 26, 3], [25, 32, 5, 29, 16, 23], [27, 30, 7, 1, 2, 4]]
capacity = [66, 73, 99, 75]
upper_bounds = [3, 3, 3, 3, 3, 4]"
621,lcs,32,18,18,1,20,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09745240211486816}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddccbadaddadabaacbcabdaccaabdba""
T = ""cbccbcbdacdabcbdccddbdddcabacdbd"""
622,sub,2,13,13,1,13,1,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09617877006530762}",1,Compute: 51 - 38
623,knap,2,5,7,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08565735816955566}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 4]
V = [2, 2, 5]
C = 4"
624,ilp_prod,4,24,30,0,30,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_818ldmd_/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16631603240966797}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 4, 6]
consumption (rows=resources) = [[3, 3, 3], [3, 1, 3], [1, 4, 2]]
capacity = [13, 12, 14]
upper_bounds = [4, 3, 4]"
625,ilp_prod,2,14,20,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_1o37qp15/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1659836769104004}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[3, 2], [2, 3]]
capacity = [7, 9]
upper_bounds = [3, 3]"
626,add,2,108,108,1,108,1,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09683108329772949}",1,Compute: 50 + 58
627,rod,8,72,22,0,45,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10686874389648438}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 18, 9, 24, 20, 18, 19, 1]"
628,rod,2,12,12,1,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_noobekt6/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_noobekt6/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09799981117248535}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
629,mul,16,49692895689126805676925126442760,248300000000000000,0,49726716631807415764138464380174580,0,"{'ok': True, 'value': 6309426653675912968, 'stdout': '6309426653675912968\n', 'stderr': '/tmp/cot_exec_truxizcn/main.py:4: RuntimeWarning: overflow encountered in scalar multiply\n  return np.int64(a) * np.int64(b)\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21533703804016113}",0,Compute: 8006336439009290 * 6206695917374644
630,ilp_prod,2,15,19,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_mmgjqcqr/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16790771484375}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[2, 2], [2, 1]]
capacity = [7, 8]
upper_bounds = [3, 3]"
631,sub,32,13043007823592436831541126444801,130430078234924368831541126444801,0,130431078234584368831541269445801,0,"{'ok': True, 'value': 13043007823592436831541126444801, 'stdout': '13043007823592436831541126444801\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09183621406555176}",1,Compute: 99618684252843532679210409460221 - 86575676429251095847669283015420
632,mul,4,12678628,19026,0,12649628,0,"{'ok': True, 'value': 12678628, 'stdout': '12678628\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09478354454040527}",1,Compute: 3466 * 3658
633,knap,8,118,54,0,60,0,"{'ok': True, 'value': 118, 'stdout': '118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08832335472106934}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 16, 10, 7, 2, 1, 10]
V = [11, 22, 9, 31, 23, 14, 17, 1]
C = 25"
634,sub,2,34,34,1,34,1,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10443711280822754}",1,Compute: 67 - 33
635,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10648989677429199}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caad""
T = ""dbbb"""
636,sub,8,5145458,5145458,1,514548,0,"{'ok': True, 'value': 5145458, 'stdout': '5145458\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09098172187805176}",1,Compute: 28939222 - 23793764
637,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08795642852783203}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 20, 9, 5, 15, 2, 12, 17]"
638,ilp_prod,2,18,12,0,36,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ejundagy/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15419888496398926}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[2, 3], [2, 1]]
capacity = [6, 8]
upper_bounds = [3, 3]"
639,sub,8,335418,335428,0,335418,1,"{'ok': True, 'value': 335418, 'stdout': '335418\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08772802352905273}",1,Compute: 42217637 - 41882219
640,ilp_prod,8,60,100,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__rx885r9/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec__rx885r9/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1754765510559082}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 21, 10, 10]
consumption (rows=resources) = [[5, 1, 2, 7], [3, 3, 2, 5], [5, 1, 4, 8], [1, 8, 8, 3]]
capacity = [20, 16, 28, 21]
upper_bounds = [4, 3, 3, 3]"
641,rod,2,12,6,0,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_4z_lp_ur/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_4z_lp_ur/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09715723991394043}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
642,rod,4,16,6,0,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_4m92sode/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_4m92sode/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0995645523071289}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 7, 1, 4]"
643,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09813952445983887}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 40, 12, 41, 44, 37, 23, 44, 31, 27, 48, 12, 48, 12, 44, 35]"
644,rod,8,128,33,0,48,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09767866134643555}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 21, 16, 4, 12, 12, 19, 23]"
645,lcs,16,8,8,1,5,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09680795669555664}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdadabdddcbdabb""
T = ""ccadccabbbdaaacd"""
646,mul{'ok': True, 'value': -7089397949426709022, 'stdout': '-7089397949426709022\n', 'stderr': '/tmp/cot_exec_8zg0fhho/main.py:4: RuntimeWarning: overflow encountered in scalar multiply\n  return np.int64(a) * np.int64(b)\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21717405319213867}",0,Compute: 3826148953498566 * 9934771534081051
647,ilp_assign,32,130,105,0,205,0,"{'ok': True, 'value': 130, 'stdout': '130\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6605589389801025}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[50, 12, 66, 70, 20, 71, 15], [56, 6, 18, 63, 22, 5, 15], [79, 47, 48, 4, 50, 91, 22], [86, 76, 66, 33, 68, 28, 42], [8, 25, 40, 65, 41, 19, 26], [45, 60, 74, 50, 71, 7, 93], [64, 94, 90, 9, 39, 40, 83]]"
648,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08823037147521973}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [82, 1, 55, 6, 28, 43, 3, 26, 25, 14, 9, 84, 70, 39, 31, 29, 94, 39, 39, 20, 41, 61, 4, 90]"
649,rod,8,49,22,0,22,0,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10426640510559082}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [1, 9, 20, 3, 17, 8, 21, 13]"
650,mul,4,46414698,40438,0,46249938,0,"{'ok': True, 'value': 46414698, 'stdout': '46414698\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09146261215209961}",1,Compute: 8327 * 5574
651,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09165740013122559}",1,Compute: 69 - 68
652,ilp_prod,8,44,100,0,105,0,"{'ok': True, 'value': 45, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5331792ade45482981f7f48d3c52e49f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5331792ade45482981f7f48d3c52e49f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 30 RHS\nAt line 35 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 4 (0) columns and 16 (0) elements\n0  Obj -0 Dual inf 17.009099 (4)\n2  Obj 45.125\nOptimal - objective value 45.125\nOptimal objective 45.125 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n45.125\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16829228401184082}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 5, 9, 6]
consumption (rows=resources) = [[3, 3, 4, 4], [5, 1, 7, 6], [3, 5, 5, 8], [7, 7, 8, 7]]
capacity = [19, 30, 27, 29]
upper_bounds = [4, 4, 3, 3]"
653,sub,16,3991823228372591,4091823228372591,0,4001823228372591,0,"{'ok': True, 'value': 3991823228372591, 'stdout': '3991823228372591\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08987140655517578}",1,Compute: 5257134089622439 - 1265310861249848
654,knap,16,303,113,0,564,0,"{'ok': True, 'value': 303, 'stdout': '303\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09158802032470703}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 2, 6, 22, 29, 32, 23, 1, 28, 9, 4, 10, 19, 2, 1, 9]
V = [9, 23, 30, 10, 59, 7, 39, 39, 38, 7, 16, 12, 22, 10, 1, 42]
C = 113"
655,lcs,32,17,10,0,15,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09788084030151367}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daccbdcbbaadaacdaadcaaacbdaccccc""
T = ""cbcdddbcccaadbdadaccbdacbcbbdbb"""
656,rod,4,40,11,0,17,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lso8vvak/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_lso8vvak/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09479475021362305}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 1, 5, 7]"
657,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09827709197998047}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""d"""
658,sub,16,7889070329779770,7889063330667770,0,7889062330000000,0,"{'ok': True, 'value': 7889070329779770, 'stdout': '7889070329779770\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12946510314941406}",1,Compute: 9128062328543775 - 1238991998764005
659,mul,8,3080324083429102,305264,0,30584336504949922,0,"{'ok': True, 'value': 3080324083429102, 'stdout': '3080324083429102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09663200378417969}",1,Compute: 42648343 * 72226114
660,lcs,4,2,2,1,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11348772048950195}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcd""
T = ""aaac"""
661,mul{'ok': True, 'value': 619920540333445040949749056148343183575929745090480999339889475, 'stdout': '619920540333445040949749056148343183575929745090480999339889475\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10119247436523438}",1,Compute: 20673661480215526500937838810113 * 29986006152161405226157026187075
662,sub,32,49532462491853971142514920921560,49532462491853971142514920921560,1,49532462491853971142514920921560,1,"{'ok': True, 'value': 49532462491853971142514920921560, 'stdout': '49532462491853971142514920921560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09555411338806152}",1,Compute: 91546544246379814306070485706438 - 42014081754525843163555564784878
663,add,16,15401280941465610,15391280942065610,0,15397280941465610,0,"{'ok': True, 'value': 15401280941465610, 'stdout': '15401280941465610\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09861445426940918}",1,Compute: 8657393079182248 + 6743887862283362
664,ilp_assign,8,36,11,0,35,0,"{'ok': True, 'value': -43, 'stdout': '-43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2354872226715088}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 16, 1, 10, 21, 5, 5], [6, 5, 21, 11, 10, 16, 8], [1, 4, 10, 9, 16, 1, 13], [23, 2, 10, 20, 23, 13, 22], [22, 18, 8, 9, 17, 20, 5], [13, 10, 20, 14, 4, 24, 22], [18, 24, 24, 17, 13, 23, 19]]"
665,knap,32,1556,1013,0,124,0,"{'ok': True, 'value': 1556, 'stdout': '1556\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09180378913879395}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 45, 4, 41, 37, 6, 11, 15, 2, 6, 64, 11, 9, 50, 12, 40, 32, 22, 54, 57, 28, 38, 30, 32, 35, 14, 29, 28, 7, 19, 16, 43]
V = [6, 14, 34, 116, 62, 4, 71, 67, 71, 105, 88, 113, 72, 11, 72, 45, 24, 41, 21, 36, 89, 14, 97, 12, 124, 124, 49, 78, 58, 5, 25, 5]
C = 424"
666,lcs,32,20,12,0,14,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09813642501831055}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacdcdbcadaddcdccbcaddadaddaddba""
T = ""accccbaadccaddbdabbccdabbdadbabd"""
667,mul,32,445191726692540482056349768854087598667380131486016931198638644,1000000007,0,1567528764517600,0,"{'ok': True, 'value': 970598090437724394, 'stdout': '970598090437724394\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10272717475891113}",0,Compute: 10931574875743502162711459325444 * 40725305525775043398845226220301
668,lcs,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10613274574279785}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""acd"""
669,lcs,16,10,6,0,8,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09774065017700195}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcccadabbdcacdb""
T = ""cccbcbdabcdbcba"""
670,ilp_assign,2,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2223188877105713}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 2], [2, 1]]"
671,ilp_assign,4,16,12,0,26,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_mjl93obw/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_mjl93obw/main.py"", line 21, in assignment_problem\n    C[row_covered == False, :][:, col_covered == False] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.25766730308532715}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 2, 1, 11], [9, 12, 12, 8], [1, 9, 4, 1], [2, 9, 11, 6]]"
672,mul,32,4709499204891780127815482375262432979061386251976882457053036625,1000000007,0,480369989454958868413248761991446496366454496895466645625,0,"{'ok': True, 'value': 4709499204891780127815482375262432979061386251976882457053036625, 'stdout': '4709499204891780127815482375262432979061386251976882457053036625\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10624241828918457}",1,Compute: 66379454968554088442505792629525 * 70948145131996175997595902418765
673,knap,2,7,9,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09279012680053711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 3]
V = [7, 2, 5]
C = 4"
674,mul,4,55427349,79464499,0,55589329,0,"{'ok': True, 'value': 55427349, 'stdout': '55427349\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10488510131835938}",1,Compute: 7419 * 7471
675,ilp_assign,2,8,8,1,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_t8ufgts1/main.py"", line 27, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_t8ufgts1/main.py"", line 3, in assignment_problem\n    C = np.array(C)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09634900093078613}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3], [6, 5]]"
676,knap,16,373,108,0,1064,0,"{'ok': True, 'value': 373, 'stdout': '373\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09933233261108398}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 2, 27, 6, 5, 19, 28, 11, 17, 4, 21, 13, 32, 17, 19, 6]
V = [2, 24, 29, 18, 30, 33, 13, 48, 30, 15, 38, 2, 38, 63, 64, 10]
C = 127"
677,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11679530143737793}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcba""
T = ""cda"""
678,rod,32,672,1053,0,206,0,"{'ok': True, 'value': 672, 'stdout': '672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08954405784606934}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [21, 20, 58, 30, 78, 64, 80, 34, 83, 67, 83, 53, 60, 21, 39, 15, 81, 76, 14, 16, 2, 30, 92, 33, 53, 87, 58, 4, 3, 62, 15, 26]"
679,ilp_prod,32,551,0,0,1000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_je4derxu/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_je4derxu/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18213915824890137}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 17, 73, 77, 88, 81]
consumption (rows=resources) = [[10, 7, 6, 12, 22, 8], [28, 16, 4, 28, 25, 19], [3, 24, 23, 20, 24, 6], [3, 22, 24, 24, 20, 10]]
capacity = [119, 114, 104, 103]
upper_bounds = [4, 4, 4, 4, 4, 6]"
680,ilp_assign,2,6,6,1,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.23151135444641113}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5], [5, 1]]"
681,lcs,32,19,12,0,24,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10019230842590332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcddcadbdaadbbaccbadcdabadcadcba""
T = ""bbbddddccdacdccdcbadcdbabbabaabc"""
682,sub,16,3773477538834617,3773477538834617,1,3773477538834617,1,"{'ok': True, 'value': 3773477538834617, 'stdout': '3773477538834617\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10420894622802734}",1,Compute: 9229152086058822 - 5455674547224205
683,lcs,32,19,16,0,15,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09816503524780273}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadbabdcbcbbadbabbddbcccadaaabbd""
T = ""bdadbdcdacdcdbdcdcbacbbadbdbbccd"""
684,add,2,59,59,1,59,1,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08489179611206055}",1,Compute: 32 + 27
685,ilp_partition,4,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09551334381103516}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 9, 5, 9]"
686,knap,2,10,12,0,12,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11675024032592773}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 4]
V = [2, 10, 10]
C = 6"
687,knap,32,1710,1096,0,1053,0,"{'ok': True, 'value': 1710, 'stdout': '1710\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10338687896728516}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [33, 48, 23, 56, 26, 45, 25, 55, 43, 10, 63, 59, 38, 31, 23, 43, 40, 13, 46, 25, 63, 19, 3, 16, 49, 18, 53, 12, 58, 52, 1, 34]
V = [37, 13, 61, 114, 108, 100, 10, 23, 21, 58, 100, 3, 117, 71, 75, 127, 76, 86, 59, 45, 14, 86, 55, 81, 128, 4, 53, 103, 84, 97, 66, 56]
C = 561"
688,rod,32,1600,1082,0,1040,0,"{'ok': True, 'value': 1600, 'stdout': '1600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09873008728027344}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [50, 82, 41, 35, 34, 56, 61, 67, 63, 17, 13, 58, 41, 86, 86, 23, 50, 30, 58, 34, 81, 57, 32, 15, 87, 95, 59, 65, 65, 3, 58, 57]"
689,knap,4,17,17,1,17,1,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08430314064025879}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 3, 3]
V = [10, 15, 7, 2]
C = 7"
690,ilp_partition,4,4,1,0,2,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10560846328735352}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 7, 8, 7]"
691,knap,32,1728,1053,0,1000,0,"{'ok': True, 'value': 1728, 'stdout': '1728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12061429023742676}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [56, 40, 26, 34, 2, 51, 29, 23, 59, 57, 42, 37, 30, 12, 41, 15, 38, 49, 16, 25, 9, 27, 9, 36, 44, 16, 38, 33, 15, 61, 46, 21]
V = [52, 96, 125, 29, 89, 120, 74, 65, 112, 93, 9, 35, 26, 97, 67, 2, 74, 73, 13, 9, 92, 88, 17, 12, 125, 115, 20, 115, 121, 74, 48, 110]
C = 518"
692,rod,32,1920,1055,0,1050,0,"{'ok': True, 'value': 1920, 'stdout': '1920\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09905433654785156}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [60, 71, 4, 43, 71, 24, 78, 48, 83, 56, 43, 24, 57, 58, 84, 76, 12, 72, 74, 23, 37, 6, 9, 21, 15, 1, 36, 20, 40, 11, 62, 71]"
693,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09519052505493164}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""dca"""
694,sub,32,6371158004083554537848667279520,63371358004083554537848667280521,0,53671358004083554537848667279520,0,"{'ok': True, 'value': 6371158004083554537848667279520, 'stdout': '6371158004083554537848667279520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08471322059631348}",1,Compute: 83145240655138691802494597477503 - 76774082651055137264645930197983
695,ilp_assign,8,20,15,0,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4101295471191406}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 23, 9, 2, 5, 18, 16], [16, 18, 12, 8, 24, 3, 9], [1, 4, 15, 7, 15, 6, 8], [14, 1, 2, 9, 11, 10, 1], [12, 14, 4, 21, 13, 17, 7], [9, 23, 17, 1, 18, 12, 7], [4, 5, 3, 5, 8, 11, 13]]"
696,ilp_assign,2,7,7,1,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2025141716003418}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [5, 3]]"
697,add,16,6344025945935680,6344025945935680,1,6344025945935680,1,"{'ok': True, 'value': 6344025945935680, 'stdout': '6344025945935680\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08702397346496582}",1,Compute: 1408193831464402 + 4935832114471278
698,add,4,14084,14084,1,14084,1,"{'ok': True, 'value': 14084, 'stdout': '14084\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09126067161560059}",1,Compute: 5300 + 8784
699,sub,16,1276620048539549,1276620048539549,1,1276620048539549,1,"{'ok': True, 'value': 1276620048539549, 'stdout': '1276620048539549\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10446929931640625}",1,Compute: 5815763933686913 - 4539143885147364
700,knap,32,1471,1043,0,1043,0,"{'ok': True, 'value': 1471, 'stdout': '1471\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09525156021118164}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [41, 8, 55, 52, 61, 5, 2, 47, 44, 9, 50, 11, 38, 11, 17, 14, 50, 49, 36, 57, 49, 46, 60, 40, 54, 8, 41, 49, 16, 42, 11, 52]
V = [122, 66, 113, 30, 46, 88, 43, 23, 57, 56, 100, 9, 128, 26, 64, 22, 2, 11, 52, 50, 89, 11, 92, 127, 38, 15, 24, 99, 15, 86, 68, 15]
C = 562"
701,mul,2,260,260,1,260,1,"{'ok': True, 'value': 260, 'stdout': '260\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10362911224365234}",1,Compute: 13 * 20
702,ilp_prod,2,24,14,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6d04mmb6/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18137192726135254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[1, 2], [3, 3]]
capacity = [7, 10]
upper_bounds = [3, 3]"
703,ilp_partition,2,2,0,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10885024070739746}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 2, 2, 4]"
704,mul,8,4573014743325168,487006740,0,466866839993272888,0,"{'ok': True, 'value': 4573014743325168, 'stdout': '4573014743325168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10729384422302246}",1,Compute: 91889496 * 49766458
705,knap,2,8,9,0,5,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1155550479888916}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 1]
V = [1, 3, 5]
C = 3"
706,lcs,16,7,7,1,10,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09620070457458496}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcbbdbbbbdbdabd""
T = ""dcbaaaabaddddaaca"""
707,sub,2,28,28,1,28,1,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10842514038085938}",1,Compute: 82 - 54
708,rod,4,28,10,0,20,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09834170341491699}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 6, 3, 3]"
709,add,16,8240844228080782,769123458996,0,8240844228080782,1,"{'ok': True, 'value': 8240844228080782, 'stdout': '8240844228080782\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09212088584899902}",1,Compute: 2304685998422362 + 5936158229658420
710,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09962964057922363}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""cb"""
711,rod,16,232,46,0,130,0,"{'ok': True, 'value': 232, 'stdout': '232\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08614349365234375}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [7, 24, 45, 9, 5, 13, 12, 37, 31, 11, 9, 41, 24, 25, 1, 10]"
712,ilp_assign,8,26,10,0,36,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3971822261810303}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 11, 4, 1, 7, 17, 14], [8, 4, 22, 24, 16, 10, 1], [24, 18, 23, 24, 19, 12, 11], [22, 6, 2, 6, 18, 24, 21], [12, 6, 3, 24, 1, 6, 16], [11, 10, 23, 3, 10, 4, 10], [3, 1, 24, 24, 13, 7, 19]]"
713,ilp_assign,4,12,3,0,14,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_d10zgzl9/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_d10zgzl9/main.py"", line 21, in assignment_problem\n    C[row_covered == False, :][:, col_covered == False] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21411633491516113}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 2, 2, 3], [3, 6, 5, 9], [4, 11, 4, 11], [2, 2, 9, 5]]"
714,rod,16,328,43,0,86,0,"{'ok': True, 'value': 328, 'stdout': '328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11582493782043457}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [6, 41, 20, 23, 1, 48, 48, 47, 43, 17, 33, 41, 31, 20, 32, 43]"
715,ilp_assign,8,40,0,0,11,0,"{'ok': True, 'value': -58, 'stdout': '-58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22139692306518555}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 12, 4, 17, 23, 17, 17], [4, 18, 24, 14, 9, 3, 3], [24, 14, 4, 11, 13, 11, 16], [22, 16, 1, 20, 1, 3, 16], [8, 16, 14, 7, 18, 21, 19], [18, 14, 20, 4, 13, 11, 12], [22, 11, 20, 16, 19, 21, 8]]"
716,lcs,8,4,5,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10702681541442871}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddabbacb""
T = ""dbcdabd"""
717,knap,8,96,140,0,93,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09944558143615723}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 10, 7, 15, 7, 14, 11]
V = [13, 16, 13, 17, 28, 31, 32, 15]
C = 37"
718,ilp_prod,16,237,1037,0,180,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xd4kxage/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_xd4kxage/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16096830368041992}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [37, 24, 48, 43, 29, 41]
consumption (rows=resources) = [[13, 9, 7, 14, 16, 3], [5, 15, 11, 1, 15, 15], [6, 14, 12, 10, 7, 10], [3, 6, 7, 14, 2, 10]]
capacity = [62, 62, 49, 64]
upper_bounds = [4, 3, 4, 4, 3, 4]"
719,ilp_prod,8,44,107,0,105,0,"{'ok': True, 'value': 44, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6a514fe3cee64ebfbda50892943b6b26-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6a514fe3cee64ebfbda50892943b6b26-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 44 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -44 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -44, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -44 to -44\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                44.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n44.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1800839900970459}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 22, 7, 13]
consumption (rows=resources) = [[6, 8, 3, 7], [8, 8, 6, 6], [6, 3, 8, 1], [5, 1, 5, 4]]
capacity = [17, 16, 25, 28]
upper_bounds = [3, 3, 3, 3]"
720,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08716034889221191}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 19, 22, 18, 10, 4, 23]"
721,sub,16,2171348116519146,21714481165291846,0,2171348116519146,1,"{'ok': True, 'value': 2171348116519146, 'stdout': '2171348116519146\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09021186828613281}",1,Compute: 9461031465300749 - 7289683348781603
722,mul,4,7313370,33660,0,7278190,0,"{'ok': True, 'value': 7313370, 'stdout': '7313370\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0917811393737793}",1,Compute: 1299 * 5630
723,ilp_prod,32,206,1063,0,1000,0,"{'ok': True, 'value': 224, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1a1a1b39233e4acb9223845de1f6ecae-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1a1a1b39233e4acb9223845de1f6ecae-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 80.651797 (6)\n3  Obj 224.11856\nOptimal - objective value 224.11856\nOptimal objective 224.1185567 - 3 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n224.1185544\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16888833045959473}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 37, 37, 17, 81, 8]
consumption (rows=resources) = [[24, 21, 10, 3, 13, 4], [23, 31, 6, 8, 14, 1], [16, 21, 16, 6, 14, 15], [11, 24, 18, 27, 32, 4]]
capacity = [92, 85, 112, 76]
upper_bounds = [3, 3, 4, 3, 3, 7]"
724,lcs,32,22,16,0,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09361958503723145}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabadcbadcabbabbababccbbcdacaabc""
T = ""ccdcadcdbdcddbbbccbbadbabcbdcabcc"""
725,ilp_prod,2,24,18,0,24,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_o3lo_s35/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1661689281463623}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[2, 2], [1, 3]]
capacity = [9, 7]
upper_bounds = [4, 3]"
726,add,8,94166883,94166883,1,94166883,1,"{'ok': True, 'value': 94166883, 'stdout': '94166883\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0858917236328125}",1,Compute: 66519836 + 27647047
727,ilp_prod,2,22,35,0,35,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_irjqnic_/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(2)])\n  File ""/tmp/cot_exec_irjqnic_/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(2)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1656334400177002}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7]
consumption (rows=resources) = [[2, 1], [1, 3]]
capacity = [8, 7]
upper_bounds = [4, 3]"
728,mul,16,57633741116795464767944005577858,7542826890862462,0,5859097596418664899467654964464968,0,"{'ok': True, 'value': -2964906624768217982, 'stdout': '-2964906624768217982\n', 'stderr': '/tmp/cot_exec_pvq2esav/main.py:4: RuntimeWarning: overflow encountered in scalar multiply\n  return np.int64(a) * np.int64(b)\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21793770790100098}",0,Compute: 7640867535567359 * 7542826890862462
729,add,16,8305282826924674,8305281827924674,0,8305282826924674,1,"{'ok': True, 'value': 8305282826924674, 'stdout': '8305282826924674\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08752751350402832}",1,Compute: 1451607418186483 + 6853675408738191
730,ilp_assign,8,29,49,0,36,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4173092842102051}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2, 6, 10, 10, 24, 8], [22, 7, 14, 2, 10, 13, 23], [3, 5, 8, 9, 23, 9, 14], [23, 5, 1, 22, 12, 4, 1], [19, 9, 7, 24, 13, 22, 22], [20, 22, 16, 7, 21, 24, 9], [23, 8, 13, 11, 2, 19, 15]]"
731,rod,2,3,4,0,3,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_646nh405/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_646nh405/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08744215965270996}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 3]"
732,mul,2,2052,2028,0,2052,1,"{'ok': True, 'value': 2052, 'stdout': '2052\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09982824325561523}",1,Compute: 76 * 27
733,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09312868118286133}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbaccaa""
T = ""bdcbdabc"""
734,mul,16,16428667328341669892497010385725,16368674139383454664464965665645645,0,1644930409868999755979857526525,0,"{'ok': True, 'value': 8915761783947715389, 'stdout': '8915761783947715389\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2057051658630371}",0,Compute: 1650270051347975 * 9955138745275291
735,mul,16,9937892802448271689786785981900,5028,0,9902683587491696644664980,0,"{'ok': True, 'value': 9937892802448271689786785981900, 'stdout': '9937892802448271689786785981900\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0976405143737793}",1,Compute: 3926039868939260 * 2531276587655565
736,ilp_assign,32,109,12,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22172808647155762}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[88, 47, 25, 21, 25, 47, 4], [35, 29, 30, 48, 45, 53, 31], [66, 80, 31, 15, 93, 53, 75], [42, 62, 5, 4, 83, 59, 48], [85, 59, 89, 52, 11, 55, 5], [18, 24, 11, 61, 66, 62, 40], [78, 54, 32, 78, 50, 27, 12]]"
737,ilp_assign,4,13,7,0,46,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41629648208618164}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 8, 7, 7], [2, 7, 2, 9], [3, 2, 6, 7], [8, 11, 10, 2]]"
738,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10946369171142578}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbd""
T = ""cabdd"""
739,add,4,6566,6566,1,6566,1,"{'ok': True, 'value': 6566, 'stdout': '6566\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09525585174560547}",1,Compute: 4055 + 2511
740,lcs,16,9,7,0,15,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0998086929321289}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbccddcbabcdcca""
T = ""dacbacbbdabdaccbc"""
741,add,2,132,120,0,132,1,"{'ok': True, 'value': 132, 'stdout': '132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09820985794067383}",1,Compute: 75 + 57
742,knap,8,59,140,0,53,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08786678314208984}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 11, 4, 7, 6, 8, 8, 10]
V = [7, 9, 3, 10, 1, 30, 4, 16]
C = 31"
743,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10227251052856445}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 3, 4, 1]"
744,knap,32,1583,1005,0,1445,0,"{'ok': True, 'value': 1583, 'stdout': '1583\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11171078681945801}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 33, 18, 42, 49, 35, 48, 13, 48, 31, 41, 45, 33, 1, 45, 26, 63, 15, 24, 52, 23, 3, 3, 46, 2, 60, 57, 44, 12, 34, 38, 52]
V = [121, 16, 53, 104, 16, 64, 9, 22, 49, 9, 67, 128, 87, 20, 95, 7, 87, 66, 3, 37, 119, 48, 90, 90, 75, 101, 13, 88, 36, 115, 50, 117]
C = 533"
745,ilp_assign,4,22,0,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1qfoad3q/main.py"", line 82, in <module>\n    res = assignment_problem(cost_matrix)\n  File ""/tmp/cot_exec_1qfoad3q/main.py"", line 38, in assignment_problem\n    min_uncovered = min(min(row) for row in cost_matrix if not covered_rows[cost_matrix.index(row)])\n  File ""/tmp/cot_exec_1qfoad3q/main.py"", line 38, in <genexpr>\n    min_uncovered = min(min(row) for row in cost_matrix if not covered_rows[cost_matrix.index(row)])\nAttributeError: \'numpy.ndarray\' object has no attribute \'index\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2211134433746338}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 12, 9, 11], [8, 7, 8, 12], [5, 10, 4, 7], [8, 4, 11, 8]]"
746,sub,16,5991376283738668,1177256102382805,0,6000000000000000,0,"{'ok': True, 'value': 5991376283738668, 'stdout': '5991376283738668\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08840012550354004}",1,Compute: 7168632386121473 - 1177256102382805
747,knap,2,8,10,0,16,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1055610179901123}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 4]
V = [1, 7, 8]
C = 3"
748,sub,4,4536,4536,1,4536,1,"{'ok': True, 'value': 4536, 'stdout': '4536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08617591857910156}",1,Compute: 8334 - 3798
749,ilp_partition,8,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09585380554199219}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 17, 16, 3, 23, 4, 16, 12]"
750,sub,32,10124155681509371570323576598033,9122415731409372530422366647903,0,10124155681509371570323576597933,0,"{'ok': True, 'value': 10124155681509371570323576598033, 'stdout': '10124155681509371570323576598033\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10644960403442383}",1,Compute: 32259055836336887597646164722412 - 22134900154827516027322588124379
751,add,2,27,27,1,27,1,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0977325439453125}",1,Compute: 14 + 13
752,rod,16,304,65,0,62,0,"{'ok': True, 'value': 304, 'stdout': '304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1006920337677002}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [19, 30, 35, 3, 25, 11, 44, 40, 22, 16, 1, 46, 10, 1, 9, 38]"
753,ilp_prod,2,24,18,0,24,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_pa471mqx/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1557621955871582}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[1, 1], [2, 1]]
capacity = [8, 6]
upper_bounds = [3, 6]"
754,knap,4,22,18,0,13,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10565352439880371}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 2, 8]
V = [7, 6, 9, 13]
C = 7"
755,ilp_partition,32,0,14,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10769939422607422}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 38, 30, 61, 15, 34, 83, 17, 76, 73, 66, 32, 9, 57, 93, 71, 47, 8, 62, 14, 95, 14, 93, 81]"
756,ilp_partition,8,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09013843536376953}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 7, 23, 7, 16, 16, 10, 12]"
757,ilp_assign,8,38,35,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_edf1ad15/main.py"", line 47, in <module>\n    res = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_edf1ad15/main.py"", line 25, in hungarian_algorithm\n    min_uncovered = min([(i, j) for i, j in np.argwhere(cost_matrix == 0) if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20309972763061523}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 6, 5, 8, 15, 24, 17], [4, 12, 3, 23, 4, 7, 19], [10, 15, 17, 10, 24, 3, 23], [16, 20, 21, 17, 21, 16, 21], [14, 5, 10, 2, 1, 6, 18], [20, 1, 7, 13, 15, 12, 5], [13, 18, 10, 4, 5, 11, 11]]"
758,lcs,8,5,5,1,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09612607955932617}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccddbbad""
T = ""dbbddaaad"""
759,knap,2,9,15,0,15,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10047245025634766}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 4]
V = [8, 6, 9]
C = 5"
760,sub,8,24813640,24813640,1,24813640,1,"{'ok': True, 'value': 24813640, 'stdout': '24813640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09599781036376953}",1,Compute: 54812606 - 29998966
761,mul,32,2852997723949963422925442965481656562342473263695675249548492546,194,0,28303833995295708418798578403554566549544464635657355965356,0,"{'ok': True, 'value': 2852997723949963422925442965481656562342473263695675249548492546, 'stdout': '2852997723949963422925442965481656562342473263695675249548492546\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09655642509460449}",1,Compute: 62390806296808179716808741800782 * 45727854683870602855347992766103
762,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10617423057556152}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccb""
T = ""dcdb"""
763,sub,2,16,,0,16,1,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09568262100219727}",1,Compute: 93 - 77
764,mul,2,7719,7859,0,7619,0,"{'ok': True, 'value': 7719, 'stdout': '7719\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09147238731384277}",1,Compute: 83 * 93
765,mul,2,8633,8633,1,8723,0,"{'ok': True, 'value': 8633, 'stdout': '8633\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08968400955200195}",1,Compute: 97 * 89
766,sub,2,37,37,1,37,1,"{'ok': True, 'value': 37, 'stdout': '37\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0869901180267334}",1,Compute: 67 - 30
767,mul,8,2482452181388322,32130,0,2480106433699602,0,"{'ok': True, 'value': 2482452181388322, 'stdout': '2482452181388322\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08729290962219238}",1,Compute: 40428146 * 61404057
768,knap,16,442,127,0,1064,0,"{'ok': True, 'value': 442, 'stdout': '442\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08929753303527832}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 25, 14, 26, 11, 15, 30, 3, 4, 29, 12, 24, 1, 31, 27]
V = [60, 22, 64, 19, 49, 31, 17, 29, 26, 39, 50, 55, 60, 16, 60, 23]
C = 127"
769,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08958005905151367}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 5, 2]"
770,rod,2,8,4,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_wj6jlvxq/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_wj6jlvxq/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08584237098693848}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
771,lcs,32,19,10,0,15,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10083723068237305}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabdabbcccbcbdbdacaabacdccacdccd""
T = ""dbbaadbccdddcbcbabcdbbcadbbddadd"""
772,mul,8,6691024963782950,668843695345390,0,6706839993638450,0,"{'ok': True, 'value': 6691024963782950, 'stdout': '6691024963782950\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09595060348510742}",1,Compute: 88128110 * 75923845
773,sub,4,5314,5314,1,5314,1,"{'ok': True, 'value': 5314, 'stdout': '5314\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09729981422424316}",1,Compute: 9609 - 4295
774,ilp_partition,4,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09492206573486328}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 7, 2, 12]"
775,ilp_assign,16,38,11,0,117,0,"{'ok': True, 'value': -111, 'stdout': '-111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20023083686828613}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 9, 35, 36, 38, 8, 5], [2, 35, 43, 45, 20, 34, 3], [40, 6, 20, 6, 29, 47, 7], [23, 25, 40, 2, 37, 30, 10], [44, 35, 14, 35, 31, 8, 40], [21, 4, 19, 14, 1, 17, 30], [44, 10, 31, 35, 6, 21, 5]]"
776,rod,2,8,5,0,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_acfzg_r4/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_acfzg_r4/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09790349006652832}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
777,ilp_assign,16,55,105,0,115,0,"{'ok': True, 'value': 252, 'stdout': '252\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21060562133789062}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 22, 24, 32, 30, 1, 35], [35, 29, 1, 33, 22, 45, 25], [41, 8, 2, 27, 29, 2, 24], [26, 46, 44, 46, 44, 22, 14], [12, 8, 18, 42, 31, 40, 48], [3, 26, 38, 4, 32, 40, 41], [36, 43, 12, 5, 21, 4, 41]]"
778,lcs,32,17,10,0,16,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09199810028076172}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaaadaacbbcbcaccbaccbaabbbadccb""
T = ""cabacdbddcccdabaddaadcaaacdbaadb"""
779,mul,2,374,374,1,374,1,"{'ok': True, 'value': 374, 'stdout': '374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08658432960510254}",1,Compute: 11 * 34
780,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09210324287414551}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""a"""
781,add,4,13217,,0,13217,1,"{'ok': True, 'value': 13217, 'stdout': '13217\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08521151542663574}",1,Compute: 3300 + 9917
782,rod,16,384,46,0,64,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_16l832c_/main.py"", line 12, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_16l832c_/main.py"", line 5, in rod_cutting\n    dp[i] = P[i]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09193992614746094}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [24, 4, 6, 36, 33, 21, 15, 18, 37, 5, 21, 33, 24, 45, 37, 41]"
783,rod,32,752,1055,0,77,0,"{'ok': True, 'value': 752, 'stdout': '752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08588433265686035}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [8, 47, 2, 12, 96, 40, 63, 60, 40, 11, 85, 23, 33, 84, 77, 79, 36, 29, 92, 96, 33, 93, 45, 50, 74, 76, 33, 91, 85, 25, 81, 77]"
784,lcs,32,19,12,0,16,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08614373207092285}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdbcbbccaaabbdacbdccbdaadacaadb""
T = ""acadaddaadabdcadadcacacadcbccdc"""
785,ilp_assign,32,107,105,0,10,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21211791038513184}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 9, 32, 54, 43, 51, 28], [29, 59, 73, 20, 73, 25, 14], [39, 93, 74, 69, 66, 53, 20], [87, 27, 94, 83, 8, 18, 54], [41, 86, 8, 12, 81, 56, 80], [47, 76, 33, 50, 7, 39, 77], [64, 37, 31, 92, 79, 20, 12]]"
786,sub,8,36190763,36190763,1,36190763,1,"{'ok': True, 'value': 36190763, 'stdout': '36190763\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09895896911621094}",1,Compute: 57089492 - 20898729
787,mul{'ok': True, 'value': -9080185010665766860, 'stdout': '-9080185010665766860\n', 'stderr': '/tmp/cot_exec_4xxvisxv/main.py:4: RuntimeWarning: overflow encountered in scalar multiply\n  return np.int64(a) * np.int64(b)\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20729875564575195}",0,Compute: 7057724643600844 * 6258102780463999
788,add,2,52,52,1,52,1,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08783864974975586}",1,Compute: 39 + 13
789,rod,16,400,46,0,400,1,"{'ok': True, 'value': 400, 'stdout': '400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10357785224914551}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [25, 41, 29, 24, 23, 17, 46, 5, 37, 47, 40, 32, 42, 30, 36, 40]"
790,sub,4,1401,1401,1,1401,1,"{'ok': True, 'value': 1401, 'stdout': '1401\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09288525581359863}",1,Compute: 2607 - 1206
791,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09366798400878906}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acca""
T = ""caccc"""
792,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09015727043151855}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 2, 7, 71, 72, 64, 68, 77, 38, 48, 27, 64, 96, 21, 1, 3, 11, 16, 7, 59, 96, 10, 15, 55]"
793,sub,32,43788773953718396673284336344001,43788774046281603320011663651451,0,43788774046281603320007663651601,0,"{'ok': True, 'value': 43788773953718396673284336344001, 'stdout': '43788773953718396673284336344001\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09470391273498535}",1,Compute: 98479304510290433687330264847051 - 54690530556572037014045928503050
794,ilp_partition,16,1,1,1,196,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09841108322143555}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 14, 24, 30, 17, 28, 9, 5, 26, 14, 6, 28, 3, 40, 15, 35]"
795,knap,16,333,100,0,499,0,"{'ok': True, 'value': 333, 'stdout': '333\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09876441955566406}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 30, 30, 7, 19, 6, 23, 10, 3, 10, 2, 18, 13, 32, 7, 3]
V = [46, 7, 41, 14, 28, 48, 40, 17, 10, 4, 56, 22, 2, 48, 43, 5]
C = 111"
796,rod,8,136,22,0,40,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08770418167114258}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 8, 22, 12, 4, 5, 21, 13]"
797,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09922361373901367}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [94, 45, 63, 22, 6, 16, 28, 38, 18, 76, 53, 73, 60, 82, 53, 71, 82, 36, 58, 32, 78, 48, 95, 68]"
798,knap,16,458,107,0,1034,0,"{'ok': True, 'value': 458, 'stdout': '458\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08714532852172852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 14, 3, 21, 16, 18, 30, 4, 1, 7, 28, 13, 14, 9, 30, 22]
V = [49, 56, 12, 51, 57, 39, 40, 31, 9, 49, 1, 25, 46, 52, 45, 58]
C = 122"
799,ilp_partition,32,1,10,0,540,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09678125381469727}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [31, 32, 90, 1, 66, 73, 35, 78, 3, 7, 57, 70, 25, 38, 44, 10, 25, 49, 90, 72, 47, 81, 84, 89]"
800,ilp_partition,4,4,13,0,6,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10089492797851562}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 8, 11, 11]"
801,knap,16,447,104,0,947,0,"{'ok': True, 'value': 447, 'stdout': '447\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09702873229980469}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 6, 25, 20, 25, 25, 26, 10, 5, 28, 5, 3, 28, 27, 23, 32]
V = [60, 5, 6, 60, 33, 34, 29, 35, 57, 35, 37, 64, 59, 16, 35, 22]
C = 153"
802,knap,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09189033508300781}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 1]
V = [10, 8, 1]
C = 2"
803,rod,8,112,22,0,1,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09766578674316406}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 13, 14, 10, 14, 1, 8, 3]"
804,knap,8,108,140,0,103,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09207701683044434}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 15, 10, 12, 7, 2, 6, 11]
V = [24, 22, 27, 23, 32, 12, 13, 20]
C = 35"
805,lcs,32,19,16,0,14,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10426187515258789}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcadbdccdaaabdacadbddbddbdbabdd""
T = ""bacbacaacbdcdcdababaacdccddcaacdb"""
806,ilp_assign,16,55,104,0,117,0,"{'ok': True, 'value': -105, 'stdout': '-105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20493316650390625}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 11, 21, 22, 27, 9, 1], [17, 21, 7, 19, 35, 26, 19], [7, 41, 7, 7, 15, 27, 41], [15, 37, 4, 34, 40, 2, 29], [44, 44, 16, 46, 4, 10, 35], [31, 32, 9, 21, 18, 27, 31], [24, 39, 16, 27, 22, 3, 5]]"
807,knap,2,8,15,0,11,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08710074424743652}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 5]
V = [8, 7, 8]
C = 6"
808,rod,8,160,22,0,48,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1050255298614502}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 12, 21, 16, 2, 18, 10, 3]"
809,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08632397651672363}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 1, 5]"
810,ilp_prod,32,568,105,0,1056,0,"{'ok': True, 'value': 573, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/09829fc82041415998a7e67639d1aa9b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/09829fc82041415998a7e67639d1aa9b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 40 RHS\nAt line 45 BOUNDS\nAt line 52 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 4 (0) rows, 6 (0) columns and 24 (0) elements\n0  Obj -0 Dual inf 108.05258 (6)\n2  Obj 573.76\nOptimal - objective value 573.76\nOptimal objective 573.76 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n573.76\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.172776460647583}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 32, 71, 14, 48, 6]
consumption (rows=resources) = [[18, 28, 14, 15, 25, 20], [28, 22, 12, 18, 16, 7], [17, 7, 8, 6, 17, 21], [22, 23, 4, 16, 26, 2]]
capacity = [115, 108, 101, 68]
upper_bounds = [3, 3, 8, 4, 3, 4]"
811,sub,32,47501692037764347446477127630248,47501692037764347446477127630248,1,47501692037764347446477127630248,1,"{'ok': True, 'value': 47501692037764347446477127630248, 'stdout': '47501692037764347446477127630248\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0938565731048584}",1,Compute: 75441143530243047688771699498290 - 27939451492478700242294571868042
812,knap,2,9,11,0,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08705401420593262}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 2]
V = [9, 7, 2]
C = 3"
813,sub,16,2456341819586288,2456341819586288,1,2456341819586288,1,"{'ok': True, 'value': 2456341819586288, 'stdout': '2456341819586288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09921503067016602}",1,Compute: 7937151956774783 - 5480810137188495
814,ilp_prod,32,337,149,0,1000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_g3pqhv2t/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_g3pqhv2t/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16968679428100586}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 47, 22, 85, 45, 35]
consumption (rows=resources) = [[11, 10, 12, 21, 4, 32], [26, 18, 1, 27, 13, 13], [11, 5, 11, 15, 10, 14], [2, 1, 16, 12, 9, 21]]
capacity = [74, 92, 117, 83]
upper_bounds = [3, 5, 5, 3, 7, 3]"
815,ilp_assign,4,24,0,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_iymfnkhr/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_iymfnkhr/main.py"", line 21, in assignment_problem\n    C[row_covered == False, :][:, col_covered == False] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21016168594360352}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 7, 7, 8], [10, 5, 8, 1], [9, 8, 9, 6], [11, 7, 12, 4]]"
816,add,2,112,112,1,112,1,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10885095596313477}",1,Compute: 31 + 81
817,mul,4,14147320,13946360,0,14049560,0,"{'ok': True, 'value': 14147320, 'stdout': '14147320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09487390518188477}",1,Compute: 3160 * 4477
818,mul{'ok': True, 'value': 3134370044677609215997823838418781728226776729386724589138631244, 'stdout': '3134370044677609215997823838418781728226776729386724589138631244\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09958481788635254}",1,Compute: 36684066988957333261834438707302 * 85442272407285695872898681440322
819,add,16,7952154418957783,7952154418957783,1,7952154418957783,1,"{'ok': True, 'value': 7952154418957783, 'stdout': '7952154418957783\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08963894844055176}",1,Compute: 2644055277233805 + 5308099141723978
820,knap,2,10,11,0,11,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10884571075439453}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5]
V = [10, 2, 1]
C = 5"
821,mul,4,16610876,16946056,0,16739336,0,"{'ok': True, 'value': 16610876, 'stdout': '16610876\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09767413139343262}",1,Compute: 5086 * 3266
822,ilp_assign,16,70,110,0,114,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40231752395629883}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 33, 27, 47, 31, 14, 39], [9, 8, 35, 19, 21, 10, 3], [36, 48, 17, 12, 5, 30, 20], [31, 28, 9, 22, 12, 34, 11], [26, 17, 7, 37, 12, 23, 40], [40, 23, 7, 19, 38, 31, 22], [40, 39, 41, 22, 42, 5, 20]]"
823,ilp_assign,16,52,40,0,117,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3927114009857178}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 11, 9, 5, 20, 28, 44], [1, 25, 1, 40, 24, 5, 4], [33, 35, 27, 32, 14, 2, 27], [7, 30, 39, 29, 23, 43, 45], [20, 9, 31, 30, 43, 37, 15], [27, 48, 33, 12, 16, 31, 22], [6, 35, 21, 42, 9, 39, 29]]"
824,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10827231407165527}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caddbcda""
T = ""caaabaa"""
825,ilp_assign,16,46,20,0,115,0,"{'ok': True, 'value': -49, 'stdout': '-49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20959925651550293}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 23, 29, 48, 4, 1, 42], [15, 24, 6, 31, 48, 31, 16], [6, 33, 10, 9, 35, 29, 33], [13, 28, 12, 18, 11, 14, 25], [2, 46, 22, 36, 25, 45, 42], [3, 8, 19, 33, 19, 19, 28], [19, 4, 1, 1, 6, 27, 9]]"
826,rod,32,864,1184,0,36,0,"{'ok': True, 'value': 864, 'stdout': '864\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08995437622070312}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [27, 9, 69, 91, 43, 13, 44, 80, 3, 91, 89, 66, 27, 24, 15, 49, 66, 21, 44, 57, 32, 27, 34, 12, 90, 31, 29, 34, 43, 95, 21, 35]"
827,add,8,154455189,154455189,1,154455189,1,"{'ok': True, 'value': 154455189, 'stdout': '154455189\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09098243713378906}",1,Compute: 88758363 + 65696826
828,sub,2,19,19,1,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09432697296142578}",1,Compute: 75 - 56
829,rod,32,1360,1082,0,840,0,"{'ok': True, 'value': 1360, 'stdout': '1360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0945897102355957}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [17, 85, 89, 75, 28, 33, 32, 61, 27, 34, 43, 71, 30, 53, 83, 84, 59, 59, 84, 59, 57, 74, 37, 33, 74, 78, 81, 20, 57, 38, 67, 59]"
830,add,8,77415296,77415296,1,77415296,1,"{'ok': True, 'value': 77415296, 'stdout': '77415296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09498810768127441}",1,Compute: 13192060 + 64223236
831,ilp_assign,16,74,125,0,182,0,"{'ok': True, 'value': 221, 'stdout': '221\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21334362030029297}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[42, 32, 7, 20, 34, 9, 10], [40, 20, 38, 22, 28, 18, 9], [39, 37, 29, 35, 17, 48, 26], [7, 4, 38, 14, 15, 41, 14], [48, 4, 39, 23, 40, 6, 21], [24, 34, 42, 25, 44, 27, 45], [6, 39, 37, 48, 3, 17, 19]]"
832,rod,8,192,22,0,94,0,"{'ok': True, 'value': 192, 'stdout': '192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10300064086914062}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [24, 14, 20, 3, 8, 9, 4, 10]"
833,ilp_prod,32,213,348,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ex0n5_55/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""Quantity"", range(6), 0, upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1618969440460205}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [29, 36, 10, 92, 25, 11]
consumption (rows=resources) = [[16, 19, 8, 24, 28, 13], [20, 28, 16, 25, 27, 16], [23, 2, 23, 3, 23, 29], [15, 24, 14, 25, 25, 15]]
capacity = [92, 90, 66, 68]
upper_bounds = [3, 3, 3, 3, 3, 3]"
834,add,32,113574090823480579884049975670310,91515461717117751291914,0,113574090823480579884050075670310,0,"{'ok': True, 'value': 113574090823480579884049975670310, 'stdout': '113574090823480579884049975670310\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08953356742858887}",1,Compute: 43653932626510122931457751291914 + 69920158196970456952592224378396
835,sub,2,15,15,1,15,1,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09017109870910645}",1,Compute: 96 - 81
836,mul,2,7480,7360,0,7240,0,"{'ok': True, 'value': 7480, 'stdout': '7480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08631730079650879}",1,Compute: 88 * 85
837,rod,8,48,22,0,19,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08936500549316406}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [6, 10, 17, 24, 6, 21, 5, 2]"
838,ilp_partition,16,0,1,0,40,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08548259735107422}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 22, 36, 9, 33, 5, 4, 13, 32, 13, 9, 44, 16, 32, 28, 42]"
839,ilp_prod,8,72,100,0,105,0,"{'ok': True, 'value': 72, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6616c6cb58524666b4856e3eb8e5ae46-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6616c6cb58524666b4856e3eb8e5ae46-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 77.2692 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -72 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -77.269231 to -77.269231 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -72, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -77.2692 to -77.2692\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                72.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n72.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17949652671813965}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 4, 19, 7]
consumption (rows=resources) = [[7, 8, 2, 7], [4, 8, 8, 2], [6, 1, 4, 8], [7, 2, 1, 4]]
capacity = [30, 18, 27, 30]
upper_bounds = [4, 3, 3, 3]"
840,knap,4,18,16,0,12,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10335636138916016}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 6, 7, 8]
V = [12, 6, 4, 2]
C = 11"
841,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08892083168029785}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdccbdaa""
T = ""badadbacd"""
842,rod,2,10,5,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_zthfnokj/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_zthfnokj/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09474825859069824}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
843,add,32,125141708979590191905236693322823,125141704453640194865236687822823,0,125141709087590191905236693322823,0,"{'ok': True, 'value': 125141708979590191905236693322823, 'stdout': '125141708979590191905236693322823\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10400128364562988}",1,Compute: 86553672148765168259474556242920 + 38588036830825023645762137079903
844,rod,4,28,10,0,35,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09858298301696777}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 1, 10, 2]"
845,knap,4,29,27,0,26,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08652329444885254}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 7, 5, 4]
V = [6, 1, 13, 16]
C = 10"
846,ilp_assign,16,63,10,0,110,0,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4614145755767822}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[41, 35, 42, 38, 48, 11, 37], [17, 23, 37, 12, 18, 9, 4], [5, 41, 44, 14, 7, 35, 3], [32, 28, 40, 15, 33, 21, 38], [35, 34, 8, 26, 41, 33, 17], [11, 15, 1, 12, 45, 39, 26], [32, 7, 6, 4, 15, 23, 8]]"
847,rod,16,304,-1,0,84,0,"{'ok': True, 'value': 304, 'stdout': '304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12463831901550293}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [10, 38, 46, 38, 21, 30, 34, 41, 18, 30, 34, 24, 48, 35, 4, 1]"
848,sub,32,43328179686628250063888219436375,43328179686628250063888219436375,1,43328179686628250063888219436375,1,"{'ok': True, 'value': 43328179686628250063888219436375, 'stdout': '43328179686628250063888219436375\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09403276443481445}",1,Compute: 79805530176080331048332332399144 - 36477350489452080984444112962769
849,mul,4,21754050,2181045,0,21729090,0,"{'ok': True, 'value': 21754050, 'stdout': '21754050\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09792947769165039}",1,Compute: 4845 * 4490
850,knap,16,488,1038,0,840,0,"{'ok': True, 'value': 488, 'stdout': '488\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11011219024658203}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 16, 18, 32, 23, 4, 16, 15, 29, 11, 29, 24, 2, 6, 7, 3]
V = [51, 26, 45, 12, 64, 34, 16, 7, 30, 33, 58, 60, 53, 55, 24, 43]
C = 119"
851,ilp_assign,32,81,115,0,240,0,"{'ok': True, 'value': 2070, 'stdout': '2070\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20897746086120605}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[71, 1, 63, 53, 20, 46, 45], [19, 94, 63, 93, 63, 47, 80], [89, 79, 34, 96, 36, 40, 31], [43, 50, 59, 83, 3, 56, 83], [78, 26, 24, 63, 94, 2, 93], [73, 19, 52, 18, 64, 23, 90], [76, 87, 7, 15, 60, 95, 38]]"
852,ilp_prod,8,55,105,0,105,0,"{'ok': True, 'value': 55, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b7660b9648c248869f06dfb42366bdb7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b7660b9648c248869f06dfb42366bdb7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 61.7143 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -54 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -55 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 3\nCbc0013I At root node, 1 cuts changed objective from -61.714286 to -55 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -55, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -61.7143 to -55\nProbing was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                55.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n55.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18019628524780273}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 13, 7, 18]
consumption (rows=resources) = [[6, 5, 5, 2], [3, 6, 6, 7], [2, 6, 5, 1], [4, 2, 4, 1]]
capacity = [22, 19, 24, 28]
upper_bounds = [3, 3, 3, 3]"
853,knap,4,21,16,0,18,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09718704223632812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 6, 3]
V = [3, 2, 5, 16]
C = 5"
854,mul,2,4200,4200,1,4200,1,"{'ok': True, 'value': 4200, 'stdout': '4200\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09600067138671875}",1,Compute: 75 * 56
855,mul,8,5114708715303923,197,0,5108358774794593,0,"{'ok': True, 'value': 5114708715303923, 'stdout': '5114708715303923\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09756660461425781}",1,Compute: 74263781 * 68872183
856,add,4,8044,8814,0,8044,1,"{'ok': True, 'value': 8044, 'stdout': '8044\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08618998527526855}",1,Compute: 4678 + 3366
857,add,8,146990060,147590060,0,147000060,0,"{'ok': True, 'value': 146990060, 'stdout': '146990060\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12328243255615234}",1,Compute: 63830860 + 83159200
858,rod,2,8,6,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_fnb6g9wo/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_fnb6g9wo/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08672785758972168}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
859,knap,32,1727,1085,0,1043,0,"{'ok': True, 'value': 1727, 'stdout': '1727\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11592483520507812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [43, 14, 10, 55, 6, 37, 14, 21, 18, 13, 59, 63, 17, 21, 8, 28, 38, 19, 45, 26, 55, 8, 19, 32, 25, 40, 56, 47, 17, 43, 60, 6]
V = [68, 79, 69, 128, 113, 113, 29, 14, 119, 61, 63, 15, 40, 52, 35, 121, 39, 7, 21, 1, 88, 126, 106, 98, 121, 20, 44, 60, 68, 18, 56, 62]
C = 481"
860,rod,32,2848,89,0,595,0,"{'ok': True, 'value': 2848, 'stdout': '2848\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0992424488067627}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [89, 19, 75, 60, 48, 80, 20, 93, 59, 18, 46, 37, 19, 15, 80, 69, 64, 11, 16, 78, 25, 92, 93, 40, 51, 30, 70, 80, 12, 64, 8, 74]"
861,mul,4,34355464,1882,0,34859808,0,"{'ok': True, 'value': 34355464, 'stdout': '34355464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10930895805358887}",1,Compute: 5192 * 6617
862,ilp_prod,16,182,167,0,155,0,"{'ok': True, 'value': 182, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8d9b15f2f1da43099c44c36eebe49df3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8d9b15f2f1da43099c44c36eebe49df3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 204.301 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -163 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -182 found by DiveCoefficient after 12 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 5.5\nCbc0013I At root node, 4 cuts changed objective from -204.3012 to -182 in 5 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 12 row cuts average 5.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 19 row cuts average 5.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -182, took 12 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -204.301 to -182\nProbing was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 5 times and created 12 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 5 times and created 19 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 5 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                182.00000000\nEnumerated nodes:               0\nTotal iterations:               12\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n182.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1867811679840088}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [44, 5, 23, 25, 20, 16]
consumption (rows=resources) = [[1, 9, 14, 10, 16, 6], [9, 3, 7, 2, 5, 12], [16, 6, 16, 5, 7, 9], [7, 15, 5, 12, 3, 13]]
capacity = [34, 52, 62, 60]
upper_bounds = [3, 3, 3, 3, 3, 4]"
863,rod,2,12,12,1,12,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9a1y9fni/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_9a1y9fni/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10042619705200195}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 6]"
864,ilp_prod,2,72,92,0,60,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_uolhmadw/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16127419471740723}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[1, 1], [2, 1]]
capacity = [9, 10]
upper_bounds = [5, 9]"
865,mul,2,3936,4036,0,3936,1,"{'ok': True, 'value': 3936, 'stdout': '3936\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11467480659484863}",1,Compute: 41 * 96
866,lcs,8,5,4,0,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08799934387207031}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdcadbd""
T = ""bdbadbddb"""
867,ilp_prod,4,30,35,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_dp07_qxg/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16574501991271973}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 10, 5]
consumption (rows=resources) = [[4, 3, 1], [2, 1, 4], [1, 2, 1]]
capacity = [8, 13, 11]
upper_bounds = [3, 3, 3]"
868,ilp_prod,16,296,1037,0,1036,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_7_pwdaay/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_7_pwdaay/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15625953674316406}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 43, 6, 40, 19, 34]
consumption (rows=resources) = [[7, 4, 10, 4, 9, 2], [5, 16, 8, 1, 12, 12], [11, 15, 14, 9, 14, 1], [4, 3, 7, 4, 14, 9]]
capacity = [63, 62, 44, 61]
upper_bounds = [4, 3, 3, 4, 3, 5]"
869,mul,4,21399946,21396526,0,21536326,0,"{'ok': True, 'value': 21399946, 'stdout': '21399946\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08938431739807129}",1,Compute: 2347 * 9118
870,ilp_partition,8,0,1,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09240078926086426}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 18, 15, 8, 16, 4, 16, 3]"
871,knap,32,1597,1083,0,1458,0,"{'ok': True, 'value': 1597, 'stdout': '1597\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09627866744995117}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 26, 2, 22, 21, 2, 9, 33, 5, 38, 36, 31, 15, 61, 7, 38, 44, 17, 1, 39, 18, 17, 42, 56, 45, 63, 4, 9, 61, 17, 13, 39]
V = [83, 47, 25, 10, 80, 81, 78, 41, 52, 17, 78, 97, 32, 97, 33, 5, 35, 6, 71, 77, 128, 116, 105, 59, 123, 78, 8, 20, 99, 127, 48, 88]
C = 420"
872,sub,16,2496300278394604,2496300278394604,1,2496300278394594,0,"{'ok': True, 'value': 2496300278394604, 'stdout': '2496300278394604\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08750057220458984}",1,Compute: 8976239721667062 - 6479939443272458
873,rod,4,22,12,0,24,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08577322959899902}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 11, 5, 7]"
874,rod,32,2784,1055,0,505,0,"{'ok': True, 'value': 2784, 'stdout': '2784\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10212278366088867}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [87, 63, 34, 78, 36, 46, 24, 11, 74, 72, 66, 92, 61, 11, 48, 9, 80, 51, 4, 36, 33, 90, 72, 30, 77, 22, 23, 59, 75, 55, 21, 23]"
875,knap,4,22,29,0,26,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08989119529724121}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 8, 4]
V = [8, 11, 6, 11]
C = 10"
876,mul,8,2575760525172582,269093558,0,2568666399956222,0,"{'ok': True, 'value': 2575760525172582, 'stdout': '2575760525172582\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10001754760742188}",1,Compute: 27781358 * 92715429
877,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09562516212463379}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""b"""
878,knap,4,16,11,0,23,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10253357887268066}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 4, 3]
V = [16, 1, 5, 7]
C = 8"
879,mul,32,1291241512608332726887928521487627418267120397676716819521840507,1266982634088665456696976435956,0,128385012888368699609655866546564674932363614954462203233577,0,"{'ok': True, 'value': 1291241512608332726887928521487627418267120397676716819521840507, 'stdout': '1291241512608332726887928521487627418267120397676716819521840507\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09568023681640625}",1,Compute: 30760666756404747928264599180729 * 41977032644764776238853010960083
880,ilp_assign,4,8,8,1,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_vpmn64go/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_vpmn64go/main.py"", line 21, in assignment_problem\n    C[row_covered == False, :][:, col_covered == False] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21887755393981934}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 7, 12, 3], [3, 4, 11, 2], [8, 4, 6, 4], [2, 5, 1, 2]]"
881,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0849761962890625}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [31, 44, 95, 62, 35, 74, 30, 93, 4, 74, 39, 17, 67, 79, 48, 54, 83, 8, 79, 74, 9, 28, 34, 42]"
882,rod,16,238,64,0,67,0,"{'ok': True, 'value': 238, 'stdout': '238\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09866857528686523}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [8, 21, 46, 2, 38, 30, 25, 24, 8, 41, 37, 4, 25, 18, 25, 11]"
883,lcs,16,11,8,0,8,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09270620346069336}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddcadabcdbabdcc""
T = ""dddddcadaddcdcc"""
884,sub,4,463,463,1,463,1,"{'ok': True, 'value': 463, 'stdout': '463\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09267807006835938}",1,Compute: 6533 - 6070
885,ilp_partition,4,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09768033027648926}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 2, 2, 8]"
886,mul,2,2592,2784,0,2592,1,"{'ok': True, 'value': 2592, 'stdout': '2592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08628463745117188}",1,Compute: 36 * 72
887,rod,2,12,12,1,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xg3b0hog/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_xg3b0hog/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10216474533081055}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 4]"
888,mul,4,20413604,19746888,0,20259444,0,"{'ok': True, 'value': 20413604, 'stdout': '20413604\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10796141624450684}",1,Compute: 4721 * 4324
889,knap,8,111,110,0,27,0,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09108853340148926}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 10, 9, 1, 9, 9, 16, 2]
V = [26, 13, 6, 27, 21, 8, 17, 24]
C = 33"
890,rod,2,12,10,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_m5p_a_73/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_m5p_a_73/main.py"", line 5, in rod_cutting\n    dp[i] = max(dp[i], P[cut] + dp[i - cut])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09582829475402832}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
891,sub,32,8075020755580489246574703364773,81145107565802893285746033364772,0,9074990755480489046574603336976,0,"{'ok': True, 'value': 8075020755580489246574703364773, 'stdout': '8075020755580489246574703364773\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0970315933227539}",1,Compute: 37953237798284755597778559033876 - 29878217042704266351203855669103
892,ilp_assign,2,4,9,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6z4my6xn/main.py"", line 27, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_6z4my6xn/main.py"", line 3, in assignment_problem\n    C = np.array(C)\nNameError: name \'np\' is not defined. Did you mean: \'n\'?\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09610748291015625}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 2], [2, 6]]"
893,ilp_prod,2,35,30,0,35,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ymigqpz0/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18599343299865723}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 5]
consumption (rows=resources) = [[1, 1], [1, 2]]
capacity = [7, 8]
upper_bounds = [7, 4]"
894,mul,32,1731410317174187915651053242080210894944296598411521187792399108,1743626536843647949377781453906695663434865553666123664000,0,174334069592996885752936884945644669495144444366498,0,"{'ok': True, 'value': 1731410317174187915651053242080210894944296598411521187792399108, 'stdout': '1731410317174187915651053242080210894944296598411521187792399108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1078195571899414}",1,Compute: 21224820811266598310337610769653 * 81574790787167329846300031237236
895,ilp_partition,16,1,1,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09443116188049316}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 43, 20, 11, 32, 44, 9, 24, 43, 29, 9, 48, 33, 47, 28, 31]"
896,knap,16,374,103,0,678,0,"{'ok': True, 'value': 374, 'stdout': '374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11023306846618652}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 32, 4, 17, 27, 6, 7, 16, 20, 24, 2, 3, 21, 16, 13, 5]
V = [55, 39, 2, 35, 32, 47, 25, 32, 55, 49, 14, 35, 49, 27, 49, 13]
C = 120"
897,sub,2,13,13,1,13,1,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08838462829589844}",1,Compute: 81 - 68
898,ilp_prod,2,32,16,0,40,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_pqbbvhmd/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, upper_bounds)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15775489807128906}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8]
consumption (rows=resources) = [[1, 3], [2, 3]]
capacity = [8, 9]
upper_bounds = [4, 3]"
899,lcs,4,1,2,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08646345138549805}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcb""
T = ""baa"""
900,mul,2,612,612,1,612,1,"{'ok': True, 'value': 612, 'stdout': '612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09178447723388672}",1,Compute: 36 * 17
901,ilp_assign,32,170,22,0,110,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_95rnzkos/main.py"", line 47, in <module>\n    res = hungarian_algorithm(C)\n  File ""/tmp/cot_exec_95rnzkos/main.py"", line 25, in hungarian_algorithm\n    min_uncovered = min([(i, j) for i, j in np.argwhere(cost_matrix == 0) if (i, j) not in covered])\nValueError: min() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22260403633117676}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[29, 63, 47, 4, 32, 30, 92], [91, 35, 46, 8, 65, 34, 77], [82, 32, 36, 23, 84, 43, 93], [91, 54, 9, 36, 75, 81, 55], [69, 17, 48, 77, 20, 86, 89], [12, 30, 65, 48, 23, 94, 74], [64, 22, 24, 85, 18, 68, 59]]"
902,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09339642524719238}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 9, 5, 24, 10, 9, 24, 8]"
903,mul,4,60354450,381,0,59989650,0,"{'ok': True, 'value': 60354450, 'stdout': '60354450\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09405684471130371}",1,Compute: 7410 * 8145
904,sub,4,2767,2767,1,2767,1,"{'ok': True, 'value': 2767, 'stdout': '2767\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08802199363708496}",1,Compute: 4242 - 1475
905,knap,4,23,26,0,24,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09897327423095703}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 6, 6, 3]
V = [8, 8, 7, 15]
C = 9"
906,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0940558910369873}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaa""
T = ""ccdb"""
907,mul,8,7631491915450760,7,0,7639990095994360,0,"{'ok': True, 'value': 7631491915450760, 'stdout': '7631491915450760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08650398254394531}",1,Compute: 96599860 * 79001066
908,sub,4,4542,4542,1,4542,1,"{'ok': True, 'value': 4542, 'stdout': '4542\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08885979652404785}",1,Compute: 8689 - 4147
909,sub,4,1780,1780,1,1780,1,"{'ok': True, 'value': 1780, 'stdout': '1780\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0905005931854248}",1,Compute: 8446 - 6666
910,knap,16,442,104,0,103,0,"{'ok': True, 'value': 442, 'stdout': '442\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09671568870544434}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 22, 1, 16, 1, 27, 17, 13, 7, 12, 11, 14, 19, 9, 6]
V = [48, 40, 10, 33, 47, 40, 13, 6, 33, 18, 12, 51, 23, 12, 52, 57]
C = 92"
911,ilp_prod,2,12,35,0,30,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_83bepccq/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24517250061035156}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 5]
consumption (rows=resources) = [[3, 3], [3, 1]]
capacity = [6, 7]
upper_bounds = [3, 3]"
912,lcs,8,4,5,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09790611267089844}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcaccdcb""
T = ""bcdcdac"""
913,ilp_assign,4,9,0,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8cb90yey/main.py"", line 29, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_8cb90yey/main.py"", line 21, in assignment_problem\n    C[row_covered == False, :][:, col_covered == False] = np.inf\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3305981159210205}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 4, 3, 10], [6, 12, 6, 1], [4, 10, 1, 4], [6, 1, 1, 11]]"
914,mul,8,3300145425611738,40354402,0,330063919539558,0,"{'ok': True, 'value': 3300145425611738, 'stdout': '3300145425611738\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0983433723449707}",1,Compute: 81779069 * 40354402
915,mul,4,48133540,22,0,47879140,0,"{'ok': True, 'value': 48133540, 'stdout': '48133540\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10855436325073242}",1,Compute: 6487 * 7420
916,sub,4,1669,1669,1,1669,1,"{'ok': True, 'value': 1669, 'stdout': '1669\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0862882137298584}",1,Compute: 8722 - 7053
917,rod,8,88,22,0,67,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.089019775390625}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [6, 22, 22, 3, 7, 1, 9, 18]"
918,mul,16,17869346996625281285002556770110,3320589677123422,0,17726947884053833466466336664606360,0,"{'ok': True, 'value': 17869346996625281285002556770110, 'stdout': '17869346996625281285002556770110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10546207427978516}",1,Compute: 5381377626911505 * 3320589677123422
919,mul,8,866815807308912,2086880,0,8680433699694016,0,"{'ok': True, 'value': 866815807308912, 'stdout': '866815807308912\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09227466583251953}",1,Compute: 52911864 * 16382258
920,ilp_assign,16,46,11,0,115,0,"{'ok': True, 'value': -121, 'stdout': '-121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2120826244354248}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[42, 8, 22, 27, 3, 44, 20], [26, 41, 30, 12, 33, 42, 26], [20, 36, 46, 13, 17, 4, 7], [37, 41, 44, 1, 16, 18, 6], [28, 29, 8, 24, 16, 41, 23], [17, 5, 25, 46, 2, 46, 11], [8, 17, 47, 27, 13, 30, 2]]"
921,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09574174880981445}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 17, 19, 17, 16, 3, 22, 9]"
922,sub,16,4726089986060416,4726090000060416,0,4726090000060416,0,"{'ok': True, 'value': 4726089986060416, 'stdout': '4726089986060416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09892487525939941}",1,Compute: 7588209672553568 - 2862119686493152
923,ilp_prod,16,139,148,0,106,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_7e58wkc9/main.py"", line 11, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\n  File ""/tmp/cot_exec_7e58wkc9/main.py"", line 11, in <listcomp>\n    x = [LpVariable(""x_%s"" % j, 0, ub) for j in range(len(profit))]\nNameError: name \'ub\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16513562202453613}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [29, 26, 39, 18, 23, 36]
consumption (rows=resources) = [[9, 4, 9, 11, 10, 16], [6, 9, 9, 15, 12, 11], [5, 12, 14, 6, 3, 6], [3, 8, 11, 3, 6, 10]]
capacity = [39, 58, 40, 49]
upper_bounds = [4, 3, 3, 3, 3, 3]"
924,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09862184524536133}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [54, 15, 64, 33, 72, 54, 2, 73, 57, 65, 41, 70, 91, 96, 6, 81, 84, 56, 5, 20, 58, 83, 11, 58]"
925,knap,8,81,103,0,14,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09013152122497559}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 11, 10, 8, 12, 2, 15, 10]
V = [6, 24, 28, 12, 10, 7, 14, 16]
C = 35"
926,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10052847862243652}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 23, 30, 17, 13, 28, 13, 4, 9, 2, 41, 18, 19, 25, 31, 12]"
927,add,2,76,76,1,76,1,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09403586387634277}",1,Compute: 20 + 56
928,sub,8,4367155,4367155,1,4367155,1,"{'ok': True, 'value': 4367155, 'stdout': '4367155\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08793258666992188}",1,Compute: 79862598 - 75495443
929,knap,16,486,107,0,1045,0,"{'ok': True, 'value': 486, 'stdout': '486\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10330080986022949}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 9, 4, 25, 30, 11, 3, 18, 29, 12, 6, 17, 12, 26, 19, 31]
V = [54, 64, 43, 50, 49, 32, 37, 7, 14, 33, 61, 33, 20, 19, 59, 9]
C = 132"
930,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10262537002563477}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 6, 4]"
931,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09727668762207031}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 20, 17, 20, 22, 18, 23, 15]"
932,mul,32,7134704628157734553455770093144039644099253674940884293468911532,718479166589898552273885029746654746232105357053629349441236226801664,0,71068604699383946475485995273944960964666346448397596349756465566666,0,"{'ok': True, 'value': 7134704628157734553455770093144039644099253674940884293468911532, 'stdout': '7134704628157734553455770093144039644099253674940884293468911532\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09413266181945801}",1,Compute: 72325542048895393519386935981884 * 98647095148410308720947327713573
933,mul,32,2018518113413408385371219988279500960827857470184417925314276372,"The answer to the multiplication of the two numbers is too large to fit in a standard integer data type and cannot be represented in a JSON integer format. Therefore, it is not possible to provide an integer answer in this context.",0,2021257178583338967258543945068246746393636546244622656242,0,"{'ok': True, 'value': 2018518113413408385371219988279500960827857470184417925314276372, 'stdout': '2018518113413408385371219988279500960827857470184417925314276372\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09630203247070312}",1,Compute: 83271252113137216827520147784931 * 24240275751719585670334850741212
934,ilp_prod,2,32,14,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_g4mfhjhp/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2079157829284668}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[3, 1], [2, 2]]
capacity = [9, 9]
upper_bounds = [3, 4]"
935,sub,4,511,511,1,511,1,"{'ok': True, 'value': 511, 'stdout': '511\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09084439277648926}",1,Compute: 8800 - 8289
936,ilp_prod,4,30,45,0,35,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_oe1bf55r/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, upper_bound=upper_bounds[j]) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16139912605285645}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 10, 8]
consumption (rows=resources) = [[1, 4, 2], [1, 4, 3], [2, 1, 2]]
capacity = [12, 8, 11]
upper_bounds = [5, 3, 3]"
937,mul,2,1007,1017,0,1017,0,"{'ok': True, 'value': 1007, 'stdout': '1007\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10051703453063965}",1,Compute: 19 * 53
938,lcs,32,18,10,0,16,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10651564598083496}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbaadbddbcddccadaddaccbcccbdbdc""
T = ""adbbdbbcbaddcddbbcbbadadbaaaabca"""
939,knap,4,15,15,1,19,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09950900077819824}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 4, 1]
V = [11, 4, 9, 4]
C = 6"
940,mul,4,43264848,126,0,43279328,0,"{'ok': True, 'value': 43264848, 'stdout': '43264848\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0966939926147461}",1,Compute: 8844 * 4892
941,lcs,32,19,12,0,15,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09749364852905273}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccaddcbdddcadbcdadccdabbaccacbab""
T = ""ddbcdcbcdbdcaabdcbadaddbcccddadd"""
942,ilp_partition,32,0,14,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08967947959899902}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [82, 74, 15, 39, 40, 35, 59, 39, 34, 67, 44, 81, 63, 4, 32, 8, 61, 72, 25, 52, 80, 49, 58, 29]"
943,ilp_partition,8,2,1,0,12,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09419083595275879}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 15, 19, 21, 6, 24, 15, 24]"
944,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10341286659240723}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daca""
T = ""abbba"""
945,knap,16,431,104,0,845,0,"{'ok': True, 'value': 431, 'stdout': '431\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0870058536529541}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [20, 29, 1, 6, 15, 21, 32, 22, 7, 22, 14, 2, 19, 13, 22, 3]
V = [64, 29, 29, 28, 17, 53, 21, 32, 49, 53, 19, 18, 39, 41, 4, 57]
C = 124"
946,rod,16,480,46,0,840,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11342358589172363}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 30, 33, 47, 10, 39, 40, 38, 11, 22, 35, 7, 1, 43, 22, 41]"
947,add,2,181,181,1,181,1,"{'ok': True, 'value': 181, 'stdout': '181\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08787298202514648}",1,Compute: 84 + 97
948,add,8,37925394,37925394,1,37925394,1,"{'ok': True, 'value': 37925394, 'stdout': '37925394\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09688448905944824}",1,Compute: 27356388 + 10569006
949,ilp_partition,16,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09656882286071777}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [39, 36, 16, 13, 25, 14, 25, 29, 18, 21, 25, 2, 13, 4, 6, 8]"
950,lcs,16,9,7,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1368091106414795}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccacbbadccdccac""
T = ""dbcccabdcadaddd"""
951,ilp_assign,16,63,105,0,110,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22069334983825684}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 34, 33, 11, 12, 46, 9], [42, 37, 30, 12, 22, 9, 26], [15, 45, 44, 13, 22, 48, 30], [17, 17, 1, 37, 33, 28, 32], [13, 22, 30, 28, 1, 43, 6], [20, 18, 7, 42, 48, 19, 23], [31, 24, 7, 29, 3, 21, 39]]"
952,knap,8,126,110,0,92,0,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09348130226135254}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 3, 3, 15, 6, 14, 8, 11]
V = [28, 32, 16, 23, 32, 1, 18, 14]
C = 35"
953,sub,4,1175,1175,1,1175,1,"{'ok': True, 'value': 1175, 'stdout': '1175\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08562970161437988}",1,Compute: 6459 - 5284
954,ilp_assign,32,161,339,0,117,0,"{'ok': True, 'value': 161, 'stdout': '161\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4057278633117676}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 35, 37, 7, 70, 90, 43], [72, 25, 52, 80, 94, 88, 9], [59, 58, 42, 79, 66, 78, 63], [83, 83, 79, 65, 47, 50, 41], [64, 70, 46, 17, 34, 12, 96], [48, 17, 34, 49, 73, 75, 24], [84, 55, 75, 32, 47, 43, 68]]"
955,sub,8,13625358,13625358,1,13625358,1,"{'ok': True, 'value': 13625358, 'stdout': '13625358\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09074544906616211}",1,Compute: 64311518 - 50686160
956,knap,32,1539,1000,0,1456,0,"{'ok': True, 'value': 1539, 'stdout': '1539\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09857940673828125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [39, 45, 56, 28, 27, 8, 42, 23, 26, 10, 45, 1, 48, 56, 52, 24, 31, 62, 17, 19, 20, 64, 1, 25, 34, 48, 38, 51, 28, 52, 53, 15]
V = [63, 26, 99, 71, 86, 99, 71, 65, 58, 39, 12, 77, 32, 110, 51, 127, 73, 91, 39, 65, 97, 19, 57, 10, 58, 81, 105, 73, 9, 56, 72, 42]
C = 544"
957,sub,2,31,31,1,31,1,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09668779373168945}",1,Compute: 72 - 41
958,mul,16,21804250504792655703344377126356,21890454348338429656543936,0,218443135081227146466663462266,0,"{'ok': True, 'value': 21804250504792655703344377126356, 'stdout': '21804250504792655703344377126356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10115480422973633}",1,Compute: 3141001185113979 * 6941815433922364
959,knap,32,1431,1043,0,1439,0,"{'ok': True, 'value': 1431, 'stdout': '1431\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10437679290771484}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 50, 61, 21, 2, 62, 26, 12, 53, 59, 29, 20, 4, 42, 24, 38, 21, 38, 7, 41, 38, 50, 8, 26, 28, 18, 1, 16, 44, 11, 34, 56]
V = [113, 64, 43, 9, 42, 62, 48, 70, 48, 82, 24, 11, 125, 106, 19, 91, 87, 5, 5, 31, 118, 116, 91, 20, 45, 109, 4, 28, 85, 30, 30, 39]
C = 475"
960,rod,32,2720,1755,0,508,0,"{'ok': True, 'value': 2720, 'stdout': '2720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09683871269226074}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [85, 31, 56, 83, 38, 80, 91, 79, 32, 48, 68, 24, 33, 81, 45, 50, 25, 27, 81, 18, 84, 23, 67, 32, 60, 68, 17, 94, 36, 46, 24, 70]"
961,ilp_assign,2,4,4,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_x803aa5t/main.py"", line 44, in <module>\n    res = assignment_problem(C)\n  File ""/tmp/cot_exec_x803aa5t/main.py"", line 16, in assignment_problem\n    zero_mat[1:-1, 1:-1] = C[row_cover, :]\nValueError: could not broadcast input array from shape (1,2) into shape (1,1)\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21402215957641602}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 4], [1, 2]]"
962,ilp_partition,8,1,0,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0897684097290039}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 17, 3, 21, 8, 17, 19, 19]"
963,ilp_assign,2,8,8,1,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20960068702697754}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [6, 4]]"
964,ilp_assign,16,64,3,0,113,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6881945133209229}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 14, 42, 26, 20, 14, 23], [8, 28, 39, 20, 5, 16, 29], [23, 36, 34, 48, 30, 12, 38], [2, 38, 23, 45, 31, 22, 30], [31, 27, 36, 40, 29, 8, 3], [25, 28, 13, 28, 8, 31, 35], [28, 37, 24, 15, 12, 24, 35]]"
965,ilp_prod,8,126,107,0,117,0,"{'ok': True, 'value': 126, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3d0565941fb947fe91168960492c8483-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3d0565941fb947fe91168960492c8483-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 131.714 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -126 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -131.71429 to -131.71429 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -126, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -131.714 to -131.714\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                126.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n126.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1976621150970459}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 13, 12, 18]
consumption (rows=resources) = [[7, 7, 8, 2], [2, 6, 2, 1], [1, 8, 3, 3], [6, 4, 2, 2]]
capacity = [16, 19, 22, 20]
upper_bounds = [3, 3, 3, 7]"
966,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09026288986206055}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""db"""
967,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09949731826782227}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 2, 6]"
968,rod,4,20,10,0,25,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09432148933410645}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 5, 5, 10]"
969,ilp_assign,4,8,16,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.050124406814575}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 2, 1, 3], [11, 5, 12, 1], [5, 1, 11, 7], [5, 7, 12, 4]]"
970,rod,32,992,545,0,320,0,"{'ok': True, 'value': 992, 'stdout': '992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08857917785644531}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [31, 32, 41, 5, 92, 96, 18, 58, 8, 42, 15, 17, 25, 29, 73, 20, 72, 7, 2, 27, 76, 54, 54, 37, 5, 4, 49, 59, 44, 82, 51, 57]"
971,ilp_prod,2,63,42,0,63,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_d6et42zv/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", range(len(profit)), 0, None)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1584620475769043}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[1, 2], [1, 3]]
capacity = [9, 10]
upper_bounds = [9, 3]"
972,ilp_assign,2,4,3,0,4,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2172088623046875}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 5], [5, 1]]"
973,knap,32,1789,-1,0,1043,0,"{'ok': True, 'value': 1789, 'stdout': '1789\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10585856437683105}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 60, 41, 26, 62, 37, 30, 1, 33, 26, 64, 12, 38, 20, 49, 6, 30, 1, 48, 50, 44, 9, 10, 9, 55, 47, 14, 55, 60, 6, 14, 29]
V = [13, 41, 90, 78, 29, 64, 111, 42, 122, 15, 39, 97, 10, 23, 19, 90, 69, 91, 126, 105, 82, 128, 28, 126, 56, 128, 12, 60, 127, 47, 22, 80]
C = 508"
974,ilp_assign,8,35,11,0,11,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38751935958862305}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 5, 9, 22, 23, 1, 11], [20, 12, 13, 6, 9, 20, 13], [12, 17, 4, 19, 10, 24, 24], [10, 14, 21, 24, 9, 7, 24], [4, 20, 18, 9, 11, 24, 7], [1, 9, 22, 2, 2, 1, 23], [6, 16, 12, 6, 5, 5, 20]]"
975,sub,8,65064688,65064688,1,65064688,1,"{'ok': True, 'value': 65064688, 'stdout': '65064688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08973336219787598}",1,Compute: 80303790 - 15239102
976,sub,4,2873,2873,1,2873,1,"{'ok': True, 'value': 2873, 'stdout': '2873\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10185694694519043}",1,Compute: 5872 - 2999
977,rod,4,44,15,0,16,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09495663642883301}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 7, 5, 10]"
978,mul,2,1792,1792,1,1792,1,"{'ok': True, 'value': 1792, 'stdout': '1792\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09347343444824219}",1,Compute: 56 * 32
979,rod,32,1888,1055,0,321,0,"{'ok': True, 'value': 1888, 'stdout': '1888\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08494114875793457}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [59, 2, 75, 80, 90, 51, 18, 6, 70, 62, 71, 38, 93, 40, 54, 83, 71, 64, 64, 12, 40, 80, 41, 26, 90, 31, 78, 75, 27, 43, 57, 17]"
980,sub,16,3466364531918638,3466364531918638,1,3466364531918638,1,"{'ok': True, 'value': 3466364531918638, 'stdout': '3466364531918638\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11030983924865723}",1,Compute: 5839850180875131 - 2373485648956493
981,ilp_assign,8,43,-1,0,115,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__hjsirgm/main.py"", line 46, in <module>\n    res = hungarian_algorithm(C)\n  File ""/tmp/cot_exec__hjsirgm/main.py"", line 4, in hungarian_algorithm\n    cost_matrix[i] = [x - np.min(cost_matrix[i]) for x in cost_matrix[i]]\n  File ""/tmp/cot_exec__hjsirgm/main.py"", line 4, in <listcomp>\n    cost_matrix[i] = [x - np.min(cost_matrix[i]) for x in cost_matrix[i]]\nNameError: name \'np\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0948631763458252}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 5, 17, 8, 23, 21, 24], [1, 2, 6, 22, 23, 10, 13], [16, 1, 6, 10, 13, 10, 10], [9, 5, 14, 10, 5, 6, 12], [18, 7, 12, 13, 14, 17, 20], [19, 20, 18, 1, 20, 16, 8], [2, 17, 21, 23, 8, 11, 24]]"
982,knap,4,24,17,0,5,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09686064720153809}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 2, 3, 6]
V = [5, 14, 7, 10]
C = 8"
983,add,32,155786390501981025872443290733664,177471845501570975872443286733664,0,155786380502081025872443290733664,0,"{'ok': True, 'value': 155786390501981025872443290733664, 'stdout': '155786390501981025872443290733664\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09665751457214355}",1,Compute: 88730340525685539652872916486456 + 67056049976295486219570374247208
984,ilp_prod,2,36,56,0,45,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_unkpka81/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""Quantity"", (range(len(profit)), range(len(profit[0]))), lowBound=0, cat=\'Continuous\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16332125663757324}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[1, 1], [1, 2]]
capacity = [10, 9]
upper_bounds = [9, 4]"
985,mul,32,1554020926058746091395667057883474244946004662693908503061674111,1562438459897768783796578414566466549641,0,15633842154345785646958898623457849455636654954441,0,"{'ok': True, 'value': 1554020926058746091395667057883474244946004662693908503061674111, 'stdout': '1554020926058746091395667057883474244946004662693908503061674111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09207653999328613}",1,Compute: 42336202109459636209014753781393 * 36706668256185274664662572160527
986,add,32,176322594851173550240201732091254,32579105658864339917378690979,0,176322594851173549940201732091254,0,"{'ok': True, 'value': 176322594851173550240201732091254, 'stdout': '176322594851173550240201732091254\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09109354019165039}",1,Compute: 96759611180858864339917378690979 + 79562983670314685900284353400275
987,sub,4,1633,1633,1,1633,1,"{'ok': True, 'value': 1633, 'stdout': '1633\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08446741104125977}",1,Compute: 3792 - 2159
988,mul,8,1766066750162234,17585318535844,0,1760392906955654,0,"{'ok': True, 'value': 1766066750162234, 'stdout': '1766066750162234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09331727027893066}",1,Compute: 68118154 * 25926521
989,rod,4,18,14,0,14,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10097551345825195}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 9, 5, 5]"
990,add,32,96795508419504438393210397693448,96795508419504438393210397693448,1,96795508429504438393210397693448,0,"{'ok': True, 'value': 96795508419504438393210397693448, 'stdout': '96795508419504438393210397693448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09834551811218262}",1,Compute: 52086391603232855156117359680409 + 44709116816271583237093038013039
991,ilp_partition,8,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11011147499084473}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 16, 7, 6, 15, 12, 15, 23]"
992,mul,16,24512606725205492965147866504496,2345678901234567890123456789012345678901234567890,0,244938852169865655945966648324352,0,"{'ok': True, 'value': 24512606725205492965147866504496, 'stdout': '24512606725205492965147866504496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0960378646850586}",1,Compute: 3747389685293456 * 6541248384550091
993,ilp_assign,16,80,105,0,116,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3994407653808594}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 7, 30, 11, 31, 10, 26], [48, 6, 28, 44, 43, 16, 31], [48, 36, 45, 35, 28, 10, 12], [42, 28, 38, 34, 1, 43, 34], [47, 44, 35, 32, 3, 21, 2], [33, 35, 35, 48, 1, 30, 13], [32, 28, 17, 16, 3, 45, 33]]"
994,lcs,8,6,5,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08795857429504395}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdddbbd""
T = ""cbddbbad"""
995,ilp_assign,16,75,105,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tb6nxpzs/main.py"", line 12, in <module>\n    res = hungarian_algorithm(C)\n  File ""/tmp/cot_exec_tb6nxpzs/main.py"", line 9, in hungarian_algorithm\n    return int(min(min(zeros)))\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21813297271728516}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[33, 41, 44, 2, 24, 41, 19], [22, 22, 25, 47, 15, 38, 6], [26, 18, 17, 32, 28, 8, 48], [22, 37, 20, 36, 11, 39, 41], [44, 29, 44, 33, 42, 19, 14], [22, 8, 14, 30, 16, 17, 9], [33, 4, 22, 4, 17, 9, 48]]"
996,sub,4,1481,1481,1,1481,1,"{'ok': True, 'value': 1481, 'stdout': '1481\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08787345886230469}",1,Compute: 8753 - 7272
997,add,8,64970105,64970105,1,64970105,1,"{'ok': True, 'value': 64970105, 'stdout': '64970105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12287616729736328}",1,Compute: 29949151 + 35020954
998,mul,2,952,272,0,952,1,"{'ok': True, 'value': 952, 'stdout': '952\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08783674240112305}",1,Compute: 17 * 56
999,knap,8,98,100,0,60,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10058116912841797}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 11, 10, 8, 5, 3, 3, 14]
V = [10, 11, 10, 27, 31, 24, 5, 28]
C = 29"
