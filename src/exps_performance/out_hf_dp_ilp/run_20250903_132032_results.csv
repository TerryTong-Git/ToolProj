idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,ilp_prod,4,40,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_vlwiye05/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, cat=\'Integer\')\n                                        ^^^^^^\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.4840819835662842}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 11, 9]
consumption (rows=resources) = [[2, 3, 3], [4, 4, 1], [4, 2, 4]]
capacity = [14, 10, 13]
upper_bounds = [3, 3, 3]"
1,knap,2,8,42,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11122441291809082}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 4]
V = [4, 2, 8]
C = 6"
2,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09792923927307129}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbda""
T = ""bddbc"""
3,rod,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10326504707336426}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
4,ilp_assign,2,2,2,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_qifqs5n7/main.py"", line 8\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10547566413879395}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3], [1, 1]]"
5,ilp_partition,6,0,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_t79ru72y/main.py"", line 11, in <module>\n    model += abs(sum([weights[i] * x[i] for i in range(num_items)]) - sum([weights[i] * (1 - x[i]) for i in range(num_items)]))\n             ~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: bad operand type for abs(): \'LpAffineExpression\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.29593396186828613}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 8, 1, 13, 5, 2]"
6,ilp_partition,4,1,1,1,4,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4947643280029297}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 8, 1, 5]"
7,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1175534725189209}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""ad"""
8,lcs,6,2,4,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2949337959289551}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbbab""
T = ""bdccdca"""
9,knap,4,20,42,0,22,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 2.2230758666992188}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 8, 5]
V = [1, 14, 4, 6]
C = 10"
