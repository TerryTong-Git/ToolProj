idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,ilp_prod,12,110,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 24, 20, 3, 35, 23]
consumption (rows=resources) = [[2, 6, 11, 12, 3, 10], [5, 7, 2, 11, 10, 10], [12, 9, 8, 10, 7, 9], [7, 5, 4, 11, 5, 9]]
capacity = [28, 25, 43, 40]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1,ilp_assign,4,17,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5, 11, 2], [7, 9, 6, 11], [9, 8, 9, 4], [2, 12, 1, 2]]"
2,ilp_prod,8,78,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 3, 24, 15]
consumption (rows=resources) = [[7, 7, 6, 2], [8, 4, 5, 1], [7, 3, 7, 5], [3, 2, 1, 6]]
capacity = [24, 29, 25, 20]
upper_bounds = [3, 3, 3, 3]"
3,ilp_prod,4,27,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_b2rlfgyz/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, upBound=upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n           ~~~~~~~~~~^\n        name % tuple(indexStart + [str(i)]), lowBound, upBound, cat\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.5460779666900635}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 9, 3]
consumption (rows=resources) = [[2, 1, 4], [2, 1, 2], [4, 4, 2]]
capacity = [16, 15, 11]
upper_bounds = [3, 3, 4]"
4,ilp_prod,4,40,42,0,58,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_l7dnifgl/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, upBound=upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n           ~~~~~~~~~~^\n        name % tuple(indexStart + [str(i)]), lowBound, upBound, cat\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18440532684326172}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 10, 10]
consumption (rows=resources) = [[1, 1, 3], [4, 3, 4], [2, 3, 1]]
capacity = [12, 16, 11]
upper_bounds = [4, 3, 4]"
5,ilp_assign,8,47,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 15, 12, 10, 13, 8, 4], [23, 7, 23, 22, 10, 3, 4], [8, 13, 11, 16, 4, 6, 2], [2, 20, 1, 7, 22, 2, 16], [23, 17, 24, 20, 15, 11, 22], [9, 4, 20, 23, 6, 4, 8], [13, 8, 16, 15, 13, 6, 8]]"
6,ilp_partition,4,3,11,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 9, 2, 6]"
7,rod,4,16,42,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_xupn8ddl/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19896936416625977}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 8, 6, 10]"
8,ilp_prod,12,146,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 22, 20, 34, 16, 34]
consumption (rows=resources) = [[6, 10, 8, 4, 6, 3], [10, 3, 12, 10, 12, 8], [9, 3, 1, 9, 6, 9], [12, 3, 11, 4, 6, 10]]
capacity = [39, 39, 34, 27]
upper_bounds = [3, 3, 3, 3, 3, 3]"
9,ilp_prod,4,84,42,0,62,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_j55kebkx/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, upBound=upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n           ~~~~~~~~~~^\n        name % tuple(indexStart + [str(i)]), lowBound, upBound, cat\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.543529748916626}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 8, 10]
consumption (rows=resources) = [[1, 2, 2], [2, 1, 3], [1, 1, 1]]
capacity = [8, 15, 8]
upper_bounds = [7, 4, 4]"
10,ilp_partition,4,3,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 12, 8, 3]"
11,knap,4,16,42,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 7, 3, 3]
V = [8, 1, 7, 8]
C = 9"
12,knap,8,75,42,0,42,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2b08113d21994d5fba6204e406e9eb59-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2b08113d21994d5fba6204e406e9eb59-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 39 RHS\nAt line 41 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 1 rows, 8 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 80 - 0.00 seconds\nCgl0004I processed model has 1 rows, 8 columns (8 integer (8 of which binary)) and 8 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 1 integers unsatisfied sum - 0.4\nCbc0038I Pass   1: suminf.    0.20000 (1) obj. -80 iterations 1\nCbc0038I Solution found of -64\nCbc0038I Rounding solution of -67 is better than previous of -64\n\nCbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 8 columns, reduced to 1 rows 2 columns\nCbc0038I Mini branch and bound improved solution from -67 to -74 (0.00 seconds)\nCbc0038I Round again with cutoff of -75.4999\nCbc0038I Reduced cost fixing fixed 3 variables on major pass 2\nCbc0038I Pass   2: suminf.    0.20000 (1) obj. -80 iterations 0\nCbc0038I Pass   3: suminf.    0.45239 (1) obj. -75.4999 iterations 2\nCbc0038I Pass   4: suminf.    0.27273 (1) obj. -79.2727 iterations 1\nCbc0038I Pass   5: suminf.    0.20000 (1) obj. -80 iterations 1\nCbc0038I Pass   6: suminf.    0.20000 (1) obj. -80 iterations 0\nCbc0038I Pass   7: suminf.    0.16666 (1) obj. -75.4999 iterations 3\nCbc0038I Pass   8: suminf.    0.18182 (1) obj. -75.8182 iterations 1\nCbc0038I Pass   9: suminf.    0.16666 (1) obj. -75.4999 iterations 1\nCbc0038I Pass  10: suminf.    0.20000 (1) obj. -80 iterations 3\nCbc0038I Pass  11: suminf.    0.26190 (1) obj. -75.4999 iterations 3\nCbc0038I Pass  12: suminf.    0.36364 (1) obj. -77.6364 iterations 1\nCbc0038I Pass  13: suminf.    0.26190 (1) obj. -75.4999 iterations 1\nCbc0038I Pass  14: suminf.    0.20000 (1) obj. -80 iterations 3\nCbc0038I Pass  15: suminf.    0.45239 (1) obj. -75.4999 iterations 2\nCbc0038I Pass  16: suminf.    0.27273 (1) obj. -79.2727 iterations 1\nCbc0038I Pass  17: suminf.    0.22500 (1) obj. -75.4999 iterations 3\nCbc0038I Pass  18: suminf.    0.22500 (1) obj. -75.4999 iterations 0\nCbc0038I Pass  19: suminf.    0.22500 (1) obj. -75.4999 iterations 0\nCbc0038I Pass  20: suminf.    0.27273 (1) obj. -79.2727 iterations 3\nCbc0038I Pass  21: suminf.    0.02500 (1) obj. -75.4999 iterations 3\nCbc0038I Pass  22: suminf.    0.27273 (1) obj. -79.7273 iterations 2\nCbc0038I Pass  23: suminf.    0.07142 (1) obj. -75.4999 iterations 1\nCbc0038I Pass  24: suminf.    0.26191 (1) obj. -75.4999 iterations 1\nCbc0038I Pass  25: suminf.    0.18182 (1) obj. -77.1818 iterations 1\nCbc0038I Pass  26: suminf.    0.26191 (1) obj. -75.4999 iterations 1\nCbc0038I Pass  27: suminf.    0.42501 (2) obj. -75.4999 iterations 2\nCbc0038I Pass  28: suminf.    0.02500 (1) obj. -75.4999 iterations 2\nCbc0038I Pass  29: suminf.    0.02500 (1) obj. -75.4999 iterations 0\nCbc0038I Pass  30: suminf.    0.02500 (1) obj. -75.4999 iterations 0\nCbc0038I Pass  31: suminf.    0.02500 (1) obj. -75.4999 iterations 0\nCbc0038I Rounding solution of -75 is better than previous of -74\n\nCbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 8 columns, reduced to 1 rows 5 columns\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I Round again with cutoff of -76.7999\nCbc0038I Reduced cost fixing fixed 4 variables on major pass 3\nCbc0038I Pass  31: suminf.    0.20000 (1) obj. -80 iterations 0\nCbc0038I Pass  32: suminf.    0.39048 (1) obj. -76.7999 iterations 2\nCbc0038I Pass  33: suminf.    0.27273 (1) obj. -79.2727 iterations 1\nCbc0038I Pass  34: suminf.    0.09000 (1) obj. -76.7999 iterations 3\nCbc0038I Pass  35: suminf.    0.27273 (1) obj. -79.7273 iterations 2\nCbc0038I Pass  36: suminf.    0.13333 (1) obj. -76.7999 iterations 1\nCbc0038I Pass  37: suminf.    0.13333 (1) obj. -76.7999 iterations 0\nCbc0038I Pass  38: suminf.    0.13333 (1) obj. -76.7999 iterations 0\nCbc0038I Pass  39: suminf.    0.13333 (1) obj. -76.7999 iterations 0\nCbc0038I Pass  40: suminf.    0.13333 (1) obj. -76.7999 iterations 0\nCbc0038I Pass  41: suminf.    0.13333 (1) obj. -76.7999 iterations 0\nCbc0038I Pass  42: suminf.    0.13333 (1) obj. -76.7999 iterations 0\nCbc0038I Pass  43: suminf.    0.20000 (1) obj. -76.7999 iterations 1\nCbc0038I Pass  44: suminf.    0.18182 (1) obj. -77.1818 iterations 1\nCbc0038I Pass  45: suminf.    0.20000 (1) obj. -76.7999 iterations 1\nCbc0038I Pass  46: suminf.    0.09000 (1) obj. -76.7999 iterations 2\nCbc0038I Pass  47: suminf.    0.09000 (1) obj. -76.7999 iterations 0\nCbc0038I Pass  48: suminf.    0.27273 (1) obj. -79.7273 iterations 2\nCbc0038I Pass  49: suminf.    0.13333 (1) obj. -76.7999 iterations 1\nCbc0038I Pass  50: suminf.    0.13333 (1) obj. -76.7999 iterations 0\nCbc0038I Pass  51: suminf.    0.39048 (1) obj. -76.7999 iterations 3\nCbc0038I Pass  52: suminf.    0.27273 (1) obj. -79.2727 iterations 1\nCbc0038I Pass  53: suminf.    0.39048 (1) obj. -76.7999 iterations 1\nCbc0038I Pass  54: suminf.    0.39048 (1) obj. -76.7999 iterations 0\nCbc0038I Pass  55: suminf.    0.39048 (1) obj. -76.7999 iterations 0\nCbc0038I Pass  56: suminf.    0.13333 (1) obj. -76.7999 iterations 3\nCbc0038I Pass  57: suminf.    0.09000 (1) obj. -76.7999 iterations 1\nCbc0038I Pass  58: suminf.    0.09000 (1) obj. -76.7999 iterations 0\nCbc0038I Pass  59: suminf.    0.27273 (1) obj. -79.7273 iterations 2\nCbc0038I Pass  60: suminf.    0.13333 (1) obj. -76.7999 iterations 1\nCbc0038I No solution found this major pass\nCbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 8 columns, reduced to 1 rows 4 columns\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -75 - took 0.00 seconds\nCbc0012I Integer solution of -75 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 1 rows 8 columns, reduced to 1 rows 3 columns\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -80 to -80 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -75, took 0 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 3 variables fixed on reduced cost\nCuts at root node changed objective from -80 to -80\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                75.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n75.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5521800518035889}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 5, 5, 11, 10, 4, 10, 5]
V = [14, 10, 3, 21, 14, 12, 20, 28]
C = 28"
13,ilp_partition,8,1,42,0,4,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4b44c384910840ecb5a23c94c094e6de-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/4b44c384910840ecb5a23c94c094e6de-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 5 COLUMNS\nAt line 7 RHS\nAt line 8 BOUNDS\nAt line 10 ENDATA\nProblem MODEL has 0 rows, 1 columns and 0 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nEmpty problem - 0 rows, 1 columns and 0 elements\nOptimal - objective value 0\nOptimal objective 0 - 0 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py:1872: UserWarning: Overwriting previously set objective.\n  warnings.warn(""Overwriting previously set objective."")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_sxeh7azv/main.py"", line 15, in <module>\n    print(int(value(model.objective)))\n          ~~~^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: int() argument must be a string, a bytes-like object or a real number, not \'NoneType\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18573546409606934}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 24, 17, 9, 3, 9, 11, 3]"
14,rod,4,36,42,0,42,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11950802803039551}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 4, 9, 7]"
15,ilp_partition,12,0,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8gb8ktx4/main.py"", line 12, in <module>\n    model += abs(total_weight_left - total_weight_right)\n             ~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: bad operand type for abs(): \'LpAffineExpression\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3023254871368408}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 29, 17, 4, 4, 21, 11, 9, 7, 8, 28, 16]"
16,knap,8,106,42,0,58,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/121c4fb7ff9a4a5ca81867676b05dccb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/121c4fb7ff9a4a5ca81867676b05dccb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 39 RHS\nAt line 41 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 1 rows, 8 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 107.769 - 0.00 seconds\nCgl0004I processed model has 1 rows, 8 columns (8 integer (8 of which binary)) and 8 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 1 integers unsatisfied sum - 0.0769231\nCbc0038I Solution found of -106\nCbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 8 columns, reduced to 0 rows 0 columns\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I Round again with cutoff of -107.077\nCbc0038I Reduced cost fixing fixed 7 variables on major pass 2\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -106 - took 0.00 seconds\nCbc0012I Integer solution of -106 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -106, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 7 variables fixed on reduced cost\nCuts at root node changed objective from -107.769 to -106\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                106.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n106.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21703076362609863}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 3, 9, 3, 3, 1, 1, 10]
V = [23, 32, 31, 10, 7, 21, 5, 12]
C = 21"
17,ilp_partition,12,0,42,0,4,0,"{'ok': True, 'value': -262, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a3e62733ef0a440098de8f44278c3463-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/a3e62733ef0a440098de8f44278c3463-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 55 RHS\nAt line 57 BOUNDS\nAt line 70 ENDATA\nProblem MODEL has 1 rows, 12 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 0 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n-262\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.31144213676452637}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 25, 31, 35, 15, 18, 3, 11, 36, 33, 15, 27]"
18,ilp_prod,8,104,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 20, 16, 6]
consumption (rows=resources) = [[5, 5, 4, 7], [1, 4, 8, 1], [1, 4, 5, 4], [3, 5, 3, 4]]
capacity = [24, 25, 24, 30]
upper_bounds = [4, 4, 3, 3]"
19,ilp_partition,8,0,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xrh6g9vg/main.py"", line 12, in <module>\n    model += abs(total_weight_left - total_weight_right)\n             ~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: bad operand type for abs(): \'LpAffineExpression\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.31803369522094727}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 7, 14, 2, 2, 21, 3]"
20,ilp_assign,8,33,42,0,21,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2, 9, 4, 14, 3, 7], [1, 16, 21, 5, 24, 9, 22], [7, 22, 15, 13, 11, 21, 9], [9, 21, 21, 8, 8, 2, 19], [19, 6, 12, 14, 20, 23, 18], [21, 17, 2, 12, 18, 14, 18], [7, 23, 18, 14, 22, 3, 23]]"
21,ilp_prod,8,74,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6, 17, 17]
consumption (rows=resources) = [[6, 5, 7, 6], [8, 2, 7, 7], [4, 1, 5, 4], [8, 7, 5, 3]]
capacity = [30, 32, 22, 27]
upper_bounds = [3, 3, 4, 4]"
22,lcs,4,2,3,0,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_49b_x22m/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19991397857666016}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcad""
T = ""abcac"""
23,lcs,8,5,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_2scbxs55/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1197359561920166}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adabbcda""
T = ""adadcdccd"""
24,ilp_assign,12,68,42,0,36,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 3, 34, 13, 33, 35, 5], [16, 26, 30, 8, 4, 25, 6], [36, 7, 31, 3, 34, 16, 1], [2, 20, 30, 18, 27, 11, 9], [36, 21, 35, 29, 33, 27, 36], [11, 26, 25, 13, 32, 18, 24], [10, 17, 18, 12, 6, 24, 22]]"
25,lcs,12,8,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadccbcacdda""
T = ""aaaacccacadad"""
26,lcs,8,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_rdgov1fm/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22647881507873535}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbdbadb""
T = ""bbaddccdc"""
27,rod,4,36,42,0,42,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1141660213470459}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 9, 4, 7]"
28,knap,8,104,42,0,75,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4b7756a2c59b4de0904e2b6e24c6e3fe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4b7756a2c59b4de0904e2b6e24c6e3fe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 39 RHS\nAt line 41 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 1 rows, 8 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 109.462 - 0.00 seconds\nCgl0004I processed model has 1 rows, 8 columns (8 integer (8 of which binary)) and 8 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 1 integers unsatisfied sum - 0.230769\nCbc0038I Pass   1: suminf.    0.23077 (1) obj. -109.462 iterations 0\nCbc0038I Solution found of -91\nCbc0038I Rounding solution of -93 is better than previous of -91\n\nCbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I Round again with cutoff of -95.5461\nCbc0038I Reduced cost fixing fixed 1 variables on major pass 2\nCbc0038I Pass   2: suminf.    0.23077 (1) obj. -109.462 iterations 0\nCbc0038I Pass   3: suminf.    0.18942 (1) obj. -95.5461 iterations 1\nCbc0038I Pass   4: suminf.    0.18942 (1) obj. -95.5461 iterations 0\nCbc0038I Pass   5: suminf.    0.18942 (1) obj. -95.5461 iterations 0\nCbc0038I Pass   6: suminf.    0.18942 (1) obj. -95.5461 iterations 0\nCbc0038I Pass   7: suminf.    0.23077 (1) obj. -109.462 iterations 1\nCbc0038I Pass   8: suminf.    0.00000 (0) obj. -103 iterations 1\nCbc0038I Solution found of -103\nCbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 8 columns, reduced to 0 rows 0 columns\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I Round again with cutoff of -105.092\nCbc0038I Reduced cost fixing fixed 5 variables on major pass 3\nCbc0038I Pass   9: suminf.    0.23077 (1) obj. -109.462 iterations 0\nCbc0038I Pass  10: suminf.    0.41282 (1) obj. -105.092 iterations 1\nCbc0038I Pass  11: suminf.    0.23077 (1) obj. -109.462 iterations 1\nCbc0038I Pass  12: suminf.    0.41282 (1) obj. -105.092 iterations 1\nCbc0038I Pass  13: suminf.    0.23077 (1) obj. -109.462 iterations 1\nCbc0038I Pass  14: suminf.    0.28092 (2) obj. -105.092 iterations 3\nCbc0038I Pass  15: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  16: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  17: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  18: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  19: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  20: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  21: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  22: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  23: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  24: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  25: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  26: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  27: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  28: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  29: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  30: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  31: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  32: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  33: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  34: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  35: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  36: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  37: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I Pass  38: suminf.    0.28092 (2) obj. -105.092 iterations 0\nCbc0038I No solution found this major pass\nCbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 8 columns, reduced to 0 rows 0 columns\nCbc0038I Mini branch and bound improved solution from -103 to -104 (0.00 seconds)\nCbc0038I Round again with cutoff of -106.403\nCbc0038I Reduced cost fixing fixed 6 variables on major pass 4\nCbc0038I Pass  38: suminf.    0.23077 (1) obj. -109.462 iterations 0\nCbc0038I Pass  39: suminf.    0.35821 (1) obj. -106.403 iterations 1\nCbc0038I Pass  40: suminf.    0.35821 (1) obj. -106.403 iterations 0\nCbc0038I Pass  41: suminf.    0.35821 (1) obj. -106.403 iterations 0\nCbc0038I Pass  42: suminf.    0.10013 (1) obj. -106.403 iterations 1\nCbc0038I Pass  43: suminf.    0.15385 (1) obj. -107.692 iterations 1\nCbc0038I Pass  44: suminf.    0.10013 (1) obj. -106.403 iterations 1\nCbc0038I Pass  45: suminf.    0.35821 (1) obj. -106.403 iterations 1\nCbc0038I Pass  46: suminf.    0.35821 (1) obj. -106.403 iterations 0\nCbc0038I Pass  47: suminf.    0.35821 (1) obj. -106.403 iterations 0\nCbc0038I Pass  48: suminf.    0.10013 (1) obj. -106.403 iterations 1\nCbc0038I Pass  49: suminf.    0.10013 (1) obj. -106.403 iterations 0\nCbc0038I Pass  50: suminf.    0.10013 (1) obj. -106.403 iterations 0\nCbc0038I Pass  51: suminf.    0.10013 (1) obj. -106.403 iterations 0\nCbc0038I Pass  52: suminf.    0.35821 (1) obj. -106.403 iterations 1\nCbc0038I Pass  53: suminf.    0.23077 (1) obj. -109.462 iterations 1\nCbc0038I Pass  54: suminf.    0.23077 (1) obj. -109.462 iterations 0\nCbc0038I Pass  55: suminf.    0.15385 (1) obj. -107.692 iterations 1\nCbc0038I Pass  56: suminf.    0.10013 (1) obj. -106.403 iterations 1\nCbc0038I Pass  57: suminf.    0.10013 (1) obj. -106.403 iterations 0\nCbc0038I Pass  58: suminf.    0.10013 (1) obj. -106.403 iterations 0\nCbc0038I Pass  59: suminf.    0.10013 (1) obj. -106.403 iterations 0\nCbc0038I Pass  60: suminf.    0.10013 (1) obj. -106.403 iterations 0\nCbc0038I Pass  61: suminf.    0.10013 (1) obj. -106.403 iterations 0\nCbc0038I Pass  62: suminf.    0.35821 (1) obj. -106.403 iterations 1\nCbc0038I Pass  63: suminf.    0.23077 (1) obj. -109.462 iterations 1\nCbc0038I Pass  64: suminf.    0.35821 (1) obj. -106.403 iterations 1\nCbc0038I Pass  65: suminf.    0.35821 (1) obj. -106.403 iterations 0\nCbc0038I Pass  66: suminf.    0.23077 (1) obj. -109.462 iterations 1\nCbc0038I Pass  67: suminf.    0.35821 (1) obj. -106.403 iterations 1\nCbc0038I No solution found this major pass\nCbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -104 - took 0.00 seconds\nCbc0012I Integer solution of -104 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -105.33333 to -105.33333 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -104, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 6 variables fixed on reduced cost\nCuts at root node changed objective from -109.462 to -105.333\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                104.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n104.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4984598159790039}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 8, 16, 12, 11, 13, 3, 7]
V = [12, 13, 20, 28, 31, 24, 2, 32]
C = 40"
29,rod,8,120,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_dtx8mi3a/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.12367057800292969}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 20, 3, 4, 20, 17, 19, 13]"
30,knap,4,27,42,0,30,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1bf3d6f6d3a74fd0866f4acd50e00fbe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1bf3d6f6d3a74fd0866f4acd50e00fbe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 23 RHS\nAt line 25 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 1 rows, 4 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 32.1429 - 0.00 seconds\nCgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions\nCgl0003I 0 fixed, 1 tightened bounds, 0 strengthened rows, 0 substitutions\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -27 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                27.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n27.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.49106550216674805}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 7, 7, 3]
V = [12, 12, 3, 15]
C = 10"
31,knap,12,282,180,0,150,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/273db503d1a347beba4432c114bfaf90-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/273db503d1a347beba4432c114bfaf90-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 55 RHS\nAt line 57 BOUNDS\nAt line 70 ENDATA\nProblem MODEL has 1 rows, 12 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 288.462 - 0.00 seconds\nCgl0004I processed model has 1 rows, 12 columns (12 integer (12 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 1 integers unsatisfied sum - 0.230769\nCbc0038I Solution found of -282\nCbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 12 columns, reduced to 0 rows 0 columns\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I Round again with cutoff of -283.546\nCbc0038I Reduced cost fixing fixed 8 variables on major pass 2\nCbc0038I Pass   1: suminf.    0.05522 (1) obj. -283.546 iterations 1\nCbc0038I Pass   2: suminf.    0.50000 (1) obj. -288 iterations 2\nCbc0038I Pass   3: suminf.    0.39877 (1) obj. -283.546 iterations 1\nCbc0038I Pass   4: suminf.    0.38479 (1) obj. -283.546 iterations 1\nCbc0038I Pass   5: suminf.    0.38479 (1) obj. -283.546 iterations 0\nCbc0038I Pass   6: suminf.    0.38479 (1) obj. -283.546 iterations 0\nCbc0038I Pass   7: suminf.    0.30522 (1) obj. -283.546 iterations 3\nCbc0038I Pass   8: suminf.    0.30522 (1) obj. -283.546 iterations 0\nCbc0038I Pass   9: suminf.    0.52570 (2) obj. -283.546 iterations 3\nCbc0038I Pass  10: suminf.    0.30522 (1) obj. -283.546 iterations 2\nCbc0038I Pass  11: suminf.    0.52570 (2) obj. -283.546 iterations 3\nCbc0038I Pass  12: suminf.    0.39877 (1) obj. -283.546 iterations 2\nCbc0038I Pass  13: suminf.    0.50000 (1) obj. -288 iterations 1\nCbc0038I Pass  14: suminf.    0.38479 (1) obj. -283.546 iterations 2\nCbc0038I Pass  15: suminf.    0.50000 (1) obj. -288 iterations 2\nCbc0038I Pass  16: suminf.    0.50000 (1) obj. -288 iterations 0\nCbc0038I Pass  17: suminf.    0.50000 (1) obj. -288 iterations 0\nCbc0038I Pass  18: suminf.    0.38479 (1) obj. -283.546 iterations 2\nCbc0038I Pass  19: suminf.    0.38479 (1) obj. -283.546 iterations 0\nCbc0038I Pass  20: suminf.    0.38479 (1) obj. -283.546 iterations 0\nCbc0038I Pass  21: suminf.    0.38479 (1) obj. -283.546 iterations 0\nCbc0038I Pass  22: suminf.    0.38479 (1) obj. -283.546 iterations 0\nCbc0038I Pass  23: suminf.    0.91907 (2) obj. -283.546 iterations 1\nCbc0038I Pass  24: suminf.    0.91907 (2) obj. -283.546 iterations 0\nCbc0038I Pass  25: suminf.    0.91907 (2) obj. -283.546 iterations 0\nCbc0038I Pass  26: suminf.    0.91907 (2) obj. -283.546 iterations 0\nCbc0038I Pass  27: suminf.    0.91907 (2) obj. -283.546 iterations 0\nCbc0038I Pass  28: suminf.    0.52570 (2) obj. -283.546 iterations 1\nCbc0038I Pass  29: suminf.    0.30522 (1) obj. -283.546 iterations 2\nCbc0038I Pass  30: suminf.    0.30522 (1) obj. -283.546 iterations 0\nCbc0038I No solution found this major pass\nCbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 12 columns, reduced to 1 rows 4 columns\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -282 - took 0.00 seconds\nCbc0012I Integer solution of -282 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -288.46154 to -288.46154 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -282, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 8 variables fixed on reduced cost\nCuts at root node changed objective from -288.462 to -288.462\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                282.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n282.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.34616947174072266}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 4, 13, 21, 24, 6, 1, 3, 14, 20, 2, 18]
V = [14, 35, 28, 23, 4, 42, 7, 48, 36, 44, 27, 43]
C = 71"
32,knap,8,139,42,0,69,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6a5ae05cce82446e9b7780e2e9d623f1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6a5ae05cce82446e9b7780e2e9d623f1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 39 RHS\nAt line 41 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 1 rows, 8 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 143.857 - 0.00 seconds\nCgl0004I processed model has 1 rows, 8 columns (8 integer (8 of which binary)) and 8 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 1 integers unsatisfied sum - 0.285714\nCbc0038I Solution found of -139\nCbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 8 columns, reduced to 0 rows 0 columns\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I Round again with cutoff of -140.386\nCbc0038I Reduced cost fixing fixed 7 variables on major pass 2\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -139 - took 0.00 seconds\nCbc0012I Integer solution of -139 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -139, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 7 variables fixed on reduced cost\nCuts at root node changed objective from -143.857 to -139\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                139.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n139.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3321502208709717}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 2, 8, 9, 3, 15, 14, 9]
V = [29, 30, 1, 26, 22, 11, 17, 32]
C = 33"
33,ilp_assign,8,44,42,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 21, 24, 23, 18, 9, 12], [20, 24, 8, 13, 18, 13, 6], [16, 9, 20, 11, 23, 8, 9], [20, 23, 8, 22, 1, 20, 13], [11, 14, 8, 9, 7, 3, 21], [24, 6, 19, 15, 19, 24, 5], [20, 9, 15, 17, 6, 5, 5]]"
34,ilp_assign,4,15,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_z5gcg8y9/main.py"", line 2, in <module>\n    n = len(C)\n            ^\nNameError: name \'C\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.5245926380157471}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 3, 7, 10], [5, 3, 1, 9], [1, 10, 4, 10], [8, 3, 12, 10]]"
35,lcs,12,7,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcddcdaabadc""
T = ""cccdcdcbabc"""
36,ilp_prod,8,88,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 20, 14, 18]
consumption (rows=resources) = [[7, 2, 4, 7], [4, 5, 2, 1], [2, 1, 5, 3], [2, 6, 5, 7]]
capacity = [32, 27, 32, 26]
upper_bounds = [4, 4, 5, 3]"
37,ilp_prod,4,54,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_joigf13a/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, upBound=upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n           ~~~~~~~~~~^\n        name % tuple(indexStart + [str(i)]), lowBound, upBound, cat\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.5396358966827393}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 3, 9]
consumption (rows=resources) = [[3, 4, 1], [3, 2, 2], [1, 3, 1]]
capacity = [9, 12, 12]
upper_bounds = [3, 3, 6]"
38,ilp_prod,8,48,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 20, 4, 19]
consumption (rows=resources) = [[2, 5, 2, 5], [2, 3, 2, 8], [4, 7, 7, 7], [3, 6, 8, 3]]
capacity = [31, 22, 19, 29]
upper_bounds = [4, 3, 3, 3]"
39,rod,12,396,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_xoart10_/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2051403522491455}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 12
P = [33, 32, 26, 8, 31, 7, 10, 25, 13, 11, 34, 17]"
40,ilp_prod,4,40,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6, 7]
consumption (rows=resources) = [[1, 2, 3], [3, 1, 2], [2, 3, 2]]
capacity = [12, 12, 15]
upper_bounds = [4, 5, 4]"
41,lcs,4,1,2,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baca""
T = ""dddb"""
42,ilp_partition,8,1,42,0,4,0,"{'ok': True, 'value': -113, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/93748c7ebaee4800ada525ee0fad2946-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/93748c7ebaee4800ada525ee0fad2946-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 39 RHS\nAt line 41 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 1 rows, 8 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 0 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n-113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5365641117095947}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 2, 15, 22, 5, 13, 23, 15]"
43,knap,4,32,42,0,31,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2e95111516ec4990a10e989ac9522291-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2e95111516ec4990a10e989ac9522291-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 23 RHS\nAt line 25 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 1 rows, 4 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 32 - 0.00 seconds\nCgl0004I processed model has 1 rows, 4 columns (4 integer (4 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of -32\nCbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -32 - took 0.00 seconds\nCbc0012I Integer solution of -32 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -32, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -32 to -32\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                32.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n32.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1972212791442871}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 7, 6]
V = [16, 1, 16, 2]
C = 9"
44,rod,8,184,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_o35cp9xg/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14511489868164062}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 10, 18, 12, 6, 23, 23, 24]"
45,lcs,4,1,2,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_2meuxkdb/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1287546157836914}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabd""
T = ""bcbb"""
46,ilp_partition,4,1,11,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 7, 2, 7]"
47,knap,4,24,42,0,15,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0d9ee2388f6843ba802b7b39a8a20712-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0d9ee2388f6843ba802b7b39a8a20712-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 23 RHS\nAt line 25 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 1 rows, 4 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24.1667 - 0.00 seconds\nCgl0004I processed model has 1 rows, 4 columns (4 integer (4 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 1 integers unsatisfied sum - 0.166667\nCbc0038I Solution found of -24\nCbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -24 - took 0.00 seconds\nCbc0012I Integer solution of -24 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -24, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 3 variables fixed on reduced cost\nCuts at root node changed objective from -24.1667 to -24\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5262367725372314}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 6, 6]
V = [8, 1, 1, 16]
C = 13"
48,ilp_partition,12,0,42,0,4,0,"{'ok': True, 'value': -222, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/82cacbf9ee65496bb32f8306afbf84f7-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/82cacbf9ee65496bb32f8306afbf84f7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 55 RHS\nAt line 57 BOUNDS\nAt line 70 ENDATA\nProblem MODEL has 1 rows, 12 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 0 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n-222\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19275879859924316}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 33, 33, 26, 8, 14, 25, 34, 9, 17, 1, 8]"
49,rod,8,136,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_za49e39p/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15094566345214844}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 21, 12, 6, 17, 7, 10, 10]"
50,rod,12,420,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_2zv0rn0v/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1407768726348877}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 12
P = [35, 1, 11, 21, 24, 14, 10, 10, 7, 26, 21, 33]"
51,lcs,12,5,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbacccbadcaa""
T = ""dbadbbbabacd"""
52,lcs,8,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_d5o8frf6/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21025824546813965}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacccadc""
T = ""acaaada"""
53,rod,8,128,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_6vxjowh6/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.12005162239074707}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 22, 13, 23, 21, 12, 13, 17]"
54,lcs,4,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_wr210cz6/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14505577087402344}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caab""
T = ""bab"""
55,ilp_partition,4,2,4,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 6, 2]"
56,knap,12,185,42,0,81,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 6, 9, 21, 1, 14, 24, 22, 19, 2, 12, 14]
V = [26, 19, 43, 43, 2, 6, 6, 1, 25, 18, 30, 18]
C = 81"
57,rod,4,18,42,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_znf2bae2/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22139883041381836}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 9, 9, 10]"
58,ilp_assign,4,12,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 9, 8, 1], [6, 10, 7, 5], [1, 3, 4, 6], [10, 3, 6, 7]]"
59,rod,4,16,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_81eb_6mr/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2132568359375}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 6, 11, 10]"
60,ilp_assign,12,64,42,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 16, 7, 36, 23, 11, 8], [3, 21, 28, 23, 17, 4, 28], [27, 25, 23, 19, 22, 29, 16], [34, 10, 4, 22, 8, 33, 12], [35, 32, 22, 8, 2, 31, 14], [25, 12, 26, 15, 7, 16, 22], [22, 16, 30, 31, 24, 32, 13]]"
61,ilp_partition,4,5,15,0,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 10, 7, 2]"
62,knap,12,140,42,0,180,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b216b70c155c4e5590bdec09eee4fb30-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b216b70c155c4e5590bdec09eee4fb30-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 55 RHS\nAt line 57 BOUNDS\nAt line 70 ENDATA\nProblem MODEL has 1 rows, 12 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 140.875 - 0.00 seconds\nCgl0004I processed model has 1 rows, 12 columns (12 integer (12 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 1 integers unsatisfied sum - 0.125\nCbc0038I Solution found of -140\nCbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -140 - took 0.00 seconds\nCbc0012I Integer solution of -140 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -140, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 11 variables fixed on reduced cost\nCuts at root node changed objective from -140.875 to -140\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                140.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n140.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6020553112030029}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 14, 23, 9, 14, 11, 16, 7, 23, 16, 13, 23]
V = [28, 6, 5, 9, 14, 10, 15, 47, 2, 7, 17, 10]
C = 96"
63,knap,4,29,42,0,31,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/502f875851344a738b529d22123db709-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/502f875851344a738b529d22123db709-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 23 RHS\nAt line 25 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 1 rows, 4 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 31.2857 - 0.00 seconds\nCgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions\nCgl0004I processed model has 1 rows, 4 columns (4 integer (4 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 1 integers unsatisfied sum - 0.1\nCbc0038I Solution found of -29\nCbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 4 columns, reduced to 0 rows 0 columns\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I Round again with cutoff of -30.0599\nCbc0038I Reduced cost fixing fixed 3 variables on major pass 2\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -29 - took 0.00 seconds\nCbc0012I Integer solution of -29 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -29, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 3 variables fixed on reduced cost\nCuts at root node changed objective from -30.6 to -29\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                29.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n29.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20160746574401855}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 4, 5, 5]
V = [16, 13, 2, 16]
C = 10"
64,lcs,4,2,2,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_wedpcwzo/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1708695888519287}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adad""
T = ""adcb"""
65,knap,8,106,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 6, 11, 15, 8, 8, 11, 16]
V = [31, 15, 27, 22, 18, 15, 4, 5]
C = 38"
66,lcs,8,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_enpy82sa/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23435401916503906}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcaaacc""
T = ""dcdaacda"""
67,lcs,8,3,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_5ak6wk1v/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17860031127929688}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdccbbc""
T = ""bcacada"""
68,ilp_assign,8,27,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 9, 16, 6, 15, 17, 2], [9, 17, 4, 24, 19, 14, 3], [12, 3, 22, 15, 1, 6, 17], [23, 6, 23, 3, 13, 21, 23], [9, 20, 10, 7, 17, 7, 8], [11, 9, 3, 3, 23, 17, 22], [12, 15, 17, 18, 24, 2, 6]]"
69,knap,8,122,42,0,59,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cc7eb0ed47e34d1891020ca33cf7484e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cc7eb0ed47e34d1891020ca33cf7484e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 39 RHS\nAt line 41 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 1 rows, 8 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 126.286 - 0.00 seconds\nCgl0004I processed model has 1 rows, 8 columns (8 integer (8 of which binary)) and 8 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 1 integers unsatisfied sum - 0.428571\nCbc0038I Pass   1: suminf.    0.42857 (1) obj. -126.286 iterations 0\nCbc0038I Solution found of -116\nCbc0038I Rounding solution of -122 is better than previous of -116\n\nCbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I Round again with cutoff of -123.328\nCbc0038I Reduced cost fixing fixed 6 variables on major pass 2\nCbc0038I Pass   2: suminf.    0.42857 (1) obj. -126.286 iterations 0\nCbc0038I Pass   3: suminf.    0.40714 (1) obj. -123.328 iterations 1\nCbc0038I Pass   4: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass   5: suminf.    0.07380 (1) obj. -123.328 iterations 1\nCbc0038I Pass   6: suminf.    0.21429 (1) obj. -125.857 iterations 1\nCbc0038I Pass   7: suminf.    0.07380 (1) obj. -123.328 iterations 1\nCbc0038I Pass   8: suminf.    0.07380 (1) obj. -123.328 iterations 0\nCbc0038I Pass   9: suminf.    0.07380 (1) obj. -123.328 iterations 0\nCbc0038I Pass  10: suminf.    0.07380 (1) obj. -123.328 iterations 0\nCbc0038I Pass  11: suminf.    0.07380 (1) obj. -123.328 iterations 0\nCbc0038I Pass  12: suminf.    0.40714 (1) obj. -123.328 iterations 1\nCbc0038I Pass  13: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  14: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  15: suminf.    0.07380 (1) obj. -123.328 iterations 1\nCbc0038I Pass  16: suminf.    0.07380 (1) obj. -123.328 iterations 0\nCbc0038I Pass  17: suminf.    0.07380 (1) obj. -123.328 iterations 0\nCbc0038I Pass  18: suminf.    0.07380 (1) obj. -123.328 iterations 0\nCbc0038I Pass  19: suminf.    0.40714 (1) obj. -123.328 iterations 1\nCbc0038I Pass  20: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  21: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  22: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  23: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  24: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  25: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  26: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  27: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  28: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  29: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  30: suminf.    0.40714 (1) obj. -123.328 iterations 0\nCbc0038I Pass  31: suminf.    0.07380 (1) obj. -123.328 iterations 1\nCbc0038I No solution found this major pass\nCbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -122 - took 0.00 seconds\nCbc0012I Integer solution of -122 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -122, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 6 variables fixed on reduced cost\nCuts at root node changed objective from -126.286 to -122\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                122.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n122.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5595614910125732}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 14, 1, 2, 12, 5, 5, 5]
V = [17, 18, 26, 26, 12, 6, 15, 32]
C = 22"
70,knap,12,177,42,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 21, 24, 16, 11, 13, 15, 4, 16, 12, 5, 14]
V = [10, 2, 12, 17, 24, 9, 38, 19, 27, 17, 33, 19]
C = 81"
71,lcs,8,5,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_50ps7gjo/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22997713088989258}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdcacbc""
T = ""cbcaabbab"""
72,ilp_assign,4,17,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 1, 7, 4], [6, 2, 4, 10], [11, 7, 10, 4], [8, 2, 11, 7]]"
73,lcs,12,7,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadaccbcdaca""
T = ""bbccddabdacb"""
74,ilp_partition,8,0,42,0,4,0,"{'ok': True, 'value': -84, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/71dd2b09510a44db8b3896eea0e6e048-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/71dd2b09510a44db8b3896eea0e6e048-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 39 RHS\nAt line 41 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 1 rows, 8 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 0 - 0.00 seconds\nCgl0008I 1 inequality constraints converted to equality constraints\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n-84\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4674954414367676}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 16, 17, 12, 4, 11, 2, 5]"
75,ilp_prod,8,85,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 11, 22, 14]
consumption (rows=resources) = [[1, 2, 4, 5], [7, 5, 2, 2], [3, 5, 7, 2], [3, 5, 5, 4]]
capacity = [22, 19, 24, 31]
upper_bounds = [3, 3, 3, 4]"
76,ilp_prod,12,58,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 11, 19, 17, 8, 6]
consumption (rows=resources) = [[10, 3, 11, 2, 4, 10], [4, 9, 10, 11, 5, 7], [6, 1, 1, 5, 10, 4], [2, 12, 4, 5, 11, 11]]
capacity = [34, 32, 43, 47]
upper_bounds = [3, 3, 3, 3, 4, 3]"
77,lcs,12,7,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdcadcbaacc""
T = ""cccccaabccca"""
78,lcs,12,7,4,0,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_iniu1we3/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23360300064086914}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcbdacdbadd""
T = ""ddacdabcaac"""
79,rod,12,102,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_ifp3l2kf/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.12755942344665527}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 12
P = [8, 17, 18, 12, 31, 4, 14, 6, 25, 8, 29, 19]"
80,rod,12,324,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_xl0j5m7b/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1631484031677246}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 12
P = [27, 35, 19, 32, 35, 14, 22, 32, 7, 1, 23, 18]"
81,ilp_prod,12,273,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 27, 4, 10, 24, 25]
consumption (rows=resources) = [[3, 2, 5, 3, 11, 10], [1, 6, 2, 2, 12, 2], [5, 6, 4, 5, 9, 1], [6, 1, 2, 3, 7, 6]]
capacity = [47, 44, 46, 31]
upper_bounds = [5, 7, 9, 9, 3, 4]"
82,lcs,12,6,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbabdaacabca""
T = ""aabbdacdcbbdb"""
83,knap,12,218,42,0,195,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f9d4aadba8084f22965fb1e5b8e4d99e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f9d4aadba8084f22965fb1e5b8e4d99e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 55 RHS\nAt line 57 BOUNDS\nAt line 70 ENDATA\nProblem MODEL has 1 rows, 12 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 218 - 0.00 seconds\nCgl0004I processed model has 1 rows, 11 columns (11 integer (10 of which binary)) and 11 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of -218\nCbc0038I Cleaned solution of -218\nCbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -218 - took 0.00 seconds\nCbc0012I Integer solution of -218 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -218, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -218 to -218\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                218.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n218.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.562908411026001}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 24, 11, 18, 21, 19, 18, 10, 17, 14, 18, 17]
V = [27, 39, 41, 38, 20, 29, 20, 9, 33, 29, 38, 9]
C = 102"
84,ilp_assign,4,15,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3, 3, 9], [4, 5, 6, 10], [9, 5, 6, 6], [6, 2, 5, 4]]"
85,ilp_assign,8,25,42,0,16,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 10, 15, 18, 19, 13, 7], [15, 23, 9, 11, 16, 19, 4], [7, 3, 2, 1, 1, 16, 11], [13, 19, 10, 7, 13, 6, 21], [5, 1, 1, 13, 5, 22, 18], [2, 19, 13, 9, 5, 3, 15], [21, 10, 1, 2, 18, 2, 17]]"
86,ilp_assign,12,49,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[28, 29, 26, 35, 8, 32, 18], [9, 10, 1, 25, 27, 7, 2], [5, 12, 30, 25, 33, 19, 10], [10, 34, 7, 17, 2, 30, 26], [15, 35, 26, 1, 35, 16, 28], [11, 12, 22, 16, 5, 35, 36], [11, 12, 25, 2, 33, 14, 28]]"
87,knap,4,22,42,0,22,1,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d40aa17a198b4ed2a9af6245114decba-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d40aa17a198b4ed2a9af6245114decba-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 23 RHS\nAt line 25 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 1 rows, 4 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 22 - 0.00 seconds\nCgl0004I processed model has 1 rows, 4 columns (4 integer (4 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of -22\nCbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -22 - took 0.00 seconds\nCbc0012I Integer solution of -22 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -22, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -22 to -22\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                22.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n22.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5923275947570801}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 6, 6, 8]
V = [9, 1, 13, 5]
C = 13"
88,ilp_partition,12,0,42,0,42,0,"{'ok': True, 'value': -220, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bbce034a4aa8463ba34f9b262ed62f7e-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/bbce034a4aa8463ba34f9b262ed62f7e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 55 RHS\nAt line 57 BOUNDS\nAt line 70 ENDATA\nProblem MODEL has 1 rows, 12 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 0 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n-220\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1926136016845703}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 27, 26, 18, 32, 7, 9, 12, 36, 2, 30, 3]"
89,rod,8,48,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_7giypj9x/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16513490676879883}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [6, 5, 9, 14, 7, 19, 24, 2]"
90,rod,12,108,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_d3zbd44c/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11269307136535645}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 12
P = [9, 17, 13, 27, 36, 4, 35, 33, 10, 27, 18, 18]"
91,ilp_prod,4,76,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_spla2mhp/main.py"", line 10, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, upBound=upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n           ~~~~~~~~~~^\n        name % tuple(indexStart + [str(i)]), lowBound, upBound, cat\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.49881553649902344}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 11, 8]
consumption (rows=resources) = [[2, 1, 1], [1, 4, 4], [2, 2, 2]]
capacity = [16, 14, 16]
upper_bounds = [8, 3, 3]"
92,ilp_partition,8,1,42,0,4,0,"{'ok': True, 'value': 99, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4706577ec027470598b9dfd86e240a0b-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/4706577ec027470598b9dfd86e240a0b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 39 RHS\nAt line 41 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 1 rows, 8 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 0 - 0.00 seconds\nCgl0008I 1 inequality constraints converted to equality constraints\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20556092262268066}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 24, 20, 24, 3, 9, 6, 4]"
93,ilp_prod,12,90,42,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 14, 18, 16, 30, 20]
consumption (rows=resources) = [[9, 1, 5, 9, 5, 9], [5, 8, 3, 7, 12, 2], [12, 6, 2, 11, 9, 6], [9, 9, 12, 9, 11, 10]]
capacity = [24, 43, 33, 38]
upper_bounds = [3, 4, 3, 3, 3, 3]"
94,ilp_partition,12,0,42,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_max_bh8o/main.py"", line 12, in <module>\n    model += abs(total_weight_left - total_weight_right)\n             ~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: bad operand type for abs(): \'LpAffineExpression\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.5615906715393066}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 32, 35, 19, 6, 33, 20, 14, 30, 2, 19, 7]"
95,rod,12,210,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_pwvbw5ss/main.py"", line 4\n    dp = [0] * (n + 1)\n    ^^\nIndentationError: expected an indented block after function definition on line 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.12661457061767578}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 12
P = [4, 35, 29, 20, 7, 15, 33, 18, 18, 16, 27, 10]"
96,ilp_assign,12,54,42,0,18,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 10, 5, 10, 14, 31, 22], [24, 19, 11, 10, 25, 29, 26], [8, 10, 18, 19, 1, 35, 1], [9, 25, 36, 7, 30, 2, 28], [28, 18, 24, 27, 26, 30, 4], [7, 31, 3, 1, 3, 8, 9], [34, 33, 23, 36, 18, 23, 31]]"
97,ilp_assign,12,52,42,0,13,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 17, 17, 17, 23, 25, 18], [30, 1, 10, 9, 17, 15, 13], [5, 35, 13, 35, 28, 16, 9], [36, 30, 26, 13, 6, 5, 10], [4, 2, 26, 25, 27, 9, 9], [35, 35, 5, 16, 25, 9, 19], [13, 26, 23, 12, 15, 20, 10]]"
98,rod,4,32,42,0,42,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1607987880706787}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 6, 7, 6]"
99,lcs,4,1,2,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_iu0bk5gj/main.py"", line 5\n    for i in range(1, n + 1):\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1983170509338379}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acaa""
T = ""adb"""
