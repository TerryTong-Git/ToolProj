idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,ilp_prod,4,40,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 11, 9]
consumption (rows=resources) = [[2, 3, 3], [4, 4, 1], [4, 2, 4]]
capacity = [14, 10, 13]
upper_bounds = [3, 3, 3]"
1,knap,2,8,42,0,10,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/723377e14ad64f718bb5719fe1c5d487-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/723377e14ad64f718bb5719fe1c5d487-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 19 RHS\nAt line 21 BOUNDS\nAt line 25 ENDATA\nProblem MODEL has 1 rows, 3 columns and 3 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions\nCgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions\nCgl0003I 0 fixed, 0 tightened bounds, 0 strengthened rows, 1 substitutions\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5061872005462646}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 4]
V = [4, 2, 8]
C = 6"
2,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.45725417137145996}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbda""
T = ""bddbc"""
3,rod,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12592148780822754}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
4,ilp_assign,2,2,2,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_jc7sjnjw/main.py"", line 8\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1590278148651123}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3], [1, 1]]"
5,ilp_partition,6,0,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8mlu8_az/main.py"", line 13, in <module>\n    print(min_difference(weights))\n                         ^^^^^^^\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 1.8166491985321045}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 8, 1, 13, 5, 2]"
6,ilp_partition,4,1,1,1,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_03uo3dts/main.py"", line 25, in <module>\n    print(int(min_partition_difference(weights)))\n              ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^\n  File ""/tmp/cot_exec_03uo3dts/main.py"", line 13, in min_partition_difference\n    dp[j][0] = float(\'inf\')\n    ~~~~~^^^\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21804141998291016}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 8, 1, 5]"
7,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.29584670066833496}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""ad"""
8,lcs,6,2,4,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22403168678283691}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbbab""
T = ""bdccdca"""
9,knap,4,20,42,0,23,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.13/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bbe67b7c35644d4e959b44454468a57c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bbe67b7c35644d4e959b44454468a57c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 23 RHS\nAt line 25 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 1 rows, 4 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20.5 - 0.00 seconds\nCgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions\nCgl0004I processed model has 1 rows, 4 columns (4 integer (4 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 1 integers unsatisfied sum - 0.1\nCbc0038I Solution found of -20\nCbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -20 - took 0.00 seconds\nCbc0012I Integer solution of -20 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -20, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 3 variables fixed on reduced cost\nCuts at root node changed objective from -20.4 to -20\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3206312656402588}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 8, 5]
V = [1, 14, 4, 6]
C = 10"
