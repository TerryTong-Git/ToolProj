idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,ilp_prod,8,39,100,0,35,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/eb2ca1e42f6b4c1eb04b773660af6726-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/eb2ca1e42f6b4c1eb04b773660af6726-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 30 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.4575979709625244}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 11, 9, 6]
consumption (rows=resources) = [[5, 7, 7, 6], [8, 2, 2, 4], [3, 8, 4, 6], [5, 1, 3, 1]]
capacity = [27, 30, 25, 25]
upper_bounds = [3, 3, 3, 4]"
1,mul,8,3906014270326125,30457524545425,0,389439484642525,0,"{'ok': True, 'value': 3906014270326125, 'stdout': '3906014270326125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09496593475341797}",1,Compute: 58089775 * 67240995
2,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09406232833862305}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbbbaad""
T = ""bdbbacbc"""
3,ilp_prod,4,63,36,0,39,0,"{'ok': True, 'value': 45, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/46d8278e011243948a715808141ef1eb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/46d8278e011243948a715808141ef1eb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 45 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -45 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                45.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n45.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17481446266174316}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 3, 9]
consumption (rows=resources) = [[2, 3, 2], [1, 3, 4], [1, 2, 4]]
capacity = [14, 15, 15]
upper_bounds = [7, 4, 3]"
4,rod,8,176,25,0,1,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08938097953796387}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 10, 19, 19, 20, 8, 11, 9]"
5,mul,4,31513860,32824106,0,30452760,0,"{'ok': True, 'value': 31513860, 'stdout': '31513860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0976409912109375}",1,Compute: 7146 * 4410
6,rod,2,10,5,0,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_16oj6hae/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_16oj6hae/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0906212329864502}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 1]"
7,ilp_prod,16,79,209,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_55hw7qq_/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_55hw7qq_/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1706993579864502}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 6, 24, 7, 34, 8]
consumption (rows=resources) = [[13, 4, 8, 4, 12, 10], [14, 10, 9, 5, 2, 14], [11, 4, 11, 11, 13, 7], [3, 6, 12, 6, 2, 11]]
capacity = [36, 58, 32, 57]
upper_bounds = [3, 5, 3, 3, 3, 3]"
8,ilp_partition,4,0,1,0,2,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08978533744812012}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 10, 3]"
9,ilp_prod,8,89,83,0,17,0,"{'ok': True, 'value': 30, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0739813b50a544aaabdd38fccca097c3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0739813b50a544aaabdd38fccca097c3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 17 COLUMNS\nAt line 78 RHS\nAt line 91 BOUNDS\nAt line 96 ENDATA\nProblem MODEL has 12 rows, 4 columns and 48 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 36.4286 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -30 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                30.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n30.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17021679878234863}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 12, 22, 3]
consumption (rows=resources) = [[4, 6, 6, 6], [3, 7, 4, 7], [1, 1, 5, 4], [5, 3, 1, 7]]
capacity = [24, 23, 16, 17]
upper_bounds = [3, 3, 3, 3]"
10,add,16,9390698459264450,8811111111111110,0,9450701459264450,0,"{'ok': True, 'value': 9390698459264450, 'stdout': '9390698459264450\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1299593448638916}",1,Compute: 3778805958221640 + 5611892501042810
11,ilp_assign,4,17,0,0,28,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.4390881061553955}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 1, 7, 3], [4, 2, 10, 11], [3, 6, 5, 5], [8, 6, 9, 7]]"
12,ilp_prod,16,220,105,0,34,0,"{'ok': True, 'value': 84, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3826ecf688a94d8ebf942bd9f383f793-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3826ecf688a94d8ebf942bd9f383f793-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 123.375 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -84 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                84.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n84.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1708686351776123}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 40, 20, 14, 15, 4]
consumption (rows=resources) = [[11, 7, 15, 12, 3, 16], [15, 12, 2, 7, 3, 7], [16, 6, 4, 15, 1, 1], [4, 7, 3, 13, 1, 5]]
capacity = [55, 50, 47, 34]
upper_bounds = [3, 4, 3, 3, 10, 3]"
13,ilp_prod,16,355,"The actual solution would be a numerical value obtained from a linear programming solver. Since we are not allowed to use code, we can't provide this value.",0,57,0,"{'ok': True, 'value': 80, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/500ba38eb17740ea844d6c78c54345da-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/500ba38eb17740ea844d6c78c54345da-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 81.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -80 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                80.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n80.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1878511905670166}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 29, 19, 5, 24, 17]
consumption (rows=resources) = [[15, 3, 15, 4, 11, 7], [5, 3, 11, 2, 9, 2], [3, 1, 7, 7, 4, 5], [3, 2, 16, 1, 4, 14]]
capacity = [61, 60, 37, 57]
upper_bounds = [4, 10, 3, 5, 5, 4]"
14,ilp_prod,16,283,105,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_dfmq7n8v/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_dfmq7n8v/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17864370346069336}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 34, 45, 43, 32, 10]
consumption (rows=resources) = [[13, 6, 11, 13, 7, 12], [12, 2, 16, 7, 9, 2], [4, 2, 9, 3, 10, 14], [13, 4, 1, 1, 16, 1]]
capacity = [57, 42, 45, 34]
upper_bounds = [3, 8, 3, 4, 3, 3]"
15,sub,32,63917151006736327109218660374200,63917151006736327052818659674200,0,63917051006736327110218659374200,0,"{'ok': True, 'value': 63917151006736327109218660374200, 'stdout': '63917151006736327109218660374200\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08550882339477539}",1,Compute: 89862074012826272524083907496869 - 25944923006089945414865247122669
16,add,8,92245620,92245620,1,92245620,1,"{'ok': True, 'value': 92245620, 'stdout': '92245620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09162259101867676}",1,Compute: 36840588 + 55405032
17,lcs,16,7,5,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10748767852783203}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabaadabbdccdccb""
T = ""ccbabccdbbaabdd"""
18,ilp_assign,32,140,100,0,209,0,"{'ok': True, 'value': 140, 'stdout': '140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39640045166015625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[33, 64, 91, 46, 25, 81, 39], [40, 90, 20, 14, 55, 40, 96], [64, 89, 96, 63, 91, 6, 46], [28, 21, 60, 43, 83, 40, 86], [87, 88, 85, 16, 37, 17, 87], [90, 50, 85, 11, 88, 54, 53], [40, 27, 12, 51, 83, 8, 12]]"
19,mul{'ok': True, 'value': 67417206793969410672280167559430, 'stdout': '67417206793969410672280167559430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09238457679748535}",1,Compute: 9400698895052305 * 7171510070325926
20,ilp_assign,8,27,56,0,54,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4047889709472656}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 20, 20, 3, 14, 19, 17], [8, 17, 23, 11, 9, 17, 13], [15, 4, 19, 1, 21, 14, 3], [12, 10, 18, 24, 2, 2, 12], [6, 4, 8, 12, 17, 2, 11], [18, 8, 19, 8, 11, 3, 22], [3, 2, 4, 11, 16, 13, 21]]"
21,ilp_assign,2,3,7,0,6,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3946688175201416}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5], [5, 1]]"
22,ilp_assign,16,80,105,0,110,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38277244567871094}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 28, 35, 38, 43, 31, 21], [35, 31, 21, 32, 36, 42, 3], [24, 42, 34, 24, 29, 8, 35], [44, 47, 10, 40, 26, 33, 7], [15, 34, 26, 34, 17, 37, 30], [40, 42, 21, 7, 48, 14, 32], [7, 34, 17, 14, 19, 11, 8]]"
23,mul,2,5115,5085,0,5115,1,"{'ok': True, 'value': 5115, 'stdout': '5115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10088872909545898}",1,Compute: 93 * 55
24,knap,16,445,1043,0,5,0,"{'ok': True, 'value': 445, 'stdout': '445\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0938882827758789}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 23, 1, 9, 29, 21, 1, 6, 4, 18, 25, 29, 25, 29, 10, 8]
V = [2, 54, 44, 27, 35, 47, 42, 57, 24, 7, 59, 39, 29, 42, 27, 62]
C = 121"
25,ilp_partition,8,0,1,0,22,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0954124927520752}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 8, 24, 17, 19, 22, 13, 22]"
26,lcs,16,8,10,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10440492630004883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babbbdadadaacdba""
T = ""dbbddcacdcbccdd"""
27,ilp_assign,32,69,185,0,145,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41989874839782715}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[54, 9, 23, 67, 29, 43, 42], [53, 66, 70, 13, 69, 22, 70], [21, 64, 84, 77, 27, 43, 65], [19, 7, 30, 55, 70, 23, 6], [47, 21, 4, 93, 83, 55, 96], [41, 41, 64, 79, 86, 13, 95], [87, 22, 33, 4, 3, 37, 33]]"
28,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1049654483795166}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacd""
T = ""cdb"""
29,add,8,49293892,49,0,49293892,1,"{'ok': True, 'value': 49293892, 'stdout': '49293892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09127497673034668}",1,Compute: 22199414 + 27094478
30,rod,8,160,22,0,36,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08975601196289062}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 1, 22, 2, 4, 19, 20, 16]"
31,add,32,120115601992462422312138668162452,11515811241215838223113865440186,0,120115601992462422312138668162452,1,"{'ok': True, 'value': 120115601992462422312138668162452, 'stdout': '120115601992462422312138668162452\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09816241264343262}",1,Compute: 48986831406196261102788635840186 + 71128770586266161209350032322266
32,ilp_partition,16,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21663618087768555}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 17, 23, 17, 4, 23, 23, 32, 20, 33, 18, 43, 16, 31, 10, 5]"
33,mul,2,352,352,1,352,1,"{'ok': True, 'value': 352, 'stdout': '352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09086799621582031}",1,Compute: 32 * 11
34,ilp_partition,2,1,1,1,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1126856803894043}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 6, 4]"
35,ilp_assign,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3776371479034424}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [4, 3]]"
36,add,4,9421,9421,1,9421,1,"{'ok': True, 'value': 9421, 'stdout': '9421\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08036160469055176}",1,Compute: 3230 + 6191
37,rod,8,176,1,0,1,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12111926078796387}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 18, 24, 10, 4, 20, 12, 2]"
38,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09590768814086914}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdaacdcbadbbbcca""
T = ""dbabbdbdadbbadaa"""
39,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09966063499450684}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 7, 10, 1, 8, 19, 22, 21]"
40,ilp_prod,8,112,105,0,3,0,"{'ok': True, 'value': 112, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/723562e8b8504197a67799af25c21b59-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/723562e8b8504197a67799af25c21b59-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 112 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -112 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -112, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -112 to -112\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                112.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n112.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18984007835388184}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 22, 14, 11]
consumption (rows=resources) = [[2, 1, 1, 8], [1, 3, 2, 1], [5, 5, 2, 2], [2, 4, 1, 6]]
capacity = [26, 30, 16, 31]
upper_bounds = [3, 3, 8, 3]"
41,ilp_prod,16,147,150,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_l1gsu93t/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_l1gsu93t/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16078424453735352}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 47, 23, 24, 34, 19]
consumption (rows=resources) = [[7, 8, 6, 14, 10, 2], [3, 1, 8, 12, 14, 7], [3, 13, 6, 5, 7, 9], [14, 16, 14, 7, 3, 2]]
capacity = [52, 52, 32, 62]
upper_bounds = [4, 3, 4, 3, 3, 3]"
42,add,32,157423467356419809565503155294947,161424066355430688565502925295007,0,157423467356419809565503155294947,1,"{'ok': True, 'value': 157423467356419809565503155294947, 'stdout': '157423467356419809565503155294947\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08553671836853027}",1,Compute: 91926278763816914185120696799727 + 65497188592602895380382458495220
43,ilp_partition,32,1,1,1,87,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2174074649810791}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 14, 25, 38, 84, 80, 91, 18, 76, 24, 87, 1, 89, 9, 40, 4, 47, 96, 29, 79, 66, 44, 91, 59]"
44,ilp_assign,4,18,14,0,24,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39315199851989746}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 11, 12, 4], [11, 3, 3, 2], [8, 12, 8, 11], [3, 5, 5, 3]]"
45,mul,8,1918376639935830,1783866936,0,193039543333550,0,"{'ok': True, 'value': 1918376639935830, 'stdout': '1918376639935830\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08117866516113281}",1,Compute: 55856466 * 34344755
46,ilp_prod,8,51,100,0,63,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_28x4imf0/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_28x4imf0/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18552875518798828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 8, 11]
consumption (rows=resources) = [[4, 2, 2, 4], [1, 5, 7, 5], [2, 1, 1, 3], [4, 2, 7, 3]]
capacity = [27, 18, 22, 23]
upper_bounds = [5, 3, 3, 3]"
47,rod,16,512,64,0,155,0,"{'ok': True, 'value': 512, 'stdout': '512\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09447407722473145}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [32, 38, 23, 29, 20, 5, 44, 15, 37, 45, 37, 35, 25, 25, 48, 22]"
48,ilp_assign,16,52,105,0,117,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39373326301574707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 19, 44, 21, 41, 9, 30], [40, 16, 34, 12, 46, 36, 13], [5, 35, 11, 4, 25, 32, 20], [15, 44, 9, 18, 26, 6, 36], [41, 17, 25, 31, 7, 6, 2], [6, 37, 23, 36, 22, 4, 28], [43, 39, 36, 13, 33, 13, 1]]"
49,rod,4,32,32,1,11,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09630894660949707}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 7, 1, 11]"
50,lcs,32,18,16,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0969538688659668}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddaadaaaacdcbccdbcabbbcdbbbacaa""
T = ""dbbdabacdbcdaacaaabcadacaaadbbc"""
51,ilp_assign,32,82,204,0,114,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ruw_2itx/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.4017372131347656}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[35, 44, 45, 18, 11, 66, 4], [40, 66, 89, 27, 48, 68, 7], [50, 88, 78, 9, 50, 17, 58], [85, 71, 20, 19, 83, 31, 18], [16, 31, 28, 40, 65, 5, 73], [96, 12, 4, 61, 34, 85, 16], [76, 23, 5, 58, 48, 7, 9]]"
52,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09632229804992676}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 6, 6]"
53,sub,8,29838337,29838337,1,29838337,1,"{'ok': True, 'value': 29838337, 'stdout': '29838337\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09509563446044922}",1,Compute: 99531453 - 69693116
54,rod,8,120,25,0,1,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10117101669311523}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 7, 23, 15, 17, 1, 9, 8]"
55,ilp_partition,8,2,1,0,11,0,"{'ok': True, 'value': 110, 'stdout': '110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10749101638793945}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 20, 19, 24, 19, 2, 13, 11]"
56,ilp_assign,8,27,36,0,1,0,"{'ok': True, 'value': 27, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d7a065f3bc1b4dc9832539e535342fea-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/d7a065f3bc1b4dc9832539e535342fea-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 27 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 27\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 27 - took 0.00 seconds\nCbc0012I Integer solution of 27 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 27, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 27 to 27\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                27.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\nStatus: Optimal\nMinimum total cost: 27.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2014625072479248}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 12, 5, 9, 17, 16, 21], [23, 9, 8, 23, 18, 1, 10], [7, 12, 7, 13, 16, 11, 9], [1, 20, 5, 9, 8, 10, 10], [5, 8, 11, 5, 18, 3, 4], [16, 11, 20, 3, 8, 22, 22], [10, 6, 2, 9, 1, 1, 3]]"
57,sub,32,45652230854219928209487313752318,10,0,45652230854219928210487313752318,0,"{'ok': True, 'value': 45652230854219928209487313752318, 'stdout': '45652230854219928209487313752318\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12171435356140137}",1,Compute: 88882251511483399564446026816074 - 43230020657263471354958713063756
58,ilp_assign,32,111,187,0,209,0,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4256868362426758}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 96, 77, 50, 39, 52, 87], [68, 44, 3, 83, 14, 34, 84], [25, 96, 31, 93, 12, 6, 69], [74, 55, 45, 87, 42, 1, 46], [1, 2, 30, 77, 33, 4, 74], [40, 79, 85, 11, 68, 13, 35], [34, 55, 92, 49, 89, 44, 60]]"
59,knap,32,1406,2445,0,44,0,"{'ok': True, 'value': 1406, 'stdout': '1406\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10638737678527832}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 48, 46, 19, 47, 60, 56, 46, 21, 52, 35, 55, 32, 62, 49, 9, 13, 44, 9, 31, 2, 29, 44, 49, 57, 56, 47, 62, 33, 51, 13, 8]
V = [70, 128, 46, 74, 53, 39, 97, 46, 45, 32, 124, 64, 94, 34, 83, 55, 119, 2, 28, 101, 32, 66, 16, 7, 26, 44, 54, 34, 48, 9, 58, 13]
C = 605"
60,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0951530933380127}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""dc"""
61,ilp_partition,2,2,0,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10679411888122559}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 2, 4]"
62,sub,2,18,18,1,18,1,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09692001342773438}",1,Compute: 97 - 79
63,knap,32,1872,2044,0,17,0,"{'ok': True, 'value': 1872, 'stdout': '1872\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10949206352233887}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [57, 40, 8, 51, 58, 51, 38, 10, 25, 23, 51, 60, 19, 17, 6, 22, 6, 64, 16, 47, 11, 31, 47, 17, 11, 63, 54, 7, 47, 24, 17, 49]
V = [19, 108, 69, 27, 90, 19, 40, 102, 128, 80, 45, 78, 26, 101, 10, 125, 107, 57, 97, 70, 34, 10, 99, 71, 35, 77, 86, 108, 118, 89, 117, 92]
C = 523"
64,sub,8,47887058,47887058,1,47887058,1,"{'ok': True, 'value': 47887058, 'stdout': '47887058\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09386324882507324}",1,Compute: 65936204 - 18049146
65,lcs,32,21,16,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0970306396484375}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacdccacacbccdddaabdabdaadacbddc""
T = ""baacdcaccccbdddaccdcbddcaaddbcd"""
66,mul,2,4675,4675,1,4675,1,"{'ok': True, 'value': 4675, 'stdout': '4675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10491085052490234}",1,Compute: 55 * 85
67,add,8,122691015,122690995,0,122691015,1,"{'ok': True, 'value': 122691015, 'stdout': '122691015\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1023406982421875}",1,Compute: 86223261 + 36467754
68,rod,16,192,46,0,37,0,"{'ok': True, 'value': 192, 'stdout': '192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08865928649902344}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [12, 17, 13, 1, 1, 28, 7, 37, 35, 22, 14, 14, 4, 36, 2, 19]"
69,rod,32,1408,1084,0,1,0,"{'ok': True, 'value': 1408, 'stdout': '1408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08925628662109375}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [44, 1, 39, 17, 16, 73, 22, 50, 83, 81, 73, 9, 47, 17, 22, 32, 35, 69, 72, 5, 16, 10, 58, 62, 56, 24, 40, 31, 40, 88, 53, 75]"
70,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09236025810241699}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaa""
T = ""abab"""
71,ilp_assign,16,78,116,0,1,0,"{'ok': True, 'value': 78, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/810fd9e069404480888e16eed7f21a8f-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/810fd9e069404480888e16eed7f21a8f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 78 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 78\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 78 - took 0.00 seconds\nCbc0012I Integer solution of 78 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 78, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 78 to 78\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                78.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\nStatus: Optimal\nMinimum total cost: 78.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18044400215148926}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 38, 21, 10, 38, 33, 22], [12, 45, 43, 4, 47, 23, 38], [31, 19, 7, 46, 10, 26, 15], [21, 46, 34, 9, 43, 1, 11], [33, 22, 4, 18, 35, 48, 25], [26, 43, 37, 35, 45, 20, 48], [31, 11, 47, 30, 21, 31, 15]]"
72,knap,2,20,14,0,-1,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0888984203338623}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 5]
V = [10, 10, 4]
C = 4"
73,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10075902938842773}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbd""
T = ""ccdba"""
74,knap,16,395,1,0,1,0,"{'ok': True, 'value': 395, 'stdout': '395\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10018301010131836}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 8, 27, 15, 12, 26, 24, 32, 2, 11, 32, 23, 5, 21, 15, 3]
V = [38, 6, 56, 34, 47, 9, 42, 12, 5, 50, 12, 52, 58, 28, 47, 4]
C = 141"
75,sub,32,4019232818967856515683719284196,39867228479667856505683729284196,0,40192328189678566507837792844196,0,"{'ok': True, 'value': 4019232818967856515683719284196, 'stdout': '4019232818967856515683719284196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08656668663024902}",1,Compute: 26019498633788671566324390269400 - 22000265814820815050640670985204
76,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09592413902282715}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""ba"""
77,mul,16,24340198532604030522102699754600,161,0,24584036524181864868666460,0,"{'ok': True, 'value': 24340198532604030522102699754600, 'stdout': '24340198532604030522102699754600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1065521240234375}",1,Compute: 3865727284759657 * 6296408602997800
78,knap,16,246,157,0,0,0,"{'ok': True, 'value': 246, 'stdout': '246\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09090185165405273}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 3, 24, 11, 28, 10, 13, 13, 31, 20, 32, 2, 32, 25, 19, 27]
V = [26, 38, 11, 50, 39, 3, 7, 14, 3, 13, 19, 3, 38, 23, 7, 29]
C = 157"
79,knap,4,38,27,0,8,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10379767417907715}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 8, 3, 2]
V = [9, 13, 15, 14]
C = 7"
80,ilp_prod,16,174,150,0,35,0,"{'ok': True, 'value': 108, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/40fd4d204a434289a44123597b5b4b06-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/40fd4d204a434289a44123597b5b4b06-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 130.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -108 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                108.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n108.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17508912086486816}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 34, 34, 28, 29, 35]
consumption (rows=resources) = [[7, 10, 16, 12, 12, 6], [12, 8, 2, 4, 1, 12], [5, 12, 10, 13, 15, 15], [16, 1, 4, 14, 1, 12]]
capacity = [51, 53, 58, 35]
upper_bounds = [3, 4, 3, 3, 3, 3]"
81,mul,4,29231160,59350160,0,29999600,0,"{'ok': True, 'value': 29231160, 'stdout': '29231160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08970212936401367}",1,Compute: 3220 * 9078
82,add,8,104825580,1048261510,0,104825580,1,"{'ok': True, 'value': 104825580, 'stdout': '104825580\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08915901184082031}",1,Compute: 39792878 + 65032702
83,ilp_partition,4,5,1,0,2,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08679580688476562}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 10, 7, 1]"
84,add,2,145,145,1,145,1,"{'ok': True, 'value': 145, 'stdout': '145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09942746162414551}",1,Compute: 86 + 59
85,ilp_prod,32,357,1000,0,258,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xbo02prp/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_xbo02prp/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16923236846923828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [89, 10, 26, 51, 28, 83]
consumption (rows=resources) = [[9, 1, 28, 3, 18, 19], [13, 21, 15, 27, 25, 5], [32, 28, 5, 8, 28, 27], [9, 9, 7, 27, 15, 25]]
capacity = [103, 128, 101, 120]
upper_bounds = [3, 3, 3, 4, 3, 3]"
86,sub,2,67,67,1,67,1,"{'ok': True, 'value': 67, 'stdout': '67\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09931516647338867}",1,Compute: 79 - 12
87,add,8,152779215,152779215,1,152779215,1,"{'ok': True, 'value': 152779215, 'stdout': '152779215\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08576703071594238}",1,Compute: 99984293 + 52794922
88,ilp_prod,2,49,"The solution to the problem is to sort the products by their profit in descending order, then choose the product with the highest profit that can be produced within the resource constraints. Repeat this process until all products are produced or no more products can be produced. The total profit is the sum of the profits of the products in the production plan.",0,21,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/63a9a4a7f70b4a33a79d0e2d13a60d04-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/63a9a4a7f70b4a33a79d0e2d13a60d04-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16819524765014648}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[1, 1], [1, 2]]
capacity = [7, 7]
upper_bounds = [7, 3]"
89,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10067343711853027}",1,Compute: 34 - 33
90,ilp_prod,16,366,The solution to the problem is the maximum profit that can be obtained while satisfying the resource constraints.,0,52,0,"{'ok': True, 'value': 88, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7cc33337ff3441d1a78f2cb0e93475fc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7cc33337ff3441d1a78f2cb0e93475fc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 25 COLUMNS\nAt line 164 RHS\nAt line 185 BOUNDS\nAt line 192 ENDATA\nProblem MODEL has 20 rows, 6 columns and 120 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 99 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -88 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                88.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n88.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17182540893554688}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [44, 43, 11, 38, 9, 34]
consumption (rows=resources) = [[7, 12, 10, 1, 16, 13], [2, 1, 13, 2, 8, 9], [9, 15, 10, 4, 7, 14], [4, 15, 11, 6, 15, 9]]
capacity = [36, 52, 62, 47]
upper_bounds = [5, 3, 3, 7, 3, 3]"
91,rod,32,2848,1053,0,0,0,"{'ok': True, 'value': 2848, 'stdout': '2848\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10738945007324219}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [89, 60, 40, 8, 3, 32, 23, 16, 53, 56, 4, 11, 74, 87, 86, 4, 12, 72, 17, 86, 87, 20, 42, 67, 36, 40, 51, 39, 69, 79, 42, 45]"
92,sub,4,256,256,1,256,1,"{'ok': True, 'value': 256, 'stdout': '256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10532546043395996}",1,Compute: 3860 - 3604
93,mul,4,73239243,18461520,0,72383823,0,"{'ok': True, 'value': 73239243, 'stdout': '73239243\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10736703872680664}",1,Compute: 8547 * 8569
94,ilp_assign,2,10,11,0,11,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41817378997802734}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [6, 5]]"
95,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10423874855041504}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddacccab""
T = ""acccaccad"""
96,rod,4,12,12,1,4,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08975648880004883}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 6, 5, 8]"
97,ilp_assign,8,33,36,0,42,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4163484573364258}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 10, 12, 7, 5, 5, 21], [16, 7, 16, 6, 5, 11, 9], [22, 1, 5, 9, 21, 3, 21], [15, 17, 18, 8, 14, 24, 8], [15, 21, 18, 2, 22, 12, 4], [14, 9, 19, 19, 3, 21, 16], [12, 7, 3, 6, 3, 1, 14]]"
98,knap,4,26,22,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09068942070007324}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 5, 8]
V = [5, 16, 10, 11]
C = 13"
99,knap,16,413,1043,0,0,0,"{'ok': True, 'value': 413, 'stdout': '413\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08980488777160645}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [20, 15, 31, 21, 19, 10, 5, 25, 1, 32, 15, 4, 3, 26, 6, 32]
V = [44, 60, 48, 41, 27, 6, 3, 27, 43, 41, 30, 60, 44, 43, 21, 20]
C = 132"
100,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10644412040710449}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 24, 13, 7, 5, 12, 3, 1]"
101,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10765504837036133}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 73, 25, 45, 33, 41, 84, 46, 21, 55, 21, 18, 65, 39, 85, 67, 20, 21, 37, 21, 40, 43, 16, 68]"
102,mul,2,1892,1912,0,1884,0,"{'ok': True, 'value': 1892, 'stdout': '1892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09428143501281738}",1,Compute: 86 * 22
103,mul,2,1520,38,0,1520,1,"{'ok': True, 'value': 1520, 'stdout': '1520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09998464584350586}",1,Compute: 40 * 38
104,mul,32,5007621967102985464882232380498427915448382439810297995082007936,5005957419556560982746608745447796491552056355839558520990068576,0,499999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,"{'ok': True, 'value': 5007621967102985464882232380498427915448382439810297995082007936, 'stdout': '5007621967102985464882232380498427915448382439810297995082007936\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08982467651367188}",1,Compute: 62537068349081325526119791560128 * 80074459825178994453669022697562
105,lcs,8,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09599876403808594}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbacdba""
T = ""cccbdbaac"""
106,mul,2,3850,3850,1,3850,1,"{'ok': True, 'value': 3850, 'stdout': '3850\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09489870071411133}",1,Compute: 55 * 70
107,add,2,115,115,1,115,1,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09595298767089844}",1,Compute: 87 + 28
108,knap,2,6,10,0,0,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09736919403076172}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 4]
V = [6, 5, 3]
C = 4"
109,add,2,52,52,1,52,1,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08039546012878418}",1,Compute: 18 + 34
110,rod,16,344,120,0,154,0,"{'ok': True, 'value': 344, 'stdout': '344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10617685317993164}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [18, 43, 26, 9, 27, 30, 26, 44, 19, 16, 43, 20, 48, 13, 46, 3]"
111,add,16,11142722613622978,111115126126820008,0,11142722613622978,1,"{'ok': True, 'value': 11142722613622978, 'stdout': '11142722613622978\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08717989921569824}",1,Compute: 4678531439802976 + 6464191173820002
112,ilp_assign,4,18,17,0,28,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4079456329345703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 10, 2, 4], [12, 5, 7, 3], [9, 8, 12, 5], [6, 11, 3, 11]]"
113,sub,4,1117,1117,1,1117,1,"{'ok': True, 'value': 1117, 'stdout': '1117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09073281288146973}",1,Compute: 4902 - 3785
114,ilp_partition,4,3,0,0,2,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08643722534179688}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 5, 1, 7]"
115,mul,8,1425568979003280,8,0,141343334927280,0,"{'ok': True, 'value': 1425568979003280, 'stdout': '1425568979003280\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0896906852722168}",1,Compute: 85971804 * 16581820
116,sub,2,79,79,1,79,1,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08789348602294922}",1,Compute: 99 - 20
117,sub,32,24311118786045221254327131894276,24395218786045220854327131906576,0,24311118786045221254327131904376,0,"{'ok': True, 'value': 24311118786045221254327131894276, 'stdout': '24311118786045221254327131894276\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09654593467712402}",1,Compute: 71719866154130818657093156541736 - 47408747368085597402766024647460
118,mul,4,17505866,378,0,17486826,0,"{'ok': True, 'value': 17505866, 'stdout': '17505866\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09232902526855469}",1,Compute: 3694 * 4739
119,knap,2,17,18,0,7,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10505008697509766}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 2]
V = [7, 10, 7]
C = 3"
120,knap,8,91,105,0,8,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1107785701751709}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 1, 6, 4, 12, 14, 8, 9]
V = [26, 23, 10, 6, 21, 14, 3, 26]
C = 34"
121,lcs,8,5,4,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08185267448425293}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdaaabc""
T = ""baabbabbb"""
122,mul{'ok': True, 'value': 3942868522282296999742064789126431723460032110790460344984653813, 'stdout': '3942868522282296999742064789126431723460032110790460344984653813\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11121654510498047}",1,Compute: 82541913939247601774318893004941 * 47768077260533627218156171632393
123,knap,16,457,138,0,0,0,"{'ok': True, 'value': 457, 'stdout': '457\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08873915672302246}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 12, 29, 27, 7, 27, 9, 2, 13, 14, 10, 16, 30, 24, 12, 15]
V = [53, 50, 42, 25, 53, 13, 25, 48, 33, 50, 1, 27, 7, 61, 44, 40]
C = 138"
124,sub,4,1404,1404,1,1404,1,"{'ok': True, 'value': 1404, 'stdout': '1404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08802485466003418}",1,Compute: 6378 - 4974
125,rod,8,152,22,0,30,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09926366806030273}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 15, 13, 14, 22, 16, 7, 9]"
126,rod,16,320,54,0,64,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10135626792907715}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 38, 7, 26, 21, 35, 34, 2, 19, 12, 3, 33, 1, 36, 23, 19]"
127,ilp_partition,16,1,1,1,35,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20284605026245117}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 32, 31, 20, 30, 18, 35, 13, 33, 33, 12, 14, 22, 4, 14, 41]"
128,knap,2,14,10,0,-1,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.105987548828125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 4, 3]
V = [8, 4, 6]
C = 4"
129,mul,8,6474732381118234,65444444540,0,6400483536844334,0,"{'ok': True, 'value': 6474732381118234, 'stdout': '6474732381118234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09522271156311035}",1,Compute: 72221509 * 89651026
130,ilp_assign,8,52,70,0,73,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4197506904602051}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 9, 22, 11, 14, 14, 5], [21, 22, 20, 23, 17, 21, 4], [20, 14, 15, 12, 10, 19, 16], [4, 15, 23, 14, 4, 14, 4], [10, 15, 9, 6, 13, 20, 5], [19, 14, 7, 5, 6, 17, 3], [8, 7, 12, 10, 10, 15, 16]]"
131,sub,16,2126227705246807,2126227705246807,1,2126227705246807,1,"{'ok': True, 'value': 2126227705246807, 'stdout': '2126227705246807\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11361217498779297}",1,Compute: 8296700900266109 - 6170473195019302
132,knap,8,62,103,0,0,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08635187149047852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 8, 8, 1, 2, 15, 16]
V = [22, 10, 5, 4, 4, 4, 15, 26]
C = 31"
133,ilp_partition,16,0,1,0,29,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.24257349967956543}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 38, 42, 5, 29, 2, 15, 45, 30, 10, 45, 11, 24, 36, 48, 30]"
134,add,2,71,71,1,71,1,"{'ok': True, 'value': 71, 'stdout': '71\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09702157974243164}",1,Compute: 49 + 22
135,add,2,120,120,1,120,1,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10393643379211426}",1,Compute: 42 + 78
136,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09702825546264648}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""c"""
137,mul,2,748,748,1,748,1,"{'ok': True, 'value': 748, 'stdout': '748\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09949660301208496}",1,Compute: 11 * 68
138,rod,32,1600,1050,0,1,0,"{'ok': True, 'value': 1600, 'stdout': '1600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08942127227783203}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [50, 52, 45, 71, 76, 64, 61, 48, 2, 94, 6, 84, 77, 60, 2, 63, 56, 4, 21, 61, 80, 81, 96, 90, 13, 34, 78, 17, 92, 22, 17, 48]"
139,rod,32,2560,720,0,0,0,"{'ok': True, 'value': 2560, 'stdout': '2560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08903145790100098}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [80, 65, 27, 50, 4, 67, 64, 90, 34, 83, 12, 24, 36, 70, 93, 72, 15, 72, 75, 62, 66, 27, 42, 25, 50, 72, 81, 20, 42, 72, 60, 7]"
140,ilp_assign,16,34,115,0,1,0,"{'ok': True, 'value': 34, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/70d596472f264d96b622d48ad7ea4e5b-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/70d596472f264d96b622d48ad7ea4e5b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 34 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 34\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 34 - took 0.00 seconds\nCbc0012I Integer solution of 34 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 34, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 34 to 34\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                34.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nThe minimum total cost is: 34.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17653274536132812}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 21, 2, 32, 30, 45, 23], [33, 14, 11, 21, 35, 32, 33], [38, 47, 32, 22, 13, 2, 4], [15, 30, 25, 42, 26, 8, 7], [12, 22, 17, 7, 11, 5, 38], [1, 25, 28, 36, 13, 8, 3], [24, 35, 1, 5, 1, 14, 8]]"
141,knap,4,18,18,1,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09925317764282227}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 3, 4, 3]
V = [6, 8, 10, 1]
C = 8"
142,mul{'ok': True, 'value': 77545967120285951480887788370400, 'stdout': '77545967120285951480887788370400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10459375381469727}",1,Compute: 9387794779052720 * 8260296368356570
143,ilp_prod,4,36,35,0,9,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1446eabe916b4d5d8f4635b0b9399372-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1446eabe916b4d5d8f4635b0b9399372-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17759299278259277}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 7]
consumption (rows=resources) = [[2, 1, 2], [4, 2, 2], [1, 3, 4]]
capacity = [10, 12, 9]
upper_bounds = [3, 3, 3]"
144,add,4,9878,8187,0,9878,1,"{'ok': True, 'value': 9878, 'stdout': '9878\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1059415340423584}",1,Compute: 6931 + 2947
145,ilp_assign,4,13,11,0,20,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4206256866455078}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3, 11, 6], [12, 6, 4, 11], [2, 9, 8, 3], [11, 5, 6, 4]]"
146,lcs,32,16,10,0,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09131145477294922}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaabccbbbdbcdacdcbabbbbbcbbcabc""
T = ""dacdddddcdabdbaaaadbbccbcadddcdd"""
147,ilp_partition,32,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20883774757385254}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 32, 27, 10, 69, 92, 3, 88, 93, 80, 38, 29, 36, 4, 82, 13, 88, 96, 51, 42, 9, 57, 77, 21]"
148,ilp_assign,16,47,115,0,117,0,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39670801162719727}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 24, 7, 35, 7, 14, 22], [32, 22, 1, 10, 14, 20, 35], [36, 24, 33, 44, 17, 8, 24], [1, 47, 30, 36, 17, 42, 5], [19, 46, 8, 24, 30, 1, 5], [28, 47, 11, 1, 45, 44, 22], [30, 31, 36, 43, 43, 17, 12]]"
149,mul,4,24631462,2432562,0,25188222,0,"{'ok': True, 'value': 24631462, 'stdout': '24631462\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09940409660339355}",1,Compute: 3898 * 6319
150,mul,4,13767032,11366112,0,1392632,0,"{'ok': True, 'value': 13767032, 'stdout': '13767032\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08777880668640137}",1,Compute: 3644 * 3778
151,sub,16,1293225406077872,13444443,0,1293225406077872,1,"{'ok': True, 'value': 1293225406077872, 'stdout': '1293225406077872\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08536195755004883}",1,Compute: 3748919686330189 - 2455694280252317
152,mul,2,1560,1560,1,1560,1,"{'ok': True, 'value': 1560, 'stdout': '1560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10217738151550293}",1,Compute: 52 * 30
153,lcs,16,11,7,0,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09937572479248047}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddaccadccbbabcca""
T = ""dddcbdbacbcccad"""
154,add,16,16555786581617571,9202010209,0,16555786581617571,1,"{'ok': True, 'value': 16555786581617571, 'stdout': '16555786581617571\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08930754661560059}",1,Compute: 8493082811625480 + 8062703769992091
155,lcs,8,5,5,1,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08929181098937988}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbccbdc""
T = ""dccbaccb"""
156,rod,8,80,22,0,1,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09203863143920898}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 5, 9, 18, 19, 22, 24, 2]"
157,ilp_partition,8,1,1,1,24,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10807991027832031}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 5, 6, 13, 6, 7, 14, 24]"
158,add,4,7705,4965,0,7705,1,"{'ok': True, 'value': 7705, 'stdout': '7705\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09742212295532227}",1,Compute: 4668 + 3037
159,ilp_prod,32,274,1065,0,23,0,"{'ok': True, 'value': 162, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/eaf96ce03ff546d7971755ebd5e1b7fe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/eaf96ce03ff546d7971755ebd5e1b7fe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 25 COLUMNS\nAt line 164 RHS\nAt line 185 BOUNDS\nAt line 192 ENDATA\nProblem MODEL has 20 rows, 6 columns and 120 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 172.8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -162 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                162.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n162.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17156720161437988}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [81, 53, 70, 22, 3, 39]
consumption (rows=resources) = [[21, 5, 2, 5, 12, 23], [30, 25, 1, 12, 16, 29], [24, 7, 30, 26, 28, 31], [15, 12, 16, 26, 19, 5]]
capacity = [104, 64, 103, 110]
upper_bounds = [3, 3, 3, 3, 3, 3]"
160,ilp_assign,16,68,105,0,45,0,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3855631351470947}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 18, 32, 16, 5, 12, 8], [28, 31, 43, 25, 31, 45, 8], [38, 27, 19, 17, 4, 13, 44], [15, 19, 37, 38, 38, 21, 29], [18, 29, 8, 27, 19, 6, 18], [4, 33, 16, 24, 40, 1, 25], [47, 48, 29, 14, 24, 17, 45]]"
161,knap,16,340,1024,0,23,0,"{'ok': True, 'value': 340, 'stdout': '340\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08937478065490723}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 10, 10, 22, 11, 25, 23, 23, 21, 26, 11, 29, 25, 9, 30, 22]
V = [24, 7, 5, 58, 34, 31, 16, 2, 61, 64, 30, 31, 17, 25, 37, 7]
C = 160"
162,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08828902244567871}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 48, 31, 68, 37, 19, 95, 40, 36, 91, 76, 6, 64, 68, 14, 29, 62, 27, 20, 16, 1, 74, 22, 79]"
163,sub,2,15,15,1,15,1,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09714031219482422}",1,Compute: 29 - 14
164,knap,16,454,1043,0,0,0,"{'ok': True, 'value': 454, 'stdout': '454\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09923577308654785}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 4, 26, 27, 21, 17, 29, 23, 8, 22, 25, 13, 13, 24, 1, 24]
V = [45, 26, 32, 45, 20, 49, 12, 52, 63, 25, 51, 64, 53, 36, 6, 23]
C = 139"
165,ilp_prod,8,36,105,0,2,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e78168115e9e42a1a18ffa2e5c1ed9b5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e78168115e9e42a1a18ffa2e5c1ed9b5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 50.8333 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -33 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 2 columns\nCbc0012I Integer solution of -48 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 3\nCbc0013I At root node, 1 cuts changed objective from -50.833333 to -48 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -48, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -50.8333 to -48\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17326879501342773}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 18, 6, 5]
consumption (rows=resources) = [[7, 4, 3, 4], [5, 6, 8, 8], [7, 4, 8, 6], [2, 4, 8, 5]]
capacity = [19, 16, 17, 18]
upper_bounds = [3, 3, 3, 3]"
166,rod,16,688,195,0,64,0,"{'ok': True, 'value': 688, 'stdout': '688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09074997901916504}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [43, 5, 35, 38, 16, 11, 22, 46, 39, 24, 38, 38, 39, 45, 1, 28]"
167,ilp_assign,8,51,76,0,80,0,"{'ok': True, 'value': 51, 'stdout': '51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40587568283081055}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 20, 15, 6, 19, 14, 10], [7, 18, 22, 9, 12, 21, 20], [11, 13, 20, 20, 23, 23, 19], [14, 24, 4, 13, 7, 2, 23], [7, 16, 22, 24, 11, 17, 8], [18, 24, 8, 16, 23, 24, 16], [8, 4, 5, 5, 24, 9, 11]]"
168,mul,8,2657970766157694,2121345680080554,0,4483605,0,"{'ok': True, 'value': 2657970766157694, 'stdout': '2657970766157694\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09325599670410156}",1,Compute: 74102489 * 35868846
169,knap,32,1612,1059,0,49,0,"{'ok': True, 'value': 1612, 'stdout': '1612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10534214973449707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 9, 20, 4, 39, 36, 16, 47, 17, 6, 29, 56, 6, 37, 57, 60, 15, 63, 49, 12, 56, 44, 4, 1, 62, 56, 57, 38, 47, 36, 60, 21]
V = [99, 57, 28, 36, 104, 3, 98, 101, 44, 29, 24, 29, 59, 26, 55, 77, 99, 11, 88, 83, 21, 82, 100, 92, 52, 35, 37, 112, 97, 85, 38, 40]
C = 541"
170,knap,32,1531,1043,0,25,0,"{'ok': True, 'value': 1531, 'stdout': '1531\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1039121150970459}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [40, 11, 55, 51, 45, 5, 18, 28, 34, 20, 25, 12, 10, 7, 7, 27, 16, 25, 27, 19, 6, 33, 12, 36, 25, 43, 53, 22, 37, 20, 10, 54]
V = [62, 6, 70, 128, 45, 35, 124, 29, 25, 14, 86, 84, 77, 25, 33, 2, 92, 101, 123, 41, 114, 62, 97, 45, 59, 49, 73, 91, 61, 2, 19, 97]
C = 416"
171,rod,16,528,64,0,155,0,"{'ok': True, 'value': 528, 'stdout': '528\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09272360801696777}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [33, 37, 27, 11, 45, 26, 5, 18, 15, 10, 43, 14, 46, 30, 12, 32]"
172,mul,2,2840,2840,1,2840,1,"{'ok': True, 'value': 2840, 'stdout': '2840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09020638465881348}",1,Compute: 40 * 71
173,ilp_prod,4,38,71,0,33,0,"{'ok': True, 'value': 11, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ad1b7a437e9c4d6f8b20354e14d146bd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ad1b7a437e9c4d6f8b20354e14d146bd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12.2222 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -11 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                11.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n11.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1861274242401123}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 6, 5]
consumption (rows=resources) = [[1, 3, 4], [3, 4, 1], [3, 4, 4]]
capacity = [16, 10, 16]
upper_bounds = [3, 3, 4]"
174,ilp_assign,32,75,110,0,200,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.396636962890625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[60, 28, 61, 30, 7, 44, 20], [12, 85, 14, 96, 77, 1, 30], [21, 65, 44, 85, 9, 18, 27], [8, 35, 37, 78, 61, 52, 4], [72, 27, 14, 55, 64, 72, 29], [26, 33, 55, 22, 7, 36, 64], [89, 6, 54, 24, 57, 53, 4]]"
175,add,16,14030943188302836,307081949915780126618,0,14031943188298836,0,"{'ok': True, 'value': 14030943188302836, 'stdout': '14030943188302836\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08742809295654297}",1,Compute: 9949915780126618 + 4081027408176218
176,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0975637435913086}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdabdddd""
T = ""dacbbcad"""
177,sub,4,385,385,1,-385,0,"{'ok': True, 'value': 385, 'stdout': '385\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11116290092468262}",1,Compute: 5519 - 5134
178,ilp_prod,8,48,60,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ea35e7t7/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_ea35e7t7/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16724324226379395}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3, 22, 4]
consumption (rows=resources) = [[5, 4, 2, 5], [5, 8, 8, 4], [5, 7, 8, 5], [8, 4, 7, 2]]
capacity = [29, 28, 22, 19]
upper_bounds = [3, 3, 3, 4]"
179,rod,2,12,6,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_nnhm8p4k/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_nnhm8p4k/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09958600997924805}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 1]"
180,mul,8,1270876625043701,131,0,12708843554411,0,"{'ok': True, 'value': 1270876625043701, 'stdout': '1270876625043701\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09748649597167969}",1,Compute: 98356667 * 12921103
181,add,32,84569279980692977104748347429124,90000000000000000000000000000000,0,84569280080792977165748407429124,0,"{'ok': True, 'value': 84569279980692977104748347429124, 'stdout': '84569279980692977104748347429124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10272550582885742}",1,Compute: 18002891103419739279064419071247 + 66566388877273237825683928357877
182,knap,16,431,135,0,0,0,"{'ok': True, 'value': 431, 'stdout': '431\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09632492065429688}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 26, 13, 2, 5, 30, 24, 14, 26, 28, 3, 6, 24, 13, 14, 24]
V = [60, 29, 64, 10, 25, 48, 47, 50, 57, 31, 20, 13, 50, 55, 40, 46]
C = 135"
183,mul,8,2709566490363900,2728377308493300,0,27116431884300,0,"{'ok': True, 'value': 2709566490363900, 'stdout': '2709566490363900\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0966026782989502}",1,Compute: 30010790 * 90286410
184,knap,8,111,147,0,10,0,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09660005569458008}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 10, 15, 9, 7, 5, 11, 10]
V = [9, 12, 21, 26, 19, 23, 29, 31]
C = 34"
185,mul,2,3366,3366,1,3386,0,"{'ok': True, 'value': 3366, 'stdout': '3366\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09441828727722168}",1,Compute: 34 * 99
186,ilp_partition,4,3,0,0,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09593987464904785}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 8, 12, 11]"
187,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09298539161682129}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [80, 52, 73, 82, 52, 5, 5, 1, 75, 50, 77, 93, 19, 27, 67, 39, 15, 73, 94, 31, 47, 93, 8, 90]"
188,rod,2,4,2,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_7jf533sb/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_7jf533sb/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0995779037475586}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 1]"
189,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08632111549377441}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""cc"""
190,ilp_partition,4,6,0,0,10,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08673739433288574}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 12, 10, 2]"
191,rod,8,168,23,0,1,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0901491641998291}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 19, 20, 5, 19, 23, 5, 23]"
192,sub,8,46044869,46044869,1,46044869,1,"{'ok': True, 'value': 46044869, 'stdout': '46044869\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09307074546813965}",1,Compute: 92290984 - 46246115
193,mul,16,52012832996071203055152938191737,522451999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,516484695973137659453666553,0,"{'ok': True, 'value': 52012832996071203055152938191737, 'stdout': '52012832996071203055152938191737\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09770607948303223}",1,Compute: 5571581027665419 * 9335381238790923
194,ilp_partition,2,1,The answer will be the minimum difference between the two groups.,0,15,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09160733222961426}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 6, 2]"
195,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 77, 'stdout': '77\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09432649612426758}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 1, 10, 7, 18, 17, 22, 1]"
196,rod,16,640,46,0,65,0,"{'ok': True, 'value': 640, 'stdout': '640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10189175605773926}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [40, 26, 7, 45, 35, 3, 39, 5, 7, 19, 22, 36, 23, 35, 6, 27]"
197,sub,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10109233856201172}",1,Compute: 83 - 25
198,sub,16,392892436267970,392974436267970,0,402892436277970,0,"{'ok': True, 'value': 392892436267970, 'stdout': '392892436267970\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09739446640014648}",1,Compute: 6545818454573975 - 6152926018306005
199,ilp_partition,8,0,1,0,14,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09230732917785645}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 10, 17, 4, 3, 24, 15, 14]"
200,ilp_assign,4,8,11,0,20,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.401339054107666}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 9, 3, 8], [4, 2, 12, 9], [5, 12, 2, 1], [7, 12, 2, 7]]"
201,add,4,4880,487,0,4880,1,"{'ok': True, 'value': 4880, 'stdout': '4880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09106802940368652}",1,Compute: 2568 + 2312
202,knap,16,441,1043,0,0,0,"{'ok': True, 'value': 441, 'stdout': '441\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11593008041381836}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 31, 23, 23, 32, 27, 12, 7, 27, 31, 5, 13, 17, 27, 14, 8]
V = [56, 29, 59, 29, 33, 3, 39, 53, 50, 45, 40, 1, 30, 34, 52, 28]
C = 155"
203,ilp_prod,32,338,1000,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tozuxj4s/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_tozuxj4s/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17162346839904785}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [71, 73, 40, 14, 53, 89]
consumption (rows=resources) = [[9, 22, 27, 16, 23, 25], [5, 1, 7, 28, 9, 31], [17, 26, 30, 11, 16, 21], [21, 9, 23, 6, 31, 4]]
capacity = [126, 128, 80, 102]
upper_bounds = [4, 3, 3, 4, 3, 3]"
204,rod,8,112,30,0,30,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08909296989440918}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 12, 8, 4, 14, 24, 16, 24]"
205,ilp_partition,8,0,1,0,96,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09065556526184082}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 23, 1, 5, 2, 6, 18, 9]"
206,add,16,7321289507199393,7321293507199393,0,7321316507209393,0,"{'ok': True, 'value': 7321289507199393, 'stdout': '7321289507199393\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10724735260009766}",1,Compute: 3290758218171243 + 4030531289028150
207,lcs,2,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08951115608215332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""dad"""
208,mul{'ok': True, 'value': 726237110538312364186337377990738010104134688639947412006938766, 'stdout': '726237110538312364186337377990738010104134688639947412006938766\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09820413589477539}",1,Compute: 20899029464049227788497855813857 * 34749800788002837007857474114638
209,ilp_prod,8,60,60,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ou609akk/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_ou609akk/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1543576717376709}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 7, 15]
consumption (rows=resources) = [[5, 1, 8, 2], [4, 1, 4, 3], [1, 8, 5, 5], [3, 7, 6, 2]]
capacity = [21, 19, 20, 31]
upper_bounds = [4, 3, 3, 4]"
210,add,2,73,73,1,73,1,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08708715438842773}",1,Compute: 46 + 27
211,ilp_assign,16,35,105,0,105,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40981411933898926}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 26, 20, 33, 3, 3, 1], [24, 8, 12, 47, 43, 43, 18], [1, 17, 3, 27, 27, 1, 5], [28, 34, 18, 13, 43, 16, 20], [8, 5, 24, 26, 34, 4, 23], [15, 19, 43, 25, 1, 30, 38], [21, 47, 9, 7, 46, 2, 25]]"
212,lcs,16,8,6,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09930300712585449}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdabcbcbacdaaac""
T = ""cdddccdbadbdccc"""
213,ilp_partition,16,0,1,0,32,0,"{'ok': True, 'value': 324, 'stdout': '324\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09704136848449707}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [35, 32, 6, 47, 45, 6, 18, 9, 20, 35, 8, 4, 18, 47, 5, 11]"
214,mul{'ok': True, 'value': 8342505389407417632086808769336, 'stdout': '8342505389407417632086808769336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08473443984985352}",1,Compute: 4471530914820443 * 1865693327034152
215,sub,32,37190255450403561340467520919428,37186662450403561340467520912188,0,37190255450403561340467520919428,1,"{'ok': True, 'value': 37190255450403561340467520919428, 'stdout': '37190255450403561340467520919428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11746430397033691}",1,Compute: 76130707580873471522506019378056 - 38940452130469910182038498458628
216,knap,2,14,13,0,5,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08856582641601562}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 3]
V = [6, 8, 5]
C = 3"
217,ilp_partition,4,1,0,0,24,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10142636299133301}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 12, 7]"
218,add,8,86182490,86182490,1,86182488,0,"{'ok': True, 'value': 86182490, 'stdout': '86182490\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10254979133605957}",1,Compute: 61349906 + 24832584
219,knap,2,10,13,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0890359878540039}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 3]
V = [3, 10, 2]
C = 5"
220,ilp_assign,8,22,56,0,75,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37743234634399414}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 14, 24, 15, 6, 12, 3], [8, 12, 22, 12, 7, 2, 11], [17, 23, 21, 4, 12, 9, 19], [21, 1, 3, 9, 5, 15, 9], [10, 3, 18, 3, 20, 5, 19], [4, 3, 18, 8, 20, 2, 5], [18, 11, 23, 4, 3, 5, 19]]"
221,rod,16,672,195,0,64,0,"{'ok': True, 'value': 672, 'stdout': '672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08856773376464844}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [42, 35, 11, 8, 23, 16, 37, 41, 20, 23, 13, 44, 3, 25, 11, 19]"
222,knap,16,380,141,0,2,0,"{'ok': True, 'value': 380, 'stdout': '380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10081744194030762}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 2, 19, 12, 20, 28, 17, 1, 19, 15, 30, 11, 30, 3, 25, 32]
V = [15, 36, 43, 5, 61, 39, 4, 24, 15, 27, 59, 25, 17, 40, 53, 7]
C = 141"
223,mul,16,61888131442807739304364148880978,121,0,6156663998463386554544456428,0,"{'ok': True, 'value': 61888131442807739304364148880978, 'stdout': '61888131442807739304364148880978\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09518933296203613}",1,Compute: 6520663580409789 * 9491078734492602
224,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09615898132324219}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 15, 16, 7, 8, 3, 10, 5]"
225,sub,4,2065,2065,1,2065,1,"{'ok': True, 'value': 2065, 'stdout': '2065\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09904050827026367}",1,Compute: 6768 - 4703
226,ilp_prod,2,20,35,0,20,1,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/da508f37b23d4655a9ae2ad64f66015c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/da508f37b23d4655a9ae2ad64f66015c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1826627254486084}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 5]
consumption (rows=resources) = [[2, 2], [1, 3]]
capacity = [8, 10]
upper_bounds = [4, 3]"
227,mul{'ok': True, 'value': 3959376507379182493737622299480, 'stdout': '3959376507379182493737622299480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0992119312286377}",1,Compute: 3233235722850110 * 1224586404077268
228,rod,16,240,46,0,64,0,"{'ok': True, 'value': 240, 'stdout': '240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08305120468139648}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [11, 30, 16, 21, 27, 4, 1, 15, 27, 31, 16, 22, 42, 16, 22, 46]"
229,sub,2,35,35,1,35,1,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1216592788696289}",1,Compute: 71 - 36
230,knap,8,94,53,0,0,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10817146301269531}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 9, 2, 12, 10, 13, 5, 2]
V = [13, 20, 14, 29, 19, 1, 3, 28]
C = 30"
231,ilp_prod,2,30,23,0,23,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/027cad24c3e74f38b20406af630341b3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/027cad24c3e74f38b20406af630341b3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1772146224975586}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 3]
consumption (rows=resources) = [[1, 1], [1, 2]]
capacity = [6, 8]
upper_bounds = [6, 4]"
232,sub,8,16236791,16236791,1,16236781,0,"{'ok': True, 'value': 16236791, 'stdout': '16236791\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11221742630004883}",1,Compute: 76045375 - 59808584
233,knap,2,7,10,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08277034759521484}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 2]
V = [5, 2, 5]
C = 3"
234,ilp_partition,4,2,1,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08510971069335938}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 6, 3, 12]"
235,mul,16,10717831027518384025533852848068,1083472538613595856000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,108797589743467744449644666666,0,"{'ok': True, 'value': 10717831027518384025533852848068, 'stdout': '10717831027518384025533852848068\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09721016883850098}",1,Compute: 1146693012843284 * 9346730910082877
236,ilp_partition,4,3,0,0,32,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08757901191711426}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 5, 6]"
237,add,4,16589,16515,0,16589,1,"{'ok': True, 'value': 16589, 'stdout': '16589\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09292101860046387}",1,Compute: 7194 + 9395
238,ilp_partition,4,2,1,0,13,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08697772026062012}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 1, 8, 5]"
239,lcs,32,21,26,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09497356414794922}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacdbdaadbbabcaacadbdcaaabbbddac""
T = ""cdcadbaaabbdadbbdadbcdaadbddacdd"""
240,knap,8,98,140,0,0,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09695672988891602}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 8, 1, 2, 2, 1, 8, 11]
V = [8, 6, 19, 17, 30, 4, 7, 28]
C = 22"
241,ilp_assign,8,30,36,0,36,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3875422477722168}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 14, 2, 14, 2, 13, 3], [15, 7, 21, 22, 11, 1, 5], [15, 17, 24, 15, 22, 14, 17], [2, 5, 5, 8, 16, 3, 2], [3, 18, 1, 1, 18, 11, 22], [3, 12, 2, 7, 16, 18, 3], [19, 7, 24, 10, 10, 1, 8]]"
242,rod,4,40,40,1,9,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08937907218933105}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 8, 9, 6]"
243,rod,32,640,1082,0,1,0,"{'ok': True, 'value': 640, 'stdout': '640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0882575511932373}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [20, 34, 59, 9, 31, 16, 67, 3, 78, 21, 77, 77, 36, 17, 61, 89, 41, 2, 30, 89, 55, 77, 58, 59, 10, 75, 72, 28, 13, 19, 45, 88]"
244,ilp_prod,4,38,33,0,33,0,"{'ok': True, 'value': 33, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/45bacb0889b74022bc121385fa6f3461-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/45bacb0889b74022bc121385fa6f3461-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 33 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -33 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                33.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n33.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17095112800598145}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 6, 10]
consumption (rows=resources) = [[3, 1, 3], [4, 2, 3], [4, 2, 3]]
capacity = [9, 15, 12]
upper_bounds = [3, 6, 3]"
245,add,8,53291380,53291380,1,53291380,1,"{'ok': True, 'value': 53291380, 'stdout': '53291380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08938002586364746}",1,Compute: 38502519 + 14788861
246,ilp_assign,32,99,187,0,110,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3961751461029053}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 14, 66, 60, 23, 13, 78], [23, 5, 30, 33, 70, 85, 13], [33, 9, 84, 5, 65, 96, 85], [2, 81, 20, 95, 96, 65, 16], [44, 40, 23, 81, 12, 2, 58], [79, 27, 53, 75, 24, 63, 70], [87, 46, 78, 23, 20, 79, 34]]"
247,ilp_prod,32,198,235,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_00a1aekv/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_00a1aekv/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15450668334960938}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 5, 81, 51, 26, 6]
consumption (rows=resources) = [[9, 14, 3, 15, 4, 29], [28, 3, 32, 25, 1, 15], [11, 13, 23, 5, 32, 17], [24, 4, 12, 1, 21, 4]]
capacity = [78, 72, 105, 66]
upper_bounds = [3, 5, 3, 3, 3, 3]"
248,knap,8,94,110,0,4,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0994100570678711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 1, 15, 9, 16, 8, 16, 4]
V = [15, 31, 8, 21, 8, 17, 22, 3]
C = 39"
249,sub,16,606902353891330,1602101010101010,0,6069023533891330,0,"{'ok': True, 'value': 606902353891330, 'stdout': '606902353891330\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10191679000854492}",1,Compute: 7602282401535993 - 6995380047644663
250,ilp_prod,16,216,209,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_e_9extq1/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_e_9extq1/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15568017959594727}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 31, 46, 5, 43, 35]
consumption (rows=resources) = [[15, 11, 10, 15, 2, 12], [16, 16, 8, 7, 3, 10], [9, 2, 11, 3, 11, 16], [6, 6, 8, 2, 13, 6]]
capacity = [48, 54, 64, 44]
upper_bounds = [3, 3, 4, 3, 3, 4]"
251,add,4,8115,8115,1,8115,1,"{'ok': True, 'value': 8115, 'stdout': '8115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09688091278076172}",1,Compute: 2016 + 6099
252,mul,2,3675,3675,1,3675,1,"{'ok': True, 'value': 3675, 'stdout': '3675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1015162467956543}",1,Compute: 75 * 49
253,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0962061882019043}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daad""
T = ""ddb"""
254,ilp_assign,16,55,105,0,114,0,"{'ok': True, 'value': 55, 'stdout': '55\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4116394519805908}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 43, 9, 41, 46, 46, 19], [1, 24, 20, 39, 41, 39, 30], [12, 8, 18, 39, 45, 34, 10], [35, 31, 20, 2, 8, 36, 16], [28, 38, 41, 27, 37, 4, 25], [41, 23, 5, 23, 36, 14, 36], [34, 46, 23, 10, 26, 31, 14]]"
255,add,32,38623865020157681191453871746784,1190,0,38623865019957681191453871746784,0,"{'ok': True, 'value': 38623865020157681191453871746784, 'stdout': '38623865020157681191453871746784\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09796285629272461}",1,Compute: 10076970936638733615176647769295 + 28546894083518947576277223977489
256,lcs,4,1,3,0,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09502601623535156}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abca""
T = ""bddb"""
257,mul,4,42979162,81,0,42949442,0,"{'ok': True, 'value': 42979162, 'stdout': '42979162\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10446524620056152}",1,Compute: 7162 * 6001
258,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09374523162841797}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbaabbcdbbddacc""
T = ""dadcaabcbdbbdbbbc"""
259,ilp_prod,8,56,64,0,31,0,"{'ok': True, 'value': 61, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5eac614180804018a222c2b7c2aa11dd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5eac614180804018a222c2b7c2aa11dd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 62.5091 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -46 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -61 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -62.509091 to -61 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -61, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -62.5091 to -61\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                61.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n61.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1664447784423828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 16, 13, 9]
consumption (rows=resources) = [[4, 3, 8, 7], [6, 8, 3, 2], [5, 8, 2, 3], [5, 4, 6, 7]]
capacity = [26, 18, 27, 31]
upper_bounds = [3, 3, 3, 3]"
260,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11876916885375977}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbbdaacbadadbdb""
T = ""abbadbbcccdbcbdab"""
261,knap,4,20,15,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09206581115722656}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 4, 4, 8]
V = [11, 5, 9, 1]
C = 11"
262,add,2,41,41,1,41,1,"{'ok': True, 'value': 41, 'stdout': '41\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09036779403686523}",1,Compute: 21 + 20
263,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10400152206420898}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdaaabb""
T = ""cdbcdba"""
264,ilp_partition,16,1,1,1,47,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20334291458129883}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 40, 48, 22, 4, 41, 16, 6, 47, 12, 25, 25, 31, 12, 3, 7]"
265,ilp_assign,8,39,69,0,91,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4115769863128662}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 10, 9, 14, 14, 9, 10], [5, 1, 8, 5, 20, 16, 7], [18, 18, 22, 16, 16, 2, 20], [22, 18, 16, 2, 1, 23, 24], [20, 4, 22, 8, 19, 3, 18], [8, 5, 14, 19, 22, 21, 24], [10, 5, 21, 21, 7, 9, 20]]"
266,knap,2,7,8,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08758544921875}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5]
V = [7, 5, 1]
C = 5"
267,knap,16,315,153,0,0,0,"{'ok': True, 'value': 315, 'stdout': '315\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08938455581665039}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 31, 3, 22, 32, 23, 17, 20, 29, 21, 7, 6, 9, 17, 31, 18]
V = [12, 10, 24, 26, 43, 23, 28, 33, 49, 25, 12, 34, 60, 5, 42, 23]
C = 153"
268,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0859215259552002}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baba""
T = ""bdbdd"""
269,add,4,11713,11713,1,11713,1,"{'ok': True, 'value': 11713, 'stdout': '11713\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08539676666259766}",1,Compute: 7753 + 3960
270,lcs,8,5,4,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10068416595458984}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acaaaabd""
T = ""aababbbd"""
271,ilp_assign,32,118,0,0,205,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ojvbcoa9/main.py"", line 14, in <module>\n    prob += lpSum([C[i][j] * x[i][j] for i in range(n) for j in range(n)])\n  File ""/tmp/cot_exec_ojvbcoa9/main.py"", line 14, in <listcomp>\n    prob += lpSum([C[i][j] * x[i][j] for i in range(n) for j in range(n)])\nTypeError: \'ellipsis\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.167236328125}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[72, 31, 67, 41, 62, 62, 69], [62, 32, 11, 16, 68, 42, 26], [78, 91, 47, 2, 21, 31, 11], [69, 81, 35, 52, 12, 31, 77], [87, 66, 4, 82, 4, 50, 65], [38, 35, 62, 83, 57, 21, 57], [49, 71, 67, 17, 81, 6, 90]]"
272,mul,4,23753323,23080,0,23585533,0,"{'ok': True, 'value': 23753323, 'stdout': '23753323\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0900106430053711}",1,Compute: 3593 * 6611
273,ilp_prod,8,93,70,0,26,0,"{'ok': True, 'value': 93, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d8642e836d744beabe6bc24ffc47ead5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d8642e836d744beabe6bc24ffc47ead5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 109.333 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -91 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -93 found by DiveCoefficient after 22 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3\nCbc0013I At root node, 3 cuts changed objective from -109.33333 to -93 in 11 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 24 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 19 row cuts average 2.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -93, took 22 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -109.333 to -93\nProbing was tried 11 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 11 times and created 24 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 11 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 11 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 11 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 11 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 11 times and created 19 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                93.00000000\nEnumerated nodes:               0\nTotal iterations:               22\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n93.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18483710289001465}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 16, 10, 19]
consumption (rows=resources) = [[3, 3, 8, 3], [1, 1, 7, 3], [1, 4, 7, 4], [8, 1, 7, 2]]
capacity = [24, 30, 17, 26]
upper_bounds = [3, 4, 3, 4]"
274,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09213376045227051}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""cc"""
275,rod,2,12,6,0,8,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08569216728210449}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
276,rod,16,624,502,0,65,0,"{'ok': True, 'value': 624, 'stdout': '624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09969782829284668}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [39, 1, 44, 8, 42, 4, 11, 1, 32, 39, 12, 9, 19, 20, 13, 23]"
277,ilp_prod,8,77,85,0,17,0,"{'ok': True, 'value': 38, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fa9b2e19d2924f9bbacb7a976bd721d9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fa9b2e19d2924f9bbacb7a976bd721d9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 53.8333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -38 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                38.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n38.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18247079849243164}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 12, 11, 10]
consumption (rows=resources) = [[2, 8, 2, 8], [6, 3, 5, 2], [1, 4, 4, 6], [3, 6, 6, 4]]
capacity = [25, 22, 32, 17]
upper_bounds = [3, 3, 3, 3]"
278,ilp_assign,2,7,2,0,11,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39200568199157715}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [5, 6]]"
279,knap,4,27,27,1,0,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08800458908081055}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 2, 2]
V = [12, 7, 9, 15]
C = 6"
280,ilp_assign,4,14,0,0,28,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37676095962524414}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 2, 12], [4, 12, 3, 3], [12, 5, 5, 11], [6, 3, 8, 12]]"
281,knap,8,106,147,0,0,0,"{'ok': True, 'value': 106, 'stdout': '106\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08906698226928711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 1, 2, 7, 6, 6, 15, 6]
V = [29, 13, 1, 3, 31, 32, 25, 18]
C = 28"
282,mul,8,5903209436675400,598868935386,0,5908235538515000,0,"{'ok': True, 'value': 5903209436675400, 'stdout': '5903209436675400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09330630302429199}",1,Compute: 75148950 * 78553452
283,lcs,8,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07975172996520996}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbadcdaa""
T = ""adbabacb"""
284,ilp_assign,32,97,187,0,209,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4309382438659668}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 40, 52, 58, 42, 54, 91], [38, 9, 5, 96, 89, 65, 3], [5, 90, 28, 87, 17, 59, 76], [10, 59, 71, 17, 11, 28, 72], [30, 85, 93, 87, 25, 18, 86], [70, 3, 71, 6, 43, 27, 4], [62, 77, 14, 23, 74, 9, 34]]"
285,ilp_assign,2,3,7,0,7,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3923928737640381}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [1, 5]]"
286,sub,2,66,66,1,66,1,"{'ok': True, 'value': 66, 'stdout': '66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0882105827331543}",1,Compute: 91 - 25
287,sub,16,3667956939422535,3667956939422535,1,3667956939422535,1,"{'ok': True, 'value': 3667956939422535, 'stdout': '3667956939422535\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10817384719848633}",1,Compute: 7173184072895549 - 3505227133473014
288,knap,32,1553,1649,0,6,0,"{'ok': True, 'value': 1553, 'stdout': '1553\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10087776184082031}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 2, 16, 4, 50, 30, 40, 14, 13, 47, 6, 34, 43, 41, 3, 24, 9, 61, 21, 16, 42, 35, 44, 26, 63, 2, 58, 13, 36, 63, 26, 14]
V = [107, 75, 46, 27, 92, 31, 29, 48, 40, 88, 128, 124, 44, 106, 75, 62, 6, 109, 74, 38, 52, 21, 81, 13, 27, 43, 11, 35, 61, 58, 98, 95]
C = 460"
289,mul,32,5537558449788751575131780799951106347653979375513592781913029328,"The answer to the problem is not a single integer, but a very large number that is the correct answer to the problem.",0,55343344332649645656564554364866644480,0,"{'ok': True, 'value': 5537558449788751575131780799951106347653979375513592781913029328, 'stdout': '5537558449788751575131780799951106347653979375513592781913029328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08779430389404297}",1,Compute: 89931088998476022969120166121816 * 61575574269789964802741085516558
290,sub,32,15885895896811907296870398466341,10,0,163885858957619073569246984755341,0,"{'ok': True, 'value': 15885895896811907296870398466341, 'stdout': '15885895896811907296870398466341\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09620332717895508}",1,Compute: 87491144989157985710828571872585 - 71605249092346078413958173406244
291,ilp_assign,4,7,3,0,24,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40903663635253906}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 10, 2, 7], [5, 12, 11, 1], [5, 1, 1, 10], [3, 6, 3, 7]]"
292,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09841513633728027}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 3, 1]"
293,mul{'ok': True, 'value': 2623107793048735425984531744944591800110272958462469993903074699, 'stdout': '2623107793048735425984531744944591800110272958462469993903074699\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08653378486633301}",1,Compute: 66187908898390661124745815964021 * 39631223235585789812003516312319
294,sub,16,176065515313453,1760655215313453,0,1760654153143553,0,"{'ok': True, 'value': 176065515313453, 'stdout': '176065515313453\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09513378143310547}",1,Compute: 6427856732874287 - 6251791217560834
295,add,4,9503,35,0,9503,1,"{'ok': True, 'value': 9503, 'stdout': '9503\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09176111221313477}",1,Compute: 1723 + 7780
296,ilp_prod,32,220,1050,0,2016,0,"{'ok': True, 'value': 198, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/528bf93e718c426684700e203a99b1bc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/528bf93e718c426684700e203a99b1bc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 66 RHS\nAt line 73 BOUNDS\nAt line 80 ENDATA\nProblem MODEL has 6 rows, 6 columns and 36 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 206.8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -198 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                198.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n198.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17766308784484863}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [66, 36, 60, 33, 24, 58]
consumption (rows=resources) = [[4, 6, 14, 13, 8, 30], [24, 31, 23, 19, 6, 15], [31, 20, 28, 24, 22, 27], [16, 5, 17, 3, 3, 4]]
capacity = [121, 94, 107, 119]
upper_bounds = [3, 3, 3, 4, 4, 3]"
297,knap,4,25,1,0,0,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0904386043548584}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 2, 4]
V = [16, 10, 9, 13]
C = 9"
298,knap,16,351,1043,0,-1,0,"{'ok': True, 'value': 351, 'stdout': '351\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09659767150878906}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 10, 19, 4, 14, 18, 4, 19, 17, 5, 6, 25, 27, 32, 24, 18]
V = [14, 21, 40, 2, 21, 51, 31, 55, 22, 54, 20, 16, 57, 46, 39, 22]
C = 125"
299,sub,16,4567593293634296,-5,0,-4567407293634304,0,"{'ok': True, 'value': 4567593293634296, 'stdout': '4567593293634296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10443544387817383}",1,Compute: 9893773899922493 - 5326180606288197
300,add,32,104890374290180212631542100496847,104890374289780212631542099596847,0,104890374290180212631542100596847,0,"{'ok': True, 'value': 104890374290180212631542100496847, 'stdout': '104890374290180212631542100496847\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09186482429504395}",1,Compute: 50262527099870594436306521807331 + 54627847190309618195235578689516
301,sub,16,529062003673817,6829061903673817,0,529061993673816,0,"{'ok': True, 'value': 529062003673817, 'stdout': '529062003673817\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08739876747131348}",1,Compute: 7622497427856106 - 7093435424182289
302,mul,8,4383403648636572,1465701426,0,434634436528132,0,"{'ok': True, 'value': 4383403648636572, 'stdout': '4383403648636572\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09304237365722656}",1,Compute: 88312644 * 49635063
303,ilp_prod,4,29,41,0,48,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b79910511617414c8e4b086da28962c9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b79910511617414c8e4b086da28962c9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 27 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1722266674041748}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 5, 3]
consumption (rows=resources) = [[3, 4, 4], [2, 4, 2], [4, 1, 1]]
capacity = [16, 14, 9]
upper_bounds = [3, 3, 4]"
304,knap,32,1572,1043,0,64,0,"{'ok': True, 'value': 1572, 'stdout': '1572\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10909247398376465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 57, 39, 15, 4, 44, 35, 51, 31, 61, 29, 31, 50, 33, 64, 50, 28, 14, 55, 31, 33, 4, 38, 52, 53, 43, 13, 49, 42, 43, 60, 44]
V = [120, 51, 47, 3, 122, 102, 72, 77, 18, 26, 53, 67, 67, 92, 14, 78, 5, 13, 96, 103, 50, 124, 47, 42, 95, 20, 77, 32, 42, 115, 7, 99]
C = 608"
305,rod,32,816,89,0,659,0,"{'ok': True, 'value': 816, 'stdout': '816\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08807539939880371}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [22, 51, 12, 42, 61, 17, 31, 41, 89, 2, 61, 15, 29, 96, 96, 23, 31, 94, 15, 80, 74, 31, 76, 28, 5, 40, 72, 78, 85, 88, 17, 89]"
306,rod,4,14,10,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gbcos3yv/main.py"", line 22, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_gbcos3yv/main.py"", line 10, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0822896957397461}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 7, 11, 10]"
307,rod,4,24,24,1,7,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09688544273376465}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 10, 6, 7]"
308,rod,4,48,11,0,12,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08793020248413086}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 12, 6, 11]"
309,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09120321273803711}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcddcdbabdbacac""
T = ""dbdbadaacccbbaba"""
310,ilp_assign,16,40,105,0,114,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3882870674133301}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 46, 22, 25, 13, 6, 27], [47, 23, 1, 12, 39, 27, 12], [4, 48, 14, 41, 3, 16, 29], [12, 4, 38, 34, 23, 24, 3], [35, 38, 9, 48, 33, 18, 1], [31, 21, 16, 42, 23, 48, 2], [33, 44, 31, 1, 23, 19, 14]]"
311,rod,16,432,46,0,65,0,"{'ok': True, 'value': 432, 'stdout': '432\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09497761726379395}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [27, 16, 42, 11, 24, 12, 6, 41, 4, 9, 39, 10, 39, 19, 15, 35]"
312,add,4,11336,8723,0,11336,1,"{'ok': True, 'value': 11336, 'stdout': '11336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08162498474121094}",1,Compute: 2613 + 8723
313,add,2,147,147,1,147,1,"{'ok': True, 'value': 147, 'stdout': '147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08694148063659668}",1,Compute: 75 + 72
314,sub,16,261291207632007,66108202076321,0,2612912076431007,0,"{'ok': True, 'value': 261291207632007, 'stdout': '261291207632007\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1116478443145752}",1,Compute: 3441159060540906 - 3179867852908899
315,ilp_partition,16,0,1,0,124,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10745811462402344}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 4, 11, 27, 27, 35, 21, 48, 47, 26, 32, 31, 46, 15, 7, 1]"
316,ilp_assign,16,69,105,0,114,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43749547004699707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 12, 7, 36, 28, 36, 18], [23, 4, 34, 33, 30, 15, 35], [34, 41, 34, 29, 22, 45, 10], [15, 46, 1, 48, 46, 39, 1], [43, 41, 27, 32, 43, 11, 30], [21, 14, 37, 44, 11, 5, 41], [6, 29, 22, 24, 25, 16, 48]]"
317,rod,2,12,6,0,8,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10474801063537598}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
318,sub,32,43288609340566966438184332425648,The final answer will be the result of the subtraction operation.,0,43288590340566966438184332425648,0,"{'ok': True, 'value': 43288609340566966438184332425648, 'stdout': '43288609340566966438184332425648\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09829568862915039}",1,Compute: 53844458575888648390886458491404 - 10555849235321681952702126065756
319,rod,8,136,30,0,1,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09150004386901855}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 8, 8, 5, 15, 7, 16, 20]"
320,sub,8,31634483,17802481,0,31634483,1,"{'ok': True, 'value': 31634483, 'stdout': '31634483\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.089569091796875}",1,Compute: 49436964 - 17802481
321,rod,32,1728,84,0,30,0,"{'ok': True, 'value': 1728, 'stdout': '1728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08932614326477051}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [54, 28, 82, 17, 53, 85, 74, 15, 78, 36, 48, 30, 46, 26, 70, 25, 27, 53, 90, 57, 77, 61, 33, 84, 30, 76, 69, 46, 50, 5, 25, 5]"
322,add,16,13592556241541092,36111020325650964,0,13592556241541092,1,"{'ok': True, 'value': 13592556241541092, 'stdout': '13592556241541092\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09027361869812012}",1,Compute: 4825166833995107 + 8767389407545985
323,sub,8,68010157,67990157,0,67810157,0,"{'ok': True, 'value': 68010157, 'stdout': '68010157\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09026312828063965}",1,Compute: 81615796 - 13605639
324,ilp_partition,2,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0947110652923584}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 5, 4]"
325,rod,32,992,1024,0,1,0,"{'ok': True, 'value': 992, 'stdout': '992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10079669952392578}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [31, 43, 2, 38, 65, 53, 18, 96, 20, 13, 71, 82, 4, 33, 41, 39, 79, 3, 64, 27, 68, 23, 96, 63, 10, 85, 62, 6, 41, 24, 10, 27]"
326,lcs,8,4,4,1,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09541153907775879}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baabcccb""
T = ""ccadccc"""
327,ilp_prod,8,78,83,0,19,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0d9d5ce52ecc4ca994985d81c1281ec3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0d9d5ce52ecc4ca994985d81c1281ec3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.22298073768615723}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 15, 11, 12]
consumption (rows=resources) = [[7, 5, 2, 1], [1, 3, 4, 1], [3, 5, 3, 3], [8, 1, 8, 5]]
capacity = [23, 27, 19, 22]
upper_bounds = [3, 3, 3, 4]"
328,sub,32,75268957641539118686081666311690,12792198415664463728235201596266,0,75268957641539118626081666311690,0,"{'ok': True, 'value': 75268957641539118686081666311690, 'stdout': '75268957641539118686081666311690\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09297585487365723}",1,Compute: 88061156057203582414316867907956 - 12792198415664463728235201596266
329,ilp_assign,16,57,115,0,39,0,"{'ok': True, 'value': 57, 'stdout': '57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6776711940765381}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 40, 14, 30, 46, 3, 15], [8, 45, 24, 21, 18, 38, 41], [26, 21, 13, 30, 10, 6, 13], [48, 35, 14, 30, 15, 16, 11], [35, 28, 6, 15, 12, 30, 6], [16, 41, 22, 41, 18, 34, 2], [43, 9, 48, 2, 12, 5, 39]]"
330,ilp_assign,4,14,18,0,18,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.47830796241760254}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 8, 10, 8], [5, 4, 7, 12], [1, 6, 6, 3], [2, 9, 5, 8]]"
331,mul,8,2485770972850482,253934344,0,25046304034422,0,"{'ok': True, 'value': 2485770972850482, 'stdout': '2485770972850482\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08794140815734863}",1,Compute: 46046127 * 53984366
332,rod,4,36,36,1,8,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1053457260131836}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 8, 9, 7]"
333,sub,4,3706,3706,1,3706,1,"{'ok': True, 'value': 3706, 'stdout': '3706\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09554100036621094}",1,Compute: 6964 - 3258
334,ilp_assign,16,67,105,0,110,0,"{'ok': True, 'value': 67, 'stdout': '67\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39881253242492676}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 40, 14, 25, 8, 37, 40], [44, 38, 36, 20, 31, 5, 31], [21, 16, 37, 24, 15, 2, 16], [6, 2, 12, 21, 40, 35, 10], [33, 12, 32, 11, 24, 34, 16], [23, 10, 45, 45, 40, 42, 6], [24, 37, 37, 22, 9, 34, 17]]"
335,ilp_prod,16,316,240,0,204,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_50ewd1_o/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_50ewd1_o/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1680281162261963}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [38, 8, 20, 48, 15, 8]
consumption (rows=resources) = [[16, 1, 2, 10, 7, 4], [13, 10, 16, 4, 10, 6], [11, 2, 4, 1, 16, 7], [11, 14, 8, 1, 8, 8]]
capacity = [63, 62, 53, 43]
upper_bounds = [3, 3, 3, 6, 3, 5]"
336,ilp_assign,2,5,4,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40738630294799805}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 3], [2, 2]]"
337,ilp_prod,16,344,160,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_g9f202g_/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_g9f202g_/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1607346534729004}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 35, 46, 20, 8, 14]
consumption (rows=resources) = [[1, 5, 10, 16, 8, 6], [12, 2, 8, 14, 16, 1], [1, 4, 8, 2, 1, 12], [7, 2, 16, 2, 8, 9]]
capacity = [40, 53, 51, 46]
upper_bounds = [4, 8, 3, 3, 3, 4]"
338,mul,2,8099,8369,0,8219,0,"{'ok': True, 'value': 8099, 'stdout': '8099\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09553050994873047}",1,Compute: 91 * 89
339,ilp_partition,4,1,0,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0932471752166748}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 4, 9, 5]"
340,lcs,4,2,3,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0994725227355957}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adba""
T = ""dabbb"""
341,ilp_partition,16,0,1,0,274,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10947084426879883}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 46, 5, 40, 30, 3, 26, 37, 24, 40, 4, 26, 17, 13, 10, 15]"
342,lcs,32,21,10,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08814382553100586}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccacccdadbbdadcbabcdbccddccdaaad""
T = ""adcbbbbacbbcddbbdcbacdcbacdbbddad"""
343,rod,32,960,1055,0,659,0,"{'ok': True, 'value': 960, 'stdout': '960\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09166860580444336}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [21, 60, 44, 95, 7, 45, 56, 27, 79, 78, 94, 84, 76, 22, 18, 78, 40, 18, 96, 37, 9, 57, 25, 38, 52, 95, 91, 52, 66, 58, 66, 38]"
344,knap,16,455,126,0,0,0,"{'ok': True, 'value': 455, 'stdout': '455\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09780049324035645}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 19, 22, 15, 22, 26, 8, 13, 11, 27, 5, 27, 30, 2, 9, 1]
V = [24, 15, 59, 41, 57, 33, 3, 29, 53, 43, 38, 33, 60, 32, 56, 56]
C = 126"
345,ilp_partition,2,2,0,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08602094650268555}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 5, 5]"
346,knap,2,14,8,0,-1,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0889737606048584}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 4]
V = [7, 7, 1]
C = 3"
347,ilp_prod,16,312,169,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_62bagpfr/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_62bagpfr/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15881061553955078}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 38, 33, 40, 46, 48]
consumption (rows=resources) = [[13, 15, 6, 11, 7, 7], [15, 15, 7, 1, 1, 1], [8, 13, 1, 5, 2, 6], [10, 12, 8, 2, 16, 11]]
capacity = [61, 47, 64, 53]
upper_bounds = [3, 3, 6, 5, 3, 4]"
348,ilp_assign,4,20,13,0,15,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39363622665405273}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 10, 11, 3], [3, 12, 9, 10], [6, 11, 12, 8], [12, 2, 7, 5]]"
349,knap,4,21,18,0,-1,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0919497013092041}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 2, 2, 8]
V = [11, 6, 10, 8]
C = 9"
350,knap,2,10,11,0,1,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08807611465454102}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 3]
V = [1, 8, 10]
C = 4"
351,ilp_prod,8,60,103,0,2,0,"{'ok': True, 'value': 60, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a436f08c44e74de2a38e6714d6da44d2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a436f08c44e74de2a38e6714d6da44d2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 70 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -40 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -60 found by DiveCoefficient after 5 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -70 to -60 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -60, took 5 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -70 to -60\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                60.00000000\nEnumerated nodes:               0\nTotal iterations:               5\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n60.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1772937774658203}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 20, 9, 9]
consumption (rows=resources) = [[3, 8, 7, 3], [2, 5, 7, 6], [6, 5, 7, 6], [4, 1, 7, 3]]
capacity = [26, 18, 20, 23]
upper_bounds = [3, 3, 3, 3]"
352,ilp_prod,4,48,44,0,33,0,"{'ok': True, 'value': 22, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e42968d145e64dabaa3e0039628f3451-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e42968d145e64dabaa3e0039628f3451-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 27.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -22 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                22.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n22.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16718459129333496}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 4, 11]
consumption (rows=resources) = [[3, 1, 1], [3, 1, 2], [1, 2, 4]]
capacity = [10, 10, 15]
upper_bounds = [3, 7, 3]"
353,sub,4,1465,1465,1,1465,1,"{'ok': True, 'value': 1465, 'stdout': '1465\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09281516075134277}",1,Compute: 8719 - 7254
354,ilp_partition,4,2,1,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_h5uxwm8g/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_h5uxwm8g/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09896230697631836}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 8, 2, 3]"
355,ilp_assign,4,9,10,0,20,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4328956604003906}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 8, 11, 3], [12, 3, 1, 2], [3, 11, 2, 7], [10, 2, 5, 2]]"
356,add,16,15921433763383785,15921433763383785,1,15921433763383785,1,"{'ok': True, 'value': 15921433763383785, 'stdout': '15921433763383785\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08632731437683105}",1,Compute: 7888344864288389 + 8033088899095396
357,mul,8,2888600710935360,185,0,293033833688880,0,"{'ok': True, 'value': 2888600710935360, 'stdout': '2888600710935360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0911099910736084}",1,Compute: 49722122 * 58094880
358,add,4,13339,38,0,13339,1,"{'ok': True, 'value': 13339, 'stdout': '13339\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09633278846740723}",1,Compute: 6465 + 6874
359,add,2,82,82,1,82,1,"{'ok': True, 'value': 82, 'stdout': '82\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09720158576965332}",1,Compute: 21 + 61
360,add,4,8096,8096,1,8106,0,"{'ok': True, 'value': 8096, 'stdout': '8096\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09611845016479492}",1,Compute: 6747 + 1349
361,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09716463088989258}",1,Compute: 59 + 63
362,sub,4,5489,5489,1,5489,1,"{'ok': True, 'value': 5489, 'stdout': '5489\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09485268592834473}",1,Compute: 8070 - 2581
363,ilp_partition,16,0,1,0,0,1,"{'ok': True, 'value': 358, 'stdout': '358\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09126877784729004}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 48, 31, 6, 48, 25, 4, 26, 3, 30, 36, 5, 28, 43, 3, 2]"
364,add,32,93145670098400106846259645201052,93145669098400106846259645200952,0,93145669998400106846259645201052,0,"{'ok': True, 'value': 93145670098400106846259645201052, 'stdout': '93145670098400106846259645201052\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.090484619140625}",1,Compute: 70366541210050397985954794990885 + 22779128888349708860304850210167
365,ilp_assign,2,4,9,0,9,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4254167079925537}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [3, 6]]"
366,add,16,14762593205546333,8899594755314440,0,14762593195546333,0,"{'ok': True, 'value': 14762593205546333, 'stdout': '14762593205546333\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09520483016967773}",1,Compute: 6026097354156460 + 8736495851389873
367,ilp_prod,8,92,100,0,5,0,"{'ok': True, 'value': 92, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/698d30e42ccc44eca6ada2fd817e9dd0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/698d30e42ccc44eca6ada2fd817e9dd0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 92 - 0.00 seconds\nCgl0004I processed model has 3 rows, 4 columns (4 integer (0 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -92 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -92, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -92 to -92\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                92.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n92.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19583821296691895}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 23, 23, 23]
consumption (rows=resources) = [[4, 1, 2, 1], [7, 6, 4, 4], [6, 7, 2, 1], [8, 7, 5, 5]]
capacity = [28, 24, 28, 20]
upper_bounds = [3, 3, 4, 4]"
368,rod,8,184,27,0,1,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10601377487182617}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 4, 11, 19, 6, 3, 23, 9]"
369,sub,4,1632,1632,1,1632,1,"{'ok': True, 'value': 1632, 'stdout': '1632\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10805225372314453}",1,Compute: 8584 - 6952
370,ilp_assign,8,49,58,0,46,0,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4452190399169922}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2, 19, 22, 19, 23, 17], [13, 6, 13, 15, 2, 9, 15], [12, 21, 10, 13, 20, 14, 17], [3, 14, 16, 24, 10, 8, 1], [14, 10, 20, 15, 19, 19, 16], [13, 22, 11, 24, 12, 20, 5], [12, 10, 19, 15, 5, 17, 7]]"
371,add,2,120,120,1,120,1,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0914919376373291}",1,Compute: 55 + 65
372,ilp_assign,8,41,105,0,36,0,"{'ok': True, 'value': 41, 'stdout': '41\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40987133979797363}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 24, 23, 2, 1, 9, 13], [17, 21, 21, 13, 7, 21, 23], [2, 13, 19, 17, 22, 1, 22], [22, 11, 16, 8, 12, 18, 11], [21, 19, 20, 2, 23, 2, 8], [15, 14, 16, 24, 9, 10, 20], [3, 1, 9, 3, 4, 8, 18]]"
373,mul{'ok': True, 'value': 85501188585978818195871761152299, 'stdout': '85501188585978818195871761152299\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08809232711791992}",1,Compute: 9613176151713839 * 8894166427059141
374,rod,16,368,46,0,65,0,"{'ok': True, 'value': 368, 'stdout': '368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1002810001373291}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [23, 31, 16, 27, 29, 44, 34, 3, 46, 48, 40, 3, 12, 42, 27, 11]"
375,add,16,12312112175057937,7630865894100101,0,12312112175057937,1,"{'ok': True, 'value': 12312112175057937, 'stdout': '12312112175057937\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09618616104125977}",1,Compute: 7590765299981586 + 4721346875076351
376,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08848357200622559}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 1]"
377,rod,32,1216,1084,0,1,0,"{'ok': True, 'value': 1216, 'stdout': '1216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0865790843963623}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [38, 19, 6, 91, 48, 35, 46, 53, 55, 39, 35, 55, 10, 90, 56, 71, 65, 32, 36, 14, 21, 25, 2, 73, 78, 34, 33, 50, 72, 40, 94, 4]"
378,ilp_prod,2,32,23,0,24,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/11f38f07578644d2bd68be8c1b7b941d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/11f38f07578644d2bd68be8c1b7b941d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17452120780944824}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3]
consumption (rows=resources) = [[1, 3], [2, 1]]
capacity = [7, 8]
upper_bounds = [4, 3]"
379,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08499479293823242}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbb""
T = ""acbc"""
380,add,2,109,109,1,109,1,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08751177787780762}",1,Compute: 61 + 48
381,ilp_prod,8,48,60,0,19,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/692ca432a79340a8a158a3045900d207-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/692ca432a79340a8a158a3045900d207-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 56.3077 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -48 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -55.157895 to -48 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -48, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -55.1579 to -48\nProbing was tried 1 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16395902633666992}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 14, 18, 12]
consumption (rows=resources) = [[6, 6, 6, 2], [5, 7, 2, 8], [6, 6, 7, 2], [2, 1, 3, 6]]
capacity = [23, 16, 18, 19]
upper_bounds = [3, 3, 3, 3]"
382,ilp_partition,2,1,0,0,14,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09891819953918457}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 5, 1]"
383,sub,4,4072,4072,1,4072,1,"{'ok': True, 'value': 4072, 'stdout': '4072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08891463279724121}",1,Compute: 7332 - 3260
384,knap,16,470,141,0,0,0,"{'ok': True, 'value': 470, 'stdout': '470\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09293079376220703}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 1, 11, 16, 14, 32, 19, 31, 16, 7, 13, 15, 24, 14, 30, 24]
V = [40, 17, 12, 39, 34, 37, 52, 15, 62, 60, 55, 47, 10, 52, 34, 16]
C = 141"
385,ilp_prod,16,76,135,0,3,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7bd69c2490a44722b6007ac7adac5fec-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7bd69c2490a44722b6007ac7adac5fec-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 16 COLUMNS\nAt line 101 RHS\nAt line 113 BOUNDS\nAt line 120 ENDATA\nProblem MODEL has 11 rows, 6 columns and 66 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6.4 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16882872581481934}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 15, 31, 8, 8, 10]
consumption (rows=resources) = [[16, 5, 16, 10, 3, 15], [5, 9, 5, 7, 3, 2], [2, 10, 9, 16, 8, 15], [7, 12, 13, 7, 14, 5]]
capacity = [36, 46, 59, 51]
upper_bounds = [3, 4, 3, 3, 3, 3]"
386,ilp_prod,32,476,1004,0,127,0,"{'ok': True, 'value': 136, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/df1c7cbeaaf94ff494c2d9ca326ec4a6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/df1c7cbeaaf94ff494c2d9ca326ec4a6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 21 COLUMNS\nAt line 136 RHS\nAt line 153 BOUNDS\nAt line 160 ENDATA\nProblem MODEL has 16 rows, 6 columns and 96 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 189.931 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -136 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                136.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n136.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18854951858520508}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [68, 11, 68, 58, 40, 59]
consumption (rows=resources) = [[24, 6, 10, 6, 19, 2], [23, 20, 25, 29, 2, 18], [3, 29, 17, 8, 7, 14], [25, 28, 25, 3, 2, 9]]
capacity = [127, 84, 121, 81]
upper_bounds = [3, 3, 3, 3, 6, 4]"
387,knap,4,17,23,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08401060104370117}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 6, 3, 1]
V = [8, 16, 13, 1]
C = 8"
388,mul{'ok': True, 'value': 12576754518188355248176550478708, 'stdout': '12576754518188355248176550478708\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10097098350524902}",1,Compute: 8994248978245902 * 1398310692600054
389,sub,4,2436,2436,1,2436,1,"{'ok': True, 'value': 2436, 'stdout': '2436\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09596610069274902}",1,Compute: 3656 - 1220
390,mul,4,27884675,10855,0,28484425,0,"{'ok': True, 'value': 27884675, 'stdout': '27884675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08829832077026367}",1,Compute: 7735 * 3605
391,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09299921989440918}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 28, 85, 80, 47, 35, 47, 40, 31, 23, 8, 17, 79, 87, 44, 34, 35, 82, 81, 80, 27, 52, 10, 89]"
392,add,8,157868311,157868311,1,157868311,1,"{'ok': True, 'value': 157868311, 'stdout': '157868311\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0879368782043457}",1,Compute: 86892286 + 70976025
393,sub,16,1035231043331137,1045231044331137,0,1055231043333127,0,"{'ok': True, 'value': 1035231043331137, 'stdout': '1035231043331137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09871459007263184}",1,Compute: 7329010454848692 - 6293779411517555
394,mul,16,24342118235047427514092622991665,240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,24419865798424756,0,"{'ok': True, 'value': 24342118235047427514092622991665, 'stdout': '24342118235047427514092622991665\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09224987030029297}",1,Compute: 7549968449606185 * 3224135093745609
395,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09030461311340332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbabccadbdababac""
T = ""bacaabbabbbcbbab"""
396,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10679912567138672}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 3, 2, 4]"
397,add,2,146,146,1,146,1,"{'ok': True, 'value': 146, 'stdout': '146\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0979912281036377}",1,Compute: 79 + 67
398,sub,16,8588342781949475,9504265796567475,0,8588372782049475,0,"{'ok': True, 'value': 8588342781949475, 'stdout': '8588342781949475\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10792994499206543}",1,Compute: 9606042797625227 - 1017700015675752
399,lcs,32,17,10,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10253453254699707}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaaabcbcdaccbbbbbadcdccadbbdaad""
T = ""cddbddbddbcacbdcbcbaacbbacacadca"""
400,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10210466384887695}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""dbc"""
401,ilp_prod,32,405,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are that the total consumption of each resource must not exceed its capacity and that the quantity produced for each product must be non-negative. The upper bounds on the quantity of each product that can be produced are given by upper_bounds[j]. The problem is then solved using a linear programming solver, and the maximum profit is the value of the objective function after solving the problem.",0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_i7kzmoke/main.py"", line 18\n    prob += lpSum([13*x[j] for j] in range(6)) <= 3\n                                ^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08442068099975586}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [58, 54, 45, 81, 45, 22]
consumption (rows=resources) = [[2, 3, 20, 18, 20, 17], [17, 32, 2, 13, 3, 3], [19, 13, 30, 13, 26, 7], [17, 26, 19, 12, 25, 22]]
capacity = [93, 121, 75, 110]
upper_bounds = [3, 3, 3, 5, 3, 5]"
402,add,2,142,142,1,142,1,"{'ok': True, 'value': 142, 'stdout': '142\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10179877281188965}",1,Compute: 66 + 76
403,ilp_prod,8,122,100,0,3,0,"{'ok': True, 'value': 122, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ae676d76bf274920b18921de891d892a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ae676d76bf274920b18921de891d892a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 43 RHS\nAt line 49 BOUNDS\nAt line 54 ENDATA\nProblem MODEL has 5 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 125 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -109 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 2 columns\nCbc0012I Integer solution of -122 found by DiveCoefficient after 3 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 2\nCbc0013I At root node, 2 cuts changed objective from -125 to -122 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -122, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -125 to -122\nProbing was tried 4 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                122.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n122.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20356273651123047}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 13, 4, 5]
consumption (rows=resources) = [[1, 5, 5, 1], [3, 2, 6, 6], [5, 3, 8, 7], [4, 4, 2, 2]]
capacity = [29, 21, 31, 32]
upper_bounds = [6, 5, 3, 3]"
404,mul,4,26799732,26554332,0,26945228,0,"{'ok': True, 'value': 26799732, 'stdout': '26799732\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10351753234863281}",1,Compute: 2747 * 9756
405,add,32,86109381422315022781162812339736,861093814223150227811628123397378,0,86109381422315022752062812340736,0,"{'ok': True, 'value': 86109381422315022781162812339736, 'stdout': '86109381422315022781162812339736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09974265098571777}",1,Compute: 72026027508761734051066191687181 + 14083353913553288730096620652555
406,sub,4,224,3406,0,-224,0,"{'ok': True, 'value': 224, 'stdout': '224\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08944058418273926}",1,Compute: 3630 - 3406
407,ilp_assign,16,58,113,0,1,0,"{'ok': True, 'value': 58, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3855348c31ed4be1b2857ae9911ac5ac-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/3855348c31ed4be1b2857ae9911ac5ac-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 58 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 58\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 58 - took 0.00 seconds\nCbc0012I Integer solution of 58 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 58, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 58 to 58\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                58.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nMinimum total cost: 58.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18103265762329102}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 30, 41, 17, 31, 16, 20], [19, 12, 4, 11, 11, 37, 11], [22, 39, 45, 15, 20, 3, 29], [38, 10, 41, 22, 37, 4, 47], [35, 33, 47, 10, 28, 36, 13], [30, 45, 40, 27, 13, 24, 21], [40, 19, 38, 26, 36, 39, 16]]"
408,add,4,14779,14729,0,14779,1,"{'ok': True, 'value': 14779, 'stdout': '14779\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0874166488647461}",1,Compute: 8007 + 6772
409,ilp_partition,8,1,1,1,16,0,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08942699432373047}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 6, 16, 24, 18, 4, 23, 18]"
410,ilp_prod,32,569,239,0,96,0,"{'ok': True, 'value': 569, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bfb02b762182458abd764a6dfd4a1436-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bfb02b762182458abd764a6dfd4a1436-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 635.183 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -466 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -544 found by DiveCoefficient after 61 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 6\nCbc0013I At root node, 3 cuts changed objective from -635.18276 to -585.21646 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 131 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 30 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0010I After 0 nodes, 1 on tree, -544 best solution, best possible -585.21646 (0.01 seconds)\nCbc0012I Integer solution of -562 found by rounding after 87 iterations and 2 nodes (0.01 seconds)\nCbc0012I Integer solution of -569 found by DiveCoefficient after 87 iterations and 2 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -569, took 99 iterations and 4 nodes (0.01 seconds)\nCbc0032I Strong branching done 10 times (18 iterations), fathomed 0 nodes and fixed 1 variables\nCbc0035I Maximum depth 1, 3 variables fixed on reduced cost\nCuts at root node changed objective from -635.183 to -585.216\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 114 times and created 150 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 114 times and created 53 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                569.00000000\nEnumerated nodes:               4\nTotal iterations:               99\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n569.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19221043586730957}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 32, 96, 89, 78, 3]
consumption (rows=resources) = [[18, 9, 11, 25, 5, 25], [27, 3, 16, 14, 12, 24], [26, 26, 5, 18, 5, 2], [26, 24, 17, 3, 28, 7]]
capacity = [125, 103, 65, 96]
upper_bounds = [3, 3, 5, 3, 3, 4]"
411,lcs,8,5,4,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10045170783996582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcccbddd""
T = ""cacacabd"""
412,ilp_assign,32,153,187,0,105,0,"{'ok': True, 'value': 153, 'stdout': '153\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40305280685424805}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 72, 88, 5, 76, 92, 25], [11, 43, 33, 40, 50, 35, 41], [69, 46, 43, 64, 57, 46, 46], [61, 67, 73, 13, 61, 60, 91], [31, 91, 1, 89, 78, 11, 47], [62, 86, 55, 42, 51, 44, 85], [12, 6, 47, 7, 33, 17, 26]]"
413,ilp_assign,16,40,118,0,110,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40794968605041504}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 7, 40, 30, 27, 14, 14], [29, 35, 21, 4, 36, 12, 18], [3, 3, 48, 2, 30, 47, 37], [22, 32, 34, 19, 4, 47, 37], [39, 18, 29, 24, 45, 47, 14], [30, 32, 3, 45, 6, 43, 48], [33, 44, 12, 1, 6, 5, 38]]"
414,knap,4,20,15,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09676527976989746}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 6, 6, 2]
V = [14, 4, 1, 6]
C = 11"
415,ilp_prod,32,550,1000,0,26,0,"{'ok': True, 'value': 72, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/da7eaa32597d48dc8021d0212cfb467d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/da7eaa32597d48dc8021d0212cfb467d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 75.0968 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -72 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                72.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n72.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16351628303527832}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [72, 37, 55, 90, 95, 29]
consumption (rows=resources) = [[25, 23, 21, 10, 24, 29], [5, 21, 12, 18, 2, 28], [11, 10, 26, 15, 6, 30], [16, 25, 30, 22, 3, 29]]
capacity = [92, 113, 94, 97]
upper_bounds = [3, 3, 3, 4, 3, 3]"
416,ilp_assign,2,11,11,1,11,1,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42596864700317383}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [6, 6]]"
417,mul{'ok': True, 'value': 1323355615902574859291470798676672537703730261642133395548897940, 'stdout': '1323355615902574859291470798676672537703730261642133395548897940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09755301475524902}",1,Compute: 30362685682063808034093338973223 * 43584932827082637860957468008780
418,add,32,130002339564309285810840706542740,129902339564309285810840706542740,0,130002339564309285810840756542740,0,"{'ok': True, 'value': 130002339564309285810840706542740, 'stdout': '130002339564309285810840706542740\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1107320785522461}",1,Compute: 60295471057584646151996901173488 + 69706868506724639658843805369252
419,add,32,150533225413345050497956300364236,628517526960932503680823281984748,0,150533225413345050538156300364236,0,"{'ok': True, 'value': 150533225413345050497956300364236, 'stdout': '150533225413345050497956300364236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09734511375427246}",1,Compute: 87681472717251800129873972165762 + 62851752696093250368082328198474
420,ilp_prod,4,20,34,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_s0_tbs6x/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_s0_tbs6x/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16922473907470703}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 4, 6]
consumption (rows=resources) = [[1, 2, 2], [4, 4, 3], [4, 1, 3]]
capacity = [13, 11, 8]
upper_bounds = [3, 3, 3]"
421,sub,8,19566729,36140302,0,19566729,1,"{'ok': True, 'value': 19566729, 'stdout': '19566729\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10230231285095215}",1,Compute: 55707031 - 36140302
422,sub,4,93,103,0,-103,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10419297218322754}",1,Compute: 1412 - 1319
423,rod,32,2496,1055,0,1,0,"{'ok': True, 'value': 2496, 'stdout': '2496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09016585350036621}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [78, 3, 27, 10, 72, 41, 27, 82, 46, 54, 48, 1, 75, 72, 58, 1, 93, 38, 48, 82, 35, 78, 64, 81, 89, 10, 29, 72, 45, 69, 65, 66]"
424,knap,32,1825,1054,0,23,0,"{'ok': True, 'value': 1825, 'stdout': '1825\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10531377792358398}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 43, 19, 53, 10, 25, 36, 5, 22, 35, 17, 53, 27, 23, 54, 42, 13, 28, 35, 16, 33, 28, 25, 2, 5, 26, 54, 36, 24, 34, 20, 55]
V = [89, 52, 90, 99, 69, 85, 97, 58, 102, 64, 34, 119, 76, 51, 87, 58, 67, 58, 88, 118, 85, 99, 12, 68, 86, 116, 18, 108, 76, 124, 90, 90]
C = 460"
425,ilp_prod,2,35,26,0,25,0,"{'ok': True, 'value': 5, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8acfc62f15f24b2397445db9087f8449-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8acfc62f15f24b2397445db9087f8449-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -5 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                5.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n5.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.175278902053833}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 3]
consumption (rows=resources) = [[1, 3], [1, 2]]
capacity = [8, 7]
upper_bounds = [7, 3]"
426,mul,32,3441841312118777216516295817771282727154869854118471470672197888,123869138278116822251791624945164,0,34084344393449429949659449676886644996608,0,"{'ok': True, 'value': 3441841312118777216516295817771282727154869854118471470672197888, 'stdout': '3441841312118777216516295817771282727154869854118471470672197888\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09298968315124512}",1,Compute: 81785250294173609783952467767488 * 42083887983943412467849157177676
427,rod,2,10,5,0,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_7xi2xw_n/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_7xi2xw_n/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0986182689666748}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 1]"
428,add,16,7787211342698698,1250771788,0,7787209342700298,0,"{'ok': True, 'value': 7787211342698698, 'stdout': '7787211342698698\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09793448448181152}",1,Compute: 6271107295226910 + 1516104047471788
429,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10206007957458496}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 2, 81, 68, 9, 33, 64, 86, 83, 61, 21, 57, 93, 77, 6, 48, 82, 91, 57, 24, 57, 80, 86, 48]"
430,ilp_prod,4,73,35,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_zym58ek3/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_zym58ek3/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16736102104187012}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5, 10]
consumption (rows=resources) = [[1, 4, 1], [1, 1, 3], [1, 4, 2]]
capacity = [12, 14, 11]
upper_bounds = [10, 3, 4]"
431,knap,16,348,1047,0,0,0,"{'ok': True, 'value': 348, 'stdout': '348\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08977866172790527}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 25, 22, 13, 7, 15, 30, 10, 3, 15, 16, 27, 14, 27, 5, 1]
V = [54, 52, 61, 22, 56, 19, 24, 23, 11, 14, 7, 35, 25, 8, 38, 6]
C = 123"
432,sub,2,19,19,1,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09261727333068848}",1,Compute: 33 - 14
433,add,2,185,185,1,185,1,"{'ok': True, 'value': 185, 'stdout': '185\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08900666236877441}",1,Compute: 95 + 90
434,mul,2,4840,4840,1,4940,0,"{'ok': True, 'value': 4840, 'stdout': '4840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09017610549926758}",1,Compute: 55 * 88
435,ilp_prod,2,42,20,0,18,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e1ca25b0124942cd81aa317fcfce4693-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e1ca25b0124942cd81aa317fcfce4693-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16851115226745605}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[1, 3], [1, 1]]
capacity = [7, 9]
upper_bounds = [7, 3]"
436,knap,32,1804,1043,0,4,0,"{'ok': True, 'value': 1804, 'stdout': '1804\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10057711601257324}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [51, 47, 32, 21, 32, 64, 10, 35, 55, 11, 4, 41, 54, 42, 2, 13, 58, 32, 23, 40, 14, 49, 46, 62, 31, 31, 34, 61, 9, 17, 16, 1]
V = [63, 33, 73, 1, 71, 83, 109, 108, 118, 44, 64, 29, 95, 16, 11, 112, 127, 27, 116, 77, 107, 74, 107, 122, 80, 12, 6, 47, 118, 92, 61, 87]
C = 519"
437,ilp_partition,2,2,1,0,7,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09923577308654785}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 3, 2]"
438,sub,4,591,591,1,591,1,"{'ok': True, 'value': 591, 'stdout': '591\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11142897605895996}",1,Compute: 1602 - 1011
439,ilp_assign,32,118,186,0,1,0,"{'ok': True, 'value': 118, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7e8ddb1b4c7649de88367a81113f03fa-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/7e8ddb1b4c7649de88367a81113f03fa-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 118 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 118\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 118 - took 0.00 seconds\nCbc0012I Integer solution of 118 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 118, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 118 to 118\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                118.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 118.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1879432201385498}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 59, 39, 29, 80, 77, 62], [45, 26, 26, 30, 17, 46, 1], [48, 95, 5, 74, 28, 34, 37], [2, 85, 21, 42, 60, 66, 87], [82, 22, 17, 96, 52, 86, 59], [71, 87, 81, 87, 25, 74, 69], [53, 70, 69, 39, 5, 34, 36]]"
440,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10219979286193848}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baccdbacbbdaddca""
T = ""cacbbabbddaadccd"""
441,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09453058242797852}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 3]"
442,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09163212776184082}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcb""
T = ""dcbc"""
443,mul,32,3146999036699187672269133084172653085952257196249784856957546524,323864086856854454455596344576844656465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465456465,0,31583443344336446754239704457588556554554,0,"{'ok': True, 'value': 3146999036699187672269133084172653085952257196249784856957546524, 'stdout': '3146999036699187672269133084172653085952257196249784856957546524\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09679007530212402}",1,Compute: 76955842335551101085549561143956 * 40893568846629026792599269291579
444,mul,2,6270,95,0,6390,0,"{'ok': True, 'value': 6270, 'stdout': '6270\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08862590789794922}",1,Compute: 66 * 95
445,ilp_partition,8,1,1,1,2,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08859705924987793}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 13, 19, 4, 8, 14, 16, 10]"
446,rod,4,44,12,0,8,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10346341133117676}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 12, 8, 7]"
447,mul,2,1505,1505,1,1505,1,"{'ok': True, 'value': 1505, 'stdout': '1505\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0885763168334961}",1,Compute: 35 * 43
448,rod,8,136,22,0,1,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0889883041381836}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 1, 6, 13, 6, 4, 14, 11]"
449,ilp_partition,8,1,1,1,14,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08989286422729492}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 6, 15, 7, 23, 16, 5, 14]"
450,ilp_assign,8,28,46,0,91,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38790416717529297}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 12, 3, 1, 21, 16, 23], [24, 1, 8, 3, 21, 10, 22], [4, 19, 9, 14, 2, 9, 4], [23, 23, 19, 13, 7, 18, 12], [7, 5, 15, 3, 18, 13, 24], [4, 17, 6, 17, 4, 15, 7], [6, 24, 24, 11, 24, 6, 20]]"
451,ilp_assign,8,28,75,0,80,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42349839210510254}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 11, 13, 15, 4, 5, 16], [16, 15, 6, 7, 24, 6, 23], [4, 21, 23, 21, 12, 5, 19], [17, 6, 19, 21, 18, 15, 8], [8, 18, 14, 16, 21, 6, 2], [20, 17, 9, 10, 17, 4, 1], [16, 9, 14, 2, 23, 9, 16]]"
452,mul,8,2392986297523926,225238202,0,584806284,0,"{'ok': True, 'value': 2392986297523926, 'stdout': '2392986297523926\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0971684455871582}",1,Compute: 97481254 * 24548169
453,sub,8,18537036,18537036,1,18537036,1,"{'ok': True, 'value': 18537036, 'stdout': '18537036\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08881306648254395}",1,Compute: 50712565 - 32175529
454,rod,4,32,32,1,1,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09956216812133789}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 4, 12, 3]"
455,knap,16,366,1,0,0,0,"{'ok': True, 'value': 366, 'stdout': '366\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08720040321350098}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 28, 30, 29, 3, 25, 8, 29, 5, 21, 27, 9, 12, 11, 23, 28]
V = [27, 13, 53, 39, 54, 27, 4, 31, 13, 4, 46, 60, 25, 42, 2, 34]
C = 159"
456,lcs,32,21,16,0,2,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10022211074829102}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addccccbabdcacddccddbadbccccbbbd""
T = ""addcabacbdbddaccadbbbbdccbbbadc"""
457,knap,4,18,18,1,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09740328788757324}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 6, 2]
V = [14, 3, 9, 4]
C = 8"
458,ilp_prod,2,21,25,0,9,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/70fcbf60a2004aed8214f7bdd8b5efb6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/70fcbf60a2004aed8214f7bdd8b5efb6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 23.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 21.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20147061347961426}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4]
consumption (rows=resources) = [[3, 2], [2, 3]]
capacity = [10, 9]
upper_bounds = [3, 3]"
459,sub,8,1151647,1151647,1,1151647,1,"{'ok': True, 'value': 1151647, 'stdout': '1151647\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11844682693481445}",1,Compute: 42370783 - 41219136
460,ilp_prod,2,35,25,0,14,0,"{'ok': True, 'value': 4, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/83003e6e5fd248ebaa4b793d06845029-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/83003e6e5fd248ebaa4b793d06845029-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6.66667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -4 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                4.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n4.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17664766311645508}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 7]
consumption (rows=resources) = [[3, 1], [3, 2]]
capacity = [9, 10]
upper_bounds = [3, 5]"
461,ilp_partition,32,1,1,1,22,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.7392513751983643}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 28, 21, 42, 49, 56, 80, 16, 47, 78, 5, 28, 2, 94, 82, 96, 56, 31, 51, 35, 42, 40, 41, 31]"
462,ilp_assign,4,9,1,0,11,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4749462604522705}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3, 2, 1], [6, 5, 11, 4], [2, 11, 1, 4], [12, 3, 6, 7]]"
463,ilp_assign,32,100,106,0,105,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42473459243774414}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[57, 80, 65, 36, 53, 35, 25], [29, 61, 24, 29, 91, 96, 1], [78, 90, 75, 80, 4, 41, 65], [35, 12, 41, 80, 14, 14, 24], [16, 45, 87, 48, 45, 27, 24], [65, 57, 31, 69, 30, 17, 9], [34, 26, 51, 2, 8, 40, 1]]"
464,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08727288246154785}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaaadcd""
T = ""adadcaca"""
465,ilp_assign,16,82,105,0,1,0,"{'ok': True, 'value': 82, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/10b063d8b1fb4f9086917eb216cfcf59-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/10b063d8b1fb4f9086917eb216cfcf59-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 82 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 82\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 82 - took 0.00 seconds\nCbc0012I Integer solution of 82 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 82, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 82 to 82\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                82.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 82.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18608999252319336}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 37, 12, 8, 33, 1, 24], [15, 18, 36, 40, 12, 18, 3], [25, 11, 10, 43, 42, 44, 27], [24, 31, 47, 5, 28, 13, 12], [19, 39, 25, 31, 38, 35, 29], [12, 22, 25, 30, 48, 24, 1], [37, 36, 42, 35, 29, 22, 36]]"
466,add,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08945727348327637}",1,Compute: 15 + 43
467,sub,8,12512462,12512462,1,12512462,1,"{'ok': True, 'value': 12512462, 'stdout': '12512462\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0949394702911377}",1,Compute: 28483599 - 15971137
468,ilp_assign,4,15,5,0,15,1,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38689422607421875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2, 3, 8], [6, 6, 5, 8], [6, 4, 3, 8], [3, 12, 6, 4]]"
469,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09092855453491211}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 3, 5]"
470,ilp_assign,8,37,36,0,70,0,"{'ok': True, 'value': 37, 'stdout': '37\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40007472038269043}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 11, 19, 11, 4, 22, 6], [11, 10, 17, 4, 18, 5, 11], [14, 21, 6, 23, 5, 2, 11], [10, 7, 8, 10, 15, 1, 17], [9, 18, 4, 20, 21, 1, 7], [6, 23, 19, 14, 1, 5, 15], [13, 15, 17, 15, 11, 24, 17]]"
471,sub,16,1879588820988482,0,0,1879588821088482,0,"{'ok': True, 'value': 1879588820988482, 'stdout': '1879588820988482\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08991432189941406}",1,Compute: 3910011543643301 - 2030422722654819
472,ilp_assign,8,35,36,0,46,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39348888397216797}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1, 5, 23, 21, 24, 2], [23, 16, 5, 7, 14, 5, 21], [2, 7, 6, 18, 23, 1, 7], [3, 5, 18, 1, 7, 13, 21], [24, 23, 18, 22, 24, 24, 16], [23, 20, 1, 23, 15, 17, 13], [9, 1, 15, 23, 24, 6, 16]]"
473,rod,8,152,22,0,30,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0892024040222168}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 18, 6, 8, 22, 1, 16, 4]"
474,rod,32,1200,1050,0,75,0,"{'ok': True, 'value': 1200, 'stdout': '1200\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09092330932617188}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [34, 75, 48, 42, 6, 52, 52, 34, 93, 93, 9, 16, 6, 1, 95, 86, 85, 65, 8, 93, 22, 51, 23, 7, 95, 62, 64, 56, 32, 43, 52, 76]"
475,ilp_prod,2,20,18,0,20,1,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9bd29f3b7ce242408d920d72fc97bf3e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9bd29f3b7ce242408d920d72fc97bf3e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18514108657836914}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[2, 1], [3, 2]]
capacity = [9, 9]
upper_bounds = [3, 4]"
476,ilp_assign,16,65,105,0,105,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39743995666503906}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 16, 23, 30, 47, 27, 44], [32, 18, 12, 47, 20, 31, 29], [32, 40, 13, 20, 36, 34, 37], [35, 42, 41, 11, 40, 14, 12], [18, 8, 28, 23, 38, 31, 28], [38, 44, 37, 36, 7, 27, 18], [40, 12, 26, 4, 46, 2, 17]]"
477,ilp_partition,4,4,1,0,1,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0853109359741211}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 5, 10]"
478,sub,4,3892,3892,1,3892,1,"{'ok': True, 'value': 3892, 'stdout': '3892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09388065338134766}",1,Compute: 8775 - 4883
479,add,2,87,87,1,87,1,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09677863121032715}",1,Compute: 66 + 21
480,rod,32,832,1050,0,1,0,"{'ok': True, 'value': 832, 'stdout': '832\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10852193832397461}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [6, 52, 60, 60, 6, 38, 78, 51, 85, 5, 27, 20, 29, 29, 95, 11, 30, 74, 33, 3, 67, 16, 16, 68, 10, 41, 59, 17, 74, 34, 43, 94]"
481,sub,16,3416166498011892,,0,3416166498011892,1,"{'ok': True, 'value': 3416166498011892, 'stdout': '3416166498011892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0872044563293457}",1,Compute: 4568129258742381 - 1151962760730489
482,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10821127891540527}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbdadbc""
T = ""abcbbbd"""
483,sub,8,47410009,11771722,0,47410009,1,"{'ok': True, 'value': 47410009, 'stdout': '47410009\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09858536720275879}",1,Compute: 59181731 - 11771722
484,knap,4,27,27,1,0,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09544181823730469}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 7, 8, 5]
V = [14, 12, 13, 9]
C = 12"
485,sub,32,10609236726447331221947497458912,106092367264473312209440884658912,0,106092367264373332209447597458912,0,"{'ok': True, 'value': 10609236726447331221947497458912, 'stdout': '10609236726447331221947497458912\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08819079399108887}",1,Compute: 56951333521986082229959109584844 - 46342096795538751008011612125932
486,sub,8,38050059,38050059,1,38050059,1,"{'ok': True, 'value': 38050059, 'stdout': '38050059\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0979924201965332}",1,Compute: 81797420 - 43747361
487,ilp_prod,8,50,60,0,3,0,"{'ok': True, 'value': 50, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7622e2b16e9c4188bf5042dadd4070d1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7622e2b16e9c4188bf5042dadd4070d1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 57.7941 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -48 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -50 found by DiveCoefficient after 6 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -53.875 to -50 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 1.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -50, took 6 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -53.875 to -50\nProbing was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                50.00000000\nEnumerated nodes:               0\nTotal iterations:               6\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n50.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17316651344299316}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 10, 6, 19]
consumption (rows=resources) = [[8, 7, 5, 6], [2, 2, 3, 4], [8, 3, 1, 8], [3, 8, 3, 1]]
capacity = [23, 21, 22, 17]
upper_bounds = [3, 3, 4, 3]"
488,ilp_partition,8,5,1,0,10,0,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10647010803222656}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 18, 3, 15, 16, 16, 18, 19]"
489,ilp_prod,16,232,The final answer is the maximum profit.,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 39, 26, 24, 44, 15]
consumption (rows=resources) = [[10, 2, 3, 11, 16, 2], [6, 9, 3, 13, 16, 5], [9, 13, 5, 2, 6, 9], [5, 13, 1, 8, 15, 3]]
capacity = [35, 45, 42, 55]
upper_bounds = [3, 3, 8, 3, 3, 4]"
490,ilp_partition,4,1,0,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0979769229888916}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 2, 7, 9]"
491,sub,4,287,287,1,287,1,"{'ok': True, 'value': 287, 'stdout': '287\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09450459480285645}",1,Compute: 8147 - 7860
492,lcs,2,2,2,1,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09698081016540527}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""bdc"""
493,sub,16,1975376945361403,34608789623,0,1975376945361403,1,"{'ok': True, 'value': 1975376945361403, 'stdout': '1975376945361403\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10649561882019043}",1,Compute: 7969959231759519 - 5994582286398116
494,knap,16,450,1646,0,22,0,"{'ok': True, 'value': 450, 'stdout': '450\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0870518684387207}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [26, 29, 25, 13, 3, 16, 4, 19, 19, 25, 30, 22, 27, 25, 8, 27]
V = [59, 38, 61, 27, 1, 36, 52, 27, 55, 9, 41, 52, 62, 2, 51, 58]
C = 159"
495,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09693574905395508}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 5, 2, 1]"
496,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0849611759185791}",1,Compute: 94 - 73
497,add,32,156169471455455311109721163750256,156169471455455303109721163750256,0,156169471455455311109721163750256,1,"{'ok': True, 'value': 156169471455455311109721163750256, 'stdout': '156169471455455311109721163750256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08635616302490234}",1,Compute: 89115627046534271912091058684440 + 67053844408921039197630105065816
498,add,8,163148667,163148667,1,163148667,1,"{'ok': True, 'value': 163148667, 'stdout': '163148667\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10724544525146484}",1,Compute: 86349774 + 76798893
499,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10413432121276855}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 3, 1, 4]"
500,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0998075008392334}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 59, 15, 94, 89, 10, 38, 93, 36, 32, 44, 71, 48, 84, 80, 86, 87, 49, 94, 85, 10, 52, 85, 38]"
501,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09557676315307617}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcacadbc""
T = ""adddbbaa"""
502,ilp_assign,8,27,56,0,46,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3837926387786865}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 12, 7, 20, 6, 23, 23], [22, 9, 3, 21, 22, 14, 11], [23, 10, 21, 11, 19, 18, 4], [22, 8, 7, 13, 14, 5, 20], [3, 24, 8, 8, 10, 23, 24], [14, 10, 14, 2, 21, 2, 13], [13, 9, 1, 13, 4, 1, 4]]"
503,sub,8,12187600,12987600,0,12987600,0,"{'ok': True, 'value': 12187600, 'stdout': '12187600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10327720642089844}",1,Compute: 93090236 - 80902636
504,ilp_assign,4,16,17,0,32,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3849208354949951}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 2, 10, 11], [12, 4, 6, 7], [2, 5, 7, 9], [6, 1, 11, 6]]"
505,knap,16,364,136,0,0,0,"{'ok': True, 'value': 364, 'stdout': '364\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09736752510070801}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 9, 6, 2, 25, 32, 27, 21, 10, 13, 6, 25, 31, 22, 25, 8]
V = [39, 47, 3, 21, 16, 3, 34, 42, 16, 31, 13, 60, 61, 63, 30, 1]
C = 136"
506,sub,16,3762770163988869,3762770163988869,1,-3762790163988869,0,"{'ok': True, 'value': 3762770163988869, 'stdout': '3762770163988869\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09943890571594238}",1,Compute: 8923239987202063 - 5160469823213194
507,ilp_prod,4,24,39,0,36,0,"{'ok': True, 'value': 9, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/12bbbe67bcad42cd9f0b13cbab294d72-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/12bbbe67bcad42cd9f0b13cbab294d72-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n9.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17619681358337402}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 12, 5]
consumption (rows=resources) = [[1, 2, 2], [3, 4, 4], [4, 1, 2]]
capacity = [12, 10, 12]
upper_bounds = [3, 3, 3]"
508,knap,4,17,16,0,-1,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09321784973144531}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 4, 4]
V = [2, 2, 3, 15]
C = 6"
509,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09058833122253418}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdabddabcccbacaacbbacbddcdccbdcd""
T = ""acdcdacadababbacabadbcddbdbadddbc"""
510,ilp_prod,2,18,36,0,18,1,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7fc9fa86511b45c79ddfe9f4363e1edd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7fc9fa86511b45c79ddfe9f4363e1edd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18165349960327148}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[1, 3], [3, 3]]
capacity = [10, 9]
upper_bounds = [3, 3]"
511,ilp_partition,4,1,0,0,23,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09309744834899902}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 2, 3, 7]"
512,lcs,2,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08549046516418457}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""dda"""
513,ilp_assign,4,21,1,0,32,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39211106300354004}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 5, 8, 6], [12, 9, 12, 4], [1, 6, 9, 5], [7, 9, 11, 10]]"
514,knap,4,27,16,0,0,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08899950981140137}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 8, 1]
V = [8, 12, 4, 7]
C = 7"
515,rod,2,6,4,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09065389633178711}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
516,mul,32,6556311951058257364722474557381227515817177808700465039189832544,86478670838380757180913720619984,0,660940959965694742996822447958646666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 6556311951058257364722474557381227515817177808700465039189832544, 'stdout': '6556311951058257364722474557381227515817177808700465039189832544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0944814682006836}",1,Compute: 75814208145165555100548841817966 * 86478670838380757180913720619984
517,ilp_assign,16,64,105,0,154,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4128129482269287}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 47, 23, 18, 6, 6, 9], [39, 23, 7, 42, 45, 18, 22], [9, 26, 45, 12, 3, 30, 18], [16, 45, 25, 40, 13, 34, 11], [35, 20, 41, 11, 30, 16, 42], [6, 44, 23, 13, 35, 48, 13], [31, 25, 4, 48, 2, 5, 16]]"
518,mul,16,10051508103210626945233600082628,9523501355340000,0,10136866635358729857867688,0,"{'ok': True, 'value': 10051508103210626945233600082628, 'stdout': '10051508103210626945233600082628\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08853411674499512}",1,Compute: 5279414150135534 * 1903905967095342
519,lcs,32,15,10,0,0,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08621454238891602}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccaaacabbbcccdcbcaabacbdcaadbca""
T = ""dcbcabaaaadddddadddbdddcacacacd"""
520,add,16,3423096232055683,15811111111111111,0,3423106232055683,0,"{'ok': True, 'value': 3423096232055683, 'stdout': '3423096232055683\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10070037841796875}",1,Compute: 1094430586889224 + 2328665645166459
521,sub,32,38938275248067743694708928937849,38938275247967733694708928937849,0,38938275248067743694708928937849,1,"{'ok': True, 'value': 38938275248067743694708928937849, 'stdout': '38938275248067743694708928937849\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08872461318969727}",1,Compute: 88000774710173846238162297515523 - 49062499462106102543453368577674
522,mul{'ok': True, 'value': 20059716575924303145194818227978, 'stdout': '20059716575924303145194818227978\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0956423282623291}",1,Compute: 3203697637927107 * 6261426277700654
523,rod,32,1424,1055,0,664,0,"{'ok': True, 'value': 1424, 'stdout': '1424\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10365557670593262}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [44, 89, 57, 79, 70, 82, 45, 69, 80, 64, 64, 41, 95, 38, 26, 11, 74, 62, 33, 12, 35, 65, 10, 4, 49, 60, 25, 46, 95, 90, 51, 94]"
524,knap,8,85,110,0,7,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09827327728271484}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 12, 8, 2, 4, 12, 15, 7]
V = [20, 19, 7, 1, 5, 28, 13, 32]
C = 37"
525,ilp_prod,4,27,34,0,30,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ea947b9290ca475faf28996e844218cd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ea947b9290ca475faf28996e844218cd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17101716995239258}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 4, 7]
consumption (rows=resources) = [[2, 2, 4], [3, 2, 2], [4, 3, 2]]
capacity = [9, 10, 10]
upper_bounds = [3, 3, 3]"
526,ilp_prod,4,16,24,0,24,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e7091c34f29b4f709d0706868f1fc2b7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e7091c34f29b4f709d0706868f1fc2b7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16424036026000977}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 4, 4]
consumption (rows=resources) = [[1, 2, 1], [4, 4, 1], [1, 4, 4]]
capacity = [16, 10, 16]
upper_bounds = [3, 3, 4]"
527,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09945988655090332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""c"""
528,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08858013153076172}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcd""
T = ""add"""
529,mul,16,31101577078844313498003242950860,,0,313917453613919394459666666,0,"{'ok': True, 'value': 31101577078844313498003242950860, 'stdout': '31101577078844313498003242950860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10082411766052246}",1,Compute: 4504728703583788 * 6904206473988345
530,mul,2,6790,97,0,2,0,"{'ok': True, 'value': 6790, 'stdout': '6790\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09760332107543945}",1,Compute: 70 * 97
531,lcs,32,16,10,0,1,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08770108222961426}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddadbbdcadaadddcbccddaddbadaddca""
T = ""bacbadcaccdddcaadaacccbcabdcccbb"""
532,ilp_partition,16,1,1,1,37,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21136760711669922}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 26, 43, 1, 38, 39, 37, 11, 42, 35, 4, 11, 20, 9, 47, 38]"
533,knap,8,99,164,0,7,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09759736061096191}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 9, 10, 5, 3, 15, 11, 7]
V = [3, 15, 29, 27, 9, 3, 13, 19]
C = 37"
534,ilp_prod,2,12,30,0,21,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e2585996016b4acfb17c8aa5f73a48e3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e2585996016b4acfb17c8aa5f73a48e3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 10.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17625164985656738}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[3, 3], [3, 3]]
capacity = [7, 8]
upper_bounds = [3, 3]"
535,ilp_partition,16,0,1,0,47,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21168184280395508}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 8, 25, 28, 26, 47, 47, 39, 44, 27, 3, 7, 46, 43, 11, 28]"
536,ilp_partition,4,1,1,1,25,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09748482704162598}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 4, 9, 2]"
537,ilp_assign,32,161,186,0,26,0,"{'ok': True, 'value': 161, 'stdout': '161\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.402515172958374}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[46, 7, 82, 90, 81, 89, 75], [56, 46, 20, 69, 76, 1, 96], [1, 44, 93, 40, 1, 4, 26], [65, 85, 12, 17, 91, 96, 34], [41, 48, 65, 61, 71, 56, 62], [55, 72, 80, 26, 96, 60, 52], [70, 69, 51, 72, 71, 57, 89]]"
538,sub,32,70184808965044433289801733512019,15895329224065110128178025931783,0,15895329224065110128178025931783,0,"{'ok': True, 'value': 70184808965044433289801733512019, 'stdout': '70184808965044433289801733512019\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09610986709594727}",1,Compute: 86080138189109543417979759443802 - 15895329224065110128178025931783
539,rod,4,24,16,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11105775833129883}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 8, 7, 7]"
540,rod,4,48,8,0,12,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09153342247009277}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 10, 2, 8]"
541,lcs,32,18,15,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10162353515625}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbaddbcaabdbdbaacbccbcacccbbbdc""
T = ""dccbcdccbcabbdddccdbdbbbdaaccdbc"""
542,knap,32,1294,1084,0,13,0,"{'ok': True, 'value': 1294, 'stdout': '1294\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10764694213867188}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [38, 22, 64, 10, 54, 29, 52, 35, 29, 28, 39, 30, 64, 64, 40, 13, 40, 24, 35, 23, 7, 59, 36, 2, 15, 61, 62, 2, 24, 49, 47, 2]
V = [102, 8, 4, 23, 95, 43, 42, 109, 15, 24, 8, 10, 48, 19, 10, 115, 108, 72, 13, 34, 14, 42, 24, 106, 72, 99, 72, 15, 27, 24, 39, 107]
C = 549"
543,lcs,16,9,7,0,18,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09983682632446289}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcbbbbcdcdccadc""
T = ""bcabbacdbbadcccb"""
544,ilp_prod,4,81,110,0,33,0,"{'ok': True, 'value': 22, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5fd64004656b4f5ebcb44e222b09b9d1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5fd64004656b4f5ebcb44e222b09b9d1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 30.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -22 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                22.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n22.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18607831001281738}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 10, 5]
consumption (rows=resources) = [[1, 2, 2], [2, 1, 4], [4, 1, 2]]
capacity = [16, 11, 11]
upper_bounds = [3, 8, 3]"
545,ilp_prod,32,236,1043,0,6,0,"{'ok': True, 'value': 96, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/165e9d45c7534ff8ada2dc3cb1e76b9d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/165e9d45c7534ff8ada2dc3cb1e76b9d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 33 COLUMNS\nAt line 220 RHS\nAt line 249 BOUNDS\nAt line 256 ENDATA\nProblem MODEL has 28 rows, 6 columns and 168 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 132.8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -96 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                96.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n96.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18167448043823242}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [48, 16, 55, 27, 41, 23]
consumption (rows=resources) = [[14, 24, 22, 27, 30, 2], [11, 31, 11, 20, 12, 29], [25, 10, 18, 16, 1, 1], [26, 18, 13, 23, 31, 27]]
capacity = [83, 120, 94, 126]
upper_bounds = [3, 3, 3, 3, 3, 4]"
546,rod,16,464,1,0,65,0,"{'ok': True, 'value': 464, 'stdout': '464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0985116958618164}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [29, 45, 46, 39, 32, 41, 11, 27, 6, 18, 39, 19, 2, 11, 22, 46]"
547,rod,32,2912,545,0,9,0,"{'ok': True, 'value': 2912, 'stdout': '2912\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08741545677185059}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [91, 17, 42, 43, 15, 44, 37, 85, 7, 62, 73, 67, 41, 35, 63, 83, 19, 92, 93, 17, 71, 3, 79, 24, 8, 45, 70, 44, 4, 26, 42, 9]"
548,ilp_assign,16,93,104,0,105,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4131503105163574}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[33, 22, 12, 43, 20, 38, 42], [30, 39, 48, 23, 22, 36, 35], [27, 40, 26, 6, 12, 46, 10], [46, 16, 8, 47, 36, 34, 44], [20, 16, 5, 31, 32, 1, 47], [19, 11, 2, 32, 35, 7, 10], [26, 20, 39, 15, 45, 31, 24]]"
549,add,16,14286058258530423,13146050106550414,0,14286058258529423,0,"{'ok': True, 'value': 14286058258530423, 'stdout': '14286058258530423\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10968422889709473}",1,Compute: 5745983064423624 + 8540075194106799
550,lcs,8,5,5,1,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09659767150878906}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbabdcca""
T = ""dcdbbda"""
551,ilp_assign,8,40,36,0,46,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38941478729248047}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 12, 3, 9, 12, 13, 4], [11, 19, 5, 13, 17, 10, 9], [12, 6, 19, 2, 4, 7, 16], [3, 11, 8, 9, 15, 6, 14], [21, 7, 18, 17, 18, 15, 6], [16, 23, 5, 16, 16, 18, 24], [12, 22, 20, 22, 17, 23, 2]]"
552,rod,8,120,24,0,2,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09956717491149902}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 15, 8, 19, 3, 17, 18, 6]"
553,add,16,6395233915366644,819131510131910,0,6495233915366644,0,"{'ok': True, 'value': 6395233915366644, 'stdout': '6395233915366644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09706354141235352}",1,Compute: 3902698172577940 + 2492535742788704
554,add,8,102839896,102839896,1,102839896,1,"{'ok': True, 'value': 102839896, 'stdout': '102839896\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08897018432617188}",1,Compute: 49414672 + 53425224
555,add,2,120,120,1,120,1,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09429240226745605}",1,Compute: 82 + 38
556,rod,32,1520,1080,0,659,0,"{'ok': True, 'value': 1520, 'stdout': '1520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08753824234008789}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [43, 95, 18, 59, 77, 54, 81, 21, 75, 10, 3, 47, 12, 22, 15, 33, 32, 29, 68, 89, 73, 68, 55, 5, 44, 96, 66, 67, 61, 40, 18, 48]"
557,ilp_prod,2,50,13,0,25,0,"{'ok': True, 'value': 25, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1cc08fec26ea44ea9669f64578b6aaa9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1cc08fec26ea44ea9669f64578b6aaa9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -25 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                25.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n25.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17929577827453613}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[1, 2], [1, 2]]
capacity = [10, 10]
upper_bounds = [10, 5]"
558,ilp_partition,2,1,0,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_91b763hc/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_91b763hc/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11861634254455566}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 1, 1]"
559,mul,16,20725416173060168411968183049692,0,0,9753044003831212,0,"{'ok': True, 'value': 20725416173060168411968183049692, 'stdout': '20725416173060168411968183049692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08669090270996094}",1,Compute: 2125020266997541 * 9753044003831212
560,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11480116844177246}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 7, 87, 52, 41, 71, 37, 79, 59, 22, 17, 20, 14, 91, 90, 51, 15, 96, 17, 34, 34, 79, 87, 81]"
561,knap,32,1342,1043,0,4,0,"{'ok': True, 'value': 1342, 'stdout': '1342\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09474825859069824}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 34, 44, 42, 54, 38, 15, 33, 19, 27, 27, 42, 38, 55, 49, 63, 26, 4, 15, 48, 50, 61, 52, 54, 46, 7, 25, 1, 38, 18, 19, 5]
V = [101, 128, 59, 63, 14, 90, 68, 76, 21, 4, 82, 13, 62, 55, 73, 56, 26, 7, 101, 27, 95, 59, 39, 76, 2, 84, 8, 31, 27, 14, 51, 60]
C = 535"
562,ilp_assign,2,2,2,1,6,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39707231521606445}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [5, 1]]"
563,sub,16,1506410221568515,-5457851866145109,0,1486412221568515,0,"{'ok': True, 'value': 1506410221568515, 'stdout': '1506410221568515\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09112739562988281}",1,Compute: 6964262087713624 - 5457851866145109
564,knap,32,1708,1024,0,26,0,"{'ok': True, 'value': 1708, 'stdout': '1708\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.132340669631958}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [55, 20, 57, 19, 25, 39, 44, 21, 5, 19, 42, 52, 44, 26, 19, 22, 2, 49, 54, 28, 25, 21, 28, 51, 25, 59, 42, 51, 7, 36, 34, 16]
V = [28, 127, 118, 43, 12, 55, 55, 54, 72, 84, 79, 57, 11, 108, 123, 44, 53, 3, 67, 49, 30, 89, 26, 99, 118, 79, 57, 93, 84, 27, 115, 126]
C = 518"
565,lcs,32,16,10,0,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10073351860046387}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcadacabbdabdcbdccbbbcddabaaaac""
T = ""dbdabddbcaabaaaaddcddcaaddaccbd"""
566,mul,8,4771783396040208,4797063037887662,0,478433553384878,0,"{'ok': True, 'value': 4771783396040208, 'stdout': '4771783396040208\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10161495208740234}",1,Compute: 52212019 * 91392432
567,ilp_assign,8,42,46,0,46,0,"{'ok': True, 'value': 42, 'stdout': '42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40331315994262695}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 12, 12, 3, 17, 19, 9], [1, 5, 2, 3, 18, 11, 3], [19, 24, 9, 5, 12, 21, 19], [21, 8, 20, 1, 14, 18, 11], [14, 24, 13, 22, 13, 15, 22], [4, 17, 1, 15, 9, 22, 4], [12, 3, 16, 11, 17, 13, 13]]"
568,ilp_prod,4,42,36,0,48,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/224f240e40c84be38eb18c885f17b317-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/224f240e40c84be38eb18c885f17b317-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 42 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -36 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1620807647705078}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 6, 8]
consumption (rows=resources) = [[4, 2, 1], [2, 3, 4], [4, 2, 3]]
capacity = [14, 14, 14]
upper_bounds = [3, 4, 3]"
569,add,8,163009002,1219,0,163009002,1,"{'ok': True, 'value': 163009002, 'stdout': '163009002\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09886550903320312}",1,Compute: 69399626 + 93609376
570,sub,16,184164009339789,-194164019339789,0,-184164009339789,0,"{'ok': True, 'value': 184164009339789, 'stdout': '184164009339789\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09913015365600586}",1,Compute: 8648958529284629 - 8464794519944840
571,mul,32,905833300496605876056039708474768332189169437377704224550562123,"The final answer will be a very large number, which cannot be represented in a JSON dictionary as an integer due to its size{'ok': True, 'value': 905833300496605876056039708474768332189169437377704224550562123, 'stdout': '905833300496605876056039708474768332189169437377704224550562123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09260749816894531}",1,Compute: 10510559620880074853377349429881 * 86183165613474560093420150522083
572,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0968635082244873}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""c"""
573,add,8,63537847,10484847,0,63537847,1,"{'ok': True, 'value': 63537847, 'stdout': '63537847\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0966637134552002}",1,Compute: 29311767 + 34226080
574,add,4,11831,11831,1,11831,1,"{'ok': True, 'value': 11831, 'stdout': '11831\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09668803215026855}",1,Compute: 2350 + 9481
575,ilp_prod,16,381,0,0,43,0,"{'ok': True, 'value': 93, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/75512cf686514467b301298d2e5947fa-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/75512cf686514467b301298d2e5947fa-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 20 COLUMNS\nAt line 129 RHS\nAt line 145 BOUNDS\nAt line 152 ENDATA\nProblem MODEL has 15 rows, 6 columns and 90 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 98.8125 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -93 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                93.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n93.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18700289726257324}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [31, 26, 35, 35, 21, 32]
consumption (rows=resources) = [[9, 14, 1, 3, 11, 16], [5, 14, 16, 4, 4, 7], [4, 1, 4, 5, 4, 2], [8, 4, 4, 3, 5, 3]]
capacity = [44, 51, 63, 43]
upper_bounds = [4, 3, 3, 10, 4, 3]"
576,rod,2,8,6,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09542489051818848}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
577,ilp_partition,4,2,0,0,10,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09624528884887695}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 4, 2]"
578,rod,32,1232,1055,0,1,0,"{'ok': True, 'value': 1232, 'stdout': '1232\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08614969253540039}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [31, 77, 11, 48, 55, 96, 14, 37, 18, 18, 21, 26, 74, 80, 93, 1, 94, 35, 10, 6, 80, 24, 59, 37, 93, 35, 51, 48, 9, 86, 18, 26]"
579,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xxi2l511/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_xxi2l511/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09812426567077637}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 6]"
580,rod,2,6,6,1,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08670639991760254}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
581,ilp_prod,4,23,35,0,30,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/60e1393bb276453393982b0daa218961-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/60e1393bb276453393982b0daa218961-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1659696102142334}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 10, 3]
consumption (rows=resources) = [[3, 3, 3], [4, 4, 1], [3, 2, 2]]
capacity = [9, 10, 11]
upper_bounds = [3, 3, 3]"
582,add,4,10906,10906,1,10906,1,"{'ok': True, 'value': 10906, 'stdout': '10906\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09869170188903809}",1,Compute: 1455 + 9451
583,rod,16,360,1,0,64,0,"{'ok': True, 'value': 360, 'stdout': '360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0979773998260498}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [6, 45, 18, 39, 43, 12, 31, 44, 7, 37, 42, 37, 8, 47, 35, 35]"
584,ilp_partition,16,0,1,0,41,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20801448822021484}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 23, 48, 23, 43, 23, 25, 42, 41, 27, 2, 30, 31, 36, 23, 34]"
585,lcs,16,8,5,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0962381362915039}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbcdbddccbcccba""
T = ""ddbbcabcbcbdbbd"""
586,rod,16,528,61,0,155,0,"{'ok': True, 'value': 528, 'stdout': '528\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1049048900604248}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [33, 10, 28, 27, 1, 35, 44, 44, 1, 19, 22, 21, 42, 48, 21, 6]"
587,sub,32,50228025124758038363805703243404,34541187862917277035857898189378,0,49999999999999999999999999999999,0,"{'ok': True, 'value': 50228025124758038363805703243404, 'stdout': '50228025124758038363805703243404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09734630584716797}",1,Compute: 84769212987675315399663601432782 - 34541187862917277035857898189378
588,sub,8,5670135,5670135,1,5670135,1,"{'ok': True, 'value': 5670135, 'stdout': '5670135\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09772872924804688}",1,Compute: 30573544 - 24903409
589,ilp_assign,32,143,187,0,62,0,"{'ok': True, 'value': 143, 'stdout': '143\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4080841541290283}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[50, 63, 12, 32, 46, 63, 89], [79, 88, 24, 67, 54, 20, 27], [30, 33, 37, 33, 38, 45, 62], [91, 54, 47, 87, 51, 41, 12], [10, 79, 67, 3, 65, 51, 22], [26, 44, 86, 56, 69, 33, 95], [14, 60, 4, 76, 77, 89, 62]]"
590,sub,16,1201932922062158,1201932922062158,1,1201932922062158,1,"{'ok': True, 'value': 1201932922062158, 'stdout': '1201932922062158\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10689353942871094}",1,Compute: 5457228844536400 - 4255295922474242
591,add,8,74848303,,0,74848303,1,"{'ok': True, 'value': 74848303, 'stdout': '74848303\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10193681716918945}",1,Compute: 58673442 + 16174861
592,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10105752944946289}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aababaddadacdbddcbaddbdcbcacddad""
T = ""adbcccccbbddccbdcdcbcdbaacdcacdbd"""
593,add,2,126,126,1,126,1,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0988318920135498}",1,Compute: 71 + 55
594,mul,16,33671118805950354699780579876660,34086755090729105666545310,0,3354384388444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 33671118805950354699780579876660, 'stdout': '33671118805950354699780579876660\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11060667037963867}",1,Compute: 5413781309937419 * 6219519570202140
595,add,32,113381792807499721939251868834193,15,0,113381792807499721939252078334193,0,"{'ok': True, 'value': 113381792807499721939251868834193, 'stdout': '113381792807499721939251868834193\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09812068939208984}",1,Compute: 62050264056641996120717300686126 + 51331528750857725818534568148067
596,add,16,14837476377302598,8691213451073246,0,14837476577302638,0,"{'ok': True, 'value': 14837476377302598, 'stdout': '14837476377302598\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09524297714233398}",1,Compute: 5950144242791866 + 8887332134510732
597,rod,8,64,24,0,1,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08856749534606934}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [8, 5, 24, 20, 13, 16, 13, 2]"
598,rod,8,48,22,0,1,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11638760566711426}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 8, 11, 24, 17, 9, 2, 13]"
599,ilp_assign,32,177,327,0,221,0,"{'ok': True, 'value': 177, 'stdout': '177\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3782460689544678}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[90, 65, 10, 80, 33, 65, 9], [60, 60, 70, 10, 24, 88, 85], [39, 90, 27, 52, 76, 63, 90], [29, 68, 63, 16, 88, 65, 79], [95, 83, 5, 70, 58, 39, 73], [18, 60, 41, 84, 96, 7, 79], [75, 90, 22, 83, 41, 27, 48]]"
600,ilp_assign,2,7,4,0,8,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40416646003723145}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 6], [1, 5]]"
601,lcs,4,2,3,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1186685562133789}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdca""
T = ""dccdb"""
602,ilp_assign,8,36,18,0,36,1,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4587247371673584}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 1, 17, 6, 11, 23, 17], [24, 7, 20, 9, 12, 8, 13], [12, 18, 13, 11, 11, 22, 14], [13, 10, 8, 21, 18, 23, 4], [9, 3, 11, 15, 5, 18, 16], [18, 3, 9, 7, 6, 4, 9], [11, 18, 1, 11, 17, 1, 5]]"
603,ilp_partition,16,1,1,1,-1,0,"{'ok': True, 'value': 241, 'stdout': '241\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10634469985961914}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 38, 4, 2, 4, 28, 12, 26, 40, 29, 18, 34, 1, 25, 12, 41]"
604,ilp_prod,16,168,156,0,153,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_d_7qzpx7/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_d_7qzpx7/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17655062675476074}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 21, 42, 33, 3, 22]
consumption (rows=resources) = [[3, 4, 8, 16, 2, 2], [13, 7, 11, 14, 16, 13], [4, 15, 5, 4, 1, 9], [1, 16, 4, 12, 4, 5]]
capacity = [35, 45, 34, 43]
upper_bounds = [3, 3, 4, 3, 3, 3]"
605,ilp_partition,2,2,0,0,8,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08747172355651855}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 6, 4]"
606,add,4,11622,40,0,11622,1,"{'ok': True, 'value': 11622, 'stdout': '11622\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11080026626586914}",1,Compute: 1847 + 9775
607,knap,16,416,1,0,-1,0,"{'ok': True, 'value': 416, 'stdout': '416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10065793991088867}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 15, 18, 24, 24, 14, 6, 23, 9, 5, 17, 13, 7, 4, 27, 23]
V = [54, 23, 22, 35, 3, 32, 61, 2, 52, 12, 31, 29, 50, 60, 32, 22]
C = 129"
608,ilp_assign,2,8,10,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42291784286499023}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5], [5, 3]]"
609,knap,8,113,147,0,8,0,"{'ok': True, 'value': 113, 'stdout': '113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09178805351257324}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 11, 13, 3, 4, 2, 12, 5]
V = [11, 23, 30, 27, 22, 20, 19, 21]
C = 26"
610,add,32,148601863558467199895004532759930,2,0,148601963558467199894924532759930,0,"{'ok': True, 'value': 148601863558467199895004532759930, 'stdout': '148601863558467199895004532759930\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08963370323181152}",1,Compute: 86221605719125368599643569625044 + 62380257839341831295360963134886
611,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21861553192138672}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [82, 76, 2, 33, 54, 7, 12, 86, 43, 54, 70, 33, 7, 7, 48, 8, 21, 96, 45, 65, 63, 45, 72, 42]"
612,ilp_assign,8,21,36,0,1,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/35b61e5dbca344febff2666092808abb-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/35b61e5dbca344febff2666092808abb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 21\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 21 - took 0.00 seconds\nCbc0012I Integer solution of 21 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 21, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 21 to 21\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nMinimum total cost: 21.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20311379432678223}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 23, 23, 10, 14, 14, 2], [7, 18, 3, 16, 6, 24, 8], [15, 23, 24, 15, 1, 13, 4], [9, 7, 19, 13, 7, 3, 4], [4, 13, 24, 24, 24, 7, 10], [1, 4, 12, 17, 8, 19, 1], [13, 2, 5, 4, 5, 23, 3]]"
613,mul,4,17884734,112161,0,17833334,0,"{'ok': True, 'value': 17884734, 'stdout': '17884734\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0978090763092041}",1,Compute: 9498 * 1883
614,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09795427322387695}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""accc""
T = ""dbaca"""
615,ilp_partition,16,1,1,1,32,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.30484962463378906}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 3, 27, 32, 46, 40, 40, 19, 35, 12, 48, 18, 12, 21, 46, 44]"
616,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_7qit89v3/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_7qit89v3/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0949404239654541}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
617,lcs,32,16,15,0,1,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11050772666931152}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccababadcdbbdaaaaaaadcdacbbabcdb""
T = ""ccbccaccabcddcadaabdbbdcbdccccc"""
618,mul,8,647612185019028,3061156755318,0,64036935541696,0,"{'ok': True, 'value': 647612185019028, 'stdout': '647612185019028\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09455585479736328}",1,Compute: 33825153 * 19145876
619,ilp_prod,16,146,147,0,150,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_shzqhcm_/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_shzqhcm_/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15674543380737305}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 40, 29, 7, 7, 28]
consumption (rows=resources) = [[6, 15, 9, 2, 11, 1], [15, 2, 1, 12, 12, 2], [9, 5, 9, 4, 9, 9], [11, 13, 15, 5, 11, 8]]
capacity = [41, 51, 35, 44]
upper_bounds = [3, 3, 3, 4, 3, 3]"
620,ilp_prod,16,146,165,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 47, 27, 5, 3, 26]
consumption (rows=resources) = [[7, 16, 15, 9, 7, 4], [5, 3, 10, 10, 14, 15], [16, 7, 10, 13, 12, 4], [8, 15, 14, 14, 10, 9]]
capacity = [49, 46, 32, 51]
upper_bounds = [3, 3, 3, 3, 3, 3]"
621,lcs,16,11,8,0,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0964193344116211}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcaaddcdcbcbdada""
T = ""bbaddccdccbacabdc"""
622,ilp_prod,4,30,40,0,60,0,"{'ok': True, 'value': 60, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e500991cc7a7498f84275c361e3c3264-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e500991cc7a7498f84275c361e3c3264-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 60 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -60 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                60.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n60.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16025018692016602}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 4, 4]
consumption (rows=resources) = [[2, 1, 2], [2, 1, 4], [4, 2, 3]]
capacity = [14, 15, 12]
upper_bounds = [3, 6, 3]"
623,sub,2,70,70,1,70,1,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10880899429321289}",1,Compute: 96 - 26
624,knap,4,31,16,0,0,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09807705879211426}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 6, 1]
V = [6, 16, 1, 9]
C = 6"
625,add,8,116607443,116607443,1,116607443,1,"{'ok': True, 'value': 116607443, 'stdout': '116607443\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10630297660827637}",1,Compute: 79630882 + 36976561
626,ilp_partition,16,0,1,0,34,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2203516960144043}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 27, 38, 42, 36, 28, 34, 25, 11, 5, 32, 15, 47, 10, 4, 39]"
627,ilp_prod,4,56,35,0,48,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5e7c19b495be4460900ffe06c7c30900-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5e7c19b495be4460900ffe06c7c30900-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 48 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -48 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1798546314239502}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 12]
consumption (rows=resources) = [[2, 1, 2], [2, 1, 4], [2, 2, 4]]
capacity = [16, 8, 16]
upper_bounds = [4, 8, 3]"
628,sub,32,26828243208380174144008007789345,0,0,26828243209370174143980207789345,0,"{'ok': True, 'value': 26828243208380174144008007789345, 'stdout': '26828243208380174144008007789345\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09789609909057617}",1,Compute: 65756257111567467009642360471488 - 38928013903187292865634352682143
629,lcs,32,14,10,0,1,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10134148597717285}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdadabbabadacacdddbbcdbbdadabcdd""
T = ""dcdcbaccccccabadbaaadacccccaccb"""
630,rod,32,1920,1055,0,0,0,"{'ok': True, 'value': 1920, 'stdout': '1920\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09879612922668457}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [60, 81, 32, 80, 21, 83, 70, 20, 66, 29, 74, 29, 44, 74, 57, 20, 52, 94, 91, 3, 55, 35, 33, 12, 96, 77, 1, 19, 1, 53, 47, 51]"
631,knap,8,101,147,0,0,0,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08956527709960938}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 13, 16, 7, 4, 9, 1]
V = [12, 31, 4, 5, 2, 17, 10, 29]
C = 27"
632,knap,4,22,19,0,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11469268798828125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 8, 3, 7]
V = [8, 1, 2, 14]
C = 10"
633,ilp_assign,16,77,105,0,114,0,"{'ok': True, 'value': 77, 'stdout': '77\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6520156860351562}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 32, 32, 29, 25, 23, 37], [22, 23, 33, 11, 26, 5, 43], [33, 31, 21, 31, 5, 42, 5], [16, 41, 5, 23, 18, 11, 37], [13, 42, 46, 44, 44, 27, 5], [42, 39, 25, 35, 1, 13, 21], [11, 45, 4, 47, 6, 45, 26]]"
634,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0986020565032959}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcc""
T = ""abb"""
635,ilp_assign,8,31,46,0,56,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40772485733032227}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 8, 3, 9, 24, 13, 16], [13, 22, 6, 10, 23, 10, 20], [9, 1, 7, 8, 8, 15, 1], [3, 13, 11, 3, 16, 1, 23], [12, 15, 22, 16, 2, 9, 19], [22, 9, 7, 6, 20, 18, 9], [9, 17, 3, 4, 14, 13, 17]]"
636,ilp_partition,32,0,1,0,44,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.036276340484619}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [56, 49, 93, 56, 62, 24, 93, 44, 18, 54, 36, 22, 81, 85, 47, 11, 85, 20, 60, 74, 51, 87, 10, 54]"
637,ilp_assign,32,106,187,0,117,0,"{'ok': True, 'value': 106, 'stdout': '106\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40076684951782227}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 62, 30, 68, 93, 3, 31], [1, 89, 52, 80, 86, 85, 60], [6, 68, 53, 30, 48, 80, 23], [26, 18, 16, 77, 77, 34, 61], [48, 48, 92, 38, 22, 75, 18], [18, 90, 31, 20, 41, 59, 11], [79, 28, 43, 95, 53, 26, 1]]"
638,mul,32,814985905282445440617461763248564183039219608225652674753657917,83076345636795764143204377609377,0,818463636243885556164694556944466444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 814985905282445440617461763248564183039219608225652674753657917, 'stdout': '814985905282445440617461763248564183039219608225652674753657917\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11519932746887207}",1,Compute: 12153616080367435003820553528323 * 67057071730194584623581641394879
639,ilp_prod,32,487,1000,0,288,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_0w31ps3l/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_0w31ps3l/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1678149700164795}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 96, 11, 7, 89, 42]
consumption (rows=resources) = [[17, 26, 30, 23, 21, 1], [29, 13, 16, 7, 12, 5], [3, 10, 14, 7, 7, 19], [16, 30, 29, 24, 18, 18]]
capacity = [109, 110, 67, 116]
upper_bounds = [3, 3, 3, 4, 5, 3]"
640,ilp_assign,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4152956008911133}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4], [3, 2]]"
641,ilp_partition,2,1,1,1,255,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08845233917236328}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 2, 5, 2]"
642,mul,8,2292747044061320,2267712088322440,0,23038512320000,0,"{'ok': True, 'value': 2292747044061320, 'stdout': '2292747044061320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1018221378326416}",1,Compute: 93989665 * 24393608
643,ilp_assign,8,28,10,0,36,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38010430335998535}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 2, 16, 5, 23, 5, 23], [20, 12, 15, 11, 22, 2, 3], [7, 19, 22, 24, 24, 1, 3], [14, 9, 7, 4, 11, 8, 11], [16, 18, 13, 18, 7, 8, 13], [3, 16, 16, 1, 15, 7, 1], [7, 8, 10, 20, 17, 6, 3]]"
644,ilp_prod,32,436,0,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_eq8o5sn1/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_eq8o5sn1/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16103792190551758}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [61, 56, 93, 20, 94, 64]
consumption (rows=resources) = [[4, 6, 8, 6, 2, 28], [21, 6, 1, 14, 8, 7], [28, 19, 17, 11, 31, 11], [28, 24, 16, 13, 28, 6]]
capacity = [73, 87, 103, 79]
upper_bounds = [3, 3, 4, 6, 3, 3]"
645,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08984756469726562}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""ddd"""
646,mul,4,42277950,86,0,4150350,0,"{'ok': True, 'value': 42277950, 'stdout': '42277950\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09167003631591797}",1,Compute: 5850 * 7227
647,rod,16,560,46,0,84,0,"{'ok': True, 'value': 560, 'stdout': '560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10632824897766113}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 22, 18, 37, 32, 13, 39, 29, 37, 13, 32, 5, 5, 18, 16, 46]"
648,knap,32,1871,1045,0,19,0,"{'ok': True, 'value': 1871, 'stdout': '1871\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10441708564758301}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [51, 20, 24, 27, 53, 62, 13, 20, 18, 8, 22, 5, 19, 41, 32, 38, 29, 49, 18, 19, 17, 5, 62, 35, 60, 46, 10, 18, 61, 61, 13, 22]
V = [125, 50, 110, 45, 31, 63, 22, 66, 115, 96, 10, 104, 111, 69, 126, 106, 16, 39, 83, 32, 87, 75, 82, 116, 37, 58, 90, 96, 76, 120, 72, 6]
C = 489"
649,lcs,4,2,3,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10270071029663086}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdd""
T = ""bcaad"""
650,mul,8,1653823131853480,659146920,0,16543435613520,0,"{'ok': True, 'value': 1653823131853480, 'stdout': '1653823131853480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09731221199035645}",1,Compute: 54928910 * 30108428
651,sub,32,11871581500226522215281870073737,68838841695710267048106987511678,0,128715815002265222160817700738737,0,"{'ok': True, 'value': 11871581500226522215281870073737, 'stdout': '11871581500226522215281870073737\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0882723331451416}",1,Compute: 78380651695710267048106987511678 - 66509070195483744832825117437941
652,sub,32,18028230993054031418424432820212,18028230993054031418434432920312,0,18028230993054031418424432820212,1,"{'ok': True, 'value': 18028230993054031418424432820212, 'stdout': '18028230993054031418424432820212\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08783531188964844}",1,Compute: 42204700996028862572816499738808 - 24176470002974831154392066918596
653,knap,2,6,10,0,0,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10100364685058594}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 3]
V = [6, 2, 4]
C = 6"
654,ilp_assign,32,80,185,0,205,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3925018310546875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 41, 54, 13, 69, 86, 13], [48, 34, 36, 16, 53, 5, 1], [54, 47, 9, 79, 22, 7, 38], [12, 42, 14, 20, 23, 92, 7], [13, 36, 76, 36, 62, 8, 51], [28, 30, 63, 11, 9, 73, 75], [88, 28, 26, 46, 31, 55, 94]]"
655,ilp_prod,32,320,459,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ofu4ayrz/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ofu4ayrz/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15661168098449707}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 62, 33, 9, 39, 88]
consumption (rows=resources) = [[23, 8, 18, 12, 9, 7], [26, 29, 4, 7, 12, 29], [31, 30, 26, 21, 11, 16], [4, 9, 8, 24, 11, 3]]
capacity = [78, 92, 106, 114]
upper_bounds = [3, 3, 4, 4, 7, 3]"
656,ilp_prod,32,304,1015,0,260,0,"{'ok': True, 'value': 130, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0cb1c5c636d548fc98b8e996ecb47e88-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0cb1c5c636d548fc98b8e996ecb47e88-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 143.448 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -130 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                130.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n130.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16624855995178223}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [65, 59, 76, 29, 74, 16]
consumption (rows=resources) = [[18, 21, 11, 11, 2, 19], [28, 13, 2, 10, 2, 22], [15, 25, 30, 24, 28, 9], [29, 14, 12, 8, 4, 18]]
capacity = [115, 122, 120, 64]
upper_bounds = [3, 4, 4, 5, 4, 3]"
657,sub,16,4409111978523318,1010101010,0,4409111978523318,1,"{'ok': True, 'value': 4409111978523318, 'stdout': '4409111978523318\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10114312171936035}",1,Compute: 7079655073254161 - 2670543094730843
658,ilp_assign,16,79,105,0,1,0,"{'ok': True, 'value': 79, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8caf647a422e4725bd7c73302ee4ae07-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/8caf647a422e4725bd7c73302ee4ae07-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 79 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 79\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 79 - took 0.00 seconds\nCbc0012I Integer solution of 79 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 79, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 79 to 79\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                79.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 79.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17693185806274414}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 24, 7, 23, 31, 39, 25], [43, 31, 14, 45, 34, 3, 46], [47, 26, 29, 14, 20, 32, 42], [33, 30, 24, 3, 25, 15, 2], [18, 47, 33, 11, 40, 25, 28], [23, 19, 7, 19, 18, 15, 27], [24, 23, 30, 31, 16, 32, 12]]"
659,mul,4,6044876,230,0,6199916,0,"{'ok': True, 'value': 6044876, 'stdout': '6044876\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09927582740783691}",1,Compute: 1798 * 3362
660,ilp_assign,16,48,114,0,0,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/db41d8f8f94b4aaf90e26d3edcaa02a8-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/db41d8f8f94b4aaf90e26d3edcaa02a8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 48 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 48\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 48 - took 0.00 seconds\nCbc0012I Integer solution of 48 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 48, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 48 to 48\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\nStatus: Optimal\nMinimum total cost: 48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18259549140930176}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 1, 48, 21, 31, 38, 2], [38, 10, 46, 11, 32, 48, 42], [8, 38, 22, 35, 5, 18, 15], [33, 4, 46, 3, 48, 12, 5], [14, 32, 11, 11, 41, 7, 9], [36, 39, 7, 2, 38, 19, 40], [20, 14, 40, 13, 40, 8, 9]]"
661,rod,4,48,12,0,1,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09887242317199707}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 3, 1, 12]"
662,knap,2,8,10,0,-1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08691930770874023}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 1]
V = [1, 8, 7]
C = 3"
663,rod,32,960,1073,0,2,0,"{'ok': True, 'value': 960, 'stdout': '960\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09647631645202637}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [30, 57, 69, 87, 71, 30, 45, 6, 73, 35, 56, 5, 21, 83, 6, 89, 9, 31, 53, 71, 50, 30, 10, 8, 28, 4, 20, 67, 3, 23, 38, 39]"
664,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09401559829711914}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daad""
T = ""bdc"""
665,sub,2,27,27,1,27,1,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09359121322631836}",1,Compute: 70 - 43
666,ilp_partition,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12567353248596191}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 3, 5]"
667,mul,8,2100088151813126,818468230,0,10230852,0,"{'ok': True, 'value': 2100088151813126, 'stdout': '2100088151813126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08565139770507812}",1,Compute: 25658762 * 81846823
668,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11136555671691895}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [57, 40, 87, 94, 16, 68, 62, 37, 43, 39, 23, 4, 83, 92, 3, 56, 57, 3, 6, 22, 59, 77, 88, 58]"
669,rod,32,1696,1050,0,1,0,"{'ok': True, 'value': 1696, 'stdout': '1696\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09599447250366211}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [53, 55, 69, 48, 9, 39, 56, 25, 11, 66, 59, 42, 37, 61, 37, 95, 34, 56, 34, 25, 62, 9, 13, 93, 62, 87, 59, 91, 54, 1, 49, 71]"
670,knap,16,312,141,0,1,0,"{'ok': True, 'value': 312, 'stdout': '312\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0967261791229248}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 31, 28, 14, 32, 29, 25, 1, 10, 24, 18, 7, 15, 2, 17, 12]
V = [40, 23, 26, 46, 37, 5, 11, 59, 8, 2, 12, 2, 29, 17, 4, 46]
C = 141"
671,rod,32,1344,1050,0,1,0,"{'ok': True, 'value': 1344, 'stdout': '1344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0945122241973877}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [42, 62, 20, 43, 73, 2, 91, 25, 41, 83, 22, 57, 70, 9, 95, 28, 7, 60, 92, 9, 34, 53, 15, 89, 23, 58, 65, 78, 42, 45, 58, 86]"
672,sub,4,3866,3866,1,3866,1,"{'ok': True, 'value': 3866, 'stdout': '3866\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09560561180114746}",1,Compute: 5526 - 1660
673,knap,2,5,5,1,-1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09635567665100098}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 2]
V = [2, 1, 5]
C = 2"
674,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10141944885253906}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbd""
T = ""dacb"""
675,ilp_partition,2,2,0,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10652279853820801}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 2, 6]"
676,sub,32,18828436111485949721229179391560,137492573,0,18828436111485949721229179391560,1,"{'ok': True, 'value': 18828436111485949721229179391560, 'stdout': '18828436111485949721229179391560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09513473510742188}",1,Compute: 59851976296893640170402702701255 - 41023540185407690449173523309695
677,sub,32,75776116218864948590530289616793,22966158259744183066828962892538,0,75776116218864948589530290616793,0,"{'ok': True, 'value': 75776116218864948590530289616793, 'stdout': '75776116218864948590530289616793\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10399436950683594}",1,Compute: 98742274478609131657359252509331 - 22966158259744183066828962892538
678,mul,8,1581371786234008,65,0,158234340588688,0,"{'ok': True, 'value': 1581371786234008, 'stdout': '1581371786234008\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0831904411315918}",1,Compute: 25154014 * 62867572
679,ilp_assign,4,19,0,0,28,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4025883674621582}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5, 12, 5], [7, 10, 9, 1], [8, 11, 9, 9], [4, 7, 5, 12]]"
680,sub,16,6626247628183973,1248758084287227,0,1248758084287227,0,"{'ok': True, 'value': 6626247628183973, 'stdout': '6626247628183973\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09273982048034668}",1,Compute: 7875005712471200 - 1248758084287227
681,add,8,101265381,19066108,0,101265381,1,"{'ok': True, 'value': 101265381, 'stdout': '101265381\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09125280380249023}",1,Compute: 82199273 + 19066108
682,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09528374671936035}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacdbabd""
T = ""cbbddcd"""
683,mul{'ok': True, 'value': 2790348582876532690476087175924769543036434416950052299635299660, 'stdout': '2790348582876532690476087175924769543036434416950052299635299660\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09026980400085449}",1,Compute: 67008987730400984491678241498292 * 41641407778058299161616600905855
684,mul,8,6803672436767250,34,0,68033835174450,0,"{'ok': True, 'value': 6803672436767250, 'stdout': '6803672436767250\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09318256378173828}",1,Compute: 72220647 * 94206750
685,ilp_assign,4,9,15,0,21,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40547728538513184}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 9, 9, 3], [10, 3, 11, 8], [2, 8, 4, 7], [3, 2, 1, 9]]"
686,ilp_prod,4,54,40,0,4,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6bf2e3b46778459888ac44ea0df4e099-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6bf2e3b46778459888ac44ea0df4e099-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18586206436157227}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6, 4]
consumption (rows=resources) = [[1, 1, 1], [3, 1, 2], [1, 1, 1]]
capacity = [12, 9, 14]
upper_bounds = [3, 9, 4]"
687,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10666799545288086}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""aa"""
688,knap,2,10,12,0,-1,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09841108322143555}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 4]
V = [5, 5, 7]
C = 4"
689,ilp_partition,32,1,1,1,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.045037269592285}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [48, 67, 86, 5, 95, 89, 96, 20, 91, 3, 15, 16, 8, 54, 91, 29, 68, 57, 58, 92, 71, 62, 9, 19]"
690,sub,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11023664474487305}",1,Compute: 97 - 87
691,mul,16,27928749560039575725512029104940,0,0,2800499323898204535544460,0,"{'ok': True, 'value': 27928749560039575725512029104940, 'stdout': '27928749560039575725512029104940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08256077766418457}",1,Compute: 5124999021150860 * 5449513150105529
692,mul{'ok': True, 'value': 2333967711787161856717446283794479209412302947513320027499478267, 'stdout': '2333967711787161856717446283794479209412302947513320027499478267\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09469342231750488}",1,Compute: 54354778153901531227185248602049 * 42939513158874552507909837181883
693,ilp_prod,32,344,1000,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gfdmezg_/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_gfdmezg_/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15630149841308594}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 57, 86, 45, 33, 90]
consumption (rows=resources) = [[24, 26, 1, 13, 29, 23], [10, 24, 29, 29, 23, 31], [10, 22, 23, 29, 12, 30], [31, 15, 1, 4, 28, 2]]
capacity = [80, 127, 92, 108]
upper_bounds = [3, 3, 4, 3, 3, 3]"
694,ilp_assign,16,59,104,0,22,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4006693363189697}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 36, 1, 16, 45, 3, 38], [43, 44, 28, 44, 36, 5, 22], [42, 25, 5, 21, 10, 9, 42], [37, 44, 3, 27, 38, 28, 41], [33, 42, 14, 42, 2, 10, 35], [29, 16, 18, 2, 39, 43, 22], [23, 20, 34, 40, 38, 16, 22]]"
695,ilp_partition,8,0,1,0,10,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09667658805847168}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 17, 2, 15, 6, 7, 16, 3]"
696,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09481477737426758}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbcdbdbacaddbda""
T = ""dbbbdabdbdcdaad"""
697,ilp_prod,32,268,1000,0,68,0,"{'ok': True, 'value': 170, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/43e4a0fa598e494fbbf1a594fcf637fb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/43e4a0fa598e494fbbf1a594fcf637fb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 29 COLUMNS\nAt line 192 RHS\nAt line 217 BOUNDS\nAt line 224 ENDATA\nProblem MODEL has 24 rows, 6 columns and 144 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 178.226 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -170 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                170.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n170.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17555642127990723}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [85, 88, 85, 14, 10, 49]
consumption (rows=resources) = [[16, 7, 29, 23, 1, 9], [12, 31, 11, 19, 1, 11], [10, 5, 18, 25, 17, 32], [19, 25, 31, 13, 23, 11]]
capacity = [81, 68, 89, 65]
upper_bounds = [3, 3, 3, 3, 3, 3]"
698,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09060859680175781}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbcdacc""
T = ""bbcbbcb"""
699,knap,4,29,24,0,-1,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09487462043762207}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 5, 5, 3]
V = [1, 16, 7, 13]
C = 9"
700,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10182547569274902}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""b"""
701,mul,32,4953518854300957742536116034490750927193505399160108441289802548,The final answer is the product of the two numbers.,0,490344533633365488686444496486644664646448880747727784434823839,0,"{'ok': True, 'value': 4953518854300957742536116034490750927193505399160108441289802548, 'stdout': '4953518854300957742536116034490750927193505399160108441289802548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08571577072143555}",1,Compute: 64094475188903392201877120992332 * 77284646448880747727784434823839
702,ilp_assign,16,100,105,0,110,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39618492126464844}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 40, 19, 39, 16, 43, 31], [45, 39, 39, 11, 15, 39, 40], [24, 36, 12, 6, 48, 21, 36], [35, 22, 25, 27, 38, 30, 24], [2, 6, 5, 29, 42, 18, 13], [47, 34, 31, 40, 36, 32, 33], [42, 19, 34, 47, 14, 28, 5]]"
703,ilp_partition,4,2,1,0,630,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08241868019104004}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 6, 10, 3]"
704,ilp_assign,2,9,6,0,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41654372215270996}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3], [6, 6]]"
705,mul,8,1230973667309160,260477496,0,12200443334000,0,"{'ok': True, 'value': 1230973667309160, 'stdout': '1230973667309160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08738327026367188}",1,Compute: 65119374 * 18903340
706,mul,32,9122226024386732822500427067097112027950125800484069565829354545,Not feasible,0,91643344855566849563965654496564946441,0,"{'ok': True, 'value': 9122226024386732822500427067097112027950125800484069565829354545, 'stdout': '9122226024386732822500427067097112027950125800484069565829354545\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0824127197265625}",1,Compute: 93282845237531598296210927270899 * 97791035438062291902182952954955
707,mul,2,684,684,1,702,0,"{'ok': True, 'value': 684, 'stdout': '684\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09611892700195312}",1,Compute: 18 * 38
708,ilp_prod,4,48,60,0,24,0,"{'ok': True, 'value': 4, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/415dad8daf6f4727a5eb3d54a22ecc6a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/415dad8daf6f4727a5eb3d54a22ecc6a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 4 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -4 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                4.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n4.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17177033424377441}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 12, 4]
consumption (rows=resources) = [[4, 3, 1], [2, 2, 4], [2, 1, 4]]
capacity = [12, 10, 16]
upper_bounds = [3, 4, 3]"
709,ilp_partition,4,3,1,0,998,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0866847038269043}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 9, 11, 3]"
710,rod,32,2304,1052,0,46,0,"{'ok': True, 'value': 2304, 'stdout': '2304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08815717697143555}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [72, 37, 42, 80, 76, 30, 19, 56, 6, 61, 31, 16, 94, 62, 95, 35, 68, 34, 45, 56, 41, 19, 79, 79, 54, 22, 7, 71, 15, 69, 64, 46]"
711,ilp_partition,32,1,100,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11191320419311523}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [85, 26, 87, 83, 4, 22, 68, 71, 10, 54, 40, 88, 18, 4, 62, 70, 47, 75, 11, 69, 34, 21, 57, 41]"
712,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21912574768066406}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [60, 25, 53, 38, 96, 40, 52, 50, 55, 17, 66, 55, 61, 14, 87, 2, 86, 50, 46, 4, 50, 76, 69, 58]"
713,ilp_partition,8,1,1,1,0,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09355616569519043}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 16, 17, 12, 16, 21, 1, 6]"
714,ilp_prod,16,111,161,0,40,0,"{'ok': True, 'value': 111, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d7d8167cc08c47b3b3dffae1bf70fbe0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d7d8167cc08c47b3b3dffae1bf70fbe0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 133.976 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -111 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3.6666667\nCbc0013I At root node, 14 cuts changed objective from -130.29508 to -111.01003 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 15 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 25 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -111, took 13 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -130.295 to -111.01\nProbing was tried 4 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 15 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 25 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                111.00000000\nEnumerated nodes:               0\nTotal iterations:               13\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n111.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16408634185791016}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [31, 3, 3, 39, 40, 19]
consumption (rows=resources) = [[15, 11, 13, 14, 11, 9], [2, 4, 1, 11, 16, 15], [6, 8, 4, 3, 5, 9], [14, 1, 4, 16, 9, 10]]
capacity = [46, 39, 42, 40]
upper_bounds = [3, 4, 3, 3, 3, 3]"
715,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09833717346191406}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""ccc"""
716,knap,8,87,110,0,0,0,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09367108345031738}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 16, 11, 8, 7, 3, 14]
V = [23, 5, 11, 12, 15, 6, 19, 25]
C = 32"
717,rod,4,32,32,1,4,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08882284164428711}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 9, 11, 3]"
718,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08812856674194336}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""bc"""
719,rod,32,1600,1084,0,1,0,"{'ok': True, 'value': 1600, 'stdout': '1600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10534334182739258}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [50, 30, 22, 11, 5, 57, 54, 41, 67, 10, 63, 42, 11, 70, 9, 23, 53, 67, 16, 81, 16, 89, 61, 31, 71, 7, 39, 16, 60, 27, 20, 64]"
720,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09775447845458984}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdabbdddacbddba""
T = ""cddcbcddacacbadac"""
721,knap,16,413,103,0,-1,0,"{'ok': True, 'value': 413, 'stdout': '413\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10792422294616699}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 27, 2, 32, 15, 9, 6, 5, 5, 23, 5, 3, 6, 12, 20, 10]
V = [61, 31, 27, 30, 42, 47, 10, 33, 64, 15, 16, 16, 51, 32, 40, 24]
C = 103"
722,mul,2,1040,1040,1,1040,1,"{'ok': True, 'value': 1040, 'stdout': '1040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09469008445739746}",1,Compute: 20 * 52
723,mul,2,1748,,0,1748,1,"{'ok': True, 'value': 1748, 'stdout': '1748\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08641886711120605}",1,Compute: 19 * 92
724,lcs,8,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09491634368896484}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbadabb""
T = ""dabbabdd"""
725,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20621061325073242}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [87, 94, 95, 76, 51, 3, 44, 38, 36, 62, 33, 69, 80, 36, 47, 87, 81, 6, 38, 90, 89, 71, 12, 24]"
726,add,8,89241069,89241069,1,89241069,1,"{'ok': True, 'value': 89241069, 'stdout': '89241069\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09747076034545898}",1,Compute: 61962264 + 27278805
727,rod,2,12,12,1,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09693336486816406}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 6]"
728,ilp_partition,16,1,10,0,39,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21412301063537598}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 25, 26, 47, 13, 8, 2, 48, 39, 46, 11, 7, 33, 45, 5, 32]"
729,add,2,127,127,1,127,1,"{'ok': True, 'value': 127, 'stdout': '127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08185267448425293}",1,Compute: 91 + 36
730,rod,4,48,8,0,9,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08623051643371582}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 2, 9, 8]"
731,mul,4,19994819,100,0,20045999,0,"{'ok': True, 'value': 19994819, 'stdout': '19994819\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09412050247192383}",1,Compute: 2843 * 7033
732,sub,8,9805624,9803622,0,10005624,0,"{'ok': True, 'value': 9805624, 'stdout': '9805624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08801555633544922}",1,Compute: 45736447 - 35930823
733,lcs,8,4,5,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11844301223754883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacdcccb""
T = ""bdadcab"""
734,rod,8,152,30,0,30,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0980980396270752}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 15, 7, 15, 14, 19, 24, 19]"
735,ilp_prod,4,36,46,0,30,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/389ee990f1b84a2dbd288b1da6576967-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/389ee990f1b84a2dbd288b1da6576967-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14.4 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1805434226989746}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 10, 6]
consumption (rows=resources) = [[2, 1, 2], [2, 4, 4], [1, 3, 3]]
capacity = [14, 13, 12]
upper_bounds = [6, 3, 3]"
736,ilp_prod,2,36,43,0,18,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/662336bfae274b37a64c9c8c14db25a7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/662336bfae274b37a64c9c8c14db25a7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2241199016571045}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7]
consumption (rows=resources) = [[1, 2], [1, 2]]
capacity = [10, 6]
upper_bounds = [6, 3]"
737,mul,32,1453715891273644821121459397264073739382321788685798814255815236,143255732195919590804754821942836,0,144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 1453715891273644821121459397264073739382321788685798814255815236, 'stdout': '1453715891273644821121459397264073739382321788685798814255815236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08105993270874023}",1,Compute: 76627866097959795402377410971418 * 18971112798772687899181002741802
738,knap,8,85,105,0,0,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09907913208007812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 1, 16, 9, 4, 5, 3, 12]
V = [21, 13, 14, 20, 16, 11, 12, 23]
C = 29"
739,rod,8,96,22,0,20,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09876847267150879}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 8, 20, 16, 21, 2, 14, 20]"
740,ilp_assign,2,6,7,0,7,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3818094730377197}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [3, 4]]"
741,ilp_partition,16,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.23523473739624023}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [42, 48, 43, 21, 26, 32, 19, 47, 36, 39, 34, 31, 41, 13, 28, 19]"
742,add,32,82194600264935978868797953449675,0,0,82194599964935978868797953450675,0,"{'ok': True, 'value': 82194600264935978868797953449675, 'stdout': '82194600264935978868797953449675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09532761573791504}",1,Compute: 30034445491668798176580844460915 + 52160154773267180692217108988760
743,add,32,34225170211551912107928411462692,14334313111111111111111111111111,0,34225170211551912077928411462792,0,"{'ok': True, 'value': 34225170211551912107928411462692, 'stdout': '34225170211551912107928411462692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10342240333557129}",1,Compute: 22828628755530805777653875225783 + 11396541456021106330274536236909
744,rod,8,184,25,0,1,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09936189651489258}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 6, 15, 2, 4, 17, 12, 11]"
745,ilp_prod,32,450,400,0,138,0,"{'ok': True, 'value': 66, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/07ff28cc1b174e2cae59dca8e605eac5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/07ff28cc1b174e2cae59dca8e605eac5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 66 RHS\nAt line 73 BOUNDS\nAt line 80 ENDATA\nProblem MODEL has 6 rows, 6 columns and 36 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 80.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -66 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                66.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n66.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16043496131896973}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 32, 40, 86, 33, 9]
consumption (rows=resources) = [[7, 15, 26, 1, 30, 8], [15, 5, 2, 13, 25, 13], [27, 9, 26, 14, 31, 29], [3, 5, 10, 25, 19, 15]]
capacity = [110, 126, 99, 118]
upper_bounds = [3, 7, 3, 4, 3, 3]"
746,ilp_assign,4,11,11,1,21,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39841365814208984}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5, 3, 9], [3, 3, 2, 6], [4, 1, 1, 8], [8, 2, 10, 9]]"
747,lcs,16,11,7,0,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1082620620727539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadcdabbcdbccddc""
T = ""adacddbbabdbcdbc"""
748,ilp_partition,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10642313957214355}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 8, 7, 4]"
749,sub,8,2479590,2479590,1,2479590,1,"{'ok': True, 'value': 2479590, 'stdout': '2479590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0942990779876709}",1,Compute: 95582958 - 93103368
750,mul,8,1171651310016078,11631859658554549,0,116808985544458,0,"{'ok': True, 'value': 1171651310016078, 'stdout': '1171651310016078\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09645414352416992}",1,Compute: 82637953 * 14178126
751,ilp_prod,16,177,150,0,55,0,"{'ok': True, 'value': 72, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/86f593a478b344a5ba56b3db258f1650-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/86f593a478b344a5ba56b3db258f1650-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 122 RHS\nAt line 137 BOUNDS\nAt line 144 ENDATA\nProblem MODEL has 14 rows, 6 columns and 84 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 82.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -72 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                72.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n72.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1888432502746582}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 29, 45, 40, 6, 42]
consumption (rows=resources) = [[7, 11, 8, 11, 9, 3], [3, 5, 11, 6, 12, 5], [1, 9, 11, 11, 5, 3], [11, 4, 10, 2, 3, 16]]
capacity = [33, 55, 38, 49]
upper_bounds = [4, 3, 3, 3, 3, 3]"
752,sub,2,73,73,1,73,1,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08940434455871582}",1,Compute: 87 - 14
753,rod,16,256,152,0,160,0,"{'ok': True, 'value': 256, 'stdout': '256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10091114044189453}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [16, 1, 32, 4, 22, 43, 29, 10, 8, 7, 12, 41, 27, 9, 4, 27]"
754,mul,8,2137644121755150,37316471700000000,0,214845283715850,0,"{'ok': True, 'value': 2137644121755150, 'stdout': '2137644121755150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08875012397766113}",1,Compute: 49522950 * 43164717
755,ilp_partition,8,6,1,0,2,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08654642105102539}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 4, 18, 18, 2, 20, 21, 2]"
756,add,8,109312450,,0,109312450,1,"{'ok': True, 'value': 109312450, 'stdout': '109312450\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09247660636901855}",1,Compute: 67978162 + 41334288
757,mul,2,5084,5016,0,5064,0,"{'ok': True, 'value': 5084, 'stdout': '5084\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08800673484802246}",1,Compute: 62 * 82
758,add,8,179978132,179978132,1,180078132,0,"{'ok': True, 'value': 179978132, 'stdout': '179978132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08811068534851074}",1,Compute: 85174678 + 94803454
759,ilp_partition,16,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20485877990722656}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [42, 33, 32, 11, 33, 14, 1, 1, 2, 43, 36, 16, 4, 16, 30, 19]"
760,rod,16,496,54,0,64,0,"{'ok': True, 'value': 496, 'stdout': '496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08895468711853027}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [31, 23, 16, 6, 40, 21, 31, 9, 22, 35, 43, 37, 13, 32, 9, 22]"
761,ilp_prod,2,29,35,0,28,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e444148d21ae4b61905da5981eaec8ae-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e444148d21ae4b61905da5981eaec8ae-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1640462875366211}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 7]
consumption (rows=resources) = [[2, 1], [1, 2]]
capacity = [9, 8]
upper_bounds = [4, 4]"
762,ilp_prod,16,235,165,0,5,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/43f8763f58df4105a3dcf60d84f3cf58-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/43f8763f58df4105a3dcf60d84f3cf58-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 16 COLUMNS\nAt line 101 RHS\nAt line 113 BOUNDS\nAt line 120 ENDATA\nProblem MODEL has 11 rows, 6 columns and 66 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8.18182 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16649818420410156}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 47, 24, 10, 46, 35]
consumption (rows=resources) = [[4, 14, 3, 8, 4, 10], [3, 9, 9, 7, 15, 5], [9, 1, 16, 10, 4, 4], [10, 3, 7, 9, 8, 11]]
capacity = [50, 45, 38, 60]
upper_bounds = [4, 3, 3, 3, 3, 5]"
763,mul,2,4416,96,0,4416,1,"{'ok': True, 'value': 4416, 'stdout': '4416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09356307983398438}",1,Compute: 46 * 96
764,ilp_prod,32,255,1008,0,6,0,"{'ok': True, 'value': 190, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/69f169cf6bba4e29ba283e9734c23c51-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/69f169cf6bba4e29ba283e9734c23c51-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 21 COLUMNS\nAt line 136 RHS\nAt line 153 BOUNDS\nAt line 160 ENDATA\nProblem MODEL has 16 rows, 6 columns and 96 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 204.844 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -190 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                190.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n190.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16608715057373047}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [95, 3, 16, 66, 66, 65]
consumption (rows=resources) = [[26, 10, 9, 32, 32, 14], [20, 18, 29, 15, 2, 5], [12, 31, 25, 32, 7, 23], [21, 22, 28, 10, 22, 7]]
capacity = [73, 105, 69, 100]
upper_bounds = [3, 3, 3, 3, 3, 3]"
765,add,16,16050563752933689,8,0,16050563752933689,1,"{'ok': True, 'value': 16050563752933689, 'stdout': '16050563752933689\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10460877418518066}",1,Compute: 9296279397433216 + 6754284355500473
766,knap,32,1784,1045,0,20,0,"{'ok': True, 'value': 1784, 'stdout': '1784\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10146307945251465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [50, 6, 21, 10, 6, 11, 40, 24, 31, 34, 9, 1, 51, 10, 25, 20, 38, 42, 36, 42, 39, 32, 8, 34, 7, 10, 35, 13, 30, 35, 11, 24]
V = [85, 126, 86, 70, 71, 104, 115, 25, 108, 119, 46, 29, 92, 5, 65, 18, 39, 113, 56, 72, 63, 9, 117, 70, 49, 27, 108, 82, 113, 48, 103, 126]
C = 392"
767,add,32,180078631563147751817096724439791,81049393131049244866568650320271,0,179978631563147751817096724440791,0,"{'ok': True, 'value': 180078631563147751817096724439791, 'stdout': '180078631563147751817096724439791\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09693527221679688}",1,Compute: 93579238432098506950528074119520 + 86499393131049244866568650320271
768,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09049654006958008}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""aa"""
769,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09068799018859863}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""a"""
770,knap,16,498,1043,0,0,0,"{'ok': True, 'value': 498, 'stdout': '498\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09924077987670898}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 4, 30, 27, 16, 6, 23, 21, 16, 13, 30, 6, 7, 4, 11, 21]
V = [62, 56, 60, 19, 9, 39, 36, 57, 20, 18, 44, 37, 50, 62, 41, 58]
C = 130"
771,lcs,4,1,3,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09522151947021484}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcd""
T = ""daa"""
772,ilp_assign,2,6,3,0,7,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3972923755645752}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5], [1, 5]]"
773,rod,16,592,18,0,46,0,"{'ok': True, 'value': 592, 'stdout': '592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09265780448913574}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [37, 32, 31, 2, 6, 33, 19, 35, 40, 38, 4, 18, 32, 29, 11, 46]"
774,add,32,150582295770017777908576768088721,867925371514368553324844977113691,0,150582295770017778108576768088721,0,"{'ok': True, 'value': 150582295770017777908576768088721, 'stdout': '150582295770017777908576768088721\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08909058570861816}",1,Compute: 63789758618580922576092270377352 + 86792537151436855332484497711369
775,ilp_prod,2,35,35,1,20,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3be8e567e3e843babe525c86bec80e1d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3be8e567e3e843babe525c86bec80e1d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17579317092895508}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 5]
consumption (rows=resources) = [[2, 1], [1, 1]]
capacity = [8, 7]
upper_bounds = [4, 7]"
776,ilp_assign,8,31,105,0,90,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3927125930786133}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 22, 23, 14, 22, 16, 16], [11, 24, 19, 6, 8, 12, 11], [20, 6, 19, 14, 24, 13, 11], [11, 24, 18, 14, 5, 15, 3], [21, 23, 10, 13, 7, 1, 23], [17, 15, 8, 10, 1, 22, 1], [10, 20, 1, 2, 20, 8, 17]]"
777,rod,16,560,502,0,65,0,"{'ok': True, 'value': 560, 'stdout': '560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1175990104675293}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 29, 48, 47, 10, 34, 46, 24, 33, 34, 21, 37, 36, 25, 8, 9]"
778,mul,8,810368305546356,864068044,0,80728246354476,0,"{'ok': True, 'value': 810368305546356, 'stdout': '810368305546356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08846759796142578}",1,Compute: 32069636 * 25269021
779,ilp_assign,8,49,56,0,68,0,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4053483009338379}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 6, 12, 18, 18, 9, 14], [4, 23, 16, 23, 5, 14, 20], [1, 12, 6, 19, 16, 11, 1], [1, 9, 7, 17, 19, 18, 6], [23, 13, 20, 16, 19, 16, 7], [8, 12, 16, 19, 12, 18, 14], [17, 10, 14, 9, 10, 16, 20]]"
780,sub,32,21848626917807993689450046030204,24110104020,0,21848626917807988689450476030204,0,"{'ok': True, 'value': 21848626917807993689450046030204, 'stdout': '21848626917807993689450046030204\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09229660034179688}",1,Compute: 86084383599461364759712731851463 - 64235756681653371070262685821259
781,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.100799560546875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcbccacdbadbdbdabdbccbdbbcaaaad""
T = ""cacabccbadbccdaddbbcabaabcacacbc"""
782,add,32,121803940891892801056088381861281,121803940891892801056088381861281,1,121803940891892799056688381861281,0,"{'ok': True, 'value': 121803940891892801056088381861281, 'stdout': '121803940891892801056088381861281\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1008756160736084}",1,Compute: 79183310565018927258208441290238 + 42620630326873873797879940571043
783,mul,8,2926791014411100,321080,0,29122194933360,0,"{'ok': True, 'value': 2926791014411100, 'stdout': '2926791014411100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09995317459106445}",1,Compute: 43045428 * 67993075
784,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09705829620361328}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdccbbdbdaadbbb""
T = ""ddbdaacccbdcbada"""
785,lcs,32,17,15,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09006595611572266}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbadcdaddbbabdbddadddccadbdaacc""
T = ""ccabacbbddcbcbdcbaadbaabcabcbadaa"""
786,ilp_assign,2,9,9,1,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4093015193939209}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6], [3, 6]]"
787,sub,16,104286919567464,1042869204677464,0,1042869195667464,0,"{'ok': True, 'value': 104286919567464, 'stdout': '104286919567464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10439491271972656}",1,Compute: 3090174088286413 - 2985887168718949
788,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11259031295776367}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccb""
T = ""dcc"""
789,ilp_assign,8,28,36,0,36,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.419952392578125}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 1, 10, 2, 1, 13, 18], [20, 18, 5, 16, 4, 3, 19], [2, 14, 7, 8, 8, 1, 3], [4, 22, 24, 7, 21, 7, 15], [12, 18, 11, 23, 12, 24, 22], [23, 20, 1, 14, 13, 13, 19], [16, 14, 11, 5, 1, 7, 7]]"
790,mul,4,9686151,85181,0,9584311,0,"{'ok': True, 'value': 9686151, 'stdout': '9686151\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10111594200134277}",1,Compute: 1679 * 5769
791,ilp_assign,32,57,110,0,115,0,"{'ok': True, 'value': 57, 'stdout': '57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4155080318450928}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 6, 90, 65, 93, 73, 12], [48, 7, 40, 24, 1, 57, 9], [14, 91, 5, 27, 5, 95, 54], [6, 23, 77, 45, 3, 13, 82], [58, 6, 86, 21, 72, 3, 93], [61, 47, 42, 68, 46, 73, 1], [41, 59, 89, 42, 41, 17, 72]]"
792,mul,16,7559760173179580297838838065225,1000,0,760432435843434444466433366433341,0,"{'ok': True, 'value': 7559760173179580297838838065225, 'stdout': '7559760173179580297838838065225\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08894586563110352}",1,Compute: 1462954294693957 * 5167461622415925
793,mul,4,12169594,1212202,0,1218394,0,"{'ok': True, 'value': 12169594, 'stdout': '12169594\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09043669700622559}",1,Compute: 1511 * 8054
794,mul{'ok': True, 'value': 1226447861250472557191755503492001582470059452494187529700461051, 'stdout': '1226447861250472557191755503492001582470059452494187529700461051\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08943963050842285}",1,Compute: 15716000049437716235924769724517 * 78038168579310493980436680737503
795,add,4,11516,7615,0,11516,1,"{'ok': True, 'value': 11516, 'stdout': '11516\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09878754615783691}",1,Compute: 3901 + 7615
796,ilp_prod,2,35,50,0,35,1,"{'ok': True, 'value': 5, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4ad840eefcf74075b723313c23cc9acf-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4ad840eefcf74075b723313c23cc9acf-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 7.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -5 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                5.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n5.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17562460899353027}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[1, 2], [1, 3]]
capacity = [9, 7]
upper_bounds = [7, 3]"
797,ilp_assign,8,40,112,0,91,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4093203544616699}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 6, 3, 23, 11, 13, 16], [13, 20, 17, 13, 2, 19, 11], [5, 6, 9, 21, 23, 6, 19], [6, 15, 4, 20, 24, 12, 20], [20, 8, 18, 21, 20, 13, 11], [5, 19, 17, 20, 15, 17, 4], [13, 13, 10, 11, 15, 19, 22]]"
798,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11821413040161133}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [96, 80, 96, 31, 5, 40, 62, 47, 96, 25, 26, 18, 55, 19, 52, 50, 81, 14, 89, 57, 68, 30, 30, 52]"
799,ilp_prod,2,20,17,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_q8cl9vhe/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 5*x[1]], ""Total Profit"")\nTypeError: lpSum() takes 1 positional argument but 2 were given\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18172240257263184}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5]
consumption (rows=resources) = [[3, 2], [1, 1]]
capacity = [9, 9]
upper_bounds = [3, 4]"
800,ilp_assign,16,72,105,0,115,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4248983860015869}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 16, 31, 1, 18, 21, 15], [12, 42, 21, 10, 42, 27, 21], [13, 5, 29, 32, 47, 27, 31], [4, 45, 18, 36, 42, 36, 14], [1, 3, 20, 11, 20, 47, 9], [46, 43, 34, 10, 36, 31, 33], [23, 14, 38, 33, 2, 9, 31]]"
801,ilp_partition,4,2,1,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10011148452758789}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 7, 6]"
802,rod,4,16,16,1,4,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0880582332611084}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 5, 7, 5]"
803,ilp_partition,16,1,1,1,36,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21995759010314941}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 20, 19, 40, 39, 8, 36, 25, 1, 42, 41, 7, 23, 47, 37, 14]"
804,ilp_partition,8,3,1,0,6,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0999135971069336}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 23, 1, 24, 24, 6, 14, 18]"
805,add,4,7731,7731,1,7731,1,"{'ok': True, 'value': 7731, 'stdout': '7731\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08851099014282227}",1,Compute: 1553 + 6178
806,rod,16,400,64,0,64,0,"{'ok': True, 'value': 400, 'stdout': '400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0908195972442627}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [25, 4, 11, 11, 37, 25, 3, 19, 4, 27, 22, 14, 28, 17, 41, 14]"
807,mul,16,54860832696402772969777591751332,504,0,54445952629838466564666666,0,"{'ok': True, 'value': 54860832696402772969777591751332, 'stdout': '54860832696402772969777591751332\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10775017738342285}",1,Compute: 7276927800714494 * 7539010170063278
808,sub,2,8,8,1,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09850740432739258}",1,Compute: 33 - 25
809,lcs,16,8,8,1,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09949636459350586}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacabdbccddcaaac""
T = ""cdbdddccaccbccdcd"""
810,knap,32,1712,1063,0,1,0,"{'ok': True, 'value': 1712, 'stdout': '1712\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10863757133483887}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 23, 1, 61, 12, 49, 50, 22, 30, 4, 52, 13, 57, 24, 44, 1, 8, 59, 38, 50, 18, 43, 31, 39, 13, 46, 13, 44, 64, 17, 26, 61]
V = [102, 103, 100, 59, 28, 90, 101, 8, 20, 58, 88, 53, 77, 83, 28, 117, 77, 29, 87, 3, 32, 102, 10, 103, 68, 127, 100, 44, 121, 2, 40, 35]
C = 510"
811,mul,4,57695638,511512,0,5738338,0,"{'ok': True, 'value': 57695638, 'stdout': '57695638\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10354900360107422}",1,Compute: 6578 * 8771
812,add,32,65120168149278583473232376982216,62210128149279383473232325375216,0,65120168149278583473232376982216,1,"{'ok': True, 'value': 65120168149278583473232376982216, 'stdout': '65120168149278583473232376982216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09772086143493652}",1,Compute: 44893303088939680280589027667528 + 20226865060338903192643349314688
813,sub,16,2553836508226483,2553840508226483,0,2553840508226483,0,"{'ok': True, 'value': 2553836508226483, 'stdout': '2553836508226483\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10344743728637695}",1,Compute: 5034907449115511 - 2481070940889028
814,ilp_partition,2,0,1,0,16,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10068655014038086}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 6, 3]"
815,ilp_partition,32,0,1,0,74,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21726727485656738}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 75, 61, 34, 44, 5, 57, 31, 38, 32, 93, 61, 62, 35, 91, 26, 74, 16, 94, 36, 89, 36, 2, 71]"
816,ilp_partition,4,0,1,0,7,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10329031944274902}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 6, 3, 7]"
817,knap,8,93,200,0,8,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09537839889526367}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 15, 5, 1, 14, 9, 16, 9]
V = [15, 19, 11, 16, 13, 32, 16, 16]
C = 35"
818,knap,8,120,110,0,20,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11733460426330566}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 7, 1, 2, 12, 3, 15, 10]
V = [20, 32, 25, 18, 15, 24, 7, 21]
C = 30"
819,ilp_partition,8,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09670782089233398}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 21, 8, 15, 14, 4, 1, 17]"
820,knap,32,1494,1645,0,25,0,"{'ok': True, 'value': 1494, 'stdout': '1494\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10590267181396484}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [43, 7, 53, 41, 48, 28, 40, 52, 27, 46, 24, 54, 17, 43, 59, 3, 25, 22, 12, 45, 39, 23, 25, 15, 63, 3, 14, 40, 20, 62, 57, 53]
V = [4, 3, 16, 61, 64, 84, 62, 106, 50, 101, 95, 12, 45, 29, 62, 86, 5, 122, 11, 55, 19, 125, 83, 117, 38, 35, 27, 69, 60, 59, 102, 33]
C = 551"
821,mul,2,7938,7938,1,7938,1,"{'ok': True, 'value': 7938, 'stdout': '7938\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09221625328063965}",1,Compute: 81 * 98
822,ilp_partition,8,1,1,1,13,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09696412086486816}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 23, 12, 22, 2, 22, 5, 13]"
823,ilp_partition,16,0,1,0,18,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.23349857330322266}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 34, 48, 9, 29, 19, 34, 18, 48, 21, 42, 8, 31, 35, 30, 31]"
824,rod,32,1568,1055,0,1,0,"{'ok': True, 'value': 1568, 'stdout': '1568\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08785367012023926}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [49, 22, 31, 66, 68, 23, 59, 40, 91, 77, 70, 23, 95, 95, 88, 69, 58, 37, 5, 45, 60, 8, 55, 74, 43, 56, 37, 3, 45, 6, 15, 71]"
825,mul,8,3170866789639444,3164787775590000,0,317484435989404,0,"{'ok': True, 'value': 3170866789639444, 'stdout': '3170866789639444\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10100340843200684}",1,Compute: 90374732 * 35085767
826,ilp_prod,2,24,20,0,24,1,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bb6c6d7ea4854fd8a690c10c5fb8e366-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bb6c6d7ea4854fd8a690c10c5fb8e366-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17677927017211914}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4]
consumption (rows=resources) = [[1, 3], [2, 3]]
capacity = [8, 7]
upper_bounds = [3, 3]"
827,ilp_assign,32,133,185,0,187,0,"{'ok': True, 'value': 133, 'stdout': '133\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40509796142578125}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[81, 15, 62, 20, 39, 55, 43], [12, 2, 53, 37, 13, 18, 60], [15, 17, 67, 96, 83, 15, 87], [21, 6, 17, 67, 36, 37, 83], [29, 68, 34, 95, 93, 85, 43], [47, 49, 36, 10, 75, 20, 84], [20, 10, 64, 36, 50, 42, 59]]"
828,sub,16,1622562821764032,1622562821764032,1,1622562821764032,1,"{'ok': True, 'value': 1622562821764032, 'stdout': '1622562821764032\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09190082550048828}",1,Compute: 9666410333265853 - 8043847511501821
829,ilp_prod,2,18,24,0,12,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/47c68bc76a9c4cc192e467f95ed7932f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/47c68bc76a9c4cc192e467f95ed7932f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16599488258361816}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[2, 2], [1, 1]]
capacity = [6, 7]
upper_bounds = [3, 3]"
830,add,32,44587243210467403323812567657822,48393619230467403323267358869692,0,44587243210467403323812567657822,1,"{'ok': True, 'value': 44587243210467403323812567657822, 'stdout': '44587243210467403323812567657822\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10433602333068848}",1,Compute: 19990433547153397162133679434847 + 24596809663314006161678888222975
831,sub,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09827709197998047}",1,Compute: 28 - 22
832,knap,2,16,16,1,-1,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08830928802490234}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 5]
V = [9, 7, 9]
C = 4"
833,rod,8,176,50,0,1,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09034156799316406}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 15, 2, 18, 11, 7, 11, 6]"
834,ilp_assign,4,20,18,0,28,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39521288871765137}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 10, 9, 4], [1, 11, 9, 4], [8, 9, 11, 8], [10, 10, 6, 6]]"
835,lcs,32,18,15,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08949446678161621}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdacabdaddcabcbddcbcabbdcbdadbab""
T = ""acdcccdbcabccdbcdcddcccbaaccccdb"""
836,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 302, 'stdout': '302\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11520624160766602}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 38, 19, 42, 37, 19, 40, 16, 10, 34, 21, 14, 2, 9, 15, 15]"
837,rod,16,528,153,0,64,0,"{'ok': True, 'value': 528, 'stdout': '528\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1151270866394043}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [33, 7, 40, 23, 3, 22, 39, 6, 2, 22, 19, 17, 31, 12, 12, 33]"
838,ilp_assign,32,87,205,0,209,0,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3968799114227295}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[80, 61, 78, 63, 20, 75, 75], [96, 50, 59, 49, 2, 16, 65], [96, 15, 35, 38, 32, 17, 44], [51, 11, 88, 73, 73, 32, 27], [1, 17, 82, 1, 37, 34, 34], [34, 29, 91, 86, 82, 87, 1], [3, 23, 89, 52, 24, 8, 43]]"
839,knap,2,6,11,0,0,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1002342700958252}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 5]
V = [2, 3, 6]
C = 5"
840,ilp_prod,16,90,135,0,240,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ba883320b1e04b7b9d2c05aa432f9533-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ba883320b1e04b7b9d2c05aa432f9533-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 14 COLUMNS\nAt line 87 RHS\nAt line 97 BOUNDS\nAt line 104 ENDATA\nProblem MODEL has 9 rows, 6 columns and 54 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 1.71429 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18160343170166016}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 25, 8, 5, 28, 35]
consumption (rows=resources) = [[16, 15, 7, 3, 16, 4], [9, 15, 8, 14, 12, 13], [9, 2, 4, 11, 5, 6], [2, 3, 8, 8, 16, 16]]
capacity = [64, 38, 54, 38]
upper_bounds = [4, 3, 4, 3, 3, 3]"
841,ilp_assign,16,38,105,0,114,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4342060089111328}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 41, 33, 8, 29, 3, 39], [35, 39, 24, 43, 47, 15, 20], [11, 32, 10, 1, 13, 15, 14], [27, 9, 23, 36, 2, 7, 13], [40, 38, 3, 21, 36, 25, 19], [46, 1, 45, 40, 28, 30, 5], [8, 37, 8, 2, 37, 3, 29]]"
842,lcs,16,9,6,0,16,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10410094261169434}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaaabdbcaaccddbd""
T = ""aaadcacaabbbada"""
843,ilp_prod,8,76,154,0,140,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_f8o83h39/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_f8o83h39/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16448545455932617}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 22, 6, 10]
consumption (rows=resources) = [[5, 8, 3, 5], [3, 5, 1, 1], [4, 6, 6, 2], [8, 1, 5, 3]]
capacity = [31, 22, 23, 26]
upper_bounds = [3, 3, 3, 6]"
844,sub,16,1549603517976489,1549553517976489,0,1553599517976490,0,"{'ok': True, 'value': 1549603517976489, 'stdout': '1549603517976489\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09897851943969727}",1,Compute: 2584856138042603 - 1035252620066114
845,rod,16,344,64,0,64,0,"{'ok': True, 'value': 344, 'stdout': '344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08872318267822266}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [21, 43, 15, 13, 41, 29, 19, 31, 33, 27, 16, 20, 16, 25, 6, 11]"
846,ilp_partition,16,0,1,0,28,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2149522304534912}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 33, 3, 37, 1, 1, 4, 21, 2, 2, 28, 25, 29, 28, 26, 38]"
847,knap,8,110,110,1,0,0,"{'ok': True, 'value': 110, 'stdout': '110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09797883033752441}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 12, 1, 3, 15, 16, 1, 8]
V = [4, 7, 25, 7, 27, 9, 31, 20]
C = 28"
848,sub,8,21086707,21086707,1,21086707,1,"{'ok': True, 'value': 21086707, 'stdout': '21086707\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10098886489868164}",1,Compute: 45549276 - 24462569
849,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_sw04kof0/main.py"", line 11, in <module>\n    print(cut_rod(P, N))\n  File ""/tmp/cot_exec_sw04kof0/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09804296493530273}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
850,ilp_prod,4,54,41,0,39,0,"{'ok': True, 'value': 27, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0e5e08c41335458e9ed25b71c55c7b01-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0e5e08c41335458e9ed25b71c55c7b01-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 31.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -27 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                27.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n27.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17731833457946777}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 5, 12]
consumption (rows=resources) = [[4, 3, 2], [1, 2, 3], [3, 1, 1]]
capacity = [14, 12, 13]
upper_bounds = [3, 4, 4]"
851,ilp_prod,2,49,21,0,7,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e697d7951bb94f45ae5163c7128f0a6b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e697d7951bb94f45ae5163c7128f0a6b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 9.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18555140495300293}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[1, 1], [2, 1]]
capacity = [7, 10]
upper_bounds = [5, 7]"
852,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09867739677429199}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccd""
T = ""babca"""
853,knap,4,16,12,0,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09848189353942871}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 5, 5]
V = [4, 12, 3, 1]
C = 9"
854,add,8,80954009,80954009,1,80953999,0,"{'ok': True, 'value': 80954009, 'stdout': '80954009\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09831571578979492}",1,Compute: 47981377 + 32972632
855,ilp_assign,16,39,105,0,105,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39275646209716797}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 4, 3, 22, 5, 34, 37], [16, 8, 44, 22, 25, 47, 43], [16, 37, 26, 4, 1, 1, 23], [1, 25, 35, 3, 28, 11, 16], [47, 2, 14, 8, 8, 3, 21], [22, 38, 20, 6, 25, 12, 2], [42, 46, 16, 27, 22, 21, 19]]"
856,mul,2,2592,54,0,2592,1,"{'ok': True, 'value': 2592, 'stdout': '2592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12310528755187988}",1,Compute: 48 * 54
857,mul{'ok': True, 'value': 4792510611791485087871325097320, 'stdout': '4792510611791485087871325097320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09705519676208496}",1,Compute: 2014909716426477 * 2378523748593160
858,sub,16,5975536867847814,5975536867847814,1,5975536867847814,1,"{'ok': True, 'value': 5975536867847814, 'stdout': '5975536867847814\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08785891532897949}",1,Compute: 8090337348588820 - 2114800480741006
859,mul,2,1258,74,0,1258,1,"{'ok': True, 'value': 1258, 'stdout': '1258\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08787727355957031}",1,Compute: 17 * 74
860,ilp_assign,8,30,35,0,91,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42583179473876953}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 10, 1, 24, 1, 12, 23], [4, 13, 12, 20, 16, 16, 23], [12, 18, 5, 6, 1, 13, 19], [8, 4, 5, 7, 10, 9, 15], [20, 24, 9, 8, 10, 2, 17], [5, 8, 20, 12, 11, 22, 19], [7, 16, 4, 21, 16, 9, 7]]"
861,mul,16,72772143750944783310051934794390,The actual multiplication is complex and requires a computer program to perform. It's not feasible to provide the exact answer in this format.,0,71959030841588959496565554595663215,0,"{'ok': True, 'value': 72772143750944783310051934794390, 'stdout': '72772143750944783310051934794390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08767104148864746}",1,Compute: 9172777658151730 * 7933490428199043
862,add,2,101,129,0,101,1,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10223770141601562}",1,Compute: 74 + 27
863,ilp_partition,32,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10523223876953125}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 58, 56, 41, 14, 55, 60, 50, 90, 45, 62, 39, 10, 87, 6, 84, 46, 48, 53, 20, 41, 79, 33, 20]"
864,ilp_assign,2,3,3,1,5,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4179551601409912}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3], [2, 2]]"
865,knap,16,345,104,0,0,0,"{'ok': True, 'value': 345, 'stdout': '345\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09883689880371094}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 24, 27, 22, 5, 20, 9, 24, 16, 32, 9, 18, 6, 10, 21, 6]
V = [36, 6, 2, 60, 10, 8, 45, 5, 53, 35, 4, 61, 30, 11, 2, 25]
C = 135"
866,ilp_prod,8,52,105,0,8,0,"{'ok': True, 'value': 52, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0c51a0df45f44b08bd6a77398bb1f9a0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0c51a0df45f44b08bd6a77398bb1f9a0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 55.4688 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -41 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -52 found by DiveCoefficient after 5 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 3.75\nCbc0013I At root node, 4 cuts changed objective from -55.052632 to -52 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 9 row cuts average 3.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -52, took 5 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -55.0526 to -52\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 9 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                52.00000000\nEnumerated nodes:               0\nTotal iterations:               5\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n52.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.22102999687194824}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 21, 5, 19]
consumption (rows=resources) = [[4, 8, 3, 8], [6, 4, 3, 2], [5, 8, 1, 7], [4, 7, 8, 3]]
capacity = [28, 17, 16, 32]
upper_bounds = [3, 3, 4, 3]"
867,lcs,8,4,5,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09911966323852539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbadbdb""
T = ""cddddcb"""
868,sub,2,18,18,1,18,1,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09554767608642578}",1,Compute: 52 - 34
869,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08773922920227051}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""aa"""
870,knap,8,86,110,0,1,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0971822738647461}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 1, 16, 14, 8, 2, 10, 7]
V = [14, 8, 26, 8, 4, 17, 21, 22]
C = 35"
871,rod,32,1072,86,0,165,0,"{'ok': True, 'value': 1072, 'stdout': '1072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12073945999145508}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [18, 67, 57, 76, 78, 71, 34, 43, 16, 21, 12, 50, 30, 56, 22, 62, 82, 93, 20, 14, 47, 17, 3, 86, 94, 85, 9, 74, 74, 43, 58, 18]"
872,ilp_prod,2,12,20,0,18,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/56d6033c2d174961a614f77994e1b24e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/56d6033c2d174961a614f77994e1b24e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16553282737731934}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[2, 2], [3, 3]]
capacity = [9, 7]
upper_bounds = [3, 3]"
873,ilp_prod,32,276,0,0,4,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ac7ee4aa3b4a47d8914c0f177089398c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ac7ee4aa3b4a47d8914c0f177089398c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 16 COLUMNS\nAt line 101 RHS\nAt line 113 BOUNDS\nAt line 120 ENDATA\nProblem MODEL has 11 rows, 6 columns and 66 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 1.2973 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16642165184020996}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 48, 24, 22, 74, 40]
consumption (rows=resources) = [[25, 5, 20, 19, 22, 6], [4, 4, 28, 17, 8, 21], [9, 24, 2, 2, 22, 15], [8, 23, 14, 24, 12, 13]]
capacity = [76, 95, 104, 74]
upper_bounds = [3, 3, 3, 3, 3, 4]"
874,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09897303581237793}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdda""
T = ""bbaab"""
875,ilp_assign,16,88,105,0,115,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3964955806732178}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 22, 6, 40, 9, 10, 45], [18, 21, 9, 27, 21, 7, 48], [30, 25, 10, 34, 24, 33, 13], [47, 32, 26, 14, 44, 11, 22], [39, 48, 47, 36, 32, 37, 20], [6, 12, 16, 43, 21, 15, 1], [16, 34, 8, 46, 47, 37, 33]]"
876,rod,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09003424644470215}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 6]"
877,ilp_assign,32,143,185,0,114,0,"{'ok': True, 'value': 143, 'stdout': '143\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5059218406677246}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[81, 60, 61, 7, 45, 90, 2], [18, 15, 94, 1, 62, 8, 64], [51, 74, 70, 59, 87, 66, 53], [46, 9, 86, 75, 90, 48, 34], [45, 63, 41, 49, 22, 58, 63], [18, 51, 64, 85, 84, 18, 30], [67, 90, 91, 82, 21, 81, 36]]"
878,knap,4,20,15,0,7,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08872056007385254}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 8, 1, 3]
V = [12, 7, 8, 5]
C = 9"
879,ilp_prod,32,336,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are that the total consumption of each resource must not exceed its capacity and that the quantity produced for each product must be non-negative. The upper bounds on the quantity of each product that can be produced are given by upper_bounds[j]. The problem is then solved using a linear programming solver, and the maximum profit is the value of the objective function after solving the problem.",0,120,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/311aa3da213e46f6be5ae7f435382348-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/311aa3da213e46f6be5ae7f435382348-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 20 COLUMNS\nAt line 129 RHS\nAt line 145 BOUNDS\nAt line 152 ENDATA\nProblem MODEL has 15 rows, 6 columns and 90 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10.3226 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20461201667785645}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 48, 48, 48, 44, 37]
consumption (rows=resources) = [[24, 9, 18, 10, 11, 8], [21, 24, 5, 26, 10, 29], [20, 5, 12, 21, 22, 26], [17, 31, 3, 8, 25, 22]]
capacity = [120, 80, 120, 95]
upper_bounds = [3, 3, 6, 3, 3, 3]"
880,ilp_assign,2,7,2,0,3,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39465880393981934}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [6, 6]]"
881,knap,4,15,16,0,0,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10565352439880371}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5, 2]
V = [6, 5, 15, 1]
C = 6"
882,add,2,168,168,1,168,1,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08793282508850098}",1,Compute: 73 + 95
883,ilp_prod,16,115,108,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_8ifuxgq9/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_8ifuxgq9/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16357660293579102}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 23, 17, 16, 19, 40]
consumption (rows=resources) = [[13, 12, 8, 8, 4, 5], [10, 15, 12, 12, 15, 8], [12, 11, 13, 1, 5, 13], [15, 12, 16, 10, 3, 4]]
capacity = [54, 43, 35, 54]
upper_bounds = [3, 3, 3, 3, 3, 3]"
884,lcs,32,19,14,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08672356605529785}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcdcdbcabacbddbadbbadbdccbbcdab""
T = ""cdddcddddddcdddbaccbbdabacbdbbcca"""
885,add,8,62843825,62843825,1,62843825,1,"{'ok': True, 'value': 62843825, 'stdout': '62843825\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0877983570098877}",1,Compute: 36847500 + 25996325
886,ilp_prod,8,109,100,0,5,0,"{'ok': True, 'value': 115, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1b5e6ed64a8648ccbd21520b05c4858b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1b5e6ed64a8648ccbd21520b05c4858b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 128.771 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -93 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -115 found by DiveCoefficient after 36 iterations and 0 nodes (0.01 seconds)\nCbc0031I 2 added rows had average density of 4\nCbc0013I At root node, 2 cuts changed objective from -128.77143 to -115 in 16 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 35 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -115, took 36 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -128.771 to -115\nProbing was tried 16 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 16 times and created 35 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nKnapsack was tried 16 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 16 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 16 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 16 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                115.00000000\nEnumerated nodes:               0\nTotal iterations:               36\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n115.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19409584999084473}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 20, 19, 8]
consumption (rows=resources) = [[1, 2, 1, 8], [3, 4, 6, 1], [2, 5, 3, 5], [6, 7, 2, 7]]
capacity = [16, 25, 25, 29]
upper_bounds = [4, 4, 4, 3]"
887,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09015917778015137}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcd""
T = ""adad"""
888,knap,4,26,27,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11089920997619629}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 4, 1, 7]
V = [6, 13, 13, 7]
C = 10"
889,lcs,8,2,5,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08810997009277344}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaaccac""
T = ""bcaaddb"""
890,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0968477725982666}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""ca"""
891,ilp_partition,8,0,1,0,10,0,"{'ok': True, 'value': 84, 'stdout': '84\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09663176536560059}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 4, 9, 20, 14, 5, 23, 10]"
892,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09982562065124512}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [68, 11, 32, 30, 71, 29, 42, 34, 9, 16, 7, 71, 41, 28, 14, 23, 70, 51, 8, 70, 60, 4, 84, 14]"
893,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10676217079162598}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""bca"""
894,mul,2,1590,1590,1,1590,1,"{'ok': True, 'value': 1590, 'stdout': '1590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0876767635345459}",1,Compute: 30 * 53
895,knap,4,29,29,1,0,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0884101390838623}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 5, 4]
V = [12, 15, 3, 14]
C = 7"
896,lcs,2,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09083938598632812}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""ba"""
897,mul,16,16468751300479775440899397295862,1,0,16294085525649886496464962,0,"{'ok': True, 'value': 16468751300479775440899397295862, 'stdout': '16468751300479775440899397295862\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09833788871765137}",1,Compute: 4286363767133838 * 3842126379183149
898,ilp_partition,4,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09893918037414551}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 9, 1, 8]"
899,ilp_assign,32,170,186,0,209,0,"{'ok': True, 'value': 170, 'stdout': '170\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6555240154266357}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[87, 33, 84, 29, 6, 19, 54], [12, 55, 72, 84, 13, 44, 94], [50, 46, 91, 35, 91, 16, 66], [80, 48, 91, 79, 86, 33, 68], [35, 94, 65, 93, 20, 5, 80], [58, 59, 58, 75, 1, 46, 55], [52, 45, 89, 29, 89, 3, 6]]"
900,lcs,16,10,7,0,16,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09032630920410156}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacbdaabbdbbadbb""
T = ""badaaadbdabcdcbc"""
901,sub,2,31,31,1,31,1,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09128856658935547}",1,Compute: 76 - 45
902,ilp_partition,16,1,1,1,19,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10704922676086426}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 47, 15, 41, 3, 7, 45, 21, 4, 26, 19, 20, 29, 19, 16, 2]"
903,sub,8,3421717,3421717,1,3418717,0,"{'ok': True, 'value': 3421717, 'stdout': '3421717\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09705114364624023}",1,Compute: 29784117 - 26362400
904,add,4,14506,14107,0,14506,1,"{'ok': True, 'value': 14506, 'stdout': '14506\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09470939636230469}",1,Compute: 6074 + 8432
905,add,2,87,87,1,87,1,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09706497192382812}",1,Compute: 40 + 47
906,rod,16,464,65,0,65,0,"{'ok': True, 'value': 464, 'stdout': '464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1101233959197998}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [29, 34, 14, 45, 8, 23, 19, 13, 16, 11, 7, 27, 23, 38, 30, 20]"
907,rod,4,40,22,0,3,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0967094898223877}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 11, 3, 9]"
908,sub,16,4788391908520852,4788391908520852,1,4788391908520852,1,"{'ok': True, 'value': 4788391908520852, 'stdout': '4788391908520852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08910393714904785}",1,Compute: 9952976089586792 - 5164584181065940
909,add,4,5363,5363,1,5363,1,"{'ok': True, 'value': 5363, 'stdout': '5363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10483098030090332}",1,Compute: 1372 + 3991
910,knap,4,21,23,0,6,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10045909881591797}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 2, 7]
V = [8, 2, 7, 14]
C = 9"
911,mul,32,1926274467624756388558289110224481937945739740996372607872478856,1967163,0,193036134344064458154385646353804446466,0,"{'ok': True, 'value': 1926274467624756388558289110224481937945739740996372607872478856, 'stdout': '1926274467624756388558289110224481937945739740996372607872478856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08561468124389648}",1,Compute: 66698705067536780681894762782936 * 28880237864802294105143179043971
912,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09616589546203613}",1,Compute: 84 - 63
913,ilp_assign,2,5,5,1,8,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4101107120513916}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [2, 6]]"
914,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1093745231628418}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""b"""
915,add,8,132999785,43025802,0,1330000000,0,"{'ok': True, 'value': 132999785, 'stdout': '132999785\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10289406776428223}",1,Compute: 89973983 + 43025802
916,mul,4,59975096,59449946,0,59983166,0,"{'ok': True, 'value': 59975096, 'stdout': '59975096\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09607768058776855}",1,Compute: 6859 * 8744
917,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10284614562988281}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""d"""
918,mul,2,1185,1185,1,1185,1,"{'ok': True, 'value': 1185, 'stdout': '1185\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09633159637451172}",1,Compute: 15 * 79
919,add,2,131,131,1,131,1,"{'ok': True, 'value': 131, 'stdout': '131\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10636520385742188}",1,Compute: 85 + 46
920,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09959697723388672}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbabcaaaaccddcb""
T = ""abbbbcbbcabbbdcc"""
921,add,4,11125,11125,1,11125,1,"{'ok': True, 'value': 11125, 'stdout': '11125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10747456550598145}",1,Compute: 8807 + 2318
922,ilp_assign,2,7,4,0,5,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41022372245788574}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1], [6, 4]]"
923,ilp_partition,8,2,1,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09761857986450195}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 16, 21, 11, 6, 1, 9, 5]"
924,add,8,106136218,106135819,0,106136218,1,"{'ok': True, 'value': 106136218, 'stdout': '106136218\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08993864059448242}",1,Compute: 71434687 + 34701531
925,knap,32,1454,1047,0,15,0,"{'ok': True, 'value': 1454, 'stdout': '1454\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11031627655029297}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 55, 29, 23, 61, 21, 21, 2, 38, 53, 56, 53, 20, 3, 1, 7, 59, 34, 15, 14, 12, 61, 17, 21, 55, 11, 59, 22, 42, 60, 4, 19]
V = [59, 29, 76, 47, 49, 72, 11, 45, 68, 45, 68, 126, 52, 57, 47, 20, 48, 117, 86, 26, 60, 66, 112, 2, 13, 67, 88, 39, 63, 79, 71, 40]
C = 480"
926,sub,4,1986,2986,0,2000,0,"{'ok': True, 'value': 1986, 'stdout': '1986\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09535598754882812}",1,Compute: 3527 - 1541
927,sub,8,46643336,46643336,1,46643336,1,"{'ok': True, 'value': 46643336, 'stdout': '46643336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08443975448608398}",1,Compute: 86741182 - 40097846
928,knap,4,24,24,1,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09936690330505371}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 7, 7]
V = [10, 8, 7, 14]
C = 13"
929,knap,2,8,7,0,-1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09822988510131836}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 1]
V = [1, 5, 7]
C = 2"
930,mul,4,21988681,2235300000,0,22064911,0,"{'ok': True, 'value': 21988681, 'stdout': '21988681\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09706234931945801}",1,Compute: 8093 * 2717
931,knap,2,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10744643211364746}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 4]
V = [3, 1, 1]
C = 3"
932,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09805870056152344}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
933,ilp_partition,2,0,0,1,5,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09639430046081543}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 3, 2, 3]"
934,knap,2,8,11,0,-1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09983325004577637}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 4]
V = [8, 2, 1]
C = 4"
935,ilp_partition,16,1,1,1,180,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2060260772705078}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [48, 30, 13, 39, 47, 14, 24, 20, 25, 48, 29, 1, 1, 33, 48, 15]"
936,mul{'ok': True, 'value': 37391813832013674360503008869168, 'stdout': '37391813832013674360503008869168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10947656631469727}",1,Compute: 5868733769086232 * 6371359700959074
937,sub,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11019778251647949}",1,Compute: 90 - 85
938,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1077883243560791}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abacbbdd""
T = ""bdcbaccc"""
939,add,32,143325506953214159637991430898380,1433255069532141596380037337449800,0,142325506953214159838090430898380,0,"{'ok': True, 'value': 143325506953214159637991430898380, 'stdout': '143325506953214159637991430898380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08831167221069336}",1,Compute: 45806823801097554406100373374490 + 97518683152116605231891057523890
940,add,4,10702,10702,1,10702,1,"{'ok': True, 'value': 10702, 'stdout': '10702\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10075116157531738}",1,Compute: 6535 + 4167
941,ilp_prod,2,16,48,0,24,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/680e5cc01d0e4948adff550fb7f251eb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/680e5cc01d0e4948adff550fb7f251eb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2097339630126953}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8]
consumption (rows=resources) = [[1, 3], [3, 3]]
capacity = [9, 6]
upper_bounds = [3, 3]"
942,knap,16,322,153,0,0,0,"{'ok': True, 'value': 322, 'stdout': '322\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10042214393615723}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 17, 25, 27, 26, 14, 20, 2, 15, 11, 30, 23, 31, 14, 26, 22]
V = [13, 27, 8, 8, 58, 30, 13, 43, 22, 19, 63, 33, 47, 2, 15, 31]
C = 153"
943,ilp_assign,16,44,113,0,115,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3973960876464844}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 12, 6, 35, 3, 44, 20], [46, 33, 37, 14, 30, 29, 36], [36, 9, 2, 34, 48, 20, 12], [8, 27, 29, 28, 5, 8, 20], [9, 5, 47, 41, 13, 40, 19], [11, 3, 40, 46, 17, 9, 29], [13, 46, 16, 41, 46, 39, 5]]"
944,ilp_partition,16,1,1,1,18,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20551776885986328}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 40, 11, 13, 18, 18, 48, 11, 18, 18, 15, 22, 48, 43, 40, 33]"
945,ilp_prod,32,365,100,0,156,0,"{'ok': True, 'value': 63, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a3ca6fdd1520422a9fa02ff265043c65-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a3ca6fdd1520422a9fa02ff265043c65-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 81.5769 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -63 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                63.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n63.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17892670631408691}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 56, 29, 79, 24, 49]
consumption (rows=resources) = [[6, 3, 28, 1, 15, 31], [26, 2, 18, 14, 6, 21], [11, 27, 3, 20, 9, 26], [12, 14, 20, 16, 25, 8]]
capacity = [118, 101, 128, 73]
upper_bounds = [3, 4, 3, 4, 3, 3]"
946,ilp_partition,4,5,1,0,2,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10022664070129395}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 12, 10, 2]"
947,knap,2,7,11,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11613917350769043}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 5]
V = [1, 7, 7]
C = 6"
948,rod,8,184,30,0,50,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1000669002532959}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 22, 3, 23, 12, 16, 14, 11]"
949,ilp_prod,8,92,100,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_763_muaw/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_763_muaw/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16237902641296387}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 10, 18, 15]
consumption (rows=resources) = [[3, 2, 6, 3], [8, 2, 3, 6], [1, 2, 5, 5], [5, 3, 4, 7]]
capacity = [31, 16, 24, 28]
upper_bounds = [3, 8, 4, 3]"
950,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10309028625488281}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 5, 1]"
951,ilp_prod,16,210,The solution to the problem is to use a linear programming approach to find the optimal solution.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_33fx9hlw/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_33fx9hlw/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17142629623413086}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [47, 33, 44, 23, 46, 37]
consumption (rows=resources) = [[15, 8, 12, 3, 10, 4], [10, 4, 5, 1, 16, 6], [16, 15, 8, 6, 8, 6], [13, 1, 5, 8, 15, 13]]
capacity = [55, 63, 36, 64]
upper_bounds = [3, 3, 4, 6, 3, 4]"
952,sub,32,21457702744977114556438602050520,21573406785432106464,0,21457712744497123556438602051520,0,"{'ok': True, 'value': 21457702744977114556438602050520, 'stdout': '21457702744977114556438602050520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10006499290466309}",1,Compute: 65277154740604591052206394651879 - 43819451995627476495767792601359
953,mul,8,2693032383606507,0,0,270348583551,0,"{'ok': True, 'value': 2693032383606507, 'stdout': '2693032383606507\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11112117767333984}",1,Compute: 91235763 * 29517289
954,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1061868667602539}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 1, 3, 4]"
955,sub,16,5481893278376257,5882667777401010,0,5481893278376257,1,"{'ok': True, 'value': 5481893278376257, 'stdout': '5481893278376257\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11036157608032227}",1,Compute: 9830885566877168 - 4348992288500911
956,add,4,10077,9107,0,10077,1,"{'ok': True, 'value': 10077, 'stdout': '10077\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0985562801361084}",1,Compute: 3611 + 6466
957,sub,8,34463582,34463582,1,34463582,1,"{'ok': True, 'value': 34463582, 'stdout': '34463582\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10164141654968262}",1,Compute: 60795078 - 26331496
958,add,8,153072523,,0,153072523,1,"{'ok': True, 'value': 153072523, 'stdout': '153072523\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11073803901672363}",1,Compute: 87360653 + 65711870
959,sub,2,33,33,1,33,1,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08492827415466309}",1,Compute: 57 - 24
960,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09721040725708008}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbdccbbbadbdbbc""
T = ""dbbabbaaccdbadbdd"""
961,rod,16,480,65,0,65,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09668922424316406}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 44, 4, 27, 19, 26, 11, 13, 29, 3, 7, 45, 9, 41, 36, 19]"
962,rod,32,1344,1055,0,1,0,"{'ok': True, 'value': 1344, 'stdout': '1344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09892988204956055}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [42, 1, 56, 60, 73, 64, 26, 15, 26, 79, 76, 42, 47, 23, 65, 45, 75, 84, 78, 39, 40, 80, 18, 75, 63, 5, 3, 87, 73, 47, 31, 59]"
963,add,32,174856657631662104211098485630772,1,0,174856657631662104211108485630772,0,"{'ok': True, 'value': 174856657631662104211098485630772, 'stdout': '174856657631662104211098485630772\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08806920051574707}",1,Compute: 82366457716862626951231199051346 + 92490199914799477259867286579426
964,sub,16,1854955058274707,1234567890123456,0,1854955058274707,1,"{'ok': True, 'value': 1854955058274707, 'stdout': '1854955058274707\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09653759002685547}",1,Compute: 4323874528680656 - 2468919470405949
965,ilp_partition,32,0,10,0,26,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20322489738464355}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [70, 36, 63, 91, 14, 13, 20, 83, 26, 59, 26, 19, 8, 2, 35, 46, 9, 4, 59, 55, 40, 39, 80, 35]"
966,rod,2,5,5,1,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_akdf3yhj/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_akdf3yhj/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09849929809570312}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 5]"
967,mul,4,14274516,81,0,14189136,0,"{'ok': True, 'value': 14274516, 'stdout': '14274516\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10451555252075195}",1,Compute: 1486 * 9606
968,mul,32,951599142558906003371122729853902582423615150692314675481174239,96833411399999999999999999999999,0,965840433527199522664432659689544664666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 951599142558906003371122729853902582423615150692314675481174239, 'stdout': '951599142558906003371122729853902582423615150692314675481174239\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08994865417480469}",1,Compute: 72253152883755897815536592935097 * 13170347653754033984357949606487
969,add,32,137803799194903021519560076460054,140845338692340415040223642790323,0,137803799194893021529560076460054,0,"{'ok': True, 'value': 137803799194903021519560076460054, 'stdout': '137803799194903021519560076460054\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09624862670898438}",1,Compute: 40845338692340415040223642790322 + 96958460502562606479336433669732
970,sub,32,54711882689517359747113055102457,7,0,54711882689517359747113055102457,1,"{'ok': True, 'value': 54711882689517359747113055102457, 'stdout': '54711882689517359747113055102457\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08427572250366211}",1,Compute: 77835467917321665717189093356403 - 23123585227804305970076038253946
971,ilp_assign,4,13,11,0,34,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3979685306549072}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 11, 12, 4], [5, 2, 12, 3], [10, 1, 5, 12], [3, 2, 3, 5]]"
972,sub,16,863907890011297,-926091889981129,0,7637853612588010,0,"{'ok': True, 'value': 863907890011297, 'stdout': '863907890011297\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08572912216186523}",1,Compute: 8501761502599307 - 7637853612588010
973,mul,8,4199459281674980,43235539935644840,0,4158364549380,0,"{'ok': True, 'value': 4199459281674980, 'stdout': '4199459281674980\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10182642936706543}",1,Compute: 64259740 * 65351327
974,knap,8,99,143,0,0,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09437346458435059}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 10, 3, 7, 6, 8, 14, 11]
V = [19, 11, 16, 32, 1, 9, 32, 5]
C = 33"
975,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09671664237976074}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 36, 41, 56, 7, 16, 68, 70, 71, 5, 39, 45, 52, 78, 76, 26, 55, 34, 73, 17, 51, 91, 41]"
976,ilp_prod,32,329,The solution to the problem is to use a linear programming approach to find the optimal solution that maximizes the total profit while satisfying the resource constraints. The maximum profit is the value of the objective function at the optimal solution.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_46ghxi6h/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_46ghxi6h/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16041254997253418}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [79, 92, 63, 4, 25, 25]
consumption (rows=resources) = [[9, 25, 4, 24, 21, 19], [8, 7, 7, 18, 1, 28], [26, 8, 6, 20, 24, 8], [24, 29, 26, 14, 27, 11]]
capacity = [115, 82, 114, 101]
upper_bounds = [4, 3, 3, 4, 3, 3]"
977,sub,2,20,20,1,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10841751098632812}",1,Compute: 44 - 24
978,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0943915843963623}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badd""
T = ""babdc"""
979,ilp_assign,16,46,145,0,105,0,"{'ok': True, 'value': 46, 'stdout': '46\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4050314426422119}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 3, 12, 30, 36, 34, 34], [26, 1, 6, 12, 42, 47, 45], [15, 10, 18, 21, 9, 5, 44], [38, 11, 7, 43, 1, 15, 18], [42, 16, 18, 44, 27, 44, 11], [18, 19, 17, 17, 14, 3, 38], [33, 46, 32, 7, 2, 38, 44]]"
980,ilp_partition,2,0,1,0,13,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09332728385925293}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 1, 2]"
981,ilp_prod,16,99,120,0,156,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3a90407246334d0688004b1271e2031b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3a90407246334d0688004b1271e2031b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 17 COLUMNS\nAt line 108 RHS\nAt line 121 BOUNDS\nAt line 128 ENDATA\nProblem MODEL has 12 rows, 6 columns and 72 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 64.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -48 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17833280563354492}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 28, 15, 18, 19, 8]
consumption (rows=resources) = [[9, 14, 6, 5, 6, 6], [9, 9, 11, 13, 10, 6], [4, 11, 15, 7, 5, 15], [16, 8, 10, 3, 2, 11]]
capacity = [52, 46, 33, 43]
upper_bounds = [3, 3, 3, 3, 4, 3]"
982,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08285641670227051}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""a"""
983,rod,2,10,10,1,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09525036811828613}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 5]"
984,ilp_partition,2,1,The answer will be the minimum difference between the two groups.,0,256,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08831095695495605}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 2, 3]"
985,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09588336944580078}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdb""
T = ""cbc"""
986,ilp_partition,2,0,1,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09112834930419922}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 4, 2]"
987,mul,8,6316089346014188,623943726526,0,6316845533865788,0,"{'ok': True, 'value': 6316089346014188, 'stdout': '6316089346014188\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0955660343170166}",1,Compute: 67087267 * 94147364
988,lcs,4,2,3,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09577608108520508}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcad""
T = ""adbc"""
989,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2118978500366211}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [49, 15, 36, 77, 14, 19, 33, 57, 66, 48, 41, 26, 26, 5, 5, 50, 80, 58, 54, 77, 12, 67, 20, 90]"
990,add,4,7665,7665,1,7665,1,"{'ok': True, 'value': 7665, 'stdout': '7665\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1062779426574707}",1,Compute: 6625 + 1040
991,rod,8,152,22,0,1,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10495424270629883}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 6, 20, 1, 10, 4, 2, 14]"
992,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40815067291259766}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 2], [1, 2]]"
993,rod,4,40,40,1,1,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1004021167755127}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 6, 1, 6]"
994,ilp_assign,16,44,105,0,110,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4080545902252197}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 23, 15, 28, 48, 40, 47], [18, 33, 39, 3, 2, 9, 25], [40, 14, 44, 29, 10, 41, 41], [37, 21, 19, 20, 45, 3, 2], [5, 15, 38, 33, 7, 28, 4], [22, 7, 22, 18, 22, 30, 44], [2, 36, 17, 47, 38, 22, 33]]"
995,knap,2,9,9,1,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10329842567443848}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 1]
V = [7, 2, 2]
C = 4"
996,rod,4,28,22,0,5,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09040093421936035}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 12, 5, 11]"
997,mul,16,68264088692451724142409184452720,67308825167462080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,6719365664964864844568880,0,"{'ok': True, 'value': 68264088692451724142409184452720, 'stdout': '68264088692451724142409184452720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11272764205932617}",1,Compute: 8623545545308880 * 7916011846146819
998,add,4,14899,14899,1,14909,0,"{'ok': True, 'value': 14899, 'stdout': '14899\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08980917930603027}",1,Compute: 8398 + 6501
999,mul,4,5111925,11584808625,0,5141675,0,"{'ok': True, 'value': 5111925, 'stdout': '5111925\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10058140754699707}",1,Compute: 2247 * 2275
1000,knap,32,1740,1047,0,2,0,"{'ok': True, 'value': 1740, 'stdout': '1740\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10564136505126953}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 47, 43, 64, 17, 36, 48, 22, 7, 45, 46, 36, 20, 20, 29, 32, 19, 4, 29, 38, 32, 40, 64, 9, 14, 47, 53, 9, 35, 8, 33, 11]
V = [35, 108, 14, 50, 126, 28, 68, 4, 122, 77, 65, 56, 108, 121, 107, 42, 55, 25, 31, 71, 87, 100, 78, 107, 117, 40, 9, 45, 94, 127, 52, 4]
C = 493"
1001,sub,2,22,22,1,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09576559066772461}",1,Compute: 67 - 45
1002,ilp_assign,32,136,111,0,1,0,"{'ok': True, 'value': 136, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/41eea4604c804370848ff08274b140d9-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/41eea4604c804370848ff08274b140d9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 136 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 136\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 136 - took 0.00 seconds\nCbc0012I Integer solution of 136 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 136, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 136 to 136\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                136.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nMinimum total cost: 136.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.22313690185546875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 49, 86, 77, 73, 96, 31], [56, 63, 48, 86, 93, 74, 3], [11, 90, 62, 57, 86, 8, 60], [71, 88, 50, 53, 59, 13, 65], [10, 81, 25, 4, 41, 25, 6], [2, 85, 86, 16, 57, 76, 79], [62, 28, 59, 58, 20, 40, 74]]"
1003,mul,8,1739454802843424,10634224,0,173849348583104,0,"{'ok': True, 'value': 1739454802843424, 'stdout': '1739454802843424\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09247517585754395}",1,Compute: 40511888 * 42936898
1004,ilp_prod,4,46,107,0,60,0,"{'ok': True, 'value': 40, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0bc0325c6ed844cebf3a95d07393e685-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0bc0325c6ed844cebf3a95d07393e685-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 40 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -40 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                40.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n40.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1868906021118164}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 9, 8]
consumption (rows=resources) = [[4, 1, 1], [1, 3, 2], [3, 4, 3]]
capacity = [16, 14, 15]
upper_bounds = [4, 3, 5]"
1005,ilp_prod,2,21,24,0,6,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/342f234a1cbc404b87950f2307aff6ab-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/342f234a1cbc404b87950f2307aff6ab-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8.4 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -7 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                7.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 7.0\nProduct_0: 1.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1901392936706543}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[2, 2], [2, 3]]
capacity = [7, 6]
upper_bounds = [3, 3]"
1006,ilp_prod,32,181,105,0,102,0,"{'ok': True, 'value': 62, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ea5bf3462fd847b489bfdb45fadd0177-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ea5bf3462fd847b489bfdb45fadd0177-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 70.7188 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -62 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                62.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n62.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17615890502929688}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [31, 54, 4, 14, 73, 24]
consumption (rows=resources) = [[9, 3, 18, 10, 14, 32], [7, 22, 19, 18, 28, 23], [32, 21, 15, 22, 30, 26], [27, 17, 24, 12, 7, 11]]
capacity = [126, 118, 73, 80]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1007,rod,8,30,18,0,1,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10084986686706543}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [1, 6, 9, 15, 19, 17, 5, 10]"
1008,knap,16,444,132,0,0,0,"{'ok': True, 'value': 444, 'stdout': '444\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10071325302124023}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 8, 5, 20, 11, 25, 10, 27, 15, 19, 12, 8, 20, 3, 26, 28]
V = [15, 30, 21, 45, 11, 19, 31, 64, 43, 57, 37, 58, 37, 58, 3, 2]
C = 132"
1009,ilp_assign,32,129,110,0,110,0,"{'ok': True, 'value': 129, 'stdout': '129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4072878360748291}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 26, 12, 81, 10, 83, 96], [37, 10, 92, 32, 56, 44, 91], [28, 33, 76, 59, 26, 22, 56], [87, 66, 82, 25, 90, 9, 22], [7, 86, 20, 39, 91, 31, 89], [10, 19, 33, 67, 62, 80, 75], [43, 70, 83, 35, 48, 58, 74]]"
1010,ilp_assign,8,43,66,0,80,0,"{'ok': True, 'value': 43, 'stdout': '43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4045276641845703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 15, 10, 9, 5, 22, 9], [8, 18, 23, 14, 7, 8, 22], [2, 17, 5, 9, 19, 12, 8], [9, 8, 24, 1, 17, 20, 23], [3, 16, 9, 18, 7, 1, 12], [13, 14, 15, 18, 12, 14, 23], [24, 9, 9, 18, 10, 22, 11]]"
1011,ilp_assign,32,138,207,0,209,0,"{'ok': True, 'value': 138, 'stdout': '138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.394212007522583}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[70, 95, 31, 44, 67, 8, 50], [25, 96, 74, 87, 31, 32, 25], [18, 29, 8, 78, 23, 29, 96], [8, 56, 51, 46, 64, 51, 96], [22, 15, 81, 13, 67, 62, 3], [22, 83, 34, 85, 91, 92, 27], [23, 65, 81, 91, 21, 53, 86]]"
1012,add,2,167,167,1,167,1,"{'ok': True, 'value': 167, 'stdout': '167\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08906722068786621}",1,Compute: 87 + 80
1013,lcs,4,2,3,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09983325004577637}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caab""
T = ""acbdc"""
1014,ilp_prod,32,280,160,0,209,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_uot784th/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16028070449829102}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 56, 20, 46, 21, 16]
consumption (rows=resources) = [[31, 4, 28, 8, 17, 20], [30, 20, 15, 30, 12, 29], [21, 10, 9, 5, 23, 7], [8, 2, 18, 1, 3, 22]]
capacity = [81, 109, 70, 66]
upper_bounds = [3, 5, 3, 3, 3, 3]"
1015,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0954897403717041}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""c"""
1016,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09370183944702148}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [54, 48, 74, 40, 70, 35, 63, 16, 2, 95, 65, 59, 88, 54, 70, 95, 45, 79, 10, 58, 11, 64, 50, 16]"
1017,add,4,5013,5013,1,5013,1,"{'ok': True, 'value': 5013, 'stdout': '5013\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11528992652893066}",1,Compute: 2310 + 2703
1018,knap,16,439,104,0,1,0,"{'ok': True, 'value': 439, 'stdout': '439\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08638572692871094}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 22, 14, 25, 23, 28, 24, 24, 22, 1, 1, 3, 25, 25, 11, 16]
V = [31, 38, 27, 16, 2, 61, 60, 34, 51, 34, 53, 56, 55, 45, 12, 6]
C = 137"
1019,knap,32,1647,1053,0,51,0,"{'ok': True, 'value': 1647, 'stdout': '1647\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09601783752441406}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 17, 34, 38, 45, 10, 21, 27, 26, 31, 36, 4, 52, 2, 51, 29, 11, 59, 47, 12, 62, 51, 57, 34, 2, 43, 28, 31, 63, 46, 37, 3]
V = [79, 76, 120, 36, 28, 10, 24, 54, 127, 45, 7, 101, 48, 48, 103, 57, 56, 77, 7, 69, 79, 94, 63, 22, 18, 107, 96, 120, 20, 15, 113, 87]
C = 510"
1020,knap,32,1626,1044,0,39,0,"{'ok': True, 'value': 1626, 'stdout': '1626\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11374497413635254}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [34, 28, 1, 31, 58, 13, 31, 57, 12, 30, 3, 36, 39, 4, 20, 5, 49, 39, 46, 10, 2, 20, 21, 60, 20, 60, 48, 36, 50, 31, 21, 32]
V = [113, 104, 60, 21, 6, 62, 99, 32, 46, 37, 13, 60, 53, 25, 72, 21, 128, 13, 19, 114, 73, 116, 37, 7, 9, 95, 1, 100, 45, 127, 92, 69]
C = 473"
1021,ilp_prod,16,241,160,0,204,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_d6xo7gsf/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_d6xo7gsf/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17801928520202637}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [29, 25, 11, 48, 18, 48]
consumption (rows=resources) = [[1, 16, 5, 14, 8, 9], [5, 2, 16, 16, 2, 13], [5, 14, 4, 2, 1, 3], [7, 5, 11, 9, 15, 5]]
capacity = [50, 53, 53, 45]
upper_bounds = [6, 3, 3, 3, 3, 4]"
1022,add,16,6343823936500485,5812809130,0,6343825936500485,0,"{'ok': True, 'value': 6343823936500485, 'stdout': '6343823936500485\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10035920143127441}",1,Compute: 1620641530310866 + 4723182406189619
1023,ilp_assign,8,39,56,0,0,0,"{'ok': True, 'value': 39, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3eb23064839448398ad4c883ddb0b67b-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/3eb23064839448398ad4c883ddb0b67b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 39 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 39\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 39 - took 0.00 seconds\nCbc0012I Integer solution of 39 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 39, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 39 to 39\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                39.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nMinimum total cost: 39.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17549371719360352}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 18, 16, 16, 19, 17, 11], [21, 22, 16, 14, 18, 9, 20], [2, 3, 3, 8, 7, 7, 9], [21, 21, 11, 21, 18, 6, 18], [13, 8, 8, 17, 3, 1, 12], [1, 6, 10, 13, 16, 2, 5], [22, 23, 12, 20, 4, 10, 5]]"
1024,rod,16,240,50,0,65,0,"{'ok': True, 'value': 240, 'stdout': '240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09580326080322266}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [10, 4, 46, 24, 4, 22, 7, 14, 40, 2, 10, 20, 45, 4, 16, 34]"
1025,add,16,14462917131968061,14633333333333333,0,14462917132968061,0,"{'ok': True, 'value': 14462917131968061, 'stdout': '14462917131968061\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08707499504089355}",1,Compute: 7022925627899221 + 7439991504068840
1026,ilp_prod,8,74,100,0,2,0,"{'ok': True, 'value': 74, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/45ef1f84c05a4f1cadf4bf6385425259-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/45ef1f84c05a4f1cadf4bf6385425259-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 81.8465 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -61 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -74 found by DiveCoefficient after 11 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 4\nCbc0013I At root node, 3 cuts changed objective from -81.846535 to -74.000007 in 6 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 12 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -74, took 11 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -81.8465 to -74\nProbing was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 6 times and created 12 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                74.00000000\nEnumerated nodes:               0\nTotal iterations:               11\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n74.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17302775382995605}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 13, 8, 24]
consumption (rows=resources) = [[1, 5, 3, 1], [8, 8, 2, 7], [8, 2, 1, 8], [7, 4, 5, 3]]
capacity = [31, 30, 18, 27]
upper_bounds = [3, 3, 5, 3]"
1027,mul,16,55421394461289093529077204539952,5,0,56733418401456329446483456,0,"{'ok': True, 'value': 55421394461289093529077204539952, 'stdout': '55421394461289093529077204539952\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0936899185180664}",1,Compute: 6988945840667856 * 7929864635493167
1028,ilp_assign,16,61,105,0,114,0,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39147520065307617}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[28, 34, 1, 47, 22, 1, 35], [18, 21, 13, 45, 32, 20, 46], [26, 25, 42, 29, 6, 44, 4], [48, 39, 17, 45, 47, 1, 38], [29, 16, 46, 44, 40, 30, 43], [16, 43, 24, 20, 32, 48, 15], [47, 39, 6, 4, 3, 22, 14]]"
1029,ilp_partition,2,0,0,1,6,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09441995620727539}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 2, 6]"
1030,ilp_assign,2,7,8,0,8,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4120979309082031}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [2, 6]]"
1031,lcs,16,8,7,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09992384910583496}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbccadbccdbbaada""
T = ""caadddbdcbdcccac"""
1032,knap,8,103,66,0,0,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09109115600585938}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 14, 16, 4, 9, 14, 12, 12]
V = [26, 23, 27, 17, 1, 14, 30, 24]
C = 43"
1033,mul,4,81811701,8381061,0,81883331,0,"{'ok': True, 'value': 81811701, 'stdout': '81811701\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0861959457397461}",1,Compute: 8721 * 9381
1034,mul,16,17092255781896721289722337947850,16910475786311685,0,17134984205625215,0,"{'ok': True, 'value': 17092255781896721289722337947850, 'stdout': '17092255781896721289722337947850\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09874987602233887}",1,Compute: 5562995263877570 * 3072491521408005
1035,rod,4,40,24,0,10,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09671163558959961}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 6, 12, 11]"
1036,ilp_prod,4,53,70,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_7khy702p/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_7khy702p/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18465662002563477}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 12, 5]
consumption (rows=resources) = [[3, 3, 1], [3, 1, 2], [1, 1, 3]]
capacity = [13, 15, 11]
upper_bounds = [4, 4, 3]"
1037,knap,32,1662,106,0,13,0,"{'ok': True, 'value': 1662, 'stdout': '1662\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10121965408325195}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [62, 17, 61, 10, 1, 31, 56, 51, 41, 2, 28, 46, 6, 19, 39, 23, 1, 13, 54, 45, 8, 33, 21, 6, 43, 34, 29, 41, 14, 44, 37, 16]
V = [49, 112, 8, 55, 66, 110, 90, 9, 24, 29, 111, 14, 128, 41, 59, 9, 31, 33, 107, 33, 51, 38, 81, 9, 112, 75, 27, 120, 81, 101, 85, 106]
C = 466"
1038,ilp_prod,4,84,108,0,16,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6a060ec530fb40b4b06c2c7eee407710-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6a060ec530fb40b4b06c2c7eee407710-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 35 RHS\nAt line 41 BOUNDS\nAt line 45 ENDATA\nProblem MODEL has 5 rows, 3 columns and 15 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 36 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -36 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17217254638671875}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 12, 11]
consumption (rows=resources) = [[2, 2, 1], [3, 1, 4], [3, 2, 4]]
capacity = [15, 12, 16]
upper_bounds = [4, 7, 3]"
1039,lcs,16,7,7,1,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08800244331359863}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbcbbbbabccaadc""
T = ""caadabadbbddcddda"""
1040,knap,32,1614,1047,0,1,0,"{'ok': True, 'value': 1614, 'stdout': '1614\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10370826721191406}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 15, 64, 58, 30, 18, 39, 23, 24, 31, 39, 40, 5, 46, 30, 18, 2, 18, 17, 8, 38, 46, 55, 47, 51, 48, 29, 60, 47, 40, 19, 7]
V = [95, 127, 47, 4, 51, 127, 25, 42, 97, 115, 84, 17, 24, 18, 74, 121, 41, 26, 74, 15, 33, 31, 1, 65, 30, 85, 24, 40, 92, 49, 103, 107]
C = 520"
1041,lcs,8,2,4,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10373282432556152}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbbabaa""
T = ""addddacbb"""
1042,mul{'ok': True, 'value': 1340424867658880691130241065480722011267926182985638529577630277, 'stdout': '1340424867658880691130241065480722011267926182985638529577630277\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09698987007141113}",1,Compute: 37168643354813877962776961518137 * 36063325068475393932252450906221
1043,lcs,4,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09318733215332031}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbd""
T = ""aaa"""
1044,knap,4,28,13,0,0,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08134698867797852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 2, 7]
V = [10, 11, 7, 2]
C = 6"
1045,ilp_assign,2,10,10,1,9,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3850674629211426}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [5, 4]]"
1046,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09160089492797852}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cc""
T = ""bad"""
1047,knap,8,100,165,0,0,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09138154983520508}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 16, 13, 16, 6, 5, 1, 15]
V = [5, 27, 21, 12, 6, 22, 30, 13]
C = 39"
1048,sub,16,4915061327878476,480806252224,0,4915061327878476,1,"{'ok': True, 'value': 4915061327878476, 'stdout': '4915061327878476\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09194803237915039}",1,Compute: 8552471111557062 - 3637409783678586
1049,sub,8,41633100,41633100,1,41633100,1,"{'ok': True, 'value': 41633100, 'stdout': '41633100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09319496154785156}",1,Compute: 78609977 - 36976877
1050,rod,2,8,8,1,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09225177764892578}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
1051,add,4,13391,13391,1,13391,1,"{'ok': True, 'value': 13391, 'stdout': '13391\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10267210006713867}",1,Compute: 8480 + 4911
1052,ilp_partition,8,0,1,0,19,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08794856071472168}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 2, 11, 17, 5, 10, 10, 19]"
1053,ilp_prod,8,105,100,0,116,0,"{'ok': True, 'value': 88, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5a410fbd8b1141dc8ccc01a0140a4259-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5a410fbd8b1141dc8ccc01a0140a4259-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 100.571 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -88 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                88.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n88.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17475318908691406}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 8, 17, 22]
consumption (rows=resources) = [[3, 4, 6, 5], [7, 2, 8, 4], [5, 5, 1, 6], [5, 5, 4, 5]]
capacity = [26, 32, 25, 24]
upper_bounds = [4, 4, 4, 4]"
1054,lcs,16,8,7,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09253287315368652}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbbdcaadadcccab""
T = ""acabdaaacadaddac"""
1055,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10702180862426758}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbdadcbadddabdadaaabacbcadabcdd""
T = ""cbdcbdbacbbddbbdcbbbdddbccdaabc"""
1056,mul,4,46395736,454594176,0,45849236,0,"{'ok': True, 'value': 46395736, 'stdout': '46395736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08071279525756836}",1,Compute: 6268 * 7402
1057,sub,4,3060,3060,1,3060,1,"{'ok': True, 'value': 3060, 'stdout': '3060\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09085774421691895}",1,Compute: 9357 - 6297
1058,rod,8,96,22,0,1,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09078168869018555}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 24, 21, 16, 6, 11, 22, 7]"
1059,ilp_assign,4,12,0,0,18,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4040074348449707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5, 7, 2], [4, 2, 3, 10], [8, 11, 3, 8], [6, 8, 12, 3]]"
1060,add,2,121,121,1,121,1,"{'ok': True, 'value': 121, 'stdout': '121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09223151206970215}",1,Compute: 84 + 37
1061,knap,8,88,110,0,10,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09318089485168457}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 13, 13, 14, 1, 5, 10, 10]
V = [3, 14, 20, 32, 25, 8, 23, 6]
C = 37"
1062,knap,16,408,1043,0,23,0,"{'ok': True, 'value': 408, 'stdout': '408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09464263916015625}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 3, 30, 24, 19, 9, 19, 8, 27, 7, 6, 12, 7, 13, 12, 16]
V = [53, 39, 40, 1, 59, 8, 26, 59, 60, 4, 12, 18, 48, 54, 36, 21]
C = 117"
1063,add,32,88561369707769590789349122839143,98561369707769060789349122839143,0,191779428785531052885098275638743,0,"{'ok': True, 'value': 88561369707769590789349122839143, 'stdout': '88561369707769590789349122839143\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09272241592407227}",1,Compute: 11468676564195718010705461419956 + 77092693143573872778643661419187
1064,knap,32,1940,1047,0,1,0,"{'ok': True, 'value': 1940, 'stdout': '1940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09154224395751953}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 59, 33, 4, 24, 4, 44, 50, 8, 59, 39, 15, 52, 22, 40, 10, 42, 61, 14, 9, 52, 46, 23, 64, 5, 45, 47, 14, 24, 1, 1, 2]
V = [87, 84, 56, 34, 127, 115, 96, 7, 113, 74, 107, 120, 5, 126, 3, 117, 46, 18, 107, 65, 97, 20, 40, 48, 56, 66, 46, 70, 23, 94, 72, 83]
C = 467"
1065,ilp_partition,32,0,10,0,65,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1990978717803955}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [80, 17, 52, 33, 62, 40, 43, 78, 51, 65, 33, 5, 31, 15, 31, 3, 40, 91, 31, 40, 64, 4, 92, 89]"
1066,rod,4,28,16,0,4,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11194753646850586}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 5, 4, 4]"
1067,knap,8,101,147,0,0,0,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08197784423828125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 13, 11, 9, 8, 2, 11, 9]
V = [6, 12, 7, 30, 2, 31, 23, 17]
C = 35"
1068,ilp_partition,16,0,1,0,36,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20951557159423828}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 37, 10, 33, 1, 30, 23, 48, 36, 38, 9, 26, 5, 11, 6, 22]"
1069,ilp_assign,8,32,36,0,46,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38070034980773926}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 18, 20, 1, 6, 14, 21], [13, 12, 2, 2, 24, 20, 6], [12, 6, 15, 10, 20, 16, 21], [23, 11, 10, 21, 4, 12, 6], [16, 2, 23, 15, 14, 9, 12], [7, 1, 12, 8, 20, 17, 4], [7, 13, 10, 6, 1, 14, 20]]"
1070,add,16,10739858016949205,8,0,10739858016949205,1,"{'ok': True, 'value': 10739858016949205, 'stdout': '10739858016949205\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10362768173217773}",1,Compute: 7257737980924471 + 3482120036024734
1071,sub,2,19,19,1,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09162521362304688}",1,Compute: 57 - 38
1072,mul,4,15422894,154874,0,15393734,0,"{'ok': True, 'value': 15422894, 'stdout': '15422894\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09570503234863281}",1,Compute: 3506 * 4399
1073,sub,32,31030053411401550406577136266975,31030053411401550406577136266575,0,31030053411401550406577136267575,0,"{'ok': True, 'value': 31030053411401550406577136266975, 'stdout': '31030053411401550406577136266975\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08804488182067871}",1,Compute: 84098828641961178876123779138725 - 53068775230559628469546642871750
1074,add,8,123751306,123751306,1,123751306,1,"{'ok': True, 'value': 123751306, 'stdout': '123751306\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10199880599975586}",1,Compute: 90228850 + 33522456
1075,lcs,16,9,10,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08691787719726562}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbdbbbbbbbabbdac""
T = ""cbbbccccbbbaadbd"""
1076,add,16,14440573340577971,14440573340577971,1,57762293362311884,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ev6_z3h7/main.py"", line 7, in <module>\n    output = f(num1 + num2)\nNameError: name \'num1\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09153318405151367}",0,Compute: 9632632948782202 + 4807940391795769
1077,ilp_assign,16,48,115,0,115,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3803994655609131}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 19, 44, 16, 24, 40, 6], [23, 7, 31, 30, 38, 27, 9], [23, 15, 37, 43, 12, 26, 14], [10, 6, 5, 39, 12, 23, 1], [33, 32, 8, 47, 3, 6, 41], [1, 22, 5, 36, 46, 9, 39], [36, 47, 15, 41, 27, 25, 1]]"
1078,sub,32,78778647698629140064461722273478,78778647700629140064461722273478,0,78778647698629139964461722273478,0,"{'ok': True, 'value': 78778647698629140064461722273478, 'stdout': '78778647698629140064461722273478\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08415985107421875}",1,Compute: 96969597577474200153831962904951 - 18190949878845060089370240631473
1079,add,4,12015,11315,0,12015,1,"{'ok': True, 'value': 12015, 'stdout': '12015\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08719563484191895}",1,Compute: 3209 + 8806
1080,lcs,32,22,10,0,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09704446792602539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacbaadcdccadacdbcdacdbccbbcbcad""
T = ""addadbaadbdcdaadabcbadbbcbcbbcbab"""
1081,ilp_prod,16,209,100,0,54,0,"{'ok': True, 'value': 99, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a7c1fd060a81475fa34ce256174d4137-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a7c1fd060a81475fa34ce256174d4137-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 27 COLUMNS\nAt line 178 RHS\nAt line 201 BOUNDS\nAt line 208 ENDATA\nProblem MODEL has 22 rows, 6 columns and 132 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 124.929 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -99 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                99.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n99.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18855977058410645}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 7, 8, 9, 47, 18]
consumption (rows=resources) = [[4, 8, 14, 7, 7, 15], [7, 1, 8, 6, 1, 13], [6, 2, 12, 14, 3, 12], [14, 1, 14, 14, 12, 11]]
capacity = [53, 59, 55, 54]
upper_bounds = [3, 6, 3, 3, 4, 3]"
1082,rod,8,104,1,0,30,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08953642845153809}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 11, 21, 23, 18, 1, 12, 11]"
1083,add,8,127358947,127358947,1,127358947,1,"{'ok': True, 'value': 127358947, 'stdout': '127358947\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10129189491271973}",1,Compute: 62949966 + 64408981
1084,sub,16,1895258889275113,1905258890275113,0,1895258890275113,0,"{'ok': True, 'value': 1895258889275113, 'stdout': '1895258889275113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09488844871520996}",1,Compute: 5838006138165673 - 3942747248890560
1085,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08749651908874512}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabd""
T = ""dad"""
1086,sub,16,293411489724923,293411489724923,1,293411489724923,1,"{'ok': True, 'value': 293411489724923, 'stdout': '293411489724923\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1037149429321289}",1,Compute: 8740915331313838 - 8447503841588915
1087,lcs,8,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09996914863586426}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbbbaad""
T = ""caddbaba"""
1088,knap,4,18,16,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0991666316986084}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 8, 1, 4]
V = [9, 15, 3, 1]
C = 9"
1089,ilp_assign,32,212,186,0,1,0,"{'ok': True, 'value': 212, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e9d7fcb034da48a48b6af2e81d283b16-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/e9d7fcb034da48a48b6af2e81d283b16-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 212 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 212\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 212 - took 0.00 seconds\nCbc0012I Integer solution of 212 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 212, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 212 to 212\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                212.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 212.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1999349594116211}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 73, 58, 6, 9, 28, 39], [67, 57, 37, 66, 85, 12, 69], [52, 75, 95, 44, 55, 25, 95], [85, 13, 37, 96, 25, 23, 86], [65, 62, 66, 86, 85, 39, 95], [62, 67, 75, 70, 62, 59, 65], [5, 59, 71, 56, 35, 89, 44]]"
1090,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09885334968566895}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 13, 4, 13, 10, 2, 9, 8]"
1091,sub,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10842561721801758}",1,Compute: 21 - 18
1092,rod,8,120,55,0,22,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09926223754882812}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 10, 1, 11, 18, 16, 4, 22]"
1093,ilp_prod,8,32,61,0,48,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/34ec41fff14345bf89b7a5e426aeb0d6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/34ec41fff14345bf89b7a5e426aeb0d6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 17 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1815659999847412}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 13, 6, 3]
consumption (rows=resources) = [[4, 2, 6, 1], [5, 8, 7, 2], [3, 5, 4, 4], [6, 3, 1, 1]]
capacity = [16, 22, 19, 17]
upper_bounds = [3, 3, 3, 4]"
1094,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0961003303527832}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaadbacbcaddcaa""
T = ""caacbbbbcaabdaa"""
1095,mul,2,3234,3234,1,3529,0,"{'ok': True, 'value': 3234, 'stdout': '3234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09726428985595703}",1,Compute: 77 * 42
1096,sub,32,49682494703335744016902152234127,49682494699335803983002152234127,0,49682494699935743966902152234127,0,"{'ok': True, 'value': 49682494703335744016902152234127, 'stdout': '49682494703335744016902152234127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1030881404876709}",1,Compute: 86549997776641348660940961063432 - 36867503073305604644038808829305
1097,add,16,14323479241958448,13,0,14323480241958448,0,"{'ok': True, 'value': 14323479241958448, 'stdout': '14323479241958448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09873628616333008}",1,Compute: 7718758737633831 + 6604720504324617
1098,ilp_prod,2,10,28,0,20,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/685778e110304ac98ad204d1b3950671-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/685778e110304ac98ad204d1b3950671-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 13.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17538857460021973}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4]
consumption (rows=resources) = [[1, 2], [3, 3]]
capacity = [8, 8]
upper_bounds = [3, 3]"
1099,ilp_assign,4,13,0,0,20,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4173293113708496}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 7, 1, 7], [9, 5, 3, 5], [1, 12, 5, 12], [2, 6, 11, 7]]"
1100,ilp_prod,32,266,0,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ljubyjsy/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ljubyjsy/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15833282470703125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [52, 53, 24, 66, 34, 54]
consumption (rows=resources) = [[21, 25, 9, 8, 31, 28], [21, 30, 6, 30, 2, 28], [30, 21, 4, 6, 8, 1], [32, 21, 9, 13, 10, 31]]
capacity = [96, 99, 66, 75]
upper_bounds = [3, 3, 8, 3, 3, 3]"
1101,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09668111801147461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""a"""
1102,rod,4,40,20,0,1,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0966179370880127}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 6, 10, 4]"
1103,mul,16,20971178930952419878061711825481,15,0,2138841887945284844555515329,0,"{'ok': True, 'value': 20971178930952419878061711825481, 'stdout': '20971178930952419878061711825481\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09879398345947266}",1,Compute: 3953385247315329 * 5304613038962889
1104,add,32,126091781328030909983541737372301,11181119981111,0,126091781328030909983541737372301,1,"{'ok': True, 'value': 126091781328030909983541737372301, 'stdout': '126091781328030909983541737372301\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08815646171569824}",1,Compute: 68338096916715457035995054021992 + 57753684411315452947546683350309
1105,sub,4,7522,7522,1,7522,1,"{'ok': True, 'value': 7522, 'stdout': '7522\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09015750885009766}",1,Compute: 8912 - 1390
1106,ilp_partition,4,4,1,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_uzm8ye67/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_uzm8ye67/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10139298439025879}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 12, 1]"
1107,sub,8,2337220,2377220,0,2337220,1,"{'ok': True, 'value': 2337220, 'stdout': '2337220\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09809112548828125}",1,Compute: 27609819 - 25272599
1108,mul,16,14557030619772065308819006531180,145895833193606421802000000000000,0,145749884886446458646666530,0,"{'ok': True, 'value': 14557030619772065308819006531180, 'stdout': '14557030619772065308819006531180\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09613728523254395}",1,Compute: 9451969997181740 * 1540105462047857
1109,ilp_prod,32,288,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are that the total consumption of each resource must not exceed its capacity and that the quantity produced for each product must be non-negative. The upper bounds on the quantity of each product that can be produced are given by upper_bounds[j]. The problem is then solved using a linear programming solver, and the maximum profit is the value of the objective function after solving the problem.",0,264,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xxsftyrw/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_xxsftyrw/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1643543243408203}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [88, 96, 47, 43, 3, 73]
consumption (rows=resources) = [[2, 11, 7, 20, 18, 14], [20, 13, 16, 4, 10, 10], [27, 8, 12, 30, 23, 17], [25, 22, 20, 14, 23, 26]]
capacity = [95, 92, 122, 72]
upper_bounds = [3, 3, 3, 4, 3, 3]"
1110,sub,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09584760665893555}",1,Compute: 99 - 92
1111,add,8,92786297,92784677,0,92786297,1,"{'ok': True, 'value': 92786297, 'stdout': '92786297\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09908938407897949}",1,Compute: 31784489 + 61001808
1112,ilp_assign,4,13,11,0,22,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39445924758911133}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 12, 2, 2], [7, 6, 6, 5], [6, 1, 4, 11], [11, 5, 11, 3]]"
1113,ilp_prod,4,32,52,0,36,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e5b3a9e46a3143669eefd43f82f20a47-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e5b3a9e46a3143669eefd43f82f20a47-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16308093070983887}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 12, 4]
consumption (rows=resources) = [[1, 4, 2], [1, 1, 4], [4, 2, 4]]
capacity = [9, 14, 8]
upper_bounds = [3, 3, 3]"
1114,mul,2,860,860,1,860,1,"{'ok': True, 'value': 860, 'stdout': '860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08861541748046875}",1,Compute: 10 * 86
1115,rod,8,48,22,0,1,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08567547798156738}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 6, 19, 3, 22, 8, 17, 22]"
1116,sub,32,19578040809017367107519412950138,17130107081107000000000000000000,0,19578140808907367107519413050138,0,"{'ok': True, 'value': 19578040809017367107519412950138, 'stdout': '19578040809017367107519412950138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09425950050354004}",1,Compute: 64348234021129176259538934614276 - 44770193212111809152019521664138
1117,rod,4,40,40,1,4,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12000298500061035}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 8, 4, 1]"
1118,knap,32,1574,1080,0,6,0,"{'ok': True, 'value': 1574, 'stdout': '1574\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10051894187927246}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [41, 18, 5, 6, 57, 18, 30, 8, 38, 59, 58, 20, 29, 39, 15, 60, 41, 28, 8, 32, 47, 59, 8, 14, 14, 23, 38, 37, 31, 52, 36, 52]
V = [55, 80, 124, 58, 119, 18, 82, 21, 51, 45, 41, 51, 3, 95, 101, 78, 46, 119, 32, 22, 49, 104, 84, 27, 44, 71, 60, 53, 108, 104, 78, 99]
C = 510"
1119,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0950460433959961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdadbdc""
T = ""cacccddac"""
1120,mul,2,5940,5940,1,5940,1,"{'ok': True, 'value': 5940, 'stdout': '5940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10366439819335938}",1,Compute: 99 * 60
1121,add,8,44122412,44122412,1,44122412,1,"{'ok': True, 'value': 44122412, 'stdout': '44122412\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0852653980255127}",1,Compute: 10566571 + 33555841
1122,knap,16,455,104,0,0,0,"{'ok': True, 'value': 455, 'stdout': '455\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09703493118286133}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 32, 18, 19, 28, 6, 24, 16, 15, 26, 19, 28, 23, 22, 4, 29]
V = [57, 24, 42, 32, 34, 42, 51, 46, 33, 34, 61, 62, 44, 54, 14, 3]
C = 157"
1123,ilp_partition,8,1,1,1,12,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09230303764343262}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 21, 7, 24, 21, 3, 3, 12]"
1124,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09470820426940918}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdb""
T = ""ccdcc"""
1125,add,8,29489842,29490842,0,29489842,1,"{'ok': True, 'value': 29489842, 'stdout': '29489842\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09405112266540527}",1,Compute: 14001405 + 15488437
1126,sub,2,61,61,1,61,1,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09429168701171875}",1,Compute: 99 - 38
1127,rod,2,6,6,1,8,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1023256778717041}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
1128,mul,8,1878316762762224,14123791625823804901,0,1832645554444,0,"{'ok': True, 'value': 1878316762762224, 'stdout': '1878316762762224\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09963178634643555}",1,Compute: 23804901 * 78904624
1129,knap,4,31,,0,-1,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08794975280761719}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 1, 1]
V = [6, 10, 8, 13]
C = 4"
1130,mul,2,9504,9504,1,2,0,"{'ok': True, 'value': 9504, 'stdout': '9504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09474563598632812}",1,Compute: 99 * 96
1131,ilp_assign,2,8,7,0,9,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39765024185180664}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4], [4, 5]]"
1132,lcs,32,20,10,0,2,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09939336776733398}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccccdbbaadbbcababcdacaaacdababdc""
T = ""cbcdabdbaaacccbdabbabbcddcccdcab"""
1133,ilp_prod,32,211,"The solution to the problem is to maximize the total profit while ensuring that the consumption of each resource does not exceed its capacity. The exact solution would require solving the linear programming problem, which is beyond the scope of this response.",0,1014,0,"{'ok': True, 'value': 116, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/20a34979e24d4158845162ab938b5a35-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/20a34979e24d4158845162ab938b5a35-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 170.375 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -116 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                116.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n116.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17659997940063477}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [58, 41, 24, 42, 95, 66]
consumption (rows=resources) = [[32, 32, 26, 10, 4, 21], [21, 28, 32, 3, 22, 22], [1, 7, 17, 10, 6, 26], [18, 12, 28, 18, 28, 30]]
capacity = [94, 90, 87, 67]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1134,add,16,16186962774643389,30,0,16187062774643389,0,"{'ok': True, 'value': 16186962774643389, 'stdout': '16186962774643389\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09757518768310547}",1,Compute: 7015018517142468 + 9171944257500921
1135,add,16,8088972659884796,8088972659884896,0,7988972659884896,0,"{'ok': True, 'value': 8088972659884796, 'stdout': '8088972659884796\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09714341163635254}",1,Compute: 3494790592750492 + 4594182067134304
1136,ilp_prod,8,110,105,0,19,0,"{'ok': True, 'value': 96, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/926fe295eb3746f791c18b24b8eb259d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/926fe295eb3746f791c18b24b8eb259d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 114 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -96 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                96.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n96.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17470860481262207}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 3, 9, 14]
consumption (rows=resources) = [[3, 5, 4, 1], [7, 7, 6, 4], [3, 5, 2, 3], [1, 6, 1, 3]]
capacity = [18, 32, 19, 19]
upper_bounds = [4, 3, 4, 6]"
1137,ilp_assign,2,5,5,1,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4076118469238281}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [4, 2]]"
1138,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10033822059631348}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddc""
T = ""bcb"""
1139,ilp_assign,16,62,105,0,117,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3984663486480713}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 23, 28, 4, 45, 40, 25], [1, 40, 6, 38, 11, 27, 28], [12, 29, 14, 11, 44, 38, 7], [10, 28, 37, 18, 8, 7, 42], [32, 31, 41, 41, 33, 7, 2], [46, 28, 10, 12, 16, 26, 29], [46, 38, 45, 15, 9, 39, 38]]"
1140,sub,2,79,79,1,79,1,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09571218490600586}",1,Compute: 96 - 17
1141,ilp_partition,16,1,1,1,0,0,"{'ok': True, 'value': 291, 'stdout': '291\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08387923240661621}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 16, 26, 19, 34, 45, 5, 2, 2, 8, 46, 2, 26, 35, 35, 34]"
1142,ilp_assign,16,62,105,0,117,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39128947257995605}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 6, 45, 40, 8, 27, 5], [11, 45, 11, 33, 38, 36, 5], [45, 16, 10, 12, 19, 35, 23], [41, 39, 38, 13, 47, 45, 2], [21, 46, 28, 18, 19, 32, 30], [29, 25, 5, 6, 9, 36, 8], [16, 4, 34, 45, 39, 8, 6]]"
1143,knap,2,9,13,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1156160831451416}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 3]
V = [9, 7, 3]
C = 4"
1144,add,4,11839,11839,1,11839,1,"{'ok': True, 'value': 11839, 'stdout': '11839\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09662199020385742}",1,Compute: 1936 + 9903
1145,knap,4,23,14,0,0,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11969828605651855}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 5, 1, 1]
V = [1, 9, 3, 11]
C = 7"
1146,ilp_prod,8,48,63,0,6,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2447dd0ef5c144dd9b91d28b9f607001-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2447dd0ef5c144dd9b91d28b9f607001-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 49.8182 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -36 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 2 columns\nCbc0012I Integer solution of -48 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -48.580311 to -48 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -48, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -48.5803 to -48\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21981072425842285}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 6, 15, 13]
consumption (rows=resources) = [[7, 6, 3, 7], [8, 3, 7, 3], [4, 1, 6, 8], [8, 2, 6, 5]]
capacity = [20, 25, 17, 22]
upper_bounds = [3, 3, 3, 3]"
1147,ilp_assign,8,39,56,0,65,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.388444185256958}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 21, 6, 8, 12, 21, 2], [2, 21, 15, 11, 18, 13, 2], [2, 17, 1, 6, 18, 3, 8], [16, 22, 18, 18, 17, 8, 2], [8, 15, 1, 5, 2, 6, 15], [8, 16, 4, 22, 23, 24, 11], [22, 18, 14, 21, 19, 15, 19]]"
1148,ilp_partition,8,0,1,0,709,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10390186309814453}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 9, 9, 9, 20, 14, 7, 3]"
1149,sub,4,3120,3120,1,3120,1,"{'ok': True, 'value': 3120, 'stdout': '3120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08485102653503418}",1,Compute: 8144 - 5024
1150,add,32,93107248183113832146509491190758,9,0,93109248183113832146509491190758,0,"{'ok': True, 'value': 93107248183113832146509491190758, 'stdout': '93107248183113832146509491190758\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09860587120056152}",1,Compute: 61027632477399114689382089127992 + 32079615705714717457127402062766
1151,add,16,9025049615614370,10000000000000000,0,9025049615614368,0,"{'ok': True, 'value': 9025049615614370, 'stdout': '9025049615614370\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09155869483947754}",1,Compute: 4176299863947556 + 4848749751666814
1152,ilp_assign,8,34,56,0,80,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3987596035003662}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 13, 16, 11, 12, 21, 2], [5, 15, 3, 18, 11, 5, 14], [11, 2, 15, 14, 20, 6, 12], [15, 15, 8, 12, 19, 20, 1], [22, 19, 8, 18, 3, 8, 3], [20, 6, 14, 15, 8, 22, 10], [20, 22, 20, 4, 1, 16, 21]]"
1153,ilp_partition,16,0,1,0,13,0,"{'ok': True, 'value': 300, 'stdout': '300\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09920597076416016}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 12, 26, 20, 48, 23, 3, 33, 33, 10, 1, 37, 30, 11, 9, 9]"
1154,lcs,32,18,10,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09930181503295898}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcbcadaacdbccbacddbcacadbbccaac""
T = ""aabdbabcbdbbacaadccdccbbccddbddb"""
1155,knap,8,99,105,0,7,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1063847541809082}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 13, 12, 4, 16, 1, 7, 14]
V = [2, 27, 28, 16, 7, 6, 22, 27]
C = 39"
1156,lcs,8,7,6,0,1,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1007986068725586}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdabccac""
T = ""bdbccaca"""
1157,knap,16,395,1043,0,-1,0,"{'ok': True, 'value': 395, 'stdout': '395\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10614538192749023}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 1, 8, 24, 8, 9, 22, 15, 3, 2, 20, 32, 31, 4, 3, 28]
V = [47, 53, 23, 11, 26, 28, 64, 23, 15, 13, 57, 19, 3, 20, 26, 33]
C = 110"
1158,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3569295406341553}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [77, 88, 54, 64, 83, 56, 24, 6, 41, 85, 89, 29, 63, 73, 71, 31, 93, 19, 29, 52, 61, 74, 7, 5]"
1159,lcs,32,18,10,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09809613227844238}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdbdccdddabbbcbbdcaabdbabddcdaa""
T = ""ababcdacadbbcaabccdaccabcbaaccb"""
1160,mul,4,52244000,45,0,52336000,0,"{'ok': True, 'value': 52244000, 'stdout': '52244000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11208033561706543}",1,Compute: 5648 * 9250
1161,sub,16,6685565911475701,1495577987719361,0,6685565911475699,0,"{'ok': True, 'value': 6685565911475701, 'stdout': '6685565911475701\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08451056480407715}",1,Compute: 8181143899195062 - 1495577987719361
1162,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12033915519714355}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 4, 6, 13, 18, 18, 22]"
1163,sub,2,29,29,1,29,1,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08774971961975098}",1,Compute: 41 - 12
1164,knap,32,1478,126,0,2,0,"{'ok': True, 'value': 1478, 'stdout': '1478\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1152656078338623}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 63, 48, 11, 54, 27, 40, 40, 31, 23, 44, 9, 62, 42, 16, 39, 25, 22, 59, 8, 45, 49, 53, 32, 12, 46, 59, 26, 36, 35, 60, 5]
V = [41, 95, 72, 92, 114, 73, 96, 48, 71, 15, 111, 8, 6, 10, 4, 100, 50, 15, 33, 71, 81, 97, 122, 126, 60, 27, 86, 60, 4, 32, 60, 41]
C = 566"
1165,rod,4,44,22,0,9,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10342168807983398}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 7, 9, 6]"
1166,ilp_prod,32,339,1085,0,109,0,"{'ok': True, 'value': 53, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/226299116e22463882b371ccb97471ae-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/226299116e22463882b371ccb97471ae-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 26 COLUMNS\nAt line 171 RHS\nAt line 193 BOUNDS\nAt line 200 ENDATA\nProblem MODEL has 21 rows, 6 columns and 126 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 97.1667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -53 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                53.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n53.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20438551902770996}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [53, 9, 95, 7, 33, 54]
consumption (rows=resources) = [[19, 21, 19, 19, 14, 27], [22, 17, 26, 27, 19, 23], [26, 29, 20, 20, 13, 17], [32, 6, 30, 9, 12, 9]]
capacity = [99, 119, 84, 109]
upper_bounds = [3, 3, 3, 4, 6, 3]"
1167,knap,32,1765,1045,0,53,0,"{'ok': True, 'value': 1765, 'stdout': '1765\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09807515144348145}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [46, 48, 51, 28, 17, 25, 64, 27, 11, 33, 7, 53, 19, 57, 13, 56, 56, 21, 45, 47, 38, 41, 52, 59, 35, 26, 12, 23, 33, 21, 3, 49]
V = [23, 78, 126, 79, 100, 103, 22, 94, 86, 104, 77, 86, 20, 11, 72, 38, 116, 110, 12, 55, 115, 45, 101, 88, 115, 79, 15, 86, 45, 67, 32, 20]
C = 558"
1168,ilp_assign,2,4,3,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3911566734313965}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 5], [2, 3]]"
1169,add,32,151253315314669664007675509761280,151253315314669664007675510761280,0,151253315314669664007675510761280,0,"{'ok': True, 'value': 151253315314669664007675509761280, 'stdout': '151253315314669664007675509761280\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09067988395690918}",1,Compute: 58210504901439573763135213770749 + 93042810413230090244540295990531
1170,rod,16,720,45,0,64,0,"{'ok': True, 'value': 720, 'stdout': '720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09140133857727051}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [45, 17, 29, 48, 7, 5, 30, 23, 19, 9, 20, 22, 6, 20, 23, 22]"
1171,knap,2,8,11,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08844876289367676}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 4]
V = [3, 4, 8]
C = 5"
1172,knap,8,98,100,0,0,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09509944915771484}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 12, 7, 11, 5, 3, 13, 7]
V = [14, 14, 25, 11, 32, 20, 6, 7]
C = 33"
1173,sub,32,28948848057018050056971199423875,3110000061020,0,-29049108056988050056971200423875,0,"{'ok': True, 'value': 28948848057018050056971199423875, 'stdout': '28948848057018050056971199423875\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10181570053100586}",1,Compute: 97032130441349706167995761057991 - 68083282384331656111024561634116
1174,add,8,64422585,17417520,0,64422625,0,"{'ok': True, 'value': 64422585, 'stdout': '64422585\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0932009220123291}",1,Compute: 47005065 + 17417520
1175,ilp_assign,8,44,56,0,65,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4022860527038574}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 20, 20, 6, 9, 22, 15], [15, 5, 7, 9, 6, 23, 4], [22, 8, 5, 3, 9, 15, 16], [12, 21, 1, 5, 7, 12, 23], [8, 2, 1, 9, 6, 19, 2], [15, 9, 12, 19, 4, 21, 21], [13, 9, 11, 13, 11, 13, 12]]"
1176,sub,32,46997286547576025878809663089123,47000000000000000000000000000000,0,47000000000000000000000000000000,0,"{'ok': True, 'value': 46997286547576025878809663089123, 'stdout': '46997286547576025878809663089123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09723329544067383}",1,Compute: 66539404806308770320825985700744 - 19542118258732744442016322611621
1177,ilp_assign,8,49,76,0,91,0,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41115403175354004}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 7, 17, 10, 22, 23, 16], [24, 7, 2, 2, 9, 12, 6], [20, 24, 19, 16, 10, 13, 8], [1, 5, 18, 9, 6, 13, 10], [20, 22, 9, 1, 24, 12, 4], [19, 12, 22, 11, 17, 23, 11], [23, 20, 8, 24, 24, 17, 8]]"
1178,ilp_prod,16,198,168,0,240,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_n5v6inkc/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_n5v6inkc/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1677553653717041}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 48, 22, 12, 20, 34]
consumption (rows=resources) = [[11, 7, 8, 2, 1, 12], [5, 15, 14, 7, 5, 13], [14, 1, 8, 14, 1, 8], [8, 11, 16, 4, 6, 9]]
capacity = [62, 63, 52, 50]
upper_bounds = [3, 4, 3, 3, 8, 4]"
1179,mul,16,27989701813736914526145823579737,32,0,280583345072946357536367,0,"{'ok': True, 'value': 27989701813736914526145823579737, 'stdout': '27989701813736914526145823579737\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09761881828308105}",1,Compute: 6777703770895299 * 4129673228554163
1180,ilp_partition,4,1,0,0,12,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08876490592956543}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 5, 12]"
1181,add,32,158262340438364810342397389903860,151615151418161515141299002763684509415628,0,158262340438364810342497399903860,0,"{'ok': True, 'value': 158262340438364810342397389903860, 'stdout': '158262340438364810342397389903860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09852099418640137}",1,Compute: 69723444761360807578712880488232 + 88538895677004002763684509415628
1182,rod,32,1952,1053,0,659,0,"{'ok': True, 'value': 1952, 'stdout': '1952\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10167050361633301}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [61, 46, 8, 22, 2, 55, 47, 28, 86, 93, 3, 8, 54, 3, 78, 74, 30, 34, 8, 78, 63, 56, 94, 13, 8, 65, 57, 36, 77, 86, 5, 94]"
1183,add,8,160935871,160935871,1,161035871,0,"{'ok': True, 'value': 160935871, 'stdout': '160935871\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09943461418151855}",1,Compute: 94568963 + 66366908
1184,rod,16,704,60,0,65,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09721112251281738}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 20, 40, 43, 20, 9, 14, 8, 26, 13, 5, 28, 41, 18, 48, 15]"
1185,knap,32,1372,1043,0,5,0,"{'ok': True, 'value': 1372, 'stdout': '1372\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10127139091491699}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [51, 22, 14, 56, 26, 10, 43, 55, 38, 42, 34, 60, 1, 1, 46, 11, 13, 5, 17, 22, 39, 27, 34, 12, 38, 41, 32, 59, 14, 15, 31, 15]
V = [95, 48, 72, 99, 8, 17, 21, 38, 92, 14, 116, 11, 5, 27, 92, 78, 6, 90, 55, 19, 103, 112, 87, 33, 27, 103, 61, 6, 21, 67, 3, 32]
C = 462"
1186,lcs,8,5,5,1,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09745526313781738}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baccaddb""
T = ""baddcdd"""
1187,ilp_prod,16,172,149,0,155,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_784_p9l0/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_784_p9l0/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17440462112426758}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 23, 14, 9, 19, 10]
consumption (rows=resources) = [[2, 5, 9, 5, 2, 1], [6, 2, 4, 2, 15, 12], [2, 1, 9, 9, 13, 2], [6, 13, 9, 3, 9, 3]]
capacity = [61, 42, 47, 62]
upper_bounds = [7, 4, 5, 5, 3, 3]"
1188,rod,8,60,22,0,1,0,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09633231163024902}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 15, 6, 16, 21, 10, 21, 17]"
1189,knap,8,88,110,0,0,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08458185195922852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 12, 2, 4, 15, 8, 1, 15]
V = [31, 5, 16, 5, 14, 14, 13, 23]
C = 33"
1190,ilp_prod,4,48,60,0,60,0,"{'ok': True, 'value': 25, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2f0a1e6634bf407c98385dfc3b7b69fa-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2f0a1e6634bf407c98385dfc3b7b69fa-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -25 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                25.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n25.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1711592674255371}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 12]
consumption (rows=resources) = [[2, 3, 3], [2, 2, 2], [2, 2, 2]]
capacity = [12, 15, 12]
upper_bounds = [6, 4, 4]"
1191,sub,8,28828090,21518297,0,28828090,1,"{'ok': True, 'value': 28828090, 'stdout': '28828090\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09451556205749512}",1,Compute: 50346387 - 21518297
1192,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12251400947570801}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 3]"
1193,knap,16,355,119,0,0,0,"{'ok': True, 'value': 355, 'stdout': '355\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09081363677978516}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 18, 15, 32, 21, 20, 21, 12, 1, 1, 17, 11, 3, 8, 25, 12]
V = [22, 63, 15, 37, 25, 35, 18, 46, 27, 17, 30, 8, 29, 49, 8, 34]
C = 119"
1194,rod,2,12,6,0,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09971022605895996}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 3]"
1195,mul,2,1035,1035,1,1035,1,"{'ok': True, 'value': 1035, 'stdout': '1035\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08686113357543945}",1,Compute: 69 * 15
1196,rod,8,88,22,0,1,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09755754470825195}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 14, 14, 16, 7, 6, 16, 2]"
1197,ilp_prod,4,32,37,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_vukxghwd/main.py"", line 10, in <module>\n    prob += lpSum([4*x[0] + 5*x[1] + 8*x[2] for x in x.values()])\n  File ""/tmp/cot_exec_vukxghwd/main.py"", line 10, in <listcomp>\n    prob += lpSum([4*x[0] + 5*x[1] + 8*x[2] for x in x.values()])\nTypeError: \'LpVariable\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17056775093078613}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5, 8]
consumption (rows=resources) = [[4, 2, 1], [1, 2, 1], [4, 3, 3]]
capacity = [16, 16, 14]
upper_bounds = [3, 4, 4]"
1198,knap,4,19,13,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09801340103149414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5, 1]
V = [7, 6, 6, 12]
C = 6"
1199,knap,32,1598,1024,0,5,0,"{'ok': True, 'value': 1598, 'stdout': '1598\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10622930526733398}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [34, 2, 36, 64, 53, 32, 52, 19, 17, 19, 15, 57, 43, 22, 49, 5, 54, 40, 42, 60, 37, 5, 33, 57, 64, 1, 10, 31, 51, 33, 23, 12]
V = [27, 41, 111, 19, 39, 101, 125, 32, 45, 8, 31, 51, 41, 96, 34, 99, 74, 79, 72, 29, 70, 25, 5, 19, 13, 35, 97, 123, 118, 102, 45, 102]
C = 536"
1200,knap,32,1417,448,0,45,0,"{'ok': True, 'value': 1417, 'stdout': '1417\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09180402755737305}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 60, 15, 45, 64, 31, 47, 1, 58, 10, 35, 35, 13, 7, 52, 45, 39, 48, 13, 12, 44, 5, 28, 37, 34, 7, 34, 5, 1, 12, 15, 20]
V = [26, 105, 11, 77, 124, 16, 93, 68, 110, 92, 125, 44, 34, 8, 38, 89, 48, 121, 78, 4, 74, 102, 25, 88, 118, 20, 54, 14, 11, 36, 6, 114]
C = 448"
1201,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0959630012512207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbaadcc""
T = ""daccbccc"""
1202,add,8,136875394,9,0,136875394,1,"{'ok': True, 'value': 136875394, 'stdout': '136875394\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0980076789855957}",1,Compute: 39512006 + 97363388
1203,mul,4,39163712,2157120,0,39039928,0,"{'ok': True, 'value': 39163712, 'stdout': '39163712\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09636139869689941}",1,Compute: 6848 * 5719
1204,rod,4,20,20,1,4,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0973513126373291}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 10, 5, 6]"
1205,rod,8,104,25,0,30,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09772777557373047}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 12, 24, 17, 18, 7, 23, 7]"
1206,rod,32,1328,1050,0,81,0,"{'ok': True, 'value': 1328, 'stdout': '1328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10657453536987305}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [18, 83, 59, 49, 58, 92, 26, 95, 91, 5, 68, 29, 12, 63, 41, 76, 20, 45, 36, 24, 72, 57, 31, 26, 54, 61, 60, 29, 2, 61, 28, 81]"
1207,knap,8,117,106,0,0,0,"{'ok': True, 'value': 117, 'stdout': '117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0878448486328125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 14, 2, 6, 9, 10, 10, 14]
V = [1, 32, 5, 31, 19, 30, 24, 31]
C = 40"
1208,lcs,16,10,6,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09873652458190918}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babdbcaacacbacdd""
T = ""caadcbaadbcddccdd"""
1209,rod,16,296,54,0,65,0,"{'ok': True, 'value': 296, 'stdout': '296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08664512634277344}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [17, 37, 20, 25, 20, 10, 8, 36, 45, 41, 28, 2, 26, 20, 33, 7]"
1210,sub,16,1571744048857065,-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,1572744048827106,0,"{'ok': True, 'value': 1571744048857065, 'stdout': '1571744048857065\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11010146141052246}",1,Compute: 9421282990469243 - 7849538941612178
1211,add,16,13931166778480117,13931166778278117,0,13931163778479127,0,"{'ok': True, 'value': 13931166778480117, 'stdout': '13931166778480117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08945441246032715}",1,Compute: 6194903765834171 + 7736263012645946
1212,sub,8,83928413,83928413,1,83928413,1,"{'ok': True, 'value': 83928413, 'stdout': '83928413\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15426969528198242}",1,Compute: 99798015 - 15869602
1213,ilp_prod,32,315,1059,0,246,0,"{'ok': True, 'value': 244, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bfe1332271fa49729afa56208a21a2a7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bfe1332271fa49729afa56208a21a2a7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 296.682 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -244 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                244.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n244.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16787934303283691}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [61, 44, 35, 44, 36, 73]
consumption (rows=resources) = [[7, 12, 25, 27, 28, 15], [14, 23, 16, 13, 27, 2], [13, 19, 32, 14, 13, 22], [22, 27, 1, 1, 31, 24]]
capacity = [78, 117, 114, 107]
upper_bounds = [4, 3, 3, 3, 3, 4]"
1214,add,4,12006,12116,0,12006,1,"{'ok': True, 'value': 12006, 'stdout': '12006\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09401440620422363}",1,Compute: 6815 + 5191
1215,lcs,32,21,10,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08796286582946777}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acaccadcadddccbdacbdadcaacaaadcc""
T = ""cbccaaccdaccdbcdcacdccabccaddbadc"""
1216,rod,2,6,6,1,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08631229400634766}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
1217,add,16,14262311179187505,4,0,14262311179187505,1,"{'ok': True, 'value': 14262311179187505, 'stdout': '14262311179187505\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09705519676208496}",1,Compute: 6654161406497512 + 7608149772689993
1218,mul,2,5696,5632,0,5632,0,"{'ok': True, 'value': 5696, 'stdout': '5696\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11031031608581543}",1,Compute: 64 * 89
1219,ilp_prod,16,199,155,0,155,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_79ebacf0/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_79ebacf0/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16130971908569336}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 25, 40, 36, 25, 29]
consumption (rows=resources) = [[12, 1, 6, 15, 7, 2], [10, 6, 6, 5, 1, 8], [7, 3, 3, 15, 16, 4], [3, 13, 14, 6, 5, 7]]
capacity = [56, 45, 32, 61]
upper_bounds = [4, 4, 4, 3, 3, 5]"
1220,ilp_partition,8,1,1,1,37,0,"{'ok': True, 'value': 45, 'stdout': '45\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09073209762573242}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 17, 2, 6, 1, 2, 20, 23]"
1221,sub,32,62120171106341491069622296415672,62119171106341491069622296415672,0,62119971106341491070022296415672,0,"{'ok': True, 'value': 62120171106341491069622296415672, 'stdout': '62120171106341491069622296415672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09506654739379883}",1,Compute: 92173607440075579025102774185424 - 30053436333734087955480477769752
1222,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08845138549804688}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcacbcb""
T = ""daccccbd"""
1223,knap,32,1644,124,0,4,0,"{'ok': True, 'value': 1644, 'stdout': '1644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09486126899719238}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [60, 56, 47, 2, 48, 15, 49, 26, 38, 36, 58, 58, 7, 63, 2, 37, 19, 60, 40, 29, 40, 23, 8, 4, 54, 53, 23, 60, 18, 5, 62, 1]
V = [84, 17, 87, 51, 15, 92, 76, 24, 61, 62, 3, 82, 9, 73, 21, 71, 82, 24, 11, 29, 106, 115, 56, 36, 124, 56, 76, 53, 109, 120, 35, 124]
C = 550"
1224,ilp_prod,4,21,37,0,The answer will be printed by the last line of the code.,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/085883530caf47f292e1c7f121e48680-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/085883530caf47f292e1c7f121e48680-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17238545417785645}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 5, 4]
consumption (rows=resources) = [[3, 3, 1], [3, 2, 2], [3, 4, 4]]
capacity = [14, 8, 10]
upper_bounds = [3, 3, 3]"
1225,ilp_partition,4,1,0,0,3,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08702564239501953}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 12, 5, 4]"
1226,rod,2,12,6,0,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0848531723022461}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
1227,mul,32,3961298229560579540631212561108903877560746451375652967831935168,,0,388344444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 3961298229560579540631212561108903877560746451375652967831935168, 'stdout': '3961298229560579540631212561108903877560746451375652967831935168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09635114669799805}",1,Compute: 53595675385116018877425149182772 * 73910781067620732153259556028144
1228,mul,8,4457171281038308,780727407,0,445140033485768,0,"{'ok': True, 'value': 4457171281038308, 'stdout': '4457171281038308\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09595656394958496}",1,Compute: 57142708 * 78000701
1229,sub,32,17390746012109090425277348809947,171780742012145032454296330805487,0,173906456012089090425277348809947,0,"{'ok': True, 'value': 17390746012109090425277348809947, 'stdout': '17390746012109090425277348809947\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08515501022338867}",1,Compute: 95792249593648368929646741799551 - 78401503581539278504369392989604
1230,knap,2,7,10,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371233940124512}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 5]
V = [5, 3, 7]
C = 5"
1231,mul,8,4586791604528000,250,0,45394543920000,0,"{'ok': True, 'value': 4586791604528000, 'stdout': '4586791604528000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09738349914550781}",1,Compute: 71861888 * 63827875
1232,ilp_partition,4,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0979912281036377}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 2, 2, 11]"
1233,ilp_partition,2,0,1,0,6,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09776067733764648}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 4, 6, 3]"
1234,add,8,154341975,17801111,0,154341975,1,"{'ok': True, 'value': 154341975, 'stdout': '154341975\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10024189949035645}",1,Compute: 67801111 + 86540864
1235,mul,4,10690331,10635421,0,10644611,0,"{'ok': True, 'value': 10690331, 'stdout': '10690331\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09750151634216309}",1,Compute: 7429 * 1439
1236,mul,4,34872084,34160000,0,35005444,0,"{'ok': True, 'value': 34872084, 'stdout': '34872084\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09680819511413574}",1,Compute: 4842 * 7202
1237,knap,2,15,15,1,0,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10004091262817383}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 5]
V = [8, 7, 8]
C = 5"
1238,rod,32,1184,1055,0,7,0,"{'ok': True, 'value': 1184, 'stdout': '1184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09917235374450684}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [37, 71, 72, 93, 49, 4, 79, 6, 67, 45, 49, 82, 82, 85, 80, 62, 4, 78, 78, 16, 34, 6, 47, 31, 25, 25, 63, 74, 84, 78, 63, 33]"
1239,knap,8,75,105,0,0,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09883356094360352}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 6, 15, 5, 15, 5, 14, 12]
V = [21, 8, 2, 10, 23, 21, 14, 8]
C = 43"
1240,add,16,10877262762390199,,0,10877281762434199,0,"{'ok': True, 'value': 10877262762390199, 'stdout': '10877262762390199\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09362411499023438}",1,Compute: 1218739745884065 + 9658523016506134
1241,knap,8,81,110,0,0,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09737300872802734}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 11, 4, 6, 2, 15, 16, 16]
V = [18, 28, 15, 3, 3, 21, 25, 32]
C = 42"
1242,ilp_prod,4,42,35,0,42,1,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0025312e3e554366a5151479bffadfd0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0025312e3e554366a5151479bffadfd0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 31 RHS\nAt line 36 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18089008331298828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7, 7]
consumption (rows=resources) = [[1, 3, 2], [4, 1, 4], [4, 1, 3]]
capacity = [16, 14, 15]
upper_bounds = [3, 5, 3]"
1243,knap,2,8,10,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11374044418334961}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 2]
V = [7, 8, 2]
C = 6"
1244,add,8,110993114,110993114,1,111000000,0,"{'ok': True, 'value': 110993114, 'stdout': '110993114\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09942436218261719}",1,Compute: 94591801 + 16401313
1245,ilp_prod,16,227,The final answer would be the maximum profit obtained from the problem.,0,204,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_nxh_ev5_/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_nxh_ev5_/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21253323554992676}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [43, 23, 18, 33, 6, 45]
consumption (rows=resources) = [[11, 2, 1, 11, 1, 16], [14, 10, 1, 3, 3, 14], [1, 9, 1, 1, 8, 2], [11, 1, 9, 16, 14, 9]]
capacity = [33, 63, 49, 59]
upper_bounds = [3, 5, 6, 3, 4, 3]"
1246,rod,16,368,65,0,65,0,"{'ok': True, 'value': 368, 'stdout': '368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08911991119384766}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [23, 41, 10, 28, 18, 27, 36, 11, 12, 27, 40, 44, 4, 30, 44, 15]"
1247,lcs,8,5,4,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09926676750183105}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadcaaca""
T = ""baaacdaad"""
1248,knap,8,109,114,0,8,0,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09703516960144043}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 11, 12, 5, 3, 15, 4, 4]
V = [10, 11, 22, 27, 14, 17, 23, 23]
C = 31"
1249,mul,32,2645499741768251367050716392517510347837213158801401821797143392,3861769398250915539392929768459552,0,267364444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 2645499741768251367050716392517510347837213158801401821797143392, 'stdout': '2645499741768251367050716392517510347837213158801401821797143392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10955190658569336}",1,Compute: 35387607415539549415399910310342 * 74757801811900648914964884229776
1250,ilp_partition,4,1,1,1,10,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09854626655578613}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 3, 7, 1]"
1251,knap,4,26,22,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09922337532043457}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 6, 2, 5]
V = [16, 10, 4, 10]
C = 7"
1252,ilp_assign,4,8,0,0,11,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.659825325012207}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3, 11, 8], [10, 3, 10, 5], [2, 5, 6, 3], [8, 6, 1, 6]]"
1253,rod,4,24,28,0,10,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08845257759094238}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 8, 4, 10]"
1254,rod,2,3,3,1,3,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_e51pk0_f/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_e51pk0_f/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09268522262573242}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 3]"
1255,ilp_partition,8,1,1,1,8,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08958935737609863}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 11, 23, 17, 3, 18, 11, 8]"
1256,add,16,15025825149936113,15025814651936486,0,15025825149936113,1,"{'ok': True, 'value': 15025825149936113, 'stdout': '15025825149936113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09679460525512695}",1,Compute: 5151232547987352 + 9874592601948761
1257,add,2,95,95,1,95,1,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10503149032592773}",1,Compute: 72 + 23
1258,knap,4,17,14,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08693075180053711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 3, 3]
V = [9, 1, 6, 8]
C = 7"
1259,ilp_assign,32,79,110,0,1,0,"{'ok': True, 'value': 79, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ec72c663179c4d1485a4742bfe1f9095-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/ec72c663179c4d1485a4742bfe1f9095-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 79 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 79\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 79 - took 0.00 seconds\nCbc0012I Integer solution of 79 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 79, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 79 to 79\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                79.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 79.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16989970207214355}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 31, 9, 14, 47, 60, 10], [7, 43, 73, 87, 10, 4, 84], [10, 42, 55, 95, 11, 18, 7], [6, 17, 8, 13, 31, 31, 94], [38, 3, 25, 10, 69, 89, 44], [39, 35, 71, 51, 76, 16, 59], [26, 33, 78, 30, 55, 31, 20]]"
1260,mul,16,14581320562289096416013341064760,15,0,1470090902410232606666646148288060,0,"{'ok': True, 'value': 14581320562289096416013341064760, 'stdout': '14581320562289096416013341064760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10778474807739258}",1,Compute: 8554033082169720 * 1704613534016233
1261,mul,8,4766734483165788,1324185882,0,4744888431958,0,"{'ok': True, 'value': 4766734483165788, 'stdout': '4766734483165788\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08810281753540039}",1,Compute: 80298987 * 59362324
1262,mul,8,3944701521598176,76,0,387498433338976,0,"{'ok': True, 'value': 3944701521598176, 'stdout': '3944701521598176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09699749946594238}",1,Compute: 74708694 * 52801104
1263,lcs,32,19,10,0,1,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0888664722442627}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babcbabdadbdacabbcdddddbbbcabdcb""
T = ""cbacddcadcdcadddbcaababddbaabdba"""
1264,ilp_assign,2,2,2,1,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42904186248779297}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [1, 3]]"
1265,rod,8,27,12,0,17,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09500646591186523}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 5, 7, 10, 3, 22, 7, 1]"
1266,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12794852256774902}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 45, 40, 16, 4, 28, 41, 40, 25, 37, 15, 13, 2, 9, 44, 8]"
1267,ilp_assign,2,4,4,1,6,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3979179859161377}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [3, 5]]"
1268,ilp_prod,16,275,The actual solution would be provided by a linear programming solver.,0,160,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_hminq0ht/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_hminq0ht/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15907573699951172}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 42, 48, 33, 17, 28]
consumption (rows=resources) = [[12, 9, 10, 2, 15, 6], [12, 3, 7, 6, 12, 4], [16, 16, 4, 3, 12, 9], [4, 6, 6, 10, 8, 2]]
capacity = [57, 39, 55, 41]
upper_bounds = [3, 3, 5, 4, 3, 6]"
1269,ilp_prod,8,27,35,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0hg5ea4k/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_0hg5ea4k/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1568007469177246}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6, 7, 7]
consumption (rows=resources) = [[5, 5, 3, 4], [3, 6, 6, 4], [4, 1, 4, 8], [6, 3, 7, 8]]
capacity = [31, 22, 30, 28]
upper_bounds = [4, 3, 3, 3]"
1270,add,2,98,98,1,98,1,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08498167991638184}",1,Compute: 10 + 88
1271,add,32,133963268034918098089831886667393,133963466034918100014251444667403,0,133963268034918098089831886667493,0,"{'ok': True, 'value': 133963268034918098089831886667393, 'stdout': '133963268034918098089831886667393\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0912320613861084}",1,Compute: 92993242020061286979453224078191 + 40970026014856811110378662589202
1272,knap,32,1773,1024,0,47,0,"{'ok': True, 'value': 1773, 'stdout': '1773\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10446715354919434}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 32, 37, 26, 48, 46, 4, 51, 58, 8, 28, 18, 59, 47, 26, 39, 38, 56, 44, 64, 47, 14, 10, 28, 22, 41, 37, 64, 57, 36, 1, 59]
V = [121, 24, 43, 127, 36, 97, 72, 118, 26, 62, 44, 110, 113, 21, 15, 13, 94, 83, 84, 15, 56, 118, 62, 85, 70, 113, 100, 10, 123, 82, 19, 14]
C = 583"
1273,rod,16,480,60,0,64,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08951306343078613}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 1, 37, 35, 19, 24, 23, 36, 16, 4, 27, 45, 47, 43, 37, 4]"
1274,ilp_assign,4,20,26,0,34,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41475629806518555}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 9, 8, 9], [8, 9, 12, 12], [12, 8, 10, 3], [10, 1, 10, 6]]"
1275,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09881329536437988}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""cb"""
1276,mul,2,612,624,0,612,1,"{'ok': True, 'value': 612, 'stdout': '612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09469175338745117}",1,Compute: 36 * 17
1277,lcs,16,8,8,1,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10623502731323242}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdabdbabcbdbaadb""
T = ""aaddcdaabaabccba"""
1278,sub,2,47,47,1,47,1,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09061264991760254}",1,Compute: 64 - 17
1279,ilp_partition,16,0,1,0,30,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.23448681831359863}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 29, 11, 26, 25, 13, 30, 22, 25, 39, 45, 14, 37, 34, 4, 25]"
1280,mul,2,2145,33,0,2115,0,"{'ok': True, 'value': 2145, 'stdout': '2145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08621931076049805}",1,Compute: 65 * 33
1281,ilp_prod,8,92,60,0,1,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a14d9930293e458db8cbe9566e8615f1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a14d9930293e458db8cbe9566e8615f1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 12 COLUMNS\nAt line 53 RHS\nAt line 61 BOUNDS\nAt line 66 ENDATA\nProblem MODEL has 7 rows, 4 columns and 28 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17490172386169434}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 20, 12, 18]
consumption (rows=resources) = [[8, 8, 6, 5], [2, 2, 2, 2], [4, 7, 8, 2], [8, 1, 3, 3]]
capacity = [29, 26, 21, 26]
upper_bounds = [3, 3, 3, 5]"
1282,ilp_prod,4,24,37,0,36,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4a0db057379b475e8432e00deda05739-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4a0db057379b475e8432e00deda05739-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1859593391418457}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6, 5]
consumption (rows=resources) = [[4, 3, 4], [2, 3, 2], [1, 3, 4]]
capacity = [12, 13, 16]
upper_bounds = [3, 4, 3]"
1283,knap,32,1543,1085,0,1,0,"{'ok': True, 'value': 1543, 'stdout': '1543\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11940407752990723}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [38, 57, 1, 49, 62, 32, 6, 29, 54, 5, 36, 28, 36, 53, 64, 35, 31, 19, 61, 30, 15, 34, 2, 27, 28, 32, 62, 20, 17, 6, 62, 36]
V = [90, 55, 108, 52, 52, 30, 29, 81, 94, 16, 128, 58, 16, 51, 44, 98, 42, 15, 56, 67, 22, 95, 18, 109, 91, 54, 68, 61, 77, 119, 65, 71]
C = 533"
1284,ilp_assign,32,168,186,0,8,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42120361328125}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[78, 82, 30, 58, 83, 47, 16], [19, 45, 25, 73, 57, 59, 26], [34, 89, 38, 38, 65, 68, 68], [5, 30, 72, 10, 81, 30, 96], [13, 46, 53, 31, 75, 44, 12], [23, 66, 18, 82, 7, 19, 55], [12, 84, 68, 92, 90, 80, 8]]"
1285,knap,32,1677,1043,0,27,0,"{'ok': True, 'value': 1677, 'stdout': '1677\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10594487190246582}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 15, 12, 8, 24, 17, 55, 38, 61, 21, 53, 23, 38, 27, 54, 24, 8, 53, 42, 22, 55, 6, 61, 16, 12, 25, 47, 49, 55, 4, 22, 21]
V = [118, 103, 29, 20, 75, 68, 75, 90, 46, 109, 78, 10, 75, 89, 92, 60, 21, 94, 112, 92, 49, 39, 22, 56, 31, 124, 121, 37, 124, 60, 81, 37]
C = 491"
1286,knap,4,31,26,0,0,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0888068675994873}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 5, 4, 5]
V = [11, 16, 15, 4]
C = 10"
1287,ilp_partition,2,1,0,0,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08710455894470215}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 4, 1, 4]"
1288,ilp_prod,2,56,14,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1fa977958e1244d28f371a88bd6f5aae-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1fa977958e1244d28f371a88bd6f5aae-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17358827590942383}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[1, 1], [3, 1]]
capacity = [7, 9]
upper_bounds = [3, 7]"
1289,rod,4,48,48,1,12,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09515070915222168}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 8, 10, 10]"
1290,mul,2,1215,27,0,1215,1,"{'ok': True, 'value': 1215, 'stdout': '1215\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09587574005126953}",1,Compute: 45 * 27
1291,rod,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09794998168945312}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 5]"
1292,ilp_partition,16,1,1,1,14,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20813965797424316}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 7, 39, 29, 10, 18, 12, 14, 28, 33, 45, 36, 5, 19, 18, 48]"
1293,ilp_prod,4,42,27,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_in6q_2rf/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_in6q_2rf/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1702256202697754}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 6]
consumption (rows=resources) = [[3, 4, 1], [2, 4, 1], [1, 2, 4]]
capacity = [10, 14, 12]
upper_bounds = [3, 3, 3]"
1294,ilp_partition,32,0,10,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21726083755493164}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 33, 27, 63, 47, 41, 49, 7, 36, 70, 57, 63, 30, 27, 70, 59, 7, 4, 20, 13, 50, 61, 36, 67]"
1295,mul,32,2928223554525165497050529059070011195442675297020248215456954309,2910465656769415639556156666445655664549,0,291044045644344444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 2928223554525165497050529059070011195442675297020248215456954309, 'stdout': '2928223554525165497050529059070011195442675297020248215456954309\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09624958038330078}",1,Compute: 36736964255350508054372867457457 * 79707825997045690351422683441237
1296,ilp_prod,4,67,50,0,33,0,"{'ok': True, 'value': 33, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/99b5c2d84e614d539073debac5ed3064-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/99b5c2d84e614d539073debac5ed3064-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 33 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -33 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                33.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n33.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1710667610168457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 6, 8]
consumption (rows=resources) = [[4, 3, 1], [1, 2, 2], [2, 4, 1]]
capacity = [12, 16, 12]
upper_bounds = [3, 3, 8]"
1297,sub,4,930,930,1,-930,0,"{'ok': True, 'value': 930, 'stdout': '930\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11098122596740723}",1,Compute: 3126 - 2196
1298,sub,32,47566599248902870101767333639948,47566524748902870101767333640048,0,47566599248902870101767333640048,0,"{'ok': True, 'value': 47566599248902870101767333639948, 'stdout': '47566599248902870101767333639948\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08303165435791016}",1,Compute: 73802527636915941729453116854539 - 26235928388013071627685783214591
1299,sub,4,4213,4213,1,4213,1,"{'ok': True, 'value': 4213, 'stdout': '4213\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09147262573242188}",1,Compute: 7893 - 3680
1300,lcs,16,7,5,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10003900527954102}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbbdccabcabcbdc""
T = ""cccacacddaddaab"""
1301,ilp_assign,2,6,4,0,8,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4050567150115967}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [4, 2]]"
1302,ilp_prod,8,51,81,0,5,0,"{'ok': True, 'value': 41, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2a53a1a7b3a843488670b7599ca89c05-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2a53a1a7b3a843488670b7599ca89c05-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 43 RHS\nAt line 49 BOUNDS\nAt line 54 ENDATA\nProblem MODEL has 5 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 48.5714 - 0.00 seconds\nCgl0004I processed model has 5 rows, 4 columns (4 integer (0 of which binary)) and 20 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -34 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -41 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3.5\nCbc0013I At root node, 2 cuts changed objective from -44.285714 to -41 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -41, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -44.2857 to -41\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                41.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n41.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18625235557556152}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 17, 12, 7]
consumption (rows=resources) = [[7, 5, 6, 5], [7, 7, 5, 8], [7, 4, 3, 8], [5, 3, 2, 3]]
capacity = [20, 24, 25, 24]
upper_bounds = [3, 3, 3, 3]"
1303,knap,8,92,155,0,14,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0982828140258789}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 3, 11, 1, 13, 14, 7, 14]
V = [16, 27, 21, 8, 2, 14, 20, 5]
C = 35"
1304,ilp_prod,16,130,155,0,40,0,"{'ok': True, 'value': 130, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/dcf19630f7444b109d61a8b32ef2efd1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/dcf19630f7444b109d61a8b32ef2efd1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 144.087 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -116 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0031I 3 added rows had average density of 5\nCbc0013I At root node, 3 cuts changed objective from -144.08704 to -132.09362 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 184 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 40 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 3 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -116 best solution, best possible -132.09362 (0.02 seconds)\nCbc0012I Integer solution of -127 found by rounding after 284 iterations and 1 nodes (0.02 seconds)\nCbc0016I Integer solution of -130 found by strong branching after 336 iterations and 2 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -130, took 363 iterations and 4 nodes (0.02 seconds)\nCbc0032I Strong branching done 20 times (26 iterations), fathomed 2 nodes and fixed 0 variables\nCbc0035I Maximum depth 1, 3 variables fixed on reduced cost\nCuts at root node changed objective from -144.087 to -132.094\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 123 times and created 225 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 123 times and created 85 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 100 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\n\nResult - Optimal solution found\n\nObjective value:                130.00000000\nEnumerated nodes:               4\nTotal iterations:               363\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n130.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19765901565551758}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 20, 26, 12, 40, 9]
consumption (rows=resources) = [[1, 15, 2, 11, 4, 7], [5, 6, 4, 4, 12, 10], [5, 9, 9, 2, 12, 13], [15, 11, 5, 6, 5, 14]]
capacity = [44, 47, 37, 40]
upper_bounds = [3, 3, 4, 4, 3, 3]"
1305,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09927129745483398}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcacbbddddbaadcc""
T = ""ddcdddbaaccacccd"""
1306,ilp_prod,4,24,65,0,30,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c604e875e3724556912819361bd43724-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c604e875e3724556912819361bd43724-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16822528839111328}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 5]
consumption (rows=resources) = [[2, 2, 1], [1, 3, 1], [3, 4, 3]]
capacity = [14, 8, 9]
upper_bounds = [3, 3, 3]"
1307,lcs,8,5,5,1,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09395885467529297}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbbcadc""
T = ""cbcadbcb"""
1308,lcs,16,8,7,0,16,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11997318267822266}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcddbbdbbbcaadd""
T = ""cacbbbacaaabcda"""
1309,ilp_assign,16,62,105,0,110,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3985321521759033}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[28, 21, 4, 9, 12, 7, 26], [31, 16, 1, 46, 40, 27, 47], [46, 5, 40, 32, 20, 12, 45], [42, 6, 30, 23, 27, 43, 23], [41, 22, 7, 41, 2, 34, 34], [33, 29, 29, 3, 6, 1, 9], [44, 38, 5, 25, 18, 19, 10]]"
1310,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39088869094848633}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [3, 3]]"
1311,ilp_prod,2,21,21,1,21,1,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/68f9532cb027458f9e71a346fa03ad87-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/68f9532cb027458f9e71a346fa03ad87-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17193889617919922}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7]
consumption (rows=resources) = [[1, 1], [2, 2]]
capacity = [9, 6]
upper_bounds = [3, 3]"
1312,ilp_assign,4,16,11,0,28,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.46598148345947266}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2, 11, 3], [1, 8, 7, 10], [4, 10, 7, 9], [11, 9, 10, 6]]"
1313,ilp_partition,4,0,0,1,13,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10951352119445801}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 10, 10]"
1314,knap,4,22,15,0,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0981898307800293}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 3, 3]
V = [4, 11, 1, 11]
C = 7"
1315,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09090042114257812}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [87, 19, 51, 58, 76, 11, 47, 11, 32, 38, 50, 79, 11, 2, 39, 70, 60, 91, 21, 53, 59, 39, 46, 21]"
1316,ilp_prod,4,72,48,0,30,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b30c21ef395b444886b3c702c169ff01-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b30c21ef395b444886b3c702c169ff01-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18393588066101074}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8, 12]
consumption (rows=resources) = [[4, 3, 2], [4, 4, 1], [1, 1, 1]]
capacity = [13, 11, 12]
upper_bounds = [3, 3, 6]"
1317,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08840417861938477}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbddbac""
T = ""addaadc"""
1318,ilp_prod,8,72,100,0,4,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9fec295e00964e16b649e27cfa845e1e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9fec295e00964e16b649e27cfa845e1e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 4 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1741318702697754}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6, 11, 18]
consumption (rows=resources) = [[8, 5, 7, 6], [3, 2, 2, 3], [7, 5, 2, 5], [3, 8, 7, 4]]
capacity = [27, 24, 24, 26]
upper_bounds = [3, 3, 3, 4]"
1319,rod,2,6,4,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08892393112182617}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
1320,ilp_assign,4,16,23,0,24,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40808844566345215}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 4, 2, 7], [5, 8, 7, 11], [8, 7, 3, 7], [4, 7, 11, 4]]"
1321,rod,2,6,5,0,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_24aefm6v/main.py"", line 11, in <module>\n    print(cut_rod(P, N))\n  File ""/tmp/cot_exec_24aefm6v/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10147237777709961}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 5]"
1322,mul,32,2946145585441695065159316959752629356192731756085203458431459995,The final answer will be the result of these calculations.,0,29393415293415293415293415293415,0,"{'ok': True, 'value': 2946145585441695065159316959752629356192731756085203458431459995, 'stdout': '2946145585441695065159316959752629356192731756085203458431459995\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0876927375793457}",1,Compute: 29942095105009438986150516134555 * 98394770810436456873993822711809
1323,ilp_partition,4,0,1,0,7,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09452509880065918}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 10, 12, 7]"
1324,add,4,9956,9954,0,9956,1,"{'ok': True, 'value': 9956, 'stdout': '9956\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08536505699157715}",1,Compute: 2268 + 7688
1325,sub,4,5790,0,0,5788,0,"{'ok': True, 'value': 5790, 'stdout': '5790\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09765243530273438}",1,Compute: 7223 - 1433
1326,rod,4,24,12,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09504199028015137}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 4, 3, 5]"
1327,ilp_assign,32,123,208,0,208,0,"{'ok': True, 'value': 123, 'stdout': '123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40837931632995605}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[56, 72, 23, 58, 50, 24, 73], [29, 53, 54, 45, 92, 36, 80], [92, 15, 79, 79, 47, 25, 30], [96, 16, 14, 17, 81, 73, 17], [39, 79, 89, 75, 5, 77, 49], [15, 83, 13, 50, 59, 80, 34], [86, 33, 78, 56, 81, 34, 20]]"
1328,mul,2,2150,2150,1,2150,1,"{'ok': True, 'value': 2150, 'stdout': '2150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09818172454833984}",1,Compute: 25 * 86
1329,mul,4,64687038,149,0,64584658,0,"{'ok': True, 'value': 64687038, 'stdout': '64687038\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08544778823852539}",1,Compute: 7527 * 8594
1330,mul,32,2329491854589921029042216405010913777610884881622359445491348900,2,0,235390444064644474724444960462442044440,0,"{'ok': True, 'value': 2329491854589921029042216405010913777610884881622359445491348900, 'stdout': '2329491854589921029042216405010913777610884881622359445491348900\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09734988212585449}",1,Compute: 39448317520693116255716827588020 * 59051741645710402580920621134445
1331,knap,4,12,11,0,0,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08709263801574707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 6, 5, 6]
V = [2, 3, 1, 10]
C = 9"
1332,ilp_assign,16,27,115,0,110,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3956172466278076}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 13, 27, 32, 4, 6, 45], [1, 20, 10, 9, 24, 45, 44], [40, 41, 6, 7, 22, 42, 47], [37, 23, 44, 47, 5, 5, 35], [42, 14, 44, 16, 28, 10, 3], [19, 1, 29, 6, 28, 46, 38], [33, 2, 27, 42, 12, 15, 21]]"
1333,sub,8,23280575,23280575,1,23280575,1,"{'ok': True, 'value': 23280575, 'stdout': '23280575\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09882164001464844}",1,Compute: 57368366 - 34087791
1334,ilp_prod,8,92,80,0,17,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/de1612b0b9614561bde18b7d1f546ce6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/de1612b0b9614561bde18b7d1f546ce6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 16 COLUMNS\nAt line 73 RHS\nAt line 85 BOUNDS\nAt line 90 ENDATA\nProblem MODEL has 11 rows, 4 columns and 44 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 51 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -48 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1726548671722412}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 10, 20, 16]
consumption (rows=resources) = [[6, 2, 2, 8], [5, 8, 8, 1], [5, 8, 6, 8], [3, 4, 1, 8]]
capacity = [23, 23, 23, 17]
upper_bounds = [3, 3, 3, 3]"
1335,rod,4,28,28,1,6,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09549283981323242}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 6, 6, 9]"
1336,ilp_prod,32,266,1053,0,213,0,"{'ok': True, 'value': 102, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2a39b45342944d1aa1ad8e9e09fbc241-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2a39b45342944d1aa1ad8e9e09fbc241-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 145.444 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -102 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                102.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n102.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18442010879516602}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [51, 87, 55, 69, 4, 28]
consumption (rows=resources) = [[20, 31, 6, 25, 21, 12], [27, 32, 14, 16, 1, 12], [5, 19, 24, 18, 10, 27], [26, 12, 18, 18, 3, 23]]
capacity = [70, 77, 106, 92]
upper_bounds = [3, 3, 4, 3, 3, 3]"
1337,rod,8,152,22,0,1,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09633183479309082}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 6, 10, 22, 6, 11, 16, 8]"
1338,sub,8,5950393,595044,0,55546393,0,"{'ok': True, 'value': 5950393, 'stdout': '5950393\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09267449378967285}",1,Compute: 62435319 - 56484926
1339,sub,32,2624307936262550419734996137999,355405791024773,0,2624307936362549420835000613800,0,"{'ok': True, 'value': 2624307936262550419734996137999, 'stdout': '2624307936262550419734996137999\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08802008628845215}",1,Compute: 38699059795962203445903357162772 - 36074751859699653026168361024773
1340,mul{'ok': True, 'value': 5015974143293776619623118517561362842298210794475875695801666099, 'stdout': '5015974143293776619623118517561362842298210794475875695801666099\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09824800491333008}",1,Compute: 52328516935049408688164502909373 * 95855461554923208087175398937263
1341,mul{'ok': True, 'value': 19993864561209211030762473735754, 'stdout': '19993864561209211030762473735754\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09367704391479492}",1,Compute: 4892155386266879 * 4086923448371126
1342,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11799454689025879}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""cca"""
1343,mul,16,23807844692894708685887113355890,130,0,238345494560696654468888390,0,"{'ok': True, 'value': 23807844692894708685887113355890, 'stdout': '23807844692894708685887113355890\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08780550956726074}",1,Compute: 4346493012967910 * 5477483714310179
1344,add,2,111,111,1,111,1,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10556459426879883}",1,Compute: 22 + 89
1345,ilp_partition,2,2,0,0,11,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10514974594116211}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 3, 3]"
1346,ilp_assign,8,43,65,0,46,0,"{'ok': True, 'value': 43, 'stdout': '43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41063499450683594}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 6, 7, 7, 18, 12, 3], [17, 8, 22, 22, 9, 23, 7], [17, 7, 9, 3, 7, 20, 23], [23, 16, 8, 3, 19, 12, 1], [19, 10, 22, 6, 7, 1, 18], [21, 23, 15, 24, 23, 20, 21], [17, 12, 20, 8, 13, 24, 5]]"
1347,add,16,8015073617684529,8314113618484529,0,8015073617684532,0,"{'ok': True, 'value': 8015073617684529, 'stdout': '8015073617684529\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08784103393554688}",1,Compute: 1685282290761242 + 6329791326923287
1348,ilp_assign,4,12,18,0,18,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42073488235473633}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 7, 5, 8], [1, 3, 6, 3], [8, 4, 4, 2], [3, 8, 7, 2]]"
1349,rod,2,12,6,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_njmq59cz/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_njmq59cz/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09770679473876953}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 1]"
1350,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09310197830200195}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""ba"""
1351,sub,2,37,37,1,37,1,"{'ok': True, 'value': 37, 'stdout': '37\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834207534790039}",1,Compute: 88 - 51
1352,ilp_assign,4,19,28,0,34,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4036593437194824}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 9, 10, 11], [6, 7, 4, 7], [12, 1, 10, 12], [4, 10, 1, 8]]"
1353,ilp_partition,2,0,0,1,20,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0832371711730957}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 6, 6]"
1354,sub,8,45656790,45556790,0,45656790,1,"{'ok': True, 'value': 45656790, 'stdout': '45656790\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10308647155761719}",1,Compute: 89100512 - 43443722
1355,mul,4,59320612,240,0,59343652,0,"{'ok': True, 'value': 59320612, 'stdout': '59320612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09806108474731445}",1,Compute: 9217 * 6436
1356,rod,16,480,65,0,64,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08767366409301758}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 45, 11, 27, 41, 17, 6, 39, 37, 19, 9, 9, 11, 25, 3, 27]"
1357,knap,8,108,105,0,0,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0871739387512207}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 6, 15, 7, 9, 14, 14, 16]
V = [4, 22, 32, 22, 4, 21, 32, 24]
C = 47"
1358,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10324454307556152}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adddadcacadccaadbcdcbddabcbcdabd""
T = ""bdbbadcdbdadcdbcbbdabdcbaccdbbc"""
1359,mul,16,71448496595636471954743332298752,8500939551076643,0,71342229574209556555450976,0,"{'ok': True, 'value': 71448496595636471954743332298752, 'stdout': '71448496595636471954743332298752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1083686351776123}",1,Compute: 8404776456337408 * 8500939551076644
1360,mul,2,2542,31,0,2542,1,"{'ok': True, 'value': 2542, 'stdout': '2542\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09251594543457031}",1,Compute: 82 * 31
1361,add,8,154935579,154935579,1,154935589,0,"{'ok': True, 'value': 154935579, 'stdout': '154935579\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10013771057128906}",1,Compute: 76095061 + 78840518
1362,knap,4,24,22,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1014091968536377}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 6, 4]
V = [13, 7, 11, 6]
C = 8"
1363,lcs,4,2,3,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0842428207397461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacb""
T = ""cbabc"""
1364,ilp_prod,4,30,70,0,24,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/524d6429f6224bceb2c54a673958f3b9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/524d6429f6224bceb2c54a673958f3b9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17066121101379395}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7, 5]
consumption (rows=resources) = [[2, 2, 4], [3, 1, 3], [4, 3, 2]]
capacity = [8, 9, 15]
upper_bounds = [3, 4, 3]"
1365,rod,4,40,40,1,9,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09017825126647949}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 4, 9, 1]"
1366,ilp_prod,2,18,21,0,18,1,"{'ok': True, 'value': 9, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/dab757b380d940e5a72c42bb3a26847e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/dab757b380d940e5a72c42bb3a26847e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n9.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16428017616271973}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[3, 2], [1, 3]]
capacity = [10, 8]
upper_bounds = [3, 3]"
1367,ilp_assign,8,29,46,0,46,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40073180198669434}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 12, 21, 20, 9, 9, 14], [15, 15, 14, 14, 23, 14, 9], [4, 5, 18, 17, 18, 20, 19], [14, 23, 1, 11, 6, 13, 24], [23, 17, 23, 10, 2, 23, 11], [22, 24, 1, 1, 1, 8, 12], [7, 3, 7, 2, 7, 21, 20]]"
1368,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08872175216674805}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""dc"""
1369,ilp_partition,16,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21242022514343262}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 42, 31, 16, 9, 48, 40, 23, 2, 22, 29, 48, 15, 32, 16, 47]"
1370,add,32,158482230127901008769253222363170,,0,158482230127901004769255222363170,0,"{'ok': True, 'value': 158482230127901008769253222363170, 'stdout': '158482230127901008769253222363170\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09770441055297852}",1,Compute: 61051280886629465923421899293455 + 97430949241271542845831323069715
1371,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1157069206237793}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [56, 71, 24, 71, 85, 23, 90, 85, 36, 54, 96, 23, 83, 79, 50, 11, 55, 67, 94, 96, 6, 59, 91, 91]"
1372,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08814644813537598}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 14, 22, 19, 7, 16, 19, 3]"
1373,lcs,32,17,26,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09363079071044922}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbaddbbdabaabaadddababbdcbbdddbc""
T = ""ccddccbdcbbcaadadbdacddadadacdb"""
1374,rod,32,672,715,0,1,0,"{'ok': True, 'value': 672, 'stdout': '672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09692740440368652}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [8, 22, 25, 84, 19, 6, 26, 80, 76, 46, 75, 67, 41, 25, 91, 10, 13, 2, 17, 15, 69, 87, 13, 16, 55, 62, 25, 69, 89, 68, 16, 19]"
1375,lcs,4,2,3,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09866666793823242}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badc""
T = ""cdbbc"""
1376,knap,2,9,14,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10001325607299805}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 2]
V = [6, 2, 9]
C = 6"
1377,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08606266975402832}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdcaccd""
T = ""aabbcdbaa"""
1378,ilp_assign,32,159,124,0,208,0,"{'ok': True, 'value': 159, 'stdout': '159\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41103625297546387}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[75, 45, 27, 57, 94, 53, 89], [90, 2, 74, 36, 57, 3, 33], [88, 17, 57, 38, 90, 50, 71], [58, 90, 85, 66, 14, 85, 50], [33, 52, 45, 60, 47, 48, 62], [46, 67, 17, 74, 45, 47, 94], [42, 15, 75, 34, 19, 20, 18]]"
1379,ilp_prod,32,252,"The solution to the problem is to maximize the total profit while ensuring that the consumption of each resource does not exceed its capacity. The exact solution would require solving the linear programming problem, which is beyond the scope of this response.",0,252,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u46wuhrs/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_u46wuhrs/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17228436470031738}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 84, 17, 18, 84, 19]
consumption (rows=resources) = [[16, 19, 19, 17, 29, 22], [24, 15, 6, 17, 21, 20], [22, 1, 4, 21, 15, 30], [30, 19, 19, 7, 21, 30]]
capacity = [69, 104, 90, 67]
upper_bounds = [3, 3, 3, 4, 3, 3]"
1380,ilp_prod,8,42,60,0,2,0,"{'ok': True, 'value': 63, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/87aeb28d603d49d98aa65ef816e0a544-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/87aeb28d603d49d98aa65ef816e0a544-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 71.4 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -63 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 4 cuts changed objective from -69 to -69 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 2.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 1.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -63, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -69 to -69\nProbing was tried 1 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                63.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n63.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17432332038879395}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 6, 12, 14]
consumption (rows=resources) = [[7, 5, 5, 2], [8, 4, 5, 8], [1, 4, 1, 2], [1, 6, 7, 3]]
capacity = [25, 17, 19, 19]
upper_bounds = [3, 3, 3, 3]"
1381,ilp_partition,8,1,1,1,11,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11060237884521484}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 13, 23, 13, 23, 14, 7, 11]"
1382,add{'ok': True, 'value': 121193135343713580394646271269987, 'stdout': '121193135343713580394646271269987\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09753656387329102}",1,Compute: 91216472677439967225019626174205 + 29976662666273613169626645095782
1383,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09486770629882812}",1,Compute: 52 - 31
1384,ilp_assign,32,140,,0,72,0,"{'ok': True, 'value': 140, 'stdout': '140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3874378204345703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 83, 56, 12, 89, 4, 12], [95, 53, 28, 29, 29, 89, 64], [61, 12, 59, 82, 34, 86, 53], [71, 49, 53, 29, 77, 19, 80], [75, 36, 79, 31, 25, 45, 46], [57, 83, 31, 85, 21, 27, 96], [27, 10, 1, 36, 27, 4, 72]]"
1385,lcs,32,16,10,0,1,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10184907913208008}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abadabababbcbcbcbbabaccbadddcabc""
T = ""ccccbbbbddabacdacacddacabddbabdbb"""
1386,lcs,8,2,4,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0879209041595459}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babaacab""
T = ""dccccda"""
1387,ilp_prod,32,260,The solution to the problem is the maximum profit that can be obtained while satisfying the resource constraints.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_leiev1bv/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_leiev1bv/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16770029067993164}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 25, 66, 26, 56, 36]
consumption (rows=resources) = [[15, 26, 8, 24, 17, 31], [19, 30, 8, 5, 26, 14], [17, 29, 30, 18, 25, 5], [13, 20, 27, 4, 26, 12]]
capacity = [91, 77, 114, 98]
upper_bounds = [4, 3, 3, 3, 3, 3]"
1388,lcs,8,4,5,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09826517105102539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadcbcda""
T = ""ccccacadb"""
1389,add,32,162662784532163100738762565240173,162662784532163100738762565240173,1,162662784532163100738763565240173,0,"{'ok': True, 'value': 162662784532163100738762565240173, 'stdout': '162662784532163100738762565240173\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09466791152954102}",1,Compute: 87963353408913213698691288984590 + 74699431123249887040071276255583
1390,mul,2,5546,56,0,5586,0,"{'ok': True, 'value': 5546, 'stdout': '5546\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09740710258483887}",1,Compute: 59 * 94
1391,add,2,138,138,1,138,1,"{'ok': True, 'value': 138, 'stdout': '138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08137965202331543}",1,Compute: 50 + 88
1392,mul,32,8775367645159267182006903980682984812293450320158732656096136947,819328035623518069977039160666852627,0,883403204863455544486995364327656844666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 8775367645159267182006903980682984812293450320158732656096136947, 'stdout': '8775367645159267182006903980682984812293450320158732656096136947\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09058475494384766}",1,Compute: 93280356235180699770391606668553 * 94075194385349442013544702793499
1393,ilp_partition,2,2,0,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10415410995483398}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 4, 1]"
1394,knap,16,314,130,0,0,0,"{'ok': True, 'value': 314, 'stdout': '314\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08519816398620605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 13, 26, 1, 7, 18, 31, 27, 19, 16, 11, 10, 3, 24, 24, 20]
V = [33, 9, 2, 41, 15, 5, 8, 28, 17, 29, 52, 11, 35, 19, 53, 5]
C = 130"
1395,ilp_prod,4,47,54,0,60,0,"{'ok': True, 'value': 30, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/280729158313469581da5b954faf4f51-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/280729158313469581da5b954faf4f51-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 30 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -30 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                30.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n30.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17384099960327148}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 12, 11]
consumption (rows=resources) = [[3, 2, 4], [1, 4, 2], [3, 3, 3]]
capacity = [15, 15, 12]
upper_bounds = [4, 3, 3]"
1396,sub,8,53089009,53089010,0,53088989,0,"{'ok': True, 'value': 53089009, 'stdout': '53089009\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09743022918701172}",1,Compute: 77125522 - 24036513
1397,mul,32,4307169759971018609187612092362744673028108772851350002459017480,4269171458404294992092858852893246556423161848739802042160,0,433336443686644444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 4307169759971018609187612092362744673028108772851350002459017480, 'stdout': '4307169759971018609187612092362744673028108772851350002459017480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09446334838867188}",1,Compute: 88479536460107374852321446327331 * 48679840924720319431669960501080
1398,knap,32,1683,1043,0,55,0,"{'ok': True, 'value': 1683, 'stdout': '1683\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10106134414672852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 46, 11, 21, 23, 50, 14, 53, 59, 19, 1, 23, 8, 55, 29, 61, 12, 35, 47, 6, 14, 30, 14, 27, 41, 33, 18, 62, 6, 9, 17, 17]
V = [101, 16, 42, 125, 117, 36, 121, 79, 55, 114, 18, 45, 59, 111, 14, 72, 40, 55, 57, 66, 64, 105, 22, 41, 35, 68, 48, 96, 49, 74, 118, 78]
C = 443"
1399,ilp_assign,16,65,105,0,105,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3818962574005127}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 37, 42, 46, 3, 9, 24], [5, 23, 13, 33, 20, 12, 42], [44, 7, 47, 21, 11, 38, 10], [32, 39, 38, 41, 48, 10, 17], [30, 19, 39, 30, 27, 46, 12], [27, 39, 26, 13, 6, 6, 35], [40, 12, 44, 2, 25, 17, 16]]"
1400,ilp_partition,16,1,1,1,43,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20385241508483887}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [34, 23, 32, 7, 42, 14, 43, 20, 40, 20, 13, 29, 33, 3, 3, 23]"
1401,ilp_partition,32,0,1,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0406606197357178}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [34, 22, 41, 59, 76, 47, 14, 94, 60, 47, 81, 21, 65, 17, 41, 59, 32, 49, 39, 72, 29, 6, 89, 56]"
1402,add,2,132,132,1,132,1,"{'ok': True, 'value': 132, 'stdout': '132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15543675422668457}",1,Compute: 80 + 52
1403,add,4,17604,17604,1,17604,1,"{'ok': True, 'value': 17604, 'stdout': '17604\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10958480834960938}",1,Compute: 8478 + 9126
1404,add,32,82735976987565689095689496002239,82735976987565689095689496002232,0,82735977007565689095690535992249,0,"{'ok': True, 'value': 82735976987565689095689496002239, 'stdout': '82735976987565689095689496002239\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09042668342590332}",1,Compute: 47023222752242752945728668760362 + 35712754235322936149960827241877
1405,ilp_assign,16,67,105,0,1,0,"{'ok': True, 'value': 67, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/319eaee06d12480aae16a49082c02e01-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/319eaee06d12480aae16a49082c02e01-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 67 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 67\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 67 - took 0.00 seconds\nCbc0012I Integer solution of 67 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 67, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 67 to 67\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                67.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 67.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1774604320526123}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 45, 25, 10, 24, 34, 36], [45, 47, 47, 35, 4, 18, 45], [43, 5, 23, 29, 34, 5, 46], [39, 30, 16, 22, 48, 16, 27], [48, 26, 18, 8, 21, 38, 30], [24, 41, 29, 36, 39, 42, 16], [40, 2, 28, 17, 30, 24, 26]]"
1406,ilp_assign,32,128,187,0,58,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38776707649230957}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[36, 80, 34, 54, 24, 62, 15], [13, 4, 10, 29, 34, 16, 39], [80, 5, 28, 11, 25, 89, 70], [72, 6, 81, 14, 41, 72, 60], [18, 32, 72, 34, 66, 77, 50], [79, 19, 60, 64, 44, 75, 51], [58, 63, 62, 27, 33, 27, 94]]"
1407,ilp_prod,32,393,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are that the total consumption of each resource must not exceed its capacity and that the quantities produced are non-negative. The upper bounds on the number of products that can be produced are given by upper_bounds. The problem is then solved using a linear programming solver, and the maximum profit is the value of the objective function after solving the problem.",0,The code will print the maximum profit that can be achieved given the resource constraints.,0,"{'ok': True, 'value': 174, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6e098e148ad44c71b192dc7629783d61-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6e098e148ad44c71b192dc7629783d61-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 200 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -174 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                174.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n174.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1716916561126709}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [58, 47, 84, 36, 68, 3]
consumption (rows=resources) = [[29, 11, 16, 19, 8, 14], [23, 20, 8, 28, 1, 25], [12, 8, 22, 4, 20, 25], [29, 22, 2, 27, 8, 8]]
capacity = [100, 113, 93, 103]
upper_bounds = [3, 4, 4, 3, 4, 3]"
1408,ilp_partition,16,1,1,1,21,0,"{'ok': True, 'value': 345, 'stdout': '345\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08460378646850586}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 46, 18, 46, 11, 19, 18, 34, 14, 19, 36, 13, 32, 18, 8, 8]"
1409,add,32,85076451935090143315896430888109,51011101010106512198047,0,85076451935090143315896430888109,1,"{'ok': True, 'value': 85076451935090143315896430888109, 'stdout': '85076451935090143315896430888109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09099125862121582}",1,Compute: 20931334547547834595864497706299 + 64145117387542308720031933181810
1410,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09434962272644043}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 2, 1, 5]"
1411,ilp_prod,4,26,33,0,21,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6514e5493eab42d2ba8ddbf542a372e5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6514e5493eab42d2ba8ddbf542a372e5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 31 RHS\nAt line 36 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16849255561828613}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6, 12]
consumption (rows=resources) = [[1, 2, 4], [3, 3, 3], [3, 1, 1]]
capacity = [8, 10, 12]
upper_bounds = [3, 3, 3]"
1412,sub,16,4761878871871765,4761889871871765,0,4761879871871765,0,"{'ok': True, 'value': 4761878871871765, 'stdout': '4761878871871765\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09762191772460938}",1,Compute: 9400046184431083 - 4638167312559318
1413,mul,16,12990889890204926789645503038314,,0,13000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 12990889890204926789645503038314, 'stdout': '12990889890204926789645503038314\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10089254379272461}",1,Compute: 6114415828621483 * 2124633040068158
1414,sub,2,6,88,0,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09549403190612793}",1,Compute: 94 - 88
1415,add,2,116,116,1,116,1,"{'ok': True, 'value': 116, 'stdout': '116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09777379035949707}",1,Compute: 19 + 97
1416,knap,32,1624,647,0,38,0,"{'ok': True, 'value': 1624, 'stdout': '1624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11029744148254395}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [46, 48, 19, 34, 17, 52, 42, 57, 59, 56, 34, 6, 58, 45, 7, 38, 59, 55, 14, 6, 15, 62, 45, 46, 37, 49, 49, 38, 50, 31, 59, 62]
V = [18, 61, 121, 6, 110, 89, 73, 84, 34, 57, 72, 84, 42, 8, 65, 4, 101, 112, 91, 16, 74, 89, 128, 74, 29, 39, 123, 12, 52, 25, 118, 5]
C = 647"
1417,rod,4,18,12,0,12,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08843803405761719}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 9, 1, 12]"
1418,add,2,72,72,1,72,1,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11188721656799316}",1,Compute: 47 + 25
1419,sub,2,17,17,1,17,1,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09138751029968262}",1,Compute: 77 - 60
1420,mul,4,19090031,385,0,18819391,0,"{'ok': True, 'value': 19090031, 'stdout': '19090031\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09599184989929199}",1,Compute: 6491 * 2941
1421,ilp_partition,2,2,1,0,6,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09940767288208008}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 4, 1]"
1422,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10890030860900879}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 23, 13, 22, 1, 16, 18, 10]"
1423,mul,16,39192352466424892213787842193046,4,0,3909188371898388484556665554,0,"{'ok': True, 'value': 39192352466424892213787842193046, 'stdout': '39192352466424892213787842193046\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09307456016540527}",1,Compute: 6486128671395519 * 6042487661286634
1424,knap,4,15,14,0,0,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09281039237976074}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 5, 1, 4]
V = [5, 9, 2, 13]
C = 8"
1425,knap,2,9,14,0,-1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09645652770996094}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 4]
V = [5, 2, 9]
C = 4"
1426,knap,16,370,146,0,0,0,"{'ok': True, 'value': 370, 'stdout': '370\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09840822219848633}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 30, 4, 24, 20, 30, 16, 23, 25, 21, 31, 5, 16, 5, 30, 3]
V = [25, 34, 13, 51, 45, 52, 38, 48, 14, 5, 12, 29, 64, 1, 54, 27]
C = 146"
1427,sub,32,30249032024847387653422850026858,30248742024847387653422850026868,0,30248742024847387653422850026858,0,"{'ok': True, 'value': 30249032024847387653422850026858, 'stdout': '30249032024847387653422850026858\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09731101989746094}",1,Compute: 58574264901910229278241079952372 - 28325232877062841624818229925514
1428,mul,2,2880,2880,1,2880,1,"{'ok': True, 'value': 2880, 'stdout': '2880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10532712936401367}",1,Compute: 96 * 30
1429,knap,2,19,14,0,9,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09633231163024902}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 3]
V = [9, 10, 5]
C = 3"
1430,mul,2,3717,72,0,3717,1,"{'ok': True, 'value': 3717, 'stdout': '3717\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09516263008117676}",1,Compute: 59 * 63
1431,rod,32,2688,1050,0,236,0,"{'ok': True, 'value': 2688, 'stdout': '2688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10060405731201172}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [84, 68, 72, 89, 75, 31, 71, 26, 67, 82, 79, 85, 85, 8, 31, 1, 77, 14, 37, 66, 24, 86, 16, 91, 9, 11, 25, 32, 35, 61, 89, 51]"
1432,lcs,4,2,3,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0903635025024414}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbd""
T = ""cdbca"""
1433,knap,4,30,27,0,0,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09112787246704102}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 3, 3]
V = [16, 11, 9, 14]
C = 7"
1434,knap,2,14,12,0,8,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08114147186279297}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 4]
V = [8, 6, 4]
C = 3"
1435,knap,2,10,16,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08212924003601074}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 5]
V = [6, 2, 10]
C = 7"
1436,rod,16,320,80,0,64,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09143996238708496}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [7, 40, 11, 36, 32, 18, 14, 42, 24, 40, 48, 8, 37, 28, 3, 8]"
1437,mul,2,1274,1204,0,1204,0,"{'ok': True, 'value': 1274, 'stdout': '1274\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09136605262756348}",1,Compute: 26 * 49
1438,ilp_prod,2,16,24,0,7,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d7f56363cac541c98d9d4fcf1183c99f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d7f56363cac541c98d9d4fcf1183c99f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9.33333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 8.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21393609046936035}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8]
consumption (rows=resources) = [[3, 3], [3, 3]]
capacity = [8, 7]
upper_bounds = [3, 3]"
1439,knap,2,8,8,1,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09550619125366211}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 1]
V = [3, 2, 5]
C = 4"
1440,ilp_partition,16,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3153238296508789}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 18, 33, 24, 2, 46, 45, 9, 14, 19, 4, 17, 23, 23, 19, 46]"
1441,add,16,14506580772539175,2359719135,0,14506580772549175,0,"{'ok': True, 'value': 14506580772539175, 'stdout': '14506580772539175\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0924079418182373}",1,Compute: 6994186828995460 + 7512393943543715
1442,knap,16,388,138,0,0,0,"{'ok': True, 'value': 388, 'stdout': '388\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0930330753326416}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 3, 18, 7, 5, 15, 29, 9, 25, 13, 24, 30, 17, 23, 9, 32]
V = [22, 37, 20, 3, 36, 49, 17, 5, 50, 51, 3, 25, 43, 45, 50, 50]
C = 138"
1443,mul,16,33854429399834604170166077758536,331457681355301849696855664,0,3413646202565913455846665948,0,"{'ok': True, 'value': 33854429399834604170166077758536, 'stdout': '33854429399834604170166077758536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09043025970458984}",1,Compute: 3590897846645154 * 9427845303776484
1444,add,32,74383048443898639631714597201076,64,0,184655061229070139519084815836756,0,"{'ok': True, 'value': 74383048443898639631714597201076, 'stdout': '74383048443898639631714597201076\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0826716423034668}",1,Compute: 62130604801112917426229021409368 + 12252443642785722205485575791708
1445,rod,32,2784,87,0,265,0,"{'ok': True, 'value': 2784, 'stdout': '2784\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1224677562713623}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [87, 64, 24, 40, 46, 13, 6, 38, 87, 27, 8, 39, 1, 56, 58, 77, 6, 2, 88, 70, 32, 23, 45, 60, 44, 85, 22, 50, 21, 58, 11, 6]"
1446,rod,32,1248,1050,0,6,0,"{'ok': True, 'value': 1248, 'stdout': '1248\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09515643119812012}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [39, 69, 37, 34, 20, 9, 90, 25, 73, 94, 22, 93, 36, 29, 44, 28, 23, 24, 95, 5, 33, 95, 84, 47, 21, 22, 33, 35, 23, 72, 38, 4]"
1447,knap,4,6,10,0,0,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09309744834899902}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 8, 2, 3]
V = [3, 1, 3, 1]
C = 10"
1448,mul,4,25440320,2781880,0,2573840,0,"{'ok': True, 'value': 25440320, 'stdout': '25440320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09960150718688965}",1,Compute: 6848 * 3715
1449,rod,4,11,6,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lrrlij7l/main.py"", line 22, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_lrrlij7l/main.py"", line 10, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11590719223022461}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 4, 10, 2]"
1450,ilp_assign,4,8,29,0,14,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.377699613571167}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 12, 12, 2], [12, 12, 2, 10], [3, 3, 10, 4], [11, 6, 6, 2]]"
1451,lcs,16,9,5,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1102302074432373}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaadcbaadddccbb""
T = ""abbcacddbabdacdcb"""
1452,add,16,5634506988167863,5634507008167863,0,5634507008167863,0,"{'ok': True, 'value': 5634506988167863, 'stdout': '5634506988167863\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10736274719238281}",1,Compute: 1608732040851368 + 4025774947316495
1453,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09776473045349121}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""cb"""
1454,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09969186782836914}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abab""
T = ""baadd"""
1455,add,16,14222444067135404,39000000000000001,0,14222444067135394,0,"{'ok': True, 'value': 14222444067135404, 'stdout': '14222444067135404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08739757537841797}",1,Compute: 4852487637759166 + 9369956429376238
1456,add,4,9401,9401,1,9401,1,"{'ok': True, 'value': 9401, 'stdout': '9401\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09929919242858887}",1,Compute: 7351 + 2050
1457,lcs,16,8,6,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10019850730895996}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcacccdddadaabd""
T = ""dcdccadcbdcdbba"""
1458,knap,16,391,156,0,0,0,"{'ok': True, 'value': 391, 'stdout': '391\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09170913696289062}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 20, 15, 14, 10, 12, 7, 32, 22, 27, 24, 23, 24, 31, 30, 20]
V = [48, 5, 54, 4, 6, 42, 28, 17, 53, 51, 20, 51, 39, 20, 18, 25]
C = 156"
1459,sub,4,5799,1723,0,5799,1,"{'ok': True, 'value': 5799, 'stdout': '5799\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08732295036315918}",1,Compute: 7522 - 1723
1460,knap,2,9,9,1,1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10219764709472656}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 1]
V = [6, 6, 3]
C = 2"
1461,ilp_prod,2,20,28,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c00bf7ae2e3a441b9d6adb790478f465-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c00bf7ae2e3a441b9d6adb790478f465-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2054290771484375}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[2, 2], [3, 2]]
capacity = [7, 8]
upper_bounds = [3, 3]"
1462,knap,32,1646,1043,0,11,0,"{'ok': True, 'value': 1646, 'stdout': '1646\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09569072723388672}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [39, 41, 51, 11, 43, 50, 30, 20, 16, 63, 42, 15, 21, 24, 32, 11, 29, 45, 24, 11, 45, 33, 43, 44, 6, 24, 10, 59, 1, 4, 33, 44]
V = [21, 41, 12, 105, 123, 45, 59, 14, 125, 54, 96, 58, 108, 67, 4, 64, 39, 40, 21, 2, 78, 49, 65, 67, 85, 96, 100, 81, 72, 70, 111, 83]
C = 482"
1463,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08850479125976562}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdbccbddabcbcdc""
T = ""addacbabcbbcacb"""
1464,rod,4,24,24,1,11,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10716891288757324}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 10, 11, 3]"
1465,ilp_partition,8,2,1,0,6,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09238576889038086}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 6, 22, 10, 8, 18, 4, 22]"
1466,ilp_prod,16,170,166,0,135,0,"{'ok': True, 'value': 60, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c3050617177c4ea0bd310e04c463e00a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c3050617177c4ea0bd310e04c463e00a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 74 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -60 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                60.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n60.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1660616397857666}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 46, 45, 25, 11, 47]
consumption (rows=resources) = [[15, 11, 11, 4, 16, 5], [5, 10, 10, 13, 6, 7], [7, 14, 11, 5, 2, 1], [1, 1, 13, 14, 8, 15]]
capacity = [37, 33, 58, 42]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1467,ilp_partition,16,0,10,0,37,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22178387641906738}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 34, 27, 39, 37, 41, 27, 12, 41, 9, 21, 27, 5, 14, 45, 11]"
1468,rod,4,44,8,0,10,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08490610122680664}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 3, 10, 8]"
1469,mul,8,4758587592573696,1144800000,0,4730384385963136,0,"{'ok': True, 'value': 4758587592573696, 'stdout': '4758587592573696\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0938267707824707}",1,Compute: 91831488 * 51818692
1470,add,4,4363,4363,1,4363,1,"{'ok': True, 'value': 4363, 'stdout': '4363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09448647499084473}",1,Compute: 3049 + 1314
1471,ilp_partition,4,7,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ljjxe0td/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_ljjxe0td/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09524226188659668}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 11, 1]"
1472,ilp_partition,4,4,1,0,929,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09734320640563965}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 9, 12, 1]"
1473,rod,8,88,1,0,1,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09525728225708008}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 22, 24, 4, 22, 4, 14, 7]"
1474,mul,8,3115289528428176,,0,3141593050322992,0,"{'ok': True, 'value': 3115289528428176, 'stdout': '3115289528428176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09602022171020508}",1,Compute: 31884848 * 97704387
1475,ilp_assign,32,125,105,0,1,0,"{'ok': True, 'value': 125, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3c3f53880ae34e509b83144d211da922-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/3c3f53880ae34e509b83144d211da922-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 125 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 125\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 125 - took 0.00 seconds\nCbc0012I Integer solution of 125 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 125, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 125 to 125\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                125.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 125.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18604159355163574}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 33, 94, 29, 59, 78, 57], [83, 93, 90, 28, 5, 1, 32], [41, 37, 33, 8, 37, 33, 19], [94, 81, 6, 38, 4, 82, 37], [85, 65, 70, 57, 53, 16, 54], [28, 47, 25, 39, 75, 9, 67], [21, 48, 23, 51, 14, 91, 70]]"
1476,ilp_partition,16,0,1,0,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21330809593200684}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 13, 11, 35, 1, 37, 28, 11, 32, 34, 21, 25, 44, 25, 2, 46]"
1477,rod,32,1376,2045,0,0,0,"{'ok': True, 'value': 1376, 'stdout': '1376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.100799560546875}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [43, 48, 72, 41, 96, 65, 9, 75, 64, 69, 79, 47, 67, 58, 6, 69, 88, 41, 90, 59, 59, 81, 31, 69, 4, 29, 30, 61, 68, 46, 28, 87]"
1478,knap,32,1636,1047,0,43,0,"{'ok': True, 'value': 1636, 'stdout': '1636\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09265542030334473}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [46, 13, 37, 44, 30, 24, 40, 16, 36, 8, 38, 49, 25, 25, 43, 47, 16, 45, 28, 28, 37, 19, 51, 47, 25, 24, 33, 4, 32, 43, 19, 14]
V = [39, 74, 7, 69, 57, 88, 92, 42, 89, 29, 91, 15, 91, 62, 107, 10, 26, 55, 115, 120, 76, 128, 24, 1, 49, 23, 14, 114, 100, 102, 83, 33]
C = 493"
1479,ilp_assign,32,118,0,0,155,0,"{'ok': True, 'value': 118, 'stdout': '118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3980746269226074}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[49, 82, 24, 27, 72, 65, 62], [82, 72, 62, 41, 54, 13, 53], [51, 88, 73, 7, 42, 42, 41], [70, 53, 23, 75, 37, 39, 2], [79, 63, 89, 40, 42, 22, 44], [3, 23, 8, 3, 5, 53, 18], [7, 58, 3, 59, 7, 18, 53]]"
1480,add,8,108796023,108795923,0,108796023,1,"{'ok': True, 'value': 108796023, 'stdout': '108796023\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09248971939086914}",1,Compute: 96958350 + 11837673
1481,knap,8,86,103,0,0,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08675646781921387}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 7, 11, 7, 5, 10, 6]
V = [28, 7, 17, 25, 14, 5, 24, 26]
C = 27"
1482,knap,16,396,141,0,16,0,"{'ok': True, 'value': 396, 'stdout': '396\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09844803810119629}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 21, 30, 2, 30, 20, 7, 1, 29, 26, 21, 18, 2, 26, 8, 26]
V = [46, 1, 57, 43, 11, 1, 35, 11, 63, 4, 29, 30, 47, 57, 7, 2]
C = 141"
1483,ilp_partition,4,7,0,0,1,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09720516204833984}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 12, 8, 1]"
1484,ilp_partition,2,2,1,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8a5z_ecu/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_8a5z_ecu/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09269356727600098}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 6, 1]"
1485,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10109567642211914}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [43, 84, 62, 69, 60, 25, 71, 61, 7, 40, 4, 66, 57, 70, 20, 10, 9, 13, 89, 16, 19, 11, 42, 14]"
1486,add,32,147286097221315766592009711959710,,0,147286097221315766602009712059710,0,"{'ok': True, 'value': 147286097221315766592009711959710, 'stdout': '147286097221315766592009711959710\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09899353981018066}",1,Compute: 55354572197084434114306027454289 + 91931525024231332477703684505421
1487,sub,4,1060,1773,0,1060,1,"{'ok': True, 'value': 1060, 'stdout': '1060\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09623980522155762}",1,Compute: 2833 - 1773
1488,rod,4,22,22,1,9,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09503626823425293}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 11, 2, 9]"
1489,mul,4,12668544,12646644,0,12486944,0,"{'ok': True, 'value': 12668544, 'stdout': '12668544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09624719619750977}",1,Compute: 8064 * 1571
1490,sub,4,770,5613,0,770,1,"{'ok': True, 'value': 770, 'stdout': '770\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08531308174133301}",1,Compute: 6383 - 5613
1491,knap,2,6,6,1,0,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09857797622680664}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 3]
V = [2, 6, 2]
C = 5"
1492,knap,16,389,136,0,0,0,"{'ok': True, 'value': 389, 'stdout': '389\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09189367294311523}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 21, 21, 20, 10, 19, 11, 23, 11, 15, 32, 2, 29, 11, 17, 26]
V = [4, 53, 10, 22, 51, 12, 15, 26, 54, 34, 19, 36, 64, 23, 52, 26]
C = 136"
1493,sub,32,2082951222018621069542640118783,111111111111111111111111111111111111111111111111111111111,0,20829532212018621069522640118783,0,"{'ok': True, 'value': 2082951222018621069542640118783, 'stdout': '2082951222018621069542640118783\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09770083427429199}",1,Compute: 17336853665349185367367308868195 - 15253902443330564297824668749412
1494,add,16,10294940866690565,10294940866690565,1,10294940866690565,1,"{'ok': True, 'value': 10294940866690565, 'stdout': '10294940866690565\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09464573860168457}",1,Compute: 6140491031977465 + 4154449834713100
1495,knap,8,104,110,0,0,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09537053108215332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 16, 11, 2, 5, 6, 12, 7]
V = [32, 25, 30, 15, 26, 16, 22, 15]
C = 35"
1496,add,2,103,103,1,103,1,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1152796745300293}",1,Compute: 81 + 22
1497,ilp_partition,8,1,1,1,3,0,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09571456909179688}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 14, 15, 15, 14, 22, 14, 3]"
1498,ilp_partition,2,3,0,0,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08755779266357422}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 6, 5]"
1499,ilp_assign,8,24,46,0,50,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3983170986175537}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 16, 4, 20, 8, 13, 22], [8, 9, 2, 1, 20, 12, 18], [19, 22, 9, 11, 1, 17, 20], [1, 19, 13, 8, 15, 22, 22], [16, 10, 5, 13, 1, 7, 8], [14, 22, 3, 3, 22, 10, 3], [11, 23, 5, 14, 4, 4, 7]]"
1500,ilp_partition,2,0,1,0,0,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09189939498901367}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 6, 5]"
1501,ilp_prod,8,182,85,0,60,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8abdbec834e0407193fa27b01e4ea21e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8abdbec834e0407193fa27b01e4ea21e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 50 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -48 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18445420265197754}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 15, 17, 16]
consumption (rows=resources) = [[4, 1, 5, 1], [8, 1, 7, 3], [1, 1, 5, 3], [2, 1, 5, 6]]
capacity = [16, 25, 28, 19]
upper_bounds = [3, 10, 3, 3]"
1502,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08367514610290527}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcdddcdcbcaadabadccbbcacdcbabad""
T = ""dbdbacaacabadddcbadcbbdcddbbbdab"""
1503,ilp_partition,16,1,1,1,33,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2024843692779541}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 25, 37, 28, 21, 36, 42, 7, 25, 33, 1, 1, 26, 10, 6, 5]"
1504,rod,4,36,36,1,4,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09648919105529785}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 2, 4, 3]"
1505,knap,32,1617,1085,0,32,0,"{'ok': True, 'value': 1617, 'stdout': '1617\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11166954040527344}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 1, 57, 33, 26, 28, 28, 28, 25, 53, 5, 34, 57, 39, 40, 32, 21, 7, 22, 36, 49, 61, 38, 44, 44, 36, 27, 5, 20, 42, 13, 55]
V = [43, 96, 5, 114, 44, 5, 99, 30, 89, 43, 89, 19, 76, 84, 32, 21, 105, 27, 126, 45, 36, 94, 23, 41, 94, 58, 17, 45, 106, 111, 79, 114]
C = 518"
1506,mul,32,3425822144497284388400245522926015064077687847610724288037216662,34597353763026302687455858104803,0,343364466443464364964446449920000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 3425822144497284388400245522926015064077687847610724288037216662, 'stdout': '3425822144497284388400245522926015064077687847610724288037216662\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10266542434692383}",1,Compute: 69196708062612605374911956809606 * 49508455538050032655815713279577
1507,rod,2,8,6,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09340262413024902}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
1508,ilp_partition,16,0,1,0,14,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21186327934265137}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 3, 43, 36, 14, 35, 9, 45, 13, 23, 46, 30, 30, 25, 32, 22]"
1509,ilp_partition,4,0,1,0,534,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08845734596252441}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 4, 10, 5]"
1510,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10514950752258301}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dc""
T = ""db"""
1511,lcs,4,3,2,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0968470573425293}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdb""
T = ""ddbb"""
1512,rod,16,328,86,0,65,0,"{'ok': True, 'value': 328, 'stdout': '328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09016609191894531}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [14, 41, 8, 14, 25, 30, 10, 31, 17, 45, 1, 2, 14, 10, 16, 40]"
1513,ilp_assign,2,9,9,1,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40477490425109863}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [6, 3]]"
1514,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09652018547058105}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbaa""
T = ""bbd"""
1515,knap,2,12,5,0,-1,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08553838729858398}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 3]
V = [2, 10, 3]
C = 3"
1516,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0957024097442627}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcbbccccbbabbabaccadcddbdaabcac""
T = ""bcbcacbddacdbbcdbbabbaaabbbdcacbb"""
1517,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09373617172241211}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcb""
T = ""dadac"""
1518,mul,8,2405108989856596,2338752466,0,24014394567676,0,"{'ok': True, 'value': 2405108989856596, 'stdout': '2405108989856596\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0903165340423584}",1,Compute: 48535876 * 49553221
1519,knap,16,437,1040,0,24,0,"{'ok': True, 'value': 437, 'stdout': '437\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08680462837219238}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 18, 32, 3, 32, 28, 20, 2, 17, 16, 24, 12, 25, 12, 29, 22]
V = [47, 47, 47, 47, 42, 20, 9, 1, 51, 4, 57, 30, 56, 50, 38, 51]
C = 152"
1520,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2088184356689453}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 33, 3, 18, 27, 1, 14, 10, 45, 3, 23, 19, 37, 33, 18, 15]"
1521,mul,4,41782208,147,0,419486688,0,"{'ok': True, 'value': 41782208, 'stdout': '41782208\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09658527374267578}",1,Compute: 7726 * 5408
1522,ilp_partition,8,1,1,1,2,0,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0887601375579834}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 20, 3, 13, 17, 18, 18, 2]"
1523,sub,2,48,48,1,48,1,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09772443771362305}",1,Compute: 72 - 24
1524,mul,4,22221083,5588,0,22233333,0,"{'ok': True, 'value': 22221083, 'stdout': '22221083\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09865927696228027}",1,Compute: 6659 * 3337
1525,mul,8,7236360356827536,7,0,7138344361957136,0,"{'ok': True, 'value': 7236360356827536, 'stdout': '7236360356827536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0990138053894043}",1,Compute: 82342056 * 87881706
1526,knap,8,85,110,0,0,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0954887866973877}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 10, 7, 14, 15, 12, 15, 5]
V = [31, 24, 5, 17, 14, 9, 19, 6]
C = 40"
1527,ilp_prod,8,75,105,0,5,0,"{'ok': True, 'value': 54, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7a718f9ab26144ea8b11a818c1356aad-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7a718f9ab26144ea8b11a818c1356aad-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 54 - 0.00 seconds\nCgl0004I processed model has 5 rows, 4 columns (4 integer (0 of which binary)) and 20 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -54 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -54, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -54 to -54\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                54.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n54.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16829872131347656}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 5, 12, 9]
consumption (rows=resources) = [[6, 7, 3, 4], [3, 8, 7, 4], [1, 7, 8, 3], [7, 2, 3, 3]]
capacity = [26, 21, 29, 27]
upper_bounds = [3, 3, 3, 5]"
1528,ilp_assign,2,5,4,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4108774662017822}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [2, 1]]"
1529,rod,4,36,36,1,9,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10292673110961914}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 9, 2, 2]"
1530,add,8,121861278,72414632,0,121861278,1,"{'ok': True, 'value': 121861278, 'stdout': '121861278\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09892725944519043}",1,Compute: 72414533 + 49446745
1531,add,4,10618,10618,1,10618,1,"{'ok': True, 'value': 10618, 'stdout': '10618\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08927512168884277}",1,Compute: 3755 + 6863
1532,mul,32,2913856993657826256080324998477626694793655522080264919356011890,287446422216368356449050002003330,0,29145084300640846844944464261203556098966666,0,"{'ok': True, 'value': 2913856993657826256080324998477626694793655522080264919356011890, 'stdout': '2913856993657826256080324998477626694793655522080264919356011890\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09261345863342285}",1,Compute: 41401494473747929031236361800533 * 70380478547832604780331621692330
1533,add,4,6333,6333,1,6333,1,"{'ok': True, 'value': 6333, 'stdout': '6333\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09014725685119629}",1,Compute: 2173 + 4160
1534,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09777641296386719}",1,Compute: 52 + 70
1535,ilp_assign,4,19,0,0,25,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.645801305770874}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 6, 5, 9], [5, 8, 9, 6], [7, 11, 6, 7], [5, 12, 1, 4]]"
1536,rod,8,184,46,0,2,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09632587432861328}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 23, 7, 15, 10, 19, 10, 10]"
1537,rod,8,96,25,0,39,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09771251678466797}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 23, 7, 8, 7, 11, 1, 20]"
1538,rod,16,200,46,0,65,0,"{'ok': True, 'value': 200, 'stdout': '200\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09981107711791992}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 25, 22, 6, 1, 45, 2, 9, 25, 19, 27, 13, 33, 29, 7, 6]"
1539,ilp_assign,4,17,18,0,28,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4102194309234619}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 6, 4, 6], [8, 3, 9, 12], [12, 1, 12, 8], [3, 1, 2, 9]]"
1540,ilp_partition,2,1,1,1,4,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11118364334106445}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 5, 3]"
1541,rod,32,2912,1055,0,1074,0,"{'ok': True, 'value': 2912, 'stdout': '2912\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09961366653442383}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [91, 78, 84, 89, 48, 11, 22, 70, 10, 36, 55, 51, 69, 33, 7, 92, 53, 79, 70, 41, 81, 40, 58, 93, 74, 81, 57, 18, 48, 88, 31, 42]"
1542,mul,32,2145727750735745444296327298628801686497422781752425195839451898,2,0,210340463221492864548228496401664064444666,0,"{'ok': True, 'value': 2145727750735745444296327298628801686497422781752425195839451898, 'stdout': '2145727750735745444296327298628801686497422781752425195839451898\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10674452781677246}",1,Compute: 47915944960241726179584165934223 * 44781079711903080977658652122726
1543,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10063552856445312}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
1544,ilp_assign,4,12,11,0,20,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40694379806518555}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2, 10, 11], [2, 5, 11, 5], [10, 6, 3, 1], [11, 8, 7, 7]]"
1545,ilp_partition,8,2,1,0,3,0,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09711790084838867}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 24, 22, 15, 16, 3, 9, 3]"
1546,knap,4,26,17,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10041522979736328}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 7, 3]
V = [10, 14, 13, 2]
C = 6"
1547,rod,4,22,22,1,1,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09374594688415527}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 11, 11, 8]"
1548,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08882784843444824}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""a"""
1549,sub,2,22,22,1,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10467314720153809}",1,Compute: 34 - 12
1550,mul,32,2703470219007469110529415434771528640502384525778347848994771390,7,0,272333343512085016204677335028282,0,"{'ok': True, 'value': 2703470219007469110529415434771528640502384525778347848994771390, 'stdout': '2703470219007469110529415434771528640502384525778347848994771390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09873151779174805}",1,Compute: 87777781170695005401559111676094 * 30799026620987708667380821901185
1551,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0899660587310791}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""bc"""
1552,ilp_partition,32,1,10,0,7,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20970368385314941}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 65, 10, 28, 80, 28, 37, 32, 55, 54, 17, 81, 50, 75, 29, 67, 63, 79, 5, 74, 11, 7, 48, 84]"
1553,add,16,5837844157869609,11100903358827103,0,5837844157869609,1,"{'ok': True, 'value': 5837844157869609, 'stdout': '5837844157869609\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08795547485351562}",1,Compute: 4271038611517061 + 1566805546352548
1554,ilp_assign,16,31,105,0,117,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40883564949035645}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 31, 47, 11, 1, 21, 22], [14, 2, 36, 27, 36, 36, 2], [2, 37, 34, 14, 14, 47, 4], [34, 25, 31, 47, 19, 4, 8], [32, 37, 3, 11, 8, 34, 34], [47, 30, 20, 3, 43, 25, 47], [23, 23, 25, 18, 25, 30, 16]]"
1555,sub,8,21886347,21886347,1,21886347,1,"{'ok': True, 'value': 21886347, 'stdout': '21886347\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09912443161010742}",1,Compute: 45983014 - 24096667
1556,ilp_assign,4,11,2,0,14,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40404295921325684}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 9, 2, 2], [7, 1, 1, 4], [6, 7, 4, 6], [7, 10, 2, 6]]"
1557,rod,32,2752,1054,0,1,0,"{'ok': True, 'value': 2752, 'stdout': '2752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09054040908813477}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [86, 57, 69, 67, 93, 66, 2, 82, 26, 68, 11, 6, 66, 28, 32, 77, 94, 26, 2, 43, 27, 32, 51, 44, 80, 43, 46, 12, 83, 42, 24, 42]"
1558,knap,4,26,16,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09543561935424805}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 7, 3, 2]
V = [4, 6, 16, 10]
C = 7"
1559,ilp_assign,8,33,58,0,42,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4042630195617676}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 3, 15, 5, 9, 4, 6], [12, 17, 23, 16, 19, 2, 18], [20, 6, 22, 23, 14, 21, 7], [9, 1, 21, 19, 12, 1, 22], [21, 11, 11, 4, 21, 7, 3], [18, 13, 2, 13, 23, 19, 10], [8, 5, 18, 4, 12, 18, 7]]"
1560,rod,32,1984,1050,0,674,0,"{'ok': True, 'value': 1984, 'stdout': '1984\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09460949897766113}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [62, 29, 43, 29, 47, 26, 52, 49, 19, 76, 49, 14, 53, 74, 15, 74, 90, 13, 20, 95, 5, 23, 61, 79, 67, 63, 46, 12, 81, 35, 47, 54]"
1561,sub,2,13,13,1,13,1,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09856986999511719}",1,Compute: 91 - 78
1562,mul,32,3687336658768170371164098600746479056608710608726011277401755452,36384366644664466644664466644664,0,370884046443456566968684326444644644464464446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446446,0,"{'ok': True, 'value': 3687336658768170371164098600746479056608710608726011277401755452, 'stdout': '3687336658768170371164098600746479056608710608726011277401755452\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10447001457214355}",1,Compute: 46989683560753076513971360468557 * 78471195789194958277178224968236
1563,mul,4,58761120,5986320,0,59839920,0,"{'ok': True, 'value': 58761120, 'stdout': '58761120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09333062171936035}",1,Compute: 7898 * 7440
1564,ilp_prod,16,103,160,0,150,0,"{'ok': True, 'value': 103, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6b8be3e4f88540e0bd4baadb7aa80b3e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6b8be3e4f88540e0bd4baadb7aa80b3e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 121.275 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -64 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -67 found by DiveCoefficient after 129 iterations and 0 nodes (0.01 seconds)\nCbc0031I 4 added rows had average density of 6\nCbc0013I At root node, 4 cuts changed objective from -121.275 to -112.86986 in 55 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 68 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -67 best solution, best possible -112.86986 (0.01 seconds)\nCbc0012I Integer solution of -103 found by rounding after 132 iterations and 1 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -103, took 181 iterations and 8 nodes (0.01 seconds)\nCbc0032I Strong branching done 26 times (39 iterations), fathomed 1 nodes and fixed 0 variables\nCbc0035I Maximum depth 2, 1 variables fixed on reduced cost\nCuts at root node changed objective from -121.275 to -112.87\nProbing was tried 55 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 72 times and created 90 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 55 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 55 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 55 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 55 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                103.00000000\nEnumerated nodes:               8\nTotal iterations:               181\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\nThe maximum profit is: 103.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18440818786621094}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 35, 24, 9, 16, 32]
consumption (rows=resources) = [[4, 1, 15, 1, 5, 16], [7, 3, 5, 14, 1, 6], [14, 12, 12, 11, 2, 8], [9, 5, 10, 6, 10, 10]]
capacity = [60, 64, 33, 33]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1565,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37523889541625977}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [2, 6]]"
1566,ilp_prod,8,48,108,0,17,0,"{'ok': True, 'value': 63, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cc3ef8f367194da9aa728c4b4ab0b06d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cc3ef8f367194da9aa728c4b4ab0b06d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 70.0385 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -62 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -63 found by DiveCoefficient after 7 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 4\nCbc0013I At root node, 4 cuts changed objective from -69.266667 to -63 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 6 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -63, took 7 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -69.2667 to -63\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                63.00000000\nEnumerated nodes:               0\nTotal iterations:               7\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n63.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1672227382659912}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 22, 16, 24]
consumption (rows=resources) = [[7, 5, 4, 7], [7, 7, 4, 8], [2, 1, 8, 1], [6, 6, 6, 8]]
capacity = [25, 32, 18, 17]
upper_bounds = [3, 3, 3, 3]"
1567,mul,4,21372234,189,0,21484934,0,"{'ok': True, 'value': 21372234, 'stdout': '21372234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09482645988464355}",1,Compute: 6683 * 3198
1568,ilp_assign,4,19,17,0,26,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42296576499938965}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 4, 2, 6], [3, 4, 4, 10], [9, 6, 11, 8], [6, 10, 11, 8]]"
1569,knap,2,8,10,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09055209159851074}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 5]
V = [3, 8, 7]
C = 5"
1570,ilp_prod,32,300,1034,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_t4p3p_1q/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_t4p3p_1q/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1643669605255127}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 93, 28, 60, 50, 54]
consumption (rows=resources) = [[29, 29, 25, 23, 17, 13], [29, 27, 23, 18, 20, 24], [16, 24, 10, 20, 26, 24], [26, 17, 9, 5, 22, 32]]
capacity = [100, 115, 94, 115]
upper_bounds = [3, 3, 4, 4, 3, 3]"
1571,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08829331398010254}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbaabddacdbdabdc""
T = ""ddaddaacbccdcbd"""
1572,sub,4,8530,8530,1,8530,1,"{'ok': True, 'value': 8530, 'stdout': '8530\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10259771347045898}",1,Compute: 9885 - 1355
1573,add,32,128042190610981713380542289417967,127042190611081713370542289417967,0,128042190610981713380542289417967,1,"{'ok': True, 'value': 128042190610981713380542289417967, 'stdout': '128042190610981713380542289417967\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09630489349365234}",1,Compute: 41826329144494836333367633042207 + 86215861466486877047174656375760
1574,sub,16,2112330086458408,2112330086458408,1,2132321086458408,0,"{'ok': True, 'value': 2112330086458408, 'stdout': '2112330086458408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09450006484985352}",1,Compute: 8976421155884260 - 6864091069425852
1575,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09897089004516602}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbcbbdcacdabbbbcaabaaadccabdbbc""
T = ""cacbababbbcbabdcbcbbcdbcabbccda"""
1576,ilp_prod,4,88,34,0,44,0,"{'ok': True, 'value': 40, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/566c03285a9d4785a6b4ec335fe337a6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/566c03285a9d4785a6b4ec335fe337a6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 40 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -40 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                40.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n40.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1711902618408203}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 11, 9]
consumption (rows=resources) = [[2, 1, 3], [4, 1, 3], [1, 1, 4]]
capacity = [11, 16, 8]
upper_bounds = [4, 8, 3]"
1577,ilp_prod,16,225,"The solution to this problem involves setting up a linear programming model and solving it. The exact solution would depend on the specific solver used and the values of the decision variables. However, the final answer should be the maximum profit that can be achieved while satisfying the resource constraints.",0,37,0,"{'ok': True, 'value': 225, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/13651f0d11904ed291dded5215976b93-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/13651f0d11904ed291dded5215976b93-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 258.932 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -225 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0031I 2 added rows had average density of 3\nCbc0013I At root node, 2 cuts changed objective from -258.9322 to -249.5 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -225, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -258.932 to -249.5\nProbing was tried 3 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                225.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n225.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17625880241394043}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 47, 3, 13, 9, 41]
consumption (rows=resources) = [[3, 10, 15, 13, 1, 5], [8, 7, 16, 14, 14, 9], [8, 1, 13, 13, 5, 11], [4, 8, 3, 7, 12, 14]]
capacity = [40, 43, 39, 37]
upper_bounds = [4, 4, 3, 3, 3, 3]"
1578,sub,8,39874597,39874597,1,39874597,1,"{'ok': True, 'value': 39874597, 'stdout': '39874597\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09720945358276367}",1,Compute: 80438522 - 40563925
1579,add,16,14610996389914697,146110063898146997,0,14610996390314697,0,"{'ok': True, 'value': 14610996389914697, 'stdout': '14610996389914697\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0981130599975586}",1,Compute: 7731256286640542 + 6879740103274155
1580,add,16,17966420061024012,10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,17966420050724012,0,"{'ok': True, 'value': 17966420061024012, 'stdout': '17966420061024012\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08600807189941406}",1,Compute: 8596927774307685 + 9369492286716327
1581,ilp_prod,8,60,105,0,5,0,"{'ok': True, 'value': 45, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2b5605259df94f5086443e7a6bd9a518-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2b5605259df94f5086443e7a6bd9a518-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 45 - 0.00 seconds\nCgl0004I processed model has 5 rows, 4 columns (4 integer (0 of which binary)) and 20 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -45 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -45, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -45 to -45\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                45.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n45.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16399645805358887}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 15, 14, 10]
consumption (rows=resources) = [[4, 4, 7, 3], [7, 5, 4, 3], [1, 6, 6, 1], [5, 4, 8, 3]]
capacity = [17, 21, 22, 27]
upper_bounds = [3, 3, 3, 5]"
1582,sub,4,5375,5375,1,5375,1,"{'ok': True, 'value': 5375, 'stdout': '5375\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09565353393554688}",1,Compute: 7505 - 2130
1583,knap,16,375,104,0,0,0,"{'ok': True, 'value': 375, 'stdout': '375\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0883188247680664}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 30, 13, 16, 27, 2, 12, 11, 17, 8, 2, 18, 25, 2, 1, 3]
V = [24, 29, 26, 8, 33, 63, 53, 3, 15, 46, 32, 21, 31, 10, 9, 58]
C = 98"
1584,lcs,16,8,6,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12449407577514648}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddabdbadcdacdac""
T = ""cabcbcdddcadabbaa"""
1585,lcs,4,4,3,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08257746696472168}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbd""
T = ""bdabd"""
1586,knap,2,4,7,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09218573570251465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 4]
V = [2, 2, 7]
C = 3"
1587,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09970903396606445}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacc""
T = ""accc"""
1588,mul,32,3070361202264574901292581343370697554017876817938031838415056586,2,0,304940633991912456088459644449666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 3070361202264574901292581343370697554017876817938031838415056586, 'stdout': '3070361202264574901292581343370697554017876817938031838415056586\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08144760131835938}",1,Compute: 33546986771639333644462379333434 * 91524202252950547106819633255529
1589,knap,16,381,144,0,0,0,"{'ok': True, 'value': 381, 'stdout': '381\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09169602394104004}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 11, 31, 1, 10, 22, 22, 28, 22, 30, 21, 22, 1, 13, 16, 25]
V = [22, 17, 51, 5, 7, 52, 33, 60, 31, 7, 53, 53, 57, 8, 50, 28]
C = 144"
1590,rod,32,1328,1050,0,704,0,"{'ok': True, 'value': 1328, 'stdout': '1328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09238219261169434}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [6, 83, 30, 60, 70, 10, 16, 76, 89, 91, 79, 91, 50, 36, 69, 12, 69, 75, 95, 27, 4, 83, 92, 48, 38, 73, 59, 79, 80, 19, 76, 45]"
1591,lcs,32,21,15,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09520649909973145}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caadbcdcadbadadcaacbdbadbccabbba""
T = ""acdbdcaccbcbdadadabbbdbcddcbdbb"""
1592,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08723330497741699}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 1]"
1593,add,2,133,133,1,133,1,"{'ok': True, 'value': 133, 'stdout': '133\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08707547187805176}",1,Compute: 50 + 83
1594,sub,8,19383653,19383653,1,19383653,1,"{'ok': True, 'value': 19383653, 'stdout': '19383653\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09489178657531738}",1,Compute: 44083250 - 24699597
1595,sub,2,39,39,1,39,1,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09592318534851074}",1,Compute: 60 - 21
1596,add,4,9236,8413,0,9236,1,"{'ok': True, 'value': 9236, 'stdout': '9236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09415173530578613}",1,Compute: 7381 + 1855
1597,sub,4,1392,1392,1,1392,1,"{'ok': True, 'value': 1392, 'stdout': '1392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0922091007232666}",1,Compute: 6454 - 5062
1598,knap,2,7,7,1,5,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08892345428466797}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 5]
V = [4, 3, 3]
C = 4"
1599,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4007406234741211}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 5], [4, 1]]"
1600,ilp_prod,8,168,100,0,60,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ccfe76fd781a4a369fdc696642291bb1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ccfe76fd781a4a369fdc696642291bb1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21.7143 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1606588363647461}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7, 24, 4]
consumption (rows=resources) = [[4, 2, 1, 4], [2, 2, 1, 4], [4, 3, 4, 6], [7, 7, 2, 6]]
capacity = [18, 26, 28, 19]
upper_bounds = [3, 3, 7, 3]"
1601,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20734477043151855}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [40, 18, 38, 13, 1, 38, 39, 42, 33, 5, 26, 26, 43, 35, 41, 32]"
1602,ilp_partition,8,1,1,1,19,0,"{'ok': True, 'value': 123, 'stdout': '123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08963942527770996}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 21, 19, 15, 19, 19, 15, 8]"
1603,sub,16,16315864228070,163158642282070,0,163158643323070,0,"{'ok': True, 'value': 16315864228070, 'stdout': '16315864228070\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08634471893310547}",1,Compute: 4012796114415253 - 3996480250187183
1604,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08748626708984375}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [38, 14, 40, 72, 83, 42, 16, 20, 34, 54, 41, 17, 59, 31, 63, 7, 32, 1, 43, 63, 35, 42, 13, 15]"
1605,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08737778663635254}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddda""
T = ""bdac"""
1606,rod,8,44,22,0,1,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10506749153137207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [1, 11, 16, 3, 18, 20, 13, 10]"
1607,rod,16,176,46,0,65,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08838534355163574}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [11, 2, 23, 25, 36, 10, 42, 14, 35, 41, 26, 13, 1, 7, 7, 46]"
1608,sub,32,43610326862778966619619875136858,21081931159124412927431250233205,0,43610326862778966619620100063142,0,"{'ok': True, 'value': 43610326862778966619619875136858, 'stdout': '43610326862778966619619875136858\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10786986351013184}",1,Compute: 64692258021903379547051125370063 - 21081931159124412927431250233205
1609,ilp_assign,16,44,115,0,110,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39415621757507324}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[41, 34, 3, 24, 6, 38, 39], [11, 6, 19, 39, 36, 29, 1], [34, 39, 7, 11, 42, 1, 14], [20, 7, 43, 21, 11, 23, 16], [3, 37, 48, 26, 43, 48, 45], [25, 7, 8, 25, 38, 34, 34], [7, 4, 34, 39, 34, 30, 45]]"
1610,ilp_assign,4,14,25,0,35,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40758275985717773}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 7, 12, 1], [1, 7, 9, 2], [5, 12, 1, 1], [8, 11, 7, 9]]"
1611,rod,8,136,22,0,25,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08666872978210449}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 4, 4, 18, 23, 3, 20, 3]"
1612,ilp_prod,16,144,160,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 28, 29, 4, 40, 10]
consumption (rows=resources) = [[3, 9, 9, 1, 5, 15], [10, 15, 1, 4, 5, 3], [7, 3, 2, 2, 4, 2], [8, 2, 15, 3, 15, 9]]
capacity = [38, 49, 42, 40]
upper_bounds = [4, 3, 3, 10, 3, 3]"
1613,ilp_assign,32,110,185,0,208,0,"{'ok': True, 'value': 110, 'stdout': '110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4264836311340332}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[89, 93, 86, 64, 75, 1, 95], [95, 29, 61, 62, 61, 89, 87], [8, 96, 18, 54, 9, 93, 87], [16, 39, 92, 78, 49, 8, 83], [72, 29, 8, 22, 40, 30, 36], [5, 38, 21, 54, 80, 28, 23], [15, 42, 85, 24, 42, 58, 63]]"
1614,ilp_assign,4,21,23,0,23,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3780059814453125}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 3, 2, 9], [10, 10, 8, 12], [6, 3, 2, 11], [6, 3, 5, 6]]"
1615,ilp_prod,2,24,13,0,21,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9e4f8feff9fa476e947922a162700edc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9e4f8feff9fa476e947922a162700edc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 21.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16292691230773926}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[2, 2], [1, 1]]
capacity = [6, 10]
upper_bounds = [3, 3]"
1616,sub,4,6413,6413,1,6413,1,"{'ok': True, 'value': 6413, 'stdout': '6413\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0994422435760498}",1,Compute: 9983 - 3570
1617,rod,8,160,53,0,1,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1104886531829834}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 19, 17, 3, 19, 20, 23, 19]"
1618,ilp_partition,8,1,1,1,0,0,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09211611747741699}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 14, 20, 14, 16, 7, 1, 11]"
1619,rod,8,128,0,0,1,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09214901924133301}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 4, 12, 14, 18, 6, 1, 14]"
1620,lcs,32,18,10,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1015021800994873}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdbddabcabdaadbcccaaacaddacbbad""
T = ""bdcddacacbadddbcbddddbbdadcbbca"""
1621,mul,16,22136748662594955413156597580812,22870000000000000000,0,22176362544444555756435544348948502,0,"{'ok': True, 'value': 22136748662594955413156597580812, 'stdout': '22136748662594955413156597580812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08864188194274902}",1,Compute: 9364076407908949 * 2364007692621788
1622,rod,32,768,1055,0,1,0,"{'ok': True, 'value': 768, 'stdout': '768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20026898384094238}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [7, 48, 4, 39, 48, 4, 44, 87, 21, 57, 89, 89, 51, 55, 92, 10, 67, 82, 26, 87, 82, 88, 33, 70, 57, 22, 7, 59, 42, 20, 90, 85]"
1623,knap,4,27,27,1,0,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09943556785583496}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 7, 4]
V = [15, 12, 6, 9]
C = 9"
1624,ilp_assign,4,25,25,1,24,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.404369592666626}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 3, 2, 1], [8, 9, 9, 9], [10, 10, 9, 12], [11, 7, 7, 6]]"
1625,ilp_prod,16,98,160,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_bu3twvtn/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_bu3twvtn/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1674957275390625}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 30, 9, 36, 38, 26]
consumption (rows=resources) = [[12, 11, 12, 13, 7, 5], [14, 15, 16, 15, 16, 11], [2, 6, 5, 5, 2, 15], [12, 14, 7, 8, 10, 11]]
capacity = [51, 41, 63, 64]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1626,sub,16,2711833891482135,2711833891482135,1,2711833891482135,1,"{'ok': True, 'value': 2711833891482135, 'stdout': '2711833891482135\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09960484504699707}",1,Compute: 6200584253140738 - 3488750361658603
1627,ilp_prod,2,35,27,0,15,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f3d06e46f3424140a94d5caaa682db35-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f3d06e46f3424140a94d5caaa682db35-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16684174537658691}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7]
consumption (rows=resources) = [[3, 1], [3, 2]]
capacity = [6, 10]
upper_bounds = [3, 5]"
1628,lcs,32,21,10,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10782456398010254}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcdcdbcbcbcddaabdbbabdbbcbccacd""
T = ""abddcdacbcddbcccdbccabdbdcbbdcbad"""
1629,ilp_prod,2,12,21,0,15,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3cf0e49b6968422e979062fe9b6687fa-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3cf0e49b6968422e979062fe9b6687fa-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 9.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16263818740844727}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 4]
consumption (rows=resources) = [[2, 1], [2, 3]]
capacity = [6, 9]
upper_bounds = [3, 3]"
1630,rod,32,778,1045,0,664,0,"{'ok': True, 'value': 778, 'stdout': '778\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09012174606323242}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [24, 45, 73, 73, 46, 35, 72, 29, 62, 95, 14, 62, 10, 61, 4, 96, 42, 93, 85, 41, 47, 59, 27, 84, 57, 91, 24, 4, 85, 62, 91, 6]"
1631,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0866398811340332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acacdabaddaddbda""
T = ""cdbcbddbabcadddd"""
1632,sub,16,3574524263548020,3574524263548020,1,3574524263548020,1,"{'ok': True, 'value': 3574524263548020, 'stdout': '3574524263548020\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09163284301757812}",1,Compute: 8778958062196060 - 5204433798648040
1633,ilp_partition,2,3,The answer will be the minimum difference between the two groups.,0,10,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09638142585754395}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 6, 1]"
1634,ilp_prod,2,26,26,1,18,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8b278ad93d0a44e993d84abb9483e801-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8b278ad93d0a44e993d84abb9483e801-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17853164672851562}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[1, 3], [2, 1]]
capacity = [7, 7]
upper_bounds = [3, 3]"
1635,sub,32,40108441981242349461184163203808,9,0,40108431981242349461184163203808,0,"{'ok': True, 'value': 40108441981242349461184163203808, 'stdout': '40108441981242349461184163203808\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09629297256469727}",1,Compute: 88022492154496190245588804945072 - 47914050173253840784404641741264
1636,rod,4,24,22,0,8,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10370635986328125}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 11, 8, 8]"
1637,ilp_partition,4,2,The answer will be the minimum difference between the two groups.,0,18,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0980987548828125}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 12, 8]"
1638,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10063552856445312}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 38, 65, 54, 92, 85, 77, 18, 55, 21, 87, 53, 38, 60, 70, 44, 70, 96, 83, 11, 68, 8, 1, 35]"
1639,mul,32,1855946568689099721823775310979084757825781067457284803941254554,18345678901234567890123456789012345678901234567890123456789012345678901234567890,0,193444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 1855946568689099721823775310979084757825781067457284803941254554, 'stdout': '1855946568689099721823775310979084757825781067457284803941254554\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08525872230529785}",1,Compute: 29630321356653545779413110372133 * 62636734389394104296172344459538
1640,ilp_prod,16,126,A linear programming solver would be used to solve this problem.,0,36,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/30c0dd8b31a24a299b6626c9bcbbfbd4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/30c0dd8b31a24a299b6626c9bcbbfbd4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 21 COLUMNS\nAt line 136 RHS\nAt line 153 BOUNDS\nAt line 160 ENDATA\nProblem MODEL has 16 rows, 6 columns and 96 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9.6 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1661229133605957}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 4, 10, 6, 19, 25]
consumption (rows=resources) = [[12, 9, 4, 3, 8, 10], [9, 2, 13, 5, 4, 10], [2, 4, 8, 5, 2, 15], [3, 11, 4, 12, 11, 2]]
capacity = [58, 36, 49, 56]
upper_bounds = [4, 5, 3, 4, 5, 3]"
1641,add,4,9436,9436,1,9436,1,"{'ok': True, 'value': 9436, 'stdout': '9436\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08749580383300781}",1,Compute: 6859 + 2577
1642,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09699583053588867}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 39, 80, 73, 25, 67, 15, 34, 18, 89, 36, 19, 50, 44, 58, 39, 81, 37, 3, 34, 19, 36, 8, 65]"
1643,add,8,74571874,74571874,1,74571874,1,"{'ok': True, 'value': 74571874, 'stdout': '74571874\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10500931739807129}",1,Compute: 61041890 + 13529984
1644,knap,8,102,103,0,0,0,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10194206237792969}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 1, 3, 14, 4, 14, 15, 3]
V = [7, 30, 10, 25, 12, 27, 3, 23]
C = 31"
1645,ilp_prod,32,350,"The solution to the problem is to maximize the total profit while ensuring that the consumption of each resource does not exceed its capacity. The exact solution would require solving the linear programming problem, which is beyond the scope of this response.",0,3,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b8464f5ea7f2442491127a7e04109d59-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b8464f5ea7f2442491127a7e04109d59-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 31 COLUMNS\nAt line 206 RHS\nAt line 233 BOUNDS\nAt line 240 ENDATA\nProblem MODEL has 26 rows, 6 columns and 156 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6.65625 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16268324851989746}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [71, 78, 20, 12, 76, 66]
consumption (rows=resources) = [[16, 1, 9, 17, 1, 23], [2, 6, 7, 2, 10, 32], [21, 25, 13, 24, 28, 18], [3, 32, 22, 22, 30, 31]]
capacity = [104, 68, 102, 114]
upper_bounds = [4, 3, 5, 4, 3, 3]"
1646,sub,4,227,227,1,227,1,"{'ok': True, 'value': 227, 'stdout': '227\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09930729866027832}",1,Compute: 4936 - 4709
1647,mul,32,2118096720174507874127920715962469778895516661773595364885358852,The product of the two numbers can be calculated using logarithms.,0,213813643343624884335436544240006646486,0,"{'ok': True, 'value': 2118096720174507874127920715962469778895516661773595364885358852, 'stdout': '2118096720174507874127920715962469778895516661773595364885358852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09668684005737305}",1,Compute: 85022085540903428176789186036756 * 24912311979873851839842082101517
1648,ilp_prod,32,975,The solution to this problem would be the maximum profit that can be obtained while satisfying all the resource constraints.,0,3,0,"{'ok': True, 'value': 35, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/26a4ef83e7e544d0a39508ed7aa4bfb5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/26a4ef83e7e544d0a39508ed7aa4bfb5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 82 RHS\nAt line 93 BOUNDS\nAt line 100 ENDATA\nProblem MODEL has 10 rows, 6 columns and 48 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 52.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -35 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                35.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n35.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16741347312927246}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [35, 88, 36, 8, 95, 54]
consumption (rows=resources) = [[16, 4, 25, 12, 25, 25], [15, 7, 14, 2, 18, 32], [13, 8, 10, 21, 3, 17], [3, 7, 20, 2, 11, 14]]
capacity = [105, 93, 89, 105]
upper_bounds = [6, 10, 4, 4, 4, 3]"
1649,sub,32,55274569464630688057526305125605,55274569464630688057526305125605,1,55274569464630688057526295125605,0,"{'ok': True, 'value': 55274569464630688057526305125605, 'stdout': '55274569464630688057526305125605\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0853879451751709}",1,Compute: 89543909666775588339105985539557 - 34269340202144900281579680413952
1650,ilp_partition,4,0,1,0,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09160900115966797}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 6, 11, 5]"
1651,mul,8,774550275702093,7713456553835300,0,7704883344443,0,"{'ok': True, 'value': 774550275702093, 'stdout': '774550275702093\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09509968757629395}",1,Compute: 48038353 * 16123581
1652,add,4,9935,9935,1,9935,1,"{'ok': True, 'value': 9935, 'stdout': '9935\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08589625358581543}",1,Compute: 1502 + 8433
1653,add,32,168580097692525680523320424108666,156561147692075680523316418038666,0,168580097692525679523320424108666,0,"{'ok': True, 'value': 168580097692525680523320424108666, 'stdout': '168580097692525680523320424108666\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08573579788208008}",1,Compute: 88249525219061086582816088047629 + 80330572473464593940504336061037
1654,sub,16,6165258931603640,2712541924415776,0,-1835261840803779,0,"{'ok': True, 'value': 6165258931603640, 'stdout': '6165258931603640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10257506370544434}",1,Compute: 8877800856019416 - 2712541924415776
1655,sub,32,82080087719341791008840094080880,82080087720341791008840094080880,0,82080087720341791008840094080880,0,"{'ok': True, 'value': 82080087719341791008840094080880, 'stdout': '82080087719341791008840094080880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08922362327575684}",1,Compute: 96696956566271294075040626447197 - 14616868846929503066200532366317
1656,mul,32,1296339257218745044857682825709117890010620677292342034636095080,1299349637154546537460149156331296845220,0,129802786867710067489344082608853181320,0,"{'ok': True, 'value': 1296339257218745044857682825709117890010620677292342034636095080, 'stdout': '1296339257218745044857682825709117890010620677292342034636095080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08465385437011719}",1,Compute: 53859474539078749495722466477173 * 24068917647500661029988898133960
1657,mul,4,32784112,37103160,0,33004912,0,"{'ok': True, 'value': 32784112, 'stdout': '32784112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10276126861572266}",1,Compute: 9734 * 3368
1658,mul,32,1256167314349790749029939499682109895185282142908946013118393154,28149065708506936909567197442187914930241577014850088997658575409,0,1234567890123456789012345678901234567890,0,"{'ok': True, 'value': 1256167314349790749029939499682109895185282142908946013118393154, 'stdout': '1256167314349790749029939499682109895185282142908946013118393154\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08388876914978027}",1,Compute: 45863962085187427135854012264407 * 27388983795525421192864485076622
1659,ilp_assign,8,42,46,0,80,0,"{'ok': True, 'value': 42, 'stdout': '42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3790619373321533}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 19, 11, 8, 6, 16, 14], [4, 12, 2, 3, 5, 4, 4], [13, 16, 13, 6, 11, 16, 1], [18, 23, 7, 10, 11, 22, 19], [21, 8, 6, 13, 17, 19, 10], [9, 4, 13, 17, 21, 12, 3], [24, 9, 12, 7, 19, 22, 14]]"
1660,add,2,91,91,1,91,1,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10340142250061035}",1,Compute: 80 + 11
1661,ilp_partition,8,0,1,0,7,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09465742111206055}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 13, 20, 9, 13, 23, 8, 7]"
1662,ilp_prod,2,18,20,0,18,1,"{'ok': True, 'value': 3, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/398e2675f54648739a8ccae639836b92-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/398e2675f54648739a8ccae639836b92-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -3 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                3.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n3.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19921541213989258}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 4]
consumption (rows=resources) = [[1, 1], [1, 3]]
capacity = [8, 6]
upper_bounds = [6, 3]"
1663,add,16,10822558240143633,9425293450321522,0,10822558239143633,0,"{'ok': True, 'value': 10822558240143633, 'stdout': '10822558240143633\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10305428504943848}",1,Compute: 7214593071331522 + 3607965168812111
1664,rod,8,184,110,0,1,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0982980728149414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 4, 2, 3, 8, 12, 20, 24]"
1665,ilp_prod,32,360,268,0,250,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_jswl7pvb/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_jswl7pvb/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15538287162780762}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 76, 91, 57, 53, 72]
consumption (rows=resources) = [[18, 6, 23, 30, 6, 31], [8, 12, 3, 22, 11, 9], [2, 4, 8, 16, 13, 28], [14, 29, 28, 1, 7, 14]]
capacity = [79, 70, 76, 71]
upper_bounds = [4, 3, 3, 3, 5, 3]"
1666,ilp_prod,4,56,33,0,24,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ddcd5abeefbb4cffa7f301b7cd83faaa-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ddcd5abeefbb4cffa7f301b7cd83faaa-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18123173713684082}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7, 7]
consumption (rows=resources) = [[1, 1, 1], [1, 2, 2], [4, 1, 2]]
capacity = [8, 16, 10]
upper_bounds = [3, 8, 5]"
1667,ilp_partition,2,1,0,0,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11307120323181152}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 3, 3]"
1668,rod,4,36,36,1,3,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08983659744262695}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 3, 9, 12]"
1669,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08461689949035645}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadcbbda""
T = ""dacabaacd"""
1670,ilp_assign,4,13,2,0,28,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.403536319732666}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 11, 5, 5], [1, 10, 11, 10], [3, 5, 4, 9], [9, 12, 2, 5]]"
1671,mul,8,863764924481004,1101,0,864184363334544,0,"{'ok': True, 'value': 863764924481004, 'stdout': '863764924481004\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09147214889526367}",1,Compute: 42285516 * 20426969
1672,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09973573684692383}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""bb"""
1673,rod,2,12,6,0,8,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08577132225036621}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
1674,mul,2,1860,1860,1,1860,1,"{'ok': True, 'value': 1860, 'stdout': '1860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08662843704223633}",1,Compute: 93 * 20
1675,lcs,16,8,6,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09501910209655762}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbcbaccdcddcaab""
T = ""aabcddadacadcbcd"""
1676,lcs,32,18,14,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0989220142364502}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acaacaabbdbddadabdccbbcccdccbaad""
T = ""cdddcacdccdcdbcacbcadcbcaacdaddb"""
1677,sub,8,62015259,62015259,1,62015259,1,"{'ok': True, 'value': 62015259, 'stdout': '62015259\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09471344947814941}",1,Compute: 82516631 - 20501372
1678,add,8,115639527,9,0,115639557,0,"{'ok': True, 'value': 115639527, 'stdout': '115639527\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10217690467834473}",1,Compute: 99770116 + 15869411
1679,add,32,39625564503187475922256129904078,281616797025681961857480513961333,0,40000000000000000000000000000000,0,"{'ok': True, 'value': 39625564503187475922256129904078, 'stdout': '39625564503187475922256129904078\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09422874450683594}",1,Compute: 26161679702568196185748051396133 + 13463884800619279736508078507945
1680,ilp_partition,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10938405990600586}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 6, 3]"
1681,sub,32,28124233138609391737841230920565,-28433333433333333333333333333335,0,27924233138609391738841230920565,0,"{'ok': True, 'value': 28124233138609391737841230920565, 'stdout': '28124233138609391737841230920565\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0885007381439209}",1,Compute: 51822211301324548742572929024492 - 23697978162715157004731698103927
1682,add,8,189135938,189135938,1,189135938,1,"{'ok': True, 'value': 189135938, 'stdout': '189135938\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09907865524291992}",1,Compute: 96345811 + 92790127
1683,sub,32,24855697457860163498228511468949,223264899677685,0,24855707457859863498228511468949,0,"{'ok': True, 'value': 24855697457860163498228511468949, 'stdout': '24855697457860163498228511468949\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08423614501953125}",1,Compute: 67444483531602748072264899677685 - 42588786073742584574036388208736
1684,ilp_partition,4,2,1,0,25,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1058495044708252}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 10, 7, 6]"
1685,add,2,125,125,1,125,1,"{'ok': True, 'value': 125, 'stdout': '125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10365915298461914}",1,Compute: 50 + 75
1686,sub,2,35,35,1,35,1,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0897669792175293}",1,Compute: 55 - 20
1687,knap,32,1698,1043,0,61,0,"{'ok': True, 'value': 1698, 'stdout': '1698\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10841155052185059}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 52, 33, 14, 15, 6, 39, 23, 34, 18, 46, 43, 23, 61, 16, 19, 29, 31, 14, 52, 50, 47, 51, 18, 54, 54, 6, 25, 7, 48, 37, 43]
V = [117, 5, 19, 33, 105, 51, 88, 111, 67, 84, 103, 4, 102, 73, 113, 50, 125, 54, 11, 85, 3, 49, 106, 84, 45, 17, 14, 15, 101, 85, 85, 101]
C = 522"
1688,lcs,8,2,4,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0978860855102539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccdadbb""
T = ""baadddac"""
1689,ilp_partition,8,2,1,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09495329856872559}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 23, 23, 8, 11, 3, 5, 22]"
1690,sub,4,3950,3950,1,3950,1,"{'ok': True, 'value': 3950, 'stdout': '3950\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09550046920776367}",1,Compute: 8883 - 4933
1691,ilp_partition,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08782720565795898}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 6, 6]"
1692,rod,32,1088,1055,0,674,0,"{'ok': True, 'value': 1088, 'stdout': '1088\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10272502899169922}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [34, 54, 51, 90, 93, 24, 50, 52, 75, 23, 56, 49, 94, 96, 52, 62, 31, 72, 69, 22, 63, 87, 4, 85, 20, 33, 40, 21, 27, 26, 26, 67]"
1693,ilp_prod,4,35,37,0,39,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/de40ea932e2d4e6c8fc47e564ab52efc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/de40ea932e2d4e6c8fc47e564ab52efc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 13.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1629958152770996}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3, 9]
consumption (rows=resources) = [[4, 4, 3], [1, 2, 3], [2, 4, 1]]
capacity = [13, 10, 10]
upper_bounds = [3, 3, 3]"
1694,sub,4,639,639,1,639,1,"{'ok': True, 'value': 639, 'stdout': '639\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08789563179016113}",1,Compute: 7171 - 6532
1695,add,16,10740030820237004,6530408363153458,0,10739930820237004,0,"{'ok': True, 'value': 10740030820237004, 'stdout': '10740030820237004\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0958719253540039}",1,Compute: 8547655782043153 + 2192375038193851
1696,lcs,32,20,15,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1038053035736084}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbccbdcdadacdbdddaacacadaadbbbd""
T = ""cdcddbccccdcbbaadacdddabccbbbdac"""
1697,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08970046043395996}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaaadadacdddcddbbbbaaadadcdbcdb""
T = ""dccadbcdbdcbbcbddaaaabdcabcaadb"""
1698,add,32,72853780755979204232647342238923,3,0,72853780755979203832647341838923,0,"{'ok': True, 'value': 72853780755979204232647342238923, 'stdout': '72853780755979204232647342238923\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10106205940246582}",1,Compute: 35618451876278674804891987438255 + 37235328879700529427755354800668
1699,ilp_assign,8,33,46,0,46,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4123983383178711}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 20, 13, 13, 6, 1, 2], [3, 4, 16, 20, 4, 3, 7], [13, 11, 9, 2, 20, 21, 17], [19, 22, 16, 17, 18, 24, 22], [11, 21, 4, 22, 11, 9, 1], [9, 2, 22, 2, 13, 12, 1], [16, 19, 12, 6, 8, 24, 6]]"
1700,lcs,32,17,15,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08584022521972656}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abababaccabcbcccbabcabcccddbaabb""
T = ""cbabcbdddbdcaaadbdaabddbdabbbcbac"""
1701,knap,2,4,1,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09972357749938965}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 1]
V = [3, 3, 4]
C = 4"
1702,ilp_assign,4,17,14,0,33,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41750144958496094}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 8, 5, 7], [7, 12, 12, 11], [3, 3, 8, 4], [3, 10, 4, 2]]"
1703,ilp_assign,2,10,4,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3721771240234375}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [4, 6]]"
1704,knap,2,9,13,0,-1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08777499198913574}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 2]
V = [6, 9, 4]
C = 3"
1705,knap,4,26,16,0,-1,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10196638107299805}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 3, 3, 4]
V = [6, 3, 16, 10]
C = 9"
1706,rod,32,2496,1045,0,145,0,"{'ok': True, 'value': 2496, 'stdout': '2496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10222005844116211}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [78, 50, 1, 43, 63, 51, 66, 56, 46, 33, 51, 66, 53, 15, 46, 3, 2, 16, 83, 27, 44, 67, 9, 6, 69, 16, 6, 52, 21, 8, 94, 65]"
1707,rod,16,704,65,0,155,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09727311134338379}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 15, 3, 47, 14, 42, 3, 18, 3, 36, 4, 24, 36, 13, 44, 47]"
1708,mul,16,18659719637020588292693676516825,18784377294176322,0,18674284678884495944644661,0,"{'ok': True, 'value': 18659719637020588292693676516825, 'stdout': '18659719637020588292693676516825\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09936976432800293}",1,Compute: 9392188647088161 * 1986727517744825
1709,lcs,2,0,0,1,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09669685363769531}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cc""
T = ""bbd"""
1710,knap,2,8,11,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08815431594848633}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 2]
V = [6, 8, 2]
C = 5"
1711,ilp_partition,8,1,1,1,12,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08567667007446289}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 12, 13, 14, 1, 8, 3, 12]"
1712,rod,8,128,22,0,1,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1045527458190918}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 9, 23, 5, 3, 4, 7, 20]"
1713,mul,8,504657778739700,5095288573930,0,501357158608860,0,"{'ok': True, 'value': 504657778739700, 'stdout': '504657778739700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08595037460327148}",1,Compute: 27404385 * 18415220
1714,sub,32,14981848750393653124687095288467,23467204953803649821109607,0,149817487504326533246872952884667,0,"{'ok': True, 'value': 14981848750393653124687095288467, 'stdout': '14981848750393653124687095288467\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09004545211791992}",1,Compute: 60348657372190026778445392066710 - 45366808621796373653758296778243
1715,lcs,4,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10571575164794922}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbda""
T = ""ddd"""
1716,rod,4,20,20,1,10,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08802008628845215}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 4, 9, 10]"
1717,mul,2,946,946,1,946,1,"{'ok': True, 'value': 946, 'stdout': '946\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09124588966369629}",1,Compute: 22 * 43
1718,rod,16,304,1,0,155,0,"{'ok': True, 'value': 304, 'stdout': '304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10587835311889648}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [19, 10, 4, 48, 42, 47, 37, 41, 45, 42, 1, 35, 40, 5, 28, 24]"
1719,add,32,150907343186739488569450206215720,100200000000000000000000000000000,0,150909343186739488569450206215720,0,"{'ok': True, 'value': 150907343186739488569450206215720, 'stdout': '150907343186739488569450206215720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08511471748352051}",1,Compute: 96692383788400280568047766234203 + 54214959398339208001402439981517
1720,mul,8,688525929115392,673316556928,0,19,0,"{'ok': True, 'value': 688525929115392, 'stdout': '688525929115392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08760452270507812}",1,Compute: 23864208 * 28851824
1721,ilp_partition,4,1,1,1,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_g9iwg4qs/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_g9iwg4qs/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08732843399047852}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 3, 10]"
1722,ilp_assign,2,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4109313488006592}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 5], [3, 2]]"
1723,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08760619163513184}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 3, 4]"
1724,ilp_assign,32,129,187,0,209,0,"{'ok': True, 'value': 129, 'stdout': '129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4092855453491211}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[74, 92, 18, 17, 40, 86, 3], [73, 48, 59, 73, 18, 68, 39], [37, 55, 40, 33, 69, 69, 38], [81, 50, 72, 15, 71, 20, 17], [32, 10, 52, 65, 18, 34, 61], [26, 36, 76, 50, 56, 30, 15], [93, 35, 60, 12, 11, 76, 25]]"
1725,add,8,136790665,136790665,1,136790665,1,"{'ok': True, 'value': 136790665, 'stdout': '136790665\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08155226707458496}",1,Compute: 78972632 + 57818033
1726,add,32,88022812603478966025404386398891,428919133105360398230120737372904,0,88022812603478965825404386398891,0,"{'ok': True, 'value': 88022812603478966025404386398891, 'stdout': '88022812603478966025404386398891\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09770369529724121}",1,Compute: 32281771310536039823012073737290 + 55741041292942926202392312661601
1727,rod,8,136,-1,0,26,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11033010482788086}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 8, 22, 15, 2, 4, 4, 7]"
1728,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09950137138366699}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcccbbdd""
T = ""daabaccc"""
1729,ilp_assign,4,23,3,0,11,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39829444885253906}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2, 1, 7], [6, 3, 8, 4], [12, 11, 12, 11], [12, 12, 11, 7]]"
1730,add,8,105188243,563311,0,105188243,1,"{'ok': True, 'value': 105188243, 'stdout': '105188243\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10899233818054199}",1,Compute: 54285310 + 50902933
1731,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22478961944580078}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [74, 58, 79, 94, 25, 23, 75, 9, 86, 53, 44, 2, 23, 64, 8, 91, 76, 11, 27, 28, 74, 84, 29, 60]"
1732,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08848738670349121}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daad""
T = ""bbaad"""
1733,sub,8,49229328,49229328,1,49229328,1,"{'ok': True, 'value': 49229328, 'stdout': '49229328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10435199737548828}",1,Compute: 83348469 - 34119141
1734,knap,2,8,13,0,-1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10459041595458984}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 4]
V = [8, 2, 5]
C = 7"
1735,ilp_assign,16,54,115,0,117,0,"{'ok': True, 'value': 54, 'stdout': '54\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40030908584594727}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 2, 5, 45, 24, 4, 32], [25, 2, 5, 45, 7, 22, 44], [34, 1, 44, 4, 26, 23, 18], [41, 15, 1, 31, 22, 1, 24], [46, 37, 4, 5, 27, 7, 41], [34, 12, 37, 39, 11, 29, 29], [13, 34, 45, 5, 31, 38, 23]]"
1736,sub,8,21434296,21434296,1,21434296,1,"{'ok': True, 'value': 21434296, 'stdout': '21434296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08507394790649414}",1,Compute: 65849472 - 44415176
1737,sub,32,48563904403751570104798499768327,48563904403751570099798499768327,0,48563914403751570104801500000000,0,"{'ok': True, 'value': 48563904403751570104798499768327, 'stdout': '48563904403751570104798499768327\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09581875801086426}",1,Compute: 62798359377196656217554722308566 - 14234454973445086112756222540239
1738,rod,8,72,1,0,1,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0989077091217041}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 18, 13, 9, 21, 7, 6, 15]"
1739,rod,16,320,1,0,65,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10996580123901367}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 35, 40, 33, 25, 12, 2, 31, 33, 37, 28, 6, 29, 11, 44, 35]"
1740,sub,4,565,565,1,565,1,"{'ok': True, 'value': 565, 'stdout': '565\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09700179100036621}",1,Compute: 1625 - 1060
1741,rod,16,256,60,0,64,0,"{'ok': True, 'value': 256, 'stdout': '256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08732914924621582}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [16, 17, 23, 17, 11, 11, 41, 38, 15, 10, 19, 41, 43, 32, 27, 29]"
1742,mul,16,29516323937006462861601400823155,12183057688110172,0,29004494391898686645666660,0,"{'ok': True, 'value': 29516323937006462861601400823155, 'stdout': '29516323937006462861601400823155\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10293745994567871}",1,Compute: 3336460837462757 * 8846596850647415
1743,ilp_assign,32,116,185,0,38,0,"{'ok': True, 'value': 116, 'stdout': '116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40366125106811523}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[74, 3, 64, 54, 1, 22, 71], [85, 15, 48, 26, 45, 63, 64], [77, 95, 73, 17, 68, 8, 40], [7, 33, 31, 91, 24, 2, 1], [77, 9, 29, 67, 45, 78, 32], [68, 66, 46, 70, 82, 89, 70], [25, 66, 84, 94, 29, 34, 38]]"
1744,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37710094451904297}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [5, 5]]"
1745,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10794448852539062}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badbbacbdcbabcbb""
T = ""acaddcbaccacdadab"""
1746,knap,8,103,103,1,0,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10196638107299805}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 10, 14, 14, 9, 5, 4]
V = [24, 26, 8, 12, 4, 27, 2, 18]
C = 31"
1747,knap,16,430,1043,0,1,0,"{'ok': True, 'value': 430, 'stdout': '430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09743118286132812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 24, 11, 10, 25, 3, 29, 8, 30, 21, 4, 11, 19, 11, 13, 16]
V = [52, 19, 26, 44, 60, 6, 22, 48, 53, 15, 16, 54, 48, 60, 42, 13]
C = 128"
1748,add,8,124295175,124295175,1,124295175,1,"{'ok': True, 'value': 124295175, 'stdout': '124295175\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10079574584960938}",1,Compute: 62800495 + 61494680
1749,ilp_prod,16,219,168,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_qxjhanty/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_qxjhanty/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20892000198364258}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 48, 36, 37, 8, 15]
consumption (rows=resources) = [[7, 5, 5, 5, 5, 7], [13, 14, 10, 8, 2, 16], [5, 12, 4, 14, 4, 3], [11, 8, 8, 4, 2, 2]]
capacity = [51, 58, 54, 38]
upper_bounds = [3, 4, 4, 3, 10, 3]"
1750,rod,8,168,24,0,1,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08674836158752441}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 7, 10, 9, 2, 4, 5, 18]"
1751,knap,8,76,103,0,0,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0988318920135498}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 7, 16, 15, 6, 10, 16, 12]
V = [7, 1, 22, 23, 30, 10, 18, 4]
C = 46"
1752,add,2,151,151,1,151,1,"{'ok': True, 'value': 151, 'stdout': '151\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08708691596984863}",1,Compute: 80 + 71
1753,sub,8,39052684,39052684,1,39052684,1,"{'ok': True, 'value': 39052684, 'stdout': '39052684\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10556840896606445}",1,Compute: 52834103 - 13781419
1754,knap,4,5,4,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09610247611999512}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 4, 7]
V = [1, 2, 3, 1]
C = 10"
1755,knap,32,1589,2245,0,52,0,"{'ok': True, 'value': 1589, 'stdout': '1589\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11434793472290039}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 18, 6, 45, 26, 35, 13, 51, 4, 50, 41, 14, 43, 57, 52, 10, 42, 12, 44, 42, 40, 41, 59, 33, 6, 48, 12, 54, 53, 43, 64, 40]
V = [48, 64, 109, 55, 44, 116, 99, 49, 71, 83, 36, 48, 34, 16, 27, 18, 90, 54, 112, 55, 125, 105, 67, 9, 86, 59, 67, 57, 20, 99, 65, 28]
C = 555"
1756,ilp_partition,16,0,1,0,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3155667781829834}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 7, 29, 37, 8, 14, 12, 18, 7, 31, 24, 25, 34, 39, 3, 17]"
1757,lcs,32,17,10,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0892186164855957}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbaaaacbdabbddabbbaccabacbbaacd""
T = ""acdbccddddacddadbdbaaaabacabdddbb"""
1758,knap,2,7,10,0,-1,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09540486335754395}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 3]
V = [6, 7, 1]
C = 3"
1759,mul,32,4670993493054521043213751420304018621956068301942318632381072794,4664344333484334443333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333,0,466334433386263644866466646604199485859094800704974183955311054,0,"{'ok': True, 'value': 4670993493054521043213751420304018621956068301942318632381072794, 'stdout': '4670993493054521043213751420304018621956068301942318632381072794\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09295988082885742}",1,Compute: 99485859094800704974183955311054 * 46951330928383518020654443552811
1760,ilp_prod,2,14,20,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/aa5711f7cd38458d880d7400ab281c90-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/aa5711f7cd38458d880d7400ab281c90-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1837317943572998}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5]
consumption (rows=resources) = [[3, 1], [3, 3]]
capacity = [8, 8]
upper_bounds = [3, 3]"
1761,ilp_prod,32,502,1050,0,108,0,"{'ok': True, 'value': 78, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/06aba8485fa0447f8c55a2f4116804af-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/06aba8485fa0447f8c55a2f4116804af-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 87.75 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -78 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                78.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n78.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16958403587341309}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 64, 71, 12, 4, 62]
consumption (rows=resources) = [[18, 20, 4, 4, 19, 1], [18, 2, 26, 27, 8, 9], [13, 18, 31, 8, 11, 10], [32, 8, 32, 6, 23, 16]]
capacity = [80, 109, 119, 108]
upper_bounds = [3, 4, 3, 4, 4, 6]"
1762,add,2,125,175,0,125,1,"{'ok': True, 'value': 125, 'stdout': '125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0924532413482666}",1,Compute: 73 + 52
1763,ilp_assign,32,148,185,0,208,0,"{'ok': True, 'value': 148, 'stdout': '148\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42357492446899414}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[50, 65, 61, 40, 8, 90, 55], [7, 34, 7, 65, 59, 23, 17], [50, 17, 35, 80, 87, 73, 27], [35, 82, 94, 47, 90, 94, 32], [8, 88, 3, 68, 86, 88, 84], [90, 84, 64, 43, 42, 44, 87], [79, 91, 17, 73, 81, 92, 37]]"
1764,lcs,8,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09903645515441895}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdbcbdd""
T = ""ccdadda"""
1765,lcs,16,10,6,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08637213706970215}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdccdaaabcabdacc""
T = ""ccccdbdaccdabbddc"""
1766,ilp_prod,8,120,100,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_sfciehax/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_sfciehax/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16588711738586426}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 20, 21, 14]
consumption (rows=resources) = [[1, 3, 2, 2], [4, 3, 7, 6], [4, 2, 7, 4], [3, 4, 8, 7]]
capacity = [25, 27, 21, 24]
upper_bounds = [5, 6, 3, 3]"
1767,ilp_partition,8,1,1,1,10,0,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10088443756103516}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 16, 23, 2, 9, 1, 10, 10]"
1768,sub,16,5657383298219082,5657383298219082,1,5657383298219082,1,"{'ok': True, 'value': 5657383298219082, 'stdout': '5657383298219082\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08989429473876953}",1,Compute: 6668874690382378 - 1011491392163296
1769,rod,32,704,1050,0,157,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09424138069152832}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [19, 13, 57, 88, 10, 7, 90, 78, 82, 30, 46, 37, 18, 95, 78, 77, 1, 58, 9, 77, 66, 88, 44, 30, 53, 37, 1, 2, 90, 18, 47, 87]"
1770,sub,8,1509097,35235013,0,1509097,1,"{'ok': True, 'value': 1509097, 'stdout': '1509097\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10763096809387207}",1,Compute: 36744110 - 35235013
1771,knap,16,398,1,0,17,0,"{'ok': True, 'value': 398, 'stdout': '398\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09135174751281738}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 3, 9, 27, 9, 6, 20, 17, 31, 13, 6, 8, 25, 7, 18, 10]
V = [26, 53, 32, 27, 14, 60, 27, 27, 10, 51, 54, 12, 47, 9, 51, 4]
C = 113"
1772,sub,8,11631130,,0,11631130,1,"{'ok': True, 'value': 11631130, 'stdout': '11631130\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10115957260131836}",1,Compute: 75261419 - 63630289
1773,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1016080379486084}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 75, 20, 77, 81, 1, 79, 28, 8, 31, 17, 40, 18, 33, 78, 81, 78, 78, 56, 1, 15, 16, 39, 48]"
1774,ilp_assign,2,5,5,1,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41559863090515137}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [2, 5]]"
1775,sub,8,9999768,48207517,0,999768,0,"{'ok': True, 'value': 9999768, 'stdout': '9999768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08635568618774414}",1,Compute: 58207285 - 48207517
1776,ilp_prod,32,728,The problem is a linear programming problem that can be solved using integer programming techniques.,0,1050,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_eodyq2bz/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_eodyq2bz/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19360661506652832}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [45, 57, 77, 29, 28, 91]
consumption (rows=resources) = [[13, 22, 18, 24, 13, 7], [26, 31, 14, 28, 27, 14], [23, 3, 5, 27, 25, 7], [29, 18, 11, 25, 13, 6]]
capacity = [81, 125, 126, 122]
upper_bounds = [4, 3, 4, 3, 4, 8]"
1777,knap,32,1727,1043,0,61,0,"{'ok': True, 'value': 1727, 'stdout': '1727\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09020423889160156}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 36, 55, 24, 60, 51, 50, 41, 29, 17, 35, 58, 15, 61, 17, 64, 3, 41, 5, 46, 19, 24, 18, 2, 13, 48, 35, 24, 40, 2, 6, 21]
V = [90, 116, 69, 9, 13, 26, 128, 70, 16, 104, 52, 95, 67, 16, 119, 42, 42, 60, 113, 48, 84, 17, 115, 87, 45, 102, 82, 60, 118, 52, 21, 11]
C = 488"
1778,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22237658500671387}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 96, 55, 52, 54, 64, 96, 80, 20, 9, 40, 83, 84, 18, 95, 37, 42, 91, 6, 67, 84, 35, 27, 36]"
1779,mul,8,2509070405103411,43,0,2549435545511,0,"{'ok': True, 'value': 2509070405103411, 'stdout': '2509070405103411\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09714841842651367}",1,Compute: 33349773 * 75235007
1780,mul,16,65061903220336934138297891341668,16178057554299451,0,647999384126768884654966668,0,"{'ok': True, 'value': 65061903220336934138297891341668, 'stdout': '65061903220336934138297891341668\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10451173782348633}",1,Compute: 7480355353038364 * 8697702201261087
1781,mul,16,8287832869502822717311786173840,144,0,8094444958510644444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 8287832869502822717311786173840, 'stdout': '8287832869502822717311786173840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10321736335754395}",1,Compute: 1447917209869915 * 5723968755262896
1782,mul,32,2108795700942415041156488588893687240736762268692395798384146582,2039654569494639636446642355046916155661559642013963221021,0,210303945548663646464465644686444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 2108795700942415041156488588893687240736762268692395798384146582, 'stdout': '2108795700942415041156488588893687240736762268692395798384146582\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10236525535583496}",1,Compute: 28432467655978750523146009186814 * 74168578206365412514737730937013
1783,ilp_assign,8,26,56,0,1,0,"{'ok': True, 'value': 26, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b5a83436c635478c9638b67acea50674-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/b5a83436c635478c9638b67acea50674-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 26 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 26\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 26 - took 0.00 seconds\nCbc0012I Integer solution of 26 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 26, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 26 to 26\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                26.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nThe minimum total cost is: 26.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1832118034362793}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 7, 21, 24, 17, 14, 21], [6, 14, 21, 1, 9, 9, 3], [1, 15, 10, 9, 12, 2, 14], [2, 20, 2, 7, 20, 1, 5], [3, 7, 17, 21, 13, 14, 23], [11, 4, 4, 21, 8, 11, 3], [21, 6, 6, 18, 8, 23, 16]]"
1784,ilp_assign,2,6,4,0,8,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40136170387268066}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [3, 5]]"
1785,ilp_prod,32,276,1000,0,24,0,"{'ok': True, 'value': 27, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1480fa94da8b49298f42d491ea37fd44-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1480fa94da8b49298f42d491ea37fd44-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 29.0323 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -27 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                27.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n27.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16387939453125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 57, 38, 92, 49, 4]
consumption (rows=resources) = [[21, 18, 28, 25, 22, 10], [28, 32, 2, 12, 25, 1], [31, 28, 29, 15, 14, 30], [28, 30, 14, 21, 21, 15]]
capacity = [75, 113, 100, 95]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1786,rod,16,656,155,0,64,0,"{'ok': True, 'value': 656, 'stdout': '656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08624982833862305}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [41, 46, 8, 21, 37, 23, 6, 13, 21, 37, 33, 16, 17, 18, 21, 46]"
1787,add,16,11998556271458695,2557817257185380,0,12008556271458705,0,"{'ok': True, 'value': 11998556271458695, 'stdout': '11998556271458695\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11043190956115723}",1,Compute: 7588917257185380 + 4409639014273315
1788,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10197806358337402}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""ca"""
1789,rod,16,736,65,0,190,0,"{'ok': True, 'value': 736, 'stdout': '736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08849501609802246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [46, 13, 8, 4, 27, 17, 39, 39, 9, 9, 9, 39, 15, 23, 31, 39]"
1790,ilp_prod,4,22,33,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_baq6kxot/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_baq6kxot/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15573382377624512}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 3, 5]
consumption (rows=resources) = [[4, 2, 1], [1, 4, 3], [3, 3, 4]]
capacity = [8, 12, 13]
upper_bounds = [3, 3, 3]"
1791,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08427882194519043}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbadcaddbabdacba""
T = ""aaccadccdaabccda"""
1792,ilp_partition,16,0,1,0,28,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21694231033325195}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 33, 39, 8, 12, 31, 3, 14, 28, 18, 18, 39, 22, 25, 6, 5]"
1793,ilp_assign,4,14,15,0,36,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4049832820892334}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 11, 5, 4], [11, 12, 3, 5], [6, 9, 11, 2], [3, 8, 4, 10]]"
1794,lcs,2,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09903860092163086}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""bab"""
1795,sub,4,2783,2783,1,2783,1,"{'ok': True, 'value': 2783, 'stdout': '2783\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09345626831054688}",1,Compute: 7469 - 4686
1796,knap,32,1659,2058,0,12,0,"{'ok': True, 'value': 1659, 'stdout': '1659\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0940101146697998}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [58, 7, 46, 41, 18, 5, 61, 15, 56, 29, 61, 50, 21, 64, 35, 12, 6, 58, 57, 54, 36, 38, 20, 19, 49, 13, 28, 1, 4, 17, 64, 42]
V = [79, 8, 122, 42, 45, 125, 27, 26, 77, 110, 107, 79, 49, 20, 54, 65, 128, 5, 41, 43, 20, 126, 71, 127, 52, 49, 74, 8, 103, 61, 33, 46]
C = 542"
1797,ilp_prod,4,23,33,0,33,0,"{'ok': True, 'value': 22, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/64c0b30e69254e1dbe535ec0c772273f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/64c0b30e69254e1dbe535ec0c772273f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 22 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -22 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                22.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n22.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1716306209564209}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 5, 6]
consumption (rows=resources) = [[4, 3, 2], [1, 4, 4], [4, 4, 3]]
capacity = [8, 11, 11]
upper_bounds = [3, 3, 3]"
1798,knap,4,24,22,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1006312370300293}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 8, 3, 5]
V = [1, 5, 12, 12]
C = 10"
1799,ilp_assign,8,38,56,0,75,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3763136863708496}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 13, 5, 24, 16, 9, 22], [21, 18, 18, 2, 14, 11, 7], [1, 14, 11, 6, 4, 21, 8], [24, 11, 13, 22, 11, 11, 6], [7, 19, 8, 13, 4, 13, 19], [18, 21, 20, 8, 24, 10, 1], [6, 19, 10, 12, 11, 17, 11]]"
1800,ilp_partition,4,1,2,0,20,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08843779563903809}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 3, 3]"
1801,add,2,92,92,1,92,1,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09313225746154785}",1,Compute: 41 + 51
1802,sub,2,68,68,1,68,1,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08645439147949219}",1,Compute: 83 - 15
1803,add,4,4450,4440,0,4450,1,"{'ok': True, 'value': 4450, 'stdout': '4450\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09566068649291992}",1,Compute: 3021 + 1429
1804,ilp_assign,4,15,36,0,28,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4091668128967285}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 7, 8, 3], [6, 10, 9, 4], [10, 4, 10, 10], [8, 10, 5, 2]]"
1805,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20725202560424805}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [52, 16, 8, 19, 33, 1, 73, 18, 96, 69, 40, 11, 66, 69, 33, 6, 77, 5, 47, 65, 53, 53, 92, 7]"
1806,ilp_prod,16,171,165,0,207,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_eklbmcdm/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_eklbmcdm/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15313315391540527}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 15, 4, 33, 38, 42]
consumption (rows=resources) = [[15, 12, 12, 16, 3, 14], [16, 15, 15, 13, 5, 13], [14, 2, 13, 9, 2, 10], [7, 2, 10, 10, 12, 11]]
capacity = [44, 47, 41, 49]
upper_bounds = [3, 3, 3, 3, 4, 3]"
1807,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08768439292907715}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acab""
T = ""bdbcb"""
1808,add,32,130759694607538235156627650639164,130759704607538235156627650639164,0,130769774607538235156627650639164,0,"{'ok': True, 'value': 130759694607538235156627650639164, 'stdout': '130759694607538235156627650639164\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10369396209716797}",1,Compute: 57310214285477142745806944823559 + 73449480322061092410820705815605
1809,add,16,15215852800462811,15215852899425211,0,15215852799462811,0,"{'ok': True, 'value': 15215852800462811, 'stdout': '15215852800462811\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09099626541137695}",1,Compute: 5704666677600482 + 9511186122862329
1810,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08517837524414062}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [53, 69, 14, 35, 80, 45, 69, 24, 15, 62, 12, 41, 55, 28, 55, 72, 90, 53, 25, 53, 54, 38, 52, 61]"
1811,ilp_partition,4,0,0,1,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09916162490844727}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 6, 4, 10]"
1812,sub,8,17537022,17537022,1,17537022,1,"{'ok': True, 'value': 17537022, 'stdout': '17537022\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09223341941833496}",1,Compute: 84202559 - 66665537
1813,ilp_prod,4,24,37,0,30,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/124525d4420842a799ed106b4e973df6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/124525d4420842a799ed106b4e973df6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 26.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17452359199523926}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 4, 3]
consumption (rows=resources) = [[3, 2, 4], [3, 2, 4], [1, 4, 1]]
capacity = [8, 9, 13]
upper_bounds = [3, 3, 3]"
1814,add,2,68,68,1,68,1,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09709644317626953}",1,Compute: 40 + 28
1815,ilp_prod,16,168,166,0,168,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_tvdiladi/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_tvdiladi/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1613171100616455}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 26, 11, 29, 9, 27]
consumption (rows=resources) = [[14, 4, 2, 8, 15, 11], [10, 13, 16, 1, 1, 2], [8, 12, 11, 8, 5, 15], [16, 1, 9, 2, 1, 10]]
capacity = [40, 37, 59, 58]
upper_bounds = [3, 3, 3, 5, 3, 3]"
1816,sub,4,2179,2179,1,2179,1,"{'ok': True, 'value': 2179, 'stdout': '2179\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09274697303771973}",1,Compute: 9738 - 7559
1817,ilp_assign,2,5,2,0,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40585756301879883}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [5, 1]]"
1818,ilp_prod,2,17,23,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/146469d5b8114ebca13e9d7566b38627-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/146469d5b8114ebca13e9d7566b38627-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17221283912658691}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[2, 2], [3, 2]]
capacity = [8, 8]
upper_bounds = [3, 4]"
1819,add,8,80055238,80055237,0,80055238,1,"{'ok': True, 'value': 80055238, 'stdout': '80055238\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10653185844421387}",1,Compute: 14328139 + 65727099
1820,ilp_prod,8,99,100,0,25,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d2c9cde575064df6b7e4a09aa3513f91-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d2c9cde575064df6b7e4a09aa3513f91-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 21 COLUMNS\nAt line 98 RHS\nAt line 115 BOUNDS\nAt line 120 ENDATA\nProblem MODEL has 16 rows, 4 columns and 64 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 69 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -48 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19121408462524414}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 12, 16, 15]
consumption (rows=resources) = [[5, 6, 8, 1], [4, 5, 6, 7], [6, 1, 2, 2], [1, 6, 3, 1]]
capacity = [25, 24, 23, 32]
upper_bounds = [3, 4, 3, 3]"
1821,rod,4,36,18,0,9,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09128737449645996}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 9, 2, 1]"
1822,ilp_assign,32,86,97,0,209,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38112688064575195}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[56, 36, 14, 58, 94, 22, 76], [56, 13, 3, 1, 25, 20, 27], [37, 76, 42, 46, 95, 90, 17], [56, 22, 62, 72, 72, 53, 41], [87, 93, 71, 74, 8, 53, 75], [62, 19, 6, 78, 52, 72, 10], [10, 94, 71, 75, 1, 47, 73]]"
1823,ilp_prod,2,56,27,0,21,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d57a352b9bd74409ba7592c0169a1f1a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d57a352b9bd74409ba7592c0169a1f1a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18065309524536133}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3]
consumption (rows=resources) = [[1, 2], [1, 3]]
capacity = [7, 7]
upper_bounds = [7, 3]"
1824,knap,32,1683,1047,0,56,0,"{'ok': True, 'value': 1683, 'stdout': '1683\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11138653755187988}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [41, 10, 22, 32, 60, 44, 46, 24, 41, 49, 17, 16, 29, 56, 22, 42, 55, 6, 62, 64, 21, 44, 9, 4, 23, 57, 45, 63, 23, 31, 25, 28]
V = [84, 67, 67, 96, 13, 2, 114, 59, 16, 2, 57, 60, 31, 119, 2, 63, 126, 125, 16, 12, 111, 34, 25, 121, 26, 36, 36, 88, 123, 51, 116, 48]
C = 555"
1825,ilp_assign,4,16,0,0,28,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4079570770263672}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 5, 3, 3], [12, 2, 4, 11], [9, 6, 11, 12], [8, 11, 2, 6]]"
1826,mul,2,1218,1238,0,1206,0,"{'ok': True, 'value': 1218, 'stdout': '1218\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0895538330078125}",1,Compute: 42 * 29
1827,sub,4,936,936,1,936,1,"{'ok': True, 'value': 936, 'stdout': '936\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08881974220275879}",1,Compute: 7680 - 6744
1828,sub,16,401395578923928,4101446568034028,0,4011405579023928,0,"{'ok': True, 'value': 401395578923928, 'stdout': '401395578923928\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08878803253173828}",1,Compute: 4653674453694888 - 4252278874770960
1829,knap,4,32,26,0,0,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10909533500671387}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 6, 5]
V = [16, 16, 11, 9]
C = 10"
1830,knap,8,52,110,0,0,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08551764488220215}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 12, 4, 5, 16, 13, 12, 9]
V = [10, 9, 5, 10, 6, 17, 3, 15]
C = 42"
1831,add,16,6118611825948326,523181518281415,0,6088611825948326,0,"{'ok': True, 'value': 6118611825948326, 'stdout': '6118611825948326\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08952832221984863}",1,Compute: 3757195152759136 + 2361416673189190
1832,mul,32,2075305039408864835909570919213328044825259383771301338098606100,198208440453454348378447116448466666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,206844406363182365384616416664645346650,0,"{'ok': True, 'value': 2075305039408864835909570919213328044825259383771301338098606100, 'stdout': '2075305039408864835909570919213328044825259383771301338098606100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11659860610961914}",1,Compute: 29790030742380096287732801152950 * 69664414157736341509584567063358
1833,ilp_prod,2,14,21,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1b8a9c5506424ef8bcb204f1299f0c03-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1b8a9c5506424ef8bcb204f1299f0c03-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16620850563049316}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 7]
consumption (rows=resources) = [[2, 2], [3, 3]]
capacity = [6, 7]
upper_bounds = [3, 3]"
1834,ilp_prod,4,51,63,0,33,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d84cd97c659147629a861463fb5c7f46-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d84cd97c659147629a861463fb5c7f46-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6.75 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16222095489501953}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 10, 11]
consumption (rows=resources) = [[3, 1, 1], [1, 3, 4], [4, 4, 2]]
capacity = [12, 15, 14]
upper_bounds = [3, 3, 3]"
1835,add,16,13907075912463316,13807075912463316,0,13907075912463316,1,"{'ok': True, 'value': 13907075912463316, 'stdout': '13907075912463316\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09405183792114258}",1,Compute: 9335091321263522 + 4571984591199794
1836,sub,8,40118926,39118926,0,39118926,0,"{'ok': True, 'value': 40118926, 'stdout': '40118926\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09712338447570801}",1,Compute: 79132296 - 39013370
1837,ilp_partition,16,0,1,0,2,0,"{'ok': True, 'value': 390, 'stdout': '390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09857749938964844}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 45, 15, 2, 18, 4, 46, 16, 46, 3, 43, 35, 1, 48, 23, 1]"
1838,knap,8,126,147,0,0,0,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09259033203125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 1, 10, 9, 1, 11, 2, 12]
V = [11, 27, 6, 28, 10, 30, 31, 21]
C = 29"
1839,add,16,10738444576925448,8548444576925428,0,10738446577725448,0,"{'ok': True, 'value': 10738444576925448, 'stdout': '10738444576925448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09718966484069824}",1,Compute: 1872002197889411 + 8866442379036037
1840,ilp_prod,2,18,30,0,7,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0172c18269404b4e945f759069f192fe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0172c18269404b4e945f759069f192fe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 18.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18908119201660156}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 5]
consumption (rows=resources) = [[2, 2], [2, 2]]
capacity = [7, 7]
upper_bounds = [3, 3]"
1841,ilp_partition,4,4,1,0,1,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0876615047454834}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 10, 5]"
1842,knap,16,449,1043,0,0,0,"{'ok': True, 'value': 449, 'stdout': '449\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09749364852905273}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 18, 23, 3, 21, 8, 2, 23, 11, 14, 21, 20, 3, 16, 16, 32]
V = [15, 60, 36, 42, 33, 32, 5, 59, 43, 54, 60, 22, 63, 14, 31, 43]
C = 123"
1843,add,4,10104,10104,1,10104,1,"{'ok': True, 'value': 10104, 'stdout': '10104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09206485748291016}",1,Compute: 1884 + 8220
1844,mul,4,12315580,12003860,0,11446600,0,"{'ok': True, 'value': 12315580, 'stdout': '12315580\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10509538650512695}",1,Compute: 3265 * 3772
1845,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10139703750610352}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 12, 58, 17, 69, 66, 22, 93, 79, 88, 79, 39, 15, 94, 65, 26, 14, 68, 58, 89, 28, 28, 46, 36]"
1846,add,16,7641028569319427,7641028569319427,1,7640928569329427,0,"{'ok': True, 'value': 7641028569319427, 'stdout': '7641028569319427\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09922480583190918}",1,Compute: 2728369900038231 + 4912658669281196
1847,sub,4,4810,4810,1,4810,1,"{'ok': True, 'value': 4810, 'stdout': '4810\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08887076377868652}",1,Compute: 9359 - 4549
1848,knap,32,1391,1658,0,4,0,"{'ok': True, 'value': 1391, 'stdout': '1391\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09924006462097168}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 52, 50, 51, 13, 26, 36, 13, 33, 19, 31, 32, 33, 39, 19, 64, 54, 4, 30, 58, 30, 18, 25, 39, 56, 60, 33, 59, 20, 37, 49, 6]
V = [87, 35, 33, 18, 104, 3, 25, 96, 104, 114, 46, 53, 46, 123, 8, 113, 68, 61, 89, 26, 6, 5, 54, 58, 22, 12, 4, 52, 66, 6, 74, 27]
C = 552"
1849,rod,16,480,14,0,64,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09072256088256836}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 47, 8, 43, 11, 30, 3, 15, 42, 35, 16, 33, 11, 47, 32, 24]"
1850,knap,4,17,15,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08924722671508789}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 3, 7, 7]
V = [3, 6, 11, 1]
C = 12"
1851,ilp_assign,32,98,185,0,209,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6723313331604004}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[44, 36, 93, 5, 55, 69, 28], [25, 13, 65, 85, 76, 51, 22], [18, 95, 5, 55, 19, 8, 34], [73, 16, 44, 43, 31, 11, 1], [84, 28, 96, 17, 41, 60, 40], [38, 23, 95, 6, 21, 52, 75], [91, 69, 50, 18, 26, 13, 50]]"
1852,knap,8,85,103,0,15,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08798384666442871}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 12, 7, 15, 7, 15, 4, 15]
V = [13, 23, 21, 22, 2, 28, 7, 21]
C = 38"
1853,add,4,18070,35,0,18070,1,"{'ok': True, 'value': 18070, 'stdout': '18070\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09190535545349121}",1,Compute: 8514 + 9556
1854,ilp_assign,32,120,205,0,205,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4122459888458252}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[76, 76, 86, 90, 44, 93, 13], [19, 82, 89, 94, 17, 46, 26], [72, 40, 83, 77, 73, 90, 71], [47, 21, 3, 48, 57, 32, 17], [12, 77, 70, 53, 30, 22, 80], [69, 37, 52, 12, 59, 13, 83], [32, 22, 45, 42, 11, 40, 52]]"
1855,sub,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08812117576599121}",1,Compute: 40 - 37
1856,add,4,9448,9558,0,9448,1,"{'ok': True, 'value': 9448, 'stdout': '9448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08922648429870605}",1,Compute: 5327 + 4121
1857,ilp_partition,2,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09922671318054199}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 1, 4, 4]"
1858,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09629034996032715}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baaddcca""
T = ""adccbcc"""
1859,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10779142379760742}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""bdd"""
1860,sub,8,39888052,40,0,40000000,0,"{'ok': True, 'value': 39888052, 'stdout': '39888052\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11470270156860352}",1,Compute: 78855554 - 38967502
1861,sub,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09722375869750977}",1,Compute: 19 - 13
1862,ilp_prod,4,36,45,0,18,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3eaca8f3046e4917aed42c256ba6f45f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3eaca8f3046e4917aed42c256ba6f45f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -6 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n6.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15876364707946777}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 12, 4]
consumption (rows=resources) = [[4, 3, 3], [4, 2, 2], [1, 2, 4]]
capacity = [11, 8, 11]
upper_bounds = [3, 3, 3]"
1863,ilp_partition,16,0,10,0,0,1,"{'ok': True, 'value': 340, 'stdout': '340\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0881795883178711}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 7, 44, 7, 23, 19, 31, 42, 25, 17, 25, 15, 25, 40, 13, 2]"
1864,lcs,32,18,10,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10472917556762695}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcaaaadcdbbdbbdccdcddcaaacaccac""
T = ""dcbccbacbdaadccdcccdcaabbdbaacddb"""
1865,ilp_assign,8,50,56,0,42,0,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4447202682495117}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 3, 7, 15, 1, 11, 13], [4, 22, 13, 6, 13, 20, 24], [18, 24, 14, 10, 6, 14, 18], [9, 21, 17, 4, 14, 24, 24], [3, 12, 21, 1, 18, 16, 10], [24, 13, 19, 15, 21, 16, 12], [16, 17, 17, 8, 1, 12, 8]]"
1866,mul,4,21959526,218992536,0,22150466,0,"{'ok': True, 'value': 21959526, 'stdout': '21959526\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10790872573852539}",1,Compute: 4206 * 5221
1867,ilp_assign,32,145,185,0,208,0,"{'ok': True, 'value': 145, 'stdout': '145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40183401107788086}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 45, 58, 41, 87, 46, 77], [65, 79, 25, 29, 5, 64, 86], [4, 70, 4, 39, 95, 84, 30], [60, 47, 92, 50, 51, 85, 1], [92, 35, 42, 38, 25, 82, 60], [14, 65, 28, 41, 45, 51, 61], [44, 96, 61, 85, 89, 45, 3]]"
1868,sub,4,2536,2536,1,2536,1,"{'ok': True, 'value': 2536, 'stdout': '2536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0861806869506836}",1,Compute: 9627 - 7091
1869,add,2,128,128,1,128,1,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.088409423828125}",1,Compute: 48 + 80
1870,ilp_assign,4,22,22,1,28,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39110875129699707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 5, 9], [11, 7, 6, 9], [12, 7, 8, 8], [2, 5, 10, 6]]"
1871,rod,2,6,6,1,8,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10021424293518066}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
1872,knap,8,94,110,0,8,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08676648139953613}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 9, 9, 4, 5, 4, 12, 12]
V = [18, 24, 4, 5, 27, 19, 24, 18]
C = 31"
1873,add,4,13291,35,0,13291,1,"{'ok': True, 'value': 13291, 'stdout': '13291\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08567571640014648}",1,Compute: 3899 + 9392
1874,mul,8,2168292855971123,1438100630000000,0,214838448233533,0,"{'ok': True, 'value': 2168292855971123, 'stdout': '2168292855971123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0888364315032959}",1,Compute: 74977319 * 28919317
1875,ilp_partition,8,1,1,1,0,0,"{'ok': True, 'value': 67, 'stdout': '67\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09351825714111328}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 13, 19, 22, 6, 11, 8, 17]"
1876,rod,8,184,22,0,1,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09946393966674805}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 14, 10, 7, 5, 4, 22, 8]"
1877,add,8,107980967,107980967,1,107981067,0,"{'ok': True, 'value': 107980967, 'stdout': '107980967\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12670564651489258}",1,Compute: 83550951 + 24430016
1878,knap,8,85,147,0,8,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08473992347717285}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 9, 11, 7, 8, 2, 16, 8]
V = [14, 18, 11, 12, 29, 15, 3, 6]
C = 37"
1879,sub,16,2692504537512416,2692504537512416,1,2692504537512416,1,"{'ok': True, 'value': 2692504537512416, 'stdout': '2692504537512416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09219241142272949}",1,Compute: 6670438448128969 - 3977933910616553
1880,sub,4,3760,3760,1,3760,1,"{'ok': True, 'value': 3760, 'stdout': '3760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1015162467956543}",1,Compute: 9463 - 5703
1881,mul,4,8884155,8940455,0,8845395,0,"{'ok': True, 'value': 8884155, 'stdout': '8884155\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0868229866027832}",1,Compute: 3165 * 2807
1882,ilp_assign,32,118,187,0,205,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_pnw9meqb/main.py"", line 14, in <module>\n    prob += lpSum([C[i][j] * x[i][j] for i in range(n) for j in range(n)])\n  File ""/tmp/cot_exec_pnw9meqb/main.py"", line 14, in <listcomp>\n    prob += lpSum([C[i][j] * x[i][j] for i in range(n) for j in range(n)])\nTypeError: \'ellipsis\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17571163177490234}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[86, 29, 62, 18, 94, 50, 39], [73, 32, 8, 66, 22, 70, 53], [26, 12, 84, 65, 41, 55, 55], [45, 58, 40, 41, 78, 12, 12], [63, 67, 14, 45, 9, 67, 81], [35, 80, 25, 95, 82, 90, 62], [52, 79, 25, 11, 46, 24, 71]]"
1883,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09333658218383789}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 9, 1]"
1884,sub,32,9390050099509190461023897880908,0,0,91110140098509190460923907880908,0,"{'ok': True, 'value': 9390050099509190461023897880908, 'stdout': '9390050099509190461023897880908\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08636355400085449}",1,Compute: 82094709072058003617715323971830 - 72704658972548813156691426090922
1885,mul,4,79118190,127520,0,78988110,0,"{'ok': True, 'value': 79118190, 'stdout': '79118190\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09863734245300293}",1,Compute: 7970 * 9927
1886,ilp_prod,8,55,58,0,60,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_v4hnuvn9/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_v4hnuvn9/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1609039306640625}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 7, 7, 11]
consumption (rows=resources) = [[8, 5, 8, 5], [4, 6, 4, 3], [8, 8, 3, 4], [7, 7, 5, 4]]
capacity = [27, 25, 30, 20]
upper_bounds = [3, 3, 3, 5]"
1887,mul,32,583524110667878504679304761503542838868715368787745970411537696,33736186405674095704524737,0,580201441399163707554060710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 583524110667878504679304761503542838868715368787745970411537696, 'stdout': '583524110667878504679304761503542838868715368787745970411537696\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08751606941223145}",1,Compute: 25926595499964929062079199911079 * 22506777284686986321372325664224
1888,lcs,32,20,15,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09840512275695801}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbbcbabcacbddbaadbabacaaadbccbb""
T = ""cbbabbaccbababbcccdcaabdcbddcbb"""
1889,sub,2,53,53,1,53,1,"{'ok': True, 'value': 53, 'stdout': '53\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09319472312927246}",1,Compute: 87 - 34
1890,sub,4,90,90,1,90,1,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09465289115905762}",1,Compute: 3509 - 3419
1891,sub,32,27896677811482987843734049539609,0,0,27906557811483007843734050540611,0,"{'ok': True, 'value': 27896677811482987843734049539609, 'stdout': '27896677811482987843734049539609\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08455133438110352}",1,Compute: 99060287581476620129096065006142 - 71163609769993632285362015466533
1892,ilp_prod,8,88,65,0,3,0,"{'ok': True, 'value': 66, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4b5e114a6eab44709913422e8d4f9d24-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4b5e114a6eab44709913422e8d4f9d24-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 12 COLUMNS\nAt line 53 RHS\nAt line 61 BOUNDS\nAt line 66 ENDATA\nProblem MODEL has 7 rows, 4 columns and 28 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 66 - 0.00 seconds\nCgl0004I processed model has 5 rows, 4 columns (4 integer (0 of which binary)) and 20 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -66 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -66, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -66 to -66\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                66.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n66.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18526363372802734}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 13, 18, 12]
consumption (rows=resources) = [[1, 1, 8, 3], [2, 1, 4, 5], [4, 2, 4, 4], [5, 7, 5, 8]]
capacity = [31, 29, 22, 22]
upper_bounds = [4, 3, 3, 3]"
1893,knap,16,362,1043,0,0,0,"{'ok': True, 'value': 362, 'stdout': '362\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11252212524414062}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 17, 6, 28, 30, 23, 19, 28, 16, 5, 31, 6, 20, 32, 11, 11]
V = [41, 38, 43, 40, 25, 30, 52, 20, 30, 15, 1, 9, 11, 11, 23, 64]
C = 150"
1894,add,16,5691234157314390,6661234257314190,0,5791229157314390,0,"{'ok': True, 'value': 5691234157314390, 'stdout': '5691234157314390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08400726318359375}",1,Compute: 2921294839704593 + 2769939317609797
1895,ilp_assign,32,152,,0,209,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39719486236572266}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 24, 29, 76, 58, 66, 58], [70, 93, 1, 59, 11, 27, 88], [68, 39, 61, 26, 9, 18, 8], [67, 95, 43, 59, 49, 80, 74], [21, 87, 13, 59, 75, 32, 14], [21, 75, 37, 95, 70, 14, 12], [50, 24, 15, 88, 83, 72, 32]]"
1896,rod,32,2496,1055,0,68,0,"{'ok': True, 'value': 2496, 'stdout': '2496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09207868576049805}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [78, 69, 88, 33, 57, 37, 34, 30, 75, 12, 34, 9, 28, 92, 94, 77, 55, 11, 58, 45, 81, 3, 18, 3, 7, 95, 35, 55, 53, 87, 54, 68]"
1897,sub,4,6296,6296,1,6306,0,"{'ok': True, 'value': 6296, 'stdout': '6296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08357882499694824}",1,Compute: 7388 - 1092
1898,ilp_assign,16,57,105,0,114,0,"{'ok': True, 'value': 57, 'stdout': '57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4108150005340576}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 33, 14, 42, 36, 12, 21], [2, 39, 7, 45, 16, 6, 22], [26, 9, 34, 23, 28, 29, 19], [24, 1, 2, 45, 46, 3, 3], [5, 45, 36, 16, 7, 11, 11], [48, 9, 35, 46, 31, 25, 25], [10, 14, 20, 6, 6, 33, 8]]"
1899,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0985116958618164}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 4]"
1900,lcs,32,16,10,0,1,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10076904296875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcddadddbcddcbabadcbdbbbddcaabb""
T = ""cbccbbccbcdccccacabcacdabaabcab"""
1901,lcs,8,5,5,1,8,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09755277633666992}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addbdcdb""
T = ""bbdcdcdb"""
1902,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09784340858459473}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddd""
T = ""cdabb"""
1903,rod,16,576,65,0,64,0,"{'ok': True, 'value': 576, 'stdout': '576\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09244370460510254}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [36, 29, 23, 29, 24, 9, 43, 19, 16, 24, 33, 1, 42, 31, 14, 12]"
1904,ilp_prod,8,46,105,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_5eh2v0t4/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_5eh2v0t4/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17773103713989258}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 23, 21, 5]
consumption (rows=resources) = [[5, 7, 5, 7], [1, 8, 4, 5], [4, 1, 5, 2], [7, 6, 7, 6]]
capacity = [28, 22, 26, 16]
upper_bounds = [3, 3, 3, 3]"
1905,sub,8,66560357,-27,0,66560357,1,"{'ok': True, 'value': 66560357, 'stdout': '66560357\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09583139419555664}",1,Compute: 99227799 - 32667442
1906,ilp_prod,4,33,33,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_i46dls2k/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_i46dls2k/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1900019645690918}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 3, 9]
consumption (rows=resources) = [[3, 4, 2], [4, 4, 4], [3, 4, 3]]
capacity = [12, 14, 10]
upper_bounds = [3, 3, 3]"
1907,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09068822860717773}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 89, 16, 80, 16, 84, 62, 95, 25, 18, 11, 67, 19, 21, 86, 73, 8, 9, 84, 81, 30, 26, 59, 23]"
1908,mul{'ok': True, 'value': 50030264597818246097577714570420, 'stdout': '50030264597818246097577714570420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09769392013549805}",1,Compute: 6614614544193935 * 7563594864606732
1909,sub,32,73569879392683689580419464442400,74681243365826688886324736242303,0,73570879392683689580429464442400,0,"{'ok': True, 'value': 73569879392683689580419464442400, 'stdout': '73569879392683689580419464442400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08791089057922363}",1,Compute: 96338430578159586665050219370486 - 22768551185475897084630754928086
1910,sub,16,2584838256326048,2584838256326048,1,2584832256326048,0,"{'ok': True, 'value': 2584838256326048, 'stdout': '2584838256326048\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09225893020629883}",1,Compute: 3937609817065604 - 1352771560739556
1911,mul,32,2098827434536666301376938511041659828447607074270071280532166400,208043111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,0,210944444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 2098827434536666301376938511041659828447607074270071280532166400, 'stdout': '2098827434536666301376938511041659828447607074270071280532166400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09177589416503906}",1,Compute: 28541911131152360508733619197480 * 73534929910347862264392069731680
1912,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09680914878845215}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 4]"
1913,rod,4,12,6,0,3,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0864715576171875}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 2, 3, 3]"
1914,mul,16,8926676991929083532736756262092,2,0,89229749634132845427664012,0,"{'ok': True, 'value': 8926676991929083532736756262092, 'stdout': '8926676991929083532736756262092\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08414793014526367}",1,Compute: 2543085925707909 * 3510175138672988
1915,rod,4,28,14,0,7,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09962248802185059}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 7, 4, 6]"
1916,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0940396785736084}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 1, 5]"
1917,ilp_prod,32,323,1000,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ksi0ms5m/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ksi0ms5m/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15664005279541016}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 9, 79, 64, 4, 82]
consumption (rows=resources) = [[32, 8, 19, 5, 13, 31], [1, 28, 19, 32, 16, 26], [9, 13, 32, 12, 8, 5], [18, 19, 14, 20, 2, 26]]
capacity = [103, 102, 118, 108]
upper_bounds = [3, 3, 3, 3, 6, 3]"
1918,ilp_partition,16,1,1,1,13,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21045613288879395}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 7, 7, 24, 37, 15, 13, 44, 36, 42, 13, 22, 10, 17, 5, 41]"
1919,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09222674369812012}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""da"""
1920,ilp_prod,32,486,363,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_qk4asn2f/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_qk4asn2f/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17119503021240234}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 67, 42, 95, 74, 23]
consumption (rows=resources) = [[1, 4, 5, 1, 17, 14], [29, 10, 11, 25, 1, 30], [17, 8, 24, 4, 8, 1], [17, 25, 15, 10, 17, 8]]
capacity = [109, 66, 82, 99]
upper_bounds = [3, 3, 3, 3, 5, 3]"
1921,ilp_prod,2,40,31,0,20,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7dbe9936f07f4ec2a6aedc11d2454110-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7dbe9936f07f4ec2a6aedc11d2454110-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16291284561157227}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3]
consumption (rows=resources) = [[1, 1], [2, 3]]
capacity = [7, 10]
upper_bounds = [5, 3]"
1922,sub,16,757690826344643,7576990765344543,0,757690826344643,1,"{'ok': True, 'value': 757690826344643, 'stdout': '757690826344643\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0890510082244873}",1,Compute: 2605693361816161 - 1848002535471518
1923,knap,4,27,23,0,0,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10038876533508301}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 3, 2]
V = [14, 13, 16, 1]
C = 3"
1924,ilp_assign,8,15,46,0,1,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3fcce43a3c434a6abece14a2d5ba2259-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/3fcce43a3c434a6abece14a2d5ba2259-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 15\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 15 - took 0.00 seconds\nCbc0012I Integer solution of 15 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 15, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 15 to 15\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nMinimum total cost: 15.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1777632236480713}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 20, 2, 11, 9, 10, 14], [23, 18, 16, 19, 1, 10, 14], [1, 7, 24, 23, 3, 8, 10], [21, 17, 21, 8, 1, 14, 3], [19, 17, 8, 3, 9, 22, 4], [19, 13, 22, 23, 13, 4, 15], [3, 1, 9, 6, 12, 16, 8]]"
1925,ilp_assign,4,18,18,1,28,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37818384170532227}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 1, 11, 4], [10, 12, 8, 7], [7, 3, 3, 11], [7, 7, 8, 12]]"
1926,add,2,60,60,1,60,1,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08731794357299805}",1,Compute: 43 + 17
1927,add,16,14996891354036689,11111111111111111,0,15036891354036689,0,"{'ok': True, 'value': 14996891354036689, 'stdout': '14996891354036689\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08379626274108887}",1,Compute: 7667179829087170 + 7329711524949519
1928,rod,2,12,6,0,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08695864677429199}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 3]"
1929,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09815502166748047}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""adb"""
1930,add,16,15364854430195578,2666156812651000,0,15364852430195578,0,"{'ok': True, 'value': 15364854430195578, 'stdout': '15364854430195578\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08206343650817871}",1,Compute: 9383960190611010 + 5980894239584568
1931,ilp_prod,2,24,26,0,6,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1678f892b26f4daf8feb66ad012f111d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1678f892b26f4daf8feb66ad012f111d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 10.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16829657554626465}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[2, 2], [3, 1]]
capacity = [7, 6]
upper_bounds = [3, 3]"
1932,add,32,131336228302928772598326174680733,36411141146,0,131336228302928772608326174680733,0,"{'ok': True, 'value': 131336228302928772598326174680733, 'stdout': '131336228302928772598326174680733\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10034036636352539}",1,Compute: 79804440985685261739770046150677 + 51531787317243510858556128530056
1933,knap,16,466,136,0,29,0,"{'ok': True, 'value': 466, 'stdout': '466\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08888936042785645}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 31, 21, 24, 31, 31, 7, 20, 7, 17, 3, 8, 4, 4, 5, 30]
V = [42, 62, 44, 61, 38, 57, 42, 3, 54, 51, 7, 18, 62, 27, 38, 33]
C = 136"
1934,ilp_assign,2,5,2,0,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3821580410003662}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [6, 1]]"
1935,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_vvqgdknl/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_vvqgdknl/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08772468566894531}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 2]"
1936,ilp_prod,16,203,160,0,43,0,"{'ok': True, 'value': 203, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9d0fe630fe4b4bf1b10a5844336373ce-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9d0fe630fe4b4bf1b10a5844336373ce-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 207.091 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -195 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -203 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -206.75 to -203 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -203, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -206.75 to -203\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                203.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n203.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17903900146484375}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [28, 26, 40, 39, 47, 13]
consumption (rows=resources) = [[4, 5, 10, 9, 1, 12], [11, 16, 11, 6, 8, 15], [7, 12, 1, 3, 4, 3], [13, 8, 16, 3, 13, 16]]
capacity = [46, 32, 57, 43]
upper_bounds = [3, 3, 3, 5, 3, 3]"
1937,ilp_prod,8,110,105,0,3,0,"{'ok': True, 'value': 110, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/739c1a7b2ce64e18abad76a4d955956a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/739c1a7b2ce64e18abad76a4d955956a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 112 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -91 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -110 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -112 to -110 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -110, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -112 to -110\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                110.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n110.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16376852989196777}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 6, 18, 19]
consumption (rows=resources) = [[5, 7, 1, 4], [3, 7, 8, 3], [2, 7, 5, 3], [5, 4, 3, 3]]
capacity = [27, 32, 17, 29]
upper_bounds = [5, 3, 3, 5]"
1938,knap,8,108,103,0,0,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0875852108001709}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 3, 3, 10, 10, 14, 11, 15]
V = [8, 23, 29, 27, 3, 26, 23, 1]
C = 40"
1939,rod,8,56,22,0,0,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08727455139160156}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 2, 16, 1, 6, 4, 6, 17]"
1940,ilp_partition,16,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22200727462768555}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [42, 36, 14, 3, 27, 46, 27, 3, 3, 26, 12, 7, 47, 26, 16, 45]"
1941,lcs,16,10,6,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08429551124572754}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabbddcadaddaabd""
T = ""dcbdcbaadacbbdbba"""
1942,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1512012481689453}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccbbbba""
T = ""abccdcdb"""
1943,ilp_assign,8,28,46,0,52,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3853623867034912}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 12, 17, 17, 6, 16, 3], [7, 16, 12, 16, 24, 20, 14], [9, 6, 24, 1, 21, 16, 9], [2, 3, 20, 21, 24, 2, 12], [18, 16, 14, 19, 21, 16, 4], [7, 22, 2, 12, 13, 9, 12], [17, 20, 11, 5, 11, 5, 4]]"
1944,ilp_prod,4,26,40,0,27,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f07d94927f0b4aa9a8ef552bb9b4e5e0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f07d94927f0b4aa9a8ef552bb9b4e5e0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20036530494689941}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 10, 5]
consumption (rows=resources) = [[1, 4, 3], [2, 1, 4], [1, 4, 3]]
capacity = [8, 11, 12]
upper_bounds = [5, 3, 3]"
1945,add,4,12881,13086,0,12881,1,"{'ok': True, 'value': 12881, 'stdout': '12881\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09088706970214844}",1,Compute: 7585 + 5296
1946,ilp_prod,32,332,The solution to the problem is to use a linear programming approach to find the optimal solution.,0,24,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d1ea9362bdae448880dece1e3dd32649-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d1ea9362bdae448880dece1e3dd32649-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 20 COLUMNS\nAt line 129 RHS\nAt line 145 BOUNDS\nAt line 152 ENDATA\nProblem MODEL has 15 rows, 6 columns and 90 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 22.125 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1769413948059082}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [59, 3, 23, 47, 96, 91]
consumption (rows=resources) = [[22, 23, 21, 31, 30, 15], [1, 2, 31, 26, 5, 6], [13, 18, 13, 20, 5, 24], [23, 24, 25, 9, 22, 9]]
capacity = [74, 103, 88, 96]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1947,rod,2,6,6,1,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10489726066589355}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
1948,knap,8,92,110,0,0,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08997249603271484}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 6, 2, 6, 6, 14, 7, 10]
V = [4, 4, 15, 2, 24, 17, 30, 19]
C = 32"
1949,sub,8,13546653,13546653,1,13546653,1,"{'ok': True, 'value': 13546653, 'stdout': '13546653\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09006381034851074}",1,Compute: 81759896 - 68213243
1950,lcs,8,4,5,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10891056060791016}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaacddcb""
T = ""ddaccba"""
1951,lcs,2,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0817878246307373}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""ddc"""
1952,ilp_prod,16,117,0,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ssupa812/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ssupa812/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15718603134155273}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 21, 12, 13, 20, 25]
consumption (rows=resources) = [[4, 5, 12, 14, 4, 7], [12, 13, 6, 6, 13, 9], [5, 2, 12, 1, 9, 16], [11, 6, 7, 3, 2, 7]]
capacity = [33, 63, 54, 57]
upper_bounds = [5, 4, 3, 3, 4, 3]"
1953,sub,32,43139067253230616747178607113169,43139067253230616747178607113169,1,43139067253230616747178607113170,0,"{'ok': True, 'value': 43139067253230616747178607113169, 'stdout': '43139067253230616747178607113169\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08864450454711914}",1,Compute: 65624929539810199463405970526744 - 22485862286579582716227363413575
1954,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09394693374633789}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
1955,ilp_prod,32,241,1069,0,4,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/45233e4cc8014648acffeec186e8be14-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/45233e4cc8014648acffeec186e8be14-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 94 RHS\nAt line 105 BOUNDS\nAt line 112 ENDATA\nProblem MODEL has 10 rows, 6 columns and 60 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 7.04348 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17168760299682617}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [54, 35, 26, 31, 60, 22]
consumption (rows=resources) = [[7, 1, 27, 3, 1, 23], [24, 16, 16, 23, 31, 10], [10, 18, 19, 17, 19, 14], [26, 9, 11, 23, 4, 6]]
capacity = [96, 108, 88, 123]
upper_bounds = [4, 4, 3, 4, 3, 4]"
1956,sub,2,11,11,1,11,1,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09533381462097168}",1,Compute: 96 - 85
1957,ilp_prod,16,420,187,0,40,0,"{'ok': True, 'value': 420, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fb7d2dc9617c48d2968c5ae0c14089d2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fb7d2dc9617c48d2968c5ae0c14089d2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 445.2 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -410 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -420 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -445.2 to -420 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 2.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -420, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -445.2 to -420\nProbing was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                420.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n420.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17118000984191895}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [32, 27, 25, 45, 42, 27]
consumption (rows=resources) = [[3, 7, 2, 11, 3, 4], [11, 12, 9, 6, 3, 12], [2, 14, 8, 14, 6, 12], [9, 6, 6, 8, 1, 8]]
capacity = [46, 44, 60, 40]
upper_bounds = [4, 3, 4, 4, 10, 3]"
1958,knap,8,72,103,0,0,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09226536750793457}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 14, 12, 8, 5, 12, 13, 13]
V = [19, 13, 14, 5, 25, 14, 12, 13]
C = 45"
1959,knap,32,1470,124,0,2,0,"{'ok': True, 'value': 1470, 'stdout': '1470\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10858917236328125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [60, 47, 46, 35, 4, 26, 1, 24, 53, 51, 11, 62, 50, 7, 7, 2, 46, 19, 45, 57, 20, 34, 63, 16, 47, 15, 41, 22, 32, 17, 52, 6]
V = [79, 31, 94, 57, 62, 118, 35, 8, 11, 14, 55, 67, 59, 55, 34, 6, 20, 10, 54, 95, 6, 55, 115, 124, 40, 100, 94, 80, 73, 91, 5, 48]
C = 509"
1960,ilp_assign,32,129,205,0,1,0,"{'ok': True, 'value': 129, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b65c7f9c9d7e4d3ea602653488343990-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/b65c7f9c9d7e4d3ea602653488343990-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 129 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 129\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 129 - took 0.00 seconds\nCbc0012I Integer solution of 129 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 129, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 129 to 129\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                129.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 129.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16873741149902344}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[93, 31, 18, 67, 49, 56, 41], [60, 64, 23, 35, 7, 67, 68], [95, 9, 25, 51, 23, 84, 85], [90, 32, 26, 95, 18, 43, 44], [54, 83, 54, 91, 50, 18, 53], [89, 3, 18, 17, 92, 93, 20], [16, 32, 83, 72, 15, 90, 75]]"
1961,knap,8,92,105,0,0,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08392477035522461}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 1, 15, 16, 9, 6, 1, 14]
V = [23, 20, 28, 4, 3, 3, 16, 28]
C = 34"
1962,ilp_assign,16,84,115,0,117,0,"{'ok': True, 'value': 84, 'stdout': '84\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4107353687286377}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 16, 39, 19, 35, 48, 44], [46, 27, 25, 11, 8, 6, 41], [1, 4, 33, 44, 14, 40, 35], [20, 8, 38, 16, 45, 38, 12], [26, 5, 43, 19, 14, 8, 7], [27, 44, 33, 45, 46, 2, 12], [31, 18, 39, 22, 22, 26, 39]]"
1963,ilp_partition,8,0,1,0,14,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1030886173248291}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 20, 3, 4, 7, 3, 23, 14]"
1964,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10338377952575684}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adacacacaacddbac""
T = ""daadabbdbacabccb"""
1965,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10944247245788574}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
1966,mul,32,3674809937610102374323329138489091810220226110465615043281719981,368079999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,368043433686932665239285674466560664644666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 3674809937610102374323329138489091810220226110465615043281719981, 'stdout': '3674809937610102374323329138489091810220226110465615043281719981\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0914926528930664}",1,Compute: 46204933882136973773786286525553 * 79532847011188987034340091770877
1967,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09750699996948242}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baddccbc""
T = ""cdbdbbdd"""
1968,mul,4,49369738,10097,0,49339988,0,"{'ok': True, 'value': 49369738, 'stdout': '49369738\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10230469703674316}",1,Compute: 6677 * 7394
1969,sub,4,378,378,1,-378,0,"{'ok': True, 'value': 378, 'stdout': '378\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10145163536071777}",1,Compute: 3817 - 3439
1970,rod,4,32,32,1,2,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09022378921508789}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 2, 6, 7]"
1971,mul,8,2018135941751350,19687500000000,0,20194445539755,0,"{'ok': True, 'value': 2018135941751350, 'stdout': '2018135941751350\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09273719787597656}",1,Compute: 41039785 * 49175110
1972,rod,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10350513458251953}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 5]"
1973,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1064748764038086}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 17, 14, 2, 10, 1, 3, 20]"
1974,mul,16,16824522204581804210409883109974,139576515307776340,0,17449446626335488468684958468094568,0,"{'ok': True, 'value': 16824522204581804210409883109974, 'stdout': '16824522204581804210409883109974\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09881424903869629}",1,Compute: 6978825765388817 * 2410795565068022
1975,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09552478790283203}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
1976,ilp_assign,2,7,8,0,8,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3936920166015625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [6, 2]]"
1977,ilp_partition,4,2,0,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11430001258850098}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 8, 8, 1]"
1978,mul,4,40707024,40760384,0,92,0,"{'ok': True, 'value': 40707024, 'stdout': '40707024\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08603668212890625}",1,Compute: 7698 * 5288
1979,ilp_prod,2,48,36,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6ewcvks7/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 8*x[1]], ""Total Profit"")\nTypeError: lpSum() takes 1 positional argument but 2 were given\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16040539741516113}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 8]
consumption (rows=resources) = [[3, 1], [2, 1]]
capacity = [9, 6]
upper_bounds = [3, 6]"
1980,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11246156692504883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabc""
T = ""daddc"""
1981,ilp_prod,8,74,85,0,32,0,"{'ok': True, 'value': 74, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/eb7a892afc5e4f2fa7519cc4f6f875f1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/eb7a892afc5e4f2fa7519cc4f6f875f1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 81.3846 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -55 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -74 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -74, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -77.7037 to -74\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                74.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n74.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1773698329925537}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 7, 18, 12]
consumption (rows=resources) = [[1, 8, 8, 3], [7, 2, 4, 8], [7, 6, 4, 1], [1, 5, 7, 3]]
capacity = [23, 23, 29, 32]
upper_bounds = [3, 3, 3, 3]"
1982,ilp_partition,32,0,10,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21268010139465332}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [48, 29, 88, 12, 37, 55, 25, 70, 83, 4, 45, 30, 60, 65, 89, 67, 13, 15, 64, 85, 23, 38, 60, 11]"
1983,add,4,7511,7511,1,7511,1,"{'ok': True, 'value': 7511, 'stdout': '7511\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0925455093383789}",1,Compute: 1223 + 6288
1984,add,32,123679108732816898923774646636016,96500100732816900923734146535926,0,123679110732816898923774646836016,0,"{'ok': True, 'value': 123679108732816898923774646636016, 'stdout': '123679108732816898923774646636016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12405776977539062}",1,Compute: 63734012748193020638057375234088 + 59945095984623878285717271401928
1985,ilp_prod,2,21,21,1,21,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_9c26diyt/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 7*x[1]], ""Total Profit"")\nTypeError: lpSum() takes 1 positional argument but 2 were given\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22216105461120605}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[3, 2], [2, 2]]
capacity = [8, 6]
upper_bounds = [3, 3]"
1986,ilp_assign,2,5,10,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.44754886627197266}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [4, 4]]"
1987,rod,32,1504,1055,0,14,0,"{'ok': True, 'value': 1504, 'stdout': '1504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0943605899810791}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [47, 60, 64, 54, 41, 82, 11, 57, 76, 15, 52, 31, 20, 5, 10, 75, 44, 94, 15, 33, 75, 28, 29, 48, 50, 14, 92, 9, 68, 38, 72, 24]"
1988,ilp_assign,16,48,105,0,0,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a12c1bef77ad4a37a2d1f4b3c38563e4-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/a12c1bef77ad4a37a2d1f4b3c38563e4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 48 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 48\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 48 - took 0.00 seconds\nCbc0012I Integer solution of 48 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 48, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 48 to 48\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nMinimum total cost: 48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17016386985778809}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[28, 19, 5, 30, 22, 10, 45], [35, 8, 18, 10, 37, 18, 11], [22, 16, 29, 29, 48, 17, 7], [19, 22, 2, 1, 38, 2, 48], [31, 22, 4, 41, 26, 1, 3], [4, 5, 6, 47, 19, 22, 4], [21, 45, 35, 4, 48, 46, 21]]"
1989,add,2,115,115,1,115,1,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09155893325805664}",1,Compute: 79 + 36
1990,lcs,32,21,10,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09050607681274414}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcddcbcbbbcbabdccdaaaddcbcccdbac""
T = ""bbdcbdcdbcbbcddbaddccaccbabccbad"""
1991,ilp_assign,2,6,6,1,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.398867130279541}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3], [6, 3]]"
1992,ilp_assign,16,90,83,0,1,0,"{'ok': True, 'value': 90, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/525f14582af24b57974f82aa94f477eb-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/525f14582af24b57974f82aa94f477eb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 90 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 90\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 90 - took 0.00 seconds\nCbc0012I Integer solution of 90 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 90, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 90 to 90\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                90.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\nStatus: Optimal\nMinimum total cost: 90.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17433738708496094}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 2, 39, 12, 46, 20, 17], [11, 12, 27, 39, 30, 6, 26], [37, 12, 22, 29, 36, 15, 21], [25, 47, 34, 16, 4, 25, 19], [46, 46, 24, 30, 41, 8, 47], [42, 34, 20, 36, 42, 19, 30], [36, 22, 35, 44, 20, 17, 23]]"
1993,lcs,16,9,8,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08934974670410156}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadbabddaadcbaac""
T = ""ddcbdcadadaaabc"""
1994,knap,2,9,4,0,-1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10934257507324219}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 1]
V = [1, 1, 8]
C = 4"
1995,ilp_prod,8,66,105,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_9v6e6l2m/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_9v6e6l2m/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.153472900390625}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 22, 19]
consumption (rows=resources) = [[7, 2, 7, 6], [4, 6, 6, 6], [6, 3, 6, 6], [2, 5, 6, 5]]
capacity = [25, 20, 29, 28]
upper_bounds = [3, 3, 3, 3]"
1996,sub,8,44146289,44146289,1,44146289,1,"{'ok': True, 'value': 44146289, 'stdout': '44146289\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08893156051635742}",1,Compute: 99408075 - 55261786
1997,ilp_prod,2,12,20,0,18,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/668c036a66e245df8a0b89fa3cda8498-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/668c036a66e245df8a0b89fa3cda8498-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1832282543182373}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[3, 3], [1, 2]]
capacity = [6, 7]
upper_bounds = [3, 3]"
1998,ilp_partition,4,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08573198318481445}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 4, 3, 8]"
1999,ilp_prod,8,49,103,0,24,0,"{'ok': True, 'value': 92, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6bb389c0a9b440c6b8d9a98b91476d22-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6bb389c0a9b440c6b8d9a98b91476d22-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 92 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -92 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -92, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -92 to -92\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                92.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n92.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1725931167602539}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 7, 3, 5]
consumption (rows=resources) = [[3, 1, 6, 6], [8, 7, 4, 7], [1, 6, 7, 8], [7, 5, 2, 3]]
capacity = [25, 21, 28, 24]
upper_bounds = [3, 3, 4, 3]"
