idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,mul,8,7008056456815568,6954468535365248,0,7003038336896,0,"{'ok': True, 'value': 7008056456815568, 'stdout': '7008056456815568\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14374089241027832}",1,Compute: 76207208 * 91960546
1,ilp_assign,8,22,18,0,46,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.5542523860931396}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 15, 9, 16, 24, 2, 1], [11, 16, 23, 1, 8, 18, 5], [2, 13, 4, 8, 2, 10, 20], [12, 4, 4, 9, 9, 24, 5], [8, 18, 24, 20, 5, 16, 2], [14, 15, 23, 1, 1, 11, 21], [14, 10, 16, 2, 24, 15, 11]]"
2,ilp_partition,16,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19454455375671387}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 45, 14, 11, 33, 23, 27, 33, 16, 19, 42, 28, 46, 37, 26, 42]"
3,lcs,2,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09004950523376465}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""bcd"""
4,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0806276798248291}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccbaadbbaddcdcbacbbcdabdcbddbda""
T = ""cacbbaabdadabbabadaaaacbdbdccca"""
5,lcs,16,8,6,0,16,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09209918975830078}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbbbbddcacdacbc""
T = ""adcaabadaccbbccd"""
6,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0852208137512207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacd""
T = ""cba"""
7,rod,8,64,22,0,1,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08792781829833984}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [8, 1, 4, 7, 14, 22, 10, 16]"
8,ilp_partition,16,0,1,0,0,1,"{'ok': True, 'value': 366, 'stdout': '366\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09311437606811523}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 42, 38, 28, 39, 16, 34, 12, 12, 45, 22, 21, 13, 42, 1, 19]"
9,knap,32,1654,1048,0,40,0,"{'ok': True, 'value': 1654, 'stdout': '1654\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08186578750610352}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 59, 28, 48, 6, 64, 37, 52, 36, 19, 49, 32, 3, 22, 34, 35, 59, 40, 56, 19, 1, 28, 34, 25, 1, 21, 8, 4, 39, 64, 24, 27]
V = [44, 17, 76, 40, 48, 73, 91, 108, 87, 89, 52, 16, 72, 108, 60, 33, 113, 100, 46, 4, 39, 23, 56, 122, 7, 7, 124, 95, 105, 92, 110, 13]
C = 488"
10,ilp_prod,32,362,1000,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_t1__6952/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_t1__6952/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20297551155090332}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [88, 38, 20, 34, 74, 13]
consumption (rows=resources) = [[32, 9, 17, 3, 8, 6], [22, 17, 31, 28, 7, 3], [22, 9, 30, 21, 24, 30], [1, 21, 24, 17, 32, 13]]
capacity = [97, 84, 102, 124]
upper_bounds = [3, 4, 3, 3, 3, 3]"
11,sub,32,46284063327858623697753428588035,44344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344344,0,46283963327858623700053428588035,0,"{'ok': True, 'value': 46284063327858623697753428588035, 'stdout': '46284063327858623697753428588035\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08931446075439453}",1,Compute: 93331590892230411336968269375003 - 47047527564371787639214840786968
12,ilp_prod,16,168,The solution to the problem is to use a linear programming approach to find the optimal solution.,0,0,0,"{'ok': True, 'value': 168, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a8bc5ca38b094d21bba1050148fa93b9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a8bc5ca38b094d21bba1050148fa93b9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 203.127 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -168 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 0 rows 0 columns\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0031I 2 added rows had average density of 2\nCbc0013I At root node, 2 cuts changed objective from -201.46154 to -177.5 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 1.0 elements, 5 column cuts (5 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -168, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -201.462 to -177.5\nProbing was tried 2 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                168.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nThe maximum profit is: 168.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1502525806427002}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 42, 23, 19, 42, 4]
consumption (rows=resources) = [[11, 16, 11, 12, 3, 12], [9, 6, 11, 2, 8, 3], [10, 4, 16, 16, 12, 7], [14, 7, 8, 6, 8, 15]]
capacity = [45, 34, 44, 55]
upper_bounds = [3, 3, 3, 3, 3, 3]"
13,add,2,134,134,1,134,1,"{'ok': True, 'value': 134, 'stdout': '134\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07283544540405273}",1,Compute: 97 + 37
14,knap,8,112,143,0,0,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08511114120483398}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 5, 16, 13, 7, 7, 2, 11]
V = [13, 31, 18, 12, 32, 27, 4, 10]
C = 38"
15,ilp_partition,4,1,2,0,3,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08119058609008789}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 10, 8, 3]"
16,ilp_prod,32,760,0,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_tjv73_ip/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_tjv73_ip/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1615467071533203}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 95, 3, 51, 61, 24]
consumption (rows=resources) = [[5, 10, 22, 26, 3, 30], [6, 13, 8, 29, 24, 18], [5, 6, 14, 4, 30, 16], [7, 9, 19, 20, 11, 2]]
capacity = [81, 121, 118, 112]
upper_bounds = [10, 8, 3, 3, 3, 3]"
17,lcs,32,19,15,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07309603691101074}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddbcddabdabcdbaddbcaaaababdccca""
T = ""bbbcddbadccbacbdccacbcdbdccabcc"""
18,lcs,32,20,10,0,1,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09110236167907715}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbadbccbadcdcbbadcccbcacbbbabac""
T = ""baaadacbdbcaccbbccdcadbdacbabba"""
19,mul,32,2439363823747521218717279597714182308571042033437643225257443680,"The actual computation of the multiplication result is not feasible due to the size of the numbers. However, the correct result of the multiplication can be obtained by following the chain of reasoning outlined in the 'rationale' key.",0,244441348485548559565904456464648648000,0,"{'ok': True, 'value': 2439363823747521218717279597714182308571042033437643225257443680, 'stdout': '2439363823747521218717279597714182308571042033437643225257443680\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07574462890625}",1,Compute: 30363165647717622613158196731040 * 80339574998527416325655743109167
20,ilp_prod,16,162,161,0,9,0,"{'ok': True, 'value': 72, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8e5df205ee5c45ef9b2336c3a8e18cee-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8e5df205ee5c45ef9b2336c3a8e18cee-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 29 COLUMNS\nAt line 192 RHS\nAt line 217 BOUNDS\nAt line 224 ENDATA\nProblem MODEL has 24 rows, 6 columns and 144 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 85.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -72 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                72.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n72.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15131497383117676}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 45, 11, 48, 35, 26]
consumption (rows=resources) = [[5, 15, 15, 12, 16, 8], [9, 6, 11, 16, 1, 15], [13, 5, 14, 11, 6, 1], [14, 3, 7, 1, 2, 4]]
capacity = [40, 38, 47, 43]
upper_bounds = [3, 3, 3, 3, 3, 3]"
21,mul,16,79521195414545686360242149319648,9129,0,81072192612158140496888558486864496,0,"{'ok': True, 'value': 79521195414545686360242149319648, 'stdout': '79521195414545686360242149319648\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08968067169189453}",1,Compute: 8710499820042756 * 9129349297679608
22,add,8,109880334,109880334,1,119880334,0,"{'ok': True, 'value': 109880334, 'stdout': '109880334\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0865471363067627}",1,Compute: 43988860 + 65891474
23,knap,2,14,13,0,0,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07799196243286133}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 4]
V = [8, 6, 5]
C = 3"
24,add,4,13122,13127,0,13122,1,"{'ok': True, 'value': 13122, 'stdout': '13122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08606529235839844}",1,Compute: 3527 + 9595
25,lcs,16,10,6,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0984804630279541}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccddcaddadbcacbd""
T = ""adddcdbdcababdcca"""
26,knap,2,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07621002197265625}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 4]
V = [1, 2, 4]
C = 4"
27,ilp_prod,8,72,100,0,96,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/634524061f6345a386de4b9a0f047ddf-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/634524061f6345a386de4b9a0f047ddf-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18099713325500488}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 3, 17, 23]
consumption (rows=resources) = [[4, 1, 1, 2], [1, 4, 6, 2], [7, 4, 6, 7], [5, 3, 5, 5]]
capacity = [24, 27, 23, 23]
upper_bounds = [3, 5, 3, 3]"
28,ilp_partition,4,5,1,0,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u5rma0b5/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_u5rma0b5/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08205628395080566}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 3, 1, 1]"
29,ilp_assign,32,127,185,0,16,0,"{'ok': True, 'value': 127, 'stdout': '127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38242459297180176}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 48, 60, 30, 30, 31, 26], [95, 47, 25, 38, 30, 54, 2], [9, 16, 84, 10, 28, 9, 56], [75, 67, 60, 28, 43, 70, 69], [32, 66, 91, 42, 47, 92, 50], [64, 8, 74, 70, 84, 10, 21], [76, 53, 18, 55, 11, 68, 16]]"
30,rod,8,176,25,0,0,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08184623718261719}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 6, 1, 7, 2, 1, 3, 13]"
31,sub,2,50,50,1,50,1,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07222676277160645}",1,Compute: 94 - 44
32,knap,4,39,22,0,0,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07653427124023438}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 8, 1]
V = [12, 11, 6, 16]
C = 7"
33,ilp_prod,16,105,136,0,160,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_b5v5kzjt/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_b5v5kzjt/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1470332145690918}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 34, 19, 17, 35, 23]
consumption (rows=resources) = [[12, 6, 1, 3, 13, 12], [9, 15, 13, 8, 11, 8], [14, 6, 4, 6, 4, 15], [6, 5, 1, 11, 7, 1]]
capacity = [51, 36, 45, 35]
upper_bounds = [3, 3, 3, 3, 3, 3]"
34,mul{'ok': True, 'value': 8843571146362744864202369443870194047609287618227074493124627644, 'stdout': '8843571146362744864202369443870194047609287618227074493124627644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09305500984191895}",1,Compute: 91214390228726014312237586156604 * 96953683779356691421836770913761
35,add,16,5374459878029660,5374459877029660,0,5374465878030660,0,"{'ok': True, 'value': 5374459878029660, 'stdout': '5374459878029660\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09678387641906738}",1,Compute: 3019187998619609 + 2355271879410051
36,add,2,87,87,1,87,1,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07157611846923828}",1,Compute: 21 + 66
37,ilp_assign,16,61,110,0,113,0,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3981630802154541}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 10, 30, 27, 45, 36, 4], [37, 9, 23, 28, 45, 17, 46], [44, 15, 2, 28, 12, 40, 47], [12, 16, 32, 47, 14, 41, 9], [36, 47, 11, 42, 32, 10, 2], [38, 3, 31, 10, 13, 28, 16], [30, 42, 10, 45, 17, 25, 16]]"
38,rod,8,96,22,0,30,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08278727531433105}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 14, 7, 6, 1, 14, 2, 8]"
39,knap,4,16,13,0,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08000326156616211}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 2, 3, 7]
V = [2, 9, 7, 2]
C = 9"
40,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07403230667114258}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddab""
T = ""babb"""
41,ilp_prod,8,47,70,0,2,0,"{'ok': True, 'value': 68, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d2d780f6e0e24d3b9643fccbb35d63f5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d2d780f6e0e24d3b9643fccbb35d63f5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 69.5556 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -51 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -68 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -69.555556 to -68 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -68, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -69.5556 to -68\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                68.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n68.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1644902229309082}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 9, 6, 17]
consumption (rows=resources) = [[4, 7, 7, 7], [1, 5, 1, 1], [8, 7, 3, 3], [4, 7, 5, 2]]
capacity = [17, 29, 20, 30]
upper_bounds = [3, 3, 3, 3]"
42,add,4,14815,14815,1,14815,1,"{'ok': True, 'value': 14815, 'stdout': '14815\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08339405059814453}",1,Compute: 6590 + 8225
43,knap,2,12,15,0,0,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07374358177185059}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 2]
V = [8, 10, 2]
C = 5"
44,ilp_assign,32,119,250,0,95,0,"{'ok': True, 'value': 119, 'stdout': '119\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3833644390106201}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 93, 13, 52, 32, 59, 93], [13, 82, 5, 54, 83, 27, 5], [94, 74, 15, 81, 44, 36, 80], [73, 20, 32, 59, 54, 39, 1], [79, 46, 42, 31, 43, 62, 87], [85, 10, 10, 55, 73, 77, 51], [73, 1, 2, 43, 76, 49, 95]]"
45,ilp_assign,32,92,,0,105,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3919639587402344}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 86, 90, 95, 86, 64, 3], [26, 50, 19, 60, 11, 39, 1], [47, 4, 74, 90, 56, 85, 86], [45, 86, 72, 57, 87, 34, 3], [96, 52, 46, 50, 35, 69, 29], [35, 51, 20, 84, 20, 9, 55], [79, 58, 32, 19, 4, 1, 66]]"
46,ilp_partition,16,0,1,0,39,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21724939346313477}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [35, 8, 31, 34, 11, 18, 39, 17, 29, 39, 38, 4, 39, 11, 9, 24]"
47,sub,4,1722,1722,1,1722,1,"{'ok': True, 'value': 1722, 'stdout': '1722\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07607221603393555}",1,Compute: 7295 - 5573
48,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07754254341125488}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 83, 55, 31, 89, 42, 36, 40, 94, 11, 93, 47, 61, 71, 24, 92, 23, 69, 54, 76, 48, 12, 40, 3]"
49,knap,8,103,103,1,8,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08643054962158203}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 5, 13, 12, 6, 6, 6, 5]
V = [32, 6, 29, 12, 19, 18, 23, 29]
C = 31"
50,mul,8,4737902145006240,440287800,0,47486338965280,0,"{'ok': True, 'value': 4737902145006240, 'stdout': '4737902145006240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08555841445922852}",1,Compute: 88057560 * 53804604
51,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07508182525634766}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""cd"""
52,ilp_assign,16,51,114,0,117,0,"{'ok': True, 'value': 51, 'stdout': '51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3860464096069336}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 17, 44, 6, 24, 25, 15], [28, 5, 14, 34, 45, 15, 12], [13, 1, 36, 2, 34, 3, 5], [24, 31, 28, 14, 32, 22, 12], [11, 38, 42, 13, 23, 22, 6], [9, 32, 2, 48, 6, 14, 40], [23, 45, 13, 20, 16, 1, 45]]"
53,add,16,11129186012778022,3259249688383202,0,11129286012738022,0,"{'ok': True, 'value': 11129186012778022, 'stdout': '11129186012778022\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08623051643371582}",1,Compute: 1256484688383202 + 9872701324394820
54,add,2,139,139,1,139,1,"{'ok': True, 'value': 139, 'stdout': '139\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08601903915405273}",1,Compute: 66 + 73
55,sub,8,12544167,12544167,1,12544167,1,"{'ok': True, 'value': 12544167, 'stdout': '12544167\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08622908592224121}",1,Compute: 47150831 - 34606664
56,ilp_assign,8,30,46,0,80,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38581228256225586}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 22, 8, 3, 15, 8, 21], [9, 21, 1, 17, 20, 11, 7], [12, 19, 22, 10, 12, 23, 7], [22, 12, 11, 18, 18, 9, 14], [3, 13, 7, 24, 15, 24, 19], [7, 7, 11, 16, 15, 1, 2], [10, 5, 17, 13, 3, 10, 18]]"
57,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07585310935974121}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babcacdcdccdbcaddbbcacdbcbddadbd""
T = ""baaacacdbcdcacadbdaadacddababbca"""
58,add,32,113752892887806529379746551796338,99806663807335567100404330,0,113752892887806529380746551796338,0,"{'ok': True, 'value': 113752892887806529379746551796338, 'stdout': '113752892887806529379746551796338\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0768580436706543}",1,Compute: 81197220983638795811871251392008 + 32555671904167733567875300404330
59,knap,32,1420,1043,0,43,0,"{'ok': True, 'value': 1420, 'stdout': '1420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07953214645385742}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 44, 59, 58, 41, 20, 35, 5, 29, 45, 19, 23, 46, 1, 54, 30, 8, 14, 43, 55, 7, 41, 21, 32, 7, 35, 24, 13, 27, 15, 19, 60]
V = [82, 32, 57, 116, 122, 105, 17, 3, 88, 46, 36, 60, 97, 37, 47, 32, 68, 84, 51, 9, 103, 66, 39, 11, 25, 110, 46, 82, 24, 2, 19, 20]
C = 468"
60,mul,16,23869832869051607832974999712698,26454116094166542594486,0,23840417611326556,0,"{'ok': True, 'value': 23869832869051607832974999712698, 'stdout': '23869832869051607832974999712698\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06623959541320801}",1,Compute: 7916039203775519 * 3015375777531142
61,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_txkohec1/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_txkohec1/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08581757545471191}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
62,mul,4,2903290,1495,0,2875890,0,"{'ok': True, 'value': 2903290, 'stdout': '2903290\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08115625381469727}",1,Compute: 1942 * 1495
63,ilp_partition,16,0,1,0,26,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22060680389404297}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 21, 27, 32, 35, 1, 26, 23, 22, 13, 1, 29, 9, 24, 22, 46]"
64,ilp_prod,2,15,22,0,3,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9972169afdf149a3acb40341538da50f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9972169afdf149a3acb40341538da50f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -3 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                3.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 3.0\nProduct_0: 1.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1544489860534668}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 4]
consumption (rows=resources) = [[2, 1], [1, 3]]
capacity = [6, 10]
upper_bounds = [3, 3]"
65,rod,16,768,13,0,155,0,"{'ok': True, 'value': 768, 'stdout': '768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08899736404418945}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [48, 29, 47, 25, 7, 8, 5, 41, 2, 2, 34, 20, 5, 17, 40, 30]"
66,add,2,53,53,1,53,1,"{'ok': True, 'value': 53, 'stdout': '53\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08728528022766113}",1,Compute: 23 + 30
67,mul,4,37221956,3714556,0,37139666,0,"{'ok': True, 'value': 37221956, 'stdout': '37221956\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08466196060180664}",1,Compute: 4819 * 7724
68,mul,8,5750034711678630,577231063390,0,5741304353530,0,"{'ok': True, 'value': 5750034711678630, 'stdout': '5750034711678630\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0735025405883789}",1,Compute: 81995390 * 70126317
69,rod,32,1536,1050,0,48,0,"{'ok': True, 'value': 1536, 'stdout': '1536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08025741577148438}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [48, 52, 4, 31, 50, 8, 22, 50, 28, 96, 13, 47, 2, 46, 8, 20, 61, 90, 9, 83, 3, 88, 15, 72, 52, 65, 2, 42, 89, 80, 89, 66]"
70,ilp_prod,32,466,256,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ubex3gko/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ubex3gko/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1542680263519287}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [71, 3, 5, 61, 40, 51]
consumption (rows=resources) = [[12, 14, 3, 19, 6, 12], [10, 12, 22, 22, 21, 26], [12, 1, 11, 4, 22, 25], [8, 15, 11, 17, 3, 30]]
capacity = [78, 95, 95, 87]
upper_bounds = [6, 5, 4, 4, 4, 3]"
71,sub,2,49,49,1,49,1,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07683610916137695}",1,Compute: 75 - 26
72,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39179158210754395}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [5, 3]]"
73,knap,4,17,14,0,3,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09206509590148926}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 8, 2]
V = [5, 11, 3, 6]
C = 9"
74,knap,16,314,1043,0,-1,0,"{'ok': True, 'value': 314, 'stdout': '314\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09053492546081543}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 14, 21, 2, 5, 6, 21, 28, 4, 32, 8, 1, 30, 16, 31, 19]
V = [49, 45, 34, 27, 8, 16, 14, 16, 6, 11, 23, 38, 53, 8, 11, 15]
C = 123"
75,sub,32,345489093626344652230334328219,5540655560104570600000000,0,34554890936263443522302344328219,0,"{'ok': True, 'value': 345489093626344652230334328219, 'stdout': '345489093626344652230334328219\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09275555610656738}",1,Compute: 56385766589911736819336902299653 - 56040277496285392167106567971434
76,ilp_assign,2,5,4,0,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37448644638061523}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5], [4, 3]]"
77,lcs,32,17,10,0,1,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08517575263977051}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcadbabadbacdaadddddaddcbdbcdca""
T = ""abbccdccaddccdcdcdbccbcdbbaccbc"""
78,ilp_assign,4,10,3,0,18,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4005310535430908}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 10, 3, 1], [4, 5, 8, 10], [9, 1, 6, 1], [3, 12, 4, 5]]"
79,knap,4,20,18,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08788251876831055}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 1, 3, 6]
V = [8, 11, 9, 9]
C = 8"
80,ilp_assign,4,16,15,0,34,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3903932571411133}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 9, 5, 12], [12, 1, 10, 9], [9, 1, 10, 1], [9, 7, 8, 7]]"
81,ilp_prod,2,18,33,0,15,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9652fab6cfd74411bbf881100f99d5d6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9652fab6cfd74411bbf881100f99d5d6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15469050407409668}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[1, 1], [3, 3]]
capacity = [9, 10]
upper_bounds = [3, 3]"
82,sub,32,13644889986020492461975767896170,195502099109909710990,0,13344890000000000000000000000000,0,"{'ok': True, 'value': 13644889986020492461975767896170, 'stdout': '13644889986020492461975767896170\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07599663734436035}",1,Compute: 78012668170328767046899323983156 - 64367778184308274584923556086986
83,lcs,32,19,16,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07190895080566406}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdabbabdccdbabccccaadddcdbcdbac""
T = ""abbdcbbbcbabdadcadcdcbbaaadbdacca"""
84,ilp_assign,2,3,7,0,7,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4015669822692871}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [1, 5]]"
85,ilp_assign,8,30,66,0,74,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3987128734588623}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 22, 24, 8, 5, 7, 2], [17, 11, 8, 13, 15, 23, 9], [23, 6, 4, 2, 3, 2, 10], [16, 2, 4, 21, 10, 20, 12], [12, 8, 7, 9, 7, 6, 11], [9, 22, 24, 11, 12, 2, 3], [7, 6, 13, 21, 15, 7, 20]]"
86,add,2,115,115,1,115,1,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07850337028503418}",1,Compute: 68 + 47
87,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09754371643066406}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdcdbcddaabcaab""
T = ""dddbddcdbabbdbbaa"""
88,add,4,11826,32,0,11826,1,"{'ok': True, 'value': 11826, 'stdout': '11826\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09487748146057129}",1,Compute: 6673 + 5153
89,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07718944549560547}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadcdddbbcbdbcab""
T = ""aabadcddbcbacaaaa"""
90,mul,2,392,404,0,392,1,"{'ok': True, 'value': 392, 'stdout': '392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07495641708374023}",1,Compute: 28 * 14
91,mul,2,2759,2739,0,2729,0,"{'ok': True, 'value': 2759, 'stdout': '2759\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08330082893371582}",1,Compute: 31 * 89
92,ilp_assign,32,142,207,0,209,0,"{'ok': True, 'value': 142, 'stdout': '142\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40029335021972656}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[78, 58, 70, 63, 94, 76, 74], [4, 11, 90, 50, 19, 52, 79], [52, 55, 51, 47, 95, 3, 22], [58, 20, 88, 96, 73, 45, 19], [55, 17, 4, 7, 94, 49, 76], [26, 86, 59, 55, 49, 38, 78], [86, 8, 25, 37, 35, 54, 28]]"
93,mul,2,3444,42,0,3444,1,"{'ok': True, 'value': 3444, 'stdout': '3444\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07584977149963379}",1,Compute: 82 * 42
94,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08730411529541016}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 9, 61, 82, 40, 76, 81, 76, 11, 83, 84, 34, 84, 19, 52, 31, 7, 31, 19, 85, 39, 23, 10, 75]"
95,sub,4,2253,2253,1,2253,1,"{'ok': True, 'value': 2253, 'stdout': '2253\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08441686630249023}",1,Compute: 7808 - 5555
96,add,4,10459,10459,1,10459,1,"{'ok': True, 'value': 10459, 'stdout': '10459\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08214116096496582}",1,Compute: 6860 + 3599
97,ilp_partition,4,1,0,0,50,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08553504943847656}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 7, 6, 11]"
98,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07543301582336426}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadabacd""
T = ""bcdcdcca"""
99,mul,2,5655,5655,1,5605,0,"{'ok': True, 'value': 5655, 'stdout': '5655\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0936734676361084}",1,Compute: 87 * 65
100,knap,8,70,103,0,0,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07407140731811523}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 11, 12, 9, 8, 14, 5, 8]
V = [26, 3, 16, 13, 10, 22, 12, 7]
C = 40"
101,ilp_prod,2,16,24,0,9,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3aaa8d3c92fb42a8a2a8f292eab4dbfb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3aaa8d3c92fb42a8a2a8f292eab4dbfb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 8.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16283583641052246}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8]
consumption (rows=resources) = [[3, 3], [2, 2]]
capacity = [8, 9]
upper_bounds = [3, 3]"
102,mul,16,33965507001789028447697816157748,341848556535355523800000000000000000000,0,34036357617559705868455549660465568,0,"{'ok': True, 'value': 33965507001789028447697816157748, 'stdout': '33965507001789028447697816157748\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07548189163208008}",1,Compute: 8392970940640334 * 4046899154305622
103,ilp_prod,4,28,36,0,32,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b14f0c4ad98d4ebdb348b3014da324cd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b14f0c4ad98d4ebdb348b3014da324cd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 17.3333 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 3.9999\nCbc0012I Integer solution of -12 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 3 rows 3 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -16 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3\nCbc0013I At root node, 2 cuts changed objective from -17.333333 to -16 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -16, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -17.3333 to -16\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15467524528503418}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8, 7]
consumption (rows=resources) = [[3, 3, 2], [1, 2, 4], [1, 4, 4]]
capacity = [13, 16, 13]
upper_bounds = [4, 3, 3]"
104,sub,8,53135287,53135287,1,53135287,1,"{'ok': True, 'value': 53135287, 'stdout': '53135287\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07444214820861816}",1,Compute: 83851083 - 30715796
105,ilp_assign,4,16,11,0,18,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37831711769104004}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 2, 5, 2], [8, 4, 8, 5], [1, 5, 6, 1], [12, 11, 10, 8]]"
106,mul,16,59534018323717590611197436921737,568006905125376883857607271719128357846551,0,5883454988738984588345498873898458,0,"{'ok': True, 'value': 59534018323717590611197436921737, 'stdout': '59534018323717590611197436921737\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08613181114196777}",1,Compute: 8676506409221807 * 6861519546673991
107,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08398604393005371}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabdadbb""
T = ""aaacacd"""
108,knap,4,21,15,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08469176292419434}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 4, 2]
V = [5, 8, 12, 9]
C = 6"
109,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10787844657897949}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbabacdacccccbb""
T = ""dacdbbacacbabadbb"""
110,knap,32,1608,1045,0,20,0,"{'ok': True, 'value': 1608, 'stdout': '1608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08045744895935059}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 4, 47, 64, 54, 21, 36, 53, 40, 18, 20, 17, 8, 45, 44, 11, 9, 62, 2, 20, 36, 45, 46, 4, 14, 52, 2, 13, 39, 39, 37, 23]
V = [24, 4, 61, 32, 9, 34, 127, 54, 127, 99, 24, 3, 57, 32, 23, 5, 90, 80, 27, 86, 85, 42, 97, 18, 96, 128, 107, 82, 114, 44, 113, 53]
C = 465"
111,knap,16,463,1,0,-1,0,"{'ok': True, 'value': 463, 'stdout': '463\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07639527320861816}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 30, 8, 14, 2, 17, 2, 24, 6, 21, 27, 23, 31, 28, 17, 6]
V = [37, 61, 63, 59, 30, 60, 39, 38, 17, 50, 8, 13, 26, 64, 32, 4]
C = 134"
112,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09390902519226074}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadc""
T = ""adbd"""
113,ilp_assign,8,47,46,0,55,0,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38616275787353516}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 23, 7, 16, 9, 13, 4], [17, 3, 4, 12, 6, 7, 22], [14, 10, 14, 9, 17, 21, 8], [13, 14, 2, 2, 24, 24, 7], [12, 13, 11, 14, 9, 15, 23], [13, 6, 5, 23, 14, 12, 23], [22, 12, 19, 12, 17, 14, 2]]"
114,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07346677780151367}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""d"""
115,mul,2,2546,,0,2536,0,"{'ok': True, 'value': 2546, 'stdout': '2546\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07534956932067871}",1,Compute: 67 * 38
116,add,16,13365726364015897,3404044741058664,0,13365726364015897,1,"{'ok': True, 'value': 13365726364015897, 'stdout': '13365726364015897\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08497977256774902}",1,Compute: 7096631622957233 + 6269094741058664
117,ilp_partition,16,0,1,0,7,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18812179565429688}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 3, 37, 45, 8, 7, 30, 12, 41, 5, 21, 4, 10, 7, 25, 47]"
118,add,16,9707869743109957,36,0,9707870743110957,0,"{'ok': True, 'value': 9707869743109957, 'stdout': '9707869743109957\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08798480033874512}",1,Compute: 2232015624007430 + 7475854119102527
119,ilp_assign,8,40,76,0,91,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40470099449157715}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 16, 8, 21, 19, 8, 20], [9, 17, 14, 15, 19, 19, 23], [10, 5, 21, 22, 17, 5, 2], [5, 21, 18, 5, 19, 1, 17], [9, 18, 18, 6, 23, 2, 12], [16, 18, 20, 6, 8, 11, 21], [21, 6, 23, 7, 22, 6, 19]]"
120,knap,32,1579,2044,0,25,0,"{'ok': True, 'value': 1579, 'stdout': '1579\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09290814399719238}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 24, 18, 37, 32, 56, 19, 16, 23, 50, 27, 47, 4, 9, 56, 25, 64, 4, 6, 45, 7, 27, 19, 9, 31, 15, 41, 24, 50, 20, 44, 55]
V = [116, 78, 40, 68, 34, 107, 90, 64, 111, 95, 13, 45, 81, 86, 87, 18, 96, 21, 42, 54, 19, 72, 115, 9, 8, 102, 47, 10, 126, 79, 93, 109]
C = 466"
121,ilp_partition,2,1,1,1,9,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07604575157165527}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 2, 2, 4]"
122,ilp_partition,4,0,1,0,22,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07726168632507324}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 4, 7, 1]"
123,lcs,8,5,5,1,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09170675277709961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcaadac""
T = ""cdcddcaa"""
124,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0760335922241211}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""cc"""
125,rod,16,352,502,0,64,0,"{'ok': True, 'value': 352, 'stdout': '352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07591962814331055}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [17, 44, 27, 39, 11, 36, 9, 18, 37, 2, 34, 23, 24, 5, 29, 12]"
126,add,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0845952033996582}",1,Compute: 36 + 22
127,knap,16,409,1047,0,-1,0,"{'ok': True, 'value': 409, 'stdout': '409\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08707976341247559}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 17, 2, 23, 7, 15, 4, 32, 19, 4, 31, 26, 25, 25, 24, 3]
V = [36, 38, 58, 25, 1, 26, 37, 23, 61, 36, 38, 47, 39, 58, 37, 9]
C = 140"
128,sub,8,8793759,8793375,0,79517192,0,"{'ok': True, 'value': 8793759, 'stdout': '8793759\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07847070693969727}",1,Compute: 88310951 - 79517192
129,ilp_assign,8,27,56,0,46,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3676915168762207}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 14, 24, 19, 9, 22, 19], [12, 23, 3, 4, 11, 6, 12], [13, 15, 6, 24, 6, 14, 23], [16, 7, 1, 17, 24, 6, 7], [22, 21, 6, 22, 3, 20, 24], [24, 20, 20, 1, 3, 7, 15], [9, 2, 13, 9, 14, 24, 8]]"
130,ilp_prod,16,260,206,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_gxzda01m/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_gxzda01m/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1420738697052002}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 5, 41, 27, 42, 46]
consumption (rows=resources) = [[9, 3, 5, 8, 12, 9], [16, 12, 4, 12, 2, 1], [7, 12, 13, 1, 5, 16], [2, 10, 4, 9, 13, 12]]
capacity = [48, 54, 62, 54]
upper_bounds = [3, 4, 4, 4, 4, 3]"
131,ilp_partition,2,2,0,0,6,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08092045783996582}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 2, 2]"
132,sub,32,19090300203685598196072756056347,19100300203685698196072756054447,0,19090330203685600006072756056347,0,"{'ok': True, 'value': 19090300203685598196072756056347, 'stdout': '19090300203685598196072756056347\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07649374008178711}",1,Compute: 32076961673546346685175827189250 - 12986661469860748489103071132903
133,mul,8,4439490255959809,419455401,0,4334988533771639,0,"{'ok': True, 'value': 4439490255959809, 'stdout': '4439490255959809\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08924651145935059}",1,Compute: 76149253 * 58299853
134,sub,32,30723114399956195010517261214582,30723094400246194950515261217752,0,30723114400256205010517261214582,0,"{'ok': True, 'value': 30723114399956195010517261214582, 'stdout': '30723114399956195010517261214582\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371949195861816}",1,Compute: 48497766200292181388402055040331 - 17774651800335986377884793825749
135,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08905863761901855}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbc""
T = ""acb"""
136,mul{'ok': True, 'value': 24621463270537776345737687813976, 'stdout': '24621463270537776345737687813976\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08463382720947266}",1,Compute: 4302379503052534 * 5722754873917764
137,sub,8,59027247,59027247,1,58890167,0,"{'ok': True, 'value': 59027247, 'stdout': '59027247\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0992593765258789}",1,Compute: 77038600 - 18011353
138,add,8,146231208,146231208,1,146231208,1,"{'ok': True, 'value': 146231208, 'stdout': '146231208\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08372640609741211}",1,Compute: 88442159 + 57789049
139,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0792093276977539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babcabbb""
T = ""daabcbc"""
140,sub,16,1736849274328656,1736849274328656,1,-1736849274328656,0,"{'ok': True, 'value': 1736849274328656, 'stdout': '1736849274328656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07401132583618164}",1,Compute: 6204612921186638 - 4467763646857982
141,ilp_prod,4,40,34,0,40,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_kpkajyqi/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_kpkajyqi/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14286565780639648}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 4, 6]
consumption (rows=resources) = [[2, 1, 4], [1, 2, 1], [1, 4, 4]]
capacity = [8, 8, 12]
upper_bounds = [4, 3, 3]"
142,ilp_partition,8,1,1,1,63,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08366727828979492}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 9, 24, 9, 16, 4, 16, 22]"
143,add,4,10578,10578,1,10578,1,"{'ok': True, 'value': 10578, 'stdout': '10578\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07439374923706055}",1,Compute: 7793 + 2785
144,rod,8,60,20,0,1,0,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07506966590881348}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 15, 11, 6, 20, 8, 16, 6]"
145,ilp_partition,16,0,1,0,46,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20544171333312988}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 48, 18, 4, 47, 43, 26, 5, 46, 5, 35, 46, 23, 2, 42, 21]"
146,ilp_partition,16,1,1,1,47,0,"{'ok': True, 'value': 427, 'stdout': '427\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08332562446594238}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 9, 43, 48, 48, 38, 47, 5, 47, 3, 3, 8, 45, 18, 22, 4]"
147,sub,2,24,24,1,24,1,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07730817794799805}",1,Compute: 84 - 60
148,add,8,136423695,136423695,1,136423725,0,"{'ok': True, 'value': 136423695, 'stdout': '136423695\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07756972312927246}",1,Compute: 61471169 + 74952526
149,add,2,137,137,1,137,1,"{'ok': True, 'value': 137, 'stdout': '137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08410072326660156}",1,Compute: 67 + 70
150,ilp_prod,2,24,28,0,6,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e35c0f0909c24c20b8baa6d5f415250a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e35c0f0909c24c20b8baa6d5f415250a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 10.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15126967430114746}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4]
consumption (rows=resources) = [[2, 1], [3, 1]]
capacity = [6, 6]
upper_bounds = [3, 6]"
151,sub,2,26,26,1,26,1,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07669568061828613}",1,Compute: 82 - 56
152,mul,4,23650893,180,0,23640583,0,"{'ok': True, 'value': 23650893, 'stdout': '23650893\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0746762752532959}",1,Compute: 9093 * 2601
153,rod,2,8,5,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08545899391174316}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
154,ilp_assign,8,24,46,0,30,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3799901008605957}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 16, 20, 14, 2, 8, 4], [24, 13, 22, 18, 17, 1, 19], [10, 1, 1, 8, 17, 23, 21], [13, 9, 21, 12, 24, 1, 7], [20, 24, 14, 7, 24, 15, 17], [2, 5, 18, 20, 9, 21, 2], [4, 13, 4, 2, 16, 20, 16]]"
155,ilp_prod,32,255,1000,0,2010,0,"{'ok': True, 'value': 130, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6506716e74fc408cbabb5b7762593d58-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6506716e74fc408cbabb5b7762593d58-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 175.741 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -130 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                130.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n130.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15116024017333984}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [65, 33, 60, 28, 75, 26]
consumption (rows=resources) = [[27, 8, 8, 17, 31, 5], [14, 32, 26, 31, 9, 17], [23, 26, 27, 1, 17, 28], [17, 12, 15, 25, 12, 18]]
capacity = [73, 113, 109, 101]
upper_bounds = [3, 3, 4, 3, 3, 3]"
156,knap,2,7,10,0,-1,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08519363403320312}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 3]
V = [1, 7, 3]
C = 4"
157,lcs,16,8,7,0,19,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07674288749694824}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdacdbcacabaabab""
T = ""cbddcadbcdddddaac"""
158,knap,16,317,147,0,28,0,"{'ok': True, 'value': 317, 'stdout': '317\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07506251335144043}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 13, 26, 17, 19, 15, 11, 24, 2, 28, 18, 24, 7, 23, 23, 12]
V = [53, 11, 10, 29, 30, 5, 28, 36, 18, 41, 25, 5, 62, 25, 14, 31]
C = 147"
159,rod,8,120,22,0,30,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07503128051757812}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 20, 7, 17, 7, 23, 2, 7]"
160,add,2,109,109,1,109,1,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07666802406311035}",1,Compute: 27 + 82
161,knap,16,381,1043,0,0,0,"{'ok': True, 'value': 381, 'stdout': '381\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09961342811584473}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 13, 14, 28, 6, 7, 21, 13, 31, 25, 25, 12, 17, 25, 24, 15]
V = [21, 56, 15, 15, 55, 49, 50, 9, 51, 20, 23, 9, 58, 9, 25, 22]
C = 150"
162,ilp_partition,2,0,0,1,6,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07561111450195312}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 5, 1]"
163,knap,4,26,23,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08818221092224121}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 1, 6]
V = [12, 12, 14, 7]
C = 10"
164,ilp_assign,16,50,105,0,117,0,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39736413955688477}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 15, 12, 14, 10, 42, 20], [32, 44, 45, 13, 8, 44, 11], [31, 31, 27, 12, 28, 7, 4], [37, 17, 21, 28, 17, 13, 48], [6, 26, 24, 38, 12, 47, 35], [21, 2, 45, 24, 47, 9, 7], [3, 13, 35, 5, 17, 8, 5]]"
165,add,4,14251,1329,0,14251,1,"{'ok': True, 'value': 14251, 'stdout': '14251\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08836698532104492}",1,Compute: 9768 + 4483
166,sub,4,1337,1337,1,1337,1,"{'ok': True, 'value': 1337, 'stdout': '1337\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08993887901306152}",1,Compute: 6898 - 5561
167,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0933229923248291}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcac""
T = ""daaa"""
168,rod,8,152,22,0,30,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08985376358032227}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 15, 9, 19, 12, 18, 11, 17]"
169,lcs,16,9,7,0,18,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08144211769104004}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcaacbcdcadaada""
T = ""acddabcdbdddddba"""
170,add,4,15752,15842,0,15752,1,"{'ok': True, 'value': 15752, 'stdout': '15752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07452392578125}",1,Compute: 8218 + 7534
171,mul,4,14166780,100,0,1403180,0,"{'ok': True, 'value': 14166780, 'stdout': '14166780\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0753631591796875}",1,Compute: 5780 * 2451
172,ilp_partition,2,2,0,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08898568153381348}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 2, 4]"
173,rod,8,92,22,0,1,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07590723037719727}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 23, 16, 15, 12, 12, 12, 20]"
174,mul,32,3912357314485570733084481970313256077579247269242030506467605600,"The actual multiplication is too large to fit in this response, but the process will be the same as long multiplication. The final answer will be the product of the two numbers.",0,390464046606399623652336856486444644400,0,"{'ok': True, 'value': 3912357314485570733084481970313256077579247269242030506467605600, 'stdout': '3912357314485570733084481970313256077579247269242030506467605600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09184622764587402}",1,Compute: 64405250512493065969141660597400 * 60745937378609648138177234491844
175,rod,4,24,12,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0981135368347168}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 12, 1, 12]"
176,add,2,83,83,1,83,1,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07899332046508789}",1,Compute: 44 + 39
177,ilp_prod,2,24,30,0,18,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9ed9ccb9d01b4257ad47873522391b41-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9ed9ccb9d01b4257ad47873522391b41-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1635603904724121}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[3, 2], [3, 1]]
capacity = [9, 6]
upper_bounds = [3, 4]"
178,rod,2,5,5,1,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_wp99tvks/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_wp99tvks/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08462047576904297}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 5]"
179,lcs,8,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07696151733398438}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcdbbbd""
T = ""acccccc"""
180,ilp_prod,8,78,100,0,7,0,"{'ok': True, 'value': 63, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/720824b6b0d64dcdbc69c885777da427-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/720824b6b0d64dcdbc69c885777da427-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 70.6818 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -59 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -63 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -69.5 to -63 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 4 column cuts (4 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -63, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -69.5 to -63\nProbing was tried 3 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                63.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n63.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15075206756591797}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 10, 19, 6]
consumption (rows=resources) = [[8, 4, 2, 2], [8, 5, 5, 1], [6, 7, 4, 7], [3, 8, 2, 8]]
capacity = [24, 29, 18, 19]
upper_bounds = [3, 3, 4, 3]"
181,knap,4,29,30,0,0,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09269452095031738}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 8, 1, 4]
V = [15, 16, 13, 10]
C = 10"
182,rod,4,20,17,0,4,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07707357406616211}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 7, 3, 4]"
183,ilp_partition,16,0,1,0,37,0,"{'ok': True, 'value': 354, 'stdout': '354\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07540678977966309}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 39, 7, 24, 41, 39, 5, 8, 37, 16, 46, 32, 5, 4, 16, 2]"
184,knap,4,16,14,0,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07488369941711426}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 5, 5, 7]
V = [11, 10, 6, 4]
C = 12"
185,rod,32,1760,1055,0,1,0,"{'ok': True, 'value': 1760, 'stdout': '1760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07615494728088379}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [55, 43, 17, 78, 66, 61, 52, 29, 23, 48, 3, 81, 24, 83, 79, 71, 14, 18, 22, 39, 26, 24, 86, 60, 12, 46, 44, 22, 54, 96, 29, 85]"
186,ilp_assign,4,15,15,1,18,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3945653438568115}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 2, 7, 3], [12, 10, 4, 8], [11, 7, 8, 2], [7, 11, 3, 12]]"
187,add,2,131,131,1,131,1,"{'ok': True, 'value': 131, 'stdout': '131\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0818326473236084}",1,Compute: 46 + 85
188,mul,4,37989653,141,0,37583333,0,"{'ok': True, 'value': 37989653, 'stdout': '37989653\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08476829528808594}",1,Compute: 4421 * 8593
189,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07543277740478516}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""dba"""
190,rod,8,52,22,0,24,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0882720947265625}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 13, 4, 12, 12, 18, 20, 5]"
191,knap,32,1397,1045,0,48,0,"{'ok': True, 'value': 1397, 'stdout': '1397\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10440611839294434}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 33, 24, 32, 10, 64, 42, 15, 7, 43, 26, 52, 3, 25, 59, 17, 3, 32, 63, 48, 41, 56, 50, 45, 53, 23, 64, 19, 8, 31, 20, 42]
V = [54, 2, 109, 104, 88, 89, 7, 29, 16, 50, 57, 96, 57, 16, 76, 41, 74, 12, 95, 66, 99, 94, 15, 53, 60, 66, 75, 67, 55, 40, 67, 51]
C = 527"
192,knap,16,396,1043,0,-1,0,"{'ok': True, 'value': 396, 'stdout': '396\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08678293228149414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 32, 14, 8, 8, 2, 3, 27, 29, 8, 3, 2, 1, 17, 7]
V = [33, 40, 21, 48, 7, 13, 44, 44, 20, 53, 12, 36, 12, 57, 13, 16]
C = 85"
193,add,2,88,16,0,88,1,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08314275741577148}",1,Compute: 32 + 56
194,lcs,16,8,7,0,16,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08799099922180176}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcccabccadcdcbc""
T = ""cdabbadccaacddd"""
195,add,32,59084184916681002600178988035063,590841849166809926001590880349634,0,59084184916680997600178988035063,0,"{'ok': True, 'value': 59084184916681002600178988035063, 'stdout': '59084184916681002600178988035063\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08776736259460449}",1,Compute: 38941666361685653631025001143483 + 20142518554995348969153986891580
196,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20585846900939941}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [27, 64, 6, 88, 74, 63, 23, 61, 96, 51, 25, 94, 69, 44, 30, 24, 34, 4, 73, 8, 93, 86, 17, 90]"
197,ilp_prod,2,28,32,0,12,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a510de2abe614b75b15cf3a0f757dc8a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a510de2abe614b75b15cf3a0f757dc8a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 8.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15084552764892578}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8]
consumption (rows=resources) = [[1, 3], [2, 1]]
capacity = [10, 8]
upper_bounds = [4, 3]"
198,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19195199012756348}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 5, 61, 15, 51, 82, 54, 55, 35, 47, 16, 74, 66, 52, 41, 67, 89, 66, 17, 48, 35, 96, 84, 26]"
199,sub,2,54,54,1,54,1,"{'ok': True, 'value': 54, 'stdout': '54\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08526468276977539}",1,Compute: 71 - 17
200,ilp_assign,16,60,116,0,117,0,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41035890579223633}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 24, 1, 15, 40, 23, 8], [47, 41, 43, 29, 34, 25, 20], [31, 30, 10, 23, 14, 4, 11], [26, 46, 25, 26, 41, 8, 23], [25, 9, 33, 1, 30, 37, 8], [28, 17, 3, 25, 27, 19, 4], [28, 24, 18, 2, 17, 34, 12]]"
201,ilp_prod,8,136,100,0,1,0,"{'ok': True, 'value': 103, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/445a8fbae20b448d8f70813fbcec0e0c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/445a8fbae20b448d8f70813fbcec0e0c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 111.4 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -98 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -103 found by DiveCoefficient after 4 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3.3333333\nCbc0013I At root node, 3 cuts changed objective from -111.4 to -103 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 4 row cuts average 3.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -103, took 4 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -111.4 to -103\nProbing was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                103.00000000\nEnumerated nodes:               0\nTotal iterations:               4\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n103.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15781402587890625}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 18, 5, 13]
consumption (rows=resources) = [[2, 5, 5, 3], [1, 6, 2, 3], [3, 3, 1, 1], [1, 2, 6, 8]]
capacity = [17, 32, 18, 30]
upper_bounds = [6, 3, 3, 3]"
202,mul,32,2434138133393387524417131736814722144422228452150135829470970810,24309854943947805416988887668444466666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,99186549088704002060000520263886,0,"{'ok': True, 'value': 2434138133393387524417131736814722144422228452150135829470970810, 'stdout': '2434138133393387524417131736814722144422228452150135829470970810\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08574032783508301}",1,Compute: 24541010406728655180292429591835 * 99186549088704002060000520263886
203,mul,2,2988,3024,0,3048,0,"{'ok': True, 'value': 2988, 'stdout': '2988\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09134411811828613}",1,Compute: 36 * 83
204,ilp_partition,2,1,1,1,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gl36e2fc/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_gl36e2fc/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08218550682067871}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 3, 1]"
205,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07597017288208008}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaabcabd""
T = ""ccbbdaca"""
206,mul,2,361,361,1,608,0,"{'ok': True, 'value': 361, 'stdout': '361\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07232308387756348}",1,Compute: 19 * 19
207,ilp_assign,2,9,7,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3764350414276123}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [6, 5]]"
208,knap,16,355,147,0,16,0,"{'ok': True, 'value': 355, 'stdout': '355\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08812332153320312}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 25, 18, 30, 10, 26, 16, 10, 22, 14, 16, 25, 1, 31, 19, 9]
V = [28, 44, 44, 34, 7, 4, 10, 31, 52, 24, 5, 26, 32, 31, 44, 56]
C = 147"
209,ilp_partition,16,1,1,1,10,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10103607177734375}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 21, 40, 10, 21, 28, 26, 16, 4, 23, 12, 16, 28, 40, 28, 40]"
210,sub,32,10137341611172900040097221638763,6224644064254535924,0,101466346111229000400973116588763,0,"{'ok': True, 'value': 10137341611172900040097221638763, 'stdout': '10137341611172900040097221638763\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07944464683532715}",1,Compute: 60392123415672409256477964667044 - 50254781804499509216380743028281
211,mul,16,38177513185632315399182206477626,38142140702183715,0,3817006230218361544301446666885692,0,"{'ok': True, 'value': 38177513185632315399182206477626, 'stdout': '38177513185632315399182206477626\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07541561126708984}",1,Compute: 7628429140436742 * 5004636273444703
212,mul,16,36847379551123169727542461417149,36248801326384379,0,35788418294690672358654455,0,"{'ok': True, 'value': 36847379551123169727542461417149, 'stdout': '36847379551123169727542461417149\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07467126846313477}",1,Compute: 6248801326384379 * 5896711645406631
213,sub,2,59,59,1,59,1,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07711029052734375}",1,Compute: 91 - 32
214,rod,32,1408,1055,0,1,0,"{'ok': True, 'value': 1408, 'stdout': '1408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0800473690032959}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [44, 1, 71, 72, 6, 43, 56, 42, 89, 43, 12, 75, 76, 17, 62, 10, 86, 59, 22, 6, 80, 85, 12, 11, 93, 26, 20, 88, 30, 32, 38, 77]"
215,ilp_partition,4,2,1,0,2,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07554030418395996}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 10, 4, 3]"
216,sub,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07561278343200684}",1,Compute: 87 - 80
217,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_33lwk4tu/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_33lwk4tu/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07329154014587402}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
218,ilp_prod,32,416,400,0,The code will print the maximum profit that can be achieved given the constraints.,0,"{'ok': True, 'value': 160, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ccd118d95a3a4fc29b265c44896de6d0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ccd118d95a3a4fc29b265c44896de6d0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 17 COLUMNS\nAt line 108 RHS\nAt line 121 BOUNDS\nAt line 128 ENDATA\nProblem MODEL has 12 rows, 6 columns and 72 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 180 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -160 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                160.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n160.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1639704704284668}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [40, 80, 48, 94, 50, 48]
consumption (rows=resources) = [[16, 31, 23, 14, 12, 14], [19, 16, 9, 3, 24, 20], [8, 9, 6, 27, 15, 17], [6, 2, 1, 14, 5, 29]]
capacity = [72, 103, 119, 89]
upper_bounds = [4, 3, 3, 4, 4, 3]"
219,rod,4,16,9,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_pwd0ljsu/main.py"", line 18, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_pwd0ljsu/main.py"", line 10, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07647252082824707}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 8, 2, 10]"
220,ilp_partition,8,0,1,0,11,0,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08330345153808594}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 19, 11, 16, 24, 22, 23, 10]"
221,lcs,8,4,4,1,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08809089660644531}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacbdcbc""
T = ""cacabdd"""
222,rod,8,96,22,0,1,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08411717414855957}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 22, 9, 24, 24, 8, 3, 20]"
223,ilp_assign,32,157,93,0,208,0,"{'ok': True, 'value': 157, 'stdout': '157\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3755652904510498}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[83, 8, 14, 29, 64, 47, 30], [90, 41, 56, 80, 14, 90, 40], [74, 77, 80, 91, 37, 70, 82], [62, 86, 22, 18, 31, 72, 6], [7, 87, 90, 36, 59, 74, 20], [39, 90, 48, 42, 36, 11, 15], [67, 50, 64, 69, 34, 60, 29]]"
224,ilp_prod,8,66,100,0,30,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7d1c495e448c44f1a1ff2002c5d64c32-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7d1c495e448c44f1a1ff2002c5d64c32-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14.2857 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1555929183959961}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 10, 22]
consumption (rows=resources) = [[1, 7, 1, 1], [3, 1, 8, 7], [3, 6, 7, 4], [8, 5, 2, 5]]
capacity = [16, 25, 32, 17]
upper_bounds = [3, 3, 3, 3]"
225,rod,4,44,44,1,1,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09508275985717773}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 6, 7, 7]"
226,rod,16,376,54,0,150,0,"{'ok': True, 'value': 376, 'stdout': '376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08173012733459473}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 47, 39, 15, 25, 4, 20, 36, 42, 25, 7, 27, 1, 34, 39, 39]"
227,rod,8,144,30,0,1,0,"{'ok': True, 'value': 144, 'stdout': '144\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07622790336608887}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [18, 5, 8, 2, 18, 10, 14, 22]"
228,knap,16,373,152,0,0,0,"{'ok': True, 'value': 373, 'stdout': '373\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07318782806396484}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 18, 1, 6, 31, 3, 26, 8, 28, 26, 26, 23, 31, 24, 21, 30]
V = [33, 19, 21, 16, 55, 18, 9, 26, 51, 54, 37, 57, 7, 42, 24, 26]
C = 152"
229,mul,2,3145,3095,0,3095,0,"{'ok': True, 'value': 3145, 'stdout': '3145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0756676197052002}",1,Compute: 85 * 37
230,ilp_prod,8,80,105,0,8,0,"{'ok': True, 'value': 80, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/328ef0420dc246fc90556ac9f5a96653-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/328ef0420dc246fc90556ac9f5a96653-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 80.75 - 0.00 seconds\nCgl0004I processed model has 3 rows, 4 columns (4 integer (0 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -80 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -80, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -80 to -80\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                80.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n80.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17412853240966797}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 21, 8, 17]
consumption (rows=resources) = [[1, 3, 2, 1], [3, 7, 5, 4], [1, 2, 7, 5], [8, 8, 8, 2]]
capacity = [26, 19, 25, 23]
upper_bounds = [3, 3, 3, 4]"
231,lcs,8,4,5,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0826108455657959}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addadaaa""
T = ""adbcaddc"""
232,add,8,147630107,147629987,0,147629987,0,"{'ok': True, 'value': 147630107, 'stdout': '147630107\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0751333236694336}",1,Compute: 50155214 + 97474893
233,mul,2,780,780,1,780,1,"{'ok': True, 'value': 780, 'stdout': '780\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07441592216491699}",1,Compute: 13 * 60
234,ilp_prod,8,55,108,0,72,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bb30f0f8531141c2986f6ec268559f79-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bb30f0f8531141c2986f6ec268559f79-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 48 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -48 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16621947288513184}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 6, 7, 24]
consumption (rows=resources) = [[8, 6, 4, 6], [1, 1, 2, 3], [8, 8, 2, 7], [1, 3, 2, 5]]
capacity = [16, 30, 23, 23]
upper_bounds = [3, 3, 4, 3]"
235,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08869433403015137}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""d"""
236,ilp_partition,2,1,0,0,87,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08658766746520996}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 3, 5, 2]"
237,knap,8,105,103,0,14,0,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07762765884399414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 7, 16, 15, 12, 16, 14, 1]
V = [27, 16, 25, 18, 2, 21, 7, 16]
C = 41"
238,knap,16,324,145,0,0,0,"{'ok': True, 'value': 324, 'stdout': '324\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09104013442993164}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 2, 28, 30, 29, 9, 31, 12, 2, 25, 19, 31, 1, 4, 26, 19]
V = [11, 52, 24, 18, 5, 32, 21, 3, 23, 54, 43, 19, 34, 4, 41, 12]
C = 145"
239,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07633113861083984}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
240,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08324027061462402}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcacabc""
T = ""bcabcad"""
241,rod,4,14,14,1,1,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08445143699645996}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 7, 3, 6]"
242,add,16,8276152576046119,8376152576216219,0,8276152576046129,0,"{'ok': True, 'value': 8276152576046119, 'stdout': '8276152576046119\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08791327476501465}",1,Compute: 6124124112437697 + 2152028463608422
243,knap,32,1726,1646,0,42,0,"{'ok': True, 'value': 1726, 'stdout': '1726\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10113906860351562}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [52, 49, 63, 36, 23, 18, 35, 54, 43, 35, 40, 42, 37, 32, 10, 14, 42, 56, 49, 1, 37, 17, 37, 9, 33, 12, 48, 19, 56, 12, 51, 20]
V = [105, 33, 128, 64, 106, 8, 17, 43, 127, 50, 8, 107, 59, 108, 55, 118, 73, 30, 5, 100, 94, 6, 41, 24, 126, 41, 33, 125, 18, 100, 125, 15]
C = 541"
244,ilp_assign,8,33,46,0,75,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37525105476379395}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 23, 11, 8, 21, 9, 11], [2, 13, 10, 1, 21, 15, 1], [14, 1, 4, 6, 22, 8, 1], [13, 20, 15, 5, 3, 7, 7], [14, 19, 19, 23, 12, 12, 3], [24, 8, 7, 4, 5, 20, 9], [12, 23, 24, 11, 14, 9, 14]]"
245,knap,4,26,16,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0836648941040039}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 6, 3]
V = [16, 3, 11, 10]
C = 11"
246,ilp_partition,2,0,1,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08110213279724121}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 4, 3, 3]"
247,ilp_assign,2,6,10,0,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36661386489868164}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [5, 5]]"
248,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07598066329956055}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
249,add,4,9576,848,0,9576,1,"{'ok': True, 'value': 9576, 'stdout': '9576\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07344412803649902}",1,Compute: 6586 + 2990
250,lcs,32,19,15,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07439851760864258}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdcabdacdbcbcccaaadcbaaacdbcdbd""
T = ""bacbabbdaaaadbacdabcadddaabbcda"""
251,ilp_partition,4,1,0,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09454894065856934}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 2, 3, 9]"
252,rod,4,12,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_59udnu42/main.py"", line 22, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_59udnu42/main.py"", line 10, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09594464302062988}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 6, 3, 3]"
253,ilp_assign,4,21,13,0,28,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37786316871643066}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 9, 4, 3], [1, 11, 7, 9], [1, 10, 9, 5], [1, 12, 7, 6]]"
254,lcs,16,7,6,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08824610710144043}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaddccbbaaaabbca""
T = ""cddcddacddacacd"""
255,sub,4,7443,7443,1,7443,1,"{'ok': True, 'value': 7443, 'stdout': '7443\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0854494571685791}",1,Compute: 8663 - 1220
256,lcs,32,17,10,0,1,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08764886856079102}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabadcacdbcccbaabccddddbbaadddbb""
T = ""accacaabdddbabbcdbacabcbccdcdda"""
257,rod,16,608,,0,364,0,"{'ok': True, 'value': 608, 'stdout': '608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0770719051361084}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [38, 41, 8, 22, 37, 18, 31, 34, 45, 21, 8, 36, 5, 3, 15, 32]"
258,sub,2,55,55,1,55,1,"{'ok': True, 'value': 55, 'stdout': '55\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07599282264709473}",1,Compute: 67 - 12
259,knap,2,10,14,0,2,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07975912094116211}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 4]
V = [4, 10, 1]
C = 4"
260,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07470250129699707}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 16, 16, 1, 7, 11, 7, 4]"
261,rod,4,36,36,1,1,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09202265739440918}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 6, 10, 1]"
262,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07486224174499512}",1,Compute: 20 - 19
263,ilp_prod,16,196,The solution to this problem involves using a linear programming approach to maximize the total profit while adhering to resource constraints and integer quantity requirements. The specific solution would depend on the results of the linear programming solver.,0,163,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_q3n9hxh1/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_q3n9hxh1/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14418244361877441}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 23, 45, 27, 29, 48]
consumption (rows=resources) = [[3, 15, 14, 14, 2, 7], [5, 13, 2, 14, 2, 5], [14, 16, 9, 14, 2, 15], [2, 13, 3, 3, 14, 11]]
capacity = [41, 38, 50, 50]
upper_bounds = [3, 3, 3, 3, 3, 3]"
264,sub,2,29,29,1,29,1,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07579660415649414}",1,Compute: 83 - 54
265,ilp_assign,8,31,10,0,75,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3762383460998535}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 18, 3, 15, 19, 14, 3], [17, 20, 4, 15, 20, 16, 9], [13, 15, 16, 13, 13, 4, 13], [11, 21, 23, 1, 3, 6, 16], [14, 1, 3, 24, 13, 22, 17], [20, 11, 2, 1, 17, 21, 1], [15, 24, 17, 6, 15, 10, 23]]"
266,sub,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07664799690246582}",1,Compute: 44 - 41
267,ilp_assign,2,9,6,0,6,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37799072265625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 3], [6, 3]]"
268,ilp_assign,2,5,4,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3603200912475586}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [3, 1]]"
269,rod,16,272,130,0,94,0,"{'ok': True, 'value': 272, 'stdout': '272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07831192016601562}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [14, 34, 13, 21, 5, 4, 14, 43, 20, 11, 12, 40, 19, 2, 41, 10]"
270,knap,16,444,1043,0,0,0,"{'ok': True, 'value': 444, 'stdout': '444\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07051515579223633}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 13, 22, 3, 12, 6, 12, 1, 28, 20, 3, 28, 14, 13, 32, 2]
V = [40, 30, 13, 43, 2, 64, 54, 27, 30, 60, 21, 21, 19, 21, 59, 46]
C = 120"
271,ilp_prod,8,58,100,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_y35qkxru/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_y35qkxru/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14662528038024902}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 23, 6, 20]
consumption (rows=resources) = [[2, 8, 1, 7], [6, 1, 2, 8], [5, 1, 6, 8], [3, 5, 8, 1]]
capacity = [20, 25, 19, 19]
upper_bounds = [3, 3, 3, 3]"
272,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37505054473876953}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [2, 6]]"
273,knap,4,12,22,0,0,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07747268676757812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 8, 7, 1]
V = [10, 6, 10, 2]
C = 10"
274,ilp_prod,16,163,169,0,10,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9c2c51f73ae5427c87b7ddce757be230-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9c2c51f73ae5427c87b7ddce757be230-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 80 RHS\nAt line 89 BOUNDS\nAt line 96 ENDATA\nProblem MODEL has 8 rows, 6 columns and 48 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3.15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15996623039245605}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 35, 41, 21, 10, 23]
consumption (rows=resources) = [[8, 13, 1, 8, 10, 5], [11, 6, 13, 16, 6, 4], [15, 7, 16, 4, 3, 3], [12, 16, 11, 15, 14, 12]]
capacity = [43, 45, 56, 63]
upper_bounds = [3, 3, 3, 3, 4, 5]"
275,sub,32,37803017627173498943212919878335,37799997627173498943212919878335,0,37803017627173498943212929878335,0,"{'ok': True, 'value': 37803017627173498943212919878335, 'stdout': '37803017627173498943212919878335\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08278918266296387}",1,Compute: 48418602192919657489917478500282 - 10615584565746158546704558621947
276,knap,8,97,110,0,0,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0845332145690918}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 13, 12, 13, 5, 3, 8, 7]
V = [32, 31, 25, 21, 17, 1, 17, 2]
C = 33"
277,ilp_prod,16,216,239,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_znd0astq/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_znd0astq/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15871691703796387}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 5, 47, 17, 35, 36]
consumption (rows=resources) = [[14, 11, 9, 10, 5, 5], [1, 4, 7, 8, 8, 1], [16, 6, 2, 2, 11, 3], [2, 10, 4, 10, 12, 1]]
capacity = [33, 44, 33, 50]
upper_bounds = [3, 3, 3, 3, 3, 6]"
278,sub,16,5362938131629205,5362938131629205,1,5362938131629205,1,"{'ok': True, 'value': 5362938131629205, 'stdout': '5362938131629205\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0754237174987793}",1,Compute: 9248164443592561 - 3885226311963356
279,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07333159446716309}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""c"""
280,ilp_prod,2,12,27,0,18,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/41d92087c44e42228f122f55c5a9fc53-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/41d92087c44e42228f122f55c5a9fc53-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 3.9999\nCbc0012I Integer solution of -12 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -12, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -12 to -12\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1702132225036621}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[3, 3], [1, 2]]
capacity = [9, 10]
upper_bounds = [3, 3]"
281,lcs,16,8,6,0,14,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07583880424499512}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacaabdbcddcdddd""
T = ""cdcdabaadbcbada"""
282,sub,16,1233551286892199,7,0,1233551286892189,0,"{'ok': True, 'value': 1233551286892199, 'stdout': '1233551286892199\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08812713623046875}",1,Compute: 7744279715778347 - 6510728428886148
283,sub,16,7447716351282058,1163967335796187,0,7447716351282058,1,"{'ok': True, 'value': 7447716351282058, 'stdout': '7447716351282058\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09631872177124023}",1,Compute: 8611683687078245 - 1163967335796187
284,mul{'ok': True, 'value': 33860782069328149663102408672860, 'stdout': '33860782069328149663102408672860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08276724815368652}",1,Compute: 4245478986428381 * 7975727162370060
285,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08788466453552246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
286,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07475161552429199}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""c"""
287,add,8,166310987,53,0,166311087,0,"{'ok': True, 'value': 166310987, 'stdout': '166310987\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08452224731445312}",1,Compute: 74081083 + 92229904
288,knap,4,24,26,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07645082473754883}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 6, 3]
V = [12, 4, 13, 12]
C = 8"
289,lcs,16,8,7,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07477784156799316}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daabcddadbbaadba""
T = ""ccababacbcdbdbc"""
290,sub,32,40060059777294498592260272656818,456646546044567,0,39999999999999999999999999999998,0,"{'ok': True, 'value': 40060059777294498592260272656818, 'stdout': '40060059777294498592260272656818\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08510851860046387}",1,Compute: 69646918592939644880566397262410 - 29586858815645146288306124605592
291,add,2,138,138,1,138,1,"{'ok': True, 'value': 138, 'stdout': '138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08627033233642578}",1,Compute: 74 + 64
292,mul,16,66522406823504251500053605870200,65132466452785930,0,66186928798804844646660000,0,"{'ok': True, 'value': 66522406823504251500053605870200, 'stdout': '66522406823504251500053605870200\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0947105884552002}",1,Compute: 6891379970930990 * 9652987805650980
293,knap,4,24,16,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08651041984558105}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 7, 8, 3]
V = [16, 8, 2, 8]
C = 11"
294,ilp_prod,16,228,100,0,250,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_di08_a_u/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15702009201049805}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [44, 35, 8, 43, 13, 48]
consumption (rows=resources) = [[14, 15, 4, 11, 1, 10], [2, 14, 11, 9, 5, 13], [6, 12, 11, 5, 5, 16], [16, 13, 13, 6, 9, 15]]
capacity = [56, 53, 41, 55]
upper_bounds = [3, 3, 3, 5, 6, 3]"
295,ilp_assign,2,8,10,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38537001609802246}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 4], [4, 6]]"
296,ilp_partition,4,0,1,0,18,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08149147033691406}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 10, 8, 7]"
297,sub,4,4536,4536,1,4536,1,"{'ok': True, 'value': 4536, 'stdout': '4536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08422040939331055}",1,Compute: 6906 - 2370
298,knap,16,407,1043,0,-1,0,"{'ok': True, 'value': 407, 'stdout': '407\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08424496650695801}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 20, 12, 9, 21, 3, 16, 24, 24, 8, 17, 22, 27, 4, 8, 15]
V = [21, 51, 2, 28, 46, 32, 11, 26, 28, 63, 17, 53, 4, 48, 55, 14]
C = 128"
299,knap,2,10,11,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0861048698425293}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 5]
V = [1, 7, 10]
C = 5"
300,mul,4,63996121,14,0,63834911,0,"{'ok': True, 'value': 63996121, 'stdout': '63996121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09335613250732422}",1,Compute: 7193 * 8897
301,sub,4,4096,4096,1,4096,1,"{'ok': True, 'value': 4096, 'stdout': '4096\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07897639274597168}",1,Compute: 7842 - 3746
302,knap,32,1669,451,0,12,0,"{'ok': True, 'value': 1669, 'stdout': '1669\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0785527229309082}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 37, 51, 60, 14, 41, 7, 48, 13, 9, 33, 6, 57, 40, 19, 3, 4, 45, 12, 20, 25, 29, 9, 21, 36, 41, 41, 47, 35, 35, 31, 10]
V = [57, 79, 6, 48, 32, 25, 92, 34, 106, 125, 22, 124, 2, 70, 21, 23, 108, 119, 35, 90, 77, 85, 65, 62, 26, 58, 116, 26, 47, 2, 125, 9]
C = 451"
303,add,32,146066169252055403042634600152733,,0,146066169252055393082634646152733,0,"{'ok': True, 'value': 146066169252055403042634600152733, 'stdout': '146066169252055403042634600152733\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0824136734008789}",1,Compute: 88794379711602053826073873131664 + 57271789540453349216560727021069
304,mul,4,16580895,16887459,0,16603905,0,"{'ok': True, 'value': 16580895, 'stdout': '16580895\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07727360725402832}",1,Compute: 4055 * 4089
305,ilp_partition,8,1,1,1,6,0,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07340526580810547}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 21, 22, 1, 14, 21, 18, 6]"
306,add,4,9454,9454,1,9454,1,"{'ok': True, 'value': 9454, 'stdout': '9454\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07252216339111328}",1,Compute: 6595 + 2859
307,ilp_partition,2,0,The answer will be the minimum difference between the two groups.,0,0,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08627939224243164}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 2, 3]"
308,add,8,155043050,154042950,0,155043050,1,"{'ok': True, 'value': 155043050, 'stdout': '155043050\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07603335380554199}",1,Compute: 99599619 + 55443431
309,sub,16,2430173968602254,2430173968602254,1,2330173968602254,0,"{'ok': True, 'value': 2430173968602254, 'stdout': '2430173968602254\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10493779182434082}",1,Compute: 8939595645602160 - 6509421676999906
310,sub,4,142,142,1,142,1,"{'ok': True, 'value': 142, 'stdout': '142\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08594202995300293}",1,Compute: 1341 - 1199
311,add,8,105181441,105181441,1,105181441,1,"{'ok': True, 'value': 105181441, 'stdout': '105181441\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07354927062988281}",1,Compute: 33962281 + 71219160
312,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07448935508728027}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdabccdbadaaacac""
T = ""ccbbaacbabcbabd"""
313,mul,2,720,720,1,720,1,"{'ok': True, 'value': 720, 'stdout': '720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10050344467163086}",1,Compute: 12 * 60
314,ilp_assign,32,116,185,0,209,0,"{'ok': True, 'value': 116, 'stdout': '116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38316893577575684}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[59, 39, 63, 15, 15, 39, 3], [71, 24, 46, 73, 67, 4, 70], [37, 24, 76, 15, 27, 57, 68], [36, 80, 28, 38, 83, 51, 51], [59, 4, 34, 50, 69, 43, 37], [48, 14, 52, 61, 65, 95, 47], [3, 81, 9, 86, 20, 51, 90]]"
315,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09183692932128906}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 34, 15, 19, 46, 17, 25, 12, 11, 48, 7, 22, 17, 1, 6, 47]"
316,sub,2,43,43,1,43,1,"{'ok': True, 'value': 43, 'stdout': '43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09433269500732422}",1,Compute: 74 - 31
317,lcs,32,17,12,0,1,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0799248218536377}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcbbdcbbbbcbcddccbcdcbcabbadbad""
T = ""dcccabbaacdddcddbcacabbddddcdcc"""
318,ilp_assign,32,150,240,0,205,0,"{'ok': True, 'value': 150, 'stdout': '150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3656013011932373}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 45, 69, 85, 72, 48, 4], [95, 40, 46, 31, 52, 33, 4], [78, 43, 12, 93, 76, 1, 64], [96, 71, 54, 82, 92, 93, 66], [76, 19, 56, 47, 34, 11, 66], [33, 67, 43, 53, 81, 42, 73], [81, 57, 10, 34, 8, 17, 81]]"
319,add,32,52142705590247707398859102736907,49188412413035477657365195504560088159,0,52132705590247707398859082736907,0,"{'ok': True, 'value': 52142705590247707398859102736907, 'stdout': '52142705590247707398859102736907\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08661079406738281}",1,Compute: 39729670112590342203354542648748 + 12413035477657365195504560088159
320,sub,16,1803944369459442,1,0,-1803944369459442,0,"{'ok': True, 'value': 1803944369459442, 'stdout': '1803944369459442\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0770113468170166}",1,Compute: 4555691642973472 - 2751747273514030
321,ilp_partition,4,1,1,1,2,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08177900314331055}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 8, 11]"
322,lcs,4,3,3,1,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08228635787963867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbb""
T = ""bdcbb"""
323,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08638763427734375}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbc""
T = ""ddcad"""
324,mul,8,2792400628477080,270874074332800,0,27703644332460,0,"{'ok': True, 'value': 2792400628477080, 'stdout': '2792400628477080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0979166030883789}",1,Compute: 31784430 * 87854356
325,ilp_assign,4,11,4,0,21,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39941883087158203}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1, 5, 2], [3, 10, 5, 8], [12, 7, 5, 2], [5, 1, 8, 3]]"
326,sub,32,52062678230668809038770419867873,52062678230668809048770419867873,0,52062678230668809038770419867873,1,"{'ok': True, 'value': 52062678230668809038770419867873, 'stdout': '52062678230668809038770419867873\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07485246658325195}",1,Compute: 66466522881580022417701044938011 - 14403844650911213378930625070138
327,ilp_partition,8,1,1,1,0,0,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07540416717529297}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 8, 5, 1, 17, 15, 16, 2]"
328,rod,16,132,60,0,64,0,"{'ok': True, 'value': 132, 'stdout': '132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07690119743347168}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [7, 10, 14, 33, 24, 37, 43, 45, 43, 11, 29, 30, 24, 27, 7, 29]"
329,rod,8,104,24,0,1,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08704495429992676}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 5, 23, 21, 2, 5, 2, 24]"
330,mul,4,34624024,1494,0,34335648,0,"{'ok': True, 'value': 34624024, 'stdout': '34624024\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09122538566589355}",1,Compute: 3748 * 9238
331,ilp_assign,2,5,2,0,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.8250219821929932}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [1, 6]]"
332,ilp_prod,8,69,103,0,4,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/69d7e07f29674c09a3f458f8cd8f815b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/69d7e07f29674c09a3f458f8cd8f815b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 2.57143 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17844438552856445}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 17, 23, 15]
consumption (rows=resources) = [[8, 4, 8, 2], [4, 3, 5, 5], [1, 2, 7, 1], [4, 6, 5, 4]]
capacity = [31, 20, 30, 17]
upper_bounds = [3, 3, 3, 4]"
333,add,16,10011748497312632,9999999999999999,0,9999999997312632,0,"{'ok': True, 'value': 10011748497312632, 'stdout': '10011748497312632\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0741109848022461}",1,Compute: 4480135444377831 + 5531613052934801
334,ilp_partition,2,0,The answer will be the minimum difference calculated based on the above steps.,0,2,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08463382720947266}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 3, 2]"
335,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08653020858764648}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""a"""
336,sub,8,63397488,63397488,1,63397488,1,"{'ok': True, 'value': 63397488, 'stdout': '63397488\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08233141899108887}",1,Compute: 92033585 - 28636097
337,add,8,86664276,86664276,1,86664276,1,"{'ok': True, 'value': 86664276, 'stdout': '86664276\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07114911079406738}",1,Compute: 48267493 + 38396783
338,mul,2,2010,1950,0,1950,0,"{'ok': True, 'value': 2010, 'stdout': '2010\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07708287239074707}",1,Compute: 30 * 67
339,lcs,8,5,4,0,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07672500610351562}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcbcbdd""
T = ""dccdaacd"""
340,ilp_assign,32,67,187,0,44,0,"{'ok': True, 'value': 67, 'stdout': '67\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37824416160583496}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 30, 33, 8, 94, 39, 44], [83, 56, 11, 89, 36, 72, 94], [94, 64, 23, 18, 71, 3, 93], [36, 80, 60, 7, 77, 94, 50], [60, 28, 54, 82, 83, 35, 19], [5, 8, 31, 15, 63, 23, 71], [56, 68, 53, 3, 1, 6, 40]]"
341,mul,8,1535325076695066,6935172626,0,15593445049459,0,"{'ok': True, 'value': 1535325076695066, 'stdout': '1535325076695066\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07793521881103516}",1,Compute: 40972947 * 37471678
342,ilp_assign,16,89,105,0,7,0,"{'ok': True, 'value': 89, 'stdout': '89\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3832550048828125}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 41, 15, 13, 44, 48, 7], [16, 32, 42, 6, 19, 29, 39], [35, 30, 29, 35, 45, 38, 29], [39, 9, 45, 22, 44, 20, 9], [7, 9, 9, 47, 46, 45, 43], [19, 33, 15, 28, 43, 25, 12], [40, 39, 27, 12, 31, 4, 6]]"
343,ilp_assign,16,117,105,0,114,0,"{'ok': True, 'value': 117, 'stdout': '117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39316558837890625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 29, 17, 33, 22, 16, 13], [28, 6, 38, 37, 26, 47, 3], [4, 10, 16, 26, 14, 18, 35], [19, 19, 48, 46, 41, 29, 13], [20, 12, 48, 34, 39, 5, 25], [34, 27, 20, 44, 30, 9, 39], [28, 43, 40, 47, 36, 26, 43]]"
344,mul,4,42789992,247,0,42849888,0,"{'ok': True, 'value': 42789992, 'stdout': '42789992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0776362419128418}",1,Compute: 8267 * 5176
345,ilp_assign,16,103,105,0,117,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3781452178955078}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 39, 27, 21, 10, 21, 41], [34, 24, 29, 24, 27, 28, 47], [36, 23, 13, 29, 30, 16, 46], [43, 4, 47, 26, 9, 41, 41], [11, 31, 8, 22, 9, 44, 42], [1, 16, 20, 48, 45, 29, 34], [41, 40, 35, 46, 30, 40, 40]]"
346,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09659123420715332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbca""
T = ""baa"""
347,ilp_prod,8,79,105,0,4,0,"{'ok': True, 'value': 86, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/450dd3c9abfd4d62895124242b237107-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/450dd3c9abfd4d62895124242b237107-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 88.05 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -64 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -86 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -88.05 to -86 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -86, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -88.05 to -86\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                86.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n86.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17272567749023438}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 7, 22, 13]
consumption (rows=resources) = [[4, 2, 6, 8], [4, 5, 1, 4], [3, 6, 4, 4], [7, 2, 6, 5]]
capacity = [21, 16, 32, 25]
upper_bounds = [3, 3, 3, 3]"
348,rod,8,168,8,0,49,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09114360809326172}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 23, 2, 2, 1, 16, 15, 15]"
349,knap,4,23,24,0,8,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08597183227539062}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 4, 4, 2]
V = [11, 13, 7, 10]
C = 8"
350,knap,32,1484,103,0,4,0,"{'ok': True, 'value': 1484, 'stdout': '1484\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09052705764770508}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [49, 2, 23, 37, 24, 63, 53, 60, 63, 13, 26, 15, 40, 22, 49, 52, 55, 32, 41, 28, 9, 22, 26, 47, 13, 28, 21, 17, 49, 33, 28, 56]
V = [103, 110, 109, 58, 95, 113, 28, 109, 128, 46, 11, 26, 23, 2, 128, 91, 20, 27, 112, 60, 23, 15, 11, 27, 10, 37, 94, 110, 14, 53, 15, 65]
C = 548"
351,ilp_prod,2,12,12,1,12,1,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9e5756fc906e42288a2bc079249981ff-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9e5756fc906e42288a2bc079249981ff-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15750908851623535}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3]
consumption (rows=resources) = [[2, 2], [2, 2]]
capacity = [8, 9]
upper_bounds = [4, 4]"
352,add,32,144388711716657997680288512745916,66289341620657994522279053920053,0,144388711716658007680288512745916,0,"{'ok': True, 'value': 144388711716657997680288512745916, 'stdout': '144388711716657997680288512745916\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08426403999328613}",1,Compute: 87219340986156037211159053919952 + 57169370730501960469129458825964
353,ilp_prod,16,244,The problem is a linear programming problem and can be solved using a solver. The solution would be the maximum profit that can be obtained while satisfying all the constraints.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_bloe9xkf/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_bloe9xkf/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1513359546661377}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 34, 40, 14, 41, 13]
consumption (rows=resources) = [[16, 4, 9, 6, 11, 12], [8, 4, 1, 16, 6, 9], [2, 4, 9, 11, 10, 11], [12, 9, 6, 10, 13, 13]]
capacity = [44, 54, 36, 60]
upper_bounds = [3, 6, 4, 3, 3, 3]"
354,ilp_assign,32,81,109,0,110,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3784923553466797}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 15, 41, 2, 53, 25, 6], [20, 69, 89, 88, 91, 54, 49], [84, 28, 52, 74, 82, 17, 16], [18, 2, 72, 7, 13, 83, 15], [70, 79, 4, 46, 29, 92, 9], [1, 64, 78, 14, 35, 26, 73], [43, 7, 11, 22, 80, 82, 42]]"
355,knap,32,1760,1080,0,24,0,"{'ok': True, 'value': 1760, 'stdout': '1760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0827171802520752}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [34, 15, 37, 12, 20, 50, 21, 11, 60, 36, 22, 10, 6, 24, 33, 18, 28, 45, 10, 56, 61, 39, 55, 33, 53, 61, 40, 38, 20, 25, 48, 36]
V = [128, 104, 101, 3, 99, 128, 52, 114, 82, 5, 120, 1, 108, 4, 95, 108, 80, 88, 98, 101, 122, 52, 38, 75, 99, 107, 10, 48, 16, 4, 31, 62]
C = 528"
356,ilp_partition,32,0,104,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07921314239501953}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 92, 94, 83, 13, 29, 20, 16, 42, 43, 69, 83, 95, 59, 59, 75, 56, 43, 2, 82, 48, 88, 5, 63]"
357,knap,4,19,26,0,-1,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08410096168518066}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 8, 3, 2]
V = [4, 14, 2, 15]
C = 8"
358,mul,32,755191344549123563791937238086289709912756122155658129151654156,10,0,7509341856968985465564846384655846885558,0,"{'ok': True, 'value': 755191344549123563791937238086289709912756122155658129151654156, 'stdout': '755191344549123563791937238086289709912756122155658129151654156\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08615636825561523}",1,Compute: 15963151964407247793126478191754 * 47308410408731314014361762942414
359,ilp_prod,32,515,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are that the total consumption of each resource must not exceed its capacity and that the quantity produced for each product must be non-negative. The upper bounds on the quantity of each product that can be produced are given by upper_bounds[j]. The problem is then solved using a linear programming solver, and the maximum profit is the value of the objective function after solving the problem.",0,210,0,"{'ok': True, 'value': 100, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/335ade0287a34dd28f5bc0b29b10d6ea-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/335ade0287a34dd28f5bc0b29b10d6ea-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 123.333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -100 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                100.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n100.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1805272102355957}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [50, 75, 70, 65, 36, 68]
consumption (rows=resources) = [[17, 11, 12, 30, 12, 13], [11, 10, 14, 3, 9, 32], [29, 6, 26, 3, 1, 30], [30, 7, 30, 28, 29, 21]]
capacity = [104, 68, 76, 74]
upper_bounds = [3, 6, 3, 3, 3, 3]"
360,sub,16,2018105082267628,2000000000000000,0,1998105082267628,0,"{'ok': True, 'value': 2018105082267628, 'stdout': '2018105082267628\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08078455924987793}",1,Compute: 4242820992617226 - 2224715910349598
361,ilp_assign,2,5,8,0,8,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36510777473449707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 5], [6, 2]]"
362,knap,2,10,11,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08583498001098633}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 4]
V = [5, 10, 6]
C = 5"
363,ilp_prod,16,172,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce, which are assumed to be integers. The objective function is the sum of the product of profit[j] and x_j for all j. The constraints are resource constraints, non-negativity, and upper bounds. A linear programming solver can be used to find the optimal solution, and the maximum profit is returned.",0,33,0,"{'ok': True, 'value': 78, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c04cc16ea3664fc3a5e767023ebf60d3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c04cc16ea3664fc3a5e767023ebf60d3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 17 COLUMNS\nAt line 108 RHS\nAt line 121 BOUNDS\nAt line 128 ENDATA\nProblem MODEL has 12 rows, 6 columns and 72 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 80.4375 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -78 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                78.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n78.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15929770469665527}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 48, 38, 6, 37, 40]
consumption (rows=resources) = [[9, 8, 6, 2, 14, 2], [10, 11, 7, 1, 13, 13], [4, 2, 14, 12, 1, 7], [12, 15, 1, 5, 13, 16]]
capacity = [56, 38, 52, 33]
upper_bounds = [3, 3, 3, 4, 3, 3]"
364,add,4,14403,14403,1,14403,1,"{'ok': True, 'value': 14403, 'stdout': '14403\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08527565002441406}",1,Compute: 4900 + 9503
365,add,16,11185267881342209,11126469456274312,0,11185269881342209,0,"{'ok': True, 'value': 11185267881342209, 'stdout': '11185267881342209\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07514739036560059}",1,Compute: 8091801039683085 + 3093466841659124
366,add,4,12852,12852,1,12852,1,"{'ok': True, 'value': 12852, 'stdout': '12852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07422685623168945}",1,Compute: 9880 + 2972
367,sub,16,3387482379273621,3389567573276698,0,-3367522379273621,0,"{'ok': True, 'value': 3387482379273621, 'stdout': '3387482379273621\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09271979331970215}",1,Compute: 6623556448276698 - 3236074069003077
368,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07475566864013672}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbda""
T = ""abbcb"""
369,ilp_prod,32,432,1056,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_76z9aeuc/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_76z9aeuc/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14531183242797852}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 60, 77, 12, 19, 72]
consumption (rows=resources) = [[12, 9, 26, 16, 25, 16], [19, 15, 12, 10, 27, 3], [26, 1, 13, 31, 18, 8], [23, 11, 18, 11, 11, 19]]
capacity = [126, 101, 102, 90]
upper_bounds = [3, 6, 4, 3, 3, 4]"
370,mul,8,3273286432256603,3292239559885223,0,323843833583833,0,"{'ok': True, 'value': 3273286432256603, 'stdout': '3273286432256603\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0769956111907959}",1,Compute: 34118683 * 95938241
371,ilp_prod,16,236,160,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_n37bi3nh/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_n37bi3nh/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16115117073059082}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 37, 38, 32, 30, 10]
consumption (rows=resources) = [[7, 3, 9, 4, 6, 2], [5, 8, 4, 7, 10, 7], [10, 14, 9, 6, 13, 11], [1, 12, 13, 4, 2, 8]]
capacity = [43, 43, 49, 51]
upper_bounds = [4, 3, 3, 6, 3, 4]"
372,ilp_prod,32,213,1000,0,120,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0d78392a537b44ce996e98485f1672a9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0d78392a537b44ce996e98485f1672a9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 54 RHS\nAt line 61 BOUNDS\nAt line 68 ENDATA\nProblem MODEL has 6 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nProblem is unbounded - 0.00 seconds\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14906978607177734}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [28, 51, 92, 22, 91, 29]
consumption (rows=resources) = [[28, 20, 19, 24, 30, 1], [9, 5, 25, 25, 15, 25], [19, 9, 1, 4, 28, 6], [21, 22, 27, 24, 26, 14]]
capacity = [91, 117, 84, 72]
upper_bounds = [3, 3, 3, 3, 3, 4]"
373,ilp_prod,2,25,16,0,10,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2bb9abfff0694170b5447f4578b6794c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2bb9abfff0694170b5447f4578b6794c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 9.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15527009963989258}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5]
consumption (rows=resources) = [[2, 1], [1, 2]]
capacity = [6, 10]
upper_bounds = [3, 5]"
374,lcs,32,17,10,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07526683807373047}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdaadddcabdbdbddbacddaadacdddca""
T = ""cccaddbcbabbddcbcaccbccbbcabcdbc"""
375,ilp_assign,16,51,145,0,114,0,"{'ok': True, 'value': 51, 'stdout': '51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38968896865844727}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 34, 48, 15, 33, 8, 30], [24, 47, 46, 46, 17, 37, 34], [11, 6, 18, 6, 44, 34, 1], [48, 5, 26, 41, 4, 30, 42], [29, 32, 3, 4, 10, 44, 2], [7, 44, 48, 26, 11, 6, 18], [48, 25, 45, 29, 41, 3, 41]]"
376,ilp_prod,2,18,20,0,18,1,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ae23b94ab4dd4f4bb34259cc6c5c1d96-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ae23b94ab4dd4f4bb34259cc6c5c1d96-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14724278450012207}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[3, 3], [1, 3]]
capacity = [9, 8]
upper_bounds = [3, 3]"
377,mul,2,7448,7468,0,7448,1,"{'ok': True, 'value': 7448, 'stdout': '7448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0733945369720459}",1,Compute: 98 * 76
378,ilp_prod,2,10,16,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_se0lgoz7/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 5*x[1]], ""Total Profit"")\nTypeError: lpSum() takes 1 positional argument but 2 were given\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14540505409240723}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5]
consumption (rows=resources) = [[3, 3], [2, 2]]
capacity = [8, 8]
upper_bounds = [3, 3]"
379,ilp_partition,16,1,1,1,16,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18828606605529785}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 41, 13, 17, 46, 30, 17, 35, 4, 18, 16, 3, 8, 1, 45, 44]"
380,lcs,32,18,10,0,1,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08020162582397461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcaccdaccccdcbddaaddbaccabacbdb""
T = ""cbabddadbbaaaadbbaddadacadacabad"""
381,ilp_assign,2,6,5,0,8,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36519646644592285}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 2], [4, 6]]"
382,ilp_assign,8,41,36,0,36,0,"{'ok': True, 'value': 41, 'stdout': '41\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39020442962646484}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1, 23, 2, 14, 12, 2], [17, 15, 19, 24, 22, 15, 21], [17, 10, 18, 13, 13, 22, 11], [9, 16, 3, 1, 5, 11, 3], [21, 12, 2, 2, 21, 13, 11], [7, 5, 14, 8, 10, 11, 1], [8, 7, 9, 13, 10, 16, 13]]"
383,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2094898223876953}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [68, 62, 90, 74, 53, 84, 35, 16, 73, 33, 24, 43, 59, 4, 24, 13, 21, 61, 91, 66, 38, 31, 44, 64]"
384,add,16,11265701697726455,11904212697706541,0,11265701697726455,1,"{'ok': True, 'value': 11265701697726455, 'stdout': '11265701697726455\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07459449768066406}",1,Compute: 7683990104253271 + 3581711593473184
385,sub,32,27091880869801641950979642481254,27091880869801641950979642481254,1,27091880870001641951000642481254,0,"{'ok': True, 'value': 27091880869801641950979642481254, 'stdout': '27091880869801641950979642481254\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07961654663085938}",1,Compute: 58800716612525926336973995403575 - 31708835742724284385994352922321
386,mul,2,4048,4008,0,4088,0,"{'ok': True, 'value': 4048, 'stdout': '4048\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07584834098815918}",1,Compute: 44 * 92
387,add,32,109576421601547609931588032555392,109576421591547578331587032555392,0,109576421601579610131588032555392,0,"{'ok': True, 'value': 109576421601547609931588032555392, 'stdout': '109576421601547609931588032555392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07881355285644531}",1,Compute: 85584709094621857352932171870956 + 23991712506925752578655860684436
388,sub,2,61,61,1,61,1,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07411599159240723}",1,Compute: 92 - 31
389,knap,32,1769,1628,0,24,0,"{'ok': True, 'value': 1769, 'stdout': '1769\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07855677604675293}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 14, 62, 12, 31, 17, 45, 36, 33, 6, 53, 46, 2, 42, 24, 32, 23, 60, 12, 3, 44, 1, 7, 52, 35, 38, 51, 59, 37, 47, 63, 54]
V = [69, 69, 44, 118, 101, 93, 70, 3, 83, 64, 49, 88, 121, 89, 64, 38, 47, 91, 71, 10, 74, 121, 64, 122, 47, 103, 34, 115, 83, 32, 29, 48]
C = 534"
390,ilp_partition,16,1,1,1,31,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18619775772094727}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 34, 26, 4, 6, 10, 16, 29, 31, 33, 28, 35, 8, 14, 26, 7]"
391,ilp_assign,2,7,3,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38448357582092285}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [6, 5]]"
392,sub,2,12,12,1,12,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08688163757324219}",1,Compute: 74 - 62
393,lcs,16,9,7,0,16,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0788419246673584}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdddadadaadaddc""
T = ""ddcddbabcadbabc"""
394,add,8,111095516,110995516,0,111095516,1,"{'ok': True, 'value': 111095516, 'stdout': '111095516\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0769495964050293}",1,Compute: 74563925 + 36531591
395,mul,16,37276528268211146011085956805178,37034960443118452586364638,0,37068958544956488689648442,0,"{'ok': True, 'value': 37276528268211146011085956805178, 'stdout': '37276528268211146011085956805178\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07330775260925293}",1,Compute: 4870994613815209 * 7652754975849642
396,ilp_assign,16,66,105,0,105,0,"{'ok': True, 'value': 66, 'stdout': '66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3791389465332031}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 16, 34, 46, 35, 6, 25], [35, 33, 22, 7, 36, 15, 26], [19, 40, 42, 23, 28, 1, 44], [3, 17, 47, 8, 22, 33, 9], [22, 4, 38, 7, 24, 21, 37], [31, 18, 41, 17, 12, 31, 20], [12, 1, 14, 45, 11, 44, 10]]"
397,ilp_partition,2,2,0,0,6,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08004498481750488}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 3, 3, 6]"
398,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1043100357055664}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caca""
T = ""abbc"""
399,mul,8,2459981525813142,24667712423155460,0,590664264,0,"{'ok': True, 'value': 2459981525813142, 'stdout': '2459981525813142\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08833694458007812}",1,Compute: 98666058 * 24932399
400,mul,16,52268605480251191156146046476515,The result of the multiplication operation is not feasible to calculate manually due to the large numbers involved{'ok': True, 'value': 52268605480251191156146046476515, 'stdout': '52268605480251191156146046476515\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07547497749328613}",1,Compute: 7754432471991351 * 6740481095043765
401,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07703685760498047}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbccbcbabdcadcadbcbbdaabdcddaabb""
T = ""caccadcbddbdaabcaaabacbdbcacadadb"""
402,rod,4,20,9,0,4,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09394407272338867}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 4, 4, 3]"
403,mul,8,5376080768273523,1,0,530454335483713,0,"{'ok': True, 'value': 5376080768273523, 'stdout': '5376080768273523\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0949249267578125}",1,Compute: 67759713 * 79340371
404,ilp_assign,16,52,105,0,2,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37700700759887695}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[44, 35, 29, 32, 23, 7, 3], [28, 20, 26, 13, 33, 17, 16], [47, 6, 33, 30, 32, 4, 30], [18, 28, 6, 1, 28, 28, 26], [3, 3, 15, 18, 8, 48, 48], [31, 40, 21, 18, 15, 42, 36], [10, 34, 30, 5, 41, 32, 2]]"
405,knap,16,431,154,0,12,0,"{'ok': True, 'value': 431, 'stdout': '431\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07533526420593262}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 30, 20, 4, 25, 19, 12, 11, 29, 20, 20, 2, 31, 31, 19, 24]
V = [62, 41, 12, 11, 62, 23, 59, 55, 25, 43, 36, 18, 34, 50, 44, 2]
C = 154"
406,ilp_partition,2,0,1,0,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07503795623779297}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 3, 1]"
407,sub,16,4479521710405140,4479521710405140,1,-4479521710405140,0,"{'ok': True, 'value': 4479521710405140, 'stdout': '4479521710405140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08826684951782227}",1,Compute: 9744914703396234 - 5265392992991094
408,knap,32,1719,1645,0,53,0,"{'ok': True, 'value': 1719, 'stdout': '1719\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07929253578186035}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [56, 14, 53, 42, 6, 47, 44, 16, 3, 31, 22, 5, 33, 44, 48, 51, 53, 38, 1, 20, 53, 5, 52, 21, 7, 15, 12, 20, 16, 43, 32, 31]
V = [38, 47, 41, 122, 44, 64, 72, 79, 124, 88, 43, 116, 69, 3, 90, 31, 13, 84, 35, 114, 44, 82, 59, 81, 49, 108, 94, 82, 32, 30, 20, 50]
C = 467"
409,rod,8,112,5,0,30,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0747060775756836}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 11, 1, 12, 12, 12, 24, 3]"
410,add,32,52959172867855269837456030923362,52960172867855279837456030923362,0,52959172867855269837456030923362,1,"{'ok': True, 'value': 52959172867855269837456030923362, 'stdout': '52959172867855269837456030923362\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07738018035888672}",1,Compute: 42463427565749507333732102380147 + 10495745302105762503723928543215
411,sub,4,867,8351,0,867,1,"{'ok': True, 'value': 867, 'stdout': '867\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08200430870056152}",1,Compute: 9218 - 8351
412,knap,2,10,10,1,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08266806602478027}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 5]
V = [10, 7, 3]
C = 5"
413,mul,2,1050,1050,1,5,0,"{'ok': True, 'value': 1050, 'stdout': '1050\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08218026161193848}",1,Compute: 75 * 14
414,lcs,8,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07288527488708496}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaddcadb""
T = ""cbbdbcc"""
415,rod,16,528,22,0,84,0,"{'ok': True, 'value': 528, 'stdout': '528\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07610058784484863}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [33, 32, 34, 39, 38, 44, 19, 1, 9, 41, 22, 29, 27, 39, 22, 40]"
416,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19269466400146484}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 71, 7, 23, 28, 63, 61, 35, 23, 72, 47, 12, 53, 31, 20, 23, 34, 15, 72, 25, 26, 70, 54, 8]"
417,add,2,85,85,1,85,1,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07726025581359863}",1,Compute: 14 + 71
418,knap,16,430,101,0,21,0,"{'ok': True, 'value': 430, 'stdout': '430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07448816299438477}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 31, 19, 2, 1, 1, 6, 9, 16, 32, 13, 7, 6, 18, 7, 13]
V = [17, 39, 18, 44, 19, 17, 14, 51, 62, 29, 7, 59, 29, 61, 28, 39]
C = 101"
419,sub,8,7394223,7394223,1,7394223,1,"{'ok': True, 'value': 7394223, 'stdout': '7394223\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07440185546875}",1,Compute: 18557639 - 11163416
420,ilp_prod,4,42,35,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_siw9hfzr/main.py"", line 14, in <module>\n    prob += lpSum([3*x[j] + 1*x[j+3] for j in range(3)]) <= 13\n  File ""/tmp/cot_exec_siw9hfzr/main.py"", line 14, in <listcomp>\n    prob += lpSum([3*x[j] + 1*x[j+3] for j in range(3)]) <= 13\nKeyError: 3\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1446218490600586}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4, 7]
consumption (rows=resources) = [[3, 1, 1], [3, 2, 2], [3, 1, 2]]
capacity = [15, 13, 14]
upper_bounds = [4, 6, 6]"
421,knap,4,22,15,0,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0763862133026123}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 6, 2, 4]
V = [7, 3, 15, 7]
C = 6"
422,knap,16,292,146,0,0,0,"{'ok': True, 'value': 292, 'stdout': '292\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07543706893920898}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 22, 20, 8, 25, 4, 14, 30, 31, 8, 19, 23, 16, 8, 31, 10]
V = [56, 7, 6, 4, 5, 13, 36, 14, 27, 13, 34, 3, 11, 38, 22, 60]
C = 146"
423,ilp_assign,4,17,3,0,10,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37297487258911133}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6, 3, 5], [7, 11, 8, 11], [8, 12, 3, 7], [1, 2, 10, 4]]"
424,add,16,13001456797452087,12618113106856328,0,13001456807452087,0,"{'ok': True, 'value': 13001456797452087, 'stdout': '13001456797452087\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08333277702331543}",1,Compute: 3842170206254925 + 9159286591197162
425,ilp_assign,16,105,105,1,1,0,"{'ok': True, 'value': 105, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9b6abd5c370e4882b11d6ec2f94a4b12-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/9b6abd5c370e4882b11d6ec2f94a4b12-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 105 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 105\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 105 - took 0.00 seconds\nCbc0012I Integer solution of 105 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 105, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 105 to 105\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                105.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nMinimum total cost: 105.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16951537132263184}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[43, 7, 16, 38, 13, 24, 21], [39, 25, 26, 22, 31, 9, 19], [25, 5, 38, 28, 35, 33, 11], [34, 18, 39, 34, 15, 25, 46], [47, 40, 39, 29, 12, 34, 36], [46, 48, 34, 30, 16, 15, 31], [11, 25, 22, 20, 41, 6, 37]]"
426,ilp_assign,2,7,5,0,9,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39600276947021484}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [4, 6]]"
427,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08805203437805176}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbb""
T = ""baaba"""
428,mul,2,5056,4864,0,4736,0,"{'ok': True, 'value': 5056, 'stdout': '5056\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07184815406799316}",1,Compute: 64 * 79
429,ilp_prod,16,100,The solution to this problem involves using a linear programming approach to maximize the total profit while adhering to resource constraints and integer quantity requirements.,0,165,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_i9b_em29/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_i9b_em29/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15214204788208008}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [28, 29, 15, 14, 6, 7]
consumption (rows=resources) = [[14, 2, 12, 13, 6, 3], [5, 5, 5, 5, 13, 15], [16, 15, 12, 9, 2, 16], [13, 13, 13, 4, 3, 16]]
capacity = [50, 34, 60, 38]
upper_bounds = [3, 3, 3, 3, 3, 3]"
430,lcs,16,5,6,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09731864929199219}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccacaaabcaacbbac""
T = ""ddddbbdbabbabbdbd"""
431,ilp_partition,2,0,The answer will be the minimum difference calculated based on the above steps.,0,2,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07510757446289062}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 3, 5, 2]"
432,ilp_assign,32,89,185,0,1,0,"{'ok': True, 'value': 89, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/07c0696a237c4b9588632d7e44a9ebb2-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/07c0696a237c4b9588632d7e44a9ebb2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 89 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 89\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 89 - took 0.00 seconds\nCbc0012I Integer solution of 89 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 89, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 89 to 89\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                89.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 89.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1534256935119629}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[41, 30, 89, 19, 81, 79, 49], [1, 25, 77, 2, 44, 1, 50], [28, 25, 11, 5, 80, 80, 40], [49, 21, 74, 59, 47, 52, 82], [23, 55, 32, 59, 92, 54, 10], [76, 10, 80, 21, 17, 49, 51], [10, 20, 30, 80, 75, 19, 76]]"
433,mul,4,22475132,22539328,0,22485072,0,"{'ok': True, 'value': 22475132, 'stdout': '22475132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09265995025634766}",1,Compute: 3356 * 6697
434,ilp_prod,32,338,1004,0,258,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_m0z8qksd/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_m0z8qksd/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14785194396972656}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [87, 9, 63, 82, 41, 44]
consumption (rows=resources) = [[3, 8, 23, 28, 24, 16], [20, 27, 14, 15, 19, 26], [9, 21, 19, 22, 11, 18], [19, 28, 12, 5, 6, 7]]
capacity = [67, 70, 123, 106]
upper_bounds = [3, 3, 3, 3, 3, 3]"
435,sub,32,13682109075738233543910224781388,11880909080002144000,0,136821090757382336539101247811388,0,"{'ok': True, 'value': 13682109075738233543910224781388, 'stdout': '13682109075738233543910224781388\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07717657089233398}",1,Compute: 75660432425282012100777835235803 - 61978323349543778556867610454415
436,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07874536514282227}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 72, 65, 56, 35, 69, 92, 96, 69, 39, 5, 2, 15, 36, 84, 90, 14, 29, 20, 66, 49, 86, 39, 25]"
437,knap,2,9,15,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0732259750366211}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 5]
V = [6, 9, 6]
C = 6"
438,knap,32,1605,1645,0,38,0,"{'ok': True, 'value': 1605, 'stdout': '1605\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09384799003601074}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [35, 21, 47, 6, 52, 56, 25, 39, 25, 52, 32, 58, 7, 38, 28, 63, 56, 24, 56, 60, 41, 15, 11, 44, 41, 21, 45, 35, 15, 7, 37, 22]
V = [100, 24, 91, 85, 111, 43, 74, 103, 12, 119, 77, 44, 34, 37, 103, 88, 25, 108, 45, 6, 60, 37, 72, 83, 124, 79, 36, 61, 19, 45, 26, 99]
C = 557"
439,rod,2,8,6,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07397627830505371}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
440,knap,16,352,138,0,0,0,"{'ok': True, 'value': 352, 'stdout': '352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07309198379516602}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 16, 7, 1, 30, 8, 21, 32, 14, 7, 2, 20, 27, 14, 21, 28]
V = [25, 22, 23, 7, 64, 56, 15, 23, 2, 6, 11, 59, 56, 45, 25, 8]
C = 138"
441,rod,8,152,30,0,2,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10045313835144043}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 19, 17, 11, 10, 3, 18, 20]"
442,ilp_partition,2,4,1,0,6,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09097170829772949}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 5, 1]"
443,ilp_prod,8,168,105,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_h9vtx54_/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_h9vtx54_/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14393997192382812}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 20, 23, 24]
consumption (rows=resources) = [[4, 3, 7, 3], [2, 2, 5, 3], [6, 8, 8, 3], [5, 4, 5, 2]]
capacity = [32, 26, 23, 23]
upper_bounds = [3, 3, 3, 7]"
444,sub,32,65541064721143707753415581247310,23373449052719114822093792696895,0,65541064721143707753415581247310,1,"{'ok': True, 'value': 65541064721143707753415581247310, 'stdout': '65541064721143707753415581247310\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0847313404083252}",1,Compute: 88914513773862822575509373944205 - 23373449052719114822093792696895
445,ilp_prod,16,233,The problem is a linear programming problem and can be solved using a solver. The solution would be the maximum profit that can be obtained while satisfying all the constraints.,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_s92wq1m0/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14630842208862305}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [44, 37, 11, 10, 31, 11]
consumption (rows=resources) = [[2, 3, 15, 5, 7, 6], [3, 6, 10, 9, 15, 15], [16, 2, 16, 10, 11, 5], [16, 9, 8, 15, 12, 2]]
capacity = [57, 51, 50, 57]
upper_bounds = [3, 6, 3, 3, 3, 3]"
446,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08398747444152832}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 6, 2]"
447,rod,2,12,6,0,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08084368705749512}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 3]"
448,add,16,7219820946624302,20631457852428216,0,7219820946524302,0,"{'ok': True, 'value': 7219820946624302, 'stdout': '7219820946624302\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07399415969848633}",1,Compute: 1963145785242821 + 5256675161381481
449,ilp_prod,32,312,1000,0,255,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_etat9cqy/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16187214851379395}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [78, 43, 39, 51, 91, 70]
consumption (rows=resources) = [[20, 17, 2, 30, 23, 15], [18, 11, 28, 21, 22, 26], [12, 25, 18, 18, 17, 23], [19, 9, 31, 22, 24, 8]]
capacity = [73, 96, 91, 122]
upper_bounds = [3, 3, 3, 3, 3, 3]"
450,ilp_prod,8,73,105,0,66,0,"{'ok': True, 'value': 27, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f34b323b9c204924a8621e34e136314b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f34b323b9c204924a8621e34e136314b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 17 COLUMNS\nAt line 78 RHS\nAt line 91 BOUNDS\nAt line 96 ENDATA\nProblem MODEL has 12 rows, 4 columns and 48 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 27 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -27 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                27.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n27.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15076303482055664}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 22, 7, 10]
consumption (rows=resources) = [[4, 6, 1, 4], [8, 1, 2, 3], [7, 3, 8, 4], [4, 1, 6, 3]]
capacity = [21, 29, 23, 24]
upper_bounds = [3, 3, 3, 5]"
451,add,32,80200551631782376208713733897265,6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,79999999999999999999999999999999,0,"{'ok': True, 'value': 80200551631782376208713733897265, 'stdout': '80200551631782376208713733897265\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09061121940612793}",1,Compute: 45905293373380881188783043982672 + 34295258258401495019930689914593
452,ilp_assign,4,8,10,0,24,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38273167610168457}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 3, 6, 9], [2, 11, 1, 1], [10, 5, 2, 8], [2, 1, 11, 1]]"
453,sub,8,8868449,8868449,1,8868449,1,"{'ok': True, 'value': 8868449, 'stdout': '8868449\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08274102210998535}",1,Compute: 67188145 - 58319696
454,add,2,169,169,1,169,1,"{'ok': True, 'value': 169, 'stdout': '169\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08712387084960938}",1,Compute: 94 + 75
455,add,32,108504120962316108060452268547459,24,0,108504120962316108060453068547459,0,"{'ok': True, 'value': 108504120962316108060452268547459, 'stdout': '108504120962316108060452268547459\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08887791633605957}",1,Compute: 28437180478630062294750099913776 + 80066940483686045765702168633683
456,knap,4,27,23,0,0,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07931137084960938}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 3, 8, 8]
V = [15, 12, 7, 2]
C = 13"
457,knap,8,108,103,0,0,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08938217163085938}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 3, 14, 15, 10, 14, 15, 13]
V = [9, 30, 31, 25, 7, 22, 18, 10]
C = 48"
458,rod,16,560,65,0,65,0,"{'ok': True, 'value': 560, 'stdout': '560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07673168182373047}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 7, 32, 16, 41, 5, 44, 34, 24, 17, 9, 26, 17, 5, 41, 46]"
459,knap,32,1573,1044,0,49,0,"{'ok': True, 'value': 1573, 'stdout': '1573\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08452081680297852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 39, 53, 20, 62, 39, 61, 22, 22, 57, 44, 54, 49, 39, 45, 45, 57, 25, 48, 57, 10, 57, 31, 13, 52, 38, 34, 21, 36, 33, 17, 46]
V = [41, 61, 3, 116, 78, 16, 94, 52, 96, 16, 40, 62, 16, 59, 62, 117, 118, 20, 94, 78, 48, 47, 118, 66, 95, 123, 64, 123, 22, 59, 26, 53]
C = 618"
460,mul,8,1502345450884160,8858455533600000,0,14916433445680,0,"{'ok': True, 'value': 1502345450884160, 'stdout': '1502345450884160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09639644622802734}",1,Compute: 92682908 * 16209520
461,lcs,8,6,5,0,0,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07761883735656738}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdaacbdd""
T = ""bdbabdccd"""
462,ilp_partition,4,2,0,0,10,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07465291023254395}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 3, 10, 7]"
463,ilp_prod,32,182,0,0,70,0,"{'ok': True, 'value': 160, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c2c1bb3c451b4fddbba74e5742c5224f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c2c1bb3c451b4fddbba74e5742c5224f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 17 COLUMNS\nAt line 108 RHS\nAt line 121 BOUNDS\nAt line 128 ENDATA\nProblem MODEL has 12 rows, 6 columns and 72 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 170 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -160 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                160.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n160.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16643476486206055}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [80, 51, 8, 62, 87, 54]
consumption (rows=resources) = [[31, 8, 32, 28, 3, 18], [30, 30, 1, 31, 27, 26], [28, 3, 12, 20, 10, 8], [1, 9, 19, 20, 28, 31]]
capacity = [68, 70, 85, 82]
upper_bounds = [3, 3, 3, 3, 3, 3]"
464,ilp_partition,4,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07659530639648438}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 9, 10]"
465,add,4,13780,13780,1,13780,1,"{'ok': True, 'value': 13780, 'stdout': '13780\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07703948020935059}",1,Compute: 8764 + 5016
466,lcs,16,10,6,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07678985595703125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdddacabcadbcdc""
T = ""cabbdcadacbcabdd"""
467,ilp_assign,32,125,145,0,110,0,"{'ok': True, 'value': 125, 'stdout': '125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3916780948638916}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 59, 61, 78, 21, 87, 43], [49, 89, 45, 82, 29, 69, 21], [72, 50, 41, 37, 71, 55, 78], [7, 14, 79, 36, 15, 74, 62], [7, 16, 40, 32, 67, 23, 29], [71, 53, 86, 13, 90, 69, 35], [95, 6, 21, 15, 41, 81, 20]]"
468,add,2,85,85,1,85,1,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08343887329101562}",1,Compute: 72 + 13
469,sub,2,13,13,1,13,1,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07984423637390137}",1,Compute: 68 - 55
470,ilp_partition,2,2,The answer will be the minimum difference between the two groups.,0,43,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08442449569702148}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 5, 6]"
471,lcs,4,1,3,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08709025382995605}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbd""
T = ""cbaaa"""
472,sub,4,2756,2756,1,2756,1,"{'ok': True, 'value': 2756, 'stdout': '2756\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08538675308227539}",1,Compute: 7497 - 4741
473,mul,16,14314025439458578356932532159110,"The actual computation of the large number multiplication is not feasible to be done here due to the size of the numbers. However, the process can be done using arbitrary precision arithmetic in a programming language.",0,1410343354994182051086360860,0,"{'ok': True, 'value': 14314025439458578356932532159110, 'stdout': '14314025439458578356932532159110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09377884864807129}",1,Compute: 3645156524985455 * 3926861670094042
474,mul,16,35096591900935280632846315858530,2177,0,34658743710995176868586330,0,"{'ok': True, 'value': 35096591900935280632846315858530, 'stdout': '35096591900935280632846315858530\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07642030715942383}",1,Compute: 8299696501773890 * 4228659673692177
475,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07436394691467285}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cc""
T = ""c"""
476,ilp_partition,16,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1892414093017578}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [33, 42, 1, 13, 33, 36, 32, 46, 17, 1, 13, 12, 29, 24, 28, 15]"
477,knap,8,82,103,0,0,0,"{'ok': True, 'value': 82, 'stdout': '82\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0859842300415039}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 12, 12, 14, 10, 9, 15, 3]
V = [4, 7, 18, 20, 14, 28, 13, 16]
C = 44"
478,ilp_prod,16,135,160,0,168,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_azis77uw/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14804577827453613}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 33, 16, 30, 29, 21]
consumption (rows=resources) = [[14, 14, 4, 12, 8, 4], [2, 16, 9, 16, 14, 7], [8, 6, 7, 6, 16, 16], [6, 3, 13, 10, 4, 14]]
capacity = [61, 33, 48, 55]
upper_bounds = [4, 3, 3, 3, 3, 3]"
479,ilp_partition,4,1,0,0,5,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08253192901611328}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 3, 9, 5]"
480,ilp_prod,8,48,50,0,1,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/27a99adfc3d642a191ead445cfd3507c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/27a99adfc3d642a191ead445cfd3507c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 50.6667 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -48 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -50.5 to -48 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 4.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -48, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -50.5 to -48\nProbing was tried 1 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17351365089416504}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 5, 16, 10]
consumption (rows=resources) = [[6, 2, 6, 4], [2, 6, 5, 1], [6, 1, 7, 2], [1, 1, 3, 8]]
capacity = [19, 22, 27, 18]
upper_bounds = [3, 3, 3, 3]"
481,add,2,93,93,1,93,1,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07544517517089844}",1,Compute: 54 + 39
482,rod,16,448,132,0,65,0,"{'ok': True, 'value': 448, 'stdout': '448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07655787467956543}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [28, 35, 39, 4, 8, 39, 44, 25, 31, 30, 47, 2, 6, 4, 39, 33]"
483,sub,8,15296507,15296507,1,15296507,1,"{'ok': True, 'value': 15296507, 'stdout': '15296507\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08684206008911133}",1,Compute: 66266184 - 50969677
484,knap,4,33,26,0,0,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07534670829772949}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 2, 7]
V = [5, 15, 13, 6]
C = 6"
485,mul,2,2352,2401,0,2352,1,"{'ok': True, 'value': 2352, 'stdout': '2352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08708977699279785}",1,Compute: 49 * 48
486,sub,4,439,439,1,-439,0,"{'ok': True, 'value': 439, 'stdout': '439\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08237600326538086}",1,Compute: 5140 - 4701
487,ilp_partition,16,0,1,0,23,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22234845161437988}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 30, 35, 33, 23, 36, 3, 29, 27, 23, 17, 7, 48, 11, 16, 17]"
488,ilp_assign,4,18,4,0,32,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3961484432220459}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 10, 3, 9], [4, 10, 1, 4], [12, 8, 6, 11], [3, 7, 11, 6]]"
489,lcs,32,19,15,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08199477195739746}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbcaaaabdacdcbdccdcbccbdccdabaa""
T = ""ccdbaccaacaadadaaabacadadaabcbda"""
490,add,16,6728572035338609,2776770,0,6728571035338609,0,"{'ok': True, 'value': 6728572035338609, 'stdout': '6728572035338609\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07348513603210449}",1,Compute: 4479839859393835 + 2248732175944774
491,mul,8,2002371572907087,253,0,1999688454883,0,"{'ok': True, 'value': 2002371572907087, 'stdout': '2002371572907087\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08283114433288574}",1,Compute: 57548811 * 34794317
492,ilp_partition,16,0,1,0,150,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21441030502319336}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 22, 20, 17, 26, 22, 3, 3, 8, 48, 16, 4, 2, 7, 29, 6]"
493,mul,4,30269538,2992998,0,30355938,0,"{'ok': True, 'value': 30269538, 'stdout': '30269538\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07976388931274414}",1,Compute: 9477 * 3194
494,knap,16,431,109,0,22,0,"{'ok': True, 'value': 431, 'stdout': '431\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07799005508422852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 22, 29, 11, 7, 30, 9, 10, 1, 25, 11, 9, 7, 14, 8, 4]
V = [63, 29, 51, 45, 38, 12, 29, 48, 4, 13, 34, 36, 38, 40, 24, 56]
C = 109"
495,add,16,4973506256166924,4953486256166924,0,5000000000000000,0,"{'ok': True, 'value': 4973506256166924, 'stdout': '4973506256166924\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07768964767456055}",1,Compute: 3056144135201593 + 1917362120965331
496,mul,4,12673134,1644,0,12603939,0,"{'ok': True, 'value': 12673134, 'stdout': '12673134\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0692756175994873}",1,Compute: 3123 * 4058
497,ilp_partition,32,0,1,0,75,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20446252822875977}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [40, 46, 25, 34, 81, 51, 56, 9, 48, 25, 75, 92, 94, 21, 7, 4, 32, 62, 15, 66, 36, 86, 26, 41]"
498,sub,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07486343383789062}",1,Compute: 89 - 79
499,knap,2,14,17,0,-1,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07620882987976074}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 1]
V = [9, 6, 8]
C = 2"
500,ilp_partition,4,1,0,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_s0u8yc6q/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_s0u8yc6q/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07426214218139648}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 12, 7, 3]"
501,ilp_assign,8,51,69,0,80,0,"{'ok': True, 'value': 51, 'stdout': '51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42816758155822754}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 24, 6, 14, 9, 12, 10], [11, 9, 6, 17, 19, 7, 20], [20, 18, 4, 20, 6, 9, 4], [7, 2, 22, 22, 5, 17, 21], [19, 22, 21, 24, 22, 15, 24], [21, 18, 4, 18, 18, 8, 6], [14, 14, 20, 6, 2, 11, 23]]"
502,add,2,166,166,1,166,1,"{'ok': True, 'value': 166, 'stdout': '166\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08709955215454102}",1,Compute: 99 + 67
503,mul,4,43323600,43359600,0,42697600,0,"{'ok': True, 'value': 43323600, 'stdout': '43323600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08538937568664551}",1,Compute: 5484 * 7900
504,sub,8,19557615,10782198,0,19557615,1,"{'ok': True, 'value': 19557615, 'stdout': '19557615\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09124374389648438}",1,Compute: 30339813 - 10782198
505,add,16,10588479741921405,23537105612303496,0,10588479741921405,1,"{'ok': True, 'value': 10588479741921405, 'stdout': '10588479741921405\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08690810203552246}",1,Compute: 3104351111617910 + 7484128630303495
506,ilp_partition,8,1,1,1,15,0,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07482075691223145}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 19, 9, 4, 11, 11, 3, 15]"
507,sub,32,87116008115242570923703921793695,87116008015242570923703921893705,0,87096008115242570926703917793695,0,"{'ok': True, 'value': 87116008115242570923703921793695, 'stdout': '87116008115242570923703921793695\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09794926643371582}",1,Compute: 98119830354402135160020373338436 - 11003822239159564236316451544741
508,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07641839981079102}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [33, 59, 79, 4, 53, 41, 16, 94, 50, 42, 94, 61, 78, 47, 91, 83, 92, 9, 39, 72, 9, 89, 39, 59]"
509,ilp_prod,2,12,21,0,18,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ddea1e8133964941b1ae57df11554a41-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ddea1e8133964941b1ae57df11554a41-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1620466709136963}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 3]
consumption (rows=resources) = [[3, 2], [1, 2]]
capacity = [7, 10]
upper_bounds = [3, 3]"
510,mul,16,14462624199787660938027713119584,4396615626040054,0,14334543632487449648486444888,0,"{'ok': True, 'value': 14462624199787660938027713119584, 'stdout': '14462624199787660938027713119584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09750032424926758}",1,Compute: 3289490242023696 * 4396615626040054
511,ilp_partition,32,1,1,1,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.028567314147949}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [87, 69, 79, 1, 5, 56, 81, 89, 75, 4, 20, 35, 36, 83, 12, 86, 43, 20, 86, 46, 67, 45, 52, 80]"
512,add,16,12369875879248092,12370774879248192,0,12369875879248192,0,"{'ok': True, 'value': 12369875879248092, 'stdout': '12369875879248092\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08130979537963867}",1,Compute: 3024611007668281 + 9345264871579811
513,ilp_assign,32,177,205,0,205,0,"{'ok': True, 'value': 177, 'stdout': '177\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43246984481811523}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[84, 76, 79, 91, 85, 77, 61], [22, 52, 9, 74, 28, 73, 2], [47, 45, 45, 69, 84, 29, 79], [6, 41, 34, 70, 26, 17, 62], [90, 9, 41, 69, 44, 61, 12], [67, 36, 65, 30, 58, 69, 92], [87, 6, 67, 91, 37, 81, 34]]"
514,knap,16,407,145,0,0,0,"{'ok': True, 'value': 407, 'stdout': '407\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07985854148864746}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 25, 14, 28, 24, 23, 8, 22, 2, 25, 17, 19, 30, 19, 12, 10]
V = [64, 43, 6, 42, 60, 31, 53, 5, 57, 21, 29, 29, 51, 13, 20, 30]
C = 146"
515,ilp_partition,4,4,1,0,2,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07648944854736328}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 9, 8, 9]"
516,rod,16,304,54,0,65,0,"{'ok': True, 'value': 304, 'stdout': '304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08877801895141602}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [19, 35, 44, 2, 18, 4, 18, 14, 25, 40, 25, 28, 16, 24, 15, 6]"
517,ilp_partition,8,1,1,1,14,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09738516807556152}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 13, 5, 13, 3, 24, 20]"
518,knap,2,10,11,0,-1,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0762629508972168}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 2]
V = [2, 10, 1]
C = 4"
519,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08504843711853027}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""da"""
520,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09437131881713867}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 5, 3]"
521,knap,2,10,20,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07502198219299316}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 3]
V = [10, 10, 2]
C = 5"
522,rod,32,1568,96,0,640,0,"{'ok': True, 'value': 1568, 'stdout': '1568\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08744406700134277}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [49, 32, 57, 66, 19, 21, 48, 17, 44, 69, 96, 79, 74, 27, 51, 82, 85, 48, 31, 57, 10, 53, 48, 64, 22, 48, 16, 68, 33, 25, 37, 48]"
523,knap,16,460,155,0,0,0,"{'ok': True, 'value': 460, 'stdout': '460\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07475900650024414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 25, 24, 22, 31, 24, 23, 15, 31, 27, 30, 16, 7, 10, 13, 10]
V = [29, 17, 44, 53, 59, 58, 60, 14, 25, 1, 59, 52, 64, 26, 58, 10]
C = 155"
524,sub,16,1775160523906214,5042668753071926,0,1775160523906214,1,"{'ok': True, 'value': 1775160523906214, 'stdout': '1775160523906214\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07653975486755371}",1,Compute: 6817829276978140 - 5042668753071926
525,lcs,32,21,15,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07760477066040039}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcabdbaccbbaaddbcdccabbdcdbdcbd""
T = ""cbdcbcaddcbbaabccbacbaddaacabddbd"""
526,lcs,8,5,5,1,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07581663131713867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abddaacc""
T = ""acdaccbc"""
527,mul,4,7942112,79217216,0,789932,0,"{'ok': True, 'value': 7942112, 'stdout': '7942112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07388043403625488}",1,Compute: 2264 * 3508
528,rod,4,48,12,0,12,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07547640800476074}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 11, 6, 7]"
529,ilp_prod,4,32,36,0,30,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/478194452add4ab3af8547ae2889911f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/478194452add4ab3af8547ae2889911f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16383647918701172}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8, 12]
consumption (rows=resources) = [[2, 2, 2], [3, 3, 3], [3, 1, 4]]
capacity = [12, 11, 10]
upper_bounds = [3, 3, 3]"
530,sub,16,5439045219999479,5438945220000479,0,5439045220000000,0,"{'ok': True, 'value': 5439045219999479, 'stdout': '5439045219999479\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07608246803283691}",1,Compute: 6588260931747456 - 1149215711747977
531,ilp_assign,4,21,0,0,28,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3916027545928955}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3, 4, 2], [10, 8, 9, 9], [6, 11, 11, 5], [4, 9, 10, 5]]"
532,mul{'ok': True, 'value': 5203270485956217900053345227907683337861216424311163278354429168, 'stdout': '5203270485956217900053345227907683337861216424311163278354429168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08294820785522461}",1,Compute: 58819922525246009780435210123998 * 88461022432032787233729302577416
533,ilp_partition,16,0,1,0,36,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20846962928771973}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 42, 16, 40, 36, 40, 7, 45, 12, 13, 34, 24, 29, 18, 2, 43]"
534,ilp_prod,16,178,105,0,41,0,"{'ok': True, 'value': 40, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6b1ecff6327c462d8d1664a67f7a7bff-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6b1ecff6327c462d8d1664a67f7a7bff-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 23 COLUMNS\nAt line 150 RHS\nAt line 169 BOUNDS\nAt line 176 ENDATA\nProblem MODEL has 18 rows, 6 columns and 108 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 54.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -40 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                40.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n40.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1505124568939209}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 34, 24, 24, 29, 31]
consumption (rows=resources) = [[1, 2, 10, 2, 13, 14], [5, 10, 4, 14, 16, 13], [4, 16, 4, 3, 14, 15], [10, 8, 9, 1, 9, 5]]
capacity = [50, 61, 41, 50]
upper_bounds = [5, 3, 5, 4, 3, 3]"
535,ilp_partition,8,0,1,0,0,1,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07661747932434082}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 4, 1, 20, 15, 6, 3, 18]"
536,add,8,46916384,36,0,46916384,1,"{'ok': True, 'value': 46916384, 'stdout': '46916384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0747380256652832}",1,Compute: 12495374 + 34421010
537,add,32,89194229438271121156239441275954,89224232438271121156240441276154,0,89194229438271121156239441375954,0,"{'ok': True, 'value': 89194229438271121156239441275954, 'stdout': '89194229438271121156239441275954\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07612729072570801}",1,Compute: 26660702353471297991053664369492 + 62533527084799823165185776906462
538,ilp_assign,2,5,5,1,8,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3710813522338867}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [3, 5]]"
539,rod,2,12,6,0,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07299423217773438}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
540,sub,16,1630307454914643,-1389693645085357,0,1630307454914643,1,"{'ok': True, 'value': 1630307454914643, 'stdout': '1630307454914643\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10672831535339355}",1,Compute: 4355629069883848 - 2725321614969205
541,sub,2,15,15,1,15,1,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07550668716430664}",1,Compute: 72 - 57
542,add,16,11992867306326287,11992867306326287,1,11992867306326387,0,"{'ok': True, 'value': 11992867306326287, 'stdout': '11992867306326287\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0765998363494873}",1,Compute: 3650778852782425 + 8342088453543862
543,mul{'ok': True, 'value': 2241218354538315128945928420671, 'stdout': '2241218354538315128945928420671\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08940291404724121}",1,Compute: 1476153567411041 * 1518282652982431
544,mul{'ok': True, 'value': 8591325334339140485547100024782, 'stdout': '8591325334339140485547100024782\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07891345024108887}",1,Compute: 1670825897197574 * 5141963234319693
545,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07302236557006836}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 5, 4]"
546,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0748286247253418}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""ad"""
547,sub,16,3490602152425137,3489602152425137,0,3490602152425137,1,"{'ok': True, 'value': 3490602152425137, 'stdout': '3490602152425137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08899474143981934}",1,Compute: 4785885636497899 - 1295283484072762
548,rod,8,176,25,0,1,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07627558708190918}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 3, 8, 9, 10, 18, 15, 11]"
549,add,16,11451807430017767,15555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555,0,11451807430012767,0,"{'ok': True, 'value': 11451807430017767, 'stdout': '11451807430017767\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08545064926147461}",1,Compute: 1453884300099312 + 9997923129918455
550,ilp_prod,8,103,85,0,26,0,"{'ok': True, 'value': 103, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6a9a40423b4243b6969a441dcc4a0116-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6a9a40423b4243b6969a441dcc4a0116-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 108.811 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -103 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -107.68852 to -107.68852 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -103, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -107.689 to -107.689\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                103.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n103.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17995047569274902}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 12, 23, 19]
consumption (rows=resources) = [[3, 3, 3, 1], [1, 7, 4, 4], [8, 2, 1, 7], [3, 5, 8, 3]]
capacity = [28, 22, 25, 26]
upper_bounds = [3, 3, 3, 3]"
551,ilp_assign,16,89,117,0,159,0,"{'ok': True, 'value': 89, 'stdout': '89\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38397955894470215}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 4, 25, 10, 9, 23, 28], [19, 28, 6, 5, 31, 4, 35], [33, 39, 28, 34, 23, 10, 33], [45, 26, 43, 8, 19, 47, 23], [34, 4, 47, 12, 41, 14, 40], [40, 2, 28, 18, 25, 27, 36], [27, 28, 36, 42, 37, 26, 45]]"
552,mul,2,1134,1134,1,1134,1,"{'ok': True, 'value': 1134, 'stdout': '1134\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07698249816894531}",1,Compute: 81 * 14
553,ilp_partition,8,1,1,1,0,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07698774337768555}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 7, 18, 2, 19, 21, 14, 7]"
554,rod,16,352,1,0,64,0,"{'ok': True, 'value': 352, 'stdout': '352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09382820129394531}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [22, 14, 21, 30, 22, 38, 31, 6, 38, 47, 16, 16, 30, 5, 44, 39]"
555,ilp_prod,8,114,120,0,100,0,"{'ok': True, 'value': 114, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8531c372ccba475fb415354d88e7c9e8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8531c372ccba475fb415354d88e7c9e8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 119.571 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -99 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -114 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -119.57143 to -114 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 4.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -114, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -119.571 to -114\nProbing was tried 2 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                114.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n114.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15449929237365723}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 8, 9, 9]
consumption (rows=resources) = [[1, 1, 7, 8], [1, 4, 4, 2], [6, 7, 3, 1], [7, 5, 6, 1]]
capacity = [30, 26, 28, 30]
upper_bounds = [4, 4, 4, 3]"
556,knap,2,5,9,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0785527229309082}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 2]
V = [3, 5, 3]
C = 3"
557,ilp_partition,16,1,1,1,2,0,"{'ok': True, 'value': 269, 'stdout': '269\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08758187294006348}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [31, 1, 2, 40, 23, 12, 23, 8, 20, 13, 43, 17, 41, 27, 1, 33]"
558,knap,32,1368,1043,0,3,0,"{'ok': True, 'value': 1368, 'stdout': '1368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09253239631652832}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 27, 23, 20, 20, 7, 4, 37, 28, 22, 16, 8, 28, 24, 42, 46, 57, 18, 8, 3, 30, 16, 37, 62, 3, 32, 17, 46, 61, 8, 19, 15]
V = [5, 88, 10, 90, 40, 8, 9, 39, 39, 26, 24, 34, 41, 97, 91, 86, 38, 8, 108, 123, 103, 31, 47, 45, 24, 18, 53, 75, 27, 114, 25, 122]
C = 394"
559,sub,4,7302,7282,0,7302,1,"{'ok': True, 'value': 7302, 'stdout': '7302\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07471036911010742}",1,Compute: 8609 - 1307
560,add,4,2621,2621,1,2621,1,"{'ok': True, 'value': 2621, 'stdout': '2621\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07439398765563965}",1,Compute: 1612 + 1009
561,mul,32,1412510375150158008720262904062418773543130649679996873474346250,141437631253264223863222532241051,0,1418843843936888496444495968696964544666454375,0,"{'ok': True, 'value': 1412510375150158008720262904062418773543130649679996873474346250, 'stdout': '1412510375150158008720262904062418773543130649679996873474346250\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08906030654907227}",1,Compute: 17770939727887605195413544594375 * 79484281460565180360546319206054
562,ilp_prod,32,338,1050,0,2008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__kawal9b/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec__kawal9b/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14411401748657227}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [38, 52, 78, 26, 62, 66]
consumption (rows=resources) = [[10, 18, 10, 6, 28, 31], [9, 20, 19, 24, 25, 5], [2, 17, 22, 3, 26, 18], [28, 11, 26, 1, 21, 28]]
capacity = [74, 106, 123, 106]
upper_bounds = [3, 4, 4, 4, 3, 3]"
563,ilp_prod,32,438,1065,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ugd9myiz/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ugd9myiz/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1575336456298828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 36, 49, 61, 80, 66]
consumption (rows=resources) = [[22, 17, 24, 8, 5, 21], [31, 1, 1, 13, 6, 12], [20, 24, 12, 31, 23, 15], [16, 18, 9, 6, 29, 2]]
capacity = [108, 90, 127, 93]
upper_bounds = [3, 5, 4, 4, 3, 5]"
564,knap,2,8,13,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10854625701904297}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 2]
V = [4, 6, 8]
C = 5"
565,rod,32,1856,1024,0,165,0,"{'ok': True, 'value': 1856, 'stdout': '1856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07852721214294434}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [58, 48, 85, 59, 5, 33, 57, 20, 95, 36, 9, 31, 5, 28, 17, 54, 14, 83, 54, 22, 12, 51, 53, 2, 18, 24, 77, 58, 10, 23, 49, 3]"
566,add,32,92251869915927140651825047758146,0,0,92251869915927140651825047758146,1,"{'ok': True, 'value': 92251869915927140651825047758146, 'stdout': '92251869915927140651825047758146\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07663249969482422}",1,Compute: 21229897716595737510217393307934 + 71021972199331403141607654450212
567,add,4,18883,18883,1,18883,1,"{'ok': True, 'value': 18883, 'stdout': '18883\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09059476852416992}",1,Compute: 9897 + 8986
568,ilp_partition,16,0,1,0,13,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19554471969604492}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 26, 36, 8, 9, 26, 44, 18, 13, 48, 41, 6, 27, 6, 32, 26]"
569,sub,2,49,49,1,49,1,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12939977645874023}",1,Compute: 59 - 10
570,ilp_assign,4,17,26,0,33,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3847639560699463}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 6, 10, 12], [5, 7, 10, 5], [6, 10, 2, 7], [4, 10, 8, 6]]"
571,mul,32,7565871867532635209546382102360140257683214503372677713923061232,,0,748203946409469444760440446404030448488888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888,0,"{'ok': True, 'value': 7565871867532635209546382102360140257683214503372677713923061232, 'stdout': '7565871867532635209546382102360140257683214503372677713923061232\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07514357566833496}",1,Compute: 95004815601342935229132017691664 * 79636719671983535255305149317663
572,lcs,8,5,4,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08272361755371094}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddabcbbd""
T = ""ddadacd"""
573,ilp_prod,16,183,200,0,4,0,"{'ok': True, 'value': 135, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/51083660078e4d9bbed5f95caa3e1d12-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/51083660078e4d9bbed5f95caa3e1d12-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 14 COLUMNS\nAt line 87 RHS\nAt line 97 BOUNDS\nAt line 104 ENDATA\nProblem MODEL has 9 rows, 6 columns and 54 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 135 - 0.00 seconds\nCgl0004I processed model has 5 rows, 6 columns (6 integer (0 of which binary)) and 30 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -135 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -135, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -135 to -135\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                135.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nThe maximum profit is: 135.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1755225658416748}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [40, 31, 42, 4, 45, 16]
consumption (rows=resources) = [[14, 6, 16, 4, 4, 9], [13, 7, 15, 3, 14, 13], [14, 10, 16, 15, 13, 4], [12, 2, 16, 8, 12, 7]]
capacity = [39, 56, 56, 38]
upper_bounds = [3, 5, 3, 3, 3, 4]"
574,ilp_assign,8,29,36,0,46,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3733978271484375}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 11, 23, 6, 5, 12, 8], [22, 19, 2, 23, 24, 14, 21], [6, 11, 19, 7, 21, 8, 16], [10, 9, 19, 21, 17, 17, 23], [19, 17, 16, 8, 6, 23, 3], [19, 8, 15, 5, 13, 6, 1], [23, 4, 24, 2, 2, 18, 2]]"
575,mul,16,19246751548509381693574124637612,0,0,199999999999999980000000000000000,0,"{'ok': True, 'value': 19246751548509381693574124637612, 'stdout': '19246751548509381693574124637612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07909440994262695}",1,Compute: 8841973028224371 * 2176748502519972
576,rod,8,76,22,0,1,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07670211791992188}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [8, 19, 21, 6, 5, 22, 24, 14]"
577,lcs,16,8,7,0,1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09788131713867188}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbdbbbbcbaccaab""
T = ""abacbabdadaabaa"""
578,ilp_prod,2,42,21,0,6,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1d102cad901d42c6add577d297ec0ecc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1d102cad901d42c6add577d297ec0ecc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 9.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16434144973754883}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[1, 1], [2, 1]]
capacity = [9, 6]
upper_bounds = [3, 6]"
579,sub,32,64824286420295497052754341710348,74093910620882578326120458237587,0,64824296420295497052754341710348,0,"{'ok': True, 'value': 64824286420295497052754341710348, 'stdout': '64824286420295497052754341710348\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06917595863342285}",1,Compute: 90963210386449135426120458237587 - 26138923966153638373366116527239
580,ilp_prod,8,91,105,0,4,0,"{'ok': True, 'value': 91, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/333a944f08364948914f87ad529dc8e1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/333a944f08364948914f87ad529dc8e1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 97.8571 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -79 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 2 columns\nCbc0012I Integer solution of -91 found by DiveCoefficient after 3 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3.5\nCbc0013I At root node, 2 cuts changed objective from -97.857143 to -91 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 5 row cuts average 3.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -91, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -97.8571 to -91\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                91.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n91.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16489505767822266}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 23, 13, 5]
consumption (rows=resources) = [[1, 5, 7, 3], [4, 6, 7, 1], [4, 3, 4, 2], [4, 2, 4, 4]]
capacity = [17, 29, 26, 20]
upper_bounds = [5, 3, 3, 5]"
581,ilp_assign,32,103,185,0,105,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40212035179138184}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 12, 73, 71, 85, 70, 63], [90, 45, 44, 8, 40, 10, 11], [27, 27, 23, 88, 62, 85, 60], [60, 3, 69, 24, 32, 96, 34], [8, 17, 5, 96, 94, 23, 70], [70, 33, 71, 64, 93, 31, 74], [79, 91, 20, 71, 1, 46, 63]]"
582,sub,16,724851379795484,7248513797954584,0,724851379795438,0,"{'ok': True, 'value': 724851379795484, 'stdout': '724851379795484\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0731964111328125}",1,Compute: 9871427408844292 - 9146576029048808
583,add,4,12513,12513,1,12513,1,"{'ok': True, 'value': 12513, 'stdout': '12513\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07228565216064453}",1,Compute: 3997 + 8516
584,ilp_prod,4,21,39,0,36,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/efa26cc939b843e594d6a3fc74cd3d44-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/efa26cc939b843e594d6a3fc74cd3d44-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24.75 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16383600234985352}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 7, 3]
consumption (rows=resources) = [[2, 1, 1], [4, 4, 2], [2, 4, 1]]
capacity = [14, 11, 9]
upper_bounds = [3, 3, 5]"
585,mul,4,22435491,116,0,22414911,0,"{'ok': True, 'value': 22435491, 'stdout': '22435491\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09529542922973633}",1,Compute: 7501 * 2991
586,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07669997215270996}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddb""
T = ""cdcc"""
587,ilp_prod,4,64,31,0,36,0,"{'ok': True, 'value': 30, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7a1e80902ae843cabad0ef7adc7ac0fe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7a1e80902ae843cabad0ef7adc7ac0fe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 30 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -30 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                30.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n30.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1679549217224121}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4, 9]
consumption (rows=resources) = [[1, 2, 3], [1, 4, 2], [1, 4, 2]]
capacity = [12, 16, 15]
upper_bounds = [10, 3, 4]"
588,knap,32,1575,1049,0,56,0,"{'ok': True, 'value': 1575, 'stdout': '1575\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09421992301940918}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [33, 5, 50, 23, 9, 49, 41, 6, 48, 21, 7, 1, 7, 18, 25, 45, 35, 1, 16, 56, 38, 17, 14, 41, 27, 1, 13, 37, 64, 29, 56, 24]
V = [125, 86, 80, 108, 25, 57, 1, 56, 95, 69, 57, 50, 30, 98, 50, 80, 49, 87, 78, 33, 98, 106, 30, 49, 46, 2, 80, 37, 47, 76, 114, 18]
C = 428"
589,ilp_partition,16,1,1,1,150,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08934283256530762}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [41, 38, 6, 43, 23, 10, 10, 6, 4, 34, 46, 10, 44, 3, 44, 7]"
590,rod,8,88,36,0,1,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07390880584716797}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 7, 6, 15, 7, 14, 12, 5]"
591,lcs,32,18,15,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07296228408813477}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaddcddbcbdbdcbbdabaaadcbccaabdc""
T = ""abbbdddccabaaddccaacbbccacacaba"""
592,ilp_prod,2,32,26,0,24,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c9ff2698151f42a28006eea23f86402b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c9ff2698151f42a28006eea23f86402b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -6 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n6.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15952062606811523}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[2, 1], [1, 3]]
capacity = [9, 7]
upper_bounds = [4, 3]"
593,ilp_assign,32,113,115,0,209,0,"{'ok': True, 'value': 113, 'stdout': '113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36800646781921387}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[94, 44, 35, 76, 9, 23, 4], [72, 58, 51, 56, 36, 82, 15], [18, 25, 35, 3, 55, 37, 23], [13, 6, 30, 20, 57, 67, 36], [49, 24, 85, 9, 47, 20, 47], [47, 60, 82, 9, 84, 65, 57], [19, 15, 46, 11, 10, 86, 14]]"
594,mul,32,1648583909387579151844663231245526039555859246223326330185203456,17691287249193327111949855973022,0,163534444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 1648583909387579151844663231245526039555859246223326330185203456, 'stdout': '1648583909387579151844663231245526039555859246223326330185203456\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0780336856842041}",1,Compute: 35985712226129118044836595136216 * 45812179540260628904433503514016
595,mul,16,58246845245777929668136576403043,5848649150109726823,0,5863922305592355555606445555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555,0,"{'ok': True, 'value': 58246845245777929668136576403043, 'stdout': '58246845245777929668136576403043\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0719444751739502}",1,Compute: 7007824006742769 * 8311687792064147
596,mul,8,2226204999984610,356421908,0,22364485533000,0,"{'ok': True, 'value': 2226204999984610, 'stdout': '2226204999984610\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07243943214416504}",1,Compute: 89105477 * 24983930
597,knap,4,24,24,1,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09716796875}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 1, 7, 8]
V = [6, 12, 2, 12]
C = 11"
598,lcs,32,21,15,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09045886993408203}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caabcadbbbaacbdbdabacbdbcbdabdcb""
T = ""acabcadcadccaadcdcabcddbdbbabacbd"""
599,knap,8,108,100,0,0,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08116507530212402}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 15, 14, 13, 9, 3, 15, 15]
V = [10, 17, 1, 24, 28, 16, 23, 30]
C = 43"
600,add,16,5266610538234289,9484410538234289,0,5266612538234289,0,"{'ok': True, 'value': 5266610538234289, 'stdout': '5266610538234289\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08761882781982422}",1,Compute: 3650748522758584 + 1615862015475705
601,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08323049545288086}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 32, 68, 51, 16, 59, 62, 2, 1, 30, 61, 28, 83, 49, 73, 84, 19, 96, 87, 89, 58, 83, 47, 47]"
602,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0835568904876709}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddaaacd""
T = ""cdbdddb"""
603,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07331085205078125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""acc"""
604,ilp_assign,4,14,,0,26,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3725464344024658}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 11, 7, 11], [3, 4, 9, 8], [2, 11, 7, 11], [7, 4, 5, 1]]"
605,sub,4,2439,2439,1,2439,1,"{'ok': True, 'value': 2439, 'stdout': '2439\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0830683708190918}",1,Compute: 5171 - 2732
606,mul,2,2700,2700,1,2700,1,"{'ok': True, 'value': 2700, 'stdout': '2700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06717228889465332}",1,Compute: 75 * 36
607,knap,8,95,100,0,14,0,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07701897621154785}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 8, 5, 14, 4, 3, 14, 14]
V = [25, 30, 7, 13, 4, 26, 14, 14]
C = 35"
608,rod,32,2528,1050,0,135,0,"{'ok': True, 'value': 2528, 'stdout': '2528\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09584760665893555}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [79, 91, 61, 88, 5, 93, 34, 37, 1, 2, 11, 77, 34, 12, 58, 79, 88, 4, 45, 78, 11, 48, 52, 87, 63, 6, 37, 81, 61, 23, 74, 65]"
609,sub,32,43387471697197658614725034294792,43387351705807658524988136355932,0,43387451737197658614725034294792,0,"{'ok': True, 'value': 43387471697197658614725034294792, 'stdout': '43387471697197658614725034294792\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07323765754699707}",1,Compute: 88342434063722375015006101712724 - 44954962366524716400281067417932
610,ilp_partition,2,0,1,0,2,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08760380744934082}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 3, 2]"
611,ilp_partition,2,0,The answer will be the minimum difference between the two groups.,0,24,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08492636680603027}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 2, 4, 6]"
612,add,2,63,63,1,63,1,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07413411140441895}",1,Compute: 50 + 13
613,ilp_partition,8,0,1,0,22,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07481265068054199}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 16, 22, 12, 11, 3, 18, 17]"
614,sub,4,2408,2408,1,2408,1,"{'ok': True, 'value': 2408, 'stdout': '2408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08450555801391602}",1,Compute: 9810 - 7402
615,sub,32,45220508431535374360314007816421,45220508431535374360313997816421,0,45220508431535374360313997816421,0,"{'ok': True, 'value': 45220508431535374360314007816421, 'stdout': '45220508431535374360314007816421\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08297276496887207}",1,Compute: 69229559461923144808462716426673 - 24009051030387770448148708610252
616,sub,2,38,38,1,38,1,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07668113708496094}",1,Compute: 80 - 42
617,sub,4,4853,4853,1,4853,1,"{'ok': True, 'value': 4853, 'stdout': '4853\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09633445739746094}",1,Compute: 9406 - 4553
618,sub,8,36899737,36900000,0,36900000,0,"{'ok': True, 'value': 36899737, 'stdout': '36899737\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0758368968963623}",1,Compute: 61774169 - 24874432
619,add,8,146316079,146316079,1,146316079,1,"{'ok': True, 'value': 146316079, 'stdout': '146316079\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09779167175292969}",1,Compute: 96226896 + 50089183
620,add,32,113861247255878761634013532379130,111111111111111111111111111111111,0,113861247255878761629013532379130,0,"{'ok': True, 'value': 113861247255878761634013532379130, 'stdout': '113861247255878761634013532379130\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08525586128234863}",1,Compute: 24407157891487691499210153785103 + 89454089364391070134803378594027
621,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07751631736755371}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daad""
T = ""dcd"""
622,ilp_assign,2,6,7,0,7,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39072275161743164}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [4, 3]]"
623,ilp_prod,32,371,1031,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_3jbb_2n4/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_3jbb_2n4/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14775443077087402}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 10, 70, 51, 58, 91]
consumption (rows=resources) = [[6, 6, 4, 28, 16, 19], [2, 16, 23, 31, 16, 26], [19, 3, 12, 5, 8, 28], [5, 22, 5, 13, 17, 13]]
capacity = [109, 103, 119, 103]
upper_bounds = [6, 4, 4, 3, 6, 3]"
624,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07809138298034668}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [27, 17, 30, 73, 35, 67, 24, 9, 35, 88, 91, 2, 11, 82, 57, 35, 35, 56, 89, 3, 59, 29, 42, 61]"
625,ilp_prod,16,207,159,0,40,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6f018aa962f143f2b4288752c704c9bb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6f018aa962f143f2b4288752c704c9bb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 54 RHS\nAt line 61 BOUNDS\nAt line 68 ENDATA\nProblem MODEL has 6 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nProblem is unbounded - 0.00 seconds\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1645190715789795}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 33, 4, 31, 38, 47]
consumption (rows=resources) = [[14, 9, 7, 11, 6, 15], [10, 6, 14, 7, 7, 2], [3, 7, 6, 12, 14, 8], [7, 1, 15, 12, 2, 10]]
capacity = [64, 41, 39, 46]
upper_bounds = [4, 5, 3, 3, 3, 4]"
626,mul,8,2318305092805975,,0,2332462619260625,0,"{'ok': True, 'value': 2318305092805975, 'stdout': '2318305092805975\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08991456031799316}",1,Compute: 35529403 * 65250325
627,ilp_assign,8,38,,0,80,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3620421886444092}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 18, 6, 1, 24, 18, 21], [12, 20, 10, 18, 6, 21, 1], [16, 18, 6, 12, 19, 17, 12], [23, 18, 14, 16, 16, 12, 14], [4, 22, 3, 4, 8, 11, 7], [2, 23, 20, 19, 23, 2, 19], [12, 8, 20, 14, 13, 2, 22]]"
628,add,8,104544222,,0,104544222,1,"{'ok': True, 'value': 104544222, 'stdout': '104544222\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09598040580749512}",1,Compute: 64942350 + 39601872
629,rod,16,336,46,0,77,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0949711799621582}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [2, 42, 34, 31, 43, 2, 35, 15, 30, 42, 11, 18, 25, 7, 7, 4]"
630,ilp_assign,8,36,36,1,36,1,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3860194683074951}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 4, 23, 16, 9, 6, 2], [4, 18, 15, 3, 6, 11, 15], [18, 6, 23, 16, 24, 12, 9], [23, 10, 16, 6, 22, 10, 17], [1, 6, 8, 4, 24, 13, 3], [4, 10, 23, 4, 9, 22, 8], [6, 22, 12, 4, 15, 4, 11]]"
631,rod,8,72,22,0,1,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07455635070800781}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 10, 17, 2, 10, 16, 16, 23]"
632,knap,4,17,16,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08905744552612305}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 8, 3, 3]
V = [6, 3, 9, 8]
C = 8"
633,ilp_partition,32,0,1,0,6,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21252799034118652}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [33, 14, 34, 68, 13, 63, 10, 61, 80, 50, 43, 43, 47, 59, 65, 38, 6, 58, 5, 24, 23, 81, 19, 11]"
634,ilp_prod,16,199,105,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0hmktwkb/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_0hmktwkb/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14392709732055664}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 41, 12, 4, 9, 35]
consumption (rows=resources) = [[8, 9, 10, 7, 1, 1], [13, 2, 15, 3, 15, 5], [10, 4, 6, 6, 3, 4], [4, 5, 1, 16, 4, 12]]
capacity = [41, 33, 64, 33]
upper_bounds = [3, 4, 3, 3, 3, 3]"
635,ilp_assign,4,16,21,0,26,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3881807327270508}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 12, 6, 3], [11, 10, 1, 11], [12, 7, 11, 1], [5, 6, 11, 1]]"
636,ilp_partition,2,1,0,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07481956481933594}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 2, 3]"
637,mul,16,32976880462799205366044997581228,33345258548168333864466666,0,33134414438890025646664444444,0,"{'ok': True, 'value': 32976880462799205366044997581228, 'stdout': '32976880462799205366044997581228\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06810665130615234}",1,Compute: 4822912781723846 * 6837544437412018
638,rod,8,120,30,0,30,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07301568984985352}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 6, 19, 14, 16, 21, 5, 24]"
639,knap,2,9,10,0,-1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06828761100769043}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 4]
V = [9, 1, 4]
C = 4"
640,ilp_assign,2,5,5,1,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42685580253601074}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 2], [5, 2]]"
641,sub,32,15603993354568210847866342231077,36520269354668210846587592637564,0,15603993354568190848066342231077,0,"{'ok': True, 'value': 15603993354568210847866342231077, 'stdout': '15603993354568210847866342231077\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09258699417114258}",1,Compute: 39701257847369251684256099457564 - 24097264492801040836389757226487
642,add,16,14345098228114070,14345108228142070,0,14345100228114070,0,"{'ok': True, 'value': 14345098228114070, 'stdout': '14345098228114070\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08548641204833984}",1,Compute: 5821314547093891 + 8523783681020179
643,ilp_assign,4,16,2,0,22,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3824942111968994}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 9, 12, 1], [6, 12, 8, 2], [7, 11, 3, 5], [2, 6, 5, 4]]"
644,rod,2,12,6,0,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07917046546936035}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 3]"
645,ilp_partition,16,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.34362101554870605}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 12, 35, 39, 10, 31, 46, 35, 18, 27, 21, 46, 18, 32, 37, 22]"
646,ilp_prod,4,36,36,1,33,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/95761ebfbed94a53b3eb0e304641c2c8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/95761ebfbed94a53b3eb0e304641c2c8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 36 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -36 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15630006790161133}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 11, 9]
consumption (rows=resources) = [[2, 4, 4], [3, 4, 1], [1, 2, 3]]
capacity = [9, 9, 13]
upper_bounds = [3, 3, 3]"
647,mul,2,2914,2914,1,471,0,"{'ok': True, 'value': 2914, 'stdout': '2914\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06773853302001953}",1,Compute: 31 * 94
648,ilp_assign,32,93,185,0,140,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.665372371673584}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[57, 11, 10, 13, 29, 34, 4], [65, 35, 80, 17, 62, 88, 35], [74, 9, 62, 65, 44, 32, 74], [67, 60, 1, 36, 73, 6, 7], [1, 72, 89, 11, 31, 17, 57], [26, 30, 27, 14, 61, 24, 29], [50, 37, 43, 26, 96, 73, 12]]"
649,knap,16,341,104,0,0,0,"{'ok': True, 'value': 341, 'stdout': '341\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.077301025390625}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 10, 8, 15, 18, 16, 6, 4, 30, 11, 7, 10, 1, 11, 29, 9]
V = [3, 7, 52, 12, 40, 51, 38, 39, 48, 10, 31, 8, 1, 34, 10, 36]
C = 104"
650,knap,16,421,168,0,0,0,"{'ok': True, 'value': 421, 'stdout': '421\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08809566497802734}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 16, 19, 28, 28, 29, 1, 26, 10, 28, 17, 25, 24, 20, 28, 31]
V = [14, 43, 13, 22, 20, 39, 24, 12, 58, 64, 53, 13, 62, 50, 49, 47]
C = 168"
651,rod,32,1664,79,0,659,0,"{'ok': True, 'value': 1664, 'stdout': '1664\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07773303985595703}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [52, 64, 51, 58, 47, 75, 34, 60, 95, 68, 33, 15, 50, 31, 57, 66, 65, 74, 40, 91, 63, 61, 21, 85, 54, 63, 67, 70, 73, 79, 18, 49]"
652,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07853007316589355}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
653,ilp_assign,8,35,46,0,74,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4190042018890381}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 3, 21, 7, 6, 23, 10], [3, 3, 23, 7, 5, 24, 3], [15, 9, 12, 8, 5, 6, 19], [8, 14, 3, 12, 17, 18, 6], [2, 18, 22, 2, 9, 1, 18], [24, 19, 16, 14, 7, 19, 4], [12, 23, 11, 17, 17, 19, 24]]"
654,add{'ok': True, 'value': 42216881326116118267064776541137, 'stdout': '42216881326116118267064776541137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0886228084564209}",1,Compute: 14538852589717756524432117936925 + 27678028736398361742632658604212
655,mul,2,7968,8112,0,7968,1,"{'ok': True, 'value': 7968, 'stdout': '7968\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07950973510742188}",1,Compute: 96 * 83
656,mul,8,3741510350127521,358334421,0,3718383355161111,0,"{'ok': True, 'value': 3741510350127521, 'stdout': '3741510350127521\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07204937934875488}",1,Compute: 86487307 * 43260803
657,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07658624649047852}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badcaadddcdacabacdaddbccdacddabd""
T = ""dbaaacbcaaaaaaacbdbabdaddcaabcddc"""
658,ilp_prod,32,404,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are that the total consumption of each resource must not exceed its capacity and that the quantity produced for each product must be non-negative. The upper bounds on the quantity of each product that can be produced are given by upper_bounds[j]. The problem is then solved using a linear programming solver, and the maximum profit is the value of the objective function after solving the problem.",0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_odig56_o/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_odig56_o/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1778254508972168}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [89, 25, 28, 54, 9, 58]
consumption (rows=resources) = [[27, 6, 20, 11, 28, 8], [1, 24, 5, 4, 14, 2], [17, 5, 22, 2, 9, 13], [2, 13, 16, 27, 30, 29]]
capacity = [106, 114, 78, 103]
upper_bounds = [3, 4, 3, 3, 3, 3]"
659,add,16,11417262326523697,908,0,11417262326523697,1,"{'ok': True, 'value': 11417262326523697, 'stdout': '11417262326523697\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09123682975769043}",1,Compute: 9082808498121858 + 2334453828401839
660,knap,8,66,147,0,11,0,"{'ok': True, 'value': 66, 'stdout': '66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08436322212219238}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 2, 1, 5, 8, 16, 13, 11]
V = [9, 19, 9, 9, 10, 10, 16, 13]
C = 34"
661,knap,16,443,1084,0,0,0,"{'ok': True, 'value': 443, 'stdout': '443\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09008145332336426}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 24, 19, 2, 31, 11, 26, 18, 10, 18, 29, 25, 11, 2, 29, 20]
V = [55, 53, 54, 56, 50, 23, 49, 25, 25, 10, 60, 42, 30, 50, 10, 37]
C = 144"
662,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lfss_cnn/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_lfss_cnn/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08348703384399414}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
663,mul{'ok': True, 'value': 4473872276960842585316649647100, 'stdout': '4473872276960842585316649647100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08925437927246094}",1,Compute: 1317664236151053 * 3395305233470700
664,ilp_prod,2,17,23,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ddc1ec7fb489491ebf1b979465befb9a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ddc1ec7fb489491ebf1b979465befb9a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16126537322998047}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[1, 1], [3, 2]]
capacity = [10, 8]
upper_bounds = [3, 4]"
665,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07697939872741699}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbcdbacabaccbca""
T = ""cacdabaadcbaddb"""
666,ilp_partition,4,1,1,1,21,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08581781387329102}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 4, 5, 2]"
667,sub,4,4828,4828,1,4828,1,"{'ok': True, 'value': 4828, 'stdout': '4828\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08275604248046875}",1,Compute: 9116 - 4288
668,sub,8,13167511,13167511,1,13167511,1,"{'ok': True, 'value': 13167511, 'stdout': '13167511\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09153294563293457}",1,Compute: 70119146 - 56951635
669,add,32,126502363569855466291155923046859,220000000000000000000000000000000,0,126492363569855466291155923046859,0,"{'ok': True, 'value': 126502363569855466291155923046859, 'stdout': '126502363569855466291155923046859\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06726288795471191}",1,Compute: 84663735044902404212289231245210 + 41838628524953062078866691801649
670,ilp_prod,32,371,"The solution to the problem is to maximize the total profit while ensuring that the consumption of each resource does not exceed its capacity. The exact solution would require solving the linear programming problem, which is beyond the scope of this response.",0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xgw2mbqm/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_xgw2mbqm/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1574840545654297}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 82, 69, 19, 22, 51]
consumption (rows=resources) = [[23, 7, 30, 7, 13, 23], [31, 30, 4, 25, 31, 28], [24, 19, 12, 30, 10, 27], [32, 22, 17, 6, 19, 5]]
capacity = [125, 74, 86, 115]
upper_bounds = [3, 3, 4, 3, 3, 3]"
671,ilp_prod,32,312,1000,0,240,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_akepa9lg/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_akepa9lg/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1565995216369629}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 78, 62, 32, 25, 25]
consumption (rows=resources) = [[8, 16, 23, 31, 24, 22], [26, 22, 2, 25, 28, 28], [28, 15, 28, 16, 12, 7], [22, 1, 26, 2, 21, 26]]
capacity = [96, 118, 65, 108]
upper_bounds = [3, 4, 3, 3, 4, 4]"
672,knap,4,19,26,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07627224922180176}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 6, 3, 5]
V = [16, 10, 3, 14]
C = 10"
673,sub,2,16,16,1,16,1,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0706319808959961}",1,Compute: 76 - 60
674,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0771632194519043}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""c"""
675,lcs,8,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08401250839233398}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbadadc""
T = ""bddccdaba"""
676,add,4,17277,17272,0,17277,1,"{'ok': True, 'value': 17277, 'stdout': '17277\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09605836868286133}",1,Compute: 8558 + 8719
677,add,8,80166455,38594532,0,80166455,1,"{'ok': True, 'value': 80166455, 'stdout': '80166455\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08716368675231934}",1,Compute: 41571923 + 38594532
678,lcs,16,9,6,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07734251022338867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbadabccabbadbd""
T = ""bccdaccadddacddc"""
679,ilp_assign,2,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.399655818939209}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1], [2, 5]]"
680,ilp_prod,32,183,1000,0,6,0,"{'ok': True, 'value': 64, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1276fde47cfa46629bbce15f92e8fca4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1276fde47cfa46629bbce15f92e8fca4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 16 COLUMNS\nAt line 101 RHS\nAt line 113 BOUNDS\nAt line 120 ENDATA\nProblem MODEL has 11 rows, 6 columns and 66 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 89.8246 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -64 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                64.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n64.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.170426607131958}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [64, 5, 16, 50, 78, 35]
consumption (rows=resources) = [[28, 28, 21, 28, 32, 8], [32, 25, 29, 25, 32, 8], [14, 21, 27, 29, 15, 30], [19, 28, 12, 7, 6, 2]]
capacity = [71, 96, 121, 80]
upper_bounds = [3, 3, 3, 3, 3, 4]"
681,rod,32,704,1050,0,502,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08934378623962402}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [6, 38, 31, 88, 5, 72, 48, 59, 70, 32, 83, 10, 15, 75, 10, 81, 58, 19, 10, 38, 19, 26, 27, 28, 57, 41, 63, 76, 48, 10, 91, 42]"
682,ilp_partition,2,1,The answer will be the minimum difference between the two groups.,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07908940315246582}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 3, 3]"
683,ilp_prod,16,194,160,0,6,0,"{'ok': True, 'value': 78, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fdc9d6b5012543bdbeb661b9c6420ae2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fdc9d6b5012543bdbeb661b9c6420ae2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 21 COLUMNS\nAt line 136 RHS\nAt line 153 BOUNDS\nAt line 160 ENDATA\nProblem MODEL has 16 rows, 6 columns and 96 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 81.4667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -78 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                78.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n78.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15084123611450195}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 8, 44, 40, 38, 6]
consumption (rows=resources) = [[14, 15, 15, 14, 3, 1], [1, 8, 7, 4, 11, 12], [12, 10, 3, 12, 5, 2], [3, 15, 9, 12, 7, 6]]
capacity = [47, 41, 61, 60]
upper_bounds = [3, 3, 3, 3, 3, 3]"
684,knap,2,9,13,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07937359809875488}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 4]
V = [9, 5, 3]
C = 5"
685,lcs,8,3,5,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08644533157348633}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbadcddd""
T = ""ddabcaca"""
686,ilp_partition,16,1,1,1,46,0,"{'ok': True, 'value': 313, 'stdout': '313\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07442831993103027}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 46, 43, 34, 9, 39, 8, 20, 6, 7, 11, 34, 6, 37, 8, 40]"
687,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07235956192016602}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""a"""
688,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08470034599304199}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbcabbcddbcdcdbcbddcabbbddbdacd""
T = ""cacdcabaccddcbdbcdaddadddaabdaa"""
689,ilp_prod,4,55,33,0,33,0,"{'ok': True, 'value': 22, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/61de1d9019554d029e0dc17f50a65635-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/61de1d9019554d029e0dc17f50a65635-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 29.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -22 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                22.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n22.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17630696296691895}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 11, 11]
consumption (rows=resources) = [[2, 3, 1], [1, 3, 4], [2, 3, 3]]
capacity = [15, 8, 10]
upper_bounds = [5, 3, 3]"
690,rod,16,640,46,0,65,0,"{'ok': True, 'value': 640, 'stdout': '640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07859325408935547}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [40, 25, 17, 18, 21, 42, 30, 14, 46, 6, 23, 31, 45, 24, 19, 39]"
691,add,16,8628392725151217,86264743288570,0,8628392725151217,1,"{'ok': True, 'value': 8628392725151217, 'stdout': '8628392725151217\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08417129516601562}",1,Compute: 2345138943288570 + 6283253781862647
692,ilp_partition,16,0,1,0,24,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1910228729248047}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 35, 6, 20, 33, 14, 12, 9, 24, 34, 44, 48, 15, 32, 43]"
693,add,8,134169703,134169703,1,133870703,0,"{'ok': True, 'value': 134169703, 'stdout': '134169703\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0751950740814209}",1,Compute: 69769593 + 64400110
694,knap,2,15,12,0,7,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08125162124633789}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 2, 1]
V = [7, 5, 10]
C = 4"
695,ilp_partition,2,0,4,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08040022850036621}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 5, 6]"
696,ilp_assign,8,34,105,0,46,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38484764099121094}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 23, 1, 18, 19, 8, 8], [2, 20, 16, 22, 11, 7, 7], [4, 1, 23, 10, 21, 9, 23], [4, 5, 12, 15, 14, 11, 23], [2, 17, 10, 3, 15, 8, 6], [19, 19, 19, 7, 17, 10, 19], [21, 19, 16, 10, 22, 9, 4]]"
697,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09092879295349121}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcb""
T = ""abadc"""
698,sub,8,22272882,22272882,1,22472882,0,"{'ok': True, 'value': 22272882, 'stdout': '22272882\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08554768562316895}",1,Compute: 62134824 - 39861942
699,add,32,74143223312629899116417099639357,74143223306669909116420009651357,0,74143223312629909116417109639357,0,"{'ok': True, 'value': 74143223312629899116417099639357, 'stdout': '74143223312629899116417099639357\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08399820327758789}",1,Compute: 52796958917745108733107808508229 + 21346264394884790383309291131128
700,lcs,8,3,3,1,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07460260391235352}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adabaabd""
T = ""bcbccdd"""
701,mul,4,41078224,170696,0,40006656,0,"{'ok': True, 'value': 41078224, 'stdout': '41078224\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07335853576660156}",1,Compute: 7529 * 5456
702,add,8,84422289,84422289,1,204654724,0,"{'ok': True, 'value': 337689156, 'stdout': '337689156\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07357597351074219}",0,Compute: 51163681 + 33258608
703,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08910584449768066}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [85, 1, 13, 63, 76, 49, 95, 59, 18, 50, 64, 6, 86, 18, 67, 73, 86, 51, 96, 87, 84, 41, 88, 75]"
704,ilp_assign,4,10,15,0,15,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4087209701538086}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4, 7, 11], [1, 11, 1, 9], [7, 10, 3, 1], [12, 7, 11, 7]]"
705,sub,8,3137275,3137275,1,3137275,1,"{'ok': True, 'value': 3137275, 'stdout': '3137275\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0809781551361084}",1,Compute: 71229168 - 68091893
706,add,32,125814608628255951714477829608449,97431103311111111111111111111111,0,125814608628255951714477829608449,1,"{'ok': True, 'value': 125814608628255951714477829608449, 'stdout': '125814608628255951714477829608449\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07730269432067871}",1,Compute: 94471641742272344904304806838946 + 31342966885983606810173022769503
707,add,32,140116640061234489771153827018782,8038823419381426403990788382024695728405867420225731245943198536,0,139916639961234489771153827018782,0,"{'ok': True, 'value': 140116640061234489771153827018782, 'stdout': '140116640061234489771153827018782\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0868082046508789}",1,Compute: 80388234193814264039907883820246 + 59728405867420225731245943198536
708,add,16,10589253398354766,11586815410886158,0,10589253398354766,1,"{'ok': True, 'value': 10589253398354766, 'stdout': '10589253398354766\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07192730903625488}",1,Compute: 5362377520903380 + 5226875877451386
709,sub,32,8705158486605241463263599216771,86305158486605240963263599216737,0,-87051584865052413463263600216771,0,"{'ok': True, 'value': 8705158486605241463263599216771, 'stdout': '8705158486605241463263599216771\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06893086433410645}",1,Compute: 78252771609225075733880358888259 - 69547613122619834270616759671488
710,add,2,151,151,1,151,1,"{'ok': True, 'value': 151, 'stdout': '151\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07663273811340332}",1,Compute: 93 + 58
711,rod,4,16,11,0,11,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06914138793945312}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 1, 4, 11]"
712,knap,8,103,103,1,0,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08243513107299805}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 15, 10, 8, 4, 3, 5]
V = [13, 12, 2, 28, 11, 11, 29, 21]
C = 24"
713,lcs,32,21,15,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0760807991027832}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdbdadbcddaacccababdbcddcadcccb""
T = ""aabcbdaaaacbdbcccbadcdcdcdccbbcbc"""
714,ilp_assign,2,5,4,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38137221336364746}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [6, 3]]"
715,ilp_assign,8,37,36,0,46,0,"{'ok': True, 'value': 37, 'stdout': '37\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3757047653198242}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 16, 6, 17, 22, 7, 6], [4, 24, 14, 12, 8, 6, 13], [23, 19, 12, 23, 20, 12, 5], [18, 22, 6, 8, 9, 18, 8], [21, 3, 3, 7, 19, 14, 16], [2, 11, 8, 3, 14, 3, 11], [6, 16, 8, 12, 24, 19, 19]]"
716,add,8,117605649,117605649,1,117605649,1,"{'ok': True, 'value': 117605649, 'stdout': '117605649\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0784904956817627}",1,Compute: 36453680 + 81151969
717,rod,16,640,64,0,65,0,"{'ok': True, 'value': 640, 'stdout': '640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07809114456176758}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [40, 18, 47, 28, 16, 41, 1, 23, 35, 24, 9, 21, 15, 6, 11, 29]"
718,ilp_prod,8,35,59,0,60,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_bfdugeo_/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_bfdugeo_/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15490937232971191}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 10, 6, 9]
consumption (rows=resources) = [[3, 7, 7, 3], [4, 4, 8, 3], [2, 7, 8, 6], [1, 8, 8, 1]]
capacity = [23, 25, 21, 32]
upper_bounds = [6, 3, 3, 3]"
719,rod,16,640,47,0,64,0,"{'ok': True, 'value': 640, 'stdout': '640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07553553581237793}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [40, 42, 1, 27, 8, 33, 6, 28, 23, 47, 44, 2, 26, 38, 43, 34]"
720,ilp_prod,8,72,60,0,60,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_4x14ey5c/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_4x14ey5c/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14580249786376953}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 24, 14, 16]
consumption (rows=resources) = [[7, 8, 8, 4], [2, 3, 8, 8], [1, 2, 2, 7], [7, 5, 4, 8]]
capacity = [27, 28, 32, 19]
upper_bounds = [3, 3, 3, 3]"
721,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07724928855895996}",1,Compute: 31 - 30
722,lcs,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08305788040161133}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""ca"""
723,sub,2,65,65,1,65,1,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08208966255187988}",1,Compute: 89 - 24
724,ilp_assign,8,34,46,0,46,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39419984817504883}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 21, 9, 6, 6, 17, 24], [20, 6, 14, 23, 10, 13, 13], [8, 6, 14, 6, 18, 18, 11], [8, 7, 5, 10, 23, 22, 3], [21, 3, 23, 8, 4, 21, 10], [1, 5, 13, 13, 21, 2, 4], [20, 2, 5, 15, 13, 10, 8]]"
725,mul,8,8429313947724622,8381834155888,0,843663334535558,0,"{'ok': True, 'value': 8429313947724622, 'stdout': '8429313947724622\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07968544960021973}",1,Compute: 93298813 * 90347494
726,ilp_prod,2,24,0,0,2,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/52f803e96ffb4be49c114ebdaedecf8d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/52f803e96ffb4be49c114ebdaedecf8d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6.66667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -5 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                5.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 5.0\nx_0 = 1.0\nx_1 = 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21342992782592773}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[2, 1], [2, 2]]
capacity = [7, 9]
upper_bounds = [3, 4]"
727,rod,32,1344,1050,0,1,0,"{'ok': True, 'value': 1344, 'stdout': '1344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08940911293029785}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [42, 34, 30, 41, 43, 42, 92, 34, 50, 1, 68, 71, 80, 44, 5, 54, 57, 74, 88, 12, 25, 72, 78, 69, 93, 46, 39, 22, 31, 43, 34, 16]"
728,add,8,108560208,118560208,0,118560208,0,"{'ok': True, 'value': 108560208, 'stdout': '108560208\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08352828025817871}",1,Compute: 14921719 + 93638489
729,sub,2,34,34,1,34,1,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09055304527282715}",1,Compute: 45 - 11
730,sub,16,3160936363644197,3160936364344197,0,-3160946536455803,0,"{'ok': True, 'value': 3160936363644197, 'stdout': '3160936363644197\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07471489906311035}",1,Compute: 6447158759296228 - 3286222395652031
731,sub,8,11837494,11837494,1,11837494,1,"{'ok': True, 'value': 11837494, 'stdout': '11837494\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07628130912780762}",1,Compute: 63366457 - 51528963
732,sub,32,30874651253098951915470933201459,30874651253108951915470933201459,0,30874651253108951915470933201459,0,"{'ok': True, 'value': 30874651253098951915470933201459, 'stdout': '30874651253098951915470933201459\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08470511436462402}",1,Compute: 66451817734546933206117344761325 - 35577166481447981290646411559866
733,mul,16,73464572036022864842690979886251,7324536630383819,0,7307401949902857564766654681,0,"{'ok': True, 'value': 73464572036022864842690979886251, 'stdout': '73464572036022864842690979886251\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0826561450958252}",1,Compute: 7582834630383819 * 9688273003034529
734,knap,16,399,119,0,9,0,"{'ok': True, 'value': 399, 'stdout': '399\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08796930313110352}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 12, 13, 13, 26, 30, 6, 5, 9, 31, 23, 17, 3, 17, 13, 12]
V = [21, 60, 21, 56, 54, 20, 31, 1, 38, 5, 8, 23, 52, 57, 19, 28]
C = 119"
735,knap,16,430,145,0,0,0,"{'ok': True, 'value': 430, 'stdout': '430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0795290470123291}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 26, 26, 12, 6, 22, 17, 1, 21, 20, 15, 7, 25, 29, 24, 22]
V = [35, 62, 28, 46, 7, 52, 53, 41, 61, 4, 16, 43, 58, 59, 14, 34]
C = 145"
736,sub,2,44,44,1,44,1,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07348060607910156}",1,Compute: 79 - 35
737,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08486652374267578}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcac""
T = ""cdaca"""
738,mul{'ok': True, 'value': 2769359048573666120588623814296190065559386572849760596992686344, 'stdout': '2769359048573666120588623814296190065559386572849760596992686344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07603311538696289}",1,Compute: 31408348963597475749940755969224 * 88172703754131587979733945575881
739,rod,2,6,6,1,8,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0901942253112793}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
740,ilp_assign,4,15,15,1,31,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38521361351013184}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 3, 2, 11], [8, 9, 11, 4], [3, 4, 5, 6], [12, 6, 6, 12]]"
741,sub,32,19424421963160820053822143570822,19424421963160820053822143570823,0,19424422063160820053822143570823,0,"{'ok': True, 'value': 19424421963160820053822143570822, 'stdout': '19424421963160820053822143570822\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08785820007324219}",1,Compute: 66297665018116307939890033733601 - 46873243054955487886067890162779
742,add,4,14364,14364,1,14364,1,"{'ok': True, 'value': 14364, 'stdout': '14364\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08485174179077148}",1,Compute: 8999 + 5365
743,add,2,55,55,1,55,1,"{'ok': True, 'value': 55, 'stdout': '55\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07879042625427246}",1,Compute: 22 + 33
744,lcs,4,1,3,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0854032039642334}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcb""
T = ""ccda"""
745,rod,8,152,22,0,30,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07743453979492188}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 13, 1, 12, 17, 10, 8, 13]"
746,ilp_assign,16,103,105,0,110,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.388927698135376}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 12, 26, 34, 42, 45, 14], [27, 37, 25, 38, 26, 37, 35], [12, 44, 14, 25, 28, 46, 45], [22, 10, 15, 45, 35, 46, 32], [21, 39, 27, 11, 44, 42, 47], [37, 1, 7, 13, 25, 27, 39], [1, 14, 4, 13, 36, 32, 8]]"
747,ilp_prod,16,158,160,0,160,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_vswacnxi/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_vswacnxi/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14578819274902344}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 16, 9, 13, 23, 47]
consumption (rows=resources) = [[4, 4, 13, 11, 12, 3], [5, 6, 3, 12, 1, 6], [9, 3, 11, 14, 5, 6], [16, 4, 16, 8, 6, 13]]
capacity = [56, 45, 39, 40]
upper_bounds = [3, 7, 3, 3, 4, 3]"
748,rod,32,880,1084,0,0,0,"{'ok': True, 'value': 880, 'stdout': '880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07786369323730469}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [15, 55, 33, 41, 69, 68, 59, 83, 21, 4, 40, 46, 90, 60, 9, 34, 19, 49, 81, 20, 1, 93, 37, 87, 13, 79, 80, 4, 41, 14, 48, 44]"
749,knap,16,421,1056,0,0,0,"{'ok': True, 'value': 421, 'stdout': '421\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08767819404602051}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 20, 14, 9, 21, 24, 15, 15, 12, 19, 21, 20, 3, 7, 24, 19]
V = [6, 63, 9, 61, 61, 32, 23, 42, 34, 43, 21, 64, 10, 63, 44, 23]
C = 122"
750,ilp_prod,4,18,26,0,8,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/87e05ed822424a5a948ec8b8a78e0c77-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/87e05ed822424a5a948ec8b8a78e0c77-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15247678756713867}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6, 8]
consumption (rows=resources) = [[4, 1, 4], [4, 1, 1], [2, 4, 4]]
capacity = [16, 12, 8]
upper_bounds = [3, 3, 3]"
751,sub,4,1769,1769,1,-1769,0,"{'ok': True, 'value': 1769, 'stdout': '1769\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07483363151550293}",1,Compute: 5250 - 3481
752,mul,16,29074487092578511342312109727276,25,0,2898802395457012956666544455,0,"{'ok': True, 'value': 29074487092578511342312109727276, 'stdout': '29074487092578511342312109727276\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07817625999450684}",1,Compute: 4898903507264777 * 5934896870179788
753,ilp_partition,2,1,1,1,16,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07540655136108398}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 3, 5]"
754,sub,8,15163556,15163556,1,15163556,1,"{'ok': True, 'value': 15163556, 'stdout': '15163556\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0753488540649414}",1,Compute: 42943880 - 27780324
755,rod,8,88,22,0,1,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07985234260559082}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 6, 5, 2, 12, 16, 8, 20]"
756,ilp_assign,8,32,36,0,46,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38986754417419434}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 19, 23, 4, 11, 6, 18], [21, 15, 22, 16, 1, 18, 16], [3, 1, 15, 11, 19, 12, 12], [14, 5, 23, 4, 4, 15, 22], [11, 6, 21, 3, 13, 1, 17], [15, 1, 22, 20, 5, 10, 9], [10, 2, 16, 16, 2, 19, 5]]"
757,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07127237319946289}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdccbcadacaacbbcbdbdaccbdbcddbbc""
T = ""bcdaabccacabacccdcccdabccbabcbbad"""
758,sub,4,1710,1710,1,1710,1,"{'ok': True, 'value': 1710, 'stdout': '1710\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07368135452270508}",1,Compute: 5579 - 3869
759,mul,32,5372497750510867048591818764452910557864815839974844823226468630,5404090087866488384768727818788540409008786648838476872781878854040900878664883847687278187885404090087866488384768727818788540409008786648838476872781878854040900878664883847687278187885404090087866488384768727818788540409008786648838476872781878854040900878,0,75701612393177090905749565041563,0,"{'ok': True, 'value': 5372497750510867048591818764452910557864815839974844823226468630, 'stdout': '5372497750510867048591818764452910557864815839974844823226468630\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09832406044006348}",1,Compute: 70969396564597939657965325231010 * 75701612393177090905749565041563
760,ilp_assign,8,40,36,0,46,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37983226776123047}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 7, 9, 6, 18, 10, 24], [13, 1, 7, 19, 20, 16, 1], [10, 21, 24, 9, 18, 9, 3], [13, 2, 19, 18, 23, 2, 7], [23, 16, 7, 13, 11, 10, 16], [20, 17, 9, 23, 9, 20, 6], [13, 13, 16, 18, 8, 8, 14]]"
761,knap,4,31,26,0,0,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07541418075561523}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 4, 2]
V = [10, 14, 15, 16]
C = 6"
762,add,32,75208752366518668572883510625281,75198752366518668572843510625281,0,75108752366528668572883510625281,0,"{'ok': True, 'value': 75208752366518668572883510625281, 'stdout': '75208752366518668572883510625281\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07785773277282715}",1,Compute: 49959328283906489444260698621467 + 25249424082612179128622812003814
763,mul,2,5760,5760,1,5760,1,"{'ok': True, 'value': 5760, 'stdout': '5760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08343338966369629}",1,Compute: 90 * 64
764,sub,4,4576,4576,1,4576,1,"{'ok': True, 'value': 4576, 'stdout': '4576\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08201074600219727}",1,Compute: 9494 - 4918
765,rod,4,20,20,1,4,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08821678161621094}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 3, 7, 6]"
766,sub,32,9345367715314207464629947291124,93545367614336107464630947291124,0,93545367975342187365020047301124,0,"{'ok': True, 'value': 9345367715314207464629947291124, 'stdout': '9345367715314207464629947291124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08887410163879395}",1,Compute: 64871880464224716587251918501057 - 55526512748910509122621971209933
767,knap,16,455,109,0,-1,0,"{'ok': True, 'value': 455, 'stdout': '455\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08119344711303711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 13, 7, 9, 7, 17, 19, 2, 23, 21, 19, 3, 21, 2, 1, 25]
V = [59, 23, 49, 28, 1, 26, 19, 63, 7, 47, 50, 53, 23, 62, 21, 23]
C = 109"
768,knap,32,1604,1047,0,3,0,"{'ok': True, 'value': 1604, 'stdout': '1604\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08285331726074219}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [53, 57, 38, 52, 38, 41, 17, 3, 30, 62, 26, 17, 43, 22, 35, 50, 52, 41, 10, 64, 28, 59, 45, 64, 50, 24, 20, 41, 11, 4, 57, 49]
V = [15, 75, 98, 39, 95, 36, 54, 77, 113, 115, 35, 103, 85, 8, 88, 83, 59, 89, 72, 88, 76, 40, 42, 17, 120, 48, 64, 103, 41, 6, 59, 115]
C = 601"
769,sub,16,1230308303628025,,0,-1230308303628025,0,"{'ok': True, 'value': 1230308303628025, 'stdout': '1230308303628025\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07624959945678711}",1,Compute: 4234299884250839 - 3003991580622814
770,add,16,10713272219951728,13117894411,0,10713272220951728,0,"{'ok': True, 'value': 10713272219951728, 'stdout': '10713272219951728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0766441822052002}",1,Compute: 7759645503965449 + 2953626715986279
771,ilp_prod,32,272,1000,0,3,0,"{'ok': True, 'value': 164, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b9e321f235454f6796d38448d10ee188-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b9e321f235454f6796d38448d10ee188-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 33 COLUMNS\nAt line 220 RHS\nAt line 249 BOUNDS\nAt line 256 ENDATA\nProblem MODEL has 28 rows, 6 columns and 168 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 231.357 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -164 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                164.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n164.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15158915519714355}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [82, 95, 83, 94, 27, 52]
consumption (rows=resources) = [[29, 25, 30, 26, 1, 16], [1, 28, 31, 28, 30, 19], [31, 21, 22, 30, 13, 30], [3, 1, 2, 16, 3, 11]]
capacity = [92, 79, 89, 82]
upper_bounds = [3, 3, 3, 3, 3, 3]"
772,mul,8,6493744596295600,132,0,1,0,"{'ok': True, 'value': 6493744596295600, 'stdout': '6493744596295600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07651615142822266}",1,Compute: 65146256 * 99679475
773,mul,32,7222984587707356668159813561929744814398594644882294050715317480,The answer to the problem is the product of the two given numbers{'ok': True, 'value': 7222984587707356668159813561929744814398594644882294050715317480, 'stdout': '7222984587707356668159813561929744814398594644882294050715317480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07329440116882324}",1,Compute: 87044724415389555354932182182663 * 82980153435126839272400099647960
774,knap,4,26,24,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0776817798614502}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 3, 8, 3]
V = [15, 4, 4, 11]
C = 11"
775,add,32,143511932640650949853961314205812,166561081194382265473936581849362,0,143511932640650949853961314205812,1,"{'ok': True, 'value': 143511932640650949853961314205812, 'stdout': '143511932640650949853961314205812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07376885414123535}",1,Compute: 78386093512420760504461248359237 + 65125839128230189349500065846575
776,knap,32,1735,1043,0,5,0,"{'ok': True, 'value': 1735, 'stdout': '1735\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10135698318481445}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 58, 23, 13, 23, 41, 24, 21, 33, 7, 48, 40, 36, 12, 56, 35, 12, 17, 41, 58, 18, 29, 14, 55, 55, 7, 37, 61, 18, 6, 39, 50]
V = [7, 128, 117, 14, 98, 83, 41, 115, 83, 109, 118, 76, 33, 1, 47, 127, 77, 44, 16, 18, 12, 100, 57, 117, 101, 75, 21, 28, 84, 96, 100, 9]
C = 498"
777,sub,16,2724585430338931,-179456323105943,0,-2724583230338931,0,"{'ok': True, 'value': 2724585430338931, 'stdout': '2724585430338931\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07858467102050781}",1,Compute: 4919547920281636 - 2194962489942705
778,rod,8,80,22,0,1,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08646464347839355}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 9, 11, 2, 3, 5, 5, 8]"
779,add,32,158635874984284429381173770712401,158635864984284429381173770712351,0,158635874984284429381173770712401,1,"{'ok': True, 'value': 158635874984284429381173770712401, 'stdout': '158635874984284429381173770712401\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08220052719116211}",1,Compute: 88473023441812017588187180663823 + 70162851542472411792986590048578
780,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0879824161529541}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""b"""
781,ilp_prod,4,20,29,0,30,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f11601f35062494a8da40724816158a3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f11601f35062494a8da40724816158a3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16373825073242188}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 5, 4]
consumption (rows=resources) = [[3, 4, 2], [2, 2, 1], [3, 4, 2]]
capacity = [10, 8, 15]
upper_bounds = [3, 3, 5]"
782,rod,2,6,4,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08725595474243164}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
783,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_3sful3hi/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_3sful3hi/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07711362838745117}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 2]"
784,knap,16,362,103,0,-1,0,"{'ok': True, 'value': 362, 'stdout': '362\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08109688758850098}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 3, 1, 27, 19, 1, 7, 9, 19, 7, 3, 18, 4, 31, 32, 4]
V = [27, 25, 7, 45, 36, 48, 29, 42, 42, 64, 5, 18, 17, 25, 31, 7]
C = 103"
785,knap,8,44,105,0,0,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07605957984924316}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 9, 4, 1, 1, 12, 6, 2]
V = [21, 11, 3, 3, 2, 17, 16, 2]
C = 24"
786,rod,4,22,4,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_akq0f37q/main.py"", line 22, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_akq0f37q/main.py"", line 10, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07582259178161621}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 11, 2, 3]"
787,sub,16,119178602003016,1191786602003016,0,1191788602003016,0,"{'ok': True, 'value': 119178602003016, 'stdout': '119178602003016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07676124572753906}",1,Compute: 8022244926824963 - 7903066324821947
788,ilp_prod,32,343,"The solution to the problem is to maximize the total profit while ensuring that the consumption of each resource does not exceed its capacity. The exact solution would require solving the linear programming problem, which is beyond the scope of this response.",0,207,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_v2o8pdlh/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15409612655639648}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [37, 27, 29, 6, 27, 95]
consumption (rows=resources) = [[21, 31, 16, 4, 18, 17], [25, 2, 9, 23, 32, 27], [9, 27, 1, 14, 19, 23], [29, 18, 2, 12, 22, 10]]
capacity = [85, 107, 95, 98]
upper_bounds = [3, 3, 5, 4, 3, 3]"
789,ilp_prod,16,122,160,0,135,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_sx82edk6/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1578044891357422}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 28, 3, 11, 38, 33]
consumption (rows=resources) = [[2, 11, 14, 12, 12, 6], [3, 12, 3, 2, 2, 5], [10, 6, 7, 7, 5, 13], [13, 11, 14, 3, 13, 12]]
capacity = [41, 41, 39, 46]
upper_bounds = [3, 3, 3, 3, 3, 3]"
790,sub,16,6434924397773364,6434924397773364,1,6434924397773364,1,"{'ok': True, 'value': 6434924397773364, 'stdout': '6434924397773364\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10231328010559082}",1,Compute: 8863787197982517 - 2428862800209153
791,ilp_assign,2,3,2,0,6,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39566802978515625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [2, 4]]"
792,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07812643051147461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badbbacacabadbca""
T = ""dabbbdcbddcaadac"""
793,rod,2,6,6,1,5,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07304620742797852}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
794,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07537269592285156}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaadcbbbddddaacb""
T = ""bccccacbdbdbbdac"""
795,ilp_prod,32,444,0,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_p91qiqeg/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_p91qiqeg/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14905261993408203}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 48, 91, 89, 47, 80]
consumption (rows=resources) = [[24, 16, 13, 31, 18, 9], [1, 16, 13, 13, 13, 26], [5, 1, 15, 6, 28, 4], [31, 14, 5, 26, 20, 23]]
capacity = [73, 91, 68, 83]
upper_bounds = [3, 4, 4, 3, 3, 3]"
796,rod,4,44,44,1,1,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07559084892272949}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 2, 7, 3]"
797,mul{'ok': True, 'value': 7303359789467543459737206041826, 'stdout': '7303359789467543459737206041826\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08668661117553711}",1,Compute: 5055136945884281 * 1444740244952946
798,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07993173599243164}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""a"""
799,ilp_assign,2,7,2,0,8,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3942742347717285}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 2], [6, 6]]"
800,ilp_assign,4,15,15,1,24,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3792898654937744}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 4, 4, 9], [11, 1, 2, 4], [5, 3, 12, 6], [4, 3, 11, 11]]"
801,ilp_assign,16,66,105,0,110,0,"{'ok': True, 'value': 66, 'stdout': '66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38673996925354004}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 38, 18, 16, 20, 22, 25], [6, 26, 33, 38, 48, 39, 9], [39, 23, 19, 8, 15, 26, 22], [11, 11, 8, 6, 8, 35, 11], [18, 22, 17, 43, 31, 12, 25], [47, 48, 43, 1, 26, 2, 42], [43, 30, 7, 7, 20, 35, 39]]"
802,ilp_partition,4,3,1,0,1,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0805811882019043}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 9, 7, 1]"
803,rod,4,40,40,1,12,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09439373016357422}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 12, 12, 11]"
804,sub,32,261815794500325695286395028292,4411034464,0,26173579794503257695286395028292,0,"{'ok': True, 'value': 261815794500325695286395028292, 'stdout': '261815794500325695286395028292\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07564163208007812}",1,Compute: 62461765550039857774746985578987 - 62199949755539532079460590550695
805,knap,16,417,,0,0,0,"{'ok': True, 'value': 417, 'stdout': '417\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07667303085327148}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 21, 20, 22, 9, 1, 15, 20, 12, 6, 7, 29, 11, 27, 12, 14]
V = [40, 28, 44, 60, 60, 9, 45, 35, 21, 12, 43, 25, 41, 34, 51, 44]
C = 118"
806,ilp_prod,2,18,15,0,9,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bef084f827ff4c2bbfa4593b2a75decd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bef084f827ff4c2bbfa4593b2a75decd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 18.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15047526359558105}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 3]
consumption (rows=resources) = [[2, 3], [3, 3]]
capacity = [10, 9]
upper_bounds = [3, 3]"
807,mul,8,2671817987602080,36,0,264034249680,0,"{'ok': True, 'value': 2671817987602080, 'stdout': '2671817987602080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07695484161376953}",1,Compute: 67901014 * 39348720
808,sub,8,47039835,47040135,0,47039835,1,"{'ok': True, 'value': 47039835, 'stdout': '47039835\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07540035247802734}",1,Compute: 90256527 - 43216692
809,ilp_assign,4,21,5,0,26,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3866152763366699}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 12, 9, 9], [5, 12, 11, 5], [9, 7, 2, 12], [7, 8, 4, 2]]"
810,ilp_prod,16,85,2,0,207,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_01gijwoy/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_01gijwoy/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15252351760864258}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 35, 36, 7, 4, 36]
consumption (rows=resources) = [[13, 9, 1, 6, 10, 9], [14, 3, 12, 2, 12, 14], [4, 15, 12, 15, 12, 14], [3, 2, 11, 6, 10, 8]]
capacity = [40, 41, 32, 64]
upper_bounds = [3, 3, 3, 3, 3, 3]"
811,ilp_assign,4,22,18,0,28,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3954470157623291}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 4, 11, 5], [10, 5, 12, 3], [12, 11, 5, 6], [10, 12, 5, 9]]"
812,mul,2,3339,3289,0,3359,0,"{'ok': True, 'value': 3339, 'stdout': '3339\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07189345359802246}",1,Compute: 53 * 63
813,mul,4,32400212,3084,0,32924028,0,"{'ok': True, 'value': 32400212, 'stdout': '32400212\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0857994556427002}",1,Compute: 4316 * 7507
814,sub,32,8048925463601688388935809388482,13997999579221591868869088037745,0,80487254444016888389336809388482,0,"{'ok': True, 'value': 8048925463601688388935809388482, 'stdout': '8048925463601688388935809388482\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07363557815551758}",1,Compute: 53997999579221591868869088037745 - 45949074115619903479933278649263
815,add,4,11370,11370,1,11370,1,"{'ok': True, 'value': 11370, 'stdout': '11370\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07837653160095215}",1,Compute: 3862 + 7508
816,rod,32,1184,1084,0,32,0,"{'ok': True, 'value': 1184, 'stdout': '1184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08828020095825195}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [37, 8, 25, 83, 73, 6, 6, 40, 95, 56, 18, 35, 1, 19, 34, 24, 73, 81, 83, 42, 89, 65, 59, 42, 75, 71, 46, 85, 3, 79, 55, 85]"
817,ilp_prod,4,36,33,0,9,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/57c84d3989d9496ea14b44dfbb003fca-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/57c84d3989d9496ea14b44dfbb003fca-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 35 RHS\nAt line 41 BOUNDS\nAt line 45 ENDATA\nProblem MODEL has 5 rows, 3 columns and 15 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15897464752197266}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 9, 4]
consumption (rows=resources) = [[3, 2, 3], [4, 3, 1], [1, 1, 2]]
capacity = [9, 16, 15]
upper_bounds = [3, 4, 3]"
818,ilp_assign,4,8,5,0,14,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3986318111419678}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 6, 5, 1], [8, 9, 3, 7], [8, 2, 9, 5], [2, 4, 2, 7]]"
819,mul,2,2030,35,0,2030,1,"{'ok': True, 'value': 2030, 'stdout': '2030\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0894155502319336}",1,Compute: 58 * 35
820,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08961200714111328}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [29, 35, 6, 81, 7, 49, 37, 12, 23, 80, 10, 43, 42, 73, 91, 12, 79, 46, 20, 35, 42, 34, 95, 20]"
821,add,4,10036,10036,1,10036,1,"{'ok': True, 'value': 10036, 'stdout': '10036\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07510972023010254}",1,Compute: 1912 + 8124
822,sub,2,68,68,1,68,1,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07596039772033691}",1,Compute: 78 - 10
823,sub,4,5802,5802,1,5802,1,"{'ok': True, 'value': 5802, 'stdout': '5802\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09550666809082031}",1,Compute: 7155 - 1353
824,add,8,154186263,154186263,1,154187263,0,"{'ok': True, 'value': 154186263, 'stdout': '154186263\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06931400299072266}",1,Compute: 60258851 + 93927412
825,knap,8,119,105,0,8,0,"{'ok': True, 'value': 119, 'stdout': '119\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07618474960327148}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 7, 12, 16, 11, 2, 2]
V = [30, 9, 30, 32, 14, 18, 17, 10]
C = 29"
826,mul{'ok': True, 'value': 15850802046739981526026552253220, 'stdout': '15850802046739981526026552253220\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0741124153137207}",1,Compute: 3552554057771996 * 4461804602821695
827,rod,32,1824,1055,0,6,0,"{'ok': True, 'value': 1824, 'stdout': '1824\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0805821418762207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [57, 10, 77, 49, 89, 1, 66, 35, 12, 86, 59, 29, 43, 34, 85, 75, 11, 78, 63, 5, 48, 71, 30, 2, 66, 23, 73, 4, 7, 8, 33, 6]"
828,ilp_assign,16,65,105,0,33,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4029054641723633}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 1, 24, 46, 29, 27, 20], [21, 23, 11, 20, 37, 32, 11], [2, 28, 37, 36, 47, 15, 22], [7, 24, 22, 37, 16, 23, 7], [42, 1, 44, 17, 35, 30, 42], [26, 32, 1, 22, 18, 18, 8], [19, 21, 41, 22, 22, 17, 33]]"
829,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_zyiji57g/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_zyiji57g/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0779881477355957}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 6]"
830,ilp_prod,2,10,30,0,15,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/26435c7f243745569531b4261760038e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/26435c7f243745569531b4261760038e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1703481674194336}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 5]
consumption (rows=resources) = [[2, 3], [3, 3]]
capacity = [10, 6]
upper_bounds = [3, 3]"
831,lcs,8,6,5,0,1,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07408905029296875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcbcbab""
T = ""dcbacbcb"""
832,mul,2,4794,94,0,1632,0,"{'ok': True, 'value': 4794, 'stdout': '4794\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09027361869812012}",1,Compute: 51 * 94
833,sub,16,5600471795656564,5600471795656564,1,5600471795656564,1,"{'ok': True, 'value': 5600471795656564, 'stdout': '5600471795656564\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07552671432495117}",1,Compute: 8275317612720025 - 2674845817063461
834,rod,32,768,1050,0,1040,0,"{'ok': True, 'value': 768, 'stdout': '768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07838320732116699}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [2, 48, 68, 9, 89, 19, 1, 62, 51, 29, 85, 23, 88, 41, 2, 92, 90, 3, 33, 62, 50, 30, 93, 90, 4, 51, 10, 81, 94, 17, 19, 55]"
835,sub,2,18,18,1,18,1,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0759134292602539}",1,Compute: 86 - 68
836,ilp_assign,4,20,10,0,34,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41184210777282715}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 3, 9, 11], [2, 10, 10, 10], [7, 5, 7, 8], [12, 1, 11, 12]]"
837,ilp_prod,4,37,51,0,The answer will be printed when the code is run.,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f30d867fe10142e9b21bf65e986337a6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f30d867fe10142e9b21bf65e986337a6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 35 RHS\nAt line 41 BOUNDS\nAt line 45 ENDATA\nProblem MODEL has 5 rows, 3 columns and 15 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17414617538452148}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8, 7]
consumption (rows=resources) = [[3, 1, 1], [1, 4, 1], [2, 1, 3]]
capacity = [15, 12, 9]
upper_bounds = [4, 3, 3]"
838,sub,8,43729563,4,0,43730563,0,"{'ok': True, 'value': 43729563, 'stdout': '43729563\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08819246292114258}",1,Compute: 73747365 - 30017802
839,ilp_assign,8,39,11,0,75,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3679618835449219}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 23, 11, 2, 15, 7, 22], [4, 15, 5, 13, 13, 7, 11], [11, 8, 16, 15, 13, 24, 1], [15, 12, 21, 21, 16, 11, 2], [15, 13, 22, 20, 23, 19, 22], [16, 16, 23, 22, 10, 2, 17], [15, 8, 3, 21, 10, 21, 6]]"
840,ilp_assign,4,17,0,0,5,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38391637802124023}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 5, 9, 5], [10, 10, 5, 8], [7, 2, 11, 4], [5, 11, 11, 3]]"
841,sub,8,11701128,11701128,1,11701128,1,"{'ok': True, 'value': 11701128, 'stdout': '11701128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08217406272888184}",1,Compute: 96449352 - 84748224
842,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08721351623535156}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""a"""
843,sub,8,10394774,46234958,0,10394774,1,"{'ok': True, 'value': 10394774, 'stdout': '10394774\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09184479713439941}",1,Compute: 56629732 - 46234958
844,ilp_prod,4,36,33,0,36,1,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8ab6618358aa466cb807263b8dcc8500-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8ab6618358aa466cb807263b8dcc8500-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 31 RHS\nAt line 36 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 36 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -36 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1551809310913086}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 3]
consumption (rows=resources) = [[1, 4, 3], [4, 4, 4], [1, 2, 2]]
capacity = [8, 14, 14]
upper_bounds = [3, 3, 3]"
845,mul,2,312,312,1,312,1,"{'ok': True, 'value': 312, 'stdout': '312\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07744979858398438}",1,Compute: 24 * 13
846,mul,4,9897216,99486592,0,10139904,0,"{'ok': True, 'value': 9897216, 'stdout': '9897216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09228277206420898}",1,Compute: 4208 * 2352
847,sub,32,9997141363527051442034074092545,9993724163527051442034076002445,0,10000000000000000000000000000000,0,"{'ok': True, 'value': 9997141363527051442034074092545, 'stdout': '9997141363527051442034074092545\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09166860580444336}",1,Compute: 29059899683423079415249721502376 - 19062758319896027973215647409831
848,ilp_prod,8,92,-1,0,4,0,"{'ok': True, 'value': 69, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/489167c52c5b4d618622dbc28dcef759-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/489167c52c5b4d618622dbc28dcef759-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 69 - 0.00 seconds\nCgl0004I processed model has 5 rows, 4 columns (4 integer (0 of which binary)) and 20 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -69 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -69, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -69 to -69\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                69.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n69.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16177582740783691}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 12, 4, 23]
consumption (rows=resources) = [[5, 5, 1, 6], [5, 1, 8, 2], [3, 7, 8, 5], [8, 1, 7, 1]]
capacity = [25, 17, 27, 22]
upper_bounds = [3, 3, 3, 4]"
849,add,2,82,82,1,82,1,"{'ok': True, 'value': 82, 'stdout': '82\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09661030769348145}",1,Compute: 34 + 48
850,lcs,16,9,8,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08678841590881348}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbbaacddcccadba""
T = ""bbcbcabdcdbdacca"""
851,add,2,137,137,1,137,1,"{'ok': True, 'value': 137, 'stdout': '137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1430056095123291}",1,Compute: 90 + 47
852,rod,4,18,12,0,4,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07635045051574707}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 9, 3, 3]"
853,rod,2,6,6,1,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07411646842956543}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
854,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_f_0_8fbm/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_f_0_8fbm/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07512116432189941}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
855,knap,4,19,19,1,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07526874542236328}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 1, 6]
V = [3, 14, 5, 4]
C = 8"
856,knap,32,1765,2055,0,3,0,"{'ok': True, 'value': 1765, 'stdout': '1765\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08017897605895996}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 48, 41, 49, 47, 25, 1, 11, 55, 60, 25, 44, 57, 6, 19, 31, 1, 17, 6, 18, 26, 60, 3, 20, 50, 2, 33, 10, 14, 36, 10, 43]
V = [108, 17, 102, 118, 43, 2, 91, 107, 88, 26, 51, 110, 66, 9, 54, 38, 2, 105, 108, 89, 60, 113, 66, 55, 19, 108, 84, 45, 35, 38, 104, 101]
C = 437"
857,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08150005340576172}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 15, 23, 14, 5, 6, 19, 2]"
858,ilp_assign,4,15,15,1,32,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.44319891929626465}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 8, 4, 11], [5, 9, 1, 5], [5, 3, 5, 11], [9, 5, 8, 3]]"
859,knap,32,1682,1000,0,60,0,"{'ok': True, 'value': 1682, 'stdout': '1682\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09584784507751465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 33, 43, 12, 19, 19, 26, 35, 52, 62, 25, 57, 32, 60, 35, 62, 41, 34, 13, 58, 41, 41, 47, 4, 9, 43, 57, 41, 61, 1, 42, 55]
V = [52, 100, 53, 94, 16, 89, 69, 88, 41, 3, 66, 102, 82, 4, 33, 101, 11, 78, 35, 100, 100, 114, 39, 84, 109, 65, 104, 17, 69, 108, 78, 1]
C = 589"
860,ilp_prod,32,230,0,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_blkswtej/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_blkswtej/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15895509719848633}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 8, 89, 5, 36, 11]
consumption (rows=resources) = [[15, 25, 6, 30, 21, 17], [4, 3, 7, 13, 12, 28], [8, 8, 31, 5, 32, 12], [7, 2, 28, 21, 12, 11]]
capacity = [86, 96, 101, 72]
upper_bounds = [5, 3, 3, 3, 3, 3]"
861,mul,8,4367565696425228,95641211,0,4318833555448,0,"{'ok': True, 'value': 4367565696425228, 'stdout': '4367565696425228\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07681751251220703}",1,Compute: 45666148 * 95641211
862,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07550811767578125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcbbacd""
T = ""dcdadcab"""
863,ilp_partition,32,0,1,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.030285120010376}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 89, 74, 25, 36, 64, 54, 39, 26, 56, 56, 45, 32, 8, 91, 78, 49, 91, 73, 43, 77, 65, 61, 40]"
864,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0718235969543457}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""b"""
865,ilp_assign,8,34,36,0,46,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4087495803833008}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 20, 12, 12, 11, 5, 11], [11, 18, 23, 11, 21, 2, 11], [15, 6, 3, 1, 24, 1, 16], [22, 4, 7, 13, 20, 17, 14], [20, 4, 9, 17, 14, 2, 15], [7, 2, 18, 1, 23, 24, 10], [14, 3, 11, 12, 19, 13, 2]]"
866,add,8,96162909,96162909,1,96162909,1,"{'ok': True, 'value': 96162909, 'stdout': '96162909\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07613825798034668}",1,Compute: 15052414 + 81110495
867,knap,32,1962,2058,0,6,0,"{'ok': True, 'value': 1962, 'stdout': '1962\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08381009101867676}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [59, 48, 52, 51, 31, 16, 5, 42, 23, 1, 60, 22, 9, 16, 54, 50, 46, 57, 20, 43, 29, 38, 57, 53, 53, 48, 24, 36, 18, 43, 32, 12]
V = [30, 28, 60, 46, 85, 109, 115, 26, 121, 33, 69, 120, 100, 71, 112, 110, 29, 128, 11, 111, 60, 94, 51, 109, 39, 113, 59, 105, 95, 118, 117, 65]
C = 574"
868,ilp_partition,32,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19589018821716309}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 54, 5, 81, 64, 95, 81, 95, 12, 60, 79, 4, 17, 14, 78, 17, 2, 78, 37, 7, 46, 5, 26, 72]"
869,rod,4,16,12,0,1,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07943272590637207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 6, 12, 3]"
870,add,2,108,108,1,108,1,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07877874374389648}",1,Compute: 85 + 23
871,add,8,103375727,103375727,1,103375727,1,"{'ok': True, 'value': 103375727, 'stdout': '103375727\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07430577278137207}",1,Compute: 82578409 + 20797318
872,rod,4,32,32,1,1,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07439303398132324}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 4, 12, 4]"
873,ilp_partition,2,2,1,0,16,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07631874084472656}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 5, 1]"
874,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07801961898803711}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 28, 90, 16, 12, 4, 83, 69, 27, 43, 91, 50, 88, 50, 18, 30, 58, 27, 87, 73, 9, 52, 4, 28]"
875,sub,8,85231201,85231201,1,85231201,1,"{'ok': True, 'value': 85231201, 'stdout': '85231201\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08591890335083008}",1,Compute: 95567896 - 10336695
876,ilp_prod,16,375,A linear programming solver would be used to solve this problem.,0,160,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ds5po1hl/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ds5po1hl/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14419293403625488}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 24, 48, 34, 35, 13]
consumption (rows=resources) = [[12, 5, 15, 5, 3, 9], [5, 2, 5, 4, 6, 9], [1, 5, 2, 2, 6, 7], [8, 9, 13, 5, 11, 8]]
capacity = [59, 61, 35, 63]
upper_bounds = [4, 7, 3, 10, 5, 5]"
877,ilp_prod,8,95,100,0,24,0,"{'ok': True, 'value': 45, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4978725c4adb43348d793a0011595629-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4978725c4adb43348d793a0011595629-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 45 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -45 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                45.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n45.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15378403663635254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 19, 15, 15]
consumption (rows=resources) = [[1, 1, 5, 6], [4, 4, 8, 8], [8, 1, 4, 2], [6, 5, 7, 4]]
capacity = [21, 24, 24, 27]
upper_bounds = [3, 5, 3, 3]"
878,ilp_prod,32,303,1053,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_2_ogqz9b/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_2_ogqz9b/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.13837885856628418}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [61, 44, 42, 47, 30, 67]
consumption (rows=resources) = [[30, 18, 2, 23, 14, 31], [29, 10, 10, 7, 21, 7], [23, 22, 8, 17, 21, 9], [24, 11, 23, 10, 14, 22]]
capacity = [71, 102, 110, 128]
upper_bounds = [3, 3, 5, 3, 4, 3]"
879,rod,32,496,95,0,128,0,"{'ok': True, 'value': 496, 'stdout': '496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07340574264526367}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [12, 8, 34, 62, 43, 76, 16, 7, 2, 80, 2, 3, 72, 2, 45, 66, 63, 66, 48, 31, 52, 79, 95, 55, 83, 58, 20, 46, 95, 91, 84, 57]"
880,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08807539939880371}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""a"""
881,sub,4,549,549,1,549,1,"{'ok': True, 'value': 549, 'stdout': '549\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07907938957214355}",1,Compute: 3731 - 3182
882,ilp_assign,8,41,46,0,74,0,"{'ok': True, 'value': 41, 'stdout': '41\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4103512763977051}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 4, 11, 2, 7, 24, 20], [12, 6, 18, 19, 24, 10, 16], [18, 6, 14, 12, 12, 1, 6], [6, 20, 12, 23, 23, 16, 21], [15, 22, 18, 7, 4, 11, 21], [24, 1, 14, 8, 15, 10, 14], [9, 3, 18, 7, 15, 4, 21]]"
883,add,16,11115970919018396,12121482446316733,0,11116071018928396,0,"{'ok': True, 'value': 11115970919018396, 'stdout': '11115970919018396\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08089327812194824}",1,Compute: 2112148244631673 + 9003822674386723
884,knap,16,404,149,0,0,0,"{'ok': True, 'value': 404, 'stdout': '404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09351396560668945}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 14, 27, 8, 27, 9, 25, 27, 28, 30, 31, 16, 28, 16, 5, 2]
V = [42, 45, 30, 35, 54, 41, 22, 45, 31, 25, 17, 63, 21, 22, 19, 29]
C = 149"
885,sub,32,2724926831775228570181549337024,,0,27205246931755628564281510337024,0,"{'ok': True, 'value': 2724926831775228570181549337024, 'stdout': '2724926831775228570181549337024\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0869300365447998}",1,Compute: 27929726470080432790574163469873 - 25204799638305204220392614132849
886,lcs,32,19,16,0,2,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07689857482910156}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbddddbcdddcaddbacbcadcababadbb""
T = ""bbdbbccdabbcdaddabadbdcdabccadbda"""
887,sub,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08107686042785645}",1,Compute: 88 - 85
888,rod,32,2784,1050,0,1,0,"{'ok': True, 'value': 2784, 'stdout': '2784\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1004171371459961}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [87, 43, 12, 67, 41, 1, 38, 18, 21, 91, 85, 37, 38, 73, 62, 67, 2, 3, 12, 83, 8, 12, 43, 60, 18, 71, 30, 21, 12, 19, 20, 33]"
889,ilp_assign,2,7,2,0,12,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3939170837402344}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 6], [1, 6]]"
890,mul,2,966,966,1,966,1,"{'ok': True, 'value': 966, 'stdout': '966\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07430648803710938}",1,Compute: 23 * 42
891,rod,8,160,1,0,1,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07487225532531738}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 14, 18, 13, 4, 10, 3, 20]"
892,rod,32,2496,1050,0,0,0,"{'ok': True, 'value': 2496, 'stdout': '2496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07615160942077637}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [78, 84, 30, 13, 69, 84, 64, 25, 9, 70, 60, 27, 1, 28, 50, 94, 31, 18, 5, 38, 69, 88, 25, 37, 44, 20, 45, 6, 87, 69, 84, 45]"
893,lcs,4,2,3,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07183527946472168}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabc""
T = ""cdbac"""
894,add,16,5568008211364340,169255230597572340,0,5567982211364339,0,"{'ok': True, 'value': 5568008211364340, 'stdout': '5568008211364340\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0753180980682373}",1,Compute: 1261946096488096 + 4306062114876244
895,sub,32,14918618177520544690477522440220,149185920027165446904775224402220,0,14918618177520544690477522440220,1,"{'ok': True, 'value': 14918618177520544690477522440220, 'stdout': '14918618177520544690477522440220\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08618974685668945}",1,Compute: 28853033538637202498388648529331 - 13934415361116657807911126089111
896,add,16,3240493449722288,10,0,3240496449722288,0,"{'ok': True, 'value': 3240493449722288, 'stdout': '3240493449722288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07580327987670898}",1,Compute: 1049222763488403 + 2191270686233885
897,add,4,5283,5283,1,5283,1,"{'ok': True, 'value': 5283, 'stdout': '5283\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08588624000549316}",1,Compute: 3365 + 1918
898,ilp_prod,8,93,105,0,21,0,"{'ok': True, 'value': 93, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1cb1b06d8d3244988b5a76be2b0c56ca-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1cb1b06d8d3244988b5a76be2b0c56ca-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 102.455 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -84 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -93 found by DiveCoefficient after 4 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3\nCbc0013I At root node, 2 cuts changed objective from -101.10526 to -93 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 6 row cuts average 3.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -93, took 4 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -101.105 to -93\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                93.00000000\nEnumerated nodes:               0\nTotal iterations:               4\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n93.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16510009765625}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 9, 14, 23]
consumption (rows=resources) = [[3, 4, 2, 7], [4, 5, 4, 3], [2, 6, 1, 8], [5, 1, 1, 4]]
capacity = [17, 27, 18, 21]
upper_bounds = [4, 3, 6, 3]"
899,add,2,169,169,1,169,1,"{'ok': True, 'value': 169, 'stdout': '169\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09955477714538574}",1,Compute: 74 + 95
900,rod,8,60,22,0,1,0,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08397221565246582}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [1, 15, 8, 13, 18, 3, 14, 20]"
901,lcs,8,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0863499641418457}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacbacac""
T = ""addcccbd"""
902,sub,8,36005938,36005938,1,36005938,1,"{'ok': True, 'value': 36005938, 'stdout': '36005938\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09608888626098633}",1,Compute: 63823142 - 27817204
903,ilp_prod,4,22,55,0,30,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/55c774dd90d34d6fb3c187f8d2a1798a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/55c774dd90d34d6fb3c187f8d2a1798a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 31 RHS\nAt line 36 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 13.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1517338752746582}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 11, 9]
consumption (rows=resources) = [[1, 4, 1], [4, 3, 3], [3, 2, 2]]
capacity = [14, 8, 14]
upper_bounds = [3, 3, 3]"
904,add,2,77,77,1,77,1,"{'ok': True, 'value': 77, 'stdout': '77\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07316946983337402}",1,Compute: 25 + 52
905,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 84, 'stdout': '84\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07633709907531738}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 8, 9, 8, 17, 13, 19, 2]"
906,knap,32,1648,1044,0,62,0,"{'ok': True, 'value': 1648, 'stdout': '1648\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08014440536499023}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 32, 48, 11, 63, 14, 19, 19, 43, 56, 13, 12, 62, 60, 50, 13, 56, 64, 11, 32, 46, 16, 55, 60, 18, 22, 17, 32, 52, 62, 52, 51]
V = [101, 92, 46, 116, 8, 34, 1, 116, 56, 96, 112, 121, 49, 13, 35, 42, 9, 10, 111, 41, 18, 61, 28, 64, 62, 78, 62, 20, 92, 116, 75, 41]
C = 594"
907,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07564067840576172}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbabccba""
T = ""cbdddab"""
908,rod,32,3072,1055,0,1,0,"{'ok': True, 'value': 3072, 'stdout': '3072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08452987670898438}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [96, 10, 35, 17, 85, 92, 36, 14, 87, 90, 76, 48, 87, 39, 2, 43, 56, 76, 42, 66, 95, 63, 87, 77, 46, 75, 27, 90, 69, 33, 79, 87]"
909,mul{'ok': True, 'value': 35500741075100915155823480591504, 'stdout': '35500741075100915155823480591504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08646869659423828}",1,Compute: 9000143725426352 * 3944463795040027
910,ilp_assign,4,20,28,0,34,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40917301177978516}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 10, 8, 6], [10, 1, 9, 6], [12, 7, 12, 12], [1, 10, 11, 8]]"
911,ilp_prod,32,501,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are that the total consumption of each resource must not exceed its capacity and that the quantity produced for each product must be non-negative. The upper bounds on the quantity of each product that can be produced are given by upper_bounds[j]. The problem is then solved using a linear programming solver, and the maximum profit is the value of the objective function after solving the problem.",0,250,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_drvg1pt2/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_drvg1pt2/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14361143112182617}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 89, 6, 41, 92, 50]
consumption (rows=resources) = [[19, 3, 16, 5, 3, 17], [20, 28, 28, 3, 14, 15], [27, 14, 20, 9, 12, 10], [6, 2, 10, 28, 32, 30]]
capacity = [82, 128, 76, 105]
upper_bounds = [3, 4, 3, 3, 3, 3]"
912,ilp_partition,32,0,10,0,43,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21191692352294922}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 81, 34, 10, 62, 43, 83, 73, 70, 67, 24, 21, 16, 85, 64, 62, 55, 12, 89, 67, 54, 28, 40, 73]"
913,knap,4,26,24,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07797122001647949}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 4, 1]
V = [15, 6, 7, 13]
C = 7"
914,ilp_partition,4,1,11,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0771033763885498}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 2, 2, 12]"
915,ilp_prod,2,18,18,1,6,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b47f2e76dbed42f1b2a5628be76fd04e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b47f2e76dbed42f1b2a5628be76fd04e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 9.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15818095207214355}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[2, 2], [2, 2]]
capacity = [9, 6]
upper_bounds = [3, 3]"
916,ilp_assign,32,145,0,0,209,0,"{'ok': True, 'value': 145, 'stdout': '145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3897705078125}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[66, 83, 7, 47, 91, 35, 21], [6, 29, 32, 4, 31, 54, 66], [2, 13, 50, 14, 42, 32, 5], [70, 20, 28, 60, 32, 20, 37], [86, 63, 19, 8, 70, 70, 34], [57, 87, 84, 37, 75, 68, 71], [6, 55, 89, 82, 35, 77, 25]]"
917,rod,8,46,24,0,1,0,"{'ok': True, 'value': 46, 'stdout': '46\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07532882690429688}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 1, 18, 23, 18, 16, 19, 20]"
918,ilp_partition,2,0,0,1,194,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0718986988067627}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 1, 3]"
919,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07881689071655273}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dc""
T = ""b"""
920,lcs,32,21,15,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07655930519104004}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdccbaaaaaddcdbaaddaaacbdcdcdda""
T = ""cbcdcaaadccbbbabaaacbdbddaccdcbd"""
921,ilp_assign,4,15,26,0,28,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3851311206817627}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6, 7, 6], [10, 4, 5, 5], [5, 8, 10, 3], [10, 6, 3, 7]]"
922,ilp_assign,8,30,56,0,46,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42388248443603516}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 4, 3, 7, 7, 7, 1], [6, 14, 21, 16, 15, 11, 6], [22, 7, 14, 3, 13, 23, 12], [12, 3, 17, 22, 15, 17, 22], [18, 23, 1, 7, 9, 12, 12], [1, 7, 8, 14, 11, 12, 22], [20, 15, 15, 23, 24, 24, 4]]"
923,ilp_prod,2,15,24,0,12,0,"{'ok': True, 'value': 3, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/01b302ae8773419ea44f01da97bf7315-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/01b302ae8773419ea44f01da97bf7315-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 4.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -3 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                3.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n3.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16065764427185059}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[1, 3], [2, 2]]
capacity = [7, 8]
upper_bounds = [4, 3]"
924,ilp_assign,32,69,0,0,65,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3925344944000244}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 83, 9, 11, 37, 40, 83], [23, 37, 7, 51, 34, 56, 35], [28, 91, 50, 20, 13, 9, 26], [35, 28, 86, 76, 2, 81, 35], [34, 50, 96, 83, 58, 9, 78], [72, 34, 74, 2, 23, 79, 16], [3, 18, 11, 36, 26, 3, 65]]"
925,knap,16,447,138,0,0,0,"{'ok': True, 'value': 447, 'stdout': '447\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07831978797912598}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 29, 17, 11, 13, 3, 13, 28, 17, 25, 15, 19, 24, 7, 15, 17]
V = [15, 62, 54, 51, 48, 46, 60, 35, 54, 31, 48, 24, 22, 22, 19, 11]
C = 138"
926,ilp_partition,8,1,1,1,18,0,"{'ok': True, 'value': 51, 'stdout': '51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07586169242858887}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 9, 4, 2, 12, 16, 12, 18]"
927,sub,16,6163632578733924,6163632578733924,1,6163632578733924,1,"{'ok': True, 'value': 6163632578733924, 'stdout': '6163632578733924\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08634400367736816}",1,Compute: 8167849155782475 - 2004216577048551
928,sub,2,29,29,1,29,1,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08717179298400879}",1,Compute: 47 - 18
929,rod,16,496,65,0,84,0,"{'ok': True, 'value': 496, 'stdout': '496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08405709266662598}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [31, 48, 14, 25, 37, 31, 24, 2, 33, 24, 17, 35, 13, 18, 38, 42]"
930,ilp_assign,4,13,0,0,28,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40325164794921875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 6, 6, 10], [7, 12, 7, 2], [7, 1, 7, 10], [4, 2, 4, 12]]"
931,add,32,83155979998209919650813798734473,83155579998209919650813798754470,0,83155979998209919650813800734473,0,"{'ok': True, 'value': 83155979998209919650813798734473, 'stdout': '83155979998209919650813798734473\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09125423431396484}",1,Compute: 46322273703502303155433615079208 + 36833706294707616495380183655265
932,sub,32,42401426228331881436667312895871,423525,0,42401426228331881436667312895871,1,"{'ok': True, 'value': 42401426228331881436667312895871, 'stdout': '42401426228331881436667312895871\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08201289176940918}",1,Compute: 87267871574078868023428207560111 - 44866445345746986586760894664240
933,add,4,11567,11157,0,11567,1,"{'ok': True, 'value': 11567, 'stdout': '11567\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08440613746643066}",1,Compute: 5069 + 6498
934,mul,32,3564127658894536979514734542265254098452616950186578336638252674,The result is too large to be represented as an integer{'ok': True, 'value': 3564127658894536979514734542265254098452616950186578336638252674, 'stdout': '3564127658894536979514734542265254098452616950186578336638252674\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07929205894470215}",1,Compute: 66484261124521078244873473956458 * 53608592448957765275912916693853
935,mul,4,12819960,0,0,12626640,0,"{'ok': True, 'value': 12819960, 'stdout': '12819960\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15051865577697754}",1,Compute: 2980 * 4302
936,ilp_prod,32,452,The solution to the problem is to use a linear programming approach to find the optimal solution.,0,The actual profit will be printed when the code is executed.,0,"{'ok': True, 'value': 81, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5446fc9b76d5460bae433d2d7f424fae-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5446fc9b76d5460bae433d2d7f424fae-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 101.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -81 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                81.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n81.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1569983959197998}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 7, 48, 78, 70, 76]
consumption (rows=resources) = [[9, 8, 31, 14, 1, 8], [20, 22, 9, 17, 3, 30], [21, 8, 13, 4, 14, 17], [17, 17, 13, 6, 22, 31]]
capacity = [114, 75, 113, 84]
upper_bounds = [3, 3, 3, 4, 3, 3]"
937,mul,4,88544802,9182,0,88184302,0,"{'ok': True, 'value': 88544802, 'stdout': '88544802\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10994338989257812}",1,Compute: 9062 * 9771
938,knap,8,93,100,0,4,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09573078155517578}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 4, 11, 8, 11, 11, 7, 4]
V = [27, 14, 27, 9, 6, 25, 2, 25]
C = 33"
939,knap,2,9,12,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07965421676635742}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 1]
V = [3, 9, 6]
C = 3"
940,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0785665512084961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbb""
T = ""cdc"""
941,knap,4,31,37,0,0,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0759742259979248}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 6, 6]
V = [15, 11, 16, 13]
C = 13"
942,ilp_partition,8,1,1,1,100,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07509493827819824}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 8, 20, 20, 3, 21, 16, 6]"
943,rod,16,336,65,0,65,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07767033576965332}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [21, 30, 41, 32, 37, 25, 34, 47, 42, 8, 33, 2, 38, 42, 13, 41]"
944,ilp_partition,2,0,1,0,2,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07261466979980469}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 4, 3]"
945,rod,4,28,28,1,8,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07890892028808594}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 8, 10, 8]"
946,add,4,16161,16161,1,16161,1,"{'ok': True, 'value': 16161, 'stdout': '16161\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08439755439758301}",1,Compute: 9324 + 6837
947,ilp_prod,16,312,105,0,5,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b518ebddd6ba43eaa5abd50d8eb7a300-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b518ebddd6ba43eaa5abd50d8eb7a300-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 29 COLUMNS\nAt line 192 RHS\nAt line 217 BOUNDS\nAt line 224 ENDATA\nProblem MODEL has 24 rows, 6 columns and 144 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15286755561828613}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 37, 34, 24, 37, 3]
consumption (rows=resources) = [[11, 14, 3, 12, 12, 5], [4, 9, 7, 13, 5, 10], [11, 5, 3, 7, 12, 16], [4, 2, 2, 13, 6, 9]]
capacity = [64, 63, 42, 56]
upper_bounds = [3, 4, 9, 4, 3, 3]"
948,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0787665843963623}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 21, 1, 7, 17, 12, 23, 15]"
949,sub,8,34035997,34035997,1,34036007,0,"{'ok': True, 'value': 34035997, 'stdout': '34035997\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07425403594970703}",1,Compute: 45431118 - 11395121
950,rod,4,36,24,0,6,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06800508499145508}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 12, 3, 6]"
951,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06842565536499023}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acddbdadcaaaadbdcdcaccdccdcbbadb""
T = ""babcbdaadaddbbabcddccaddbcdcdbb"""
952,ilp_prod,4,50,60,0,30,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/883db6def0a04cbabc87b5d5427f51c3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/883db6def0a04cbabc87b5d5427f51c3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15493440628051758}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 10, 4]
consumption (rows=resources) = [[4, 1, 1], [1, 1, 3], [1, 3, 3]]
capacity = [10, 16, 15]
upper_bounds = [3, 5, 5]"
953,rod,4,14,14,1,0,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07474184036254883}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 7, 7, 6]"
954,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10594058036804199}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 4, 1]"
955,add,32,55724052413791696757294480950750,2141266141106214110,0,55724052413871796757294480950748,0,"{'ok': True, 'value': 55724052413791696757294480950750, 'stdout': '55724052413791696757294480950750\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08340954780578613}",1,Compute: 14165295897876804509125542038716 + 41558756515914892248168938912034
956,lcs,8,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08418393135070801}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbcdcac""
T = ""adccdab"""
957,ilp_assign,4,7,2,0,15,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3904266357421875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1, 4, 2], [2, 2, 12, 1], [10, 11, 2, 1], [5, 7, 3, 6]]"
958,rod,8,96,22,0,30,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08965849876403809}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 19, 2, 6, 14, 8, 16, 21]"
959,ilp_prod,16,119,The solution to the problem is to use a linear programming approach to find the optimal solution.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_qxmcjkue/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_qxmcjkue/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14609265327453613}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 17, 3, 11, 29, 21]
consumption (rows=resources) = [[3, 12, 11, 5, 4, 2], [3, 15, 13, 7, 16, 5], [1, 6, 1, 11, 13, 11], [13, 12, 13, 9, 6, 15]]
capacity = [56, 51, 50, 55]
upper_bounds = [4, 3, 3, 4, 3, 3]"
960,ilp_assign,32,102,186,0,200,0,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3855900764465332}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[59, 72, 71, 85, 8, 50, 4], [48, 15, 58, 87, 20, 60, 94], [39, 55, 1, 16, 19, 42, 62], [83, 37, 41, 79, 51, 61, 26], [77, 29, 26, 20, 21, 60, 96], [3, 54, 40, 36, 29, 42, 60], [90, 56, 34, 32, 64, 29, 80]]"
961,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.32950878143310547}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [82, 10, 93, 53, 35, 59, 54, 12, 49, 91, 61, 94, 82, 60, 72, 66, 73, 49, 1, 95, 88, 4, 89, 76]"
962,knap,8,70,143,0,12,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07930254936218262}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 10, 9, 11, 12, 14, 12, 7]
V = [1, 32, 9, 12, 25, 1, 12, 2]
C = 38"
963,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08374667167663574}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 9, 21, 22, 1, 5, 6, 6]"
964,mul{'ok': True, 'value': 3129633263577989188807089292526796491046191011704888107030449323, 'stdout': '3129633263577989188807089292526796491046191011704888107030449323\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06960034370422363}",1,Compute: 34005614234909722029758079688819 * 92032840282154007291771566992617
965,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0672914981842041}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccda""
T = ""bab"""
966,ilp_prod,4,25,35,0,30,0,"{'ok': True, 'value': 25, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d79483b6caab4534a484f232afbb1413-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d79483b6caab4534a484f232afbb1413-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 26.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -25 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                25.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n25.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16800808906555176}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4, 3]
consumption (rows=resources) = [[2, 3, 1], [3, 2, 4], [1, 3, 3]]
capacity = [12, 16, 14]
upper_bounds = [5, 4, 4]"
967,knap,16,463,1040,0,0,0,"{'ok': True, 'value': 463, 'stdout': '463\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08852434158325195}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 24, 3, 14, 11, 21, 20, 30, 7, 1, 12, 24, 13, 11, 18, 11]
V = [15, 25, 49, 56, 40, 27, 9, 37, 64, 60, 30, 7, 34, 42, 51, 20]
C = 120"
968,ilp_prod,2,21,-1,0,9,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/77803684e3c6417aa6b3d7a592b23a10-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/77803684e3c6417aa6b3d7a592b23a10-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 21.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15885639190673828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4]
consumption (rows=resources) = [[2, 2], [3, 2]]
capacity = [10, 9]
upper_bounds = [3, 4]"
969,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10363316535949707}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddcdbba""
T = ""cbbbbbd"""
970,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 198, 'stdout': '198\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10165739059448242}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 10, 16, 41, 6, 23, 16, 10, 7, 1, 41, 2, 4, 11, 8, 4]"
971,rod,2,10,6,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08646178245544434}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 6]"
972,add,16,11052516067427131,2255456545126512,0,110530876899716711,0,"{'ok': True, 'value': 11052516067427131, 'stdout': '11052516067427131\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07765984535217285}",1,Compute: 1110453754951612 + 9942062312475519
973,ilp_prod,2,30,23,0,7,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bd01a30b965d45409b069c3cce0ff1d5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bd01a30b965d45409b069c3cce0ff1d5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 8.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17557835578918457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[3, 1], [3, 1]]
capacity = [6, 7]
upper_bounds = [3, 6]"
974,ilp_assign,8,45,105,0,1,0,"{'ok': True, 'value': 45, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7480db2cf4b44203b931c4f8915bc96b-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/7480db2cf4b44203b931c4f8915bc96b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 45 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 45\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 45 - took 0.00 seconds\nCbc0012I Integer solution of 45 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 45, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 45 to 45\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                45.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nThe minimum total cost is: 45.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17158150672912598}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 3, 17, 24, 20, 7, 14], [11, 16, 14, 21, 13, 22, 21], [1, 19, 23, 24, 17, 21, 18], [4, 6, 13, 18, 5, 9, 7], [16, 24, 5, 11, 24, 24, 18], [21, 4, 6, 20, 23, 21, 16], [1, 10, 2, 22, 18, 4, 9]]"
975,rod,4,16,16,1,9,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0906524658203125}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 8, 10, 9]"
976,knap,32,1723,1047,0,34,0,"{'ok': True, 'value': 1723, 'stdout': '1723\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09900379180908203}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 10, 62, 28, 64, 64, 2, 34, 15, 7, 25, 42, 46, 8, 62, 45, 17, 34, 39, 45, 1, 6, 23, 50, 2, 59, 43, 39, 25, 45, 8, 29]
V = [77, 23, 34, 52, 10, 22, 34, 54, 40, 106, 56, 100, 9, 117, 55, 127, 47, 77, 95, 79, 85, 36, 86, 55, 118, 17, 111, 115, 11, 23, 88, 43]
C = 494"
977,knap,2,7,12,0,-1,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0900716781616211}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 5]
V = [7, 2, 5]
C = 7"
978,ilp_partition,4,8,1,0,2,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06949782371520996}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 11, 1, 11]"
979,add,4,13226,13226,1,13226,1,"{'ok': True, 'value': 13226, 'stdout': '13226\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08189105987548828}",1,Compute: 9405 + 3821
980,ilp_prod,4,27,48,0,36,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4541235f824044bfbb07482549edb44e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4541235f824044bfbb07482549edb44e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.177506685256958}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 12, 3]
consumption (rows=resources) = [[3, 4, 4], [2, 3, 3], [4, 4, 1]]
capacity = [12, 16, 10]
upper_bounds = [3, 3, 3]"
981,mul,8,1219642142386080,3393730800,0,12240384333440,0,"{'ok': True, 'value': 1219642142386080, 'stdout': '1219642142386080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07706761360168457}",1,Compute: 56562180 * 21562856
982,add,8,135948987,135948987,1,135948987,1,"{'ok': True, 'value': 135948987, 'stdout': '135948987\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09030294418334961}",1,Compute: 63723449 + 72225538
983,add,32,114882303949000687359494754290062,,0,114882303949000687359494774290062,0,"{'ok': True, 'value': 114882303949000687359494754290062, 'stdout': '114882303949000687359494754290062\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0675954818725586}",1,Compute: 25787631980072657189067624768190 + 89094671968928030170427129521872
984,mul,4,55534788,100,0,55384288,0,"{'ok': True, 'value': 55534788, 'stdout': '55534788\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08518528938293457}",1,Compute: 7641 * 7268
985,ilp_partition,2,0,1,0,6,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07593297958374023}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 2, 6]"
986,sub,2,82,82,1,82,1,"{'ok': True, 'value': 82, 'stdout': '82\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07423710823059082}",1,Compute: 96 - 14
987,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09203934669494629}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
988,ilp_prod,16,149,-1,0,6,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c926cca2a80f47f4911f43d94da35f1a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c926cca2a80f47f4911f43d94da35f1a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 66 RHS\nAt line 73 BOUNDS\nAt line 80 ENDATA\nProblem MODEL has 6 rows, 6 columns and 36 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 2.14286 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15326595306396484}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 43, 35, 20, 22, 3]
consumption (rows=resources) = [[1, 7, 13, 4, 12, 14], [5, 7, 3, 4, 15, 15], [3, 1, 7, 4, 2, 1], [6, 16, 16, 9, 16, 10]]
capacity = [59, 51, 33, 57]
upper_bounds = [9, 3, 3, 6, 3, 3]"
989,sub,8,65970020,25632426,0,65969990,0,"{'ok': True, 'value': 65970020, 'stdout': '65970020\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07583022117614746}",1,Compute: 91602446 - 25632426
990,ilp_partition,2,4,0,0,2,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07923483848571777}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 6, 2]"
991,mul,4,7816648,766208,0,7626688,0,"{'ok': True, 'value': 7816648, 'stdout': '7816648\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08763360977172852}",1,Compute: 1358 * 5756
992,sub,32,30943946864398784217727593197657,30943946864398784217727593202657,0,30943946864398784217727593197657,1,"{'ok': True, 'value': 30943946864398784217727593197657, 'stdout': '30943946864398784217727593197657\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0732111930847168}",1,Compute: 78070093002779609216969637225257 - 47126146138380824999242044027600
993,ilp_prod,16,180,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce, which are assumed to be integers. The objective function is the sum of the product of profit[j] and x_j for all j. The constraints are resource constraints, non-negativity, and upper bounds. A linear programming solver can be used to find the optimal solution, and the maximum profit is returned.",0,432,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1c818dfbacb34f52b04a3fb1edf571e1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1c818dfbacb34f52b04a3fb1edf571e1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 65.6 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -48 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18807578086853027}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 44, 37, 36, 3, 46]
consumption (rows=resources) = [[7, 4, 10, 5, 7, 13], [15, 2, 13, 13, 13, 15], [5, 7, 9, 11, 9, 2], [11, 13, 2, 16, 4, 8]]
capacity = [45, 41, 33, 43]
upper_bounds = [3, 3, 3, 3, 3, 3]"
994,ilp_prod,32,702,1003,0,103,0,"{'ok': True, 'value': 240, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b62f0b01a26a4d0e853e4facd81f255e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b62f0b01a26a4d0e853e4facd81f255e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 17 COLUMNS\nAt line 108 RHS\nAt line 121 BOUNDS\nAt line 128 ENDATA\nProblem MODEL has 12 rows, 6 columns and 72 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 310 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -240 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                240.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n240.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16205859184265137}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [80, 51, 70, 54, 94, 81]
consumption (rows=resources) = [[16, 18, 2, 20, 6, 21], [21, 18, 12, 4, 7, 2], [18, 24, 15, 21, 8, 31], [15, 24, 9, 32, 22, 9]]
capacity = [127, 103, 119, 124]
upper_bounds = [4, 4, 7, 3, 5, 3]"
995,rod,8,160,25,0,39,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07911419868469238}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 13, 11, 12, 22, 13, 2, 22]"
996,add,32,116368457815496024997258228095115,162104832702900473710020625085237603009878,0,116368457815596024997258228105115,0,"{'ok': True, 'value': 116368457815496024997258228095115, 'stdout': '116368457815496024997258228095115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06930661201477051}",1,Compute: 62104832702900473710020625085237 + 54263625112595551287237603009878
997,mul,4,55585122,36613920,0,55484952,0,"{'ok': True, 'value': 55585122, 'stdout': '55585122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07657933235168457}",1,Compute: 9426 * 5897
998,sub,4,330,330,1,330,1,"{'ok': True, 'value': 330, 'stdout': '330\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09986686706542969}",1,Compute: 3933 - 3603
999,add,2,158,158,1,158,1,"{'ok': True, 'value': 158, 'stdout': '158\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0980229377746582}",1,Compute: 63 + 95
1000,rod,16,656,42,0,46,0,"{'ok': True, 'value': 656, 'stdout': '656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371949195861816}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [41, 3, 34, 4, 13, 23, 5, 38, 28, 45, 36, 35, 30, 15, 38, 42]"
1001,rod,32,2304,1055,0,0,0,"{'ok': True, 'value': 2304, 'stdout': '2304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08981442451477051}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [72, 43, 27, 65, 26, 89, 68, 61, 40, 64, 61, 47, 45, 93, 64, 19, 32, 94, 83, 26, 59, 43, 5, 82, 71, 65, 90, 53, 72, 48, 2, 30]"
1002,knap,4,25,25,1,0,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07868623733520508}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 5, 3]
V = [1, 11, 4, 14]
C = 8"
1003,ilp_assign,4,19,25,0,35,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.661374568939209}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 5, 12, 11], [1, 7, 9, 10], [7, 3, 6, 3], [8, 7, 10, 9]]"
1004,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07250356674194336}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
1005,knap,16,438,122,0,1,0,"{'ok': True, 'value': 438, 'stdout': '438\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09405970573425293}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 4, 13, 23, 27, 11, 13, 14, 24, 16, 15, 2, 27, 21, 25]
V = [17, 44, 18, 13, 58, 37, 52, 52, 13, 27, 41, 45, 51, 50, 60, 40]
C = 122"
1006,lcs,4,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.086578369140625}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabd""
T = ""ccc"""
1007,mul,2,784,784,1,784,1,"{'ok': True, 'value': 784, 'stdout': '784\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07805538177490234}",1,Compute: 16 * 49
1008,ilp_prod,32,579,352,0,288,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6zno20ak/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_6zno20ak/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1842799186706543}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [71, 81, 73, 96, 49, 72]
consumption (rows=resources) = [[13, 15, 29, 2, 29, 23], [26, 21, 14, 11, 9, 8], [1, 4, 6, 23, 26, 16], [28, 18, 20, 9, 18, 8]]
capacity = [101, 103, 90, 94]
upper_bounds = [3, 4, 3, 3, 3, 4]"
1009,ilp_assign,8,38,56,0,91,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3828246593475342}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 22, 9, 5, 7, 1, 6], [15, 2, 20, 19, 14, 23, 4], [18, 2, 17, 6, 23, 21, 22], [21, 15, 3, 1, 18, 1, 5], [8, 1, 18, 2, 17, 21, 19], [22, 8, 20, 23, 14, 23, 4], [16, 12, 11, 6, 24, 22, 7]]"
1010,rod,8,104,39,0,49,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07584071159362793}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 17, 21, 4, 24, 11, 16, 21]"
1011,ilp_prod,32,539,"The solution to the problem involves using a linear programming approach to maximize total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are the resource constraints, non-negativity constraint, and upper bounds. A linear programming solver is used to find the optimal solution, and the maximum profit is the sum of the product of profit[j] and the corresponding x_j for all j.",0,1,0,"{'ok': True, 'value': 270, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/056cc9736ff240da9dabd3f1301459f5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/056cc9736ff240da9dabd3f1301459f5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 33 COLUMNS\nAt line 220 RHS\nAt line 249 BOUNDS\nAt line 256 ENDATA\nProblem MODEL has 28 rows, 6 columns and 168 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 331.875 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -270 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                270.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n270.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1638503074645996}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [90, 46, 30, 49, 90, 87]
consumption (rows=resources) = [[6, 22, 12, 26, 30, 1], [22, 16, 17, 26, 5, 11], [25, 23, 6, 2, 32, 15], [5, 2, 27, 1, 6, 28]]
capacity = [118, 127, 112, 107]
upper_bounds = [4, 4, 3, 4, 3, 3]"
1012,mul,4,47450691,41114633,0,47645821,0,"{'ok': True, 'value': 47450691, 'stdout': '47450691\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0819699764251709}",1,Compute: 9929 * 4779
1013,ilp_prod,2,18,33,0,7,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/152347f722154f588b213f31c0bb65a8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/152347f722154f588b213f31c0bb65a8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 10.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16032838821411133}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[2, 1], [3, 2]]
capacity = [10, 7]
upper_bounds = [3, 3]"
1014,ilp_prod,4,44,41,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_eewabdu5/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_eewabdu5/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16008591651916504}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 4, 5]
consumption (rows=resources) = [[3, 1, 1], [4, 4, 1], [4, 1, 2]]
capacity = [15, 13, 16]
upper_bounds = [3, 3, 8]"
1015,lcs,16,8,7,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0781106948852539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baadddccacdcddad""
T = ""bccadaddabcaaaa"""
1016,knap,2,10,11,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08582162857055664}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 5]
V = [4, 1, 10]
C = 5"
1017,ilp_prod,4,56,56,1,48,0,"{'ok': True, 'value': 40, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9ce986e7524847dea52c80552e40a5d1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9ce986e7524847dea52c80552e40a5d1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 40 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -40 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                40.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n40.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1518878936767578}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4, 12]
consumption (rows=resources) = [[1, 2, 4], [2, 1, 1], [1, 1, 2]]
capacity = [12, 11, 15]
upper_bounds = [5, 6, 3]"
1018,sub,8,7606093,7606093,1,7606093,1,"{'ok': True, 'value': 7606093, 'stdout': '7606093\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08130359649658203}",1,Compute: 39285042 - 31678949
1019,ilp_assign,2,9,13,0,13,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36469244956970215}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 4], [6, 3]]"
1020,lcs,16,7,5,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08766484260559082}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbccddbbbbddcbb""
T = ""adcbcacabdaaaadd"""
1021,ilp_prod,4,36,39,0,30,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b8f2bc207a404d698fc6f46ccb796ae3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b8f2bc207a404d698fc6f46ccb796ae3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1704399585723877}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 3, 12]
consumption (rows=resources) = [[4, 4, 4], [4, 3, 4], [3, 1, 1]]
capacity = [15, 14, 10]
upper_bounds = [3, 3, 3]"
1022,ilp_assign,8,21,36,0,1,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/888233a70d864003abf2beaeb933fe04-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/888233a70d864003abf2beaeb933fe04-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 21\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 21 - took 0.00 seconds\nCbc0012I Integer solution of 21 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 21, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 21 to 21\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nMinimum total cost: 21.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17283391952514648}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 15, 3, 23, 13, 2, 1], [23, 7, 12, 7, 4, 23, 2], [16, 7, 2, 22, 6, 11, 2], [22, 17, 9, 7, 7, 14, 17], [3, 19, 6, 9, 2, 5, 1], [23, 2, 19, 18, 7, 24, 6], [11, 5, 6, 23, 13, 19, 1]]"
1023,knap,16,342,108,0,-1,0,"{'ok': True, 'value': 342, 'stdout': '342\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07770562171936035}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 14, 1, 29, 1, 5, 9, 2, 4, 1, 5, 30, 32, 25, 23, 27]
V = [3, 26, 22, 4, 18, 11, 27, 26, 31, 2, 61, 41, 31, 17, 53, 50]
C = 108"
1024,add,16,18349723534446338,9220110533541089,0,18300025634446338,0,"{'ok': True, 'value': 18349723534446338, 'stdout': '18349723534446338\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0821223258972168}",1,Compute: 9588063234773542 + 8761660299672796
1025,rod,4,28,22,0,4,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07720637321472168}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 2, 8, 9]"
1026,add,16,12739042150839951,644141110077002,0,12739042150839951,1,"{'ok': True, 'value': 12739042150839951, 'stdout': '12739042150839951\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08585405349731445}",1,Compute: 6928269795156411 + 5810772355683540
1027,add,4,3651,3651,1,3651,1,"{'ok': True, 'value': 3651, 'stdout': '3651\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08152008056640625}",1,Compute: 1429 + 2222
1028,mul,2,7161,,0,2,0,"{'ok': True, 'value': 7161, 'stdout': '7161\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08433747291564941}",1,Compute: 77 * 93
1029,rod,4,36,24,0,12,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08499813079833984}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 11, 12, 7]"
1030,mul,8,1027644029815512,130464504,0,1024334443924,0,"{'ok': True, 'value': 1027644029815512, 'stdout': '1027644029815512\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0779423713684082}",1,Compute: 28782277 * 35704056
1031,ilp_prod,16,178,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce, which are assumed to be integers. The objective function is the sum of the product of profit[j] and x_j for all j. The constraints are resource constraints, non-negativity, and upper bounds. A linear programming solver can be used to find the optimal solution, and the maximum profit is returned.",0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_lsitdad5/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_lsitdad5/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15386247634887695}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 48, 40, 29, 29, 24]
consumption (rows=resources) = [[2, 4, 1, 1, 9, 13], [4, 12, 7, 14, 3, 16], [5, 7, 2, 4, 12, 12], [4, 16, 10, 11, 1, 15]]
capacity = [33, 43, 32, 35]
upper_bounds = [6, 3, 3, 3, 3, 3]"
1032,sub,8,61663589,61663589,1,61663589,1,"{'ok': True, 'value': 61663589, 'stdout': '61663589\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0864570140838623}",1,Compute: 76902887 - 15239298
1033,ilp_prod,8,85,60,0,4,0,"{'ok': True, 'value': 17, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bf639c03fbbb422ca31e29a6b9f90ba7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bf639c03fbbb422ca31e29a6b9f90ba7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 17 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -17 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                17.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n17.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1607038974761963}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 16, 10, 17]
consumption (rows=resources) = [[2, 7, 7, 4], [4, 3, 1, 3], [8, 6, 6, 2], [5, 4, 6, 5]]
capacity = [16, 24, 29, 30]
upper_bounds = [3, 3, 3, 4]"
1034,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0868368148803711}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdb""
T = ""adbbb"""
1035,rod,16,180,45,0,65,0,"{'ok': True, 'value': 180, 'stdout': '180\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08513498306274414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [3, 22, 15, 45, 26, 8, 28, 21, 4, 17, 34, 8, 13, 10, 3, 26]"
1036,ilp_partition,2,0,1,0,8,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07466244697570801}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 5, 2]"
1037,knap,32,1570,1024,0,18,0,"{'ok': True, 'value': 1570, 'stdout': '1570\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0823667049407959}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 16, 44, 56, 9, 53, 26, 50, 37, 13, 24, 59, 32, 18, 18, 40, 20, 49, 11, 10, 30, 33, 30, 16, 30, 54, 1, 63, 33, 48, 2, 19]
V = [11, 118, 16, 99, 75, 38, 95, 111, 28, 38, 114, 105, 27, 18, 92, 25, 78, 37, 15, 36, 33, 117, 14, 48, 13, 73, 110, 79, 112, 22, 7, 121]
C = 481"
1038,lcs,32,17,10,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0931088924407959}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdcbdccdacbccddacbdaadaccddacbb""
T = ""aabacacdabddbaddbdccccabcaccbba"""
1039,ilp_prod,16,270,The final answer is the maximum profit we can achieve.,0,240,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_qmohhuz8/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_qmohhuz8/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14245820045471191}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [45, 7, 12, 44, 13, 33]
consumption (rows=resources) = [[4, 10, 9, 13, 11, 4], [3, 4, 5, 12, 3, 4], [8, 11, 2, 7, 8, 12], [5, 3, 5, 4, 8, 5]]
capacity = [44, 62, 48, 57]
upper_bounds = [6, 4, 4, 3, 4, 4]"
1040,ilp_assign,8,18,56,0,46,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3711390495300293}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 15, 13, 13, 12, 22, 12], [16, 20, 20, 1, 21, 9, 24], [3, 22, 2, 13, 14, 12, 23], [13, 6, 10, 21, 7, 20, 3], [10, 1, 14, 2, 15, 1, 13], [7, 18, 20, 16, 9, 1, 20], [23, 24, 7, 8, 22, 21, 5]]"
1041,ilp_partition,4,1,1,1,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_or3ssupp/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_or3ssupp/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07848787307739258}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 12, 5]"
1042,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08715152740478516}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caad""
T = ""cbdb"""
1043,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0802760124206543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbaacaaabbacbba""
T = ""dcddbcbdbdbacbdb"""
1044,ilp_assign,32,117,145,0,209,0,"{'ok': True, 'value': 117, 'stdout': '117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36662769317626953}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[90, 19, 90, 52, 76, 39, 53], [6, 17, 36, 65, 8, 30, 76], [79, 25, 16, 72, 84, 68, 30], [25, 41, 89, 11, 53, 78, 45], [87, 33, 2, 48, 17, 40, 29], [77, 9, 47, 91, 69, 56, 32], [84, 17, 31, 65, 20, 88, 92]]"
1045,add,16,15109264646353908,15109315035293048,0,15109264646353908,1,"{'ok': True, 'value': 15109264646353908, 'stdout': '15109264646353908\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07724666595458984}",1,Compute: 5655099914872183 + 9454164731481725
1046,sub,16,2232987683117459,2232987673118459,0,2232987683117459,1,"{'ok': True, 'value': 2232987683117459, 'stdout': '2232987683117459\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07394838333129883}",1,Compute: 9735117175007999 - 7502129491890540
1047,rod,16,752,1,0,155,0,"{'ok': True, 'value': 752, 'stdout': '752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07644009590148926}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [47, 17, 43, 4, 16, 1, 35, 19, 6, 5, 39, 20, 45, 15, 30, 9]"
1048,knap,16,448,141,0,0,0,"{'ok': True, 'value': 448, 'stdout': '448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08447909355163574}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 31, 6, 24, 12, 25, 16, 6, 17, 3, 27, 10, 18, 28, 15, 21]
V = [56, 28, 14, 28, 47, 64, 21, 41, 49, 15, 30, 52, 55, 60, 51, 37]
C = 141"
1049,add,2,145,145,1,145,1,"{'ok': True, 'value': 145, 'stdout': '145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08446311950683594}",1,Compute: 60 + 85
1050,ilp_prod,4,44,41,0,32,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b7b45a2abbee46d18f9d71aa136ad05c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b7b45a2abbee46d18f9d71aa136ad05c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 31 RHS\nAt line 36 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17451953887939453}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3, 11]
consumption (rows=resources) = [[1, 1, 3], [2, 2, 2], [4, 4, 3]]
capacity = [14, 13, 15]
upper_bounds = [3, 3, 4]"
1051,ilp_assign,32,115,187,0,208,0,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43125200271606445}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[93, 20, 34, 85, 17, 9, 29], [85, 23, 11, 33, 70, 76, 74], [48, 95, 96, 84, 17, 68, 57], [19, 96, 17, 93, 50, 15, 9], [83, 15, 76, 66, 31, 25, 85], [33, 41, 8, 32, 9, 59, 51], [24, 96, 41, 84, 7, 77, 50]]"
1052,rod,4,24,24,1,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07578873634338379}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 3, 4, 4]"
1053,mul,16,16616102460155344375902123258423,1654894058848248553485693,0,1653587352082588444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 16616102460155344375902123258423, 'stdout': '16616102460155344375902123258423\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08076000213623047}",1,Compute: 2470423802385693 * 6726012939200611
1054,rod,16,320,54,0,65,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07528972625732422}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [12, 40, 35, 47, 33, 13, 19, 40, 1, 47, 18, 15, 34, 8, 25, 28]"
1055,sub,8,9612197,9612207,0,9612207,0,"{'ok': True, 'value': 9612197, 'stdout': '9612197\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07602643966674805}",1,Compute: 20623544 - 11011347
1056,mul,32,7361087749112129616908195926055060014401288223155829434507340936,142400,0,98290997382413662300457325315032,0,"{'ok': True, 'value': 7361087749112129616908195926055060014401288223155829434507340936, 'stdout': '7361087749112129616908195926055060014401288223155829434507340936\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08039307594299316}",1,Compute: 74890762584012438338395718081123 * 98290997382413662300457325315032
1057,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38480520248413086}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [1, 1]]"
1058,ilp_prod,4,24,35,0,12,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0f4117549147467ab0d81bc7b182d7c9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0f4117549147467ab0d81bc7b182d7c9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19207358360290527}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 4, 5]
consumption (rows=resources) = [[4, 3, 4], [4, 4, 1], [4, 2, 4]]
capacity = [10, 8, 12]
upper_bounds = [3, 3, 3]"
1059,lcs,2,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07752704620361328}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""bb"""
1060,ilp_partition,8,0,1,0,18,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06806659698486328}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 15, 2, 23, 6, 9, 22, 18]"
1061,sub,2,9,54,0,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08324551582336426}",1,Compute: 63 - 54
1062,mul,8,1204094106610983,34504,0,1200000000000,0,"{'ok': True, 'value': 1204094106610983, 'stdout': '1204094106610983\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07526826858520508}",1,Compute: 22157461 * 54342603
1063,mul,32,656444129926897378839563233338603457058180240621497782257869985,7,0,6616649462435655474669738580701504585565,0,"{'ok': True, 'value': 656444129926897378839563233338603457058180240621497782257869985, 'stdout': '656444129926897378839563233338603457058180240621497782257869985\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07573246955871582}",1,Compute: 56842342231333104969788538470035 * 11548505993214453226910532328571
1064,sub,2,28,28,1,28,1,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07557511329650879}",1,Compute: 64 - 36
1065,knap,2,10,15,0,2,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12812304496765137}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 2]
V = [5, 5, 5]
C = 4"
1066,ilp_assign,2,10,10,1,15,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39468979835510254}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [6, 4]]"
1067,ilp_prod,8,63,105,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_zi7qwy7d/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_zi7qwy7d/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14356040954589844}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 7, 20, 21]
consumption (rows=resources) = [[7, 3, 3, 3], [6, 1, 6, 1], [8, 8, 2, 1], [8, 3, 7, 5]]
capacity = [17, 17, 32, 17]
upper_bounds = [3, 4, 3, 3]"
1068,ilp_partition,2,0,0,1,2,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08574819564819336}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 3, 1]"
1069,knap,4,11,11,1,3,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07749533653259277}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 5, 3]
V = [1, 2, 3, 8]
C = 8"
1070,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tm9y2oa4/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_tm9y2oa4/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08540844917297363}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 2]"
1071,add,16,10489454624678901,3133163310,0,10489454634678901,0,"{'ok': True, 'value': 10489454624678901, 'stdout': '10489454624678901\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09467363357543945}",1,Compute: 5472169312156389 + 5017285312522512
1072,ilp_prod,4,16,40,0,24,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c972e0ee13e24890b23b63b24d82c0ee-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c972e0ee13e24890b23b63b24d82c0ee-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16297340393066406}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8, 3]
consumption (rows=resources) = [[3, 3, 2], [2, 4, 3], [4, 2, 4]]
capacity = [14, 8, 16]
upper_bounds = [4, 3, 3]"
1073,mul,4,79484672,79165888,0,79534688,0,"{'ok': True, 'value': 79484672, 'stdout': '79484672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09538602828979492}",1,Compute: 9896 * 8032
1074,rod,16,768,164,0,64,0,"{'ok': True, 'value': 768, 'stdout': '768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07890200614929199}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [48, 7, 26, 47, 3, 15, 4, 29, 11, 36, 41, 37, 33, 4, 16, 3]"
1075,ilp_prod,16,211,148,0,5,0,"{'ok': True, 'value': 94, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4d0b8312dfd54cca9b2b8f37d2997e8a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4d0b8312dfd54cca9b2b8f37d2997e8a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 25 COLUMNS\nAt line 164 RHS\nAt line 185 BOUNDS\nAt line 192 ENDATA\nProblem MODEL has 20 rows, 6 columns and 120 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 128.467 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -94 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                94.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n94.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15666699409484863}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [47, 43, 31, 13, 30, 22]
consumption (rows=resources) = [[9, 7, 6, 8, 4, 13], [1, 16, 5, 13, 10, 8], [12, 5, 6, 14, 15, 12], [5, 16, 10, 9, 14, 15]]
capacity = [59, 53, 41, 55]
upper_bounds = [3, 3, 5, 3, 3, 3]"
1076,add,8,33737385,33737385,1,33737385,1,"{'ok': True, 'value': 33737385, 'stdout': '33737385\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08916306495666504}",1,Compute: 11003621 + 22733764
1077,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07799649238586426}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccba""
T = ""dab"""
1078,rod,4,24,24,1,11,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08179545402526855}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 2, 4, 11]"
1079,rod,2,12,6,0,8,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07644248008728027}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
1080,ilp_assign,2,6,9,0,7,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36888837814331055}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4], [6, 3]]"
1081,ilp_prod,2,27,35,0,14,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a21ddefbc77b464b8f82a42be1be94e9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a21ddefbc77b464b8f82a42be1be94e9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15502643585205078}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5]
consumption (rows=resources) = [[1, 2], [2, 1]]
capacity = [10, 6]
upper_bounds = [3, 5]"
1082,lcs,16,7,7,1,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07850217819213867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadadbdabccccbda""
T = ""bcddcbbbbbcaacbb"""
1083,add,4,14963,15003,0,15163,0,"{'ok': True, 'value': 14963, 'stdout': '14963\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07446622848510742}",1,Compute: 7798 + 7165
1084,ilp_prod,16,127,155,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_j2s9emuz/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_j2s9emuz/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1646711826324463}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 35, 46, 20, 32, 12]
consumption (rows=resources) = [[6, 16, 8, 4, 5, 11], [7, 10, 14, 14, 14, 6], [15, 8, 1, 13, 1, 7], [6, 5, 15, 7, 10, 15]]
capacity = [43, 44, 49, 43]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1085,ilp_assign,4,18,12,0,21,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38422679901123047}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1, 7, 10], [10, 4, 3, 9], [10, 8, 3, 6], [10, 7, 9, 10]]"
1086,rod,16,720,65,0,45,0,"{'ok': True, 'value': 720, 'stdout': '720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07598876953125}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [45, 18, 38, 31, 38, 34, 39, 18, 34, 6, 43, 23, 21, 48, 41, 26]"
1087,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09420037269592285}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""ac"""
1088,rod,8,112,22,0,30,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07977008819580078}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 13, 6, 10, 18, 23, 13, 7]"
1089,rod,32,2496,1055,0,1,0,"{'ok': True, 'value': 2496, 'stdout': '2496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07404208183288574}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [78, 86, 12, 15, 69, 45, 96, 71, 82, 55, 18, 48, 67, 1, 59, 56, 68, 77, 19, 34, 8, 61, 22, 9, 70, 36, 19, 28, 85, 20, 1, 80]"
1090,ilp_prod,4,40,43,0,42,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bb08c58c43c34f398c444e131ceed3c8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bb08c58c43c34f398c444e131ceed3c8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 40 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -36 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16953492164611816}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 8, 3]
consumption (rows=resources) = [[4, 3, 2], [2, 3, 1], [1, 4, 2]]
capacity = [14, 10, 10]
upper_bounds = [3, 3, 5]"
1091,sub,16,2182755371877121,2182755371877121,1,2182755371877121,1,"{'ok': True, 'value': 2182755371877121, 'stdout': '2182755371877121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08667659759521484}",1,Compute: 3511883193622511 - 1329127821745390
1092,ilp_prod,2,14,28,0,8,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d502270d783e40078637092ca712f097-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d502270d783e40078637092ca712f097-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.2 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -7 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                7.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 7.0\nProduct_0: 1.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16439008712768555}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4]
consumption (rows=resources) = [[3, 3], [2, 3]]
capacity = [6, 8]
upper_bounds = [3, 3]"
1093,rod,16,160,64,0,64,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07498288154602051}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [10, 16, 24, 13, 29, 20, 37, 10, 39, 36, 42, 42, 40, 29, 26, 30]"
1094,lcs,16,7,7,1,16,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08030223846435547}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbdbaaddddbdcabc""
T = ""cccaabcabdddbbd"""
1095,ilp_partition,8,1,1,1,19,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07688379287719727}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 17, 18, 6, 6, 21, 7, 19]"
1096,ilp_assign,4,18,15,0,28,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39214253425598145}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 11, 10, 4], [7, 5, 11, 3], [1, 1, 8, 7], [9, 11, 11, 2]]"
1097,lcs,32,18,15,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08164548873901367}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddbcbbdaabdcacdabaabcccdaacaabc""
T = ""cdcbadadcbbaccbdcbbdbdcdbbdabcca"""
1098,knap,4,22,26,0,-1,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08057284355163574}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 4, 1]
V = [6, 16, 12, 6]
C = 5"
1099,ilp_partition,8,0,1,0,50,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21318769454956055}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 20, 20, 9, 24, 6, 2, 1]"
1100,rod,16,704,48,0,65,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07529711723327637}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 21, 10, 34, 21, 12, 31, 48, 3, 36, 22, 14, 8, 46, 9, 40]"
1101,ilp_assign,16,85,105,0,114,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37777280807495117}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 10, 14, 20, 45, 27, 20], [12, 3, 22, 14, 15, 38, 31], [42, 37, 11, 36, 4, 41, 33], [37, 30, 41, 26, 39, 26, 3], [46, 18, 6, 38, 46, 7, 22], [37, 34, 26, 44, 48, 20, 27], [35, 32, 40, 30, 21, 46, 25]]"
1102,mul,4,8528256,182,0,8578176,0,"{'ok': True, 'value': 8528256, 'stdout': '8528256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08662939071655273}",1,Compute: 3168 * 2692
1103,add,16,13455487937356817,14855581004553485,0,13455487937356817,1,"{'ok': True, 'value': 13455487937356817, 'stdout': '13455487937356817\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09144806861877441}",1,Compute: 6204075604553485 + 7251412332803332
1104,ilp_partition,4,2,1,0,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08690881729125977}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 7, 12, 2]"
1105,ilp_partition,8,0,12,0,8,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09258818626403809}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 7, 11, 13, 12, 6, 15, 12]"
1106,knap,8,84,110,0,0,0,"{'ok': True, 'value': 84, 'stdout': '84\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07702398300170898}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 1, 10, 14, 3, 6, 1, 13]
V = [19, 10, 19, 9, 11, 20, 15, 20]
C = 27"
1107,ilp_prod,2,49,70,0,24,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c4e7fdb6bca7492b879ad4b788dd4e90-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c4e7fdb6bca7492b879ad4b788dd4e90-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 18.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16414880752563477}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7]
consumption (rows=resources) = [[2, 1], [2, 1]]
capacity = [7, 10]
upper_bounds = [3, 7]"
1108,mul,16,9872100118342476331483618654620,8003434343432862,0,5556640618574490,0,"{'ok': True, 'value': 9872100118342476331483618654620, 'stdout': '9872100118342476331483618654620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0995182991027832}",1,Compute: 1886213672824830 * 5233818554372914
1109,sub,32,26236673554995326446585559047108,-26236783545004226447085599047108,0,26236673554995326446585559047108,1,"{'ok': True, 'value': 26236673554995326446585559047108, 'stdout': '26236673554995326446585559047108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08574724197387695}",1,Compute: 47329361388495884685091226358054 - 21092687833500558238505667310946
1110,rod,32,2304,1050,0,72,0,"{'ok': True, 'value': 2304, 'stdout': '2304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07624578475952148}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [72, 25, 59, 6, 42, 8, 51, 24, 13, 96, 29, 60, 87, 63, 94, 30, 3, 48, 40, 26, 8, 3, 53, 3, 91, 61, 23, 50, 29, 48, 48, 72]"
1111,mul,8,2366895775475948,45437,0,2368434596968,0,"{'ok': True, 'value': 2366895775475948, 'stdout': '2366895775475948\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08723711967468262}",1,Compute: 43781924 * 54061027
1112,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07366204261779785}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacd""
T = ""ccc"""
1113,knap,2,5,11,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08470320701599121}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 4]
V = [4, 5, 4]
C = 5"
1114,ilp_assign,4,18,18,1,28,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3705918788909912}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 7, 3, 11], [3, 4, 10, 2], [12, 6, 6, 9], [8, 3, 7, 11]]"
1115,rod,16,448,64,0,64,0,"{'ok': True, 'value': 448, 'stdout': '448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09217143058776855}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [28, 4, 21, 9, 33, 8, 15, 33, 16, 37, 5, 23, 48, 10, 15, 17]"
1116,add,4,4509,4509,1,4509,1,"{'ok': True, 'value': 4509, 'stdout': '4509\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07790732383728027}",1,Compute: 1689 + 2820
1117,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09019780158996582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""bba"""
1118,ilp_partition,8,1,1,1,5,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0918276309967041}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 14, 11, 22, 1, 11, 6, 5]"
1119,ilp_prod,8,92,105,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_cq9lay9g/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_cq9lay9g/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16692519187927246}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 8, 23, 7]
consumption (rows=resources) = [[1, 8, 6, 3], [4, 5, 1, 7], [8, 8, 1, 3], [7, 8, 6, 5]]
capacity = [24, 21, 27, 32]
upper_bounds = [3, 3, 4, 3]"
1120,mul,8,1469733827470271,1458433646844461,0,1463643440444111,0,"{'ok': True, 'value': 1469733827470271, 'stdout': '1469733827470271\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0918121337890625}",1,Compute: 20638153 * 71214407
1121,mul,2,5110,70,0,5110,1,"{'ok': True, 'value': 5110, 'stdout': '5110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07571792602539062}",1,Compute: 73 * 70
1122,mul,4,27560752,11813760,0,2784552,0,"{'ok': True, 'value': 27560752, 'stdout': '27560752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08262228965759277}",1,Compute: 4688 * 5879
1123,knap,32,1350,127,0,57,0,"{'ok': True, 'value': 1350, 'stdout': '1350\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08166766166687012}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [54, 30, 24, 61, 21, 59, 14, 34, 50, 16, 14, 53, 9, 45, 26, 56, 57, 33, 57, 7, 60, 43, 6, 53, 25, 45, 41, 30, 39, 51, 54, 23]
V = [1, 41, 10, 15, 49, 38, 80, 69, 10, 14, 72, 22, 15, 88, 52, 19, 126, 14, 85, 69, 30, 113, 82, 48, 57, 53, 20, 58, 52, 27, 39, 127]
C = 595"
1124,sub,8,2520853,2520853,1,2520853,1,"{'ok': True, 'value': 2520853, 'stdout': '2520853\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0738668441772461}",1,Compute: 43312393 - 40791540
1125,ilp_assign,16,61,105,0,114,0,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3664097785949707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 42, 24, 10, 32, 21, 29], [23, 1, 12, 3, 34, 43, 7], [28, 10, 27, 21, 19, 41, 37], [11, 11, 32, 28, 4, 12, 41], [9, 23, 48, 8, 26, 27, 19], [38, 22, 12, 26, 18, 31, 27], [15, 15, 26, 38, 16, 9, 42]]"
1126,lcs,16,7,6,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08053708076477051}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acddcdabbcddacdd""
T = ""dbbbacbdaacacbb"""
1127,sub,8,23732815,23732815,1,23732815,1,"{'ok': True, 'value': 23732815, 'stdout': '23732815\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08945417404174805}",1,Compute: 40861464 - 17128649
1128,add,32,125923456217675589447774743080147,125923456227675589447774743079147,0,125923456217675589447574743079847,0,"{'ok': True, 'value': 125923456217675589447774743080147, 'stdout': '125923456217675589447774743080147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0904088020324707}",1,Compute: 90477995986070281854642796406284 + 35445460231605307593131946673863
1129,ilp_prod,2,16,21,0,14,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8d703c8dd8e04f1da859f0d50c045f0d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8d703c8dd8e04f1da859f0d50c045f0d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15374040603637695}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[2, 3], [1, 3]]
capacity = [8, 7]
upper_bounds = [4, 3]"
1130,sub,4,5142,5142,1,5142,1,"{'ok': True, 'value': 5142, 'stdout': '5142\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0942833423614502}",1,Compute: 9258 - 4116
1131,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08475446701049805}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacbcabbabccddbbdbccddbadbadabcb""
T = ""cbcbdcccccadcbdaddacdbadacbcdbaa"""
1132,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08424043655395508}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""aa"""
1133,knap,16,434,119,0,0,0,"{'ok': True, 'value': 434, 'stdout': '434\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08839678764343262}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 29, 29, 23, 32, 19, 25, 20, 8, 1, 4, 2, 10, 2, 17, 11]
V = [6, 63, 56, 53, 41, 51, 28, 20, 4, 54, 44, 52, 30, 31, 28, 17]
C = 119"
1134,lcs,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08267593383789062}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""cd"""
1135,lcs,16,12,7,0,0,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0874481201171875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbcbddbdccccbca""
T = ""bbcbcbbdbccdcbcc"""
1136,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08681011199951172}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [29, 36, 93, 5, 12, 89, 64, 66, 94, 40, 17, 58, 75, 4, 95, 51, 63, 25, 38, 93, 69, 25, 94, 57]"
1137,rod,32,1536,1055,0,48,0,"{'ok': True, 'value': 1536, 'stdout': '1536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08590221405029297}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [48, 45, 5, 72, 66, 61, 3, 57, 41, 41, 32, 96, 91, 50, 16, 34, 57, 75, 27, 83, 78, 14, 30, 7, 94, 3, 47, 2, 65, 45, 80, 86]"
1138,knap,8,66,147,0,0,0,"{'ok': True, 'value': 66, 'stdout': '66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07628226280212402}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 7, 8, 8, 12, 14, 4, 3]
V = [2, 15, 22, 16, 13, 11, 6, 11]
C = 28"
1139,knap,2,8,10,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07382440567016602}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 5]
V = [4, 4, 6]
C = 5"
1140,mul,4,8707545,7610,0,8691585,0,"{'ok': True, 'value': 8707545, 'stdout': '8707545\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07496285438537598}",1,Compute: 5385 * 1617
1141,lcs,32,20,15,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07811093330383301}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdbdaaadadbddcdbadabcddbaacdcda""
T = ""bacadcacdadbadcbcbdaacdddbdbbcdbc"""
1142,mul,4,22329230,22416,0,22439390,0,"{'ok': True, 'value': 22329230, 'stdout': '22329230\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07659459114074707}",1,Compute: 6170 * 3619
1143,ilp_assign,16,64,105,0,105,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39484572410583496}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 41, 32, 7, 37, 32, 18], [10, 12, 2, 4, 39, 3, 32], [12, 24, 15, 36, 14, 2, 36], [35, 35, 18, 38, 45, 15, 32], [38, 35, 3, 7, 6, 21, 29], [31, 16, 28, 14, 2, 9, 46], [13, 11, 18, 2, 24, 30, 19]]"
1144,ilp_assign,32,129,187,0,209,0,"{'ok': True, 'value': 129, 'stdout': '129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36720895767211914}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[38, 55, 41, 45, 68, 32, 29], [77, 46, 18, 20, 49, 74, 96], [15, 21, 26, 68, 39, 13, 94], [76, 3, 61, 62, 94, 33, 22], [61, 90, 54, 38, 60, 88, 15], [84, 36, 37, 46, 25, 65, 36], [23, 46, 83, 21, 10, 12, 25]]"
1145,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09296584129333496}",1,Compute: 54 - 33
1146,ilp_assign,8,29,36,0,73,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3786766529083252}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 18, 2, 21, 7, 11, 3], [14, 9, 23, 22, 8, 2, 10], [4, 10, 19, 5, 14, 12, 17], [3, 10, 3, 15, 16, 6, 8], [19, 1, 18, 1, 7, 7, 11], [20, 3, 19, 13, 14, 17, 21], [13, 22, 19, 11, 13, 15, 10]]"
1147,lcs,32,18,16,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0918736457824707}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdaacbbabaacbaddbadbaddcaccdcaa""
T = ""bcdaaadbadccdbcbbcacdbccacaddcc"""
1148,ilp_prod,4,20,30,0,30,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/19fb37c757b74c5b97b808643a2ea3fc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/19fb37c757b74c5b97b808643a2ea3fc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15451359748840332}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 10, 7]
consumption (rows=resources) = [[2, 3, 4], [4, 4, 4], [2, 3, 1]]
capacity = [9, 10, 15]
upper_bounds = [3, 3, 3]"
1149,rod,32,2112,1050,0,5,0,"{'ok': True, 'value': 2112, 'stdout': '2112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07561063766479492}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [66, 64, 54, 63, 5, 45, 4, 41, 59, 76, 61, 81, 54, 39, 47, 96, 62, 66, 12, 22, 84, 38, 55, 71, 31, 23, 58, 74, 15, 47, 79, 47]"
1150,rod,8,168,35,0,1,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07847738265991211}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 20, 11, 21, 23, 7, 20, 15]"
1151,ilp_assign,16,46,115,0,115,0,"{'ok': True, 'value': 46, 'stdout': '46\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40446043014526367}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 11, 41, 5, 23, 10, 46], [41, 44, 37, 38, 9, 7, 45], [32, 42, 7, 10, 32, 47, 4], [14, 15, 20, 8, 47, 9, 36], [5, 8, 16, 34, 34, 1, 12], [7, 28, 7, 20, 19, 43, 19], [6, 31, 41, 11, 30, 36, 23]]"
1152,sub,8,3237968,3237968,1,3237968,1,"{'ok': True, 'value': 3237968, 'stdout': '3237968\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08008790016174316}",1,Compute: 92902900 - 89664932
1153,rod,16,608,64,0,392,0,"{'ok': True, 'value': 608, 'stdout': '608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07530927658081055}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [38, 8, 36, 21, 16, 33, 14, 30, 30, 10, 22, 4, 28, 8, 15, 7]"
1154,knap,8,88,164,0,0,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08049154281616211}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 11, 8, 15, 3, 7, 2, 15]
V = [9, 6, 31, 5, 4, 10, 32, 9]
C = 32"
1155,sub,4,56,56,1,-56,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07711338996887207}",1,Compute: 5234 - 5178
1156,ilp_partition,4,1,1,1,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07764458656311035}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 4, 9, 1]"
1157,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07611346244812012}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcda""
T = ""ccb"""
1158,ilp_assign,16,62,105,0,115,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3976633548736572}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 4, 17, 40, 10, 17, 21], [33, 46, 34, 26, 33, 14, 1], [26, 7, 30, 35, 32, 7, 19], [23, 7, 44, 26, 34, 23, 19], [41, 31, 40, 36, 12, 10, 16], [40, 35, 29, 10, 39, 37, 28], [34, 16, 5, 9, 28, 24, 4]]"
1159,lcs,8,4,4,1,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08742427825927734}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddddccdb""
T = ""dccddac"""
1160,sub,8,34631676,34631676,1,34631676,1,"{'ok': True, 'value': 34631676, 'stdout': '34631676\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0751187801361084}",1,Compute: 62573237 - 27941561
1161,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0771799087524414}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""c"""
1162,add,4,12976,12976,1,12976,1,"{'ok': True, 'value': 12976, 'stdout': '12976\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0758213996887207}",1,Compute: 3286 + 9690
1163,lcs,4,3,3,1,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07517004013061523}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abac""
T = ""bacd"""
1164,knap,2,16,16,1,9,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07229256629943848}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 1]
V = [9, 6, 10]
C = 3"
1165,knap,2,10,19,0,8,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09418320655822754}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 2]
V = [8, 10, 9]
C = 4"
1166,sub,4,3168,3168,1,3168,1,"{'ok': True, 'value': 3168, 'stdout': '3168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07243132591247559}",1,Compute: 6506 - 3338
1167,mul,4,25482672,22212,0,25441632,0,"{'ok': True, 'value': 25482672, 'stdout': '25482672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07469749450683594}",1,Compute: 7836 * 3252
1168,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0863800048828125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""b"""
1169,ilp_partition,16,0,1,0,33,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20653057098388672}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 34, 33, 39, 38, 45, 16, 3, 10, 30, 10, 22, 16, 12, 40, 24]"
1170,mul,2,1890,1890,1,1890,1,"{'ok': True, 'value': 1890, 'stdout': '1890\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08848118782043457}",1,Compute: 30 * 63
1171,ilp_prod,2,12,13,0,10,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f9bb1dbeb6154807bac44a8266bf935d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f9bb1dbeb6154807bac44a8266bf935d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 12.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17285823822021484}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[2, 3], [2, 1]]
capacity = [6, 10]
upper_bounds = [3, 3]"
1172,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08576703071594238}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccddcadccbdacbdc""
T = ""bbcdcaadcacbaaa"""
1173,add,32,76174287183612070293594932639178,76174253173612070293594932649178,0,76174287183612069993594932639178,0,"{'ok': True, 'value': 76174287183612070293594932639178, 'stdout': '76174287183612070293594932639178\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09668231010437012}",1,Compute: 51247692359214910760748414583476 + 24926594824397159532846518055702
1174,lcs,32,20,16,0,1,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10365128517150879}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabbbcbcaaaabbacdcdadbddadccaaba""
T = ""caaabacbadacccdbdabcbcddddadccda"""
1175,lcs,32,21,16,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08235001564025879}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcabadabdccaddcbcddbabdbccdcbbc""
T = ""ddbddbdbaaccdccdbdacdbabccabbdbdc"""
1176,rod,32,512,1050,0,65,0,"{'ok': True, 'value': 512, 'stdout': '512\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07763409614562988}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [4, 32, 38, 2, 65, 11, 78, 46, 88, 51, 22, 59, 90, 85, 20, 42, 27, 93, 18, 39, 53, 62, 75, 43, 26, 19, 11, 2, 12, 93, 92, 65]"
1177,rod,32,1296,1055,0,659,0,"{'ok': True, 'value': 1296, 'stdout': '1296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07694768905639648}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [33, 81, 50, 65, 47, 71, 43, 63, 11, 53, 40, 63, 46, 31, 54, 93, 76, 30, 74, 43, 53, 93, 12, 35, 95, 85, 70, 72, 13, 22, 5, 58]"
1178,ilp_partition,4,1,0,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08075785636901855}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 6, 7, 4]"
1179,ilp_partition,16,0,1,0,34,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19038057327270508}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [43, 31, 34, 28, 48, 12, 24, 7, 17, 28, 16, 15, 22, 15, 34, 34]"
1180,add,16,5950313312856840,6650313312856898,0,5950312312856840,0,"{'ok': True, 'value': 5950313312856840, 'stdout': '5950313312856840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08794116973876953}",1,Compute: 2631746251545499 + 3318567061311341
1181,add,4,10441,10441,1,10441,1,"{'ok': True, 'value': 10441, 'stdout': '10441\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07671117782592773}",1,Compute: 8569 + 1872
1182,ilp_partition,8,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07900452613830566}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 8, 22, 23, 5, 12, 11, 18]"
1183,ilp_prod,8,61,84,0,3,0,"{'ok': True, 'value': 9, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/dd91dd90dbc640f8a3da61079adf435a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/dd91dd90dbc640f8a3da61079adf435a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n9.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15021634101867676}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 12, 20, 12]
consumption (rows=resources) = [[3, 2, 3, 2], [3, 3, 7, 3], [4, 7, 5, 6], [3, 4, 7, 6]]
capacity = [16, 23, 21, 25]
upper_bounds = [5, 3, 3, 3]"
1184,lcs,16,11,7,0,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07764601707458496}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacddcabdbabacdc""
T = ""adaccdaaabaccdca"""
1185,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0810708999633789}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 3]"
1186,sub,16,2215800483457374,-100000000000,0,-2215800483457374,0,"{'ok': True, 'value': 2215800483457374, 'stdout': '2215800483457374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08761787414550781}",1,Compute: 3418680772605336 - 1202880289147962
1187,mul,2,3196,3236,0,3236,0,"{'ok': True, 'value': 3196, 'stdout': '3196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0766289234161377}",1,Compute: 47 * 68
1188,add,32,145115945661444845600859777650809,145115945667444845601460401610910,0,145115945661444845590860017650809,0,"{'ok': True, 'value': 145115945661444845600859777650809, 'stdout': '145115945661444845600859777650809\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07600736618041992}",1,Compute: 96324287993967683658687569273995 + 48791657667477161942172208376814
1189,add,32,63228542023858772203482928576761,63228542023858772203482928576761,1,63228542023858772203483928076761,0,"{'ok': True, 'value': 63228542023858772203482928576761, 'stdout': '63228542023858772203482928576761\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08805561065673828}",1,Compute: 38413533835508834577886896532217 + 24815008188349937625596032044544
1190,mul{'ok': True, 'value': 5736311184383159180171573572349464075747827652265287597304418590, 'stdout': '5736311184383159180171573572349464075747827652265287597304418590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08969306945800781}",1,Compute: 91971467741876178607408570228745 * 62370551707215158609865481892782
1191,mul,2,5576,5576,1,5496,0,"{'ok': True, 'value': 5576, 'stdout': '5576\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07642650604248047}",1,Compute: 82 * 68
1192,sub,8,42641094,42641094,1,42641094,1,"{'ok': True, 'value': 42641094, 'stdout': '42641094\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08719515800476074}",1,Compute: 89985713 - 47344619
1193,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07761073112487793}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""ddc"""
1194,ilp_prod,32,501,1004,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [68, 28, 87, 80, 86, 44]
consumption (rows=resources) = [[14, 23, 27, 8, 30, 31], [14, 15, 9, 24, 29, 15], [32, 3, 23, 4, 18, 22], [20, 32, 24, 10, 10, 19]]
capacity = [124, 106, 86, 111]
upper_bounds = [3, 3, 3, 4, 3, 3]"
1195,mul,32,1528120505684285142777817984432948553461829221771886404372786122,124363500000000000000000000000000,0,153006843339245888446631244864466644466666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 1528120505684285142777817984432948553461829221771886404372786122, 'stdout': '1528120505684285142777817984432948553461829221771886404372786122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08915114402770996}",1,Compute: 22063450438858612626719708106649 * 69260268692739336510310169407578
1196,add,8,74338390,74338390,1,74338390,1,"{'ok': True, 'value': 74338390, 'stdout': '74338390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07524418830871582}",1,Compute: 47794196 + 26544194
1197,ilp_partition,4,2,1,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0874948501586914}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 10, 7, 4]"
1198,sub,16,31892568525201,3189256695252,0,31892568524201,0,"{'ok': True, 'value': 31892568525201, 'stdout': '31892568525201\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08995676040649414}",1,Compute: 3694473507222362 - 3662580938697161
1199,knap,32,1467,1645,0,5,0,"{'ok': True, 'value': 1467, 'stdout': '1467\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08413195610046387}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [39, 13, 52, 43, 22, 10, 15, 35, 18, 31, 14, 11, 9, 58, 2, 26, 1, 42, 37, 54, 16, 47, 18, 47, 27, 35, 7, 4, 13, 24, 45, 13]
V = [4, 33, 80, 24, 111, 6, 18, 65, 126, 59, 87, 89, 62, 13, 67, 71, 24, 105, 95, 58, 31, 98, 104, 72, 66, 96, 9, 1, 21, 82, 50, 52]
C = 414"
1200,mul,16,48729683085581776096562736172778,4876346404565554509813351,0,48810106868888544444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 48729683085581776096562736172778, 'stdout': '48729683085581776096562736172778\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07524752616882324}",1,Compute: 7987395628468513 * 6100822514900906
1201,knap,8,70,100,0,7,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08252835273742676}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 12, 7, 14, 7, 8, 14, 7]
V = [27, 25, 3, 11, 1, 14, 7, 4]
C = 39"
1202,add,4,10222,10222,1,10222,1,"{'ok': True, 'value': 10222, 'stdout': '10222\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08002471923828125}",1,Compute: 1354 + 8868
1203,mul,16,61079530691906946868548698592642,5854752545567548868651111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,0,5974544434555548354644444444,0,"{'ok': True, 'value': 61079530691906946868548698592642, 'stdout': '61079530691906946868548698592642\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834047794342041}",1,Compute: 8878720818159334 * 6879316507731963
1204,ilp_prod,4,30,36,0,30,1,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5997b07c8fb5496286a3e8f721ff9c26-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5997b07c8fb5496286a3e8f721ff9c26-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19121742248535156}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4, 6]
consumption (rows=resources) = [[1, 2, 2], [1, 4, 1], [2, 4, 2]]
capacity = [16, 8, 11]
upper_bounds = [5, 3, 5]"
1205,add,4,11337,11337,1,11337,1,"{'ok': True, 'value': 11337, 'stdout': '11337\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0805668830871582}",1,Compute: 2625 + 8712
1206,ilp_partition,2,2,1,0,11,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07703781127929688}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 3, 3]"
1207,knap,2,8,13,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08577418327331543}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5]
V = [6, 8, 7]
C = 5"
1208,ilp_partition,16,1,1,1,17,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19744610786437988}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 43, 15, 18, 22, 48, 1, 10, 13, 30, 25, 26, 23, 44, 46, 17]"
1209,ilp_assign,4,17,10,0,15,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4277381896972656}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1, 9, 12], [5, 1, 7, 2], [10, 11, 12, 6], [3, 1, 6, 4]]"
1210,mul,8,500871262515120,7,0,5000000000000,0,"{'ok': True, 'value': 500871262515120, 'stdout': '500871262515120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08738994598388672}",1,Compute: 17325090 * 28910168
1211,ilp_partition,2,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08157229423522949}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 4, 5]"
1212,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1028599739074707}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 9, 5, 3]"
1213,rod,16,108,32,0,64,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0883333683013916}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [4, 6, 4, 27, 25, 19, 3, 46, 19, 32, 28, 21, 31, 33, 31, 32]"
1214,rod,2,10,5,0,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_c53wz_k6/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_c53wz_k6/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07646989822387695}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 1]"
1215,mul,8,1433661594383880,1459358853453120,0,14303683389980,0,"{'ok': True, 'value': 1433661594383880, 'stdout': '1433661594383880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08532023429870605}",1,Compute: 21115889 * 67894920
1216,sub,2,57,57,1,57,1,"{'ok': True, 'value': 57, 'stdout': '57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08585834503173828}",1,Compute: 70 - 13
1217,knap,8,107,105,0,0,0,"{'ok': True, 'value': 107, 'stdout': '107\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0952754020690918}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 12, 5, 15, 13, 9, 1, 14]
V = [21, 10, 21, 5, 14, 25, 14, 26]
C = 38"
1218,rod,4,28,16,0,4,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08646678924560547}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 8, 1, 9]"
1219,add,16,11698423583927470,11808424183947272,0,11698423583927470,1,"{'ok': True, 'value': 11698423583927470, 'stdout': '11698423583927470\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0752713680267334}",1,Compute: 2734503395404931 + 8963920188522539
1220,ilp_prod,32,336,The solution to this problem involves setting up a linear programming model with integer constraints. The model should maximize the total profit while ensuring that the consumption of each resource does not exceed its capacity. The solution to this problem would be the maximum profit and the quantities of each product to produce to achieve this profit.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_1yj2slt3/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_1yj2slt3/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16358184814453125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [59, 53, 43, 34, 13, 14]
consumption (rows=resources) = [[21, 4, 30, 20, 3, 7], [7, 14, 27, 28, 13, 27], [21, 5, 3, 4, 30, 29], [7, 17, 4, 21, 7, 1]]
capacity = [100, 90, 92, 83]
upper_bounds = [4, 4, 3, 3, 3, 3]"
1221,knap,8,99,110,0,16,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08614921569824219}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 3, 14, 13, 10, 10, 16, 3]
V = [27, 15, 13, 31, 8, 23, 6, 3]
C = 39"
1222,ilp_partition,4,3,1,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09387803077697754}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 10, 11, 7]"
1223,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07686233520507812}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""dba"""
1224,ilp_partition,16,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09352779388427734}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 42, 41, 17, 31, 7, 35, 7, 17, 24, 10, 25, 46, 41, 18, 6]"
1225,ilp_partition,8,1,1,1,18,0,"{'ok': True, 'value': 71, 'stdout': '71\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07711338996887207}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 12, 3, 18, 15, 10, 16, 24]"
1226,add,8,55134050,66134050,0,55134050,1,"{'ok': True, 'value': 55134050, 'stdout': '55134050\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08315348625183105}",1,Compute: 43541773 + 11592277
1227,add,2,75,75,1,75,1,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07442927360534668}",1,Compute: 12 + 63
1228,ilp_assign,8,43,76,0,80,0,"{'ok': True, 'value': 43, 'stdout': '43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36205434799194336}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 12, 7, 5, 18, 21, 10], [18, 4, 24, 16, 12, 13, 23], [6, 22, 2, 3, 16, 22, 2], [13, 5, 19, 24, 5, 6, 17], [3, 24, 13, 18, 7, 17, 13], [12, 23, 19, 14, 6, 14, 19], [9, 8, 24, 19, 12, 20, 17]]"
1229,mul,32,9217826404617931663044991843200213079027206532175224054310586354,99163319458390492780541922207999,0,921606566629945539576778847609666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 9217826404617931663044991843200213079027206532175224054310586354, 'stdout': '9217826404617931663044991843200213079027206532175224054310586354\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07544636726379395}",1,Compute: 92956008884775034036935883781646 * 99163319458390492780541922207999
1230,lcs,16,9,8,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07613348960876465}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcdcbccdccdbbbc""
T = ""aaacdcbaabcdccca"""
1231,rod,8,136,25,0,1,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09394550323486328}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 24, 18, 7, 18, 5, 8, 14]"
1232,add,4,12251,31,0,12251,1,"{'ok': True, 'value': 12251, 'stdout': '12251\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0771031379699707}",1,Compute: 4174 + 8077
1233,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07574009895324707}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""bc"""
1234,sub,4,80,80,1,80,1,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08908653259277344}",1,Compute: 2549 - 2469
1235,ilp_partition,4,0,1,0,13,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08431315422058105}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 8, 12, 1]"
1236,ilp_prod,2,12,30,0,6,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a33f1ea09620422083e85adc6b2718b7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a33f1ea09620422083e85adc6b2718b7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 10.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15201306343078613}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[3, 2], [3, 3]]
capacity = [7, 6]
upper_bounds = [3, 3]"
1237,ilp_assign,16,127,113,0,1,0,"{'ok': True, 'value': 127, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/daffb559ce1a4b5780ff9eb474b10dcd-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/daffb559ce1a4b5780ff9eb474b10dcd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 127 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 127\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 127 - took 0.00 seconds\nCbc0012I Integer solution of 127 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 127, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 127 to 127\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                127.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 127.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1585986614227295}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[43, 29, 20, 33, 30, 20, 15], [8, 27, 12, 47, 17, 5, 34], [45, 43, 42, 44, 44, 30, 28], [47, 31, 19, 28, 32, 47, 47], [8, 29, 41, 28, 20, 11, 22], [38, 48, 18, 40, 28, 32, 18], [38, 29, 13, 45, 11, 25, 39]]"
1238,ilp_assign,4,12,18,0,28,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.386915922164917}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 6, 9, 7], [12, 4, 9, 2], [1, 6, 1, 11], [8, 1, 3, 12]]"
1239,mul,32,1306806698988855375925789036884473759756611725153038271927986400,2649677300172452131673043293632611,0,130533444404394444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 1306806698988855375925789036884473759756611725153038271927986400, 'stdout': '1306806698988855375925789036884473759756611725153038271927986400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07775282859802246}",1,Compute: 24967730017245213167304329363248 * 52339828173656310843276706213050
1240,ilp_assign,8,32,46,0,56,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.399977445602417}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 7, 12, 20, 22, 23, 3], [15, 15, 11, 22, 10, 11, 22], [17, 1, 17, 3, 5, 6, 1], [1, 8, 7, 23, 22, 24, 24], [14, 10, 21, 6, 4, 13, 17], [17, 1, 20, 7, 3, 7, 6], [11, 7, 24, 11, 8, 9, 12]]"
1241,ilp_prod,8,70,60,0,60,0,"{'ok': True, 'value': 45, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f77df6a97fb845fc8178c871bc0081ea-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f77df6a97fb845fc8178c871bc0081ea-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 54.375 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -45 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                45.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n45.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18278121948242188}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 20, 15, 15]
consumption (rows=resources) = [[2, 6, 6, 3], [5, 5, 8, 3], [8, 4, 7, 8], [2, 8, 2, 3]]
capacity = [24, 25, 29, 25]
upper_bounds = [3, 3, 3, 3]"
1242,ilp_partition,4,2,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_rec50avy/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_rec50avy/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07988786697387695}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 2, 11, 3]"
1243,mul,8,910660707000834,1604646867,0,894449660451,0,"{'ok': True, 'value': 910660707000834, 'stdout': '910660707000834\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08720970153808594}",1,Compute: 51614463 * 17643518
1244,ilp_assign,2,5,11,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40769386291503906}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 5], [6, 4]]"
1245,ilp_partition,4,2,2,1,18,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07964587211608887}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 4, 11, 12]"
1246,knap,16,424,116,0,0,0,"{'ok': True, 'value': 424, 'stdout': '424\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07906246185302734}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 18, 10, 10, 22, 22, 17, 10, 8, 23, 15, 11, 4, 17, 12, 9]
V = [27, 23, 2, 58, 6, 38, 43, 26, 44, 24, 63, 54, 27, 7, 56, 30]
C = 116"
1247,rod,32,2016,1055,0,0,0,"{'ok': True, 'value': 2016, 'stdout': '2016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0766139030456543}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [63, 69, 92, 46, 27, 67, 88, 23, 21, 11, 32, 9, 36, 5, 56, 86, 34, 50, 91, 61, 50, 9, 83, 72, 63, 68, 56, 48, 39, 89, 94, 39]"
1248,ilp_assign,8,31,36,0,40,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.404482364654541}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 21, 1, 6, 9, 12, 8], [3, 5, 20, 23, 11, 13, 18], [18, 19, 23, 10, 17, 11, 12], [16, 5, 20, 7, 14, 7, 4], [3, 6, 1, 21, 1, 3, 15], [17, 19, 3, 6, 12, 17, 18], [21, 6, 6, 24, 14, 3, 15]]"
1249,ilp_partition,16,0,1,0,26,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21190667152404785}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [32, 19, 33, 16, 9, 22, 26, 45, 7, 33, 45, 16, 31, 8, 46, 14]"
1250,ilp_prod,16,157,123,0,153,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_c6nihthp/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_c6nihthp/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16325116157531738}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 15, 9, 22, 5, 31]
consumption (rows=resources) = [[5, 1, 15, 3, 6, 13], [16, 10, 8, 11, 6, 13], [10, 5, 8, 11, 3, 16], [10, 4, 13, 14, 8, 8]]
capacity = [46, 61, 46, 53]
upper_bounds = [3, 6, 3, 3, 6, 3]"
1251,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08860111236572266}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbd""
T = ""aaca"""
1252,sub,4,5666,5666,1,5666,1,"{'ok': True, 'value': 5666, 'stdout': '5666\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08709096908569336}",1,Compute: 8617 - 2951
1253,sub,2,41,41,1,41,1,"{'ok': True, 'value': 41, 'stdout': '41\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07689785957336426}",1,Compute: 80 - 39
1254,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0874941349029541}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaa""
T = ""acc"""
1255,knap,8,63,60,0,3,0,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09309983253479004}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 14, 16, 10, 1, 9, 4, 3]
V = [24, 3, 15, 10, 2, 25, 3, 9]
C = 36"
1256,ilp_assign,4,16,15,0,28,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3994007110595703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 4, 2, 7], [12, 6, 12, 6], [4, 2, 1, 7], [6, 10, 6, 11]]"
1257,knap,2,11,12,0,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07554912567138672}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 5]
V = [7, 4, 5]
C = 4"
1258,rod,16,209,48,0,65,0,"{'ok': True, 'value': 209, 'stdout': '209\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07853889465332031}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [9, 15, 40, 35, 5, 20, 35, 43, 6, 39, 2, 48, 37, 25, 39, 41]"
1259,ilp_prod,32,260,1008,0,240,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_5knm_uyp/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_5knm_uyp/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14461421966552734}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 66, 76, 92, 44, 48]
consumption (rows=resources) = [[4, 28, 30, 25, 23, 26], [25, 12, 23, 20, 25, 31], [12, 32, 30, 13, 20, 19], [30, 31, 9, 29, 14, 26]]
capacity = [106, 102, 86, 68]
upper_bounds = [3, 3, 3, 3, 4, 3]"
1260,rod,32,1440,1050,0,0,0,"{'ok': True, 'value': 1440, 'stdout': '1440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08697867393493652}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [30, 90, 61, 82, 2, 63, 39, 38, 39, 8, 42, 88, 96, 20, 90, 89, 96, 43, 85, 41, 37, 92, 86, 85, 48, 85, 90, 2, 22, 58, 46, 94]"
1261,add,4,8357,8357,1,8357,1,"{'ok': True, 'value': 8357, 'stdout': '8357\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0711522102355957}",1,Compute: 1195 + 7162
1262,ilp_partition,8,0,1,0,4,0,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08585524559020996}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 20, 17, 5, 13, 4, 20, 13]"
1263,rod,4,40,30,0,1,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09814906120300293}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 9, 2, 3]"
1264,mul,8,2197264695639131,929442610,0,21883436454477,0,"{'ok': True, 'value': 2197264695639131, 'stdout': '2197264695639131\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08409619331359863}",1,Compute: 92944261 * 23640671
1265,mul,32,630970755037076247825204264946986883676291773261765902319043708,641223344255245344564963453456451456456453456453456453456453456456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453456453,0,6422262846448188433627271543403965888868488886,0,"{'ok': True, 'value': 630970755037076247825204264946986883676291773261765902319043708, 'stdout': '630970755037076247825204264946986883676291773261765902319043708\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07608151435852051}",1,Compute: 25289030212765397733509104141693 * 24950373728391324534959531757356
1266,mul{'ok': True, 'value': 3339514129361386413707414016391136206802487013208998091908944520, 'stdout': '3339514129361386413707414016391136206802487013208998091908944520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0743556022644043}",1,Compute: 40119413153217178239324848311460 * 83239356383596318075622251242962
1267,knap,2,5,7,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08481431007385254}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 5]
V = [2, 5, 2]
C = 5"
1268,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08806037902832031}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [43, 30, 68, 3, 44, 41, 3, 91, 51, 88, 79, 8, 7, 13, 31, 75, 51, 70, 17, 72, 67, 18, 44, 58]"
1269,ilp_assign,16,86,114,0,1,0,"{'ok': True, 'value': 86, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7aebf9aba80c4bb5a401fbb5fdb51842-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/7aebf9aba80c4bb5a401fbb5fdb51842-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 86 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 86\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 86 - took 0.00 seconds\nCbc0012I Integer solution of 86 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 86, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 86 to 86\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                86.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\nStatus: Optimal\nMinimum total cost: 86.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16732335090637207}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 24, 46, 10, 33, 26, 40], [27, 27, 29, 10, 40, 24, 31], [9, 11, 17, 14, 25, 34, 43], [10, 35, 45, 46, 19, 12, 47], [39, 8, 2, 16, 35, 12, 38], [45, 12, 39, 41, 16, 37, 30], [43, 37, 45, 31, 12, 38, 33]]"
1270,add,16,8891400507220882,6,0,8911390507220882,0,"{'ok': True, 'value': 8891400507220882, 'stdout': '8891400507220882\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07932686805725098}",1,Compute: 6735021969347626 + 2156378537873256
1271,ilp_partition,4,6,The answer will be the minimum difference between the two groups.,0,16,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08502626419067383}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 9, 8, 8]"
1272,ilp_prod,4,77,55,0,35,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8660381f683b4b7081450ecfc0321b9d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8660381f683b4b7081450ecfc0321b9d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 23.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.197739839553833}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4, 11]
consumption (rows=resources) = [[2, 4, 2], [3, 2, 2], [3, 2, 2]]
capacity = [14, 14, 15]
upper_bounds = [4, 3, 7]"
1273,add,8,114796875,11833748,0,114796875,1,"{'ok': True, 'value': 114796875, 'stdout': '114796875\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08678078651428223}",1,Compute: 18833748 + 95963127
1274,ilp_assign,16,41,105,0,1,0,"{'ok': True, 'value': 41, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/43829a67c96d4efc83816959174ee056-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/43829a67c96d4efc83816959174ee056-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 41 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 41\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 41 - took 0.00 seconds\nCbc0012I Integer solution of 41 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 41, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 41 to 41\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                41.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 41.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16126537322998047}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[44, 4, 14, 48, 24, 2, 6], [28, 19, 15, 1, 16, 47, 46], [29, 8, 21, 22, 38, 33, 34], [12, 40, 4, 43, 36, 20, 16], [35, 20, 48, 12, 18, 39, 34], [36, 47, 23, 14, 13, 2, 24], [2, 21, 34, 41, 40, 27, 14]]"
1275,sub,8,38020804,38020804,1,38020804,1,"{'ok': True, 'value': 38020804, 'stdout': '38020804\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0916438102722168}",1,Compute: 65472959 - 27452155
1276,ilp_assign,32,136,187,0,1,0,"{'ok': True, 'value': 136, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/da83a999a69648fbbf8a021605eca3a9-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/da83a999a69648fbbf8a021605eca3a9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 136 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 136\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 136 - took 0.00 seconds\nCbc0012I Integer solution of 136 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 136, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 136 to 136\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                136.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 136.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19309306144714355}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 11, 36, 41, 28, 35, 41], [52, 90, 91, 27, 27, 17, 7], [21, 92, 65, 63, 8, 55, 90], [72, 48, 85, 17, 22, 72, 51], [88, 74, 85, 15, 19, 60, 83], [39, 90, 4, 5, 39, 45, 87], [87, 33, 22, 48, 94, 81, 64]]"
1277,add,2,115,115,1,115,1,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08593940734863281}",1,Compute: 77 + 38
1278,rod,4,32,24,0,10,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09966468811035156}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 12, 10, 9]"
1279,add,2,69,70,0,69,1,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07769227027893066}",1,Compute: 11 + 58
1280,ilp_assign,8,33,56,0,91,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3890383243560791}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 5, 7, 4, 24, 1, 19], [23, 6, 16, 11, 9, 10, 3], [7, 23, 20, 18, 5, 22, 9], [23, 8, 4, 19, 10, 17, 14], [11, 19, 18, 12, 5, 17, 15], [17, 8, 21, 11, 7, 18, 24], [11, 5, 18, 5, 13, 23, 10]]"
1281,sub,32,30482592322664075889639950571914,30482592322663975890640950571914,0,30482532322664075889640150571914,0,"{'ok': True, 'value': 30482592322664075889639950571914, 'stdout': '30482592322664075889639950571914\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07871222496032715}",1,Compute: 54360396206429779544901684011334 - 23877803883765703655261733439420
1282,mul,32,1007584848392145518464870839610096060692236626407116639309367946,99999983629644530080736020803562,0,10239997654444480512110639900534835748836,0,"{'ok': True, 'value': 1007584848392145518464870839610096060692236626407116639309367946, 'stdout': '1007584848392145518464870839610096060692236626407116639309367946\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07575416564941406}",1,Compute: 46399991814822265040368010401781 * 21715194528768799259923799698466
1283,ilp_assign,8,31,46,0,75,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39205074310302734}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 10, 6, 15, 24, 4, 22], [1, 4, 9, 18, 10, 4, 24], [10, 7, 15, 24, 8, 24, 1], [14, 3, 11, 15, 15, 15, 18], [21, 8, 14, 9, 13, 20, 3], [19, 13, 22, 13, 4, 4, 12], [12, 12, 13, 16, 16, 7, 21]]"
1284,mul,8,4572298509295981,4561936435312011,0,456284445331111,0,"{'ok': True, 'value': 4572298509295981, 'stdout': '4572298509295981\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07284784317016602}",1,Compute: 56659049 * 80698469
1285,ilp_partition,32,0,1,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.035188913345337}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 59, 78, 24, 69, 74, 75, 14, 76, 37, 54, 45, 65, 45, 20, 73, 39, 16, 11, 51, 76, 39, 12, 89]"
1286,sub,16,3190790663968143,3190790663968143,1,3190790663968143,1,"{'ok': True, 'value': 3190790663968143, 'stdout': '3190790663968143\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1059107780456543}",1,Compute: 9689255746243067 - 6498465082274924
1287,ilp_prod,32,213,368,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_r53g7xgs/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_r53g7xgs/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14043498039245605}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [79, 32, 39, 96, 23, 11]
consumption (rows=resources) = [[24, 5, 7, 29, 19, 32], [23, 24, 30, 10, 19, 31], [27, 12, 7, 31, 28, 8], [18, 14, 23, 20, 18, 31]]
capacity = [86, 103, 64, 120]
upper_bounds = [3, 4, 3, 3, 3, 3]"
1288,rod,2,12,5,0,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0879979133605957}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
1289,ilp_assign,32,90,185,0,1,0,"{'ok': True, 'value': 90, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d7d239e90ac74230b65fd29de77e458b-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/d7d239e90ac74230b65fd29de77e458b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 90 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 90\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 90 - took 0.00 seconds\nCbc0012I Integer solution of 90 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 90, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 90 to 90\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                90.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 90.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20097804069519043}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[49, 69, 18, 22, 10, 21, 57], [31, 43, 45, 41, 49, 28, 22], [8, 43, 62, 53, 68, 81, 29], [29, 37, 8, 13, 54, 14, 67], [90, 10, 60, 30, 41, 6, 60], [94, 62, 78, 75, 12, 13, 76], [37, 77, 64, 70, 7, 56, 16]]"
1290,ilp_prod,32,450,The solution to the problem is the maximum profit that can be obtained while satisfying the resource constraints.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_4t95w8r3/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_4t95w8r3/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14596128463745117}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 88, 49, 75, 5, 10]
consumption (rows=resources) = [[2, 1, 23, 3, 25, 27], [26, 27, 30, 11, 4, 9], [2, 22, 28, 13, 9, 31], [13, 28, 16, 13, 11, 25]]
capacity = [66, 70, 81, 82]
upper_bounds = [3, 3, 3, 6, 3, 3]"
1291,sub,2,17,17,1,17,1,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07420468330383301}",1,Compute: 72 - 55
1292,lcs,8,4,4,1,8,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07673382759094238}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdaccddc""
T = ""abddbda"""
1293,sub,2,14,14,1,14,1,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07802200317382812}",1,Compute: 75 - 61
1294,ilp_assign,32,71,0,0,110,0,"{'ok': True, 'value': 71, 'stdout': '71\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.506417989730835}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 89, 69, 4, 2, 69, 94], [15, 70, 44, 36, 65, 81, 67], [41, 5, 70, 25, 31, 88, 4], [26, 61, 2, 41, 26, 88, 1], [7, 69, 73, 80, 31, 72, 36], [53, 16, 72, 77, 47, 18, 20], [48, 62, 10, 81, 48, 72, 1]]"
1295,mul,32,6979678386857195858553480037021834665368541723232219436424934500,700668683718647247444054875277755980565164179487711646688201,0,700386606326355284684866466464666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 6979678386857195858553480037021834665368541723232219436424934500, 'stdout': '6979678386857195858553480037021834665368541723232219436424934500\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09002423286437988}",1,Compute: 84719117287911202415498766616500 * 82386108475815586049459182502493
1296,knap,8,121,105,0,0,0,"{'ok': True, 'value': 121, 'stdout': '121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08000850677490234}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 16, 16, 11, 3, 7, 6, 12]
V = [6, 24, 10, 24, 13, 30, 25, 29]
C = 40"
1297,sub,2,26,26,1,26,1,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08723711967468262}",1,Compute: 39 - 13
1298,rod,2,6,4,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08174014091491699}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
1299,rod,2,12,6,0,8,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0787959098815918}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
1300,rod,32,1040,1050,0,1,0,"{'ok': True, 'value': 1040, 'stdout': '1040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07585263252258301}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [12, 65, 82, 45, 31, 80, 11, 13, 32, 48, 37, 28, 43, 81, 38, 13, 33, 5, 94, 28, 49, 14, 6, 89, 59, 29, 35, 55, 24, 66, 2, 74]"
1301,rod,4,16,16,1,4,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08160519599914551}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 2, 3, 4]"
1302,rod,16,560,46,0,35,0,"{'ok': True, 'value': 560, 'stdout': '560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0811617374420166}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 23, 25, 42, 40, 35, 32, 45, 6, 9, 44, 22, 5, 44, 22, 34]"
1303,sub,32,4480951680887470309966629125100,21800146692585062309527381864129,0,44809616809874703309986630125100,0,"{'ok': True, 'value': 4480951680887470309966629125100, 'stdout': '4480951680887470309966629125100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0771629810333252}",1,Compute: 71800146692585062309527381864129 - 67319195011697591999560752739029
1304,add,8,70423453,70423453,1,70423453,1,"{'ok': True, 'value': 70423453, 'stdout': '70423453\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08912014961242676}",1,Compute: 59106924 + 11316529
1305,mul{'ok': True, 'value': 6003633935190549680110289606663949302887202494189805726198094516, 'stdout': '6003633935190549680110289606663949302887202494189805726198094516\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07400965690612793}",1,Compute: 95663615947885844757172372047669 * 62757756705131417525897356747364
1306,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07997679710388184}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [31, 65, 58, 65, 40, 41, 11, 21, 8, 19, 51, 63, 3, 96, 66, 88, 74, 51, 88, 54, 78, 63, 93, 75]"
1307,sub,16,1102462440853418,1102462440853418,1,1122452440853418,0,"{'ok': True, 'value': 1102462440853418, 'stdout': '1102462440853418\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0771331787109375}",1,Compute: 8067638505174974 - 6965176064321556
1308,ilp_prod,8,59,60,0,2,0,"{'ok': True, 'value': 45, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1b0296e4c66f4e70b90bb801bd7c2675-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1b0296e4c66f4e70b90bb801bd7c2675-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 43 RHS\nAt line 49 BOUNDS\nAt line 54 ENDATA\nProblem MODEL has 5 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 45 - 0.00 seconds\nCgl0004I processed model has 5 rows, 4 columns (4 integer (0 of which binary)) and 20 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -45 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -45, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -45 to -45\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                45.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n45.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20171785354614258}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 15, 7, 14]
consumption (rows=resources) = [[5, 6, 6, 1], [1, 2, 7, 6], [6, 4, 5, 5], [7, 6, 3, 3]]
capacity = [19, 20, 23, 25]
upper_bounds = [3, 3, 3, 3]"
1309,add,4,6506,6506,1,6506,1,"{'ok': True, 'value': 6506, 'stdout': '6506\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08823323249816895}",1,Compute: 3051 + 3455
1310,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08027887344360352}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbddacbb""
T = ""dcbadaaa"""
1311,ilp_prod,2,21,23,0,21,1,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1df9086a59d34a868628b226dd12ffbc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1df9086a59d34a868628b226dd12ffbc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17868757247924805}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[1, 2], [3, 2]]
capacity = [8, 10]
upper_bounds = [3, 4]"
1312,rod,16,184,65,0,64,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07899284362792969}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [9, 18, 35, 12, 43, 33, 38, 11, 44, 42, 47, 15, 41, 1, 48, 9]"
1313,add,32,101742303113975490545505436736864,101742303114075590545505436736864,0,101742277113975490545505436736864,0,"{'ok': True, 'value': 101742303113975490545505436736864, 'stdout': '101742303113975490545505436736864\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07507586479187012}",1,Compute: 77360032424405477908996601313259 + 24382270689570012636508835423605
1314,ilp_assign,2,4,4,1,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3849461078643799}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 2], [2, 3]]"
1315,knap,2,7,13,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07726430892944336}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 4]
V = [7, 3, 6]
C = 5"
1316,ilp_partition,2,0,1,0,5,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07567977905273438}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 2, 5]"
1317,add,8,93715119,93715119,1,93715119,1,"{'ok': True, 'value': 93715119, 'stdout': '93715119\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07545781135559082}",1,Compute: 39427271 + 54287848
1318,sub,2,45,45,1,45,1,"{'ok': True, 'value': 45, 'stdout': '45\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08601236343383789}",1,Compute: 80 - 35
1319,knap,8,85,120,0,0,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07570910453796387}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 3, 8, 8, 4, 8, 3, 10]
V = [24, 6, 8, 24, 16, 19, 20, 8]
C = 28"
1320,ilp_prod,2,15,23,0,25,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ccwnnmyp/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 5*x[1]], ""Total Profit"")\nTypeError: lpSum() takes 1 positional argument but 2 were given\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20208740234375}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5]
consumption (rows=resources) = [[3, 3], [2, 3]]
capacity = [10, 10]
upper_bounds = [3, 3]"
1321,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_iml2sul0/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_iml2sul0/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08035564422607422}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 2]"
1322,sub,8,11180417,11180417,1,11180417,1,"{'ok': True, 'value': 11180417, 'stdout': '11180417\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08435893058776855}",1,Compute: 46096582 - 34916165
1323,knap,2,9,10,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09479999542236328}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 2]
V = [9, 1, 5]
C = 5"
1324,rod,2,12,6,0,10,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08546233177185059}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 4]"
1325,add,8,126964053,46443118,0,126964053,1,"{'ok': True, 'value': 126964053, 'stdout': '126964053\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08331966400146484}",1,Compute: 80520935 + 46443118
1326,ilp_assign,8,32,56,0,75,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39237523078918457}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 4, 24, 16, 23, 12, 9], [4, 11, 13, 4, 6, 17, 24], [18, 15, 24, 17, 3, 16, 11], [19, 4, 11, 4, 4, 18, 8], [16, 8, 16, 11, 2, 6, 2], [1, 14, 22, 11, 10, 18, 20], [24, 8, 12, 5, 22, 24, 3]]"
1327,lcs,8,2,4,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07578420639038086}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaddacdd""
T = ""bbdbbbdb"""
1328,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0759575366973877}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbdbbcac""
T = ""cbdcbbd"""
1329,mul,8,353284970395770,353813977383530,0,35413333311770,0,"{'ok': True, 'value': 353284970395770, 'stdout': '353284970395770\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08148503303527832}",1,Compute: 18510870 * 19085271
1330,ilp_partition,16,1,1,1,14,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20058250427246094}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 31, 7, 37, 25, 17, 32, 31, 14, 21, 10, 25, 46, 43, 16, 32]"
1331,add,8,164996712,164996712,1,165096712,0,"{'ok': True, 'value': 164996712, 'stdout': '164996712\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09665846824645996}",1,Compute: 87098543 + 77898169
1332,knap,8,95,103,0,0,0,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08654665946960449}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 13, 5, 6, 9, 4, 14, 4]
V = [31, 26, 4, 32, 6, 6, 15, 22]
C = 34"
1333,rod,4,48,32,0,1,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08878302574157715}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 8, 10, 8]"
1334,mul,32,5794701169179160321566991534152496847374791397066574575102440960,0,0,57689869951096069288882848445472,0,"{'ok': True, 'value': 5794701169179160321566991534152496847374791397066574575102440960, 'stdout': '5794701169179160321566991534152496847374791397066574575102440960\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08507227897644043}",1,Compute: 65971951096771479182788462445256 * 87835831332002853732780447700160
1335,ilp_prod,8,48,78,0,132,0,"{'ok': True, 'value': 38, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/83270d52f7504325868ce2154d3f693f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/83270d52f7504325868ce2154d3f693f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 40.375 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -38 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                38.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n38.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16156315803527832}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 7, 15, 8]
consumption (rows=resources) = [[8, 2, 5, 8], [3, 6, 3, 2], [3, 2, 7, 3], [3, 4, 5, 2]]
capacity = [17, 22, 16, 22]
upper_bounds = [3, 3, 3, 3]"
1336,knap,4,29,34,0,0,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08963394165039062}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 6, 5]
V = [13, 1, 13, 16]
C = 10"
1337,ilp_prod,8,38,50,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_e5mflffw/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_e5mflffw/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15776634216308594}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 4, 5, 14]
consumption (rows=resources) = [[6, 2, 8, 5], [1, 1, 5, 6], [6, 4, 5, 8], [5, 2, 4, 7]]
capacity = [28, 31, 21, 29]
upper_bounds = [3, 5, 3, 3]"
1338,ilp_prod,8,37,66,0,31,0,"{'ok': True, 'value': 37, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6d1bc0f9b2554c50bef3f991c0fff971-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6d1bc0f9b2554c50bef3f991c0fff971-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 44.8302 - 0.00 seconds\nCgl0004I processed model has 3 rows, 4 columns (4 integer (0 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -36 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -37 found by DiveCoefficient after 281 iterations and 0 nodes (0.01 seconds)\nCbc0031I 2 added rows had average density of 4\nCbc0013I At root node, 2 cuts changed objective from -44.081633 to -37.000035 in 94 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 184 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0001I Search completed - best objective -37, took 281 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -44.0816 to -37\nProbing was tried 94 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 94 times and created 184 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 94 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 94 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 94 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 94 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                37.00000000\nEnumerated nodes:               0\nTotal iterations:               281\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n37.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20674395561218262}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 6, 11, 15]
consumption (rows=resources) = [[1, 2, 6, 2], [7, 8, 8, 3], [7, 1, 5, 7], [7, 7, 8, 1]]
capacity = [23, 20, 18, 31]
upper_bounds = [3, 3, 3, 3]"
1339,sub,4,2530,2530,1,2530,1,"{'ok': True, 'value': 2530, 'stdout': '2530\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0878596305847168}",1,Compute: 8641 - 6111
1340,add,4,15345,15345,1,15345,1,"{'ok': True, 'value': 15345, 'stdout': '15345\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08923888206481934}",1,Compute: 7691 + 7654
1341,ilp_assign,32,112,16,0,209,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6436810493469238}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[35, 59, 16, 36, 69, 19, 44], [12, 74, 7, 71, 46, 58, 6], [65, 1, 93, 60, 79, 54, 41], [66, 50, 80, 46, 25, 52, 79], [87, 7, 67, 39, 43, 60, 7], [40, 85, 41, 35, 68, 27, 85], [48, 39, 13, 38, 64, 89, 25]]"
1342,knap,32,1378,1649,0,20,0,"{'ok': True, 'value': 1378, 'stdout': '1378\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08267951011657715}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 40, 7, 42, 38, 47, 28, 10, 57, 10, 2, 11, 24, 39, 33, 49, 52, 20, 9, 14, 56, 7, 41, 32, 9, 9, 38, 44, 24, 45, 33, 17]
V = [108, 56, 35, 61, 72, 28, 127, 47, 50, 39, 109, 57, 31, 51, 36, 54, 89, 60, 23, 80, 58, 34, 61, 61, 70, 23, 68, 42, 75, 10, 59, 60]
C = 454"
1343,knap,32,1363,1024,0,19,0,"{'ok': True, 'value': 1363, 'stdout': '1363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08472514152526855}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 14, 62, 35, 32, 27, 38, 51, 38, 58, 57, 55, 55, 28, 19, 50, 52, 59, 11, 42, 10, 42, 56, 46, 19, 52, 41, 22, 21, 27, 47, 38]
V = [57, 89, 55, 60, 108, 27, 71, 19, 33, 120, 44, 90, 23, 28, 117, 38, 99, 64, 11, 43, 4, 128, 36, 2, 35, 2, 26, 82, 49, 73, 74, 4]
C = 611"
1344,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0811305046081543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdaacbac""
T = ""bcabcdd"""
1345,rod,8,128,22,0,27,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07750868797302246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 13, 12, 2, 2, 14, 20, 14]"
1346,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37848496437072754}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [5, 3]]"
1347,knap,4,36,48,0,0,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08374476432800293}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 1, 4]
V = [12, 12, 12, 12]
C = 7"
1348,add,16,11631171974051161,11168136373071121,0,11631172974051161,0,"{'ok': True, 'value': 11631171974051161, 'stdout': '11631171974051161\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07451176643371582}",1,Compute: 7195194884962863 + 4435977089088298
1349,knap,32,1615,2055,0,53,0,"{'ok': True, 'value': 1615, 'stdout': '1615\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08279538154602051}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 40, 26, 41, 52, 39, 52, 30, 40, 22, 54, 64, 21, 64, 54, 53, 43, 47, 10, 38, 34, 10, 32, 18, 57, 19, 53, 44, 54, 43, 23, 29]
V = [50, 74, 109, 31, 96, 87, 124, 107, 81, 6, 81, 27, 92, 3, 119, 73, 68, 92, 91, 9, 24, 3, 84, 93, 97, 120, 53, 55, 88, 11, 55, 44]
C = 613"
1350,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08682775497436523}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 2, 22, 23, 22, 22, 10, 4]"
1351,add,32,120658448554310229893415573083359,43565415654156541565415654156541,0,120658448554310230093415553083359,0,"{'ok': True, 'value': 120658448554310229893415573083359, 'stdout': '120658448554310229893415573083359\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0785062313079834}",1,Compute: 24715662229459150089367832310877 + 95942786324851079804047740772482
1352,ilp_partition,8,0,1,0,3,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0934901237487793}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 18, 22, 19, 6, 18, 20, 3]"
1353,ilp_assign,32,113,187,0,209,0,"{'ok': True, 'value': 113, 'stdout': '113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37807393074035645}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[81, 12, 18, 37, 77, 65, 60], [58, 47, 75, 23, 22, 48, 19], [7, 84, 10, 39, 36, 35, 61], [69, 41, 39, 57, 56, 10, 61], [72, 74, 43, 34, 69, 62, 36], [88, 10, 42, 58, 44, 23, 94], [92, 32, 57, 65, 86, 48, 12]]"
1354,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_7dzn9hw_/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_7dzn9hw_/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08526778221130371}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 6]"
1355,ilp_prod,16,310,155,0,155,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_h95r20ld/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_h95r20ld/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14189529418945312}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 41, 32, 41, 34, 15]
consumption (rows=resources) = [[3, 5, 12, 1, 6, 7], [2, 4, 8, 2, 15, 11], [10, 7, 1, 7, 12, 11], [16, 12, 4, 2, 4, 14]]
capacity = [58, 33, 44, 56]
upper_bounds = [3, 4, 4, 6, 3, 3]"
1356,ilp_partition,16,0,10,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08703470230102539}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 41, 4, 31, 43, 29, 22, 13, 2, 37, 24, 39, 8, 21, 24, 39]"
1357,rod,4,24,24,1,2,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07628011703491211}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 12, 6, 2]"
1358,ilp_assign,32,177,208,0,201,0,"{'ok': True, 'value': 177, 'stdout': '177\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38718509674072266}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 95, 96, 87, 77, 29, 34], [89, 77, 94, 85, 77, 47, 95], [45, 54, 80, 85, 24, 6, 77], [3, 96, 35, 67, 67, 33, 77], [20, 78, 48, 11, 53, 27, 41], [78, 64, 74, 96, 40, 55, 37], [33, 10, 55, 26, 6, 29, 32]]"
1359,ilp_assign,32,106,234,0,208,0,"{'ok': True, 'value': 106, 'stdout': '106\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37445878982543945}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 21, 71, 63, 27, 74, 48], [73, 22, 28, 69, 72, 57, 89], [55, 4, 70, 52, 78, 4, 95], [75, 91, 19, 79, 91, 48, 25], [15, 36, 88, 54, 32, 34, 5], [85, 14, 86, 3, 81, 43, 88], [65, 89, 54, 22, 95, 11, 68]]"
1360,add,2,25,25,1,25,1,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08093714714050293}",1,Compute: 12 + 13
1361,ilp_partition,4,0,0,1,2,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09177708625793457}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 7, 12, 7]"
1362,ilp_prod,8,160,105,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_iralu477/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_iralu477/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16259765625}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 21, 12, 16]
consumption (rows=resources) = [[4, 4, 7, 2], [7, 3, 5, 1], [5, 4, 6, 2], [5, 7, 2, 3]]
capacity = [23, 31, 26, 30]
upper_bounds = [4, 4, 3, 10]"
1363,mul,8,4336939999943430,163,0,42643833558230,0,"{'ok': True, 'value': 4336939999943430, 'stdout': '4336939999943430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08547306060791016}",1,Compute: 76735241 * 56518230
1364,ilp_partition,4,2,1,0,1,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07722187042236328}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 8, 12, 3]"
1365,sub,32,31753410615964918091554044754,252405710617177,0,32653425960615964918091554044754,0,"{'ok': True, 'value': 31753410615964918091554044754, 'stdout': '31753410615964918091554044754\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08723092079162598}",1,Compute: 79707510348430999847910136260401 - 79675756937815034929818582215647
1366,lcs,8,5,4,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07740497589111328}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbccaabb""
T = ""ccdbcaca"""
1367,rod,8,104,22,0,1,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07546043395996094}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 3, 6, 16, 5, 12, 10, 6]"
1368,mul,2,6240,6240,1,6240,1,"{'ok': True, 'value': 6240, 'stdout': '6240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08327794075012207}",1,Compute: 96 * 65
1369,knap,16,413,1043,0,4,0,"{'ok': True, 'value': 413, 'stdout': '413\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07511329650878906}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 5, 3, 10, 13, 27, 20, 15, 19, 6, 5, 17, 20, 29, 32]
V = [35, 56, 55, 32, 4, 47, 14, 22, 20, 20, 59, 22, 1, 2, 54, 49]
C = 114"
1370,ilp_assign,4,13,10,0,7,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39086031913757324}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 10, 4, 7], [5, 5, 4, 11], [5, 7, 1, 1], [3, 12, 8, 7]]"
1371,mul,8,4944685305914702,17,0,484848484422,0,"{'ok': True, 'value': 4944685305914702, 'stdout': '4944685305914702\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0719749927520752}",1,Compute: 72884234 * 67843003
1372,rod,4,24,20,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08538246154785156}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 10, 3, 1]"
1373,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08635520935058594}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""c"""
1374,knap,8,113,143,0,0,0,"{'ok': True, 'value': 113, 'stdout': '113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08723115921020508}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 2, 8, 7, 9, 8, 14, 9]
V = [16, 24, 32, 27, 13, 30, 21, 3]
C = 32"
1375,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0875997543334961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcbbbcb""
T = ""addbbaab"""
1376,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08415079116821289}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""c"""
1377,rod,16,576,65,0,65,0,"{'ok': True, 'value': 576, 'stdout': '576\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08559989929199219}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [36, 15, 24, 12, 5, 30, 25, 35, 23, 41, 33, 38, 21, 20, 35, 41]"
1378,add,4,14059,14169,0,14069,0,"{'ok': True, 'value': 14059, 'stdout': '14059\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07549166679382324}",1,Compute: 6139 + 7920
1379,sub,4,5548,5548,1,5548,1,"{'ok': True, 'value': 5548, 'stdout': '5548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07359671592712402}",1,Compute: 7340 - 1792
1380,add,16,3973021821847261,1222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222,0,3973021821847261,1,"{'ok': True, 'value': 3973021821847261, 'stdout': '3973021821847261\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09040594100952148}",1,Compute: 1460028556080252 + 2512993265767009
1381,rod,4,36,36,1,3,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0886831283569336}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 8, 10, 3]"
1382,add,8,32334159,16839590,0,32334159,1,"{'ok': True, 'value': 32334159, 'stdout': '32334159\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09224057197570801}",1,Compute: 15494569 + 16839590
1383,ilp_assign,8,29,46,0,46,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40226149559020996}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1, 16, 21, 12, 13, 24], [5, 19, 12, 5, 20, 8, 13], [11, 7, 17, 21, 18, 4, 10], [15, 7, 19, 22, 15, 5, 9], [2, 6, 7, 23, 16, 18, 7], [2, 13, 21, 12, 16, 17, 14], [8, 7, 21, 3, 1, 5, 16]]"
1384,ilp_partition,4,0,0,1,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08249568939208984}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 2, 8, 4]"
1385,sub,8,988524,988524,1,988524,1,"{'ok': True, 'value': 988524, 'stdout': '988524\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08753299713134766}",1,Compute: 28367961 - 27379437
1386,ilp_partition,16,0,1,0,183,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1064763069152832}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 33, 45, 11, 6, 13, 10, 1, 2, 4, 28, 27, 43, 16, 26, 43]"
1387,sub,2,34,34,1,34,1,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07554340362548828}",1,Compute: 49 - 15
1388,ilp_assign,16,71,114,0,110,0,"{'ok': True, 'value': 71, 'stdout': '71\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37679433822631836}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 42, 44, 1, 6, 31, 20], [19, 22, 20, 15, 35, 32, 42], [24, 39, 34, 39, 39, 22, 9], [5, 45, 6, 5, 4, 12, 28], [37, 27, 32, 36, 25, 39, 12], [45, 41, 43, 7, 26, 35, 15], [24, 5, 25, 47, 2, 20, 33]]"
1389,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08818554878234863}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babddcda""
T = ""dcaadbcb"""
1390,ilp_assign,4,20,18,0,22,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39290475845336914}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 6, 9, 6], [4, 5, 1, 5], [9, 10, 5, 8], [5, 5, 3, 5]]"
1391,mul,8,1103054257301623,1100432456444633,0,111844483595353,0,"{'ok': True, 'value': 1103054257301623, 'stdout': '1103054257301623\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07741832733154297}",1,Compute: 32153627 * 34305749
1392,mul,2,3420,3420,1,3562,0,"{'ok': True, 'value': 3420, 'stdout': '3420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0859365463256836}",1,Compute: 38 * 90
1393,rod,4,20,14,0,11,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07204389572143555}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 1, 8, 11]"
1394,ilp_partition,8,1,1,1,35,0,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09035301208496094}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 11, 22, 23, 4, 19, 15, 3]"
1395,ilp_prod,16,175,234,0,207,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_3szf1e2j/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_3szf1e2j/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16519761085510254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 15, 47, 35, 12, 15]
consumption (rows=resources) = [[1, 9, 3, 1, 12, 1], [1, 3, 9, 6, 4, 14], [7, 10, 13, 10, 2, 14], [14, 6, 15, 9, 5, 1]]
capacity = [48, 36, 61, 45]
upper_bounds = [3, 5, 3, 5, 4, 3]"
1396,knap,2,10,12,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07558655738830566}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 3]
V = [10, 8, 2]
C = 6"
1397,knap,16,467,1043,0,0,0,"{'ok': True, 'value': 467, 'stdout': '467\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08183598518371582}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 4, 1, 29, 22, 22, 11, 15, 32, 1, 26, 3, 19, 28, 1, 19]
V = [19, 18, 52, 1, 55, 63, 19, 26, 16, 41, 64, 56, 9, 41, 46, 27]
C = 127"
1398,knap,2,10,15,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0774078369140625}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 4]
V = [6, 9, 10]
C = 5"
1399,ilp_assign,32,95,187,0,208,0,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3936741352081299}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 67, 89, 3, 89, 66, 30], [7, 1, 58, 78, 68, 25, 34], [86, 55, 8, 84, 80, 96, 35], [14, 29, 26, 12, 30, 28, 80], [73, 60, 49, 22, 27, 63, 35], [71, 22, 90, 89, 63, 14, 73], [67, 46, 1, 95, 50, 46, 28]]"
1400,rod,32,1632,1053,0,43,0,"{'ok': True, 'value': 1632, 'stdout': '1632\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08795046806335449}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [51, 26, 3, 56, 12, 85, 91, 53, 94, 40, 23, 46, 88, 9, 10, 71, 73, 3, 83, 1, 32, 10, 38, 78, 45, 22, 75, 43, 7, 19, 29, 43]"
1401,mul{'ok': True, 'value': 3397574020194140492813764547460773131514536774409648605646356638, 'stdout': '3397574020194140492813764547460773131514536774409648605646356638\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09574580192565918}",1,Compute: 80796856163004843192234165419059 * 42050819568271978837674805698282
1402,lcs,32,19,10,0,1,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08929920196533203}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacadadbaccadcbacdbbdcbbadcaaaba""
T = ""bccdcabbcdbbdadcaccccaddbdabcca"""
1403,ilp_assign,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3724038600921631}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [4, 6]]"
1404,mul,16,9608259909504315253717218407152,,0,97533067561597255557554348,0,"{'ok': True, 'value': 9608259909504315253717218407152, 'stdout': '9608259909504315253717218407152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08928227424621582}",1,Compute: 9057926836105942 * 1060757067633256
1405,sub,4,3141,3141,1,3141,1,"{'ok': True, 'value': 3141, 'stdout': '3141\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0889286994934082}",1,Compute: 8002 - 4861
1406,ilp_partition,16,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22280669212341309}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 7, 14, 40, 29, 29, 21, 34, 22, 14, 29, 48, 18, 26, 5, 13]"
1407,ilp_assign,8,22,56,0,46,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3826565742492676}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 12, 24, 6, 24, 3, 23], [9, 12, 11, 2, 17, 10, 22], [5, 24, 20, 16, 21, 2, 15], [21, 14, 20, 3, 1, 1, 2], [1, 1, 7, 12, 7, 15, 2], [23, 2, 8, 10, 7, 18, 6], [7, 19, 7, 12, 18, 7, 24]]"
1408,knap,16,389,119,0,0,0,"{'ok': True, 'value': 389, 'stdout': '389\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08990955352783203}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 24, 18, 10, 4, 27, 20, 19, 18, 27, 6, 2, 18, 7, 19, 4]
V = [27, 35, 6, 15, 61, 26, 2, 30, 2, 60, 59, 26, 62, 19, 45, 6]
C = 119"
1409,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07253837585449219}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""ad"""
1410,knap,16,470,131,0,1,0,"{'ok': True, 'value': 470, 'stdout': '470\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07972526550292969}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 31, 4, 32, 8, 21, 12, 12, 21, 27, 10, 12, 12, 24, 26, 6]
V = [28, 20, 63, 48, 35, 23, 40, 62, 5, 50, 18, 59, 40, 44, 16, 45]
C = 131"
1411,sub,8,10661192,10661192,1,10661192,1,"{'ok': True, 'value': 10661192, 'stdout': '10661192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07709717750549316}",1,Compute: 57304593 - 46643401
1412,ilp_prod,16,151,160,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_yu_98w3a/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_yu_98w3a/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1469895839691162}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 24, 34, 17, 31, 16]
consumption (rows=resources) = [[9, 12, 8, 5, 8, 6], [16, 5, 10, 5, 12, 6], [10, 14, 1, 14, 11, 11], [15, 10, 9, 10, 10, 3]]
capacity = [35, 64, 38, 62]
upper_bounds = [3, 3, 4, 3, 3, 3]"
1413,add,8,162741255,162741255,1,162741255,1,"{'ok': True, 'value': 162741255, 'stdout': '162741255\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08228707313537598}",1,Compute: 90677850 + 72063405
1414,sub,8,18235666,18235666,1,18235666,1,"{'ok': True, 'value': 18235666, 'stdout': '18235666\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08024382591247559}",1,Compute: 54316145 - 36080479
1415,sub,4,7541,7541,1,7541,1,"{'ok': True, 'value': 7541, 'stdout': '7541\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08764076232910156}",1,Compute: 9787 - 2246
1416,rod,2,10,10,1,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08608627319335938}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 5]"
1417,ilp_partition,2,0,0,1,2,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07496261596679688}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 5, 4]"
1418,knap,4,20,16,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08406233787536621}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 6, 7]
V = [8, 12, 2, 8]
C = 11"
1419,mul,16,5204322517344558399167912845911,4970230548358577663776656,0,1,0,"{'ok': True, 'value': 5204322517344558399167912845911, 'stdout': '5204322517344558399167912845911\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08982276916503906}",1,Compute: 3066955932948873 * 1696901628560607
1420,mul,8,605222190351852,6444444444444,0,60984533330884,0,"{'ok': True, 'value': 605222190351852, 'stdout': '605222190351852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07566714286804199}",1,Compute: 54195972 * 11167291
1421,ilp_partition,16,1,1,1,32,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1977541446685791}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 38, 6, 30, 4, 42, 27, 6, 5, 32, 45, 38, 18, 23, 46, 27]"
1422,ilp_prod,4,33,35,0,36,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d3d63a3c350340e18d56cf69dba95b31-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d3d63a3c350340e18d56cf69dba95b31-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24.75 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16093993186950684}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 5, 11]
consumption (rows=resources) = [[2, 3, 4], [4, 3, 3], [4, 4, 4]]
capacity = [12, 11, 13]
upper_bounds = [3, 3, 3]"
1423,rod,8,112,22,0,1,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08769392967224121}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 8, 13, 6, 4, 8, 10, 10]"
1424,ilp_prod,4,30,33,0,33,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9b83ebb39c60477da0dc44cdaeb872df-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9b83ebb39c60477da0dc44cdaeb872df-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 13.75 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15243220329284668}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8, 11]
consumption (rows=resources) = [[4, 4, 3], [4, 2, 4], [3, 4, 3]]
capacity = [14, 11, 14]
upper_bounds = [3, 3, 3]"
1425,mul{'ok': True, 'value': 1652905343106619608764137367610, 'stdout': '1652905343106619608764137367610\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08300065994262695}",1,Compute: 1608419721349242 * 1027657968356705
1426,knap,32,1684,1024,0,54,0,"{'ok': True, 'value': 1684, 'stdout': '1684\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08477187156677246}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 60, 7, 49, 38, 21, 19, 39, 48, 60, 15, 5, 22, 43, 54, 47, 54, 1, 49, 47, 58, 15, 23, 36, 47, 55, 11, 14, 21, 14, 43]
V = [16, 1, 54, 119, 13, 29, 115, 114, 70, 95, 28, 121, 5, 100, 12, 21, 122, 90, 55, 83, 29, 97, 7, 94, 72, 67, 105, 48, 67, 121, 10, 122]
C = 512"
1427,knap,2,8,11,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08803606033325195}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5]
V = [8, 4, 2]
C = 5"
1428,add,32,80316133612152352347806885839431,12139461313131313131313131313131,0,80315633612152352347807225839431,0,"{'ok': True, 'value': 80316133612152352347806885839431, 'stdout': '80316133612152352347806885839431\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07644367218017578}",1,Compute: 58948305530154519983119302257393 + 21367828081997832364687583582038
1429,rod,2,6,6,1,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08020615577697754}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
1430,sub,32,9416335271859270579921233381384,12788501274364070580011114,0,95556251841858270579915333181384,0,"{'ok': True, 'value': 9416335271859270579921233381384, 'stdout': '9416335271859270579921233381384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07652592658996582}",1,Compute: 52846992875086779817744226634880 - 43430657603227509237822993253496
1431,lcs,32,19,15,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07627987861633301}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daacbddcadcacaadbdcbdadcdbccbdbd""
T = ""aaddadbcbcdddcacbacbdbdaddaaaad"""
1432,knap,4,33,32,0,0,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0846714973449707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 1, 8]
V = [16, 11, 6, 16]
C = 6"
1433,knap,8,142,103,0,0,0,"{'ok': True, 'value': 142, 'stdout': '142\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08669853210449219}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 9, 5, 15, 12, 9, 4, 3]
V = [23, 26, 29, 24, 27, 29, 32, 25]
C = 35"
1434,rod,4,36,7,0,1,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07951521873474121}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 1, 1, 7]"
1435,ilp_prod,16,172,235,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_2185s4cz/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_2185s4cz/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15894651412963867}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 25, 10, 5, 43, 6]
consumption (rows=resources) = [[5, 12, 13, 3, 11, 11], [12, 3, 2, 9, 5, 16], [9, 9, 3, 5, 11, 5], [8, 15, 14, 3, 8, 9]]
capacity = [62, 56, 47, 33]
upper_bounds = [4, 3, 3, 6, 4, 3]"
1436,ilp_assign,4,24,11,0,24,1,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37953758239746094}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5, 3, 10], [12, 4, 2, 3], [12, 11, 10, 11], [7, 9, 10, 12]]"
1437,lcs,32,18,10,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07772588729858398}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccbaabccabadddadabbcdbbabbadadb""
T = ""adacccabdbdabbcacbdbacaaccabcdcac"""
1438,ilp_assign,8,44,56,0,80,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37003517150878906}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 20, 15, 9, 1, 15, 15], [15, 17, 14, 24, 20, 7, 20], [12, 21, 14, 6, 6, 22, 19], [15, 18, 12, 20, 17, 1, 7], [24, 4, 12, 24, 2, 21, 23], [15, 3, 11, 21, 4, 3, 17], [12, 8, 23, 3, 11, 5, 8]]"
1439,lcs,8,5,5,1,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10217428207397461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabcbadb""
T = ""aabbdbcc"""
1440,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07429289817810059}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""dcc"""
1441,lcs,8,3,5,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08561062812805176}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcaaabd""
T = ""bbabdaccc"""
1442,ilp_assign,2,7,7,1,8,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3777329921722412}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [2, 2]]"
1443,knap,4,28,,0,0,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07824468612670898}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 6, 8, 6]
V = [4, 13, 2, 15]
C = 14"
1444,ilp_prod,2,12,21,0,1,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/42450228c2cf4f8f9327dcaf3b479675-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/42450228c2cf4f8f9327dcaf3b479675-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 9.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16453862190246582}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 4]
consumption (rows=resources) = [[3, 2], [3, 3]]
capacity = [10, 10]
upper_bounds = [3, 3]"
1445,ilp_partition,2,0,1,0,2,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07877516746520996}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 6, 2]"
1446,ilp_prod,4,48,39,0,48,1,"{'ok': True, 'value': 9, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9dbea166bda2404d9ec141cf60236ed5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9dbea166bda2404d9ec141cf60236ed5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n9.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17049765586853027}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 12, 9]
consumption (rows=resources) = [[1, 2, 3], [4, 4, 3], [1, 3, 2]]
capacity = [16, 16, 12]
upper_bounds = [4, 4, 5]"
1447,knap,32,1713,1024,0,28,0,"{'ok': True, 'value': 1713, 'stdout': '1713\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08576846122741699}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 17, 60, 32, 14, 6, 19, 42, 53, 51, 14, 54, 10, 2, 28, 56, 31, 38, 31, 35, 10, 58, 10, 19, 24, 61, 45, 56, 39, 16, 41, 5]
V = [83, 37, 66, 56, 120, 112, 36, 87, 18, 1, 80, 31, 61, 121, 110, 25, 82, 60, 3, 122, 71, 66, 47, 61, 32, 127, 6, 24, 28, 123, 39, 51]
C = 504"
1448,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07343840599060059}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabcbbbdabdcdcba""
T = ""ccbcadbbbbcbcac"""
1449,ilp_prod,4,25,33,0,33,0,"{'ok': True, 'value': 11, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d926e03f7ea94895a30d451425b85750-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d926e03f7ea94895a30d451425b85750-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14.1429 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -11 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                11.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n11.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17026591300964355}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 7, 6]
consumption (rows=resources) = [[2, 2, 2], [2, 1, 3], [4, 3, 2]]
capacity = [12, 11, 9]
upper_bounds = [3, 3, 3]"
1450,ilp_prod,4,53,55,0,15,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/aa99a1c8e0984d358de30998c7fc8dc7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/aa99a1c8e0984d358de30998c7fc8dc7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15709662437438965}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 11, 3]
consumption (rows=resources) = [[2, 2, 4], [1, 3, 4], [2, 3, 1]]
capacity = [11, 11, 15]
upper_bounds = [5, 3, 3]"
1451,knap,2,12,11,0,2,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07378172874450684}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 5]
V = [2, 10, 7]
C = 4"
1452,knap,8,126,105,0,0,0,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07791662216186523}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 7, 9, 1, 16, 15, 5, 5]
V = [21, 26, 29, 18, 30, 24, 26, 6]
C = 31"
1453,rod,32,2240,1055,0,21,0,"{'ok': True, 'value': 2240, 'stdout': '2240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07499408721923828}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [70, 37, 96, 57, 36, 66, 92, 12, 89, 1, 94, 3, 13, 35, 85, 83, 62, 51, 75, 22, 74, 87, 61, 25, 40, 43, 53, 19, 10, 44, 45, 21]"
1454,lcs,8,4,4,1,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10967421531677246}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbadcacd""
T = ""ddadcdbcb"""
1455,ilp_prod,32,273,1003,0,253,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ty7s1o_t/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ty7s1o_t/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15372943878173828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 91, 53, 16, 85, 78]
consumption (rows=resources) = [[9, 15, 14, 26, 17, 4], [25, 24, 15, 32, 26, 27], [28, 22, 14, 29, 25, 17], [9, 3, 32, 1, 26, 23]]
capacity = [128, 73, 84, 91]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1456,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08622241020202637}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""adc"""
1457,mul,32,637744318364276774748683120379116891397415104494055436009747131,64345265455524314318898958513211,0,657426416476666244664486688958204444441,0,"{'ok': True, 'value': 637744318364276774748683120379116891397415104494055436009747131, 'stdout': '637744318364276774748683120379116891397415104494055436009747131\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08589291572570801}",1,Compute: 27876507718720125924349703805291 * 22877482531142429327099184992241
1458,rod,8,36,24,0,1,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08201050758361816}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 3, 14, 12, 9, 2, 5, 23]"
1459,ilp_partition,4,2,0,0,1210,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08952140808105469}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 2, 11, 4]"
1460,sub,16,8462842683366504,1278828779161405,0,8462848683366504,0,"{'ok': True, 'value': 8462842683366504, 'stdout': '8462842683366504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0783543586730957}",1,Compute: 9741671462527909 - 1278828779161405
1461,rod,32,1344,1055,0,40,0,"{'ok': True, 'value': 1344, 'stdout': '1344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11238956451416016}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [42, 5, 89, 6, 89, 69, 49, 17, 5, 2, 45, 7, 83, 42, 26, 6, 21, 18, 55, 77, 50, 64, 81, 89, 94, 63, 85, 76, 39, 67, 37, 40]"
1462,ilp_partition,8,0,1,0,<callable_object min_difference>,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09244251251220703}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 6, 7, 1, 2, 8, 6, 14]"
1463,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07418537139892578}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""b"""
1464,ilp_prod,4,36,42,0,The code will print the maximum profit that can be achieved given the constraints.,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7eff8a1d67e249138e1b071c965678d3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7eff8a1d67e249138e1b071c965678d3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16196131706237793}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 3, 11]
consumption (rows=resources) = [[2, 3, 1], [4, 3, 1], [3, 1, 4]]
capacity = [9, 9, 13]
upper_bounds = [3, 3, 3]"
1465,sub,32,6457575227282184087746506398811,860596120651059729153760,0,64567574227282184087746506401811,0,"{'ok': True, 'value': 6457575227282184087746506398811, 'stdout': '6457575227282184087746506398811\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08851742744445801}",1,Compute: 79480705759596120651059729153760 - 73023130532313936563313222754949
1466,mul,4,3620762,1853,0,3633362,0,"{'ok': True, 'value': 3620762, 'stdout': '3620762\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07679128646850586}",1,Compute: 1954 * 1853
1467,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09040331840515137}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 85, 38, 85, 77, 21, 85, 2, 3, 77, 57, 10, 24, 18, 66, 73, 72, 44, 77, 14, 96, 57, 93, 24]"
1468,sub,32,17903062767504362949651163277949,-17902062763494363050648163277950,0,17903062767504362949651163277949,1,"{'ok': True, 'value': 17903062767504362949651163277949, 'stdout': '17903062767504362949651163277949\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07641029357910156}",1,Compute: 55950209736889236824259083994166 - 38047146969384873874607920716217
1469,ilp_assign,16,42,105,0,105,0,"{'ok': True, 'value': 42, 'stdout': '42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3775191307067871}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 10, 7, 32, 44, 18, 45], [40, 43, 31, 34, 32, 10, 29], [43, 36, 41, 5, 9, 46, 22], [38, 2, 6, 39, 28, 25, 37], [1, 34, 24, 47, 20, 39, 22], [41, 36, 3, 39, 12, 15, 10], [44, 29, 1, 16, 29, 24, 5]]"
1470,ilp_assign,4,23,0,0,28,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40903449058532715}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 12, 1, 3], [5, 9, 12, 10], [7, 11, 3, 10], [8, 12, 5, 10]]"
1471,ilp_assign,8,44,70,0,91,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38463687896728516}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 22, 9, 6, 24, 19, 10], [10, 16, 17, 11, 17, 21, 20], [14, 4, 2, 3, 3, 10, 20], [14, 21, 13, 12, 11, 19, 3], [23, 5, 18, 19, 24, 15, 17], [14, 8, 18, 9, 24, 14, 11], [21, 10, 6, 2, 4, 24, 4]]"
1472,rod,16,512,46,0,150,0,"{'ok': True, 'value': 512, 'stdout': '512\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07797670364379883}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [32, 21, 2, 48, 22, 44, 21, 20, 44, 42, 25, 6, 13, 34, 48, 46]"
1473,knap,8,93,115,0,0,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0887444019317627}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 13, 3, 15, 10, 11, 7, 14]
V = [31, 5, 25, 17, 1, 7, 20, 15]
C = 42"
1474,mul,32,2838240257987645328733256680295921424109227332180165994602404056,280489461164582442112012588261570424368628442568400715568640000000000000000,0,286362432599699697756498282558664444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 2838240257987645328733256680295921424109227332180165994602404056, 'stdout': '2838240257987645328733256680295921424109227332180165994602404056\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08505129814147949}",1,Compute: 31207883831711596002562075797686 * 90946258108779369834839940161796
1475,add,32,131687948965287340371268625041386,118,0,131687948965287339411268605041386,0,"{'ok': True, 'value': 131687948965287340371268625041386, 'stdout': '131687948965287340371268625041386\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07530903816223145}",1,Compute: 79929439937372973812667475289459 + 51758509027914366558601149751927
1476,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_d5n7_d19/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_d5n7_d19/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08357405662536621}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 2]"
1477,sub,16,24070557123889,24060557123889,0,-240705571238889,0,"{'ok': True, 'value': 24070557123889, 'stdout': '24070557123889\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0926516056060791}",1,Compute: 1462939227439970 - 1438868670316081
1478,ilp_prod,8,62,84,0,1,0,"{'ok': True, 'value': 62, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bacaa81bbeac402e995acf6564acd3f4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bacaa81bbeac402e995acf6564acd3f4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 73.4898 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -62 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 2 rows 2 columns\nCbc0031I 3 added rows had average density of 3.6666667\nCbc0013I At root node, 7 cuts changed objective from -73.489796 to -62.000005 in 12 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 2.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 25 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -62, took 21 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -73.4898 to -62\nProbing was tried 12 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 12 times and created 25 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                62.00000000\nEnumerated nodes:               0\nTotal iterations:               21\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n62.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16422772407531738}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 12, 6, 12]
consumption (rows=resources) = [[2, 2, 6, 8], [5, 8, 5, 8], [8, 3, 5, 5], [2, 5, 1, 7]]
capacity = [20, 31, 26, 24]
upper_bounds = [3, 3, 3, 3]"
1479,ilp_assign,16,61,105,0,110,0,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.384462833404541}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[42, 6, 19, 13, 24, 11, 10], [47, 21, 21, 21, 11, 42, 48], [12, 20, 36, 33, 17, 2, 15], [6, 34, 31, 23, 30, 22, 24], [4, 7, 42, 26, 46, 27, 9], [8, 19, 3, 43, 35, 26, 37], [23, 17, 42, 26, 17, 28, 39]]"
1480,ilp_prod,16,156,150,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_37vj1heq/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_37vj1heq/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14677190780639648}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 12, 16, 3, 19, 39]
consumption (rows=resources) = [[13, 14, 12, 15, 13, 5], [13, 7, 15, 2, 10, 9], [9, 2, 7, 13, 15, 8], [8, 9, 5, 11, 2, 1]]
capacity = [63, 39, 41, 41]
upper_bounds = [3, 4, 3, 3, 3, 4]"
1481,ilp_assign,16,50,105,0,114,0,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40409278869628906}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 14, 28, 31, 48, 6, 14], [34, 12, 37, 48, 48, 26, 21], [9, 13, 33, 15, 42, 9, 5], [2, 48, 8, 47, 30, 31, 12], [2, 38, 42, 30, 17, 32, 48], [37, 45, 8, 44, 1, 17, 9], [15, 30, 36, 16, 45, 5, 20]]"
1482,ilp_partition,4,3,1,0,9,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08772993087768555}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 3, 3, 5]"
1483,rod,2,4,2,0,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9qbqb7lm/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_9qbqb7lm/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09170842170715332}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 2]"
1484,knap,2,10,19,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0872499942779541}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 2]
V = [8, 10, 9]
C = 6"
1485,rod,32,2240,1055,0,1,0,"{'ok': True, 'value': 2240, 'stdout': '2240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07489657402038574}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [70, 73, 77, 83, 23, 58, 78, 6, 93, 37, 73, 46, 62, 6, 63, 54, 41, 28, 16, 27, 96, 64, 59, 21, 53, 75, 76, 14, 15, 11, 9, 30]"
1486,rod,32,1024,1045,0,1,0,"{'ok': True, 'value': 1024, 'stdout': '1024\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08849191665649414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [17, 64, 58, 79, 40, 2, 34, 76, 40, 53, 54, 50, 20, 30, 67, 76, 38, 30, 18, 8, 40, 25, 51, 45, 93, 57, 18, 10, 37, 64, 55, 35]"
1487,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07431697845458984}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""da"""
1488,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 74, 'stdout': '74\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07894635200500488}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 11, 10, 9, 19, 11, 19, 13]"
1489,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08142352104187012}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 70, 17, 67, 65, 2, 80, 28, 32, 52, 77, 26, 20, 7, 88, 50, 44, 51, 68, 75, 37, 53, 96, 7]"
1490,sub,2,28,28,1,28,1,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08725237846374512}",1,Compute: 39 - 11
1491,ilp_assign,4,13,18,0,28,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3777346611022949}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 10, 8, 2], [5, 1, 9, 5], [12, 9, 6, 4], [4, 4, 12, 4]]"
1492,ilp_assign,16,59,105,0,105,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38781285285949707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 38, 23, 16, 45, 13, 32], [34, 20, 8, 11, 31, 17, 6], [7, 25, 21, 2, 6, 22, 3], [36, 13, 36, 6, 27, 13, 7], [21, 30, 31, 7, 38, 28, 33], [22, 6, 14, 35, 44, 48, 37], [25, 12, 36, 23, 11, 4, 30]]"
1493,mul{'ok': True, 'value': 1739241783789702660596243079949488569588740079480548807931480547, 'stdout': '1739241783789702660596243079949488569588740079480548807931480547\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07534933090209961}",1,Compute: 19841861110496332906137306969103 * 87655173781538304168448112781549
1494,ilp_partition,4,1,1,1,90,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_k5b8vnis/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_k5b8vnis/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.106292724609375}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 5, 11]"
1495,ilp_partition,4,0,0,1,24,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07191205024719238}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 10, 10]"
1496,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09012103080749512}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacc""
T = ""acad"""
1497,lcs,4,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07359528541564941}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccc""
T = ""ddad"""
1498,knap,4,18,26,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07337665557861328}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 1, 4]
V = [11, 16, 2, 2]
C = 7"
1499,sub,16,2732718921885823,2732718921885823,1,2732719021885823,0,"{'ok': True, 'value': 2732718921885823, 'stdout': '2732718921885823\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07666420936584473}",1,Compute: 7194078500416948 - 4461359578531125
1500,ilp_prod,2,30,15,0,24,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/79720307964f438b8905e0daa1e0c21a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/79720307964f438b8905e0daa1e0c21a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15351223945617676}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[2, 1], [2, 2]]
capacity = [6, 8]
upper_bounds = [3, 4]"
1501,knap,8,91,103,0,0,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0914454460144043}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 8, 16, 9, 2, 13, 12, 13]
V = [30, 27, 14, 4, 19, 15, 10, 10]
C = 43"
1502,rod,32,2784,1074,0,10,0,"{'ok': True, 'value': 2784, 'stdout': '2784\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0871131420135498}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [87, 82, 41, 24, 4, 90, 51, 10, 43, 75, 16, 90, 93, 69, 5, 37, 47, 13, 13, 15, 78, 28, 71, 32, 5, 4, 10, 1, 17, 30, 81, 93]"
1503,ilp_assign,8,21,11,0,0,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7886c423724940c48f094568f3343ce1-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/7886c423724940c48f094568f3343ce1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 21\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 21 - took 0.00 seconds\nCbc0012I Integer solution of 21 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 21, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 21 to 21\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1531848907470703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 19, 11, 17, 21, 1, 7], [3, 24, 16, 15, 3, 6, 9], [17, 1, 14, 10, 19, 18, 19], [7, 6, 11, 4, 24, 19, 10], [23, 10, 7, 19, 17, 4, 1], [9, 7, 7, 8, 18, 7, 16], [11, 13, 20, 16, 24, 4, 12]]"
1504,add,2,97,97,1,97,1,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08708906173706055}",1,Compute: 87 + 10
1505,sub,4,8827,8827,1,8827,1,"{'ok': True, 'value': 8827, 'stdout': '8827\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09020543098449707}",1,Compute: 9914 - 1087
1506,ilp_assign,16,58,105,0,105,0,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3625202178955078}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 32, 29, 28, 9, 21, 32], [26, 14, 7, 47, 3, 46, 23], [27, 6, 18, 35, 37, 21, 1], [23, 2, 7, 11, 15, 37, 3], [9, 46, 27, 35, 48, 36, 10], [28, 24, 34, 20, 47, 12, 17], [4, 21, 26, 24, 3, 42, 4]]"
1507,rod,32,2080,84,0,1,0,"{'ok': True, 'value': 2080, 'stdout': '2080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09361505508422852}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [65, 5, 2, 67, 46, 22, 44, 36, 22, 52, 73, 49, 86, 44, 5, 5, 90, 38, 64, 51, 68, 84, 45, 96, 10, 47, 42, 77, 52, 76, 28, 27]"
1508,add,8,81719561,81719561,1,81719561,1,"{'ok': True, 'value': 81719561, 'stdout': '81719561\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0968480110168457}",1,Compute: 28815629 + 52903932
1509,ilp_partition,4,1,1,1,31,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07494950294494629}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 12, 8, 10]"
1510,sub,16,857381301596035,2,0,857381301596035,1,"{'ok': True, 'value': 857381301596035, 'stdout': '857381301596035\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08904695510864258}",1,Compute: 3529371719908815 - 2671990418312780
1511,ilp_assign,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3838505744934082}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3], [6, 2]]"
1512,ilp_prod,16,218,165,0,6,0,"{'ok': True, 'value': 74, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e8f27642deff43cda119700cbee5805e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e8f27642deff43cda119700cbee5805e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 21 COLUMNS\nAt line 136 RHS\nAt line 153 BOUNDS\nAt line 160 ENDATA\nProblem MODEL has 16 rows, 6 columns and 96 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 90.1875 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -74 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                74.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n74.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16286849975585938}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [37, 29, 42, 19, 6, 46]
consumption (rows=resources) = [[9, 2, 6, 12, 11, 6], [16, 11, 5, 2, 3, 12], [10, 16, 10, 15, 7, 3], [5, 7, 16, 9, 10, 2]]
capacity = [64, 39, 43, 55]
upper_bounds = [3, 3, 3, 3, 5, 3]"
1513,add,32,119725383695077244072604265735465,119725383695077243672604265735465,0,120000000000000000000000000000000,0,"{'ok': True, 'value': 119725383695077244072604265735465, 'stdout': '119725383695077244072604265735465\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09743022918701172}",1,Compute: 66680153418288984767078914440375 + 53045230276788259305525351295090
1514,knap,16,439,152,0,0,0,"{'ok': True, 'value': 439, 'stdout': '439\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07847929000854492}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 32, 28, 21, 8, 30, 28, 17, 1, 30, 24, 1, 19, 21, 10, 26]
V = [44, 64, 12, 43, 49, 7, 2, 59, 64, 20, 32, 14, 44, 15, 26, 17]
C = 152"
1515,rod,32,1216,1050,0,32,0,"{'ok': True, 'value': 1216, 'stdout': '1216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07556891441345215}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [38, 44, 20, 20, 87, 33, 41, 3, 8, 57, 93, 19, 7, 52, 69, 4, 78, 36, 62, 75, 16, 13, 20, 44, 80, 36, 86, 86, 34, 13, 7, 44]"
1516,ilp_partition,16,0,1,0,20,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1994762420654297}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [39, 16, 29, 37, 20, 45, 6, 13, 38, 47, 16, 48, 14, 26, 1, 47]"
1517,ilp_partition,16,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19235897064208984}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 43, 34, 32, 23, 15, 28, 17, 14, 38, 29, 24, 31, 16, 20, 13]"
1518,mul,8,3810702024830811,9940458,0,0,0,"{'ok': True, 'value': 3810702024830811, 'stdout': '3810702024830811\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09071803092956543}",1,Compute: 77518221 * 49158791
1519,ilp_partition,8,1,1,1,19,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0740060806274414}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 16, 19, 15, 14, 12, 10, 9]"
1520,knap,32,1463,1047,0,1,0,"{'ok': True, 'value': 1463, 'stdout': '1463\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08295345306396484}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [59, 51, 25, 36, 48, 48, 41, 53, 28, 1, 2, 19, 50, 8, 13, 49, 40, 7, 1, 56, 64, 8, 52, 37, 13, 53, 11, 12, 11, 28, 40, 16]
V = [17, 11, 71, 73, 71, 73, 102, 49, 79, 18, 46, 88, 7, 97, 48, 123, 66, 26, 43, 29, 84, 37, 102, 42, 27, 27, 41, 89, 28, 38, 81, 100]
C = 490"
1521,mul{'ok': True, 'value': 2738327609818864710985915915564454166064597984005848232504945332, 'stdout': '2738327609818864710985915915564454166064597984005848232504945332\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08791375160217285}",1,Compute: 86398059878415672587991819819686 * 31694318294558894998475258916862
1522,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21693825721740723}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [92, 40, 13, 51, 63, 95, 86, 33, 29, 28, 47, 82, 93, 8, 7, 58, 91, 88, 27, 87, 77, 4, 52, 59]"
1523,knap,4,16,16,1,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07886838912963867}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 4, 7]
V = [3, 9, 7, 8]
C = 10"
1524,ilp_partition,2,3,1,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_p40cifib/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_p40cifib/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07729625701904297}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 1, 6, 1]"
1525,ilp_assign,32,103,185,0,1,0,"{'ok': True, 'value': 103, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e59cd10ad0504e02ab0f56a7c41d9a24-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/e59cd10ad0504e02ab0f56a7c41d9a24-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 103 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 103\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 103 - took 0.00 seconds\nCbc0012I Integer solution of 103 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 103, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 103 to 103\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                103.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 103.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15259742736816406}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 86, 11, 21, 29, 8, 51], [29, 94, 58, 58, 59, 10, 41], [16, 30, 96, 1, 11, 90, 41], [68, 20, 7, 15, 84, 36, 68], [25, 65, 59, 29, 44, 42, 79], [35, 35, 93, 80, 17, 51, 34], [80, 44, 96, 32, 35, 62, 19]]"
1526,ilp_prod,8,85,103,0,8,0,"{'ok': True, 'value': 85, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7ed2d04e63c24fb6ae47dca63a0353bd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7ed2d04e63c24fb6ae47dca63a0353bd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 43 RHS\nAt line 49 BOUNDS\nAt line 54 ENDATA\nProblem MODEL has 5 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 90.15 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -78 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 2 columns\nCbc0012I Integer solution of -85 found by DiveCoefficient after 7 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3\nCbc0013I At root node, 3 cuts changed objective from -90.15 to -85 in 5 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 8 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 12 row cuts average 2.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -85, took 7 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -90.15 to -85\nProbing was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 5 times and created 8 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 5 times and created 12 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                85.00000000\nEnumerated nodes:               0\nTotal iterations:               7\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n85.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15425515174865723}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 5, 16, 16]
consumption (rows=resources) = [[2, 7, 6, 3], [8, 8, 7, 5], [8, 8, 4, 4], [4, 3, 1, 5]]
capacity = [16, 30, 30, 21]
upper_bounds = [3, 3, 3, 4]"
1527,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19582557678222656}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 13, 82, 93, 20, 4, 43, 22, 68, 55, 87, 65, 66, 95, 95, 49, 64, 3, 75, 89, 67, 62, 65, 28]"
1528,ilp_prod,4,33,45,0,30,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/27d850b6346f419cb8291116ba365018-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/27d850b6346f419cb8291116ba365018-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15443921089172363}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6, 7]
consumption (rows=resources) = [[4, 3, 1], [3, 2, 2], [2, 1, 2]]
capacity = [15, 10, 8]
upper_bounds = [3, 5, 4]"
1529,mul,16,38348510734546495112075231714778,38193489655659213327,0,3815434597895784544464446,0,"{'ok': True, 'value': 38348510734546495112075231714778, 'stdout': '38348510734546495112075231714778\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07584333419799805}",1,Compute: 6106233337099914 * 6280223603895177
1530,ilp_assign,8,25,56,0,80,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3971869945526123}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 16, 15, 24, 1, 16, 9], [10, 9, 24, 13, 16, 4, 3], [10, 21, 13, 14, 7, 8, 17], [5, 3, 23, 23, 24, 10, 7], [4, 12, 9, 5, 8, 12, 12], [6, 24, 4, 4, 24, 7, 10], [8, 21, 3, 2, 11, 20, 24]]"
1531,add,16,8398416997912907,8398416997912907,1,8408417097713907,0,"{'ok': True, 'value': 8398416997912907, 'stdout': '8398416997912907\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07425904273986816}",1,Compute: 1449953609992012 + 6948463387920895
1532,ilp_assign,32,132,187,0,209,0,"{'ok': True, 'value': 132, 'stdout': '132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3849978446960449}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[53, 96, 38, 23, 36, 35, 33], [78, 22, 19, 24, 61, 22, 10], [73, 13, 66, 87, 75, 72, 1], [34, 75, 46, 87, 22, 3, 13], [89, 20, 27, 42, 59, 87, 45], [54, 9, 20, 85, 33, 10, 48], [37, 85, 72, 12, 32, 93, 68]]"
1533,knap,8,111,160,0,8,0,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07674288749694824}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 9, 16, 12, 6, 8, 2, 10]
V = [29, 30, 19, 16, 1, 20, 31, 10]
C = 34"
1534,mul,8,5015271878718375,303430690,0,404715635,0,"{'ok': True, 'value': 5015271878718375, 'stdout': '5015271878718375\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0772709846496582}",1,Compute: 86722485 * 57831275
1535,knap,32,1943,1605,0,34,0,"{'ok': True, 'value': 1943, 'stdout': '1943\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08145976066589355}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 53, 34, 30, 2, 18, 3, 17, 53, 35, 15, 62, 46, 34, 17, 7, 33, 52, 8, 47, 29, 51, 59, 3, 62, 19, 27, 35, 4, 17, 5, 25]
V = [78, 114, 65, 69, 14, 108, 97, 114, 77, 84, 108, 36, 57, 16, 128, 102, 63, 22, 113, 74, 70, 100, 7, 38, 118, 57, 118, 115, 88, 51, 57, 102]
C = 469"
1536,lcs,8,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0760946273803711}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badddddd""
T = ""dbbdacbd"""
1537,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08798432350158691}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""c"""
1538,ilp_prod,2,35,22,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/18ffff2ff06c4a7a9c543b2b1700b4f8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/18ffff2ff06c4a7a9c543b2b1700b4f8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.161271333694458}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4]
consumption (rows=resources) = [[2, 3], [1, 2]]
capacity = [10, 6]
upper_bounds = [5, 3]"
1539,knap,32,1794,1044,0,64,0,"{'ok': True, 'value': 1794, 'stdout': '1794\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08353495597839355}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 55, 57, 24, 9, 6, 17, 35, 23, 43, 37, 21, 33, 64, 49, 32, 61, 44, 15, 29, 10, 31, 45, 40, 8, 28, 60, 1, 9, 63, 14, 50]
V = [4, 52, 104, 86, 91, 119, 63, 75, 83, 103, 46, 61, 128, 47, 59, 106, 48, 44, 48, 108, 104, 68, 105, 83, 106, 57, 72, 35, 105, 46, 13, 22]
C = 512"
1540,add,8,68452967,8554997,0,68452967,1,"{'ok': True, 'value': 68452967, 'stdout': '68452967\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07625579833984375}",1,Compute: 53522444 + 14930523
1541,ilp_partition,16,0,1,0,0,1,"{'ok': True, 'value': 318, 'stdout': '318\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08160901069641113}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 20, 1, 45, 43, 20, 32, 7, 12, 5, 30, 15, 16, 48, 20, 2]"
1542,mul,4,35916856,114,0,36881808,0,"{'ok': True, 'value': 35916856, 'stdout': '35916856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07552671432495117}",1,Compute: 4952 * 7253
1543,knap,8,110,103,0,1,0,"{'ok': True, 'value': 110, 'stdout': '110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07590675354003906}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 2, 4, 6, 2, 1, 11, 11]
V = [3, 11, 27, 29, 2, 28, 26, 8]
C = 23"
1544,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07746148109436035}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [79, 84, 63, 56, 39, 82, 26, 4, 24, 4, 75, 37, 56, 58, 66, 90, 71, 72, 55, 32, 44, 95, 37, 71]"
1545,add,4,16125,35,0,16125,1,"{'ok': True, 'value': 16125, 'stdout': '16125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0798490047454834}",1,Compute: 7054 + 9071
1546,mul{'ok': True, 'value': 1077217691239571688566571972144872033662327188494288962623650510, 'stdout': '1077217691239571688566571972144872033662327188494288962623650510\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08676767349243164}",1,Compute: 21230465254911170435852070196790 * 50739240911848723082633560616869
1547,rod,8,56,24,0,1,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07644367218017578}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [6, 3, 22, 19, 17, 18, 7, 2]"
1548,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19815564155578613}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 80, 80, 54, 27, 75, 42, 80, 39, 44, 25, 83, 72, 51, 33, 57, 2, 66, 9, 9, 80, 67, 35, 86]"
1549,add,4,11407,24,0,11407,1,"{'ok': True, 'value': 11407, 'stdout': '11407\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07807540893554688}",1,Compute: 6391 + 5016
1550,ilp_assign,4,10,36,0,11,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3956265449523926}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 10, 3, 1], [9, 4, 11, 4], [3, 2, 5, 9], [1, 1, 6, 5]]"
1551,ilp_assign,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3710513114929199}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [4, 2]]"
1552,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07559347152709961}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 4]"
1553,knap,8,80,100,0,22,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08206868171691895}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 6, 15, 5, 10, 13, 5, 11]
V = [22, 17, 1, 10, 13, 17, 14, 1]
C = 33"
1554,ilp_assign,16,83,105,0,105,0,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36678600311279297}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[29, 35, 27, 27, 33, 31, 30], [31, 28, 3, 1, 26, 5, 2], [4, 11, 33, 8, 44, 1, 46], [34, 30, 13, 12, 18, 41, 35], [43, 36, 29, 38, 1, 31, 18], [36, 23, 35, 8, 27, 48, 2], [35, 37, 33, 44, 36, 27, 27]]"
1555,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22589468955993652}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [58, 66, 75, 1, 66, 67, 33, 22, 20, 3, 48, 49, 82, 81, 5, 13, 12, 88, 93, 20, 62, 3, 71, 29]"
1556,mul,16,15885115509998949590211270764952,6,0,158466645554344584984466464,0,"{'ok': True, 'value': 15885115509998949590211270764952, 'stdout': '15885115509998949590211270764952\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07557034492492676}",1,Compute: 2092179646380584 * 7592615451297303
1557,ilp_prod,4,51,39,0,33,0,"{'ok': True, 'value': 22, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1b194ef715ab4700b414217fe65270fb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1b194ef715ab4700b414217fe65270fb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 22 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -22 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                22.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n22.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16557550430297852}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 9, 10]
consumption (rows=resources) = [[2, 1, 4], [1, 4, 1], [2, 1, 4]]
capacity = [9, 12, 8]
upper_bounds = [4, 3, 3]"
1558,add,32,107014565270178584938748130418411,0,0,107014565270178584938748190418411,0,"{'ok': True, 'value': 107014565270178584938748130418411, 'stdout': '107014565270178584938748130418411\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08062887191772461}",1,Compute: 40776899662107562291751812943789 + 66237665608071022646996317474622
1559,mul,4,86293998,240,0,87396618,0,"{'ok': True, 'value': 86293998, 'stdout': '86293998\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08660721778869629}",1,Compute: 9261 * 9318
1560,ilp_prod,32,245,106,0,234,0,"{'ok': True, 'value': 116, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c823f6a6467848aaa5b291e8f8640151-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c823f6a6467848aaa5b291e8f8640151-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 148 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -116 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                116.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n116.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16322660446166992}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [58, 34, 40, 27, 52, 23]
consumption (rows=resources) = [[13, 1, 8, 5, 20, 28], [12, 28, 28, 14, 11, 28], [28, 20, 23, 5, 14, 25], [29, 14, 5, 22, 14, 23]]
capacity = [68, 123, 107, 74]
upper_bounds = [3, 4, 4, 3, 3, 3]"
1561,mul{'ok': True, 'value': 4338046593796395577055216075957387181280815174480953802893199542, 'stdout': '4338046593796395577055216075957387181280815174480953802893199542\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09514904022216797}",1,Compute: 71514651259625681672493580458998 * 60659550419222747091606678205729
1562,ilp_prod,4,96,36,0,36,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ed2a081f58b9476797de5c99dd8fd2fb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ed2a081f58b9476797de5c99dd8fd2fb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 31 RHS\nAt line 36 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15631699562072754}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 12, 12]
consumption (rows=resources) = [[4, 1, 4], [3, 1, 2], [2, 1, 1]]
capacity = [8, 9, 16]
upper_bounds = [3, 8, 3]"
1563,ilp_assign,32,67,110,0,105,0,"{'ok': True, 'value': 67, 'stdout': '67\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3831980228424072}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 49, 26, 53, 76, 29, 8], [12, 15, 8, 8, 2, 59, 14], [48, 27, 44, 70, 21, 10, 74], [38, 7, 19, 11, 90, 53, 23], [35, 53, 3, 74, 32, 33, 20], [88, 55, 63, 63, 5, 59, 69], [71, 22, 53, 34, 91, 84, 45]]"
1564,mul,32,616589935893211799914621915165224625585968642644106451211669716,5997878419976329437563777447779,0,600078496686625426666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 616589935893211799914621915165224625585968642644106451211669716, 'stdout': '616589935893211799914621915165224625585968642644106451211669716\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08907246589660645}",1,Compute: 14428830511802085966072934661956 * 42733188624599272558000543943461
1565,mul,2,286,8,0,286,1,"{'ok': True, 'value': 286, 'stdout': '286\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08788084983825684}",1,Compute: 26 * 11
1566,add,8,84459193,84459193,1,84459193,1,"{'ok': True, 'value': 84459193, 'stdout': '84459193\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08026742935180664}",1,Compute: 21533485 + 62925708
1567,ilp_assign,32,240,216,0,207,0,"{'ok': True, 'value': 240, 'stdout': '240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.367448091506958}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 44, 92, 31, 75, 33, 35], [55, 46, 79, 55, 91, 84, 60], [73, 16, 19, 30, 40, 84, 23], [69, 6, 88, 86, 30, 87, 16], [23, 45, 30, 78, 71, 25, 72], [16, 86, 50, 43, 72, 96, 75], [60, 85, 82, 85, 91, 68, 73]]"
1568,ilp_prod,16,208,1050,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_inlryz40/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_inlryz40/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1490483283996582}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 43, 32, 36, 27, 25]
consumption (rows=resources) = [[8, 5, 6, 6, 9, 10], [8, 8, 16, 5, 6, 12], [5, 9, 15, 10, 5, 2], [9, 10, 10, 8, 4, 11]]
capacity = [41, 37, 50, 50]
upper_bounds = [4, 4, 3, 5, 4, 3]"
1569,add,8,93824542,93824542,1,93824542,1,"{'ok': True, 'value': 93824542, 'stdout': '93824542\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08358025550842285}",1,Compute: 64996998 + 28827544
1570,sub,8,24536787,24536787,1,24536787,1,"{'ok': True, 'value': 24536787, 'stdout': '24536787\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08586239814758301}",1,Compute: 73778691 - 49241904
1571,ilp_partition,2,2,0,0,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08587312698364258}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 5, 3]"
1572,lcs,16,8,7,0,15,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0820314884185791}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcddacaacbbadcda""
T = ""abbdccdcaaaaaba"""
1573,knap,2,9,13,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07871460914611816}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 3]
V = [7, 9, 3]
C = 5"
1574,sub,4,7786,7786,1,7786,1,"{'ok': True, 'value': 7786, 'stdout': '7786\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09061217308044434}",1,Compute: 9448 - 1662
1575,knap,8,80,103,0,0,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07946205139160156}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 10, 15, 14, 10, 12, 11, 9]
V = [15, 30, 26, 22, 3, 14, 7, 9]
C = 46"
1576,sub,32,33999856601509678949401390556121,47410856201909698959401655553261,0,33999866601509679050401390556121,0,"{'ok': True, 'value': 33999856601509678949401390556121, 'stdout': '33999856601509678949401390556121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08583688735961914}",1,Compute: 80690432903004728729399283492148 - 46690576301495049779997892936027
1577,add,8,135370956,543610161,0,135370956,1,"{'ok': True, 'value': 135370956, 'stdout': '135370956\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08415007591247559}",1,Compute: 45693255 + 89677701
1578,rod,16,229,65,0,65,0,"{'ok': True, 'value': 229, 'stdout': '229\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08739757537841797}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [9, 20, 44, 45, 1, 27, 7, 47, 38, 47, 5, 42, 39, 29, 33, 37]"
1579,rod,4,36,12,0,12,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07729530334472656}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 8, 3, 12]"
1580,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08504176139831543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddca""
T = ""add"""
1581,add,16,9719180551768014,98049173131,0,21937567337767404,0,"{'ok': True, 'value': 9719180551768014, 'stdout': '9719180551768014\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07944703102111816}",1,Compute: 8361583131101416 + 1357597420666598
1582,rod,2,8,5,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07515740394592285}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
1583,knap,32,1493,2263,0,2,0,"{'ok': True, 'value': 1493, 'stdout': '1493\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08461499214172363}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 20, 61, 46, 11, 40, 41, 34, 16, 28, 40, 42, 50, 3, 51, 24, 20, 29, 18, 25, 60, 28, 20, 43, 1, 50, 13, 53, 26, 38, 37, 55]
V = [54, 70, 75, 72, 92, 40, 71, 9, 78, 80, 108, 71, 84, 52, 41, 21, 10, 21, 128, 98, 15, 53, 39, 27, 44, 51, 75, 96, 67, 37, 60, 127]
C = 530"
1584,mul,16,22909201245937506908602784254262,2295997033936080200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,2305843009213693952,0,"{'ok': True, 'value': 22909201245937506908602784254262, 'stdout': '22909201245937506908602784254262\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07411575317382812}",1,Compute: 9602221865506121 * 2385822944607622
1585,knap,8,137,140,0,8,0,"{'ok': True, 'value': 137, 'stdout': '137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08606886863708496}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 1, 13, 3, 3, 8, 3, 14]
V = [29, 20, 3, 10, 32, 32, 24, 10]
C = 29"
1586,sub,2,12,12,1,12,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08026480674743652}",1,Compute: 33 - 21
1587,rod,32,2208,1053,0,70,0,"{'ok': True, 'value': 2208, 'stdout': '2208\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07442355155944824}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [69, 13, 74, 35, 55, 32, 55, 42, 65, 3, 74, 88, 49, 78, 34, 34, 39, 48, 14, 79, 64, 34, 64, 19, 16, 82, 53, 61, 40, 2, 69, 70]"
1588,ilp_prod,2,12,30,0,30,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0d93c38c7d3441448934f208bd463fc5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0d93c38c7d3441448934f208bd463fc5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16100740432739258}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[2, 2], [3, 3]]
capacity = [6, 6]
upper_bounds = [3, 3]"
1589,ilp_assign,8,48,76,0,21,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.387371301651001}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 5, 11, 11, 13, 16, 21], [22, 19, 5, 9, 8, 8, 13], [23, 19, 12, 20, 20, 18, 24], [2, 10, 15, 17, 23, 12, 21], [1, 5, 16, 16, 1, 2, 13], [21, 23, 14, 24, 4, 7, 22], [14, 24, 12, 14, 15, 13, 14]]"
1590,sub,16,1282387499578876,8,0,-1282387499578876,0,"{'ok': True, 'value': 1282387499578876, 'stdout': '1282387499578876\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07487821578979492}",1,Compute: 6803017357643180 - 5520629858064304
1591,mul,2,962,962,1,962,1,"{'ok': True, 'value': 962, 'stdout': '962\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07645463943481445}",1,Compute: 26 * 37
1592,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09924507141113281}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 31, 93, 33, 68, 85, 9, 74, 73, 95, 12, 14, 84, 2, 44, 7, 11, 5, 48, 19, 85, 59, 10, 48]"
1593,ilp_partition,8,3,1,0,2,0,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07799220085144043}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 15, 21, 16, 15, 20, 16, 15]"
1594,ilp_partition,2,0,2,0,12,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0756380558013916}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 3, 3]"
1595,rod,8,168,22,0,1,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07722806930541992}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 15, 1, 16, 23, 16, 5, 1]"
1596,ilp_partition,8,0,1,0,49,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07713794708251953}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 22, 13, 9, 13, 11, 3, 10]"
1597,add,8,97865630,97865629,0,97865629,0,"{'ok': True, 'value': 97865630, 'stdout': '97865630\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07489466667175293}",1,Compute: 86492416 + 11373214
1598,sub,8,18514066,18514066,1,18514066,1,"{'ok': True, 'value': 18514066, 'stdout': '18514066\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07519817352294922}",1,Compute: 29509444 - 10995378
1599,ilp_prod,2,20,34,0,7,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/207c4706bac44befa92626cfb9781872-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/207c4706bac44befa92626cfb9781872-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 16.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15411853790283203}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6]
consumption (rows=resources) = [[2, 2], [3, 2]]
capacity = [8, 7]
upper_bounds = [3, 3]"
1600,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08676934242248535}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdddbadbbcacccb""
T = ""cdbcadadaccdcdc"""
1601,knap,4,17,23,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07364439964294434}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 2, 8, 6]
V = [14, 3, 9, 3]
C = 11"
1602,sub,16,234264872319363,1311391860344362,0,2342764872320363,0,"{'ok': True, 'value': 234264872319363, 'stdout': '234264872319363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0725705623626709}",1,Compute: 9034692634555008 - 8800427762235645
1603,ilp_assign,4,20,0,0,24,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36324310302734375}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 7, 7, 6], [10, 12, 8, 4], [12, 7, 7, 5], [2, 2, 12, 3]]"
1604,knap,4,30,24,0,0,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0795598030090332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 4, 7]
V = [15, 15, 10, 6]
C = 9"
1605,sub,8,30156774,30156774,1,30156774,1,"{'ok': True, 'value': 30156774, 'stdout': '30156774\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08216142654418945}",1,Compute: 92778055 - 62621281
1606,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07940292358398438}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [60, 56, 89, 70, 71, 67, 13, 6, 63, 74, 37, 70, 16, 20, 85, 84, 53, 80, 12, 58, 95, 81, 7, 15]"
1607,ilp_assign,8,17,36,0,1,0,"{'ok': True, 'value': 17, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/62179b36d8074f839a140cea8091bc82-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/62179b36d8074f839a140cea8091bc82-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 17 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 17\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 17 - took 0.00 seconds\nCbc0012I Integer solution of 17 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 17, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 17 to 17\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                17.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n17.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15619730949401855}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 23, 10, 10, 17, 9, 5], [7, 15, 2, 9, 4, 24, 22], [3, 2, 21, 21, 3, 16, 5], [16, 15, 20, 13, 8, 22, 2], [14, 6, 2, 10, 15, 2, 5], [17, 21, 21, 7, 7, 21, 23], [6, 7, 5, 1, 13, 21, 1]]"
1608,sub,4,3545,3545,1,3545,1,"{'ok': True, 'value': 3545, 'stdout': '3545\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0905611515045166}",1,Compute: 9760 - 6215
1609,mul,32,1282162655874875427962800652003371086025193332876641061736530680,127987654321098765432109876543210,0,128465555015350406404664464644866664488,0,"{'ok': True, 'value': 1282162655874875427962800652003371086025193332876641061736530680, 'stdout': '1282162655874875427962800652003371086025193332876641061736530680\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07484006881713867}",1,Compute: 12987765454764241848331872146214 * 98720804617282770478746809177620
1610,ilp_partition,8,0,1,0,15,0,"{'ok': True, 'value': 54, 'stdout': '54\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08467745780944824}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 2, 13, 5, 5, 11, 16, 15]"
1611,add,16,9091006826052472,0,0,9091006826052472,1,"{'ok': True, 'value': 9091006826052472, 'stdout': '9091006826052472\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08222103118896484}",1,Compute: 2133500970374002 + 6957505855678470
1612,sub,4,2065,2065,1,2065,1,"{'ok': True, 'value': 2065, 'stdout': '2065\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07375216484069824}",1,Compute: 4219 - 2154
1613,rod,16,416,46,0,65,0,"{'ok': True, 'value': 416, 'stdout': '416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07754063606262207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [26, 28, 17, 18, 32, 18, 38, 13, 24, 48, 21, 23, 5, 45, 12, 44]"
1614,sub,4,2842,2842,1,2842,1,"{'ok': True, 'value': 2842, 'stdout': '2842\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09885931015014648}",1,Compute: 7929 - 5087
1615,mul,32,3852873661724903068127659278526474321172769086947593769427778600,11850903,0,383344644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644434644,0,"{'ok': True, 'value': 3852873661724903068127659278526474321172769086947593769427778600, 'stdout': '3852873661724903068127659278526474321172769086947593769427778600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07765555381774902}",1,Compute: 55967451238732599030267278607420 * 68841327886993351563767278111830
1616,rod,32,2240,710,0,58,0,"{'ok': True, 'value': 2240, 'stdout': '2240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08094048500061035}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [70, 53, 79, 38, 68, 55, 18, 32, 43, 51, 63, 71, 82, 16, 58, 89, 67, 25, 74, 53, 12, 58, 19, 85, 59, 56, 56, 71, 15, 13, 73, 41]"
1617,ilp_assign,2,6,5,0,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4256308078765869}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4], [2, 4]]"
1618,lcs,8,4,3,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0891411304473877}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadbbdda""
T = ""cbabbacbb"""
1619,mul,4,26843166,26243684,0,26703266,0,"{'ok': True, 'value': 26843166, 'stdout': '26843166\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08377861976623535}",1,Compute: 6846 * 3921
1620,ilp_prod,8,86,103,0,2,0,"{'ok': True, 'value': 86, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1a1d3ef014934d5ab216cac51a8177a0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1a1d3ef014934d5ab216cac51a8177a0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 98.4255 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -80 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -86 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -96.428571 to -86 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -86, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -96.4286 to -86\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                86.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n86.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16589093208312988}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 23, 17, 9]
consumption (rows=resources) = [[7, 5, 3, 6], [6, 7, 2, 4], [6, 1, 7, 8], [4, 3, 1, 5]]
capacity = [30, 23, 18, 18]
upper_bounds = [3, 3, 3, 3]"
1621,knap,32,1637,2055,0,47,0,"{'ok': True, 'value': 1637, 'stdout': '1637\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08526349067687988}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 2, 36, 64, 31, 24, 42, 48, 38, 22, 54, 37, 61, 37, 53, 47, 24, 37, 60, 48, 57, 1, 40, 52, 38, 9, 47, 58, 32, 63, 40, 44]
V = [102, 38, 98, 5, 113, 37, 24, 87, 92, 87, 92, 69, 65, 72, 70, 123, 102, 100, 91, 47, 11, 48, 34, 92, 20, 12, 124, 69, 68, 35, 33, 93]
C = 627"
1622,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09317660331726074}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [86, 93, 11, 2, 75, 21, 93, 31, 35, 46, 29, 91, 21, 62, 67, 69, 61, 90, 43, 3, 41, 65, 14, 72]"
1623,knap,8,100,103,0,0,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07845425605773926}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 15, 7, 4, 5, 13, 4, 13]
V = [16, 30, 31, 6, 11, 1, 23, 4]
C = 32"
1624,ilp_prod,8,39,57,0,63,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ojhxc3bc/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_ojhxc3bc/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17686748504638672}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 8, 10, 7]
consumption (rows=resources) = [[2, 1, 2, 3], [5, 6, 8, 8], [1, 7, 7, 4], [3, 2, 7, 7]]
capacity = [23, 16, 26, 29]
upper_bounds = [3, 3, 3, 3]"
1625,lcs,4,2,4,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07781982421875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccda""
T = ""dadcc"""
1626,ilp_partition,2,2,1,0,9,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07952570915222168}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 1, 5]"
1627,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07487082481384277}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdabccbcbadcdbbaadbcbbadacadbcca""
T = ""bbbdbabdaacccbdaaaabaaacabadababa"""
1628,lcs,16,10,7,0,17,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0771327018737793}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbdccdadcdcaccb""
T = ""aabcbacdaabbcdabb"""
1629,ilp_partition,32,1,10,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.030241012573242}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 7, 3, 2, 2, 66, 25, 8, 49, 24, 88, 70, 21, 18, 80, 69, 11, 5, 33, 30, 40, 3, 59, 10]"
1630,ilp_assign,2,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.5239460468292236}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 4], [5, 6]]"
1631,knap,2,9,14,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08062982559204102}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 1]
V = [3, 5, 9]
C = 5"
1632,ilp_assign,2,6,1,0,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40064096450805664}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5], [1, 5]]"
1633,knap,4,19,16,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08675026893615723}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 4, 5]
V = [3, 15, 12, 7]
C = 11"
1634,ilp_prod,4,46,35,0,33,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/73c052ff7b0c486c965bdd320aac4016-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/73c052ff7b0c486c965bdd320aac4016-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 19.2 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21010613441467285}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8, 11]
consumption (rows=resources) = [[2, 2, 2], [2, 1, 3], [1, 4, 3]]
capacity = [11, 11, 12]
upper_bounds = [5, 3, 3]"
1635,ilp_partition,8,0,1,0,0,1,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08066296577453613}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 7, 1, 19, 1, 22, 18, 4]"
1636,ilp_assign,16,84,105,0,1,0,"{'ok': True, 'value': 84, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f8e57a7d7d1240b49ee365c751e81701-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/f8e57a7d7d1240b49ee365c751e81701-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 84 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 84\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 84 - took 0.00 seconds\nCbc0012I Integer solution of 84 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 84, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 84 to 84\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                84.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 84.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1898205280303955}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 14, 28, 35, 30, 34, 22], [16, 23, 3, 47, 30, 36, 3], [19, 30, 36, 44, 13, 21, 47], [36, 18, 20, 2, 22, 23, 33], [46, 21, 32, 15, 21, 14, 19], [22, 38, 25, 31, 11, 16, 32], [37, 27, 37, 21, 32, 47, 21]]"
1637,rod,16,304,65,0,64,0,"{'ok': True, 'value': 304, 'stdout': '304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0782003402709961}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [19, 30, 9, 41, 13, 33, 17, 43, 21, 21, 21, 35, 18, 6, 33, 16]"
1638,add,2,119,119,1,119,1,"{'ok': True, 'value': 119, 'stdout': '119\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0849153995513916}",1,Compute: 80 + 39
1639,knap,2,15,12,0,2,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08482694625854492}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 1]
V = [2, 9, 6]
C = 3"
1640,knap,2,9,14,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0859980583190918}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 5]
V = [4, 7, 9]
C = 5"
1641,mul,16,47098451678312859365577769085264,-4701443633857738560,0,47286089863377888464444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 47098451678312859365577769085264, 'stdout': '47098451678312859365577769085264\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08645057678222656}",1,Compute: 7649383608662896 * 6157156457021459
1642,ilp_assign,4,12,15,0,28,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.398144006729126}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 12, 1, 2], [10, 9, 1, 3], [10, 4, 9, 8], [5, 7, 7, 10]]"
1643,lcs,8,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07864999771118164}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caabbbdb""
T = ""ddcaadccc"""
1644,rod,16,107,46,0,53,0,"{'ok': True, 'value': 107, 'stdout': '107\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08361649513244629}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [2, 7, 21, 13, 14, 39, 11, 29, 23, 20, 34, 28, 24, 28, 1, 40]"
1645,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07799410820007324}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 23, 1, 14, 9, 7, 12]"
1646,add,4,12692,12692,1,12692,1,"{'ok': True, 'value': 12692, 'stdout': '12692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09179878234863281}",1,Compute: 6877 + 5815
1647,rod,16,736,54,0,65,0,"{'ok': True, 'value': 736, 'stdout': '736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07549190521240234}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [46, 21, 9, 25, 42, 47, 46, 31, 3, 18, 5, 15, 7, 19, 12, 5]"
1648,rod,16,129,65,0,64,0,"{'ok': True, 'value': 129, 'stdout': '129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0733344554901123}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 2, 20, 3, 41, 47, 17, 6, 15, 48, 29, 23, 19, 37, 46, 20]"
1649,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07875609397888184}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdcaacbaabddbaddcacadcbdabdcaba""
T = ""bcccadbbbadbadcdcacabdacccaddabb"""
1650,ilp_prod,4,32,37,0,32,1,"{'ok': True, 'value': 32, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/492555e3cfd346119fc54c155624edf1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/492555e3cfd346119fc54c155624edf1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 32 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -32 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                32.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n32.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1589202880859375}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3, 4]
consumption (rows=resources) = [[1, 1, 3], [3, 3, 1], [4, 3, 3]]
capacity = [10, 13, 16]
upper_bounds = [4, 4, 3]"
1651,mul,4,63319584,63383784,0,63382644,0,"{'ok': True, 'value': 63319584, 'stdout': '63319584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0947716236114502}",1,Compute: 8544 * 7411
1652,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11760258674621582}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 76, 38, 9, 82, 95, 44, 48, 78, 91, 49, 86, 1, 82, 35, 76, 13, 28, 3, 50, 49, 21, 65, 65]"
1653,ilp_prod,16,150,160,0,43,0,"{'ok': True, 'value': 9, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/437676173e004b358d64e09625baf1d8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/437676173e004b358d64e09625baf1d8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9.64286 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n9.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16303467750549316}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 30, 39, 20, 20, 3]
consumption (rows=resources) = [[4, 2, 13, 6, 9, 1], [14, 16, 6, 10, 9, 6], [16, 12, 8, 9, 8, 11], [7, 15, 2, 9, 12, 16]]
capacity = [44, 45, 59, 43]
upper_bounds = [3, 3, 3, 4, 3, 3]"
1654,add,2,134,134,1,134,1,"{'ok': True, 'value': 134, 'stdout': '134\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07911992073059082}",1,Compute: 96 + 38
1655,add,32,82737963658566259629351756584358,1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,0,82737963658566260629351756584358,0,"{'ok': True, 'value': 82737963658566259629351756584358, 'stdout': '82737963658566259629351756584358\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07388019561767578}",1,Compute: 55342104911178188243418882967364 + 27395858747388071385932873616994
1656,rod,8,80,38,0,1,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09211611747741699}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 19, 18, 11, 2, 10, 7, 9]"
1657,add,2,147,147,1,147,1,"{'ok': True, 'value': 147, 'stdout': '147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0747995376586914}",1,Compute: 73 + 74
1658,mul,2,2891,2811,0,2811,0,"{'ok': True, 'value': 2891, 'stdout': '2891\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07682323455810547}",1,Compute: 49 * 59
1659,add,2,102,102,1,102,1,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0864720344543457}",1,Compute: 41 + 61
1660,rod,16,352,107,0,64,0,"{'ok': True, 'value': 352, 'stdout': '352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0739753246307373}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [22, 42, 18, 9, 5, 33, 9, 42, 10, 36, 27, 2, 9, 9, 44, 1]"
1661,ilp_assign,4,10,15,0,14,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6651229858398438}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3, 11, 5], [7, 5, 2, 5], [1, 2, 11, 2], [8, 3, 8, 4]]"
1662,ilp_partition,4,0,0,1,26,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08657360076904297}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 10, 6, 2]"
1663,rod,16,608,60,0,84,0,"{'ok': True, 'value': 608, 'stdout': '608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0862123966217041}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [38, 33, 24, 4, 44, 40, 45, 23, 40, 36, 43, 47, 9, 15, 15, 20]"
1664,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08881878852844238}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 61, 5, 91, 88, 54, 25, 24, 38, 70, 72, 66, 80, 26, 15, 13, 93, 34, 76, 65, 57, 53, 94, 70]"
1665,rod,8,184,145,0,30,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09168577194213867}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 21, 17, 10, 12, 11, 13, 6]"
1666,add,8,178217431,178217431,1,178217431,1,"{'ok': True, 'value': 178217431, 'stdout': '178217431\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08588266372680664}",1,Compute: 80909906 + 97307525
1667,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09711742401123047}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caab""
T = ""bab"""
1668,add,4,4571,3165,0,4571,1,"{'ok': True, 'value': 4571, 'stdout': '4571\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08639717102050781}",1,Compute: 2907 + 1664
1669,mul,4,16167120,162866640,0,16232640,0,"{'ok': True, 'value': 16167120, 'stdout': '16167120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0849311351776123}",1,Compute: 4929 * 3280
1670,ilp_partition,4,2,1,0,3,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0931096076965332}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 10, 12, 9]"
1671,mul,4,32621088,34914408,0,32383488,0,"{'ok': True, 'value': 32621088, 'stdout': '32621088\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07816553115844727}",1,Compute: 4476 * 7288
1672,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1944580078125}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 8, 92, 41, 91, 36, 65, 37, 19, 53, 35, 49, 96, 93, 39, 48, 37, 33, 93, 21, 66, 52, 82, 93]"
1673,lcs,4,3,2,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07806086540222168}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caab""
T = ""dcaa"""
1674,ilp_partition,8,0,1,0,58,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08968782424926758}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 22, 4, 23, 21, 15, 8, 4]"
1675,sub,8,36575112,36575112,1,36575112,1,"{'ok': True, 'value': 36575112, 'stdout': '36575112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08492398262023926}",1,Compute: 56987170 - 20412058
1676,sub,4,2462,2462,1,2462,1,"{'ok': True, 'value': 2462, 'stdout': '2462\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07474207878112793}",1,Compute: 7523 - 5061
1677,ilp_partition,4,3,1,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08679080009460449}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 9, 8, 3]"
1678,ilp_prod,2,42,15,0,20,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fb37d2296f264ec099c2ae772a1ac502-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fb37d2296f264ec099c2ae772a1ac502-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16081714630126953}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[3, 1], [2, 1]]
capacity = [6, 7]
upper_bounds = [3, 6]"
1679,ilp_assign,16,85,105,0,105,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36531662940979004}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[38, 25, 47, 34, 40, 8, 23], [17, 29, 33, 7, 33, 30, 41], [39, 19, 14, 42, 27, 45, 43], [17, 7, 27, 32, 5, 12, 24], [35, 19, 27, 31, 34, 38, 36], [20, 25, 19, 5, 30, 34, 43], [4, 44, 35, 27, 14, 25, 17]]"
1680,ilp_partition,8,1,1,1,781,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08494067192077637}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 18, 24, 5, 8, 24, 6, 11]"
1681,ilp_assign,16,57,0,0,105,0,"{'ok': True, 'value': 57, 'stdout': '57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37868714332580566}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 39, 2, 42, 46, 32, 17], [25, 33, 1, 19, 26, 8, 46], [19, 37, 46, 47, 39, 2, 35], [11, 19, 3, 38, 4, 20, 21], [25, 14, 22, 1, 27, 22, 40], [33, 23, 21, 39, 16, 25, 21], [33, 9, 6, 3, 23, 32, 21]]"
1682,mul{'ok': True, 'value': 1089476201669244162671049212496531842748172228360069717292519656, 'stdout': '1089476201669244162671049212496531842748172228360069717292519656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08782577514648438}",1,Compute: 17008563955087347052239479197003 * 64054567131364217811746983258552
1683,ilp_assign,32,100,185,0,105,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.373429536819458}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 24, 73, 74, 75, 6, 4], [29, 67, 34, 15, 48, 47, 22], [3, 56, 68, 88, 4, 93, 91], [19, 1, 21, 82, 80, 73, 33], [42, 54, 40, 76, 69, 24, 42], [76, 87, 26, 63, 27, 85, 56], [40, 77, 39, 82, 30, 45, 8]]"
1684,sub,32,43151866486504001981604943786219,43151866487503001981604943887219,0,43151866486504001981604943786219,1,"{'ok': True, 'value': 43151866486504001981604943786219, 'stdout': '43151866486504001981604943786219\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08596110343933105}",1,Compute: 96333755365184176143303177771739 - 53181888878680174161698233985520
1685,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08658194541931152}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbbabab""
T = ""aabcbccba"""
1686,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09787940979003906}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcdbdbdccadacbd""
T = ""cbcbacabccbabdc"""
1687,rod,32,1344,1050,0,4,0,"{'ok': True, 'value': 1344, 'stdout': '1344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07711148262023926}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [42, 14, 53, 50, 15, 26, 8, 43, 12, 22, 31, 48, 48, 86, 10, 13, 79, 96, 8, 91, 84, 1, 37, 50, 95, 49, 35, 24, 85, 69, 13, 56]"
1688,sub,32,49343126012160276673745197573601,0,0,49343125988838543156254844426358,0,"{'ok': True, 'value': 49343126012160276673745197573601, 'stdout': '49343126012160276673745197573601\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07824039459228516}",1,Compute: 69107097135473107100946613154663 - 19763971123312830427201415581062
1689,sub,16,6354779838981615,6354780161418386,0,6354780161418387,0,"{'ok': True, 'value': 6354779838981615, 'stdout': '6354779838981615\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08588671684265137}",1,Compute: 8721529646001610 - 2366749807019995
1690,mul,2,816,816,1,816,1,"{'ok': True, 'value': 816, 'stdout': '816\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08026623725891113}",1,Compute: 17 * 48
1691,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09044742584228516}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddadaaabcdcbbada""
T = ""bbbaacbacacdaaada"""
1692,ilp_assign,2,5,4,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3937201499938965}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [4, 6]]"
1693,ilp_prod,16,144,160,0,6,0,"{'ok': True, 'value': 58, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7551e7c7a440421f90147524bbf08e8b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7551e7c7a440421f90147524bbf08e8b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 29 COLUMNS\nAt line 192 RHS\nAt line 217 BOUNDS\nAt line 224 ENDATA\nProblem MODEL has 24 rows, 6 columns and 144 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 68.3571 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -58 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                58.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n58.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1525890827178955}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [29, 18, 42, 16, 38, 42]
consumption (rows=resources) = [[7, 8, 1, 13, 3, 6], [7, 1, 9, 5, 15, 9], [3, 5, 8, 9, 6, 3], [10, 14, 8, 9, 8, 7]]
capacity = [37, 33, 46, 41]
upper_bounds = [4, 3, 3, 3, 3, 3]"
1694,lcs,4,1,3,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07837438583374023}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabc""
T = ""cbaa"""
1695,ilp_prod,2,24,15,0,24,1,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/37c093c6e3fc42129b18fa958b35e0c2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/37c093c6e3fc42129b18fa958b35e0c2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16373419761657715}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[3, 3], [1, 2]]
capacity = [10, 9]
upper_bounds = [3, 3]"
1696,ilp_partition,16,1,1,1,36,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2073955535888672}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [40, 18, 8, 14, 36, 45, 28, 32, 32, 45, 32, 46, 3, 39, 10, 39]"
1697,mul,2,456,456,1,456,1,"{'ok': True, 'value': 456, 'stdout': '456\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0751495361328125}",1,Compute: 12 * 38
1698,add,8,97466203,97466203,1,97466203,1,"{'ok': True, 'value': 97466203, 'stdout': '97466203\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07750225067138672}",1,Compute: 59207542 + 38258661
1699,ilp_assign,32,53,185,0,209,0,"{'ok': True, 'value': 53, 'stdout': '53\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37836718559265137}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[71, 1, 90, 93, 22, 21, 77], [35, 20, 62, 88, 86, 86, 10], [3, 7, 76, 89, 17, 55, 75], [1, 13, 39, 70, 32, 72, 48], [60, 71, 14, 31, 60, 46, 83], [44, 60, 63, 9, 34, 83, 74], [43, 67, 87, 90, 21, 1, 81]]"
1700,knap,4,17,16,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07845306396484375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 2, 6, 5]
V = [5, 6, 11, 5]
C = 10"
1701,mul,8,3722259661574922,3569219240,0,3593333335422,0,"{'ok': True, 'value': 3722259661574922, 'stdout': '3722259661574922\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0846261978149414}",1,Compute: 62620337 * 59441706
1702,add,16,11333417279975177,11333417280964977,0,11333417279975177,1,"{'ok': True, 'value': 11333417279975177, 'stdout': '11333417279975177\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0783846378326416}",1,Compute: 5865137990792497 + 5468279289182680
1703,mul,8,3706509892042350,36458321594,0,364443335559170,0,"{'ok': True, 'value': 3706509892042350, 'stdout': '3706509892042350\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07909464836120605}",1,Compute: 47329146 * 78313475
1704,ilp_assign,4,21,23,0,24,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3929636478424072}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 5, 7, 1], [4, 6, 7, 10], [10, 8, 10, 4], [10, 9, 11, 2]]"
1705,mul,16,30091754733690785770191092263432,300829253651190626635260,0,3030400554357764958444648,0,"{'ok': True, 'value': 30091754733690785770191092263432, 'stdout': '30091754733690785770191092263432\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07808542251586914}",1,Compute: 5929579625122609 * 5074854650099848
1706,mul,16,13601879378463316928874406894704,10,0,13730168907184369856423666146341984,0,"{'ok': True, 'value': 13601879378463316928874406894704, 'stdout': '13601879378463316928874406894704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08339118957519531}",1,Compute: 4625053635694783 * 2940912787148688
1707,rod,8,152,22,0,39,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0852658748626709}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 22, 13, 24, 23, 1, 8, 21]"
1708,rod,16,304,46,0,84,0,"{'ok': True, 'value': 304, 'stdout': '304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08367037773132324}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 38, 1, 12, 3, 5, 9, 26, 29, 22, 15, 7, 15, 10, 37, 41]"
1709,ilp_prod,4,22,39,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_cviw_s_d/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_cviw_s_d/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16353321075439453}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 8, 9]
consumption (rows=resources) = [[4, 4, 3], [2, 2, 1], [3, 3, 4]]
capacity = [9, 13, 10]
upper_bounds = [3, 3, 3]"
1710,sub,16,7591202634997112,7591192634997112,0,7601199635007112,0,"{'ok': True, 'value': 7591202634997112, 'stdout': '7591202634997112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07947802543640137}",1,Compute: 9876866037064690 - 2285663402067578
1711,lcs,32,16,15,0,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08531308174133301}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdddccadccadbdbcbdcbadcccdbabddd""
T = ""dbbcbdaccbcbbbcdaccccbadaacbcac"""
1712,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_4pew44bg/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_4pew44bg/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08541059494018555}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
1713,ilp_partition,2,0,0,1,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09361791610717773}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 1, 3, 3]"
1714,rod,8,192,,0,1,0,"{'ok': True, 'value': 192, 'stdout': '192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07413458824157715}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [24, 15, 9, 22, 9, 13, 15, 19]"
1715,ilp_assign,16,42,105,0,115,0,"{'ok': True, 'value': 42, 'stdout': '42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39659857749938965}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 33, 12, 28, 26, 4, 39], [36, 29, 12, 30, 34, 32, 4], [20, 31, 8, 39, 6, 41, 25], [46, 6, 29, 24, 15, 27, 21], [6, 43, 44, 25, 23, 45, 33], [6, 34, 47, 4, 15, 28, 5], [36, 3, 12, 14, 27, 7, 25]]"
1716,add,32,106629189170975095952591905675490,200000000000000000000000000000000,0,106629219069075096048492005675530,0,"{'ok': True, 'value': 106629189170975095952591905675490, 'stdout': '106629189170975095952591905675490\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09786772727966309}",1,Compute: 19015536986346998548384556141532 + 87613652184628097404207349533958
1717,ilp_partition,16,0,10,0,26,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19217944145202637}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 24, 32, 42, 28, 26, 21, 43, 23, 41, 42, 34, 33, 22, 29, 2]"
1718,ilp_prod,2,20,23,0,1,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/958f1db4cce146f5bf8c130a0db94336-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/958f1db4cce146f5bf8c130a0db94336-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 16.0\nx_0 = 4.0\nx_1 = 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16941022872924805}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[1, 2], [2, 1]]
capacity = [10, 8]
upper_bounds = [4, 5]"
1719,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0798041820526123}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 66, 93, 49, 16, 81, 94, 20, 69, 5, 83, 81, 76, 73, 73, 67, 90, 50, 20, 45, 4, 60, 94, 79]"
1720,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07628774642944336}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcccaadcdbcadbc""
T = ""dddbbbabcbccaaaac"""
1721,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0873117446899414}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""d"""
1722,rod,16,448,155,0,84,0,"{'ok': True, 'value': 448, 'stdout': '448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09246349334716797}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [28, 40, 18, 39, 33, 3, 1, 23, 25, 7, 13, 23, 12, 3, 7, 37]"
1723,add,2,98,98,1,98,1,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07914924621582031}",1,Compute: 25 + 73
1724,ilp_partition,8,1,1,1,176,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08565592765808105}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 23, 1, 4, 5, 7, 5, 18]"
1725,ilp_partition,2,0,4,0,59,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08519625663757324}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 5, 6]"
1726,mul{'ok': True, 'value': 5716543723371536883975057889786, 'stdout': '5716543723371536883975057889786\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08720564842224121}",1,Compute: 1074843012032813 * 5318491779148322
1727,sub,8,17539983,17539983,1,17540773,0,"{'ok': True, 'value': 17539983, 'stdout': '17539983\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09067702293395996}",1,Compute: 89710619 - 72170636
1728,mul,8,2044765975630536,36,0,20523125335528,0,"{'ok': True, 'value': 2044765975630536, 'stdout': '2044765975630536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08334755897521973}",1,Compute: 40235439 * 50820024
1729,lcs,4,1,3,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0850214958190918}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcba""
T = ""bcccd"""
1730,add,32,143490129781977326926718970220666,14349012978197732692671907022066643,0,143490129782077326926719070220666,0,"{'ok': True, 'value': 143490129781977326926718970220666, 'stdout': '143490129781977326926718970220666\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08508563041687012}",1,Compute: 67241357792864255211828190763234 + 76248771989113071714890779457432
1731,mul,2,3234,77,0,3138,0,"{'ok': True, 'value': 3234, 'stdout': '3234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08707380294799805}",1,Compute: 42 * 77
1732,lcs,32,18,16,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07837796211242676}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdadaadcaaabaccaaadcdcccaaaddbdd""
T = ""cdbacabcbbcadaacbbacabbccabaaacbb"""
1733,add,32,100152508981050424075469941425015,109972364846042750283464485264174,0,100152499981150424075470891365015,0,"{'ok': True, 'value': 100152508981050424075469941425015, 'stdout': '100152508981050424075469941425015\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08546948432922363}",1,Compute: 18291263284133700426288271871018 + 81861245696916723649181669553997
1734,sub,16,5696172684477213,5696172684477213,1,5696172684477213,1,"{'ok': True, 'value': 5696172684477213, 'stdout': '5696172684477213\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07697129249572754}",1,Compute: 7328278654271098 - 1632105969793885
1735,knap,2,10,10,1,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0755155086517334}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 1]
V = [10, 1, 9]
C = 1"
1736,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07659482955932617}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""aa"""
1737,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07472538948059082}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adca""
T = ""ccb"""
1738,lcs,32,16,16,1,1,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08517241477966309}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adddbabcaabaadcbacaabbccaabcbdaa""
T = ""baaaddccdcacccccdbcaccddcbccdcdac"""
1739,ilp_prod,32,330,1059,0,96,0,"{'ok': True, 'value': 186, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5e0300d7f7f149e2b18990e23825cdb2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5e0300d7f7f149e2b18990e23825cdb2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 25 COLUMNS\nAt line 164 RHS\nAt line 185 BOUNDS\nAt line 192 ENDATA\nProblem MODEL has 20 rows, 6 columns and 120 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 192 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -186 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                186.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n186.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15854573249816895}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [62, 9, 90, 44, 24, 23]
consumption (rows=resources) = [[27, 30, 31, 2, 17, 14], [31, 28, 16, 21, 15, 20], [7, 18, 12, 2, 27, 2], [10, 27, 9, 26, 11, 29]]
capacity = [96, 106, 73, 118]
upper_bounds = [3, 3, 3, 4, 3, 4]"
1740,mul,8,1898523063785634,1880711520132152,0,19138335368334,0,"{'ok': True, 'value': 1898523063785634, 'stdout': '1898523063785634\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07707023620605469}",1,Compute: 97415879 * 19488846
1741,lcs,4,1,2,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07597947120666504}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbb""
T = ""cca"""
1742,ilp_partition,4,1,1,1,814,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08283495903015137}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 9, 4, 11]"
1743,ilp_assign,16,62,10,0,110,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3915832042694092}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 41, 17, 7, 28, 21, 36], [44, 11, 14, 9, 39, 37, 1], [17, 29, 17, 39, 7, 17, 4], [11, 27, 44, 1, 17, 8, 33], [15, 14, 19, 32, 12, 24, 40], [13, 33, 20, 40, 28, 5, 14], [22, 16, 36, 43, 18, 27, 41]]"
1744,lcs,32,18,15,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07750630378723145}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaddddccbaabaacaddcdcdbcdbabacac""
T = ""bbdddbddddcacbabbbbdaaddaadcaccab"""
1745,ilp_prod,8,126,105,0,7,0,"{'ok': True, 'value': 63, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1ed46a84d91c4c9393a6d8c90018cc01-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1ed46a84d91c4c9393a6d8c90018cc01-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 63 - 0.00 seconds\nCgl0004I processed model has 5 rows, 4 columns (4 integer (0 of which binary)) and 20 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -63 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -63, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -63 to -63\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                63.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n63.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1512138843536377}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 3, 10, 18]
consumption (rows=resources) = [[7, 5, 5, 2], [3, 7, 2, 1], [4, 6, 3, 3], [5, 2, 4, 1]]
capacity = [29, 25, 21, 20]
upper_bounds = [4, 3, 5, 7]"
1746,ilp_prod,4,33,33,1,30,0,"{'ok': True, 'value': 9, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/59ee408b0f844937b813b9f468a44fdf-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/59ee408b0f844937b813b9f468a44fdf-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n9.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1592249870300293}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 11, 10]
consumption (rows=resources) = [[2, 3, 4], [1, 3, 3], [4, 4, 3]]
capacity = [9, 11, 15]
upper_bounds = [3, 3, 3]"
1747,ilp_prod,8,70,80,0,25,0,"{'ok': True, 'value': 32, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6ad6b6cd017e447482b1f4f2aaeb275d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6ad6b6cd017e447482b1f4f2aaeb275d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 68 RHS\nAt line 79 BOUNDS\nAt line 84 ENDATA\nProblem MODEL has 10 rows, 4 columns and 40 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 40 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -32 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                32.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n32.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15659141540527344}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 16, 11, 19]
consumption (rows=resources) = [[6, 5, 8, 8], [1, 8, 7, 1], [2, 5, 3, 2], [2, 4, 6, 8]]
capacity = [27, 25, 20, 24]
upper_bounds = [4, 3, 3, 3]"
1748,mul,2,7104,7084,0,3,0,"{'ok': True, 'value': 7104, 'stdout': '7104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0860128402709961}",1,Compute: 74 * 96
1749,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0878760814666748}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 68, 69, 85, 55, 12, 66, 77, 19, 70, 75, 1, 7, 23, 35, 51, 41, 53, 56, 22, 68, 67, 36, 57]"
1750,add,32,112635291588932839451037061786609,112445186598732843445625284250265,0,112635292588932839447039062786609,0,"{'ok': True, 'value': 112635291588932839451037061786609, 'stdout': '112635291588932839451037061786609\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09428095817565918}",1,Compute: 23145924285309122617174913651476 + 89489367303623716833862148135133
1751,ilp_partition,4,0,1,0,11,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07423520088195801}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 11, 6, 1]"
1752,mul,16,64386734359246115358202438984869,64393451635836270000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,64369152882880519756588558,0,"{'ok': True, 'value': 64386734359246115358202438984869, 'stdout': '64386734359246115358202438984869\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09282469749450684}",1,Compute: 7776157128966057 * 8280019718146717
1753,knap,4,25,26,0,0,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0754389762878418}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 7, 4]
V = [9, 12, 16, 10]
C = 10"
1754,ilp_prod,8,103,105,0,24,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/670fa03db8c44d5fb7be78276d69b76e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/670fa03db8c44d5fb7be78276d69b76e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 68 RHS\nAt line 79 BOUNDS\nAt line 84 ENDATA\nProblem MODEL has 10 rows, 4 columns and 40 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 7.28571 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17542243003845215}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 21, 24, 3]
consumption (rows=resources) = [[5, 6, 8, 2], [6, 2, 3, 3], [1, 7, 4, 4], [3, 8, 2, 6]]
capacity = [32, 31, 19, 21]
upper_bounds = [5, 3, 4, 3]"
1755,ilp_partition,16,0,1,0,5,0,"{'ok': True, 'value': 332, 'stdout': '332\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07622528076171875}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 14, 47, 7, 46, 11, 17, 10, 13, 14, 32, 16, 40, 28, 37, 5]"
1756,ilp_prod,8,98,100,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_76j1kipw/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_76j1kipw/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1440579891204834}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 23, 22, 20]
consumption (rows=resources) = [[4, 5, 4, 2], [1, 6, 5, 3], [3, 7, 6, 5], [1, 4, 1, 6]]
capacity = [31, 17, 22, 28]
upper_bounds = [7, 3, 3, 4]"
1757,ilp_assign,32,93,185,0,110,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38959813117980957}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 44, 45, 32, 39, 18, 17], [28, 6, 67, 9, 38, 10, 82], [74, 48, 13, 10, 32, 87, 20], [96, 76, 18, 25, 11, 76, 86], [34, 79, 65, 94, 46, 53, 78], [91, 70, 54, 43, 26, 79, 8], [96, 3, 58, 3, 73, 4, 45]]"
1758,rod,4,28,13,0,4,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07452583312988281}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 6, 9, 4]"
1759,ilp_prod,8,68,100,0,112,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/52636a41a878476d8ee3cceebc925e40-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/52636a41a878476d8ee3cceebc925e40-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 25.6 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16848421096801758}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 10, 22, 12]
consumption (rows=resources) = [[2, 5, 3, 1], [2, 8, 3, 5], [2, 2, 6, 3], [4, 4, 6, 8]]
capacity = [27, 16, 18, 24]
upper_bounds = [6, 3, 3, 3]"
1760,rod,32,2976,1055,0,16,0,"{'ok': True, 'value': 2976, 'stdout': '2976\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07616257667541504}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [93, 77, 62, 78, 32, 46, 85, 31, 53, 42, 6, 40, 60, 15, 85, 16, 65, 51, 93, 18, 50, 39, 66, 61, 87, 12, 66, 66, 72, 65, 33, 16]"
1761,sub,4,241,241,1,-241,0,"{'ok': True, 'value': 241, 'stdout': '241\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0757606029510498}",1,Compute: 3877 - 3636
1762,mul,8,1822869097235568,1821572928000000,0,182336823338579,0,"{'ok': True, 'value': 1822869097235568, 'stdout': '1822869097235568\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0748603343963623}",1,Compute: 26022471 * 70049808
1763,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07539844512939453}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbd""
T = ""bda"""
1764,add,4,9273,9273,1,9273,1,"{'ok': True, 'value': 9273, 'stdout': '9273\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07643580436706543}",1,Compute: 5726 + 3547
1765,knap,32,1598,1043,0,57,0,"{'ok': True, 'value': 1598, 'stdout': '1598\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0799553394317627}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [56, 6, 55, 12, 20, 31, 55, 17, 19, 59, 19, 20, 29, 17, 51, 31, 25, 5, 57, 42, 2, 5, 12, 7, 60, 28, 40, 5, 2, 18, 47, 18]
V = [125, 40, 28, 4, 36, 99, 84, 58, 15, 1, 11, 97, 116, 75, 25, 62, 121, 80, 120, 122, 7, 105, 75, 62, 119, 28, 50, 52, 48, 48, 10, 9]
C = 435"
1766,ilp_assign,2,4,9,0,9,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3655073642730713}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [3, 6]]"
1767,ilp_assign,2,7,5,0,9,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38443970680236816}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [4, 6]]"
1768,knap,2,10,11,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08388447761535645}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 5]
V = [1, 1, 10]
C = 7"
1769,sub,4,105,105,1,105,1,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07508301734924316}",1,Compute: 7479 - 7374
1770,lcs,4,4,4,1,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10707974433898926}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccd""
T = ""cccd"""
1771,knap,32,1372,1044,0,2,0,"{'ok': True, 'value': 1372, 'stdout': '1372\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09314203262329102}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 15, 31, 38, 41, 26, 46, 5, 59, 54, 11, 62, 50, 5, 21, 64, 24, 42, 9, 24, 21, 32, 60, 63, 22, 63, 9, 48, 35, 6, 36, 44]
V = [67, 70, 66, 95, 17, 112, 30, 53, 29, 51, 6, 25, 60, 64, 69, 122, 68, 81, 33, 28, 59, 68, 75, 38, 20, 65, 59, 39, 3, 1, 101, 75]
C = 541"
1772,sub,4,307,307,1,307,1,"{'ok': True, 'value': 307, 'stdout': '307\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08606863021850586}",1,Compute: 3441 - 3134
1773,mul,32,3018456555178655358092555124717475958417241887396129172795501978,130000000000000000000000000000000,0,300000000000000000000000000000000,0,"{'ok': True, 'value': 3018456555178655358092555124717475958417241887396129172795501978, 'stdout': '3018456555178655358092555124717475958417241887396129172795501978\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08426022529602051}",1,Compute: 31527033459115034440834285938674 * 95741851484157482136500174906997
1774,add,2,172,172,1,172,1,"{'ok': True, 'value': 172, 'stdout': '172\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08905911445617676}",1,Compute: 93 + 79
1775,ilp_assign,32,82,185,0,209,0,"{'ok': True, 'value': 82, 'stdout': '82\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39762163162231445}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[84, 21, 50, 81, 45, 1, 64], [35, 39, 40, 50, 16, 31, 14], [60, 27, 87, 33, 1, 73, 29], [46, 13, 30, 61, 27, 65, 48], [1, 73, 25, 35, 22, 96, 85], [10, 13, 68, 28, 31, 51, 93], [60, 63, 86, 22, 43, 91, 76]]"
1776,add,4,7365,7365,1,7365,1,"{'ok': True, 'value': 7365, 'stdout': '7365\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0818643569946289}",1,Compute: 4732 + 2633
1777,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08434414863586426}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaadcbbdaddccbb""
T = ""dbdcbabbaadabdbda"""
1778,lcs,16,7,7,1,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0755152702331543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbacdbbcdbbccddc""
T = ""cdcaaccbdddddabbd"""
1779,ilp_assign,32,72,187,0,205,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3771662712097168}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[73, 63, 50, 4, 83, 85, 6], [14, 78, 13, 52, 32, 49, 56], [83, 28, 61, 37, 18, 32, 47], [56, 50, 68, 86, 30, 17, 55], [6, 25, 33, 4, 50, 24, 43], [60, 72, 61, 2, 15, 38, 28], [53, 10, 27, 17, 37, 14, 53]]"
1780,knap,8,93,103,0,0,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07555913925170898}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 12, 15, 16, 13, 7, 11]
V = [10, 18, 21, 13, 3, 26, 18, 21]
C = 41"
1781,ilp_partition,8,1,1,1,276,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08518242835998535}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 14, 18, 16, 6, 17, 4, 4]"
1782,ilp_partition,4,3,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_4hx0yuxn/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_4hx0yuxn/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08382725715637207}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 3, 3, 2]"
1783,ilp_partition,8,1,1,1,21,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08748197555541992}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 7, 7, 6, 24, 23, 4, 21]"
1784,ilp_prod,2,12,18,0,9,0,"{'ok': True, 'value': 9, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d5e818ea2e734423b259c6affb7231bc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d5e818ea2e734423b259c6affb7231bc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n9.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16844391822814941}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[3, 1], [2, 3]]
capacity = [9, 6]
upper_bounds = [3, 3]"
1785,ilp_prod,8,85,105,0,1,0,"{'ok': True, 'value': 63, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bcf547c80bb14d2d919821aca8073da7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bcf547c80bb14d2d919821aca8073da7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 70.5714 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -57 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -63 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 3\nCbc0013I At root node, 1 cuts changed objective from -70.125 to -63 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -63, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -70.125 to -63\nProbing was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                63.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n63.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1630866527557373}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 5, 19, 21]
consumption (rows=resources) = [[8, 1, 7, 4], [7, 5, 3, 3], [7, 1, 1, 1], [8, 1, 6, 8]]
capacity = [26, 21, 22, 30]
upper_bounds = [3, 4, 3, 3]"
1786,add,2,179,179,1,179,1,"{'ok': True, 'value': 179, 'stdout': '179\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08882975578308105}",1,Compute: 80 + 99
1787,mul,8,9449465870002158,9341123658883488,0,9423335454887,0,"{'ok': True, 'value': 9449465870002158, 'stdout': '9449465870002158\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09701013565063477}",1,Compute: 99383661 * 95080678
1788,ilp_partition,16,1,1,1,39,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19095993041992188}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 7, 8, 34, 41, 12, 2, 39, 39, 10, 17, 29, 46, 18, 9, 36]"
1789,knap,16,423,138,0,0,0,"{'ok': True, 'value': 423, 'stdout': '423\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0772714614868164}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 8, 25, 2, 14, 26, 30, 26, 17, 6, 16, 26, 7, 19, 29, 19]
V = [33, 56, 60, 31, 45, 42, 30, 45, 3, 33, 16, 62, 42, 39, 7, 5]
C = 138"
1790,sub,32,20619622669397656740621446065796,0,0,206196226694576567404214460667976,0,"{'ok': True, 'value': 20619622669397656740621446065796, 'stdout': '20619622669397656740621446065796\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08780956268310547}",1,Compute: 87910151702460479145721805411231 - 67290529033062822405100359345435
1791,add,32,115332121768168215739987550384277,100000000000000000000000000000000,0,115332121768168215740089550384277,0,"{'ok': True, 'value': 115332121768168215739987550384277, 'stdout': '115332121768168215739987550384277\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08991670608520508}",1,Compute: 21886224246934214522197278462423 + 93445897521234001217790271921854
1792,ilp_assign,16,35,0,0,114,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3901791572570801}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 2, 41, 9, 16, 19, 10], [2, 48, 26, 32, 2, 16, 30], [12, 23, 3, 36, 7, 31, 23], [9, 24, 33, 23, 23, 14, 5], [11, 22, 35, 29, 10, 17, 1], [44, 32, 48, 8, 18, 29, 13], [39, 6, 1, 14, 37, 23, 11]]"
1793,knap,2,10,13,0,3,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07735419273376465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 2]
V = [10, 2, 8]
C = 3"
1794,knap,4,20,24,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07834625244140625}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 7, 8, 6]
V = [4, 6, 13, 14]
C = 13"
1795,ilp_partition,8,1,1,1,19,0,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09695219993591309}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 16, 9, 15, 18, 23, 12, 19]"
1796,ilp_partition,16,0,1,0,46,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20096683502197266}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 25, 3, 4, 41, 45, 29, 29, 20, 10, 46, 46, 40, 20, 32, 17]"
1797,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07677340507507324}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 4, 3, 1]"
1798,ilp_assign,2,2,2,1,7,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38785481452941895}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [1, 6]]"
1799,ilp_assign,32,159,185,0,205,0,"{'ok': True, 'value': 159, 'stdout': '159\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37688207626342773}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[91, 54, 50, 33, 42, 50, 12], [3, 37, 11, 43, 27, 9, 63], [91, 86, 14, 56, 23, 43, 53], [96, 75, 64, 93, 46, 44, 72], [47, 91, 50, 80, 24, 78, 94], [45, 24, 80, 87, 73, 24, 8], [78, 96, 4, 91, 86, 2, 70]]"
1800,ilp_prod,32,417,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The exact solution would require a linear programming solver, which is not feasible to provide in this format.",0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_2sbdiex6/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_2sbdiex6/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15234661102294922}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 68, 61, 51, 26, 67]
consumption (rows=resources) = [[26, 24, 11, 7, 32, 3], [2, 26, 19, 8, 12, 18], [6, 1, 5, 21, 26, 4], [18, 17, 10, 25, 6, 31]]
capacity = [102, 127, 82, 91]
upper_bounds = [3, 4, 6, 3, 3, 3]"
1801,mul,2,5049,5049,1,4999,0,"{'ok': True, 'value': 5049, 'stdout': '5049\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08041882514953613}",1,Compute: 99 * 51
1802,sub,8,40738594,11070973,0,40738594,1,"{'ok': True, 'value': 40738594, 'stdout': '40738594\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0747685432434082}",1,Compute: 51809567 - 11070973
1803,mul,32,3954927505803360188020098896700578949180488465803204895300614446,40000000000000000000000000000000,0,390938464035552165544455545854444644444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 3954927505803360188020098896700578949180488465803204895300614446, 'stdout': '3954927505803360188020098896700578949180488465803204895300614446\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08937191963195801}",1,Compute: 92448312509663320513991541412833 * 42779877733192420553213349543662
1804,knap,8,97,103,0,0,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08066940307617188}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 14, 2, 11, 12, 12, 14, 8]
V = [23, 25, 5, 15, 30, 9, 23, 24]
C = 40"
1805,mul,16,10795277733731300721332420161178,0,0,1085473505894507746586865468646666,0,"{'ok': True, 'value': 10795277733731300721332420161178, 'stdout': '10795277733731300721332420161178\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0732734203338623}",1,Compute: 1592258968517654 * 6779850481094407
1806,ilp_assign,2,2,2,1,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3907921314239502}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [1, 2]]"
1807,sub,4,5557,5557,1,5557,1,"{'ok': True, 'value': 5557, 'stdout': '5557\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08705377578735352}",1,Compute: 9807 - 4250
1808,ilp_partition,8,0,1,0,19,0,"{'ok': True, 'value': 74, 'stdout': '74\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08228588104248047}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 9, 7, 14, 24, 13, 6, 19]"
1809,ilp_assign,2,5,1,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3755960464477539}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [1, 5]]"
1810,mul,8,6003182761110910,18833353890,0,599834438410630,0,"{'ok': True, 'value': 6003182761110910, 'stdout': '6003182761110910\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07745814323425293}",1,Compute: 84920690 * 70691639
1811,sub,32,18327877235507460228631376091532,1183510314182081820,0,18327877235507460228631376091532,1,"{'ok': True, 'value': 18327877235507460228631376091532, 'stdout': '18327877235507460228631376091532\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07225799560546875}",1,Compute: 41710429806302419367513429384986 - 23382552570794959138882053293454
1812,knap,32,1657,1024,0,3,0,"{'ok': True, 'value': 1657, 'stdout': '1657\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0843505859375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [54, 43, 21, 43, 29, 18, 60, 48, 60, 1, 35, 29, 15, 47, 11, 38, 29, 5, 45, 24, 53, 55, 32, 64, 59, 44, 19, 58, 6, 45, 32, 3]
V = [34, 2, 33, 27, 86, 89, 76, 102, 41, 75, 55, 70, 29, 66, 126, 122, 36, 86, 86, 80, 23, 51, 118, 17, 104, 25, 122, 18, 114, 39, 25, 11]
C = 562"
1813,rod,4,48,11,0,12,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07448554039001465}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 11, 8, 11]"
1814,rod,32,3008,1055,0,1,0,"{'ok': True, 'value': 3008, 'stdout': '3008\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09180831909179688}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [94, 57, 83, 13, 83, 63, 22, 4, 91, 90, 32, 81, 16, 80, 66, 63, 74, 4, 6, 92, 96, 34, 54, 81, 11, 16, 34, 49, 21, 23, 55, 87]"
1815,add,32,84797965817887013488409914050577,14143625915135772756831351752827,0,84797965817887013478419904050577,0,"{'ok': True, 'value': 84797965817887013488409914050577, 'stdout': '84797965817887013488409914050577\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07611346244812012}",1,Compute: 17404243703718891597429400391417 + 67393722114168121890980513659160
1816,sub,16,792107012494879,7932107012494879,0,7922069512474879,0,"{'ok': True, 'value': 792107012494879, 'stdout': '792107012494879\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07373404502868652}",1,Compute: 9077084388287261 - 8284977375792382
1817,add,2,60,60,1,60,1,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07578444480895996}",1,Compute: 18 + 42
1818,add,2,173,173,1,173,1,"{'ok': True, 'value': 173, 'stdout': '173\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08589315414428711}",1,Compute: 81 + 92
1819,ilp_prod,4,66,55,0,66,1,"{'ok': True, 'value': 66, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6a28739a488c428ab47bfac3a4404d21-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6a28739a488c428ab47bfac3a4404d21-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 66 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -66 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                66.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n66.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15989255905151367}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 10, 3]
consumption (rows=resources) = [[2, 4, 4], [1, 2, 1], [2, 3, 2]]
capacity = [16, 12, 12]
upper_bounds = [6, 4, 4]"
1820,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08895421028137207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbad""
T = ""dccc"""
1821,ilp_partition,16,0,1,0,46,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1889951229095459}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 28, 46, 37, 11, 28, 5, 29, 46, 43, 34, 15, 7, 8, 13, 17]"
1822,knap,8,73,103,0,0,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07413268089294434}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 16, 12, 4, 13, 10, 12, 11]
V = [12, 27, 16, 13, 5, 15, 6, 17]
C = 46"
1823,ilp_assign,16,70,105,0,105,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3935384750366211}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[42, 2, 15, 4, 32, 32, 23], [19, 16, 40, 13, 8, 12, 46], [27, 2, 10, 34, 41, 14, 45], [32, 34, 39, 27, 12, 20, 15], [34, 29, 12, 26, 10, 27, 3], [31, 6, 14, 9, 34, 25, 16], [42, 14, 12, 30, 39, 17, 36]]"
1824,ilp_prod,2,20,14,0,24,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/48b7e7058758496ca5f28ca82e054e94-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/48b7e7058758496ca5f28ca82e054e94-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16420626640319824}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[3, 1], [1, 3]]
capacity = [8, 6]
upper_bounds = [3, 3]"
1825,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0875852108001709}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbabaca""
T = ""abdcddddd"""
1826,knap,4,19,28,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08337736129760742}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 6, 7]
V = [13, 6, 1, 13]
C = 11"
1827,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07636165618896484}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""ad"""
1828,mul,2,1462,1462,1,1462,1,"{'ok': True, 'value': 1462, 'stdout': '1462\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08339858055114746}",1,Compute: 34 * 43
1829,rod,32,3040,1055,0,62,0,"{'ok': True, 'value': 3040, 'stdout': '3040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08575153350830078}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [95, 37, 28, 86, 54, 60, 2, 35, 17, 43, 62, 7, 20, 73, 52, 47, 51, 71, 62, 29, 32, 1, 90, 64, 72, 38, 89, 88, 92, 62, 14, 21]"
1830,mul,32,586288728960554030085107857192699702130604189260237622816751524,58012245040877085258586560656000,0,576334343643834654745844655479490445656,0,"{'ok': True, 'value': 586288728960554030085107857192699702130604189260237622816751524, 'stdout': '586288728960554030085107857192699702130604189260237622816751524\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0786130428314209}",1,Compute: 31554103522158020066204610443558 * 18580427377657823408366151063078
1831,rod,8,72,22,0,1,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09394669532775879}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 10, 4, 21, 15, 5, 9, 11]"
1832,knap,32,1296,1255,0,17,0,"{'ok': True, 'value': 1296, 'stdout': '1296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08452129364013672}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 55, 19, 13, 23, 7, 57, 61, 20, 26, 6, 1, 14, 17, 29, 33, 5, 61, 17, 17, 13, 11, 7, 45, 14, 22, 5, 10, 60, 55, 5, 53]
V = [50, 55, 79, 15, 71, 27, 19, 128, 35, 36, 122, 81, 35, 103, 47, 35, 29, 113, 48, 14, 54, 54, 9, 38, 7, 59, 28, 45, 43, 62, 1, 120]
C = 401"
1833,sub,16,901950572930858,649597621646524,0,901950578493076,0,"{'ok': True, 'value': 901950572930858, 'stdout': '901950572930858\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08383917808532715}",1,Compute: 7065164714837417 - 6163214141906559
1834,knap,32,1613,1068,0,41,0,"{'ok': True, 'value': 1613, 'stdout': '1613\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09522485733032227}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [47, 64, 16, 22, 43, 28, 23, 37, 28, 12, 6, 4, 48, 54, 2, 41, 50, 48, 31, 59, 32, 9, 52, 46, 5, 24, 22, 58, 46, 59, 59, 43]
V = [106, 24, 31, 104, 6, 75, 124, 30, 69, 19, 11, 51, 42, 106, 58, 45, 120, 67, 37, 6, 97, 21, 106, 127, 84, 52, 125, 92, 10, 117, 63, 30]
C = 559"
1835,ilp_assign,32,152,110,0,114,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39242053031921387}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[84, 92, 68, 11, 24, 38, 70], [44, 61, 54, 9, 42, 18, 1], [60, 37, 39, 45, 48, 83, 8], [72, 16, 87, 2, 85, 85, 76], [84, 48, 39, 84, 47, 87, 93], [44, 22, 37, 83, 15, 17, 42], [92, 18, 82, 69, 82, 21, 1]]"
1836,add,8,74273115,74273115,1,74273115,1,"{'ok': True, 'value': 74273115, 'stdout': '74273115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0843043327331543}",1,Compute: 52330237 + 21942878
1837,ilp_prod,16,136,160,0,3,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b822e45d84a9455fa9732409714a7ff7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b822e45d84a9455fa9732409714a7ff7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 26 COLUMNS\nAt line 171 RHS\nAt line 193 BOUNDS\nAt line 200 ENDATA\nProblem MODEL has 21 rows, 6 columns and 126 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3.75 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15302658081054688}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 40, 48, 14, 4, 33]
consumption (rows=resources) = [[2, 7, 16, 1, 16, 11], [16, 10, 15, 12, 6, 11], [11, 13, 10, 2, 1, 10], [16, 10, 7, 13, 2, 11]]
capacity = [58, 40, 41, 40]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1838,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0772700309753418}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccaadcca""
T = ""dcadcddbb"""
1839,ilp_assign,8,35,46,0,74,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41687965393066406}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 7, 2, 6, 23, 12, 14], [22, 9, 7, 6, 7, 13, 17], [6, 6, 8, 15, 5, 20, 20], [20, 10, 19, 11, 6, 22, 11], [18, 19, 20, 10, 8, 7, 6], [10, 2, 5, 5, 1, 14, 2], [12, 23, 15, 5, 14, 7, 6]]"
1840,rod,8,152,22,0,1,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07526946067810059}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 6, 23, 5, 11, 7, 5, 16]"
1841,mul,16,33685955924034777382336095012698,330443444543464543453456919,0,3301021066005942000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 33685955924034777382336095012698, 'stdout': '33685955924034777382336095012698\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08086395263671875}",1,Compute: 4301021066005942 * 7832083453456919
1842,rod,16,464,145,0,64,0,"{'ok': True, 'value': 464, 'stdout': '464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09025430679321289}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [29, 13, 18, 33, 18, 33, 29, 13, 17, 31, 44, 6, 9, 12, 36, 16]"
1843,ilp_assign,32,59,119,0,208,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3974461555480957}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 60, 94, 72, 31, 1, 64], [80, 3, 79, 66, 3, 8, 19], [67, 55, 7, 52, 28, 79, 21], [76, 84, 40, 24, 76, 44, 19], [82, 67, 64, 78, 25, 31, 21], [59, 45, 59, 84, 1, 35, 31], [2, 34, 82, 41, 67, 75, 87]]"
1844,sub,16,458172055135873,3942876186033871,0,45817205513578,0,"{'ok': True, 'value': 458172055135873, 'stdout': '458172055135873\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08836030960083008}",1,Compute: 4401048241169744 - 3942876186033871
1845,rod,2,6,4,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08378243446350098}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
1846,rod,4,14,14,1,4,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0757906436920166}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 7, 6, 2]"
1847,mul,2,1188,1188,1,1236,0,"{'ok': True, 'value': 1188, 'stdout': '1188\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08470487594604492}",1,Compute: 54 * 22
1848,add,16,8177576670010442,5669356434103413,0,8177576669910442,0,"{'ok': True, 'value': 8177576670010442, 'stdout': '8177576670010442\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08595728874206543}",1,Compute: 5194319933896749 + 2983256736113693
1849,lcs,4,3,3,1,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07569527626037598}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abac""
T = ""abc"""
1850,mul,4,22148340,0,0,2217940,0,"{'ok': True, 'value': 22148340, 'stdout': '22148340\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07753252983093262}",1,Compute: 5028 * 4405
1851,sub,4,7529,7529,1,7529,1,"{'ok': True, 'value': 7529, 'stdout': '7529\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07791805267333984}",1,Compute: 9794 - 2265
1852,lcs,32,18,10,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0761568546295166}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adadbbcbbddadabbcbccbdcccdbaddbd""
T = ""cdaccdddbccccbbccaacaccdccdcabcac"""
1853,add,16,16660076620650089,9,0,16659976620650089,0,"{'ok': True, 'value': 16660076620650089, 'stdout': '16660076620650089\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07753300666809082}",1,Compute: 9714592390654944 + 6945484229995145
1854,lcs,8,5,5,1,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09981799125671387}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddcbaba""
T = ""bdccdbadd"""
1855,mul{'ok': True, 'value': 5078307683825169596253501530915594277294725271713300407661002380, 'stdout': '5078307683825169596253501530915594277294725271713300407661002380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09367895126342773}",1,Compute: 62825566389330396316468939173732 * 80831864727726729382882874762715
1856,ilp_prod,32,252,0,0,285,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_cc2vnk3y/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16533684730529785}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [93, 79, 40, 92, 37, 35]
consumption (rows=resources) = [[25, 6, 12, 17, 19, 21], [17, 25, 16, 11, 4, 22], [30, 30, 9, 29, 12, 7], [22, 4, 13, 3, 6, 9]]
capacity = [90, 76, 70, 78]
upper_bounds = [3, 3, 4, 3, 4, 3]"
1857,add,32,37049571332791181768464054194283,,0,37049571332791181768464054094283,0,"{'ok': True, 'value': 37049571332791181768464054194283, 'stdout': '37049571332791181768464054194283\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09479594230651855}",1,Compute: 25708646856424752588063035116355 + 11340924476366429180401019077928
1858,ilp_assign,2,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39626193046569824}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 1], [3, 2]]"
1859,ilp_partition,8,1,1,1,10,0,"{'ok': True, 'value': 71, 'stdout': '71\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09881234169006348}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 13, 4, 8, 13, 6, 23, 10]"
1860,add,8,106233975,106233975,1,106233975,1,"{'ok': True, 'value': 106233975, 'stdout': '106233975\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07580757141113281}",1,Compute: 70665414 + 35568561
1861,mul,4,30605352,3050,0,30683112,0,"{'ok': True, 'value': 30605352, 'stdout': '30605352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08107399940490723}",1,Compute: 3116 * 9822
1862,add,2,124,124,1,124,1,"{'ok': True, 'value': 124, 'stdout': '124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07600736618041992}",1,Compute: 59 + 65
1863,ilp_partition,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08249831199645996}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 2, 4]"
1864,sub,16,1246732491995065,12467324922005065,0,1246732492004865,0,"{'ok': True, 'value': 1246732491995065, 'stdout': '1246732491995065\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09012603759765625}",1,Compute: 8885165128603607 - 7638432636608542
1865,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08767247200012207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddb""
T = ""bccac"""
1866,mul,8,4608236373664350,851826,0,460944453365350,0,"{'ok': True, 'value': 4608236373664350, 'stdout': '4608236373664350\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08649206161499023}",1,Compute: 54098282 * 85182675
1867,rod,4,36,23,0,11,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08380270004272461}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 11, 12, 9]"
1868,ilp_prod,16,349,"The problem can be solved using a linear programming approach, but a specific solution cannot be provided without using a solver.",0,4,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/389d0a0a4046479c8d091a26ed8c1769-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/389d0a0a4046479c8d091a26ed8c1769-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 122 RHS\nAt line 137 BOUNDS\nAt line 144 ENDATA\nProblem MODEL has 14 rows, 6 columns and 84 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 2.08333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15909385681152344}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 43, 36, 9, 24, 48]
consumption (rows=resources) = [[1, 7, 7, 9, 6, 3], [16, 4, 1, 5, 13, 10], [9, 2, 4, 8, 10, 1], [11, 1, 16, 6, 7, 6]]
capacity = [58, 41, 61, 60]
upper_bounds = [3, 8, 3, 6, 3, 4]"
1869,knap,8,98,110,0,0,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0883173942565918}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 14, 7, 15, 5, 7, 3, 14]
V = [5, 25, 10, 16, 20, 17, 31, 25]
C = 35"
1870,rod,8,128,-1,0,22,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08945226669311523}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 11, 12, 15, 10, 3, 2, 17]"
1871,ilp_assign,16,64,105,0,117,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3975367546081543}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 7, 13, 45, 21, 23, 43], [33, 23, 20, 30, 31, 42, 24], [44, 40, 10, 10, 29, 1, 24], [22, 13, 38, 3, 18, 8, 25], [9, 45, 36, 21, 2, 30, 10], [37, 42, 34, 9, 12, 45, 24], [11, 12, 23, 12, 46, 48, 43]]"
1872,ilp_partition,8,2,1,0,17,0,"{'ok': True, 'value': 74, 'stdout': '74\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0846402645111084}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 9, 9, 17, 17, 13, 8, 17]"
1873,add,32,166601005128233951742565667644594,166601005128233951742565667644594,1,166601005128233951742565667644594,1,"{'ok': True, 'value': 166601005128233951742565667644594, 'stdout': '166601005128233951742565667644594\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08532094955444336}",1,Compute: 74014283140639899402517176436456 + 92586721987594052340048491208138
1874,ilp_prod,32,316,1000,0,101,0,"{'ok': True, 'value': 108, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ef948009389b4ff8880beaa6ba1f7f10-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ef948009389b4ff8880beaa6ba1f7f10-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 139.765 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -108 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                108.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n108.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1603412628173828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 79, 50, 7, 75, 40]
consumption (rows=resources) = [[17, 16, 24, 15, 26, 14], [11, 7, 4, 29, 12, 2], [9, 2, 31, 1, 3, 29], [16, 16, 17, 21, 27, 15]]
capacity = [66, 105, 122, 101]
upper_bounds = [3, 4, 3, 3, 3, 4]"
1875,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09360504150390625}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccb""
T = ""dca"""
1876,sub,16,3096080100583203,-2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121,0,3096080099583193,0,"{'ok': True, 'value': 3096080100583203, 'stdout': '3096080100583203\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07680368423461914}",1,Compute: 7986335884218023 - 4890255783634820
1877,ilp_partition,4,1,4,0,6,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07310104370117188}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 3, 8]"
1878,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_nsyugyur/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_nsyugyur/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09568357467651367}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
1879,ilp_prod,8,53,105,0,3,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ba9a403e55a9459f91e7f985949cb54b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ba9a403e55a9459f91e7f985949cb54b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3.85714 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16942238807678223}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 4, 21, 22]
consumption (rows=resources) = [[7, 2, 7, 1], [3, 4, 7, 6], [4, 2, 7, 6], [1, 2, 4, 6]]
capacity = [27, 17, 29, 25]
upper_bounds = [3, 4, 3, 3]"
1880,knap,4,13,14,0,0,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08873152732849121}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 4, 4]
V = [8, 2, 11, 2]
C = 7"
1881,ilp_prod,4,36,55,0,33,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/45c6717122384c47abd30e8b24529be5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/45c6717122384c47abd30e8b24529be5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 36 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -36 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16089415550231934}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 11, 11]
consumption (rows=resources) = [[4, 3, 1], [2, 4, 4], [2, 2, 1]]
capacity = [16, 8, 13]
upper_bounds = [4, 3, 3]"
1882,sub,32,58676654566412802605992205697355,58606604565452806246023,0,58676654566412802606002205697355,0,"{'ok': True, 'value': 58676654566412802605992205697355, 'stdout': '58676654566412802605992205697355\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09549427032470703}",1,Compute: 93941409238233539514734050679421 - 35264754671820736908741844982066
1883,sub,16,688856055881072,688856056989072,0,6888550557880872,0,"{'ok': True, 'value': 688856055881072, 'stdout': '688856055881072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07537293434143066}",1,Compute: 6436630547791600 - 5747774491910528
1884,lcs,16,10,6,0,17,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0898139476776123}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdbcabaadaccbdb""
T = ""accaabacaacbabd"""
1885,sub,2,36,36,1,36,1,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09825301170349121}",1,Compute: 88 - 52
1886,knap,32,1849,10491,0,60,0,"{'ok': True, 'value': 1849, 'stdout': '1849\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08741211891174316}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 31, 11, 58, 7, 15, 14, 64, 59, 42, 39, 8, 1, 8, 27, 60, 5, 27, 46, 38, 19, 62, 49, 24, 13, 64, 49, 44, 23, 16, 34, 15]
V = [65, 29, 66, 123, 18, 49, 100, 14, 14, 113, 92, 72, 20, 78, 79, 53, 84, 94, 70, 100, 87, 85, 122, 90, 119, 97, 48, 49, 61, 72, 75, 119]
C = 492"
1887,knap,8,99,110,0,0,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09185051918029785}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 7, 6, 10, 3, 9, 6, 13]
V = [20, 12, 30, 26, 6, 23, 23, 15]
C = 30"
1888,mul,4,10630620,12600000,0,10647420,0,"{'ok': True, 'value': 10630620, 'stdout': '10630620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08484339714050293}",1,Compute: 1260 * 8437
1889,ilp_prod,16,217,105,0,150,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_q667sq0o/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_q667sq0o/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1441960334777832}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 28, 19, 9, 15, 14]
consumption (rows=resources) = [[11, 3, 1, 6, 3, 8], [4, 10, 12, 4, 3, 11], [1, 7, 7, 12, 1, 13], [10, 9, 16, 5, 2, 13]]
capacity = [62, 62, 32, 44]
upper_bounds = [4, 4, 3, 3, 10, 3]"
1890,ilp_prod,2,10,23,0,0,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/acb5dcb6eda54707a06707f017de1ce3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/acb5dcb6eda54707a06707f017de1ce3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 8.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16138076782226562}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[1, 3], [3, 3]]
capacity = [6, 6]
upper_bounds = [3, 3]"
1891,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07932472229003906}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [29, 83, 14, 95, 22, 63, 4, 15, 77, 62, 44, 92, 39, 96, 34, 56, 51, 95, 44, 13, 75, 18, 45, 89]"
1892,ilp_assign,16,51,105,0,117,0,"{'ok': True, 'value': 51, 'stdout': '51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.393627405166626}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 39, 23, 40, 27, 32, 13], [36, 20, 43, 37, 44, 15, 34], [34, 23, 6, 13, 3, 9, 28], [11, 37, 38, 32, 30, 40, 7], [29, 12, 15, 36, 21, 40, 35], [44, 34, 13, 8, 44, 19, 32], [43, 16, 1, 19, 21, 42, 20]]"
1893,ilp_assign,16,59,105,0,117,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39064669609069824}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 12, 31, 23, 15, 29, 12], [31, 27, 28, 47, 5, 28, 3], [37, 40, 9, 48, 32, 8, 20], [20, 24, 28, 27, 19, 26, 46], [32, 32, 46, 10, 17, 40, 42], [23, 26, 3, 20, 10, 20, 20], [11, 3, 43, 25, 6, 36, 38]]"
1894,rod,32,760,1050,0,72,0,"{'ok': True, 'value': 760, 'stdout': '760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0972132682800293}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [10, 17, 74, 12, 37, 35, 94, 45, 38, 61, 41, 17, 60, 69, 55, 56, 82, 78, 1, 58, 55, 2, 85, 36, 34, 72, 69, 93, 12, 52, 36, 22]"
1895,sub,4,7110,7110,1,7110,1,"{'ok': True, 'value': 7110, 'stdout': '7110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07830524444580078}",1,Compute: 8846 - 1736
1896,lcs,8,4,4,1,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0908966064453125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdbdbdb""
T = ""cacbddc"""
1897,add,2,153,153,1,153,1,"{'ok': True, 'value': 153, 'stdout': '153\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08339595794677734}",1,Compute: 96 + 57
1898,ilp_prod,2,28,23,0,21,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a1ffcd6d165e474c971f60f429a6a1e7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a1ffcd6d165e474c971f60f429a6a1e7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15276813507080078}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[2, 3], [1, 1]]
capacity = [8, 9]
upper_bounds = [4, 3]"
1899,add,16,18764727908699130,10137342150137342,0,75058911634796520,0,"{'ok': True, 'value': 75058911634796520, 'stdout': '75058911634796520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0819694995880127}",0,Compute: 9679905850137342 + 9084822058561788
1900,sub,32,67768734189524354266799240093994,110210109210109,0,67768734189524354166800239094094,0,"{'ok': True, 'value': 67768734189524354266799240093994, 'stdout': '67768734189524354266799240093994\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10400843620300293}",1,Compute: 91821016991241654086738320169892 - 24052282801717299819939080075898
1901,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07837390899658203}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [35, 57, 71, 24, 60, 95, 10, 16, 95, 13, 28, 78, 78, 48, 23, 53, 57, 38, 78, 32, 37, 1, 25, 1]"
1902,rod,8,120,30,0,30,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07390904426574707}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 17, 24, 17, 8, 1, 11, 15]"
1903,add,16,14171215756437147,14171215756434247,0,14171215756437147,1,"{'ok': True, 'value': 14171215756437147, 'stdout': '14171215756437147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07693791389465332}",1,Compute: 5548319444193124 + 8622896312244023
1904,rod,4,40,30,0,1,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0750129222869873}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 2, 1, 3]"
1905,add,4,11705,11705,1,11705,1,"{'ok': True, 'value': 11705, 'stdout': '11705\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08410072326660156}",1,Compute: 4427 + 7278
1906,sub,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07649898529052734}",1,Compute: 84 - 80
1907,ilp_prod,32,192,1056,0,345,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_mkd1z6ce/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15596365928649902}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [47, 18, 5, 79, 96, 23]
consumption (rows=resources) = [[31, 9, 23, 30, 11, 22], [31, 31, 30, 27, 29, 20], [12, 27, 12, 28, 21, 23], [10, 22, 9, 2, 7, 28]]
capacity = [105, 66, 126, 123]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1908,rod,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07950019836425781}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 5]"
1909,ilp_assign,32,154,187,0,208,0,"{'ok': True, 'value': 154, 'stdout': '154\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39258265495300293}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[43, 85, 36, 55, 4, 35, 14], [34, 53, 56, 67, 52, 83, 65], [71, 35, 27, 78, 86, 48, 93], [63, 87, 41, 40, 27, 42, 8], [4, 55, 19, 70, 27, 51, 63], [85, 45, 51, 74, 4, 94, 71], [77, 9, 41, 44, 48, 95, 51]]"
1910,mul,4,19098240,19089120,0,19239200,0,"{'ok': True, 'value': 19098240, 'stdout': '19098240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07488107681274414}",1,Compute: 2688 * 7105
1911,sub,32,44113081491256616741294780018584,13,0,44113081491256616741304780018584,0,"{'ok': True, 'value': 44113081491256616741294780018584, 'stdout': '44113081491256616741294780018584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08858513832092285}",1,Compute: 83480188440836695188782596338182 - 39367106949580078447487816319598
1912,rod,4,48,29,0,1,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07785606384277344}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 5, 1, 5]"
1913,knap,8,112,100,0,0,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07660889625549316}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 15, 1, 5, 8, 4, 8, 9]
V = [24, 15, 12, 29, 23, 24, 3, 12]
C = 30"
1914,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07471370697021484}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 3]"
1915,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08783125877380371}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacb""
T = ""bcbb"""
1916,mul,32,5301248159229873561234682463041822255640243369291075091885553656,,0,510344404669262666262625466262666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 5301248159229873561234682463041822255640243369291075091885553656, 'stdout': '5301248159229873561234682463041822255640243369291075091885553656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07614421844482422}",1,Compute: 61338728821750229363956781171214 * 86425791030577940235341387559204
1917,ilp_partition,32,0,1,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0301060676574707}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 57, 16, 76, 87, 82, 42, 42, 30, 78, 45, 93, 74, 45, 31, 53, 49, 46, 63, 14, 51, 20, 35, 83]"
1918,ilp_assign,32,72,186,0,185,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40296339988708496}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 17, 65, 16, 39, 2, 34], [80, 70, 76, 68, 56, 28, 12], [83, 76, 6, 57, 54, 11, 83], [50, 34, 78, 6, 43, 86, 63], [30, 52, 11, 25, 70, 27, 53], [72, 5, 31, 93, 51, 87, 62], [80, 88, 21, 33, 11, 40, 28]]"
1919,lcs,32,17,10,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09587788581848145}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdcacccbdcbccbabadacbdcacbbcbbb""
T = ""ddcaabcdacddaababddcaabbbcddcacca"""
1920,ilp_prod,32,294,109,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_nf_u526e/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_nf_u526e/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15475106239318848}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 41, 17, 29, 61, 64]
consumption (rows=resources) = [[3, 5, 13, 18, 27, 18], [15, 4, 32, 13, 8, 5], [29, 27, 20, 6, 6, 29], [23, 1, 23, 15, 21, 22]]
capacity = [115, 77, 92, 100]
upper_bounds = [3, 3, 3, 5, 4, 3]"
1921,ilp_assign,16,32,105,0,114,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43082380294799805}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 24, 8, 40, 28, 23, 2], [9, 14, 9, 47, 47, 18, 12], [23, 42, 1, 43, 28, 41, 38], [26, 22, 44, 18, 5, 5, 14], [26, 18, 24, 13, 9, 36, 5], [3, 5, 18, 25, 26, 40, 40], [45, 13, 8, 1, 47, 1, 25]]"
1922,add,32,171130258772044764100454346376944,171129958771044764100454346376944,0,171129258772044764100454346376944,0,"{'ok': True, 'value': 171130258772044764100454346376944, 'stdout': '171130258772044764100454346376944\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07897830009460449}",1,Compute: 95806806056872932533580506573233 + 75323452715171831566873839803711
1923,lcs,32,21,10,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07676529884338379}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbaadacdabdbdcccccaccbdcbacccbd""
T = ""dbbadcdaddabdcdbadbdcbaaacdcbdcdd"""
1924,add,2,77,77,1,77,1,"{'ok': True, 'value': 77, 'stdout': '77\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0749654769897461}",1,Compute: 64 + 13
1925,rod,4,36,36,1,4,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0853114128112793}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 4, 2, 2]"
1926,mul,32,2416351470144338043938555530339194409489536444441710499584680800,64,0,241926261994566679948896575111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 2416351470144338043938555530339194409489536444441710499584680800, 'stdout': '2416351470144338043938555530339194409489536444441710499584680800\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07802391052246094}",1,Compute: 24326333969502495753023750011100 * 99330687195763903370990244106728
1927,add,4,12277,12277,1,12277,1,"{'ok': True, 'value': 12277, 'stdout': '12277\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08573174476623535}",1,Compute: 5438 + 6839
1928,ilp_prod,32,556,"The solution to the problem is to maximize the total profit while ensuring that the consumption of each resource does not exceed its capacity. The exact solution would require solving the linear programming problem, which is beyond the scope of this format.",0,70,0,"{'ok': True, 'value': 158, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/19c5fe0cb4d241a0ad235dddbd07d0c8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/19c5fe0cb4d241a0ad235dddbd07d0c8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 25 COLUMNS\nAt line 164 RHS\nAt line 185 BOUNDS\nAt line 192 ENDATA\nProblem MODEL has 20 rows, 6 columns and 120 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 170.742 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -158 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                158.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nMax Profit: 158.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20593476295471191}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [79, 49, 90, 57, 16, 68]
consumption (rows=resources) = [[30, 8, 9, 11, 1, 27], [25, 31, 10, 30, 7, 22], [15, 8, 3, 17, 7, 28], [32, 10, 4, 19, 31, 14]]
capacity = [120, 67, 96, 70]
upper_bounds = [3, 3, 6, 3, 3, 3]"
1929,ilp_assign,16,78,105,0,114,0,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3890726566314697}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[28, 27, 7, 41, 48, 19, 3], [44, 14, 4, 38, 3, 40, 12], [36, 26, 21, 16, 32, 33, 16], [24, 30, 22, 48, 42, 38, 14], [46, 45, 12, 38, 9, 36, 8], [28, 21, 4, 7, 31, 11, 25], [18, 23, 26, 1, 27, 32, 31]]"
1930,knap,2,11,4,0,1,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07595705986022949}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 1]
V = [8, 1, 3]
C = 2"
1931,mul,32,1803900120886580245274562108645513648139927183321587455846389764,1803374962816986758831887599179072,0,180265492261691590839388791997896858888,0,"{'ok': True, 'value': 1803900120886580245274562108645513648139927183321587455846389764, 'stdout': '1803900120886580245274562108645513648139927183321587455846389764\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0774698257446289}",1,Compute: 45084374045414668970797184099474 * 40011648361125397459840797977586
1932,ilp_prod,2,24,35,0,24,1,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/144ad4062fed4e46aec586f55d2ef530-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/144ad4062fed4e46aec586f55d2ef530-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 15.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1649947166442871}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7]
consumption (rows=resources) = [[2, 3], [3, 2]]
capacity = [10, 10]
upper_bounds = [3, 3]"
1933,add,16,12429271037140352,8354584315410348,0,12430269037140352,0,"{'ok': True, 'value': 12429271037140352, 'stdout': '12429271037140352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0747365951538086}",1,Compute: 9177534607663074 + 3251736429477278
1934,mul,4,18653120,0,0,18039200,0,"{'ok': True, 'value': 18653120, 'stdout': '18653120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07952332496643066}",1,Compute: 3284 * 5680
1935,ilp_prod,4,22,33,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6be5e5c4/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 11*x[1] + 4*x[2] for x in x.values()])\n  File ""/tmp/cot_exec_6be5e5c4/main.py"", line 10, in <listcomp>\n    prob += lpSum([3*x[0] + 11*x[1] + 4*x[2] for x in x.values()])\nTypeError: \'LpVariable\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14941787719726562}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 11, 4]
consumption (rows=resources) = [[3, 4, 3], [1, 3, 2], [1, 4, 4]]
capacity = [8, 15, 10]
upper_bounds = [3, 3, 3]"
1936,add,8,74432821,74432821,1,74432821,1,"{'ok': True, 'value': 74432821, 'stdout': '74432821\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07480835914611816}",1,Compute: 32661030 + 41771791
1937,add,8,157725538,58143901,0,157725538,1,"{'ok': True, 'value': 157725538, 'stdout': '157725538\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08767819404602051}",1,Compute: 99581637 + 58143901
1938,mul,16,45401431214912225411789638546280,The final result of the multiplication is a very large number.,0,454136484834556464444444444444,0,"{'ok': True, 'value': 45401431214912225411789638546280, 'stdout': '45401431214912225411789638546280\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07665276527404785}",1,Compute: 9992477827016710 * 4543560866571068
1939,knap,16,336,1024,0,0,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0847475528717041}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 10, 29, 1, 12, 13, 14, 14, 11, 1, 24, 2, 15, 3, 10, 11]
V = [15, 31, 53, 19, 27, 45, 7, 10, 48, 37, 40, 7, 28, 61, 4, 11]
C = 91"
1940,knap,8,88,147,0,0,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08746862411499023}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 16, 11, 8, 4, 1, 12]
V = [5, 12, 31, 8, 15, 10, 30, 5]
C = 27"
1941,rod,32,2912,1055,0,1,0,"{'ok': True, 'value': 2912, 'stdout': '2912\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09391546249389648}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [91, 85, 87, 60, 73, 14, 71, 26, 8, 72, 11, 57, 9, 75, 12, 55, 85, 55, 43, 67, 72, 54, 8, 12, 26, 77, 39, 25, 38, 92, 70, 31]"
1942,knap,16,453,165,0,0,0,"{'ok': True, 'value': 453, 'stdout': '453\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08383536338806152}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [20, 20, 29, 31, 30, 20, 17, 31, 16, 22, 14, 28, 20, 8, 3, 22]
V = [50, 61, 14, 10, 16, 60, 43, 37, 50, 9, 48, 26, 63, 9, 11, 58]
C = 165"
1943,ilp_prod,8,76,100,0,2,0,"{'ok': True, 'value': 57, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/da6e3fcba6cd4dc2909c45d6772f7cc0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/da6e3fcba6cd4dc2909c45d6772f7cc0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 64.9076 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -47 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -57 found by DiveCoefficient after 151 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 4\nCbc0013I At root node, 3 cuts changed objective from -64.907563 to -57.000005 in 68 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 119 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 18 row cuts average 3.9 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -57, took 151 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -64.9076 to -57\nProbing was tried 68 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 68 times and created 119 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 68 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 68 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 68 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 68 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 68 times and created 18 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                57.00000000\nEnumerated nodes:               0\nTotal iterations:               151\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n57.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17777681350708008}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 19, 13, 9]
consumption (rows=resources) = [[8, 3, 4, 1], [7, 8, 1, 8], [8, 6, 7, 2], [3, 8, 3, 1]]
capacity = [24, 32, 32, 26]
upper_bounds = [3, 3, 4, 4]"
1944,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07737946510314941}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daddacac""
T = ""cababcab"""
1945,sub,16,1766749768307267,1766749768307267,1,1766749768307267,1,"{'ok': True, 'value': 1766749768307267, 'stdout': '1766749768307267\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08574461936950684}",1,Compute: 6778831109929630 - 5012081341622363
1946,ilp_assign,16,49,105,0,114,0,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.48194217681884766}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[44, 1, 21, 28, 44, 8, 45], [12, 31, 48, 2, 22, 39, 7], [23, 37, 22, 10, 11, 4, 11], [20, 32, 30, 10, 32, 40, 3], [23, 23, 48, 22, 22, 3, 7], [26, 27, 32, 30, 46, 41, 14], [13, 7, 3, 35, 4, 31, 17]]"
1947,lcs,16,11,7,0,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07571911811828613}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbbddabbbddbcaa""
T = ""bbbbdacdbbadcaacb"""
1948,ilp_prod,4,64,36,0,36,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b7975392de3140e5934272301052b367-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b7975392de3140e5934272301052b367-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1575772762298584}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 4]
consumption (rows=resources) = [[1, 1, 4], [2, 1, 3], [4, 1, 4]]
capacity = [16, 12, 14]
upper_bounds = [3, 10, 3]"
1949,ilp_partition,8,0,1,0,22,0,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07409191131591797}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 20, 22, 15, 14, 8, 24, 12]"
1950,sub,4,1693,1693,1,1693,1,"{'ok': True, 'value': 1693, 'stdout': '1693\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07694745063781738}",1,Compute: 6611 - 4918
1951,add,8,93047268,93047268,1,93047268,1,"{'ok': True, 'value': 93047268, 'stdout': '93047268\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08663582801818848}",1,Compute: 54616040 + 38431228
1952,add,4,7658,6168,0,7658,1,"{'ok': True, 'value': 7658, 'stdout': '7658\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08568453788757324}",1,Compute: 4929 + 2729
1953,mul,4,22041465,204,0,22159245,0,"{'ok': True, 'value': 22041465, 'stdout': '22041465\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07724833488464355}",1,Compute: 9951 * 2215
1954,knap,32,1760,1043,0,7,0,"{'ok': True, 'value': 1760, 'stdout': '1760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0828402042388916}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 35, 28, 15, 11, 62, 5, 47, 40, 29, 63, 20, 58, 8, 33, 7, 12, 40, 60, 21, 49, 49, 2, 18, 44, 16, 33, 23, 21, 23, 9, 56]
V = [20, 122, 81, 34, 85, 10, 77, 53, 40, 46, 96, 107, 48, 50, 1, 116, 99, 97, 68, 113, 35, 125, 32, 19, 112, 74, 19, 111, 73, 2, 90, 66]
C = 474"
1955,sub,4,1590,1590,1,1590,1,"{'ok': True, 'value': 1590, 'stdout': '1590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08607840538024902}",1,Compute: 6723 - 5133
1956,knap,4,15,15,1,0,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08618307113647461}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 3, 6, 3]
V = [12, 5, 7, 8]
C = 10"
1957,ilp_prod,8,97,102,0,4,0,"{'ok': True, 'value': 3, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/aadfa55455334b0d837e9f876d66e51b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/aadfa55455334b0d837e9f876d66e51b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 105.367 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -74 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -83 found by DiveCoefficient after 48 iterations and 0 nodes (0.01 seconds)\nCbc0031I 2 added rows had average density of 4\nCbc0013I At root node, 2 cuts changed objective from -105.36691 to -97.000051 in 20 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 46 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 5 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -83 best solution, best possible -97.000051 (0.01 seconds)\nCbc0012I Integer solution of -97 found by rounding after 49 iterations and 1 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -97, took 49 iterations and 1 nodes (0.01 seconds)\nCbc0032I Strong branching done 4 times (6 iterations), fathomed 0 nodes and fixed 0 variables\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -105.367 to -97.0001\nProbing was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 21 times and created 46 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nKnapsack was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 20 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                97.00000000\nEnumerated nodes:               1\nTotal iterations:               49\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\nStatus: Optimal\nOptimal value: 97.0\nQuantity of product 0: 0.0\nQuantity of product 1: 0.0\nQuantity of product 2: 2.0\nQuantity of product 3: 3.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2096424102783203}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 18, 14, 23]
consumption (rows=resources) = [[3, 7, 1, 6], [5, 1, 1, 7], [3, 8, 4, 7], [8, 3, 4, 1]]
capacity = [21, 29, 30, 16]
upper_bounds = [3, 3, 4, 3]"
1958,knap,16,362,165,0,29,0,"{'ok': True, 'value': 362, 'stdout': '362\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08859896659851074}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 21, 25, 18, 26, 14, 27, 23, 5, 29, 20, 20, 26, 23, 2, 19]
V = [17, 15, 42, 31, 32, 44, 18, 6, 45, 22, 33, 52, 8, 29, 39, 44]
C = 165"
1959,lcs,16,8,7,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10198187828063965}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcdbbaacddcbbcc""
T = ""aaacbadccabcdcb"""
1960,ilp_prod,32,165,1080,0,121,0,"{'ok': True, 'value': 76, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9885e5e41972433099ffbfefdd78f2bf-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9885e5e41972433099ffbfefdd78f2bf-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 79.2759 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -76 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                76.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n76.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14958620071411133}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 4, 39, 55, 75, 24]
consumption (rows=resources) = [[9, 4, 13, 6, 11, 12], [10, 22, 32, 23, 30, 30], [15, 21, 32, 25, 17, 10], [29, 18, 24, 17, 23, 28]]
capacity = [82, 69, 102, 121]
upper_bounds = [4, 3, 3, 3, 3, 3]"
1961,mul,32,6948820112446278159975296041927053055564495769501302737151583016,,0,7016666404568444464684846864486406464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464,0,"{'ok': True, 'value': 6948820112446278159975296041927053055564495769501302737151583016, 'stdout': '6948820112446278159975296041927053055564495769501302737151583016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07534956932067871}",1,Compute: 78125490628916627048190305178396 * 88944338864405260899384748335846
1962,knap,32,1514,2263,0,56,0,"{'ok': True, 'value': 1514, 'stdout': '1514\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08293414115905762}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 22, 22, 28, 62, 64, 61, 27, 52, 24, 18, 33, 4, 58, 56, 19, 42, 1, 23, 52, 51, 64, 34, 16, 27, 2, 9, 50, 16, 33, 51, 52]
V = [55, 79, 45, 69, 49, 33, 124, 16, 75, 44, 30, 68, 14, 114, 121, 15, 30, 93, 40, 118, 19, 66, 101, 74, 1, 95, 37, 112, 12, 84, 32, 125]
C = 541"
1963,sub,8,17588748,17588748,1,17588748,1,"{'ok': True, 'value': 17588748, 'stdout': '17588748\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07706737518310547}",1,Compute: 86104392 - 68515644
1964,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07694554328918457}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 90, 29, 7, 58, 15, 34, 35, 49, 33, 83, 49, 16, 92, 94, 30, 7, 21, 31, 35, 15, 63, 27, 81]"
1965,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08179473876953125}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 17, 9, 10, 5, 19, 24]"
1966,sub,32,7424786479029339390199536387560,67857441021016397248336474841986,0,67857441021016397248336474841986,0,"{'ok': True, 'value': 7424786479029339390199536387560, 'stdout': '7424786479029339390199536387560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08626365661621094}",1,Compute: 75282227500045736638536011229546 - 67857441021016397248336474841986
1967,mul,4,23116433,63,0,2333333,0,"{'ok': True, 'value': 23116433, 'stdout': '23116433\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0744636058807373}",1,Compute: 2843 * 8131
1968,ilp_partition,2,1,1,1,3,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07768034934997559}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 1, 3]"
1969,sub,8,12585686,12585686,1,12585686,1,"{'ok': True, 'value': 12585686, 'stdout': '12585686\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08362317085266113}",1,Compute: 27072344 - 14486658
1970,lcs,32,21,16,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08643221855163574}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcdabaacbbacdcacbbdabcdaadbaada""
T = ""daabcddaabbbadbbacdacaadadacdcccd"""
1971,lcs,16,7,5,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0962672233581543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdaadacddccaccd""
T = ""bbbabccbbcacbaa"""
1972,ilp_partition,16,1,1,1,-1,0,"{'ok': True, 'value': 207, 'stdout': '207\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10153603553771973}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 12, 7, 3, 43, 20, 39, 25, 16, 1, 5, 3, 2, 12, 20, 31]"
1973,knap,8,107,110,0,8,0,"{'ok': True, 'value': 107, 'stdout': '107\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0900115966796875}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 15, 12, 10, 5, 2, 8, 4]
V = [29, 32, 15, 21, 8, 20, 10, 18]
C = 29"
1974,mul,4,5476089,976,0,5383499,0,"{'ok': True, 'value': 5476089, 'stdout': '5476089\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08430004119873047}",1,Compute: 5171 * 1059
1975,ilp_prod,16,166,The problem is a linear programming problem and can be solved using a solver. The solution would be the maximum profit that can be obtained while satisfying all the constraints.,0,155,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_28q3xdsa/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_28q3xdsa/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16475272178649902}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 32, 45, 22, 7, 38]
consumption (rows=resources) = [[13, 9, 9, 7, 15, 15], [8, 15, 1, 14, 10, 9], [2, 2, 7, 14, 9, 8], [15, 12, 11, 14, 10, 1]]
capacity = [49, 43, 49, 32]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1976,mul,16,40896728219586924683203278938648,410689615436966445884425568,0,4134673017887888444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 40896728219586924683203278938648, 'stdout': '40896728219586924683203278938648\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07593393325805664}",1,Compute: 4202690753041931 * 9731081971707208
1977,lcs,32,18,10,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07704687118530273}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcacddcdcabcbdddcccbbdcbdbdaaab""
T = ""bdcdcbaaababbbcaaacccbbcbcdbccb"""
1978,mul,8,2232710851420686,84655221,0,2213644433661226,0,"{'ok': True, 'value': 2232710851420686, 'stdout': '2232710851420686\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08895230293273926}",1,Compute: 26374166 * 84655221
1979,ilp_assign,2,5,7,0,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36730384826660156}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 5], [4, 2]]"
1980,knap,2,9,12,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07877802848815918}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 4]
V = [3, 8, 9]
C = 5"
1981,ilp_partition,16,1,1,1,44,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20703911781311035}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 32, 5, 38, 21, 9, 9, 36, 5, 44, 32, 10, 17, 44, 18, 32]"
1982,ilp_prod,32,197,180,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xxk0c3dm/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_xxk0c3dm/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15934467315673828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 68, 69, 54, 20, 64]
consumption (rows=resources) = [[24, 31, 31, 30, 27, 22], [21, 19, 7, 8, 19, 12], [2, 22, 20, 19, 30, 1], [18, 2, 23, 20, 6, 8]]
capacity = [79, 66, 100, 82]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1983,knap,32,1930,106,0,3,0,"{'ok': True, 'value': 1930, 'stdout': '1930\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09142351150512695}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [61, 10, 24, 17, 34, 57, 31, 52, 30, 64, 4, 4, 41, 32, 34, 10, 50, 13, 42, 27, 13, 12, 11, 31, 16, 60, 24, 50, 17, 13, 32, 64]
V = [96, 125, 116, 87, 95, 80, 31, 88, 102, 41, 41, 98, 95, 100, 74, 109, 52, 78, 2, 68, 55, 76, 101, 1, 106, 32, 98, 72, 35, 74, 101, 6]
C = 490"
1984,ilp_assign,32,126,187,0,208,0,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6573739051818848}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 1, 62, 66, 6, 20, 71], [52, 46, 91, 88, 6, 96, 25], [56, 39, 30, 70, 23, 89, 78], [1, 87, 74, 30, 66, 16, 3], [77, 72, 3, 25, 45, 37, 95], [37, 51, 77, 93, 25, 96, 74], [70, 5, 80, 93, 69, 72, 12]]"
1985,add,4,16402,16402,1,16402,1,"{'ok': True, 'value': 16402, 'stdout': '16402\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07745552062988281}",1,Compute: 7177 + 9225
1986,sub,32,9168415720842225428510674783886,112210819830618254305568756848027,0,91684377208222255485106731863886,0,"{'ok': True, 'value': 9168415720842225428510674783886, 'stdout': '9168415720842225428510674783886\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07480168342590332}",1,Compute: 41572919312930637421406446242403 - 32404503592088411992895771458517
1987,sub,16,227085627244771,2270856272547701,0,-1270856327244771,0,"{'ok': True, 'value': 227085627244771, 'stdout': '227085627244771\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08641910552978516}",1,Compute: 9066700863528426 - 8839615236283655
1988,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08568310737609863}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""ccd"""
1989,ilp_assign,4,16,2,0,30,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4154226779937744}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 12, 11, 2], [7, 7, 12, 2], [10, 1, 1, 9], [10, 7, 6, 3]]"
1990,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0986487865447998}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbabaaacbcddaca""
T = ""accabdbacdbabdd"""
1991,mul,16,13227731338138900785465594360812,1320042497699781464466663922,0,13169150548227121364330322,0,"{'ok': True, 'value': 13227731338138900785465594360812, 'stdout': '13227731338138900785465594360812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08452939987182617}",1,Compute: 5237658219090749 * 2525504869700188
1992,sub,32,29045612914873252041963382545151,4,0,29045612914873252041963782545151,0,"{'ok': True, 'value': 29045612914873252041963382545151, 'stdout': '29045612914873252041963382545151\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08552384376525879}",1,Compute: 96305109971564646748176308408703 - 67259497056691394706212925863552
1993,ilp_prod,8,53,105,0,2,0,"{'ok': True, 'value': 81, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/20be149a789a4d7b9ff968f1e43780d3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/20be149a789a4d7b9ff968f1e43780d3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 87.0909 - 0.00 seconds\nCgl0004I processed model has 3 rows, 4 columns (4 integer (0 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -68 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -81 found by DiveCoefficient after 7 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 4\nCbc0013I At root node, 2 cuts changed objective from -86.6 to -81 in 5 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 12 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 17 row cuts average 3.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -81, took 7 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -86.6 to -81\nProbing was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 5 times and created 12 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 5 times and created 17 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                81.00000000\nEnumerated nodes:               0\nTotal iterations:               7\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n81.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19290447235107422}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 9, 24, 9]
consumption (rows=resources) = [[7, 6, 8, 5], [5, 3, 5, 2], [2, 8, 4, 2], [8, 2, 8, 3]]
capacity = [19, 26, 32, 28]
upper_bounds = [3, 3, 3, 3]"
1994,ilp_assign,16,54,115,0,114,0,"{'ok': True, 'value': 54, 'stdout': '54\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3857910633087158}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 12, 43, 15, 13, 17, 1], [29, 33, 42, 34, 15, 22, 23], [31, 25, 4, 15, 12, 18, 6], [46, 46, 48, 19, 27, 36, 26], [15, 1, 41, 34, 13, 38, 11], [8, 2, 30, 47, 20, 36, 5], [19, 4, 15, 38, 1, 6, 8]]"
1995,knap,2,15,15,1,0,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07706856727600098}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 2, 3]
V = [5, 10, 5]
C = 5"
1996,add,8,98834852,98834852,1,98834852,1,"{'ok': True, 'value': 98834852, 'stdout': '98834852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09213662147521973}",1,Compute: 83016152 + 15818700
1997,sub,2,5,5,1,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08565449714660645}",1,Compute: 81 - 76
1998,rod,4,24,20,0,12,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09468674659729004}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 10, 12, 1]"
1999,rod,32,1392,1055,0,659,0,"{'ok': True, 'value': 1392, 'stdout': '1392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08492183685302734}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [18, 87, 71, 59, 85, 57, 15, 9, 55, 86, 23, 41, 48, 76, 69, 57, 15, 32, 20, 29, 25, 11, 12, 64, 41, 30, 50, 92, 50, 75, 95, 91]"
