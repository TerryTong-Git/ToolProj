idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,ilp_partition,2,1,0,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12557530403137207}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 2, 1, 3]"
1,mul{'ok': True, 'value': 4797790800184157623196310856216290261418177230470418291179979570, 'stdout': '4797790800184157623196310856216290261418177230470418291179979570\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07869887351989746}",1,Compute: 63227514061731025519725103275555 * 75881376508017102072177599540774
2,ilp_assign,4,13,8,0,24,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.6210780143737793}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5, 3, 6], [12, 1, 10, 12], [2, 3, 2, 12], [4, 10, 5, 10]]"
3,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06973433494567871}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcbddcdacccbdaccdbcbdaaaccbacac""
T = ""cddbacadaddbaaacbcdbcdcdcadcbcbd"""
4,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20155906677246094}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 74, 46, 39, 17, 63, 93, 90, 37, 83, 45, 3, 33, 84, 95, 25, 64, 13, 27, 45, 87, 55, 38, 59]"
5,ilp_assign,16,66,105,0,105,0,"{'ok': True, 'value': 66, 'stdout': '66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37255048751831055}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[33, 22, 44, 11, 30, 48, 40], [7, 9, 1, 12, 28, 37, 3], [7, 27, 7, 48, 27, 30, 34], [25, 17, 9, 37, 4, 7, 39], [46, 38, 28, 41, 35, 23, 44], [24, 6, 1, 16, 1, 20, 5], [47, 35, 12, 38, 33, 40, 24]]"
6,add,32,131687827245793195195610303022672,133767927245885195204608302992672,0,131686827245793195205610303022672,0,"{'ok': True, 'value': 131687827245793195195610303022672, 'stdout': '131687827245793195195610303022672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08160853385925293}",1,Compute: 44709789459440596614906017245262 + 86978037786352598580704285777410
7,ilp_prod,4,23,33,0,30,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3c5f5dba8a5548f59f6281f9d3501543-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3c5f5dba8a5548f59f6281f9d3501543-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -6 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n6.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20275092124938965}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3, 10]
consumption (rows=resources) = [[3, 1, 3], [1, 3, 4], [3, 2, 3]]
capacity = [10, 12, 8]
upper_bounds = [3, 4, 3]"
8,ilp_assign,2,7,8,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3993821144104004}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [6, 3]]"
9,ilp_partition,32,0,1,0,90,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20116686820983887}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 55, 91, 95, 94, 41, 11, 45, 91, 74, 74, 39, 23, 66, 25, 46, 78, 5, 90, 63, 30, 72, 71, 64]"
10,ilp_assign,8,24,38,0,36,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40399169921875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5, 12, 23, 13, 17, 5], [11, 22, 10, 22, 18, 14, 24], [5, 1, 18, 20, 20, 1, 4], [22, 5, 16, 3, 1, 14, 2], [11, 15, 8, 2, 18, 14, 15], [1, 14, 15, 5, 7, 24, 17], [10, 12, 8, 20, 3, 22, 7]]"
11,mul{'ok': True, 'value': 20181739976105652327364946661767, 'stdout': '20181739976105652327364946661767\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07999038696289062}",1,Compute: 3681296609229743 * 5482236863366569
12,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08514404296875}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 5, 3]"
13,add,2,124,124,1,124,1,"{'ok': True, 'value': 124, 'stdout': '124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07182502746582031}",1,Compute: 87 + 37
14,knap,2,6,9,0,0,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09676337242126465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 3]
V = [3, 6, 3]
C = 4"
15,mul,4,68483277,6861497,0,6854317,0,"{'ok': True, 'value': 68483277, 'stdout': '68483277\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07439661026000977}",1,Compute: 8037 * 8521
16,mul,32,3429025338171880895291320864667053354177223073540117445444413984,345678901234567890123456789012345678901234567890123456789012345678901234567890,0,341364674033284955863407634864540564686464,0,"{'ok': True, 'value': 3429025338171880895291320864667053354177223073540117445444413984, 'stdout': '3429025338171880895291320864667053354177223073540117445444413984\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07272744178771973}",1,Compute: 36021707086502837194931013501544 * 95193304690901793120653063703636
17,ilp_prod,8,70,100,0,4,0,"{'ok': True, 'value': 60, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e40eeb60a4a64c5c931353032bd375ae-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e40eeb60a4a64c5c931353032bd375ae-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 60 - 0.00 seconds\nCgl0004I processed model has 5 rows, 4 columns (4 integer (0 of which binary)) and 20 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -60 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -60, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -60 to -60\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                60.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n60.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15006232261657715}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 12, 4, 9]
consumption (rows=resources) = [[1, 4, 2, 1], [2, 1, 6, 4], [5, 7, 5, 2], [8, 4, 3, 2]]
capacity = [22, 19, 21, 24]
upper_bounds = [3, 3, 3, 4]"
18,add,2,125,125,1,125,1,"{'ok': True, 'value': 125, 'stdout': '125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07805752754211426}",1,Compute: 56 + 69
19,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0718233585357666}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
20,knap,4,22,24,0,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07139205932617188}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 8, 5, 5]
V = [7, 7, 10, 15]
C = 9"
21,knap,16,377,1024,0,-1,0,"{'ok': True, 'value': 377, 'stdout': '377\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09275603294372559}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 3, 6, 5, 23, 18, 23, 32, 27, 21, 32, 7, 32, 14, 32, 3]
V = [30, 64, 24, 11, 40, 43, 14, 10, 55, 6, 37, 14, 21, 18, 13, 59]
C = 151"
22,add,8,164915930,164915930,1,165115930,0,"{'ok': True, 'value': 164915930, 'stdout': '164915930\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07340335845947266}",1,Compute: 69230399 + 95685531
23,ilp_assign,4,10,1,0,11,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3802640438079834}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1, 11, 4], [2, 5, 7, 5], [2, 4, 2, 3], [3, 4, 4, 5]]"
24,knap,8,95,110,0,0,0,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08403849601745605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 2, 13, 7, 7, 16, 12, 2]
V = [5, 31, 4, 30, 13, 5, 13, 8]
C = 35"
25,add,8,128077382,128077382,1,128077372,0,"{'ok': True, 'value': 128077382, 'stdout': '128077382\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08066630363464355}",1,Compute: 30437479 + 97639903
26,knap,2,9,14,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07425260543823242}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 3]
V = [9, 8, 5]
C = 5"
27,ilp_assign,2,4,4,1,8,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37556910514831543}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 5], [6, 3]]"
28,ilp_partition,16,0,1,0,28,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2017204761505127}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 30, 29, 47, 2, 28, 16, 38, 39, 15, 17, 21, 22, 43, 21, 35]"
29,knap,16,365,102,0,0,0,"{'ok': True, 'value': 365, 'stdout': '365\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07467222213745117}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 2, 21, 12, 19, 11, 19, 4, 21, 19, 25, 4, 13, 14, 9, 1]
V = [16, 44, 11, 34, 56, 57, 32, 22, 5, 21, 31, 24, 35, 24, 41, 12]
C = 102"
30,ilp_assign,8,32,46,0,46,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38643598556518555}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 18, 2, 16, 14, 20, 8], [17, 11, 19, 18, 17, 4, 13], [21, 17, 9, 6, 8, 1, 6], [23, 20, 13, 16, 4, 3, 2], [8, 12, 4, 21, 4, 11, 14], [2, 22, 10, 13, 21, 15, 6], [17, 21, 13, 10, 18, 23, 7]]"
31,ilp_partition,4,3,1,0,2,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09446310997009277}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 11, 5, 4]"
32,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07443928718566895}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbddaadc""
T = ""dbbdcddcd"""
33,ilp_partition,4,4,The answer will be the minimum difference between the two groups.,0,3,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07407283782958984}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 8, 12]"
34,knap,32,1440,1047,0,2,0,"{'ok': True, 'value': 1440, 'stdout': '1440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08620738983154297}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [47, 62, 44, 57, 29, 11, 40, 44, 50, 35, 63, 47, 7, 2, 32, 25, 18, 24, 41, 62, 31, 49, 12, 33, 14, 25, 47, 39, 52, 21, 45, 50]
V = [43, 39, 36, 40, 10, 40, 118, 128, 72, 118, 7, 55, 101, 23, 33, 81, 12, 99, 20, 46, 39, 51, 97, 109, 43, 124, 30, 38, 12, 27, 19, 65]
C = 579"
35,ilp_assign,32,186,186,1,209,0,"{'ok': True, 'value': 186, 'stdout': '186\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3891146183013916}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[50, 52, 79, 61, 11, 24, 58], [64, 57, 55, 82, 94, 21, 44], [26, 75, 50, 3, 29, 93, 85], [47, 4, 93, 13, 54, 4, 48], [66, 28, 29, 81, 80, 29, 17], [87, 33, 95, 46, 52, 66, 45], [95, 63, 65, 51, 72, 80, 53]]"
36,rod,4,44,22,0,12,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07135701179504395}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 7, 12, 3]"
37,ilp_assign,32,173,168,0,209,0,"{'ok': True, 'value': 173, 'stdout': '173\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38405680656433105}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[63, 24, 50, 8, 92, 21, 73], [66, 75, 81, 24, 96, 74, 60], [64, 88, 68, 54, 87, 18, 9], [88, 69, 55, 72, 20, 22, 75], [34, 74, 81, 46, 45, 80, 90], [31, 33, 17, 25, 52, 48, 75], [88, 84, 76, 48, 59, 93, 36]]"
38,ilp_prod,4,36,65,0,36,1,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f6f097ab8dea4a288c79d6ddfb4d9eac-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f6f097ab8dea4a288c79d6ddfb4d9eac-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 36 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -36 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1750929355621338}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 10, 5]
consumption (rows=resources) = [[1, 2, 2], [4, 2, 2], [2, 3, 3]]
capacity = [13, 12, 9]
upper_bounds = [3, 3, 3]"
39,knap,8,112,110,0,0,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07999110221862793}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 5, 15, 7, 13, 4, 2, 9]
V = [23, 30, 2, 13, 14, 27, 8, 24]
C = 31"
40,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08554506301879883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baddcdabdcbcadcd""
T = ""bacddabdaabbdca"""
41,lcs,2,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08249950408935547}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""dba"""
42,sub,4,6231,6231,1,6231,1,"{'ok': True, 'value': 6231, 'stdout': '6231\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07278966903686523}",1,Compute: 8560 - 2329
43,lcs,16,9,7,0,16,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0759589672088623}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacddcbddadcdcac""
T = ""cdacdbdbccabddd"""
44,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08350729942321777}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daccbcca""
T = ""cbccbbd"""
45,ilp_partition,16,0,1,0,47,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19823670387268066}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [41, 46, 47, 31, 16, 25, 27, 46, 40, 12, 28, 19, 44, 3, 22, 13]"
46,add,4,13502,134102,0,13502,1,"{'ok': True, 'value': 13502, 'stdout': '13502\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07404589653015137}",1,Compute: 5221 + 8281
47,ilp_prod,8,105,105,1,6,0,"{'ok': True, 'value': 105, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/72d6b9e9a87348e9984effea7d7eda58-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/72d6b9e9a87348e9984effea7d7eda58-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 112 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -105 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -105, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -107.571 to -105\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                105.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n105.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15758347511291504}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 4, 9, 8]
consumption (rows=resources) = [[2, 4, 3, 8], [6, 8, 7, 7], [1, 1, 6, 1], [3, 6, 8, 6]]
capacity = [28, 32, 17, 31]
upper_bounds = [5, 4, 3, 3]"
48,ilp_prod,4,48,88,0,66,0,"{'ok': True, 'value': 33, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ee8e0e696f394459bb1fa838b1476429-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ee8e0e696f394459bb1fa838b1476429-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 38.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -33 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                33.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n33.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14915800094604492}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 12, 6]
consumption (rows=resources) = [[4, 3, 3], [2, 1, 2], [3, 3, 3]]
capacity = [14, 13, 15]
upper_bounds = [3, 4, 4]"
49,mul,8,1659681986084360,10099663660,0,16884855345406,0,"{'ok': True, 'value': 1659681986084360, 'stdout': '1659681986084360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07498693466186523}",1,Compute: 59938778 * 27689620
50,sub,32,11132674449208971814701960756700,10,0,101327744492094718147019608566300,0,"{'ok': True, 'value': 11132674449208971814701960756700, 'stdout': '11132674449208971814701960756700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07678008079528809}",1,Compute: 56213600683259562676451341807626 - 45080926234050590861749381050926
51,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08591794967651367}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdb""
T = ""aabca"""
52,knap,2,10,16,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08165812492370605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 5]
V = [9, 10, 6]
C = 5"
53,sub,4,2252,2252,1,2252,1,"{'ok': True, 'value': 2252, 'stdout': '2252\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08990049362182617}",1,Compute: 4925 - 2673
54,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08110690116882324}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 4, 1, 5]"
55,ilp_partition,16,0,1,0,48,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21808385848999023}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [31, 12, 14, 14, 13, 8, 48, 32, 43, 25, 20, 23, 32, 38, 1, 6]"
56,knap,2,16,16,1,3,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0886991024017334}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 2]
V = [3, 10, 6]
C = 4"
57,rod,4,28,16,0,5,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08472347259521484}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 5, 5, 5]"
58,sub,16,5305256237025326,-2072734517635251,0,5305256237025326,1,"{'ok': True, 'value': 5305256237025326, 'stdout': '5305256237025326\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08160901069641113}",1,Compute: 7377990754661124 - 2072734517635798
59,ilp_partition,4,7,0,0,999,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0850980281829834}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 12, 2, 12]"
60,lcs,8,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09044408798217773}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabdcada""
T = ""dddadcdb"""
61,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08350777626037598}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabc""
T = ""bdcbc"""
62,knap,16,331,1047,0,1,0,"{'ok': True, 'value': 331, 'stdout': '331\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07631731033325195}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 23, 4, 18, 3, 4, 3, 1, 28, 25, 20, 14, 28, 13, 24, 31]
V = [5, 25, 26, 44, 3, 30, 27, 24, 1, 57, 43, 21, 34, 34, 22, 37]
C = 127"
63,ilp_assign,8,32,105,0,91,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38927340507507324}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 2, 1, 3, 20, 15, 17], [17, 5, 16, 18, 18, 2, 20], [4, 23, 5, 4, 24, 18, 10], [11, 8, 23, 22, 10, 20, 20], [13, 6, 20, 12, 3, 10, 14], [17, 9, 4, 4, 5, 7, 14], [20, 1, 1, 20, 14, 3, 21]]"
64,ilp_partition,2,2,The answer will be the minimum difference between the two groups.,0,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ooihp6wu/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_ooihp6wu/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0698707103729248}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 1, 2]"
65,ilp_partition,8,0,1,0,18,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07399463653564453}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 1, 5, 11, 5, 18, 9, 7]"
66,sub,4,1110,1110,1,-1110,0,"{'ok': True, 'value': 1110, 'stdout': '1110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07083487510681152}",1,Compute: 3166 - 2056
67,knap,8,88,110,0,0,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0851445198059082}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 15, 12, 2, 5, 3, 4, 13]
V = [14, 26, 3, 2, 27, 25, 8, 14]
C = 33"
68,rod,4,15,15,1,5,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08427262306213379}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 2, 12, 5]"
69,rod,8,152,22,0,1,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0906984806060791}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 18, 23, 16, 17, 21, 12, 1]"
70,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08139204978942871}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""acd"""
71,rod,8,96,22,0,1,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08992838859558105}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 1, 22, 5, 16, 21, 17, 18]"
72,knap,32,1629,1045,0,2,0,"{'ok': True, 'value': 1629, 'stdout': '1629\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07832121849060059}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [63, 62, 52, 62, 40, 47, 62, 23, 20, 2, 24, 28, 12, 25, 46, 17, 17, 4, 2, 27, 50, 35, 63, 51, 10, 57, 35, 14, 33, 13, 55, 17]
V = [109, 89, 72, 27, 51, 87, 67, 113, 62, 94, 88, 44, 19, 115, 114, 14, 126, 103, 86, 61, 36, 39, 104, 81, 58, 16, 12, 14, 91, 46, 80, 10]
C = 534"
73,mul,2,5400,5400,1,5400,1,"{'ok': True, 'value': 5400, 'stdout': '5400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08524823188781738}",1,Compute: 72 * 75
74,add,4,13232,13232,1,13232,1,"{'ok': True, 'value': 13232, 'stdout': '13232\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07710909843444824}",1,Compute: 9038 + 4194
75,sub,32,26916964804093271947031802013322,26916964804093271946931802013322,0,26916964804103271946931802013322,0,"{'ok': True, 'value': 26916964804093271947031802013322, 'stdout': '26916964804093271947031802013322\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09358358383178711}",1,Compute: 41177701750980128687487044587016 - 14260736946886856740455242573694
76,add,32,123601080478136978702074647833946,1212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212,0,123601070478137978602074647833946,0,"{'ok': True, 'value': 123601080478136978702074647833946, 'stdout': '123601080478136978702074647833946\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07560968399047852}",1,Compute: 58316265108713032785912847033956 + 65284815369423945916161800799990
77,mul,4,21467252,203500,0,21144912,0,"{'ok': True, 'value': 21467252, 'stdout': '21467252\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08505654335021973}",1,Compute: 4588 * 4679
78,add,16,9008575951086908,11111111111111110,0,8908585951086908,0,"{'ok': True, 'value': 9008575951086908, 'stdout': '9008575951086908\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07228779792785645}",1,Compute: 6692994985167727 + 2315580965919181
79,ilp_assign,4,13,10,0,24,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3624289035797119}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 11, 8, 11], [7, 3, 5, 1], [1, 3, 9, 10], [1, 4, 7, 8]]"
80,ilp_partition,8,1,1,1,90,0,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09722447395324707}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 19, 19, 22, 3, 10, 18, 1]"
81,rod,4,12,12,1,4,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08575177192687988}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 6, 3, 9]"
82,ilp_assign,4,16,15,0,15,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3788607120513916}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 12, 11, 6], [3, 2, 12, 1], [3, 8, 6, 5], [12, 2, 5, 2]]"
83,add,16,7951662007940649,21033110338,0,2971093007650722,0,"{'ok': True, 'value': 7951662007940649, 'stdout': '7951662007940649\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08159804344177246}",1,Compute: 6645076313655474 + 1306585694285175
84,knap,32,1793,1043,0,32,0,"{'ok': True, 'value': 1793, 'stdout': '1793\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07657122611999512}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [56, 37, 14, 35, 58, 35, 25, 42, 27, 47, 43, 4, 32, 58, 44, 19, 47, 47, 59, 33, 3, 11, 48, 4, 9, 32, 63, 11, 47, 62, 8, 17]
V = [30, 58, 5, 88, 108, 128, 19, 71, 126, 53, 119, 37, 128, 58, 122, 27, 60, 122, 83, 115, 37, 125, 43, 33, 53, 117, 122, 24, 67, 71, 74, 88]
C = 538"
85,lcs,32,18,10,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07954573631286621}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdabaaaaadcdaddbddbbcabcbaacdaa""
T = ""daababcbdbcddddccbabcccdddacadacc"""
86,ilp_partition,8,1,1,1,12,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09579038619995117}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 13, 24, 19, 18, 16, 11, 12]"
87,ilp_assign,4,13,0,0,24,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37055110931396484}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 8, 3, 12], [5, 8, 7, 7], [1, 8, 12, 9], [3, 2, 7, 6]]"
88,rod,8,88,18,0,1,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0735621452331543}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 1, 8, 1, 14, 9, 7, 17]"
89,knap,2,4,6,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08347725868225098}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 3]
V = [3, 2, 4]
C = 4"
90,rod,8,80,22,0,1,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08242964744567871}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 20, 6, 21, 7, 8, 6, 17]"
91,sub,2,24,24,1,24,1,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0747981071472168}",1,Compute: 56 - 32
92,lcs,16,9,7,0,14,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08235931396484375}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcacddcdcbcbdaad""
T = ""dcbcdbccacbcacdd"""
93,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38606762886047363}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [6, 2]]"
94,rod,32,1536,84,0,35,0,"{'ok': True, 'value': 1536, 'stdout': '1536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08139729499816895}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [48, 8, 3, 51, 55, 32, 59, 86, 8, 23, 7, 57, 84, 18, 36, 20, 12, 58, 21, 43, 7, 96, 23, 16, 12, 84, 11, 35, 41, 95, 13, 34]"
95,ilp_prod,2,12,36,0,24,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/326d99adb3ff4cc4a5700a282d659338-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/326d99adb3ff4cc4a5700a282d659338-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1696305274963379}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[3, 3], [1, 2]]
capacity = [8, 8]
upper_bounds = [3, 3]"
96,ilp_assign,16,64,105,0,47,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3761179447174072}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 38, 36, 7, 24, 12, 47], [37, 31, 4, 34, 24, 34, 18], [44, 7, 22, 43, 46, 21, 30], [17, 23, 13, 17, 48, 30, 36], [15, 35, 33, 6, 35, 4, 45], [20, 4, 26, 33, 12, 35, 43], [23, 36, 28, 35, 37, 35, 13]]"
97,ilp_prod,32,249,The problem is a linear programming problem that can be solved using integer programming techniques.,0,3,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7cf7bfd14f7245b0bae48f4060480a89-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7cf7bfd14f7245b0bae48f4060480a89-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 94 RHS\nAt line 105 BOUNDS\nAt line 112 ENDATA\nProblem MODEL has 10 rows, 6 columns and 60 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3.40909 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14539480209350586}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 3, 12, 5, 55, 83]
consumption (rows=resources) = [[4, 3, 4, 24, 6, 22], [23, 13, 29, 27, 15, 20], [11, 16, 19, 15, 31, 7], [7, 11, 13, 6, 32, 21]]
capacity = [122, 122, 116, 68]
upper_bounds = [5, 6, 4, 4, 3, 3]"
98,sub,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07327079772949219}",1,Compute: 88 - 85
99,add,4,14330,14330,1,14330,1,"{'ok': True, 'value': 14330, 'stdout': '14330\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0733492374420166}",1,Compute: 4505 + 9825
100,ilp_assign,4,16,0,0,28,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3734288215637207}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 4, 7, 1], [5, 7, 12, 2], [3, 4, 5, 12], [5, 7, 12, 3]]"
101,add,16,11778294312439022,7221221211,0,11778294312439022,1,"{'ok': True, 'value': 11778294312439022, 'stdout': '11778294312439022\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07481956481933594}",1,Compute: 7773308309873126 + 4004986002565896
102,add,4,7306,7306,1,7306,1,"{'ok': True, 'value': 7306, 'stdout': '7306\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08900117874145508}",1,Compute: 1468 + 5838
103,ilp_prod,2,32,16,0,9,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/926e4caeadb84382a4ae44067a60b125-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/926e4caeadb84382a4ae44067a60b125-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 31.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -28 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                28.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 28.0\nProduct_0: 4.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15059518814086914}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[2, 2], [1, 2]]
capacity = [9, 9]
upper_bounds = [4, 4]"
104,mul,8,3477517981464635,331494515295115,0,34149393559371515,0,"{'ok': True, 'value': 3477517981464635, 'stdout': '3477517981464635\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08241510391235352}",1,Compute: 63298903 * 54938045
105,ilp_assign,4,10,0,0,23,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39384913444519043}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 3, 6, 2], [3, 2, 6, 9], [6, 2, 7, 11], [3, 5, 3, 6]]"
106,mul,16,18865204879425901613512872196700,3,0,18836493354394635343444535510,0,"{'ok': True, 'value': 18865204879425901613512872196700, 'stdout': '18865204879425901613512872196700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09278631210327148}",1,Compute: 4858367950598935 * 3883033370722820
107,rod,4,24,12,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08453774452209473}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 12, 6, 12]"
108,rod,4,32,18,0,1,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08370184898376465}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 10, 4, 4]"
109,add,4,16857,16857,1,16857,1,"{'ok': True, 'value': 16857, 'stdout': '16857\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07562470436096191}",1,Compute: 8801 + 8056
110,ilp_partition,2,1,The answer will be the minimum difference between the two groups.,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07133817672729492}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 3, 3]"
111,sub,32,68336255367270778280703252901732,68336255367270778289203224901732,0,68336255367270778280693252901732,0,"{'ok': True, 'value': 68336255367270778280703252901732, 'stdout': '68336255367270778280703252901732\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07193136215209961}",1,Compute: 78804349892329597546417473761612 - 10468094525058819265714220859880
112,ilp_assign,8,34,56,0,46,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40195703506469727}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 5, 16, 22, 8, 2, 16], [5, 8, 6, 7, 20, 16, 19], [16, 16, 5, 3, 3, 13, 9], [13, 8, 18, 1, 14, 20, 21], [7, 14, 15, 10, 6, 10, 13], [3, 22, 23, 14, 21, 3, 13], [21, 22, 6, 12, 12, 13, 9]]"
113,mul,8,4901956600348840,4957262446203880,0,48764443535524,0,"{'ok': True, 'value': 4901956600348840, 'stdout': '4901956600348840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08221244812011719}",1,Compute: 98972602 * 49528420
114,add,8,87815882,42,0,87815882,1,"{'ok': True, 'value': 87815882, 'stdout': '87815882\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07139801979064941}",1,Compute: 65190763 + 22625119
115,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0667874813079834}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 3, 1, 6]"
116,knap,32,1648,1645,0,2,0,"{'ok': True, 'value': 1648, 'stdout': '1648\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09328508377075195}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [47, 51, 29, 32, 60, 28, 11, 62, 39, 48, 58, 64, 26, 2, 54, 56, 18, 13, 51, 10, 50, 1, 47, 57, 35, 23, 49, 44, 13, 15, 40, 25]
V = [20, 32, 39, 121, 37, 102, 62, 67, 82, 21, 112, 9, 14, 121, 124, 72, 10, 77, 83, 3, 64, 54, 45, 56, 91, 110, 112, 41, 11, 128, 22, 94]
C = 579"
117,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dffp8r99/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_dffp8r99/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07039308547973633}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 2]"
118,sub,8,26713513,26713513,1,26713513,1,"{'ok': True, 'value': 26713513, 'stdout': '26713513\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0715475082397461}",1,Compute: 44611666 - 17898153
119,ilp_assign,32,102,119,0,28,0,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37270689010620117}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 77, 60, 75, 41, 33, 77], [29, 18, 79, 20, 30, 1, 7], [24, 6, 75, 54, 88, 41, 7], [14, 50, 3, 58, 57, 29, 23], [81, 57, 65, 31, 59, 76, 55], [90, 61, 34, 19, 40, 50, 32], [24, 6, 10, 68, 34, 63, 28]]"
120,knap,16,529,157,0,0,0,"{'ok': True, 'value': 529, 'stdout': '529\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07204484939575195}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 7, 31, 13, 23, 31, 16, 21, 31, 32, 17, 22, 8, 5, 11, 14]
V = [27, 60, 35, 27, 62, 26, 64, 27, 56, 19, 7, 61, 59, 62, 44, 34]
C = 157"
121,add,32,133395955234622393126666288222953,133395955234622356126666288122953,0,133396955234622393126666288222953,0,"{'ok': True, 'value': 133395955234622393126666288222953, 'stdout': '133395955234622393126666288222953\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08434772491455078}",1,Compute: 86500025535579596089368507383582 + 46895929699042797037297780839371
122,mul,32,2230412825913640368811340023800871741991392216412822785863144000,408,0,220004045468232647767564444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 2230412825913640368811340023800871741991392216412822785863144000, 'stdout': '2230412825913640368811340023800871741991392216412822785863144000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08079099655151367}",1,Compute: 24676274916476896461206732629821 * 90386933743566952241751622664000
123,sub,8,10737751,10737751,1,10737751,1,"{'ok': True, 'value': 10737751, 'stdout': '10737751\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07477831840515137}",1,Compute: 49190353 - 38452602
124,mul,8,555450078861360,554883359178240,0,558833433680,0,"{'ok': True, 'value': 555450078861360, 'stdout': '555450078861360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07966327667236328}",1,Compute: 29296720 * 18959463
125,ilp_assign,2,3,2,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40076398849487305}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 4], [6, 1]]"
126,ilp_partition,4,1,0,0,16,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07863163948059082}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 8, 4]"
127,ilp_partition,32,1,10,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.038952112197876}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 10, 12, 1, 59, 96, 86, 2, 94, 84, 56, 45, 81, 65, 60, 84, 57, 87, 47, 29, 96, 92, 1, 13]"
128,ilp_prod,8,64,58,0,60,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_usp3jvzg/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_usp3jvzg/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15961933135986328}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 15, 17, 13]
consumption (rows=resources) = [[7, 6, 8, 3], [1, 6, 4, 1], [3, 6, 1, 1], [5, 1, 1, 8]]
capacity = [29, 21, 19, 17]
upper_bounds = [3, 3, 3, 3]"
129,add,4,11422,11422,1,11422,1,"{'ok': True, 'value': 11422, 'stdout': '11422\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07338142395019531}",1,Compute: 4403 + 7019
130,sub,4,3038,3038,1,3038,1,"{'ok': True, 'value': 3038, 'stdout': '3038\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08839035034179688}",1,Compute: 7154 - 4116
131,mul,8,4462786590374603,,0,445518078,0,"{'ok': True, 'value': 4462786590374603, 'stdout': '4462786590374603\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08222103118896484}",1,Compute: 74253013 * 60102431
132,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ay5e86b7/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_ay5e86b7/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0760354995727539}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 6]"
133,sub,32,10244795868861312041761052443878,13803203301365830330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330330,0,105445788763261310167311024433878,0,"{'ok': True, 'value': 10244795868861312041761052443878, 'stdout': '10244795868861312041761052443878\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07631754875183105}",1,Compute: 62359837098265304472257588029485 - 52115041229403992430496535585607
134,rod,32,2336,1053,0,24,0,"{'ok': True, 'value': 2336, 'stdout': '2336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0774991512298584}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [73, 92, 90, 6, 58, 18, 81, 93, 54, 5, 79, 33, 25, 16, 3, 52, 4, 32, 92, 54, 8, 32, 20, 8, 30, 4, 7, 63, 81, 4, 21, 62]"
135,sub,16,7156644749928466,7156644750928466,0,7156644749928466,1,"{'ok': True, 'value': 7156644749928466, 'stdout': '7156644749928466\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09294676780700684}",1,Compute: 9683309330177936 - 2526664580249470
136,ilp_assign,32,201,185,0,140,0,"{'ok': True, 'value': 201, 'stdout': '201\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3800342082977295}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[69, 96, 87, 82, 93, 79, 56], [13, 36, 61, 21, 51, 56, 88], [72, 64, 57, 74, 44, 88, 38], [75, 9, 42, 44, 16, 64, 57], [71, 11, 87, 60, 68, 71, 37], [13, 64, 31, 86, 38, 88, 13], [37, 33, 81, 41, 53, 35, 4]]"
137,sub,4,6349,6349,1,6349,1,"{'ok': True, 'value': 6349, 'stdout': '6349\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08503150939941406}",1,Compute: 9564 - 3215
138,ilp_prod,16,129,165,0,204,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_m2hgad7x/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_m2hgad7x/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15224194526672363}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 14, 6, 40, 9, 15]
consumption (rows=resources) = [[6, 13, 13, 5, 14, 13], [13, 1, 8, 8, 10, 7], [7, 10, 5, 8, 8, 3], [11, 13, 10, 13, 2, 13]]
capacity = [63, 36, 60, 47]
upper_bounds = [3, 3, 4, 3, 3, 3]"
139,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07658863067626953}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""cdb"""
140,knap,4,23,24,0,-1,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08176612854003906}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 1, 8, 4]
V = [16, 7, 15, 7]
C = 9"
141,mul,32,1515811527059855131621468874912009325363168885724754461179718710,151112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,1521463655062900032758466555331643586519,0,"{'ok': True, 'value': 1515811527059855131621468874912009325363168885724754461179718710, 'stdout': '1515811527059855131621468874912009325363168885724754461179718710\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07630562782287598}",1,Compute: 61123656189537872565776066676239 * 24799097788906587903731952694890
142,lcs,16,10,8,0,15,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07267141342163086}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbbdbbcdaddbcac""
T = ""dbdddbcdcacadcaa"""
143,ilp_assign,8,30,110,0,155,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3740255832672119}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 1, 14, 4, 15, 20, 15], [12, 22, 23, 10, 5, 16, 15], [22, 19, 8, 14, 24, 17, 6], [8, 16, 11, 3, 18, 11, 21], [5, 20, 15, 13, 12, 15, 24], [2, 1, 21, 8, 12, 3, 16], [24, 16, 8, 3, 17, 5, 5]]"
144,ilp_assign,4,21,28,0,40,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40197300910949707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 12, 12, 12], [9, 1, 2, 11], [11, 12, 1, 3], [12, 11, 6, 7]]"
145,add,32,107252922430427255702949674762725,107253022430426255717850284762728,0,107252922430427255702950074762725,0,"{'ok': True, 'value': 107252922430427255702949674762725, 'stdout': '107252922430427255702949674762725\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0783379077911377}",1,Compute: 49938827139854048037942572981966 + 57314095290573207665007101780759
146,knap,16,392,145,0,1,0,"{'ok': True, 'value': 392, 'stdout': '392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07672953605651855}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 27, 17, 19, 3, 13, 28, 3, 29, 17, 27, 29, 26, 24, 24, 4]
V = [15, 54, 41, 53, 42, 15, 39, 27, 50, 7, 19, 38, 53, 21, 31, 42]
C = 146"
147,knap,16,490,1047,0,1,0,"{'ok': True, 'value': 490, 'stdout': '490\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09544944763183594}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 11, 4, 14, 11, 26, 12, 5, 19, 21, 4, 28, 11, 3, 14, 15]
V = [1, 15, 61, 32, 47, 10, 50, 61, 21, 2, 62, 26, 12, 53, 59, 29]
C = 112"
148,sub,32,31357248652124046144474624561475,31357248652123946144474626561475,0,31357248652124046144474624561475,1,"{'ok': True, 'value': 31357248652124046144474624561475, 'stdout': '31357248652124046144474624561475\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0735025405883789}",1,Compute: 75015921894017977541616517912252 - 43658673241893931397141893350777
149,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06983137130737305}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbcdadadbdccddbbadcccbcddbccccc""
T = ""ddbbaaabdcddcdcadaccdbdabcdbdbcad"""
150,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07642531394958496}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbbddcc""
T = ""bcacddb"""
151,sub,32,8103744967077618223301428835760,71053746967077618223301428835760,0,81037449670778218243016438835760,0,"{'ok': True, 'value': 8103744967077618223301428835760, 'stdout': '8103744967077618223301428835760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07311487197875977}",1,Compute: 52672855785653155309564393942060 - 44569110818575537086262965106300
152,rod,8,88,24,0,1,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0740506649017334}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 22, 18, 11, 21, 21, 10, 12]"
153,ilp_assign,8,25,36,0,46,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37922143936157227}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 7, 19, 21, 6, 5, 4], [20, 23, 6, 23, 8, 19, 10], [18, 5, 11, 10, 6, 6, 12], [22, 12, 20, 1, 11, 12, 9], [24, 9, 8, 12, 6, 5, 3], [10, 14, 22, 1, 13, 1, 20], [12, 3, 2, 17, 18, 14, 16]]"
154,ilp_prod,2,15,22,0,25,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cb6bbf50f51245519f82c19b130deb00-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cb6bbf50f51245519f82c19b130deb00-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14436674118041992}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4]
consumption (rows=resources) = [[1, 1], [3, 3]]
capacity = [7, 9]
upper_bounds = [3, 3]"
155,knap,32,1688,102,0,48,0,"{'ok': True, 'value': 1688, 'stdout': '1688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08202242851257324}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 9, 33, 47, 36, 28, 41, 6, 36, 38, 5, 63, 35, 59, 25, 29, 52, 5, 48, 39, 16, 53, 2, 31, 8, 42, 53, 28, 46, 38, 13, 50]
V = [6, 48, 109, 99, 8, 99, 1, 102, 6, 93, 17, 69, 112, 95, 86, 16, 93, 15, 85, 84, 103, 116, 8, 97, 127, 11, 108, 107, 87, 55, 111, 48]
C = 509"
156,sub,16,4283657963107572,4283657963107572,1,4283657963107572,1,"{'ok': True, 'value': 4283657963107572, 'stdout': '4283657963107572\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0736386775970459}",1,Compute: 6208088648813428 - 1924430685705856
157,ilp_prod,4,40,33,0,33,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8f512854899a497cb60ad5adbc521998-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8f512854899a497cb60ad5adbc521998-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15681123733520508}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 11, 9]
consumption (rows=resources) = [[4, 4, 1], [2, 1, 2], [3, 3, 4]]
capacity = [10, 14, 15]
upper_bounds = [3, 3, 3]"
158,ilp_prod,32,528,"The solution to the problem is to maximize the total profit while ensuring that the consumption of each resource does not exceed its capacity. The exact solution would require solving the linear programming problem, which is beyond the scope of this response.",0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_r8bqv3mv/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_r8bqv3mv/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15257525444030762}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [29, 90, 75, 54, 41, 49]
consumption (rows=resources) = [[30, 1, 28, 5, 30, 5], [16, 31, 4, 8, 19, 31], [26, 20, 16, 10, 1, 5], [28, 21, 5, 4, 13, 12]]
capacity = [96, 66, 120, 121]
upper_bounds = [3, 3, 3, 8, 3, 3]"
159,sub,4,5516,5516,1,5516,1,"{'ok': True, 'value': 5516, 'stdout': '5516\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07250142097473145}",1,Compute: 8861 - 3345
160,ilp_prod,4,20,45,0,45,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d5958a6f587041a0b10c0ce222a77595-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d5958a6f587041a0b10c0ce222a77595-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15538358688354492}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 10, 3]
consumption (rows=resources) = [[2, 4, 4], [1, 4, 2], [4, 4, 1]]
capacity = [13, 16, 8]
upper_bounds = [3, 3, 3]"
161,ilp_partition,2,3,0,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08211970329284668}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 4, 5]"
162,ilp_prod,16,209,159,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_9wxjv7kg/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_9wxjv7kg/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14266538619995117}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [34, 47, 13, 36, 3, 47]
consumption (rows=resources) = [[10, 1, 6, 15, 9, 12], [6, 1, 7, 8, 4, 7], [14, 13, 16, 12, 8, 7], [3, 16, 5, 12, 6, 5]]
capacity = [54, 44, 56, 33]
upper_bounds = [4, 3, 3, 3, 5, 4]"
163,sub,32,13501136754882124784744972298356,,0,135011367548821218748450822998456,0,"{'ok': True, 'value': 13501136754882124784744972298356, 'stdout': '13501136754882124784744972298356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0882883071899414}",1,Compute: 85989450129191706054721167681171 - 72488313374309581269976195382815
164,sub,2,23,23,1,23,1,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07198190689086914}",1,Compute: 34 - 11
165,lcs,32,19,15,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0858006477355957}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabccdacaccbdcdadabcbadbdadcaabc""
T = ""dbccdcdbccccbbcadddbcdccddcccbcab"""
166,add,2,137,137,1,137,1,"{'ok': True, 'value': 137, 'stdout': '137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0832667350769043}",1,Compute: 68 + 69
167,ilp_partition,4,3,0,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0867471694946289}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 9, 5, 5]"
168,add,16,14227759493303376,12685537444,0,14227759493303376,1,"{'ok': True, 'value': 14227759493303376, 'stdout': '14227759493303376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07200860977172852}",1,Compute: 9772011000647544 + 4455748492655832
169,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3996748924255371}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5], [4, 2]]"
170,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08957672119140625}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbacbbad""
T = ""dddbaaca"""
171,ilp_prod,32,350,0,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__j734otq/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec__j734otq/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14762139320373535}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [74, 6, 48, 64, 4, 22]
consumption (rows=resources) = [[3, 23, 31, 4, 28, 5], [28, 19, 5, 11, 17, 19], [8, 10, 19, 26, 20, 6], [30, 31, 1, 4, 12, 17]]
capacity = [80, 113, 87, 121]
upper_bounds = [4, 3, 3, 3, 3, 5]"
172,add,16,9843705042911548,1134473,0,9843705042911548,1,"{'ok': True, 'value': 9843705042911548, 'stdout': '9843705042911548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07177042961120605}",1,Compute: 2696115107404228 + 7147589935507320
173,knap,8,104,100,0,8,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0739755630493164}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 13, 2, 8, 9, 16, 12, 2]
V = [16, 15, 29, 11, 29, 24, 2, 6]
C = 33"
174,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0816812515258789}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 46, 32, 14, 45, 36, 16, 30, 24, 25, 15, 12, 2, 19, 25, 2]"
175,ilp_prod,16,237,1008,0,207,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_cljlafr3/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_cljlafr3/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15587878227233887}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 34, 13, 14, 45, 11]
consumption (rows=resources) = [[15, 6, 16, 16, 1, 14], [16, 8, 2, 4, 9, 15], [6, 4, 9, 7, 10, 5], [9, 2, 9, 9, 9, 1]]
capacity = [62, 51, 55, 53]
upper_bounds = [3, 6, 3, 3, 5, 3]"
176,knap,8,93,67,0,12,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08133101463317871}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 7, 13, 4, 1, 2, 15, 12]
V = [10, 20, 22, 19, 13, 19, 11, 20]
C = 33"
177,mul,16,21430316562092953740201629961672,0,0,208236484345934444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 21430316562092953740201629961672, 'stdout': '21430316562092953740201629961672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07191252708435059}",1,Compute: 5383154532564536 * 3980995981529727
178,rod,32,1040,1055,0,1,0,"{'ok': True, 'value': 1040, 'stdout': '1040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07130265235900879}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [20, 65, 11, 62, 61, 23, 31, 72, 95, 6, 70, 36, 31, 64, 47, 25, 19, 8, 27, 96, 44, 25, 52, 18, 26, 96, 55, 25, 8, 46, 27, 50]"
179,rod,32,2752,1053,0,1,0,"{'ok': True, 'value': 2752, 'stdout': '2752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0767052173614502}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [86, 66, 59, 69, 4, 19, 67, 63, 20, 8, 71, 35, 68, 3, 66, 51, 96, 39, 27, 82, 63, 90, 54, 91, 57, 2, 13, 51, 31, 94, 44, 47]"
180,ilp_prod,8,64,66,0,2,0,"{'ok': True, 'value': 63, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f175f17b23c244af80183788f69135fd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f175f17b23c244af80183788f69135fd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 66.1154 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -45 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -63 found by DiveCoefficient after 33 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 4\nCbc0013I At root node, 3 cuts changed objective from -66.115385 to -63.000002 in 15 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 41 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 32 row cuts average 3.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -63, took 33 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -66.1154 to -63\nProbing was tried 15 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 15 times and created 41 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 15 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 15 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 15 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 15 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 15 times and created 32 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                63.00000000\nEnumerated nodes:               0\nTotal iterations:               33\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n63.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18173718452453613}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 6, 20, 9]
consumption (rows=resources) = [[6, 7, 2, 2], [2, 1, 8, 2], [2, 6, 3, 4], [8, 2, 6, 8]]
capacity = [28, 23, 17, 23]
upper_bounds = [3, 3, 3, 3]"
181,add,32,54771985421511896006687705134996,290785034310520070633333333333333,0,54772985421511896006687705135006,0,"{'ok': True, 'value': 54771985421511896006687705134996, 'stdout': '54771985421511896006687705134996\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07236385345458984}",1,Compute: 26362045198080070672822317947213 + 28409940223431825333865387187783
182,add,16,8576886414990081,8576886414990181,0,8576886414990081,1,"{'ok': True, 'value': 8576886414990081, 'stdout': '8576886414990081\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0731048583984375}",1,Compute: 1272210182707375 + 7304676232282706
183,ilp_prod,2,42,21,0,28,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fa3b6cc0dc15499982d35de67c59a3eb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fa3b6cc0dc15499982d35de67c59a3eb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15508699417114258}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7]
consumption (rows=resources) = [[1, 1], [2, 1]]
capacity = [6, 6]
upper_bounds = [3, 6]"
184,rod,8,72,55,0,1,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07321548461914062}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 15, 20, 22, 15, 14, 14, 6]"
185,ilp_assign,4,9,22,0,18,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36630797386169434}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 8, 6, 7], [10, 5, 8, 2], [2, 10, 3, 4], [11, 2, 8, 3]]"
186,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20903778076171875}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [64, 30, 74, 34, 38, 63, 8, 26, 14, 85, 65, 59, 29, 2, 85, 54, 53, 79, 72, 46, 7, 86, 47, 32]"
187,ilp_assign,4,15,18,0,23,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39623522758483887}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 8, 3, 7], [12, 2, 5, 10], [5, 9, 12, 4], [8, 5, 10, 6]]"
188,ilp_prod,32,784,1000,0,240,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_lu5klmjf/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_lu5klmjf/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.148270845413208}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 21, 46, 92, 96, 86]
consumption (rows=resources) = [[6, 17, 13, 30, 10, 9], [9, 18, 24, 32, 23, 3], [18, 16, 6, 2, 23, 2], [8, 32, 4, 18, 19, 4]]
capacity = [86, 65, 88, 106]
upper_bounds = [4, 3, 3, 3, 3, 9]"
189,ilp_prod,2,17,23,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/45108645446542079cf6d613f683ea30-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/45108645446542079cf6d613f683ea30-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14887094497680664}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[1, 3], [3, 2]]
capacity = [7, 8]
upper_bounds = [3, 3]"
190,knap,8,79,110,0,0,0,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08277654647827148}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 10, 5, 1, 11, 7, 5, 13]
V = [8, 12, 27, 1, 20, 21, 11, 23]
C = 28"
191,ilp_prod,2,24,0,0,24,1,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/354d9100247a46b4b5df1b891f60fc3b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/354d9100247a46b4b5df1b891f60fc3b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1560046672821045}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4]
consumption (rows=resources) = [[1, 2], [3, 3]]
capacity = [8, 9]
upper_bounds = [3, 3]"
192,lcs,8,5,5,1,6,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08004522323608398}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbacaacd""
T = ""cbcdcaacc"""
193,ilp_assign,16,110,105,0,115,0,"{'ok': True, 'value': 110, 'stdout': '110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37099623680114746}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 41, 26, 22, 43, 41, 46], [38, 30, 33, 19, 17, 3, 23], [19, 44, 40, 37, 33, 38, 28], [25, 23, 46, 1, 28, 40, 22], [25, 33, 21, 27, 26, 9, 15], [22, 40, 19, 17, 35, 22, 30], [42, 31, 1, 15, 21, 2, 4]]"
194,mul,8,6521226288714186,45001080,0,65743355388866,0,"{'ok': True, 'value': 6521226288714186, 'stdout': '6521226288714186\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08607745170593262}",1,Compute: 70096534 * 93032079
195,ilp_partition,4,1,1,1,2,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08883500099182129}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 10, 7]"
196,rod,32,1488,1050,0,37,0,"{'ok': True, 'value': 1488, 'stdout': '1488\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08260917663574219}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [10, 93, 44, 41, 81, 64, 16, 46, 19, 83, 84, 53, 60, 83, 2, 53, 89, 81, 87, 67, 27, 46, 40, 66, 52, 94, 9, 76, 24, 25, 58, 37]"
197,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07536077499389648}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 9, 22, 12, 11, 11, 1, 10]"
198,ilp_prod,16,142,180,0,158,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_t5wwgqos/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_t5wwgqos/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.141463041305542}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 26, 30, 8, 29, 23]
consumption (rows=resources) = [[4, 16, 3, 1, 7, 11], [9, 6, 10, 3, 8, 7], [5, 5, 7, 2, 15, 5], [2, 10, 6, 11, 2, 9]]
capacity = [62, 45, 38, 43]
upper_bounds = [5, 3, 4, 3, 3, 4]"
199,ilp_assign,2,5,2,0,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3683180809020996}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5], [1, 1]]"
200,rod,4,22,12,0,1,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0818181037902832}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 11, 4, 3]"
201,knap,16,450,1024,0,1,0,"{'ok': True, 'value': 450, 'stdout': '450\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07474637031555176}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 9, 11, 4, 14, 19, 10, 23, 13, 28, 4, 10, 16, 13, 20, 28]
V = [47, 17, 43, 60, 6, 34, 40, 35, 64, 57, 57, 15, 7, 60, 31, 32]
C = 127"
202,knap,32,1790,1045,0,39,0,"{'ok': True, 'value': 1790, 'stdout': '1790\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07991623878479004}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [52, 3, 41, 51, 19, 21, 50, 31, 4, 30, 55, 60, 36, 5, 39, 51, 8, 44, 39, 38, 34, 42, 35, 46, 32, 3, 19, 7, 31, 40, 28, 56]
V = [7, 40, 29, 45, 104, 114, 32, 48, 38, 65, 58, 6, 44, 128, 79, 128, 104, 107, 36, 95, 22, 115, 12, 11, 127, 31, 116, 78, 117, 20, 90, 14]
C = 525"
203,sub,2,39,17,0,39,1,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07221293449401855}",1,Compute: 56 - 17
204,lcs,32,18,10,0,1,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09464764595031738}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdadadcdccccddaabcccaabbdbbbbbdd""
T = ""ccdbbbacaaccddabcbabddbadbcccbba"""
205,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08337831497192383}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""bb"""
206,ilp_assign,8,38,46,0,1,0,"{'ok': True, 'value': 38, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/080b05d0957440629907c7bc36c97064-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/080b05d0957440629907c7bc36c97064-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 38 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 38\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 38 - took 0.00 seconds\nCbc0012I Integer solution of 38 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 38, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 38 to 38\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                38.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 38.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17689132690429688}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 16, 5, 18, 10, 18, 2], [24, 8, 1, 10, 17, 7, 6], [11, 14, 9, 13, 20, 6, 5], [20, 22, 4, 2, 23, 1, 24], [3, 9, 12, 10, 5, 24, 14], [7, 13, 8, 8, 9, 10, 14], [12, 19, 8, 24, 11, 17, 21]]"
207,ilp_partition,8,1,1,1,3,0,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07943916320800781}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 23, 9, 22, 14, 21, 15, 3]"
208,ilp_partition,4,0,1,0,18,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07308483123779297}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 5, 3, 6]"
209,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0773928165435791}",1,Compute: 61 - 60
210,knap,8,84,114,0,6,0,"{'ok': True, 'value': 84, 'stdout': '84\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08294558525085449}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 11, 12, 10, 6, 11, 6, 15]
V = [4, 14, 23, 32, 11, 17, 14, 7]
C = 36"
211,mul{'ok': True, 'value': 1945493347232350383034369596228834033663084564355599530906209200, 'stdout': '1945493347232350383034369596228834033663084564355599530906209200\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07463765144348145}",1,Compute: 31961216125726952985394655953180 * 60870441837359855267973132629940
212,mul,16,41187725348529622897617918950240,342,0,4089032344873424869684444880,0,"{'ok': True, 'value': 41187725348529622897617918950240, 'stdout': '41187725348529622897617918950240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07339859008789062}",1,Compute: 5408186286349720 * 7615811136625892
213,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07303500175476074}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 2, 5]"
214,ilp_prod,8,96,105,0,3,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b24e2b75e5344068bdde19380a8b609f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b24e2b75e5344068bdde19380a8b609f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 21 COLUMNS\nAt line 98 RHS\nAt line 115 BOUNDS\nAt line 120 ENDATA\nProblem MODEL has 16 rows, 4 columns and 64 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -6 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n6.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16007113456726074}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 23, 21, 4]
consumption (rows=resources) = [[7, 5, 7, 3], [5, 3, 8, 3], [4, 1, 3, 3], [3, 2, 2, 3]]
capacity = [23, 20, 22, 28]
upper_bounds = [3, 4, 3, 6]"
215,lcs,8,5,5,1,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08603310585021973}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbdbbab""
T = ""ccddbaab"""
216,rod,2,12,12,1,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07652783393859863}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 6]"
217,rod,4,18,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_3xv3lsu9/main.py"", line 20, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_3xv3lsu9/main.py"", line 10, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0899665355682373}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 9, 5, 4]"
218,add,16,8009759273311331,9365115162042921,0,8009759273311331,1,"{'ok': True, 'value': 8009759273311331, 'stdout': '8009759273311331\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07289552688598633}",1,Compute: 5702983950341482 + 2306775322969849
219,mul,4,52989720,0,0,52689200,0,"{'ok': True, 'value': 52989720, 'stdout': '52989720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07734370231628418}",1,Compute: 5572 * 9510
220,sub,4,6319,6319,1,6319,1,"{'ok': True, 'value': 6319, 'stdout': '6319\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07377958297729492}",1,Compute: 8245 - 1926
221,knap,8,108,100,0,0,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07292485237121582}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 3, 10, 8, 16, 3, 10, 15]
V = [1, 12, 1, 24, 18, 27, 25, 20]
C = 40"
222,lcs,32,18,10,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08305644989013672}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcaadccdddcababdabbcdccabadaccb""
T = ""dabddbccdbaccbccdbbbccbacbbbaca"""
223,sub,16,517755349924523,5417753350024523,0,5177553350024523,0,"{'ok': True, 'value': 517755349924523, 'stdout': '517755349924523\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07324743270874023}",1,Compute: 6199918896164979 - 5682163546240456
224,ilp_prod,2,14,30,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/42560b0b533e4a8a9cfe4efbb6a8320a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/42560b0b533e4a8a9cfe4efbb6a8320a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1609649658203125}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[2, 3], [3, 2]]
capacity = [8, 6]
upper_bounds = [3, 3]"
225,add,4,12099,12114,0,12099,1,"{'ok': True, 'value': 12099, 'stdout': '12099\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07747817039489746}",1,Compute: 6306 + 5793
226,ilp_partition,4,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07751059532165527}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 8, 9]"
227,knap,8,69,100,0,0,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07316780090332031}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 7, 11, 14, 5, 7, 11, 2]
V = [6, 1, 16, 26, 19, 11, 18, 13]
C = 30"
228,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07268905639648438}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 12, 8, 2]"
229,mul,2,574,574,1,574,1,"{'ok': True, 'value': 574, 'stdout': '574\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07192683219909668}",1,Compute: 14 * 41
230,ilp_assign,16,75,105,0,114,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3799722194671631}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 29, 47, 24, 34, 31, 21], [45, 27, 39, 7, 47, 18, 46], [47, 37, 15, 23, 48, 37, 8], [35, 45, 16, 43, 18, 6, 33], [7, 11, 28, 31, 48, 1, 28], [10, 5, 22, 6, 45, 4, 2], [27, 4, 45, 25, 19, 7, 17]]"
231,knap,16,507,134,0,8,0,"{'ok': True, 'value': 507, 'stdout': '507\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07504153251647949}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 10, 3, 31, 4, 1, 24, 26, 25, 3, 12, 11, 24, 27, 28, 31]
V = [39, 14, 26, 54, 60, 57, 5, 9, 61, 63, 39, 54, 1, 45, 32, 54]
C = 134"
232,rod,4,16,16,1,5,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08500385284423828}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 7, 12, 5]"
233,ilp_partition,2,3,1,0,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07397627830505371}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 5, 4]"
234,ilp_prod,32,372,1000,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_0bdlr82d/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_0bdlr82d/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15566492080688477}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 87, 55, 47, 93, 37]
consumption (rows=resources) = [[3, 11, 26, 32, 22, 26], [20, 9, 3, 9, 1, 19], [22, 19, 21, 14, 21, 30], [11, 29, 19, 14, 12, 21]]
capacity = [113, 88, 91, 128]
upper_bounds = [4, 4, 4, 3, 4, 3]"
235,add,2,149,149,1,149,1,"{'ok': True, 'value': 149, 'stdout': '149\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07555103302001953}",1,Compute: 74 + 75
236,lcs,16,7,6,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834650993347168}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbbddddccdacdcc""
T = ""dcbadcdbabbabaabc"""
237,ilp_assign,4,13,10,0,21,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3873155117034912}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 3, 7, 9], [5, 2, 3, 6], [6, 1, 1, 3], [5, 5, 12, 4]]"
238,ilp_partition,4,2,0,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08134722709655762}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 2, 9]"
239,mul,4,11154080,11000000,0,10986880,0,"{'ok': True, 'value': 11154080, 'stdout': '11154080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08343338966369629}",1,Compute: 8660 * 1288
240,ilp_assign,4,16,0,0,26,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3966538906097412}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 12, 6, 9], [6, 11, 11, 7], [2, 12, 11, 6], [5, 1, 4, 2]]"
241,ilp_partition,32,0,10,0,69,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20653176307678223}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [33, 76, 80, 6, 61, 15, 20, 69, 2, 81, 30, 15, 69, 93, 53, 69, 40, 4, 3, 62, 50, 52, 67, 80]"
242,mul,2,2925,2925,1,2925,1,"{'ok': True, 'value': 2925, 'stdout': '2925\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07507538795471191}",1,Compute: 39 * 75
243,rod,32,2112,1050,0,0,0,"{'ok': True, 'value': 2112, 'stdout': '2112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08190464973449707}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [66, 29, 55, 77, 30, 76, 85, 94, 19, 41, 27, 2, 24, 36, 70, 88, 66, 14, 7, 8, 80, 32, 1, 50, 50, 41, 32, 64, 65, 95, 66, 17]"
244,sub,16,5509770467159495,5509769467159495,0,5509765467159495,0,"{'ok': True, 'value': 5509770467159495, 'stdout': '5509770467159495\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08533644676208496}",1,Compute: 7865042189542084 - 2355271722382589
245,lcs,16,8,5,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08331918716430664}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baabacdcacaccabd""
T = ""cccdacbdbdcdbda"""
246,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07495832443237305}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbcbcbd""
T = ""cabaddd"""
247,knap,2,7,13,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07646989822387695}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 3]
V = [3, 7, 6]
C = 4"
248,ilp_assign,8,34,54,0,36,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.35993027687072754}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 22, 15, 24, 14, 16, 4], [9, 11, 4, 15, 11, 14, 3], [6, 12, 7, 5, 13, 20, 18], [13, 16, 3, 8, 11, 3, 18], [18, 22, 1, 21, 2, 15, 20], [4, 7, 17, 18, 19, 3, 16], [16, 12, 14, 12, 17, 17, 4]]"
249,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07596945762634277}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [29, 66, 27, 6, 3, 40, 39, 29, 58, 32, 63, 69, 14, 61, 82, 28, 32, 56, 35, 15, 92, 34, 5, 49]"
250,mul,8,1219159979556680,11818546000,0,1212335436840,0,"{'ok': True, 'value': 1219159979556680, 'stdout': '1219159979556680\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08161449432373047}",1,Compute: 68185460 * 17880058
251,sub,4,1763,1763,1,1763,1,"{'ok': True, 'value': 1763, 'stdout': '1763\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0713810920715332}",1,Compute: 2886 - 1123
252,mul,8,1185379881178680,873862160,0,120800165044680,0,"{'ok': True, 'value': 1185379881178680, 'stdout': '1185379881178680\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07280421257019043}",1,Compute: 54626385 * 21699768
253,lcs,4,2,3,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0815887451171875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcac""
T = ""cab"""
254,sub,32,77183316061247400924161467692445,77183316061247400920888687702445,0,77183316061247400924161467702445,0,"{'ok': True, 'value': 77183316061247400924161467692445, 'stdout': '77183316061247400924161467692445\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07543134689331055}",1,Compute: 96471073707782433805191776250454 - 19287757646535032881030308558009
255,ilp_prod,4,18,33,0,27,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/841acbcb1a1d41cd8d62f3d770ef0e4e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/841acbcb1a1d41cd8d62f3d770ef0e4e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 13.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15927934646606445}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7, 9]
consumption (rows=resources) = [[1, 4, 1], [1, 2, 1], [4, 4, 4]]
capacity = [12, 11, 9]
upper_bounds = [3, 3, 3]"
256,lcs,8,6,4,0,0,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0723729133605957}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcddabd""
T = ""dcddcadac"""
257,add,2,141,141,1,141,1,"{'ok': True, 'value': 141, 'stdout': '141\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0712575912475586}",1,Compute: 64 + 77
258,sub,16,757188263164011,8043963098575967,0,757188263264011,0,"{'ok': True, 'value': 757188263164011, 'stdout': '757188263164011\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07318401336669922}",1,Compute: 8801151361739978 - 8043963098575967
259,sub,4,1265,1265,1,1265,1,"{'ok': True, 'value': 1265, 'stdout': '1265\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08269453048706055}",1,Compute: 6012 - 4747
260,ilp_assign,2,6,5,0,7,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39657044410705566}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5], [3, 4]]"
261,mul,2,988,968,0,988,1,"{'ok': True, 'value': 988, 'stdout': '988\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07301974296569824}",1,Compute: 13 * 76
262,ilp_partition,4,1,1,1,27,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07350683212280273}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 5, 4, 8]"
263,knap,32,1815,1043,0,1,0,"{'ok': True, 'value': 1815, 'stdout': '1815\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09257888793945312}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [26, 12, 35, 57, 60, 38, 7, 62, 38, 3, 7, 6, 7, 17, 57, 43, 13, 16, 30, 12, 59, 44, 41, 9, 9, 18, 9, 9, 22, 41, 61, 59]
V = [74, 21, 90, 81, 21, 27, 125, 19, 73, 118, 50, 108, 69, 96, 24, 53, 86, 92, 88, 85, 64, 2, 73, 30, 81, 115, 59, 10, 75, 116, 31, 5]
C = 463"
264,knap,2,9,5,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08620142936706543}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 3]
V = [2, 9, 2]
C = 5"
265,ilp_assign,4,17,0,0,28,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38842129707336426}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 12, 11, 8], [12, 4, 12, 10], [10, 5, 7, 10], [6, 8, 12, 5]]"
266,lcs,16,8,5,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07510900497436523}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabadabdadaaacca""
T = ""bcdbbbadcddcbbab"""
267,ilp_assign,8,36,58,0,74,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3833963871002197}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 4, 24, 11, 19, 10, 18], [6, 20, 21, 22, 15, 22, 17], [21, 10, 7, 11, 4, 7, 15], [8, 9, 5, 17, 2, 11, 2], [9, 5, 24, 17, 7, 20, 14], [12, 5, 24, 23, 1, 16, 10], [6, 12, 4, 11, 8, 21, 11]]"
268,knap,2,8,11,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07420468330383301}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 4]
V = [2, 6, 8]
C = 3"
269,ilp_partition,16,0,1,0,46,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19667744636535645}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [48, 22, 22, 12, 46, 30, 9, 30, 8, 37, 11, 41, 42, 43, 22, 23]"
270,knap,32,1687,1024,0,46,0,"{'ok': True, 'value': 1687, 'stdout': '1687\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09283041954040527}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [49, 64, 6, 20, 44, 54, 62, 61, 56, 28, 64, 57, 38, 22, 46, 59, 39, 33, 43, 57, 7, 16, 3, 6, 58, 49, 28, 13, 32, 16, 6, 32]
V = [37, 84, 12, 125, 66, 122, 1, 56, 120, 119, 92, 94, 83, 115, 125, 34, 15, 6, 119, 49, 54, 116, 101, 67, 23, 86, 19, 13, 26, 5, 35, 83]
C = 584"
271,rod,32,2368,1055,0,8,0,"{'ok': True, 'value': 2368, 'stdout': '2368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08394050598144531}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [74, 8, 91, 17, 59, 79, 67, 58, 92, 44, 50, 24, 34, 62, 80, 55, 63, 64, 85, 56, 83, 72, 78, 6, 31, 94, 88, 96, 41, 92, 31, 16]"
272,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07288551330566406}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbba""
T = ""ccdc"""
273,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09649419784545898}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccb""
T = ""baacd"""
274,sub,4,591,691,0,611,0,"{'ok': True, 'value': 591, 'stdout': '591\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09592866897583008}",1,Compute: 4971 - 4380
275,add,2,130,130,1,130,1,"{'ok': True, 'value': 130, 'stdout': '130\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08350133895874023}",1,Compute: 99 + 31
276,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08420014381408691}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addbdacd""
T = ""cabbaabb"""
277,ilp_assign,4,23,27,0,35,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40616416931152344}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 12, 5, 12], [4, 7, 6, 1], [10, 8, 8, 12], [9, 8, 6, 11]]"
278,knap,16,233,121,0,0,0,"{'ok': True, 'value': 233, 'stdout': '233\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07527995109558105}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 18, 3, 18, 12, 6, 11, 6, 9, 23, 4, 25, 3, 31, 31, 13]
V = [39, 29, 3, 13, 3, 10, 26, 2, 22, 21, 2, 9, 33, 5, 38, 36]
C = 121"
279,add,8,139698782,140000000,0,149708782,0,"{'ok': True, 'value': 139698782, 'stdout': '139698782\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08691716194152832}",1,Compute: 49210506 + 90488276
280,knap,4,25,14,0,0,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08187389373779297}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 5, 3]
V = [2, 13, 12, 3]
C = 6"
281,ilp_partition,8,1,1,1,60,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07506394386291504}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 17, 2, 24, 23, 8, 3, 1]"
282,ilp_partition,4,4,0,0,929,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08378171920776367}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 8, 1, 12]"
283,ilp_assign,2,8,4,0,12,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38622617721557617}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 6], [2, 6]]"
284,rod,2,3,3,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_zwe32uxh/main.py"", line 11, in <module>\n    print(cut_rod(P, N))\n  File ""/tmp/cot_exec_zwe32uxh/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07707428932189941}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 3]"
285,sub,4,7153,7153,1,7153,1,"{'ok': True, 'value': 7153, 'stdout': '7153\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0749809741973877}",1,Compute: 9778 - 2625
286,ilp_prod,4,26,27,0,24,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a324fb1d84dd4aa2a6f2c9a508084010-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a324fb1d84dd4aa2a6f2c9a508084010-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14944911003112793}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7, 4]
consumption (rows=resources) = [[2, 1, 2], [1, 4, 1], [2, 3, 3]]
capacity = [8, 12, 11]
upper_bounds = [4, 3, 3]"
287,ilp_assign,2,5,3,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3876919746398926}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [6, 3]]"
288,mul,4,45206850,98,0,45196500,0,"{'ok': True, 'value': 45206850, 'stdout': '45206850\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08186006546020508}",1,Compute: 6305 * 7170
289,ilp_prod,8,51,105,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_o730x_9m/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_o730x_9m/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17375874519348145}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 16, 9, 8]
consumption (rows=resources) = [[1, 7, 6, 7], [8, 7, 7, 8], [6, 7, 4, 3], [8, 7, 8, 7]]
capacity = [20, 30, 16, 32]
upper_bounds = [3, 3, 3, 3]"
290,knap,2,7,7,1,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07885098457336426}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 2]
V = [3, 7, 4]
C = 2"
291,ilp_prod,2,18,13,0,21,0,"{'ok': True, 'value': 3, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ff4e6f34ce014902a5d70dce3e401c00-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ff4e6f34ce014902a5d70dce3e401c00-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -3 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                3.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n3.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1650991439819336}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[1, 1], [1, 3]]
capacity = [7, 6]
upper_bounds = [6, 3]"
292,rod,8,88,1,0,22,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07324862480163574}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 15, 19, 16, 13, 5, 10, 18]"
293,knap,4,23,22,0,0,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07729291915893555}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 5, 3]
V = [3, 5, 10, 13]
C = 10"
294,lcs,32,19,15,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07826495170593262}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccddbddabdcbccdcbabbbcdcacdaacb""
T = ""babbcaaddadabcdcccdaaadbdaaccbddd"""
295,ilp_partition,4,2,0,0,5,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07297778129577637}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 3, 8, 5]"
296,rod,4,22,22,1,12,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_cwhlvav5/main.py"", line 22, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_cwhlvav5/main.py"", line 10, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07252717018127441}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 11, 1, 11]"
297,lcs,2,1,0,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09371519088745117}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""dd"""
298,add,2,95,95,1,95,1,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08288407325744629}",1,Compute: 30 + 65
299,mul,32,472800379375418159464661979937941534352707954002380080023088840,476283113049423702631335495935778,0,465761111185555567173667430737778858712163456580,0,"{'ok': True, 'value': 472800379375418159464661979937941534352707954002380080023088840, 'stdout': '472800379375418159464661979937941534352707954002380080023088840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07566165924072266}",1,Compute: 42025223459038513421030499626898 * 11250395368777778858712163456580
300,ilp_prod,2,28,21,0,18,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5090977698c04be3a1eea9ad1e24f439-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5090977698c04be3a1eea9ad1e24f439-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -6 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n6.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17634940147399902}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[2, 2], [3, 2]]
capacity = [9, 8]
upper_bounds = [3, 4]"
301,ilp_prod,16,129,165,0,165,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_jlbn5bkc/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1400158405303955}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [37, 42, 24, 39, 8, 8]
consumption (rows=resources) = [[8, 16, 12, 13, 3, 16], [4, 16, 2, 2, 14, 6], [16, 6, 13, 1, 6, 3], [3, 13, 15, 11, 6, 9]]
capacity = [39, 39, 47, 55]
upper_bounds = [3, 3, 3, 3, 3, 3]"
302,ilp_partition,2,0,1,0,2,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08255386352539062}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 1, 3]"
303,sub,32,54809069796495233975919193678830,21432969970000000000000000000000,0,54809069806495233975919193678830,0,"{'ok': True, 'value': 54809069796495233975919193678830, 'stdout': '54809069796495233975919193678830\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07378125190734863}",1,Compute: 92117509386328105990325177059407 - 37308439589832872014405983380577
304,ilp_prod,4,23,31,0,35,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0auxla9p/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 10*x[1] + 5*x[2] for x in x.values()])\n  File ""/tmp/cot_exec_0auxla9p/main.py"", line 10, in <listcomp>\n    prob += lpSum([3*x[0] + 10*x[1] + 5*x[2] for x in x.values()])\nTypeError: \'LpVariable\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15743398666381836}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 10, 5]
consumption (rows=resources) = [[3, 4, 4], [4, 1, 2], [2, 3, 1]]
capacity = [11, 10, 11]
upper_bounds = [3, 3, 3]"
305,knap,4,19,24,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07637691497802734}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 2, 5]
V = [15, 10, 4, 9]
C = 10"
306,ilp_partition,2,0,1,0,2,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10765552520751953}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 3, 2]"
307,ilp_partition,4,2,0,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08823180198669434}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 2, 2, 12]"
308,sub,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08888673782348633}",1,Compute: 44 - 41
309,add,32,65569339371208117017091226725770,,0,65569340371248117017091226725770,0,"{'ok': True, 'value': 65569339371208117017091226725770, 'stdout': '65569339371208117017091226725770\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10246491432189941}",1,Compute: 18484584903366452532061210112159 + 47084754467841664485030016613611
310,knap,32,1977,1004,0,2,0,"{'ok': True, 'value': 1977, 'stdout': '1977\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08518362045288086}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 40, 6, 50, 41, 10, 5, 21, 54, 9, 61, 49, 36, 20, 45, 32, 60, 2, 39, 39, 30, 18, 23, 19, 53, 28, 14, 17, 23, 5, 14, 61]
V = [100, 51, 69, 2, 19, 100, 86, 115, 5, 80, 96, 52, 79, 94, 13, 36, 89, 112, 73, 88, 90, 83, 67, 3, 111, 115, 68, 123, 114, 61, 98, 23]
C = 466"
311,rod,32,929,1050,0,1,0,"{'ok': True, 'value': 929, 'stdout': '929\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07535314559936523}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [10, 29, 90, 72, 89, 38, 9, 34, 88, 91, 56, 92, 27, 76, 23, 33, 7, 20, 69, 30, 71, 64, 73, 59, 42, 38, 63, 90, 45, 21, 69, 1]"
312,mul,2,780,780,1,780,1,"{'ok': True, 'value': 780, 'stdout': '780\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07469320297241211}",1,Compute: 26 * 30
313,mul,16,52625836316257875852872654490614,The answer will be the product of the two numbers.,0,52610449565275486644466646,0,"{'ok': True, 'value': 52625836316257875852872654490614, 'stdout': '52625836316257875852872654490614\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07725715637207031}",1,Compute: 7468887138870497 * 7046007703393462
314,ilp_prod,2,25,28,0,21,0,"{'ok': True, 'value': 7, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/08fd8bb6830642619062121a437d6d07-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/08fd8bb6830642619062121a437d6d07-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -7 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                7.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n7.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.23235774040222168}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4]
consumption (rows=resources) = [[2, 1], [1, 2]]
capacity = [7, 7]
upper_bounds = [3, 3]"
315,lcs,4,2,2,1,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07872748374938965}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbc""
T = ""bcdb"""
316,add,16,12798728476515162,22534580571749136,0,12848728476515162,0,"{'ok': True, 'value': 12798728476515162, 'stdout': '12798728476515162\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08190393447875977}",1,Compute: 9472868507174913 + 3325859969340249
317,add,32,113049842678146682965964802460347,,0,113050846678106683523964798260347,0,"{'ok': True, 'value': 113049842678146682965964802460347, 'stdout': '113049842678146682965964802460347\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07954907417297363}",1,Compute: 15271465932554992284220536201872 + 97778376745591690681744266258475
318,knap,2,9,6,0,-1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07391524314880371}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 1]
V = [3, 9, 3]
C = 2"
319,ilp_prod,4,18,23,0,15,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b67f6e96f5394ac8864b74b3d6bc0394-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b67f6e96f5394ac8864b74b3d6bc0394-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6.75 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -6 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n6.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16678452491760254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5, 4]
consumption (rows=resources) = [[4, 2, 1], [3, 4, 3], [1, 2, 2]]
capacity = [9, 14, 9]
upper_bounds = [3, 3, 4]"
320,ilp_partition,16,1,1,1,26,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.30370378494262695}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 40, 47, 26, 46, 22, 48, 17, 43, 14, 21, 42, 24, 14, 41, 33]"
321,ilp_prod,4,18,105,0,30,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ca8cb33c510f484bb2e9114831ae36c8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ca8cb33c510f484bb2e9114831ae36c8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1484241485595703}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 9, 8]
consumption (rows=resources) = [[2, 4, 1], [1, 1, 2], [3, 4, 4]]
capacity = [15, 10, 8]
upper_bounds = [3, 3, 3]"
322,rod,16,376,107,0,84,0,"{'ok': True, 'value': 376, 'stdout': '376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0922093391418457}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [18, 47, 20, 39, 21, 39, 34, 27, 14, 13, 4, 1, 4, 17, 38, 27]"
323,rod,4,32,32,1,11,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07436823844909668}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 11, 12, 11]"
324,ilp_prod,32,409,The solution to the problem is to use a linear programming approach to find the optimal solution.,0,85,0,"{'ok': True, 'value': 28, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7dc93ae1d8374012a1a73e8af328cb4d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7dc93ae1d8374012a1a73e8af328cb4d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 27 COLUMNS\nAt line 178 RHS\nAt line 201 BOUNDS\nAt line 208 ENDATA\nProblem MODEL has 22 rows, 6 columns and 132 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 52.1569 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -28 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                28.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n28.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16511750221252441}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [28, 57, 59, 29, 36, 78]
consumption (rows=resources) = [[16, 25, 4, 18, 19, 22], [3, 6, 9, 32, 5, 25], [20, 21, 8, 20, 31, 23], [30, 1, 17, 19, 21, 10]]
capacity = [99, 80, 85, 95]
upper_bounds = [3, 3, 5, 3, 3, 3]"
325,knap,8,100,103,0,0,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0765695571899414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 14, 15, 15, 14, 9, 4, 15]
V = [6, 29, 25, 21, 26, 21, 20, 10]
C = 51"
326,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07821130752563477}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccddbcda""
T = ""dacabca"""
327,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08399033546447754}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbac""
T = ""caac"""
328,knap,16,359,141,0,0,0,"{'ok': True, 'value': 359, 'stdout': '359\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08448958396911621}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [26, 27, 10, 29, 5, 21, 24, 23, 4, 24, 4, 1, 1, 26, 29, 29]
V = [6, 62, 23, 3, 46, 27, 63, 14, 45, 17, 16, 22, 3, 42, 36, 29]
C = 141"
329,add,8,114741774,114741774,1,114741774,1,"{'ok': True, 'value': 114741774, 'stdout': '114741774\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0716865062713623}",1,Compute: 73504753 + 41237021
330,rod,8,88,22,0,39,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09725427627563477}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 15, 1, 20, 3, 11, 15, 22]"
331,ilp_prod,32,496,1000,0,127,0,"{'ok': True, 'value': 63, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8a397d4ecde2455d98890dd8496310d0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8a397d4ecde2455d98890dd8496310d0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 27 COLUMNS\nAt line 178 RHS\nAt line 201 BOUNDS\nAt line 208 ENDATA\nProblem MODEL has 22 rows, 6 columns and 132 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 105.276 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -63 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                63.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n63.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1521615982055664}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [63, 41, 19, 20, 64, 76]
consumption (rows=resources) = [[8, 21, 12, 10, 4, 5], [32, 12, 9, 17, 19, 10], [22, 13, 25, 22, 20, 4], [26, 16, 7, 13, 12, 21]]
capacity = [127, 99, 125, 127]
upper_bounds = [3, 6, 5, 5, 5, 6]"
332,rod,32,1488,1084,0,1,0,"{'ok': True, 'value': 1488, 'stdout': '1488\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07332706451416016}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [15, 93, 88, 28, 55, 62, 47, 19, 91, 52, 6, 35, 75, 86, 10, 75, 16, 28, 47, 83, 72, 5, 1, 29, 85, 68, 78, 38, 55, 9, 60, 39]"
333,rod,8,72,22,0,1,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07472538948059082}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 6, 13, 10, 16, 14, 16, 11]"
334,ilp_partition,4,1,0,0,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08436131477355957}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 11, 4, 12]"
335,sub,32,49407525904075180260212816216302,11499049145519601855484699100925,0,49407525904075180260212816216302,1,"{'ok': True, 'value': 49407525904075180260212816216302, 'stdout': '49407525904075180260212816216302\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0926218032836914}",1,Compute: 60906575049594782115697515317227 - 11499049145519601855484699100925
336,sub,8,51018526,51018526,1,49018526,0,"{'ok': True, 'value': 51018526, 'stdout': '51018526\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07509708404541016}",1,Compute: 64766394 - 13747868
337,ilp_assign,32,115,110,0,208,0,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6499619483947754}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 92, 78, 24, 83, 82, 72], [93, 67, 90, 6, 38, 78, 71], [92, 58, 24, 61, 48, 31, 17], [4, 74, 87, 2, 80, 61, 77], [4, 10, 57, 75, 32, 10, 68], [39, 79, 18, 92, 78, 2, 51], [48, 14, 96, 62, 91, 15, 92]]"
338,ilp_partition,32,0,1,0,12,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0340118408203125}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [91, 16, 33, 18, 46, 65, 73, 48, 25, 13, 79, 84, 47, 33, 50, 54, 85, 41, 73, 64, 29, 77, 38, 12]"
339,mul,4,52797012,1542244,0,52886232,0,"{'ok': True, 'value': 52797012, 'stdout': '52797012\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08994626998901367}",1,Compute: 9799 * 5388
340,rod,16,328,54,0,65,0,"{'ok': True, 'value': 328, 'stdout': '328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08326911926269531}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [11, 41, 46, 15, 32, 35, 18, 8, 1, 13, 42, 43, 48, 28, 20, 15]"
341,sub,4,1105,1105,1,1105,1,"{'ok': True, 'value': 1105, 'stdout': '1105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08333992958068848}",1,Compute: 6808 - 5703
342,knap,8,95,100,0,0,0,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07999897003173828}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 2, 2, 13, 3, 3, 8, 12]
V = [25, 4, 23, 24, 21, 22, 3, 19]
C = 26"
343,ilp_assign,8,41,105,0,80,0,"{'ok': True, 'value': 41, 'stdout': '41\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42053985595703125}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 23, 9, 23, 8, 2, 8], [1, 23, 24, 11, 11, 20, 6], [21, 22, 19, 12, 22, 16, 14], [24, 6, 24, 6, 22, 18, 22], [22, 10, 6, 16, 22, 5, 12], [22, 15, 5, 24, 17, 24, 14], [16, 2, 17, 21, 14, 2, 24]]"
344,mul,16,13506638025008663287224384922524,13508517176739908913537240890057788643,0,1340633926252621596846666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 13506638025008663287224384922524, 'stdout': '13506638025008663287224384922524\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07581257820129395}",1,Compute: 4195078660493563 * 3219638800150548
345,lcs,8,5,5,1,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08533811569213867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adccddaa""
T = ""adbdabaaa"""
346,ilp_assign,16,53,114,0,117,0,"{'ok': True, 'value': 53, 'stdout': '53\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3613557815551758}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 2, 5, 8, 14, 33, 15], [43, 45, 46, 46, 26, 48, 3], [32, 18, 12, 1, 25, 15, 23], [17, 38, 31, 27, 19, 37, 45], [43, 22, 3, 30, 23, 17, 23], [44, 10, 44, 30, 33, 19, 35], [24, 42, 1, 9, 8, 7, 16]]"
347,ilp_assign,32,91,110,0,128,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4034440517425537}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[36, 13, 84, 2, 55, 16, 66], [3, 16, 74, 24, 81, 75, 93], [26, 30, 9, 5, 60, 20, 13], [23, 45, 56, 67, 47, 62, 14], [87, 83, 60, 14, 40, 13, 55], [67, 22, 27, 77, 36, 71, 87], [30, 14, 27, 35, 68, 19, 4]]"
348,rod,8,92,46,0,1,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08620119094848633}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 23, 11, 23, 20, 20, 9, 2]"
349,sub,16,3341541458533823,3341541458533823,1,3341541458533823,1,"{'ok': True, 'value': 3341541458533823, 'stdout': '3341541458533823\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0785837173461914}",1,Compute: 7248634250182897 - 3907092791649074
350,mul,2,3332,3332,1,3364,0,"{'ok': True, 'value': 3332, 'stdout': '3332\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08155035972595215}",1,Compute: 68 * 49
351,rod,16,328,16,0,64,0,"{'ok': True, 'value': 328, 'stdout': '328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07567095756530762}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [10, 41, 14, 2, 47, 37, 1, 16, 12, 43, 9, 21, 40, 6, 46, 15]"
352,add,4,7441,7441,1,7441,1,"{'ok': True, 'value': 7441, 'stdout': '7441\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08119726181030273}",1,Compute: 6257 + 1184
353,ilp_prod,32,335,1000,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_uq_hjq03/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_uq_hjq03/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14252638816833496}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 23, 67, 3, 86, 91]
consumption (rows=resources) = [[3, 32, 23, 1, 12, 22], [15, 20, 10, 7, 28, 17], [11, 4, 1, 11, 21, 7], [3, 4, 9, 7, 32, 11]]
capacity = [84, 76, 75, 87]
upper_bounds = [5, 3, 3, 6, 3, 3]"
354,ilp_assign,16,59,10,0,110,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38034749031066895}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 48, 7, 41, 41, 18, 22], [25, 23, 38, 35, 25, 28, 8], [12, 1, 35, 42, 5, 3, 34], [39, 1, 9, 36, 39, 46, 16], [48, 21, 11, 28, 27, 43, 43], [5, 48, 9, 11, 18, 42, 13], [15, 48, 34, 11, 9, 24, 23]]"
355,ilp_prod,16,119,105,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_nbiep_r7/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_nbiep_r7/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14356732368469238}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 16, 23, 6, 15, 22]
consumption (rows=resources) = [[11, 5, 7, 12, 15, 13], [2, 16, 3, 10, 10, 14], [14, 6, 3, 13, 10, 14], [15, 6, 10, 13, 12, 2]]
capacity = [53, 54, 53, 37]
upper_bounds = [3, 3, 3, 3, 3, 3]"
356,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07499885559082031}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caad""
T = ""bada"""
357,mul,32,3021223225809746568364362222356425514070624047456694984224957709,29394722941033339888214062722406,0,299600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 3021223225809746568364362222356425514070624047456694984224957709, 'stdout': '3021223225809746568364362222356425514070624047456694984224957709\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07439970970153809}",1,Compute: 91866899838434463064046020974729 * 32886961801510078276479846219621
358,ilp_prod,32,458,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are that the total consumption of each resource must not exceed its capacity and that the quantity produced for each product must be non-negative. The upper bounds on the quantity of each product that can be produced are given by upper_bounds[j]. The problem is then solved using a linear programming solver, and the maximum profit is the value of the objective function after solving the problem.",0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u4r6v8vx/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_u4r6v8vx/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.13888001441955566}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 77, 65, 68, 9, 22]
consumption (rows=resources) = [[18, 25, 10, 13, 5, 21], [5, 19, 15, 25, 23, 19], [17, 29, 8, 9, 14, 11], [1, 15, 9, 2, 31, 18]]
capacity = [101, 117, 70, 70]
upper_bounds = [4, 3, 7, 4, 3, 3]"
359,rod,32,2944,1050,0,1,0,"{'ok': True, 'value': 2944, 'stdout': '2944\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07347464561462402}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [92, 51, 38, 57, 50, 2, 24, 80, 36, 33, 19, 57, 19, 19, 43, 59, 94, 18, 93, 64, 31, 8, 30, 91, 42, 92, 56, 21, 53, 86, 70, 93]"
360,ilp_prod,16,192,149,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ng3oz1ue/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ng3oz1ue/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15708231925964355}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [48, 7, 23, 4, 24, 18]
consumption (rows=resources) = [[10, 11, 10, 9, 4, 7], [13, 15, 16, 14, 10, 12], [2, 8, 8, 1, 9, 1], [2, 15, 7, 10, 11, 3]]
capacity = [44, 56, 55, 41]
upper_bounds = [4, 3, 3, 4, 3, 4]"
361,rod,4,24,10,0,5,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08471846580505371}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 12, 5, 10]"
362,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dfrmrxuu/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_dfrmrxuu/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09145927429199219}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 2]"
363,rod,4,18,18,1,4,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08236479759216309}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 9, 1, 6]"
364,ilp_partition,8,1,1,1,21,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08136916160583496}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 14, 3, 4, 1, 11, 16, 21]"
365,knap,8,102,103,0,1,0,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09461832046508789}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 5, 12, 11, 12, 2, 14, 1]
V = [15, 14, 26, 20, 1, 20, 29, 13]
C = 35"
366,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07405829429626465}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 6, 6, 18, 14, 24, 20, 13]"
367,knap,8,90,103,0,0,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07482743263244629}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 3, 1, 6, 8, 5, 8, 9]
V = [7, 24, 15, 8, 19, 1, 19, 32]
C = 25"
368,sub,2,16,16,1,16,1,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07231545448303223}",1,Compute: 42 - 26
369,rod,4,20,20,1,1,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07365965843200684}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 10, 7, 1]"
370,add,4,6877,6877,1,6877,1,"{'ok': True, 'value': 6877, 'stdout': '6877\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07305145263671875}",1,Compute: 5098 + 1779
371,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08527374267578125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbacaacbdcdcdab""
T = ""baacdccddcaacdb"""
372,ilp_assign,2,4,3,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3644294738769531}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [4, 2]]"
373,rod,2,6,6,1,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07764077186584473}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
374,mul,2,1188,1188,1,1188,1,"{'ok': True, 'value': 1188, 'stdout': '1188\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08296751976013184}",1,Compute: 12 * 99
375,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20227837562561035}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [43, 96, 18, 59, 38, 45, 81, 25, 65, 33, 34, 47, 59, 1, 42, 51, 85, 48, 55, 49, 30, 44, 62, 3]"
376,ilp_prod,4,32,34,0,30,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0c0802bd3715495489319bdce55d268a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0c0802bd3715495489319bdce55d268a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 26.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15862107276916504}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 8, 8]
consumption (rows=resources) = [[3, 2, 4], [1, 3, 1], [3, 2, 1]]
capacity = [8, 12, 14]
upper_bounds = [3, 4, 3]"
377,add,8,103366430,57,0,103366430,1,"{'ok': True, 'value': 103366430, 'stdout': '103366430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08357691764831543}",1,Compute: 92576648 + 10789782
378,sub,32,38296147169329453715369015270322,38296147170339453785369665270322,0,38296157169329453715368965270322,0,"{'ok': True, 'value': 38296147169329453715369015270322, 'stdout': '38296147169329453715369015270322\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07445240020751953}",1,Compute: 81720512861293226477241738698367 - 43424365691963772761872723428045
379,sub,8,5361141,5361141,1,5361141,1,"{'ok': True, 'value': 5361141, 'stdout': '5361141\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08857846260070801}",1,Compute: 29925905 - 24564764
380,ilp_partition,16,1,1,1,43,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18743085861206055}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [42, 48, 30, 29, 43, 19, 10, 19, 24, 31, 2, 42, 34, 11, 6, 23]"
381,mul,16,10079215207760646680269838309025,100962488665550421520000000000,0,1018486633463669754644664642546464,0,"{'ok': True, 'value': 10079215207760646680269838309025, 'stdout': '10079215207760646680269838309025\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09615612030029297}",1,Compute: 9508465483580465 * 1060025429462385
382,ilp_assign,8,25,36,0,1,0,"{'ok': True, 'value': 25, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c333a3736a6c44a09574ab2cd42658cc-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/c333a3736a6c44a09574ab2cd42658cc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 25 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 25\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 25 - took 0.00 seconds\nCbc0012I Integer solution of 25 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 25, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 25 to 25\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                25.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nMinimum total cost: 25.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16772937774658203}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 2, 11, 8, 21, 22, 7], [2, 19, 13, 20, 19, 9, 12], [12, 21, 6, 8, 24, 17, 5], [17, 3, 10, 5, 1, 10, 4], [20, 9, 9, 1, 1, 18, 2], [5, 6, 11, 23, 7, 5, 3], [17, 11, 9, 16, 9, 15, 17]]"
383,ilp_prod,2,21,40,0,2,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/afe8d0c0f6d045e383006f7b43feadbd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/afe8d0c0f6d045e383006f7b43feadbd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -5 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                5.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 5.0\nx[0]: 1.0\nx[1]: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14796113967895508}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[2, 1], [2, 3]]
capacity = [9, 8]
upper_bounds = [4, 3]"
384,ilp_assign,8,36,46,0,46,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39490842819213867}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 13, 21, 8, 13, 2, 2], [10, 9, 19, 7, 18, 16, 23], [21, 15, 14, 1, 1, 14, 5], [9, 19, 24, 6, 12, 14, 20], [13, 1, 24, 21, 15, 6, 10], [21, 19, 21, 1, 22, 8, 24], [12, 13, 12, 9, 10, 11, 3]]"
385,ilp_prod,32,280,1004,0,208,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_dzjxwrg2/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_dzjxwrg2/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15533995628356934}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 23, 27, 67, 12, 79]
consumption (rows=resources) = [[25, 8, 28, 17, 1, 6], [7, 24, 25, 18, 11, 30], [31, 7, 25, 17, 27, 28], [24, 7, 4, 19, 28, 21]]
capacity = [76, 109, 87, 79]
upper_bounds = [3, 4, 3, 4, 3, 3]"
386,rod,16,224,46,0,64,0,"{'ok': True, 'value': 224, 'stdout': '224\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08669424057006836}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [10, 28, 26, 21, 20, 19, 23, 10, 42, 22, 17, 11, 10, 33, 12, 21]"
387,knap,16,329,1043,0,1,0,"{'ok': True, 'value': 329, 'stdout': '329\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834662914276123}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 5, 25, 6, 20, 16, 11, 27, 29, 14, 19, 15, 16, 18, 7, 15]
V = [28, 7, 19, 16, 43, 3, 7, 17, 58, 31, 2, 36, 34, 36, 53, 44]
C = 124"
388,add,32,79390991529535925777114190625118,,0,79390991529535925777114190625118,1,"{'ok': True, 'value': 79390991529535925777114190625118, 'stdout': '79390991529535925777114190625118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07108688354492188}",1,Compute: 42080532746983579697440050441971 + 37310458782552346079674140183147
389,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3900413513183594}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 1], [4, 2]]"
390,lcs,32,17,16,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08524107933044434}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbccbbbcbdadbacbcdaabaabbdabdbc""
T = ""bdcabaadcacabadddccddbacdcaabda"""
391,sub,2,55,55,1,55,1,"{'ok': True, 'value': 55, 'stdout': '55\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08300042152404785}",1,Compute: 96 - 41
392,mul,4,22870152,32494,0,23038992,0,"{'ok': True, 'value': 22870152, 'stdout': '22870152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08491373062133789}",1,Compute: 3096 * 7387
393,ilp_prod,8,94,105,0,3,0,"{'ok': True, 'value': 94, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/de0d351f1d824add8b1d140335bc7d5d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/de0d351f1d824add8b1d140335bc7d5d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 96.2414 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -79 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -94 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -96.142857 to -94 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -94, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -96.1429 to -94\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                94.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n94.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16906213760375977}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 24, 18, 11]
consumption (rows=resources) = [[3, 3, 8, 2], [5, 2, 7, 5], [7, 7, 7, 3], [2, 7, 2, 1]]
capacity = [29, 29, 27, 31]
upper_bounds = [3, 3, 3, 5]"
394,ilp_partition,16,0,1,0,15,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1923227310180664}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 20, 34, 40, 45, 2, 21, 15, 39, 6, 45, 14, 42, 9, 2, 18]"
395,add,4,19316,1888,0,38724,0,"{'ok': True, 'value': 77264, 'stdout': '77264\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07378602027893066}",0,Compute: 9681 + 9635
396,ilp_prod,8,88,108,0,132,0,"{'ok': True, 'value': 66, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/054ce43d3f234ccab135866959672232-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/054ce43d3f234ccab135866959672232-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 84.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -66 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                66.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n66.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1623377799987793}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 12, 22, 5]
consumption (rows=resources) = [[4, 6, 7, 6], [7, 2, 2, 8], [1, 3, 3, 1], [2, 2, 4, 4]]
capacity = [19, 31, 27, 23]
upper_bounds = [4, 3, 3, 3]"
397,sub,2,19,74,0,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0733184814453125}",1,Compute: 93 - 74
398,rod,16,672,16,0,65,0,"{'ok': True, 'value': 672, 'stdout': '672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07381439208984375}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [42, 27, 30, 11, 20, 8, 41, 38, 7, 8, 1, 15, 46, 17, 27, 44]"
399,mul,4,9738960,104062,0,9994080,0,"{'ok': True, 'value': 9738960, 'stdout': '9738960\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07329297065734863}",1,Compute: 4620 * 2108
400,ilp_prod,32,634,1000,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_a50qd9mo/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_a50qd9mo/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14426279067993164}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [75, 61, 10, 36, 26, 92]
consumption (rows=resources) = [[8, 22, 19, 18, 28, 31], [4, 13, 24, 24, 29, 13], [11, 19, 7, 17, 7, 11], [16, 5, 26, 9, 10, 7]]
capacity = [126, 92, 95, 121]
upper_bounds = [7, 5, 3, 3, 3, 4]"
401,ilp_assign,8,39,36,0,35,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3641166687011719}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 14, 3, 1, 7, 9, 20], [11, 16, 11, 16, 19, 14, 21], [19, 6, 22, 18, 16, 8, 17], [8, 9, 17, 24, 20, 18, 8], [7, 13, 7, 13, 15, 9, 11], [13, 1, 7, 2, 3, 4, 10], [12, 17, 14, 17, 16, 10, 1]]"
402,mul,32,3827454981020627384057248516915425264509964012735644108666894232,38155456945683944660845646446560,0,3804649444433943486222444436698443869844,0,"{'ok': True, 'value': 3827454981020627384057248516915425264509964012735644108666894232, 'stdout': '3827454981020627384057248516915425264509964012735644108666894232\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08496928215026855}",1,Compute: 69297448258051345097574443869844 * 55232264350743006806877020685678
403,lcs,32,17,10,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08446311950683594}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdbcddcaadabacdacdccccccdcbaabb""
T = ""bbadabccabdaddcabcaadaddbacacad"""
404,ilp_prod,16,141,141,1,51,0,"{'ok': True, 'value': 94, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/55333f513e724af5ab0cbea91599969c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/55333f513e724af5ab0cbea91599969c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 25 COLUMNS\nAt line 164 RHS\nAt line 185 BOUNDS\nAt line 192 ENDATA\nProblem MODEL has 20 rows, 6 columns and 120 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 114.562 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -94 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                94.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n94.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1659998893737793}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [47, 7, 21, 21, 18, 9]
consumption (rows=resources) = [[15, 4, 5, 7, 14, 5], [9, 10, 15, 11, 2, 13], [9, 3, 14, 16, 15, 15], [5, 6, 16, 7, 12, 7]]
capacity = [48, 51, 39, 38]
upper_bounds = [3, 5, 3, 3, 3, 3]"
405,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08536148071289062}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""cdd"""
406,ilp_prod,8,79,100,0,0,0,"{'ok': True, 'value': 79, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/27a07c57ee8f4930a5003ee1bd61041a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/27a07c57ee8f4930a5003ee1bd61041a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 84.3667 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -62 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -79 found by DiveCoefficient after 16 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 4\nCbc0013I At root node, 3 cuts changed objective from -83.538462 to -79 in 8 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 17 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -79, took 16 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -83.5385 to -79\nProbing was tried 8 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 8 times and created 17 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 8 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 8 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 8 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 8 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                79.00000000\nEnumerated nodes:               0\nTotal iterations:               16\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n79.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16746807098388672}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 19, 23, 11]
consumption (rows=resources) = [[8, 6, 1, 1], [6, 7, 7, 5], [4, 7, 8, 2], [3, 8, 6, 1]]
capacity = [30, 30, 21, 29]
upper_bounds = [3, 3, 3, 6]"
407,rod,32,2720,1055,0,1,0,"{'ok': True, 'value': 2720, 'stdout': '2720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07976698875427246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [85, 61, 22, 86, 5, 76, 72, 80, 96, 2, 71, 3, 5, 41, 60, 92, 43, 61, 54, 53, 33, 63, 68, 70, 71, 56, 41, 50, 41, 63, 84, 55]"
408,rod,2,6,3,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_y8klk6cd/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_y8klk6cd/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08722877502441406}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 1]"
409,ilp_assign,32,176,100,0,63,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36223435401916504}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 62, 92, 70, 44, 54, 86], [1, 59, 89, 33, 86, 61, 59], [21, 53, 87, 83, 49, 27, 35], [78, 17, 6, 85, 27, 94, 62], [33, 91, 87, 34, 59, 68, 74], [69, 24, 14, 32, 55, 88, 50], [19, 59, 20, 11, 39, 32, 63]]"
410,mul,16,50532680318854506838132065522975,0,0,509391882229649496456646405,0,"{'ok': True, 'value': 50532680318854506838132065522975, 'stdout': '50532680318854506838132065522975\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07288312911987305}",1,Compute: 6823122054504801 * 7406093561742975
411,knap,32,1868,1043,0,6,0,"{'ok': True, 'value': 1868, 'stdout': '1868\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08824348449707031}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [38, 17, 32, 35, 49, 12, 39, 32, 39, 21, 6, 12, 41, 20, 11, 5, 50, 24, 16, 63, 45, 54, 35, 14, 11, 11, 6, 52, 34, 6, 61, 31]
V = [18, 61, 116, 90, 125, 32, 41, 60, 103, 22, 113, 101, 57, 91, 25, 109, 52, 25, 109, 116, 117, 96, 89, 22, 27, 58, 118, 18, 125, 104, 120, 119]
C = 461"
412,lcs,2,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07386016845703125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""cdb"""
413,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07343602180480957}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 4, 1]"
414,knap,4,26,22,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0692300796508789}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 6, 5]
V = [11, 16, 2, 10]
C = 12"
415,rod,8,50,22,0,1,0,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0732107162475586}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 2, 20, 18, 13, 15, 17, 6]"
416,sub,32,57788519302882198561828564105883,567230843156459646,0,57788519302882198561828564105883,1,"{'ok': True, 'value': 57788519302882198561828564105883, 'stdout': '57788519302882198561828564105883\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07164764404296875}",1,Compute: 99660583025941935350216794543932 - 41872063723059736788388230438049
417,lcs,8,5,4,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07449197769165039}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcabcdd""
T = ""bccabcca"""
418,knap,32,1491,104,0,17,0,"{'ok': True, 'value': 1491, 'stdout': '1491\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09145236015319824}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [26, 24, 24, 24, 19, 24, 30, 55, 4, 46, 30, 56, 28, 35, 58, 17, 26, 46, 18, 53, 1, 12, 30, 56, 55, 21, 38, 30, 1, 19, 39, 33]
V = [49, 17, 63, 75, 66, 8, 125, 127, 90, 61, 15, 4, 31, 26, 93, 61, 71, 78, 81, 56, 32, 35, 36, 72, 70, 82, 43, 13, 123, 66, 67, 104]
C = 489"
419,mul,2,6555,69,0,6565,0,"{'ok': True, 'value': 6555, 'stdout': '6555\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07479238510131836}",1,Compute: 95 * 69
420,mul,32,8069737465681666513425441952135351597575180008552410327118610532,The result of the multiplication is a very large number which is beyond the scope of this platform to display.,0,8109604339686684946964556484644669484666468,0,"{'ok': True, 'value': 8069737465681666513425441952135351597575180008552410327118610532, 'stdout': '8069737465681666513425441952135351597575180008552410327118610532\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07419061660766602}",1,Compute: 95110529882094823686566524318204 * 84845889048094212292908097754983
421,ilp_assign,32,123,186,0,205,0,"{'ok': True, 'value': 123, 'stdout': '123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38311147689819336}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[55, 80, 95, 5, 56, 22, 62], [37, 24, 59, 96, 39, 32, 95], [57, 86, 69, 5, 51, 89, 24], [86, 75, 5, 53, 74, 6, 38], [1, 77, 6, 84, 50, 71, 73], [2, 27, 92, 96, 44, 1, 72], [51, 48, 91, 62, 96, 68, 51]]"
422,ilp_prod,2,21,28,0,28,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/742497d66a224b7fb9cf49af2325b15a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/742497d66a224b7fb9cf49af2325b15a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 21.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14864230155944824}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 7]
consumption (rows=resources) = [[2, 2], [2, 1]]
capacity = [7, 7]
upper_bounds = [3, 3]"
423,mul,4,37740132,3494659,0,37288952,0,"{'ok': True, 'value': 37740132, 'stdout': '37740132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08552002906799316}",1,Compute: 4916 * 7677
424,sub,16,4708422122457517,4708422122457517,1,4708422122457517,1,"{'ok': True, 'value': 4708422122457517, 'stdout': '4708422122457517\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0725393295288086}",1,Compute: 8398401228292601 - 3689979105835084
425,mul,2,2880,45,0,2880,1,"{'ok': True, 'value': 2880, 'stdout': '2880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07439565658569336}",1,Compute: 64 * 45
426,add,8,81667590,81667590,1,81667590,1,"{'ok': True, 'value': 81667590, 'stdout': '81667590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07392311096191406}",1,Compute: 24079218 + 57588372
427,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07073640823364258}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 9, 12, 1]"
428,ilp_prod,32,342,The solution to the problem is the maximum profit that can be obtained while satisfying the resource constraints.,0,294,0,"{'ok': True, 'value': 296, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0de43f508eea4019bcc3ddcfb286104e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0de43f508eea4019bcc3ddcfb286104e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 311.31 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -296 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                296.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n296.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1523427963256836}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [74, 26, 25, 60, 11, 35]
consumption (rows=resources) = [[29, 31, 4, 9, 19, 22], [5, 31, 10, 31, 26, 28], [2, 20, 20, 17, 27, 5], [18, 4, 21, 16, 17, 30]]
capacity = [122, 107, 119, 87]
upper_bounds = [4, 3, 4, 3, 4, 3]"
429,lcs,16,10,6,0,18,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07524514198303223}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcddcadbdaadbba""
T = ""ccbadcdabadcadcba"""
430,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07561659812927246}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badcbcdcbddbcdbcbdcdbcdcbbbdcdaa""
T = ""cbabcdcdacdcacdaabdcddbdacbcbbb"""
431,add,4,10846,10846,1,10846,1,"{'ok': True, 'value': 10846, 'stdout': '10846\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08367300033569336}",1,Compute: 5557 + 5289
432,mul,8,1005464961640170,9,0,10393394059530,0,"{'ok': True, 'value': 1005464961640170, 'stdout': '1005464961640170\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07374382019042969}",1,Compute: 44093295 * 22803126
433,add,32,181235831717919240195971302836538,181235831717859239650891346826538,0,181235831717919240195971302836538,1,"{'ok': True, 'value': 181235831717919240195971302836538, 'stdout': '181235831717919240195971302836538\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0770559310913086}",1,Compute: 89468275257741236250990940721044 + 91767556460178003944980362115494
434,rod,8,176,25,0,1,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06982183456420898}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 10, 17, 1, 21, 23, 1, 5]"
435,lcs,32,19,15,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07579565048217773}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babdadcdcbccbdbcbcaacbdaccbdaccc""
T = ""aabbbadaadbadcbbabbaaddcdccadab"""
436,ilp_assign,8,15,36,0,1,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e51d3ed13d6c454687cb7ae10d74c698-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/e51d3ed13d6c454687cb7ae10d74c698-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 15\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 15 - took 0.00 seconds\nCbc0012I Integer solution of 15 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 15, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 15 to 15\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nMinimum total cost: 15.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15179681777954102}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 2, 4, 19, 21, 22, 1], [8, 9, 3, 14, 15, 4, 12], [8, 21, 12, 9, 3, 13, 23], [1, 23, 6, 4, 9, 24, 14], [7, 15, 1, 13, 5, 18, 18], [19, 4, 3, 1, 18, 22, 23], [10, 17, 2, 20, 3, 10, 3]]"
437,mul{'ok': True, 'value': 41095732729410827968826782040730, 'stdout': '41095732729410827968826782040730\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08997821807861328}",1,Compute: 5958908631707555 * 6896520028976286
438,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07180404663085938}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cc""
T = ""cd"""
439,add,16,10724881393992458,10724673394035458,0,10724887394002458,0,"{'ok': True, 'value': 10724881393992458, 'stdout': '10724881393992458\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07497668266296387}",1,Compute: 3657588940143225 + 7067292453849233
440,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_0xzw5mu7/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_0xzw5mu7/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08431816101074219}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
441,sub,32,47587286226414136691661606828364,47587286226414136691661606828364,1,47587286226414136698661606828364,0,"{'ok': True, 'value': 47587286226414136691661606828364, 'stdout': '47587286226414136691661606828364\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08937644958496094}",1,Compute: 82902266485877604957487821066442 - 35314980259463468265826214238078
442,mul,16,11294191761071094980006279350638,113044975536988225353566567,0,113008916864434554444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 11294191761071094980006279350638, 'stdout': '11294191761071094980006279350638\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07927250862121582}",1,Compute: 1876574110644114 * 6018516240317567
443,knap,4,18,18,1,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08792662620544434}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 7, 5, 1]
V = [7, 1, 16, 2]
C = 10"
444,mul,32,5633922458658225104899737351509113952867585866895109793489581248,11415647188161808948032,0,562484966666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 5633922458658225104899737351509113952867585866895109793489581248, 'stdout': '5633922458658225104899737351509113952867585866895109793489581248\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07448267936706543}",1,Compute: 77669906278905965266449091519039 * 72536748511415647188161808948032
445,ilp_prod,8,66,105,0,4,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/65fca8426c3b47058f04a558bc7bdc2c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/65fca8426c3b47058f04a558bc7bdc2c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1591789722442627}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 18, 13, 15]
consumption (rows=resources) = [[8, 7, 1, 5], [5, 8, 1, 2], [4, 6, 8, 6], [2, 6, 4, 1]]
capacity = [25, 22, 26, 17]
upper_bounds = [3, 3, 3, 4]"
446,add,2,118,118,1,118,1,"{'ok': True, 'value': 118, 'stdout': '118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07413983345031738}",1,Compute: 74 + 44
447,ilp_assign,32,131,249,0,1,0,"{'ok': True, 'value': 131, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5702ca779dc34bb6970187122c2630fb-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/5702ca779dc34bb6970187122c2630fb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 131 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 131\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 131 - took 0.00 seconds\nCbc0012I Integer solution of 131 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 131, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 131 to 131\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                131.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 131.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16204142570495605}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[95, 38, 11, 82, 45, 22, 4], [7, 86, 44, 43, 86, 93, 62], [79, 82, 3, 50, 7, 92, 94], [40, 31, 96, 90, 31, 75, 64], [55, 96, 76, 27, 71, 69, 74], [94, 36, 23, 42, 31, 68, 17], [22, 81, 20, 21, 71, 76, 94]]"
448,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09251809120178223}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbba""
T = ""ada"""
449,rod,4,36,18,0,2,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08796048164367676}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 2, 9, 7]"
450,add,8,37132328,37132328,1,37132328,1,"{'ok': True, 'value': 37132328, 'stdout': '37132328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09015154838562012}",1,Compute: 11838115 + 25294213
451,add,8,93725971,,0,93725971,1,"{'ok': True, 'value': 93725971, 'stdout': '93725971\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0839235782623291}",1,Compute: 67668508 + 26057463
452,add,4,5744,5744,1,5744,1,"{'ok': True, 'value': 5744, 'stdout': '5744\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08276915550231934}",1,Compute: 4365 + 1379
453,ilp_assign,8,39,36,0,76,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39135098457336426}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 6, 11, 16, 12, 10, 9], [9, 13, 11, 9, 7, 5, 8], [15, 18, 16, 6, 23, 16, 14], [13, 2, 19, 6, 7, 13, 3], [2, 9, 3, 24, 15, 12, 8], [17, 3, 11, 23, 11, 10, 13], [10, 6, 8, 4, 19, 23, 16]]"
454,ilp_assign,8,22,46,0,46,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39064455032348633}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 18, 21, 12, 12, 16, 2], [4, 2, 13, 24, 9, 14, 15], [2, 18, 1, 9, 14, 20, 12], [17, 21, 14, 2, 5, 3, 4], [16, 20, 21, 9, 24, 10, 11], [13, 9, 1, 1, 17, 16, 16], [1, 4, 12, 9, 15, 23, 8]]"
455,rod,32,2624,82,0,1055,0,"{'ok': True, 'value': 2624, 'stdout': '2624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08541536331176758}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [82, 19, 42, 91, 87, 25, 86, 68, 77, 20, 71, 25, 49, 11, 60, 10, 84, 14, 86, 21, 64, 33, 29, 64, 67, 52, 22, 18, 43, 68, 38, 4]"
456,ilp_partition,4,3,1,0,690,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0767822265625}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 6, 10, 11]"
457,rod,4,44,44,1,1,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07266616821289062}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 1, 11, 12]"
458,sub,16,2838569735544884,2838569735544884,1,2838570735544884,0,"{'ok': True, 'value': 2838569735544884, 'stdout': '2838569735544884\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07489609718322754}",1,Compute: 4304328906389609 - 1465759170844725
459,add,2,136,136,1,136,1,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07294797897338867}",1,Compute: 54 + 82
460,rod,2,6,3,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gba3351h/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_gba3351h/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0791006088256836}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 1]"
461,sub,8,5962599,5962599,1,5962599,1,"{'ok': True, 'value': 5962599, 'stdout': '5962599\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0836801528930664}",1,Compute: 27497357 - 21534758
462,ilp_prod,32,319,105,0,108,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/27c8c8348f2b4eb8af56e27830ce50ac-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/27c8c8348f2b4eb8af56e27830ce50ac-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20.2667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1636033058166504}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 22, 17, 95, 33, 4]
consumption (rows=resources) = [[24, 10, 19, 6, 4, 31], [30, 31, 25, 2, 31, 3], [4, 10, 5, 1, 27, 1], [12, 22, 4, 25, 30, 28]]
capacity = [112, 76, 66, 84]
upper_bounds = [3, 3, 3, 3, 3, 3]"
463,mul,8,4025607310001046,376278642,0,403334443000516,0,"{'ok': True, 'value': 4025607310001046, 'stdout': '4025607310001046\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09945249557495117}",1,Compute: 41808738 * 96286267
464,rod,8,120,22,0,30,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07565760612487793}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 1, 23, 10, 22, 16, 2, 16]"
465,rod,16,768,64,0,157,0,"{'ok': True, 'value': 768, 'stdout': '768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08485126495361328}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [48, 24, 26, 37, 24, 36, 2, 15, 41, 41, 8, 24, 11, 48, 10, 11]"
466,rod,32,1376,1050,0,1,0,"{'ok': True, 'value': 1376, 'stdout': '1376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07645392417907715}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [29, 86, 26, 45, 53, 8, 67, 56, 3, 69, 10, 20, 15, 34, 22, 91, 94, 88, 4, 27, 56, 55, 20, 68, 20, 78, 2, 20, 61, 21, 83, 82]"
467,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20140767097473145}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [50, 15, 10, 43, 5, 95, 52, 80, 15, 1, 56, 12, 42, 8, 8, 25, 78, 72, 27, 9, 63, 26, 80, 82]"
468,rod,8,112,23,0,39,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0730597972869873}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 21, 2, 20, 22, 22, 23, 3]"
469,rod,32,1856,1085,0,93,0,"{'ok': True, 'value': 1856, 'stdout': '1856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0768272876739502}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [58, 6, 65, 63, 24, 62, 85, 60, 6, 87, 19, 55, 88, 79, 52, 35, 69, 76, 43, 95, 34, 51, 36, 93, 66, 93, 17, 13, 66, 89, 64, 92]"
470,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08407282829284668}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdc""
T = ""bdca"""
471,mul,2,5040,5040,1,5040,1,"{'ok': True, 'value': 5040, 'stdout': '5040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07808732986450195}",1,Compute: 84 * 60
472,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09279775619506836}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdbcabbadbaddbb""
T = ""dbabcdbddcaacadd"""
473,sub,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07393360137939453}",1,Compute: 23 - 17
474,rod,4,32,16,0,2,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834345817565918}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 2, 6, 3]"
475,ilp_prod,8,83,100,0,2,0,"{'ok': True, 'value': 83, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/af89d08acb4342d384808f55e2d8dc5e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/af89d08acb4342d384808f55e2d8dc5e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 84.3333 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -83 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -83, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -83 to -83\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                83.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n83.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16670608520507812}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 14, 23, 3]
consumption (rows=resources) = [[1, 6, 4, 4], [2, 7, 5, 1], [5, 4, 6, 4], [4, 7, 7, 2]]
capacity = [24, 28, 22, 28]
upper_bounds = [4, 4, 3, 5]"
476,ilp_partition,16,1,1,1,9,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20382905006408691}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 11, 30, 31, 11, 17, 9, 21, 37, 7, 14, 35, 1, 25, 48, 21]"
477,sub,4,4165,4165,1,4165,1,"{'ok': True, 'value': 4165, 'stdout': '4165\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07253670692443848}",1,Compute: 6894 - 2729
478,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07567453384399414}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""da"""
479,ilp_assign,4,11,11,1,28,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38313794136047363}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 2, 1, 5], [4, 10, 10, 2], [1, 1, 1, 11], [8, 7, 11, 8]]"
480,lcs,16,11,7,0,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07648801803588867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabdadccdccbbacb""
T = ""dabdcdcbcabccbbc"""
481,ilp_prod,32,355,1059,0,252,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_cq80lvo7/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_cq80lvo7/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14177823066711426}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [83, 46, 63, 60, 64, 39]
consumption (rows=resources) = [[18, 1, 26, 4, 15, 11], [1, 27, 21, 10, 3, 29], [27, 28, 18, 32, 18, 7], [32, 25, 2, 3, 7, 32]]
capacity = [75, 98, 126, 109]
upper_bounds = [3, 3, 3, 3, 5, 3]"
482,mul,2,1008,1088,0,1024,0,"{'ok': True, 'value': 1008, 'stdout': '1008\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08606410026550293}",1,Compute: 16 * 63
483,ilp_assign,2,8,8,1,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38176965713500977}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6], [2, 3]]"
484,rod,32,1360,1050,0,674,0,"{'ok': True, 'value': 1360, 'stdout': '1360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09175801277160645}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [22, 85, 15, 92, 22, 20, 45, 4, 68, 87, 56, 56, 93, 77, 30, 48, 83, 71, 68, 39, 46, 27, 83, 95, 40, 75, 45, 48, 53, 33, 20, 94]"
485,ilp_assign,8,44,56,0,70,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3851354122161865}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 24, 13, 4, 2, 19, 7], [8, 21, 7, 24, 2, 20, 12], [20, 3, 11, 12, 17, 21, 13], [22, 14, 23, 3, 20, 19, 24], [2, 9, 10, 1, 7, 21, 13], [10, 7, 12, 4, 14, 20, 10], [3, 8, 15, 12, 18, 17, 24]]"
486,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08479452133178711}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 4, 3, 2]"
487,ilp_prod,32,490,1000,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_nskiu26v/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_nskiu26v/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15277981758117676}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [66, 76, 53, 60, 84, 75]
consumption (rows=resources) = [[23, 16, 19, 21, 20, 3], [14, 17, 8, 18, 14, 24], [6, 16, 31, 17, 13, 4], [20, 23, 7, 7, 5, 12]]
capacity = [71, 126, 126, 77]
upper_bounds = [3, 3, 3, 3, 3, 5]"
488,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08158183097839355}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [51, 53, 19, 21, 23, 26, 1, 9, 90, 44, 17, 46, 62, 47, 12, 95, 28, 89, 19, 79, 35, 25, 71, 14]"
489,ilp_assign,4,9,,0,18,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.390216588973999}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 7, 8, 9], [5, 12, 6, 4], [12, 5, 7, 1], [12, 1, 7, 2]]"
490,ilp_prod,8,104,100,0,60,0,"{'ok': True, 'value': 40, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0556a3f76b2b48d0842483f54d85f211-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0556a3f76b2b48d0842483f54d85f211-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 43.2 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -40 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                40.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n40.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15082502365112305}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8, 14, 24]
consumption (rows=resources) = [[1, 5, 3, 5], [8, 1, 7, 3], [6, 4, 1, 3], [1, 3, 5, 1]]
capacity = [22, 30, 19, 27]
upper_bounds = [3, 4, 4, 4]"
491,ilp_prod,8,62,52,0,3,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4c9f8346da234a0093e84268ca792845-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4c9f8346da234a0093e84268ca792845-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18413734436035156}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 12, 8, 14]
consumption (rows=resources) = [[7, 8, 1, 5], [4, 4, 2, 5], [5, 5, 5, 2], [3, 7, 4, 3]]
capacity = [17, 24, 31, 22]
upper_bounds = [3, 3, 5, 3]"
492,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07602596282958984}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddda""
T = ""abac"""
493,ilp_partition,2,0,1,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08917546272277832}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 6, 3]"
494,ilp_partition,16,0,10,0,35,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18685340881347656}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 27, 35, 32, 45, 23, 30, 22, 35, 33, 3, 40, 25, 25, 27, 46]"
495,ilp_assign,32,121,185,0,205,0,"{'ok': True, 'value': 121, 'stdout': '121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36771440505981445}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[69, 66, 5, 46, 33, 69, 60], [52, 82, 36, 27, 83, 55, 54], [4, 33, 53, 68, 78, 31, 61], [75, 15, 18, 76, 71, 69, 36], [10, 53, 91, 24, 68, 6, 29], [81, 20, 7, 33, 51, 93, 91], [44, 36, 7, 84, 72, 6, 71]]"
496,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2032606601715088}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 6, 83, 7, 81, 12, 34, 57, 75, 23, 8, 19, 64, 37, 3, 58, 28, 58, 52, 8, 82, 68, 45, 92]"
497,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09204888343811035}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 9, 9, 8, 10, 4, 6, 8]"
498,sub,16,6080022056888558,3896098177,0,5980022056888558,0,"{'ok': True, 'value': 6080022056888558, 'stdout': '6080022056888558\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0750575065612793}",1,Compute: 7246244489132158 - 1166222432243600
499,add,8,86470211,83470211,0,86469211,0,"{'ok': True, 'value': 86470211, 'stdout': '86470211\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07776165008544922}",1,Compute: 74585325 + 11884886
500,knap,8,128,110,0,1,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08821487426757812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 10, 3, 4, 11, 15, 3, 7]
V = [1, 8, 20, 27, 32, 26, 19, 30]
C = 34"
501,sub,32,56757266243267648738541462215413,1,0,56757266243267648738541462215413,1,"{'ok': True, 'value': 56757266243267648738541462215413, 'stdout': '56757266243267648738541462215413\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07355141639709473}",1,Compute: 73020291699448127462292406733514 - 16263025456180478723750944518101
502,ilp_prod,8,97,62,0,3,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/dbe93abed8da4fedb499288bee2955b1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/dbe93abed8da4fedb499288bee2955b1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1513063907623291}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 22, 9, 14]
consumption (rows=resources) = [[7, 1, 2, 5], [3, 7, 4, 5], [1, 1, 8, 2], [1, 1, 5, 8]]
capacity = [27, 32, 24, 19]
upper_bounds = [3, 4, 3, 3]"
503,mul,4,43861728,858,0,43249088,0,"{'ok': True, 'value': 43861728, 'stdout': '43861728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07087135314941406}",1,Compute: 7923 * 5536
504,ilp_partition,2,1,0,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09215259552001953}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 1, 1, 6]"
505,rod,32,1888,1055,0,1,0,"{'ok': True, 'value': 1888, 'stdout': '1888\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0822594165802002}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [59, 6, 91, 90, 96, 33, 47, 36, 7, 64, 14, 81, 79, 35, 40, 65, 27, 8, 48, 63, 49, 83, 22, 50, 17, 88, 53, 30, 91, 1, 75, 55]"
506,ilp_prod,32,340,1085,0,6,0,"{'ok': True, 'value': 70, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0f79722360f4409eb62dad14cc451290-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0f79722360f4409eb62dad14cc451290-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 28 COLUMNS\nAt line 185 RHS\nAt line 209 BOUNDS\nAt line 216 ENDATA\nProblem MODEL has 23 rows, 6 columns and 138 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 79.8438 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -70 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                70.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n70.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15891289710998535}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [35, 79, 6, 59, 74, 55]
consumption (rows=resources) = [[4, 25, 25, 14, 1, 23], [32, 32, 17, 2, 24, 12], [30, 24, 26, 26, 19, 4], [19, 13, 15, 9, 15, 18]]
capacity = [94, 89, 111, 73]
upper_bounds = [3, 3, 3, 4, 3, 4]"
507,ilp_prod,8,90,102,0,6,0,"{'ok': True, 'value': 90, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4b04f95712e24d1f932ebf6c3b5e6075-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4b04f95712e24d1f932ebf6c3b5e6075-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 90.4 - 0.00 seconds\nCgl0004I processed model has 3 rows, 4 columns (4 integer (0 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -90 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -90, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -90 to -90\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                90.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n90.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17169570922851562}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 12, 4, 19]
consumption (rows=resources) = [[6, 1, 3, 3], [1, 8, 5, 6], [3, 2, 1, 1], [4, 2, 6, 7]]
capacity = [27, 28, 27, 18]
upper_bounds = [4, 3, 3, 3]"
508,knap,16,406,152,0,1,0,"{'ok': True, 'value': 406, 'stdout': '406\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08853721618652344}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 17, 17, 24, 1, 23, 24, 19, 9, 27, 30, 5, 19, 32, 26, 30]
V = [1, 54, 16, 26, 53, 33, 29, 15, 52, 60, 5, 35, 37, 27, 53, 17]
C = 152"
509,lcs,32,17,10,0,1,0,"{'ok': True, 'value': 17, 'stdout': 'LCS: acbaaadccaddbadcc\nLength of LCS:  17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07390570640563965}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadddcdbaaadccbcdacddbbcabdccaca""
T = ""acabdacbabbbcadccaaddbdadcdcbbb"""
510,knap,32,1550,1024,0,3,0,"{'ok': True, 'value': 1550, 'stdout': '1550\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07773065567016602}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 22, 13, 42, 2, 20, 46, 47, 64, 33, 6, 16, 37, 58, 46, 6, 62, 47, 1, 13, 3, 11, 36, 9, 31, 36, 27, 52, 26, 44, 1, 35]
V = [16, 44, 4, 90, 65, 122, 75, 105, 70, 123, 74, 9, 76, 4, 25, 86, 29, 60, 6, 71, 82, 110, 1, 3, 123, 107, 17, 1, 2, 18, 95, 20]
C = 452"
511,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20578718185424805}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 48, 22, 33, 30, 34, 16, 11, 17, 10, 19, 31, 22, 44, 25, 26]"
512,rod,32,2880,1055,0,659,0,"{'ok': True, 'value': 2880, 'stdout': '2880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10079669952392578}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [90, 82, 68, 65, 33, 82, 68, 41, 31, 72, 74, 20, 87, 31, 34, 88, 84, 71, 46, 64, 28, 66, 51, 25, 57, 80, 35, 31, 61, 47, 27, 90]"
513,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07395768165588379}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [89, 26, 72, 30, 71, 54, 22, 68, 72, 26, 53, 25, 93, 78, 62, 4, 82, 95, 29, 35, 86, 2, 85, 21]"
514,rod,8,54,25,0,1,0,"{'ok': True, 'value': 54, 'stdout': '54\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07562470436096191}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 12, 21, 10, 3, 17, 9, 22]"
515,mul,2,900,900,1,900,1,"{'ok': True, 'value': 900, 'stdout': '900\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07388472557067871}",1,Compute: 75 * 12
516,lcs,16,8,6,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08396410942077637}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacacadcadbbbbda""
T = ""dabaadaacaccbab"""
517,ilp_partition,16,0,10,0,24,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21196889877319336}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 17, 5, 25, 34, 10, 24, 16, 10, 46, 22, 28, 18, 25, 32, 40]"
518,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08181977272033691}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbd""
T = ""aab"""
519,ilp_partition,8,1,106,0,5,0,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08638811111450195}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 18, 15, 24, 15, 7, 18, 5]"
520,add,2,166,166,1,166,1,"{'ok': True, 'value': 166, 'stdout': '166\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08389878273010254}",1,Compute: 72 + 94
521,ilp_partition,8,0,1,0,13,0,"{'ok': True, 'value': 84, 'stdout': '84\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09024238586425781}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 23, 13, 14, 13, 16, 8, 17]"
522,rod,32,2624,1050,0,1,0,"{'ok': True, 'value': 2624, 'stdout': '2624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07310819625854492}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [82, 59, 50, 88, 45, 58, 22, 64, 36, 89, 6, 13, 16, 73, 91, 72, 50, 18, 82, 57, 15, 65, 20, 10, 39, 36, 71, 8, 61, 39, 87, 40]"
523,add,2,76,76,1,76,1,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08321571350097656}",1,Compute: 20 + 56
524,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07386565208435059}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbda""
T = ""ddcab"""
525,ilp_partition,16,1,1,1,32,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1917126178741455}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 33, 42, 8, 6, 42, 28, 30, 33, 8, 2, 32, 32, 26, 34, 27]"
526,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08080363273620605}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaab""
T = ""adcb"""
527,knap,32,1787,1047,0,8,0,"{'ok': True, 'value': 1787, 'stdout': '1787\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08042120933532715}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 59, 14, 27, 26, 31, 24, 50, 56, 34, 1, 57, 4, 17, 40, 8, 64, 43, 49, 12, 13, 37, 43, 24, 55, 60, 18, 56, 18, 9, 10, 9]
V = [109, 65, 128, 86, 85, 19, 14, 26, 4, 115, 113, 103, 67, 112, 9, 86, 97, 39, 88, 34, 48, 17, 126, 25, 15, 5, 128, 98, 8, 43, 101, 20]
C = 495"
528,lcs,4,3,3,1,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07311034202575684}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabd""
T = ""caddd"""
529,ilp_prod,2,30,26,0,20,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0ecf4bd99e204960a9227165f20ce138-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0ecf4bd99e204960a9227165f20ce138-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -6 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n6.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.158355712890625}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[1, 3], [2, 1]]
capacity = [7, 10]
upper_bounds = [5, 3]"
530,sub,8,44351987,44351987,1,44351987,1,"{'ok': True, 'value': 44351987, 'stdout': '44351987\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08094310760498047}",1,Compute: 68095561 - 23743574
531,ilp_partition,32,0,10,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.041867971420288}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [67, 88, 39, 27, 3, 1, 58, 9, 70, 57, 33, 23, 28, 70, 28, 78, 64, 83, 78, 36, 30, 29, 6, 51]"
532,ilp_assign,16,47,118,0,114,0,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3665201663970947}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 4, 4, 2, 18, 9, 27], [7, 30, 35, 36, 7, 19, 10], [45, 1, 48, 30, 37, 15, 6], [39, 23, 4, 12, 31, 1, 43], [14, 18, 23, 45, 42, 41, 31], [4, 8, 35, 38, 40, 9, 26], [10, 5, 28, 16, 47, 39, 36]]"
533,ilp_prod,16,186,169,0,44,0,"{'ok': True, 'value': 162, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/082497b7973f4bdd860d3f60db8a2aec-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/082497b7973f4bdd860d3f60db8a2aec-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 185.625 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -162 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                162.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n162.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16157817840576172}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 6, 22, 41, 34, 21]
consumption (rows=resources) = [[8, 5, 3, 8, 13, 1], [1, 12, 5, 9, 9, 5], [15, 13, 2, 16, 3, 10], [16, 4, 2, 12, 15, 7]]
capacity = [55, 39, 43, 44]
upper_bounds = [3, 3, 7, 3, 3, 4]"
534,rod,16,736,155,0,46,0,"{'ok': True, 'value': 736, 'stdout': '736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07328915596008301}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [46, 24, 32, 23, 21, 5, 34, 32, 9, 31, 28, 35, 38, 16, 40, 39]"
535,ilp_assign,4,13,10,0,18,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36665844917297363}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1, 7, 3], [5, 6, 3, 8], [6, 11, 5, 9], [5, 2, 10, 3]]"
536,knap,32,1774,1043,0,41,0,"{'ok': True, 'value': 1774, 'stdout': '1774\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08373475074768066}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 47, 23, 58, 47, 62, 5, 27, 5, 9, 17, 52, 39, 62, 41, 39, 12, 20, 25, 3, 25, 23, 11, 29, 44, 35, 14, 41, 52, 42, 14, 43]
V = [105, 13, 90, 100, 58, 81, 125, 54, 125, 57, 46, 127, 83, 44, 71, 88, 81, 53, 111, 111, 28, 16, 54, 46, 118, 4, 3, 103, 122, 26, 35, 115]
C = 487"
537,lcs,16,11,6,0,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07345366477966309}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcccbaaacdbabdb""
T = ""abdbdadacbabddb"""
538,sub,4,3827,3827,1,3827,1,"{'ok': True, 'value': 3827, 'stdout': '3827\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07523775100708008}",1,Compute: 6536 - 2709
539,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6n2px0iw/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_6n2px0iw/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08442163467407227}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
540,add,32,48723382937949884221869545405998,6,0,48723382937959884221869545205998,0,"{'ok': True, 'value': 48723382937949884221869545405998, 'stdout': '48723382937949884221869545405998\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0832817554473877}",1,Compute: 26213037763288974269849909807556 + 22510345174660909952019635598442
541,ilp_prod,8,70,105,0,4,0,"{'ok': True, 'value': 66, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2accefebc3a34ad99c781fb7830cdf1c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2accefebc3a34ad99c781fb7830cdf1c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 66 - 0.00 seconds\nCgl0004I processed model has 5 rows, 4 columns (4 integer (0 of which binary)) and 20 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -66 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -66, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -66 to -66\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                66.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n66.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19139623641967773}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 21, 3, 13]
consumption (rows=resources) = [[6, 3, 8, 5], [2, 1, 5, 5], [3, 7, 4, 2], [6, 8, 5, 3]]
capacity = [22, 24, 27, 20]
upper_bounds = [3, 3, 3, 4]"
542,ilp_assign,32,182,150,0,36,0,"{'ok': True, 'value': 182, 'stdout': '182\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3957998752593994}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[65, 88, 28, 53, 12, 41, 50], [5, 89, 77, 69, 61, 95, 84], [60, 73, 38, 93, 76, 61, 23], [34, 36, 16, 58, 37, 76, 19], [57, 92, 85, 81, 84, 59, 93], [75, 57, 88, 42, 64, 6, 14], [84, 39, 74, 64, 56, 67, 36]]"
543,ilp_assign,32,190,187,0,The actual minimum total cost is calculated during the execution of the program.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_e53dl9a2/main.py"", line 14, in <module>\n    prob += lpSum([C[i][j] * x[i][j] for i in range(n) for j in range(n)])\n  File ""/tmp/cot_exec_e53dl9a2/main.py"", line 14, in <listcomp>\n    prob += lpSum([C[i][j] * x[i][j] for i in range(n) for j in range(n)])\nTypeError: \'ellipsis\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.13974571228027344}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 21, 6, 86, 25, 58, 58], [9, 35, 1, 80, 58, 31, 92], [92, 73, 63, 74, 38, 72, 90], [74, 72, 58, 25, 81, 24, 26], [48, 74, 69, 57, 57, 62, 60], [51, 68, 78, 83, 53, 45, 69], [2, 51, 78, 52, 81, 61, 46]]"
544,add,32,109413954454907442533833907107779,64171471111111111111111111111111,0,109413364454907402574833907107779,0,"{'ok': True, 'value': 109413954454907442533833907107779, 'stdout': '109413954454907442533833907107779\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09272360801696777}",1,Compute: 85903830418953546984782730676974 + 23510124035953895549051176430805
545,rod,16,368,13,0,64,0,"{'ok': True, 'value': 368, 'stdout': '368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0825960636138916}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [23, 31, 6, 35, 8, 14, 1, 16, 46, 45, 21, 34, 16, 47, 44, 6]"
546,add,16,16866821083507776,16866821083507776,1,16866821083507776,1,"{'ok': True, 'value': 16866821083507776, 'stdout': '16866821083507776\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10680580139160156}",1,Compute: 9021547950968951 + 7845273132538825
547,mul,8,5549392192602490,54893412000,0,546384433391690,0,"{'ok': True, 'value': 5549392192602490, 'stdout': '5549392192602490\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07410025596618652}",1,Compute: 61848734 * 89725235
548,ilp_prod,4,22,33,0,18,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b58841cd3da74201bd231c6167c27d6e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b58841cd3da74201bd231c6167c27d6e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 13.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14800667762756348}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 11, 7]
consumption (rows=resources) = [[1, 3, 3], [4, 4, 4], [3, 4, 1]]
capacity = [11, 9, 12]
upper_bounds = [3, 3, 3]"
549,mul,8,2097878358291960,3308,0,21583848519200,0,"{'ok': True, 'value': 2097878358291960, 'stdout': '2097878358291960\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0912923812866211}",1,Compute: 90945277 * 23067480
550,rod,2,12,6,0,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08299756050109863}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 3]"
551,knap,16,509,108,0,-1,0,"{'ok': True, 'value': 509, 'stdout': '509\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07504940032958984}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 27, 3, 3, 6, 15, 4, 17, 29, 32, 12, 27, 19, 4, 9]
V = [40, 54, 10, 53, 50, 41, 8, 55, 52, 61, 5, 2, 47, 44, 9, 50]
C = 108"
552,rod,8,112,30,0,1,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08333849906921387}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 5, 24, 18, 2, 22, 5, 17]"
553,ilp_assign,2,6,5,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38814878463745117}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 6], [2, 3]]"
554,rod,8,96,30,0,1,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07434344291687012}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 21, 7, 16, 9, 16, 16, 3]"
555,add,16,9855549388448215,1,0,9855555388448215,0,"{'ok': True, 'value': 9855549388448215, 'stdout': '9855549388448215\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06743645668029785}",1,Compute: 6090977626425107 + 3764571762023108
556,sub,32,58363089638593441391142346294278,58361099638593441391142046304278,0,58363089638593441371142346294278,0,"{'ok': True, 'value': 58363089638593441391142346294278, 'stdout': '58363089638593441391142346294278\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08421182632446289}",1,Compute: 86559781705164339115198743503066 - 28196692066570897724056397208788
557,rod,8,112,1,0,1,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08806943893432617}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 21, 20, 7, 17, 7, 5, 15]"
558,ilp_prod,2,15,35,0,9,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c1e88142252b4cf6821fd989aa151043-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c1e88142252b4cf6821fd989aa151043-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 12.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15812182426452637}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[2, 2], [3, 3]]
capacity = [9, 9]
upper_bounds = [3, 3]"
559,ilp_partition,8,0,1,0,10,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07434654235839844}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 2, 21, 16, 24, 2, 11, 10]"
560,rod,4,28,15,0,4,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07700634002685547}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 5, 3, 9]"
561,ilp_partition,2,1,1,1,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07330656051635742}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 2, 6]"
562,ilp_assign,4,13,18,0,18,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38486480712890625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 2, 5, 7], [6, 1, 7, 11], [5, 8, 12, 9], [4, 2, 11, 2]]"
563,add,4,11279,4727,0,11279,1,"{'ok': True, 'value': 11279, 'stdout': '11279\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0774071216583252}",1,Compute: 4005 + 7274
564,add,8,78253504,78253484,0,78253504,1,"{'ok': True, 'value': 78253504, 'stdout': '78253504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07446575164794922}",1,Compute: 63716818 + 14536686
565,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08289027214050293}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcdaaddaacaaddcbdccaccabbddbaba""
T = ""cbaacdddcbddcdddcdbdadbabaabdaba"""
566,mul,8,474788365397864,285717684433384,0,47238885993984,0,"{'ok': True, 'value': 474788365397864, 'stdout': '474788365397864\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08126401901245117}",1,Compute: 28383284 * 16727746
567,add,8,124003683,124003683,1,124003683,1,"{'ok': True, 'value': 124003683, 'stdout': '124003683\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0741279125213623}",1,Compute: 97068132 + 26935551
568,add,8,107752758,107752758,1,107752758,1,"{'ok': True, 'value': 107752758, 'stdout': '107752758\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08778619766235352}",1,Compute: 26728812 + 81023946
569,knap,2,12,11,0,0,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07439613342285156}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 1]
V = [4, 2, 8]
C = 4"
570,sub,32,26904365203012423272232022490283,37761260205243302032222062490223,0,12063227780256531950851560488821,0,"{'ok': True, 'value': 26904365203012423272232022490283, 'stdout': '26904365203012423272232022490283\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07082056999206543}",1,Compute: 38967592983268955223083582979104 - 12063227780256531950851560488821
571,mul,4,13188373,362,0,12934923,0,"{'ok': True, 'value': 13188373, 'stdout': '13188373\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0735025405883789}",1,Compute: 9427 * 1399
572,mul,16,14499392905692668563452566158708,83415732471190304,0,1466070456684369056466646556464646,0,"{'ok': True, 'value': 14499392905692668563452566158708, 'stdout': '14499392905692668563452566158708\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0724029541015625}",1,Compute: 1711297061448202 * 8472750425587954
573,mul,8,4477700222734548,7335116168,0,4488484481886,0,"{'ok': True, 'value': 4477700222734548, 'stdout': '4477700222734548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08687329292297363}",1,Compute: 96467307 * 46416764
574,ilp_assign,16,88,105,0,114,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38384556770324707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5, 28, 43, 23, 16, 20], [14, 28, 6, 16, 4, 20, 39], [31, 48, 9, 28, 14, 9, 45], [31, 45, 28, 25, 9, 33, 47], [31, 36, 32, 47, 36, 17, 35], [10, 27, 6, 30, 36, 34, 19], [33, 31, 4, 27, 15, 48, 31]]"
575,mul,4,23521050,50,0,23489250,0,"{'ok': True, 'value': 23521050, 'stdout': '23521050\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07427573204040527}",1,Compute: 8253 * 2850
576,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07704496383666992}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcba""
T = ""dab"""
577,add,32,142839237575673267046641115782812,142139238675653267046640125782812,0,142839237575673267046641115782812,1,"{'ok': True, 'value': 142839237575673267046641115782812, 'stdout': '142839237575673267046641115782812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07779979705810547}",1,Compute: 53914257897664067162644290848459 + 88924979678009199883996824934353
578,ilp_prod,4,36,35,0,34,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_s_mgowb5/main.py"", line 10, in <module>\n    prob += lpSum([4*x[0] + 7*x[1] + 11*x[2] for x in x.values()])\n  File ""/tmp/cot_exec_s_mgowb5/main.py"", line 10, in <listcomp>\n    prob += lpSum([4*x[0] + 7*x[1] + 11*x[2] for x in x.values()])\nTypeError: \'LpVariable\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14868450164794922}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 7, 11]
consumption (rows=resources) = [[4, 3, 4], [4, 4, 2], [1, 1, 2]]
capacity = [14, 13, 8]
upper_bounds = [3, 3, 3]"
579,ilp_prod,4,69,73,0,48,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0c94c5f54c604bd18db6050018e46069-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0c94c5f54c604bd18db6050018e46069-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 54 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -48 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15181827545166016}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 10, 7]
consumption (rows=resources) = [[2, 4, 1], [2, 2, 1], [2, 1, 1]]
capacity = [16, 12, 9]
upper_bounds = [4, 4, 9]"
580,ilp_partition,2,1,0,0,3,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09117436408996582}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 3, 5]"
581,ilp_prod,32,292,The solution to the problem is the maximum profit that can be obtained while satisfying the resource constraints.,0,636,0,"{'ok': True, 'value': 156, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/53a91b397f664137a166ad57b848e871-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/53a91b397f664137a166ad57b848e871-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 66 RHS\nAt line 73 BOUNDS\nAt line 80 ENDATA\nProblem MODEL has 6 rows, 6 columns and 36 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 172.774 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -156 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                156.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n156.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14493894577026367}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [52, 39, 23, 41, 86, 80]
consumption (rows=resources) = [[15, 31, 9, 7, 8, 14], [31, 8, 22, 30, 32, 20], [1, 17, 30, 9, 29, 21], [30, 30, 9, 20, 31, 17]]
capacity = [106, 103, 82, 87]
upper_bounds = [3, 3, 3, 3, 3, 3]"
582,lcs,2,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0746450424194336}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""ba"""
583,lcs,8,5,5,1,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07187843322753906}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcabcdb""
T = ""dadaabcd"""
584,ilp_prod,32,812,0,0,118,0,"{'ok': True, 'value': 812, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7cd44bfddadf4c6890a4cd727e35b998-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7cd44bfddadf4c6890a4cd727e35b998-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 835.039 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -720 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -812 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 6\nCbc0013I At root node, 1 cuts changed objective from -835.0393 to -812 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 3 row cuts average 2.0 elements, 4 column cuts (4 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -812, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -835.039 to -812\nProbing was tried 3 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                812.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n812.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15089893341064453}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [90, 92, 11, 84, 3, 4]
consumption (rows=resources) = [[24, 13, 12, 9, 12, 5], [19, 2, 16, 19, 16, 2], [9, 3, 26, 19, 3, 31], [17, 9, 19, 9, 9, 5]]
capacity = [110, 66, 74, 118]
upper_bounds = [3, 8, 3, 3, 4, 3]"
585,rod,8,42,22,0,1,0,"{'ok': True, 'value': 42, 'stdout': '42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08648514747619629}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 9, 15, 21, 6, 23, 19, 3]"
586,ilp_assign,16,52,105,0,115,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37493133544921875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 37, 16, 46, 21, 30, 5], [9, 7, 46, 16, 4, 8, 26], [14, 29, 4, 19, 34, 42, 44], [17, 46, 48, 19, 20, 9, 30], [20, 34, 33, 3, 2, 44, 33], [47, 26, 28, 2, 26, 30, 48], [31, 48, 48, 17, 6, 38, 19]]"
587,ilp_prod,8,51,59,0,39,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b49f0640eb354a76923b391ec37fd400-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b49f0640eb354a76923b391ec37fd400-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14954233169555664}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3, 7, 17]
consumption (rows=resources) = [[6, 7, 3, 6], [4, 8, 8, 7], [8, 1, 3, 7], [7, 3, 7, 8]]
capacity = [27, 32, 22, 25]
upper_bounds = [3, 3, 3, 3]"
588,mul,2,1428,28,0,5,0,"{'ok': True, 'value': 1428, 'stdout': '1428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07929062843322754}",1,Compute: 51 * 28
589,rod,16,512,64,0,64,0,"{'ok': True, 'value': 512, 'stdout': '512\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08972811698913574}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [32, 43, 14, 9, 29, 12, 38, 20, 30, 35, 7, 39, 25, 45, 29, 28]"
590,ilp_assign,8,32,36,0,46,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4238770008087158}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 5, 17, 3, 2, 7, 16], [7, 5, 22, 8, 16, 14, 21], [11, 6, 8, 1, 6, 15, 10], [23, 13, 16, 11, 7, 14, 3], [23, 10, 14, 12, 15, 9, 7], [14, 7, 2, 5, 1, 21, 9], [10, 13, 16, 6, 24, 22, 6]]"
591,add,4,6019,6019,1,6019,1,"{'ok': True, 'value': 6019, 'stdout': '6019\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07336044311523438}",1,Compute: 1146 + 4873
592,sub,8,17580796,17580806,0,17580806,0,"{'ok': True, 'value': 17580796, 'stdout': '17580796\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09444499015808105}",1,Compute: 76872749 - 59291953
593,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07514190673828125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabadcbadcabbabb""
T = ""ababccbbcdacaabcc"""
594,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07370567321777344}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""bc"""
595,ilp_prod,4,27,45,0,10,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2225900fdd7f4341a7d00faa87036edc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2225900fdd7f4341a7d00faa87036edc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15652060508728027}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 9, 5]
consumption (rows=resources) = [[2, 2, 4], [4, 3, 1], [4, 3, 1]]
capacity = [9, 15, 10]
upper_bounds = [3, 3, 3]"
596,mul,2,264,264,1,264,1,"{'ok': True, 'value': 264, 'stdout': '264\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08360767364501953}",1,Compute: 22 * 12
597,knap,16,428,116,0,6,0,"{'ok': True, 'value': 428, 'stdout': '428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07282090187072754}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 23, 6, 32, 25, 13, 9, 16, 24, 23, 13, 3, 12, 19, 5, 4]
V = [14, 32, 59, 34, 63, 44, 8, 14, 6, 27, 6, 59, 41, 5, 42, 60]
C = 116"
598,ilp_assign,4,16,12,0,27,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38706493377685547}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 7, 8, 10], [7, 2, 8, 6], [7, 12, 2, 8], [9, 1, 3, 10]]"
599,sub,2,36,36,1,36,1,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08982610702514648}",1,Compute: 72 - 36
600,ilp_prod,16,166,100,0,252,0,"{'ok': True, 'value': 129, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/29f21f300cd0454485c00ade4373e143-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/29f21f300cd0454485c00ade4373e143-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 17 COLUMNS\nAt line 108 RHS\nAt line 121 BOUNDS\nAt line 128 ENDATA\nProblem MODEL has 12 rows, 6 columns and 72 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 137.6 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -129 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                129.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n129.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.148512601852417}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [43, 4, 17, 20, 22, 40]
consumption (rows=resources) = [[5, 10, 10, 15, 10, 16], [2, 14, 5, 6, 12, 16], [6, 2, 4, 7, 10, 5], [14, 15, 14, 9, 15, 8]]
capacity = [55, 52, 63, 48]
upper_bounds = [3, 3, 3, 3, 3, 3]"
601,ilp_prod,16,243,168,0,204,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_dji2koeo/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_dji2koeo/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14655613899230957}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 45, 28, 23, 5, 24]
consumption (rows=resources) = [[5, 16, 13, 3, 9, 7], [16, 5, 5, 1, 7, 6], [6, 6, 14, 11, 8, 8], [5, 8, 6, 9, 16, 16]]
capacity = [64, 46, 57, 63]
upper_bounds = [3, 4, 4, 5, 3, 3]"
602,lcs,16,8,6,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07502508163452148}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbdcdbdabcacdcc""
T = ""bdaccacdbddaaab"""
603,mul{'ok': True, 'value': 71693101300709638560550623482844, 'stdout': '71693101300709638560550623482844\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07271504402160645}",1,Compute: 8970414908790372 * 7992172271814927
604,add,8,147213365,147213365,1,147913365,0,"{'ok': True, 'value': 147213365, 'stdout': '147213365\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07501220703125}",1,Compute: 63917606 + 83295759
605,ilp_assign,4,24,22,0,36,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4231226444244385}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 10, 12, 12], [2, 7, 6, 12], [8, 2, 10, 4], [5, 9, 8, 9]]"
606,knap,32,1917,2058,0,37,0,"{'ok': True, 'value': 1917, 'stdout': '1917\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08288192749023438}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 30, 32, 6, 49, 9, 48, 21, 14, 57, 44, 4, 63, 37, 29, 53, 56, 6, 23, 2, 40, 32, 7, 36, 55, 41, 51, 59, 5, 22, 40, 57]
V = [92, 104, 52, 56, 38, 22, 111, 5, 128, 67, 125, 77, 103, 84, 6, 113, 120, 106, 105, 105, 109, 105, 104, 71, 24, 24, 62, 91, 59, 89, 51, 96]
C = 525"
607,knap,8,83,102,0,14,0,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07547330856323242}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 10, 9, 2, 15, 11, 11, 4]
V = [14, 14, 14, 28, 3, 6, 7, 20]
C = 38"
608,ilp_partition,4,1,1,1,23,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09357738494873047}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 3, 7, 2]"
609,add,4,8146,8146,1,8146,1,"{'ok': True, 'value': 8146, 'stdout': '8146\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07606172561645508}",1,Compute: 5182 + 2964
610,ilp_partition,8,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07516646385192871}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 10, 18, 2, 21, 2, 2, 23]"
611,lcs,4,1,3,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07331538200378418}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcb""
T = ""bca"""
612,ilp_prod,8,60,239,0,3,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d58ff0f487e741ebaeb9e5da7dd31c4b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d58ff0f487e741ebaeb9e5da7dd31c4b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15176653861999512}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 10, 10, 9]
consumption (rows=resources) = [[3, 7, 3, 4], [7, 7, 3, 3], [5, 6, 1, 8], [7, 8, 1, 5]]
capacity = [29, 18, 19, 23]
upper_bounds = [3, 3, 6, 3]"
613,add,16,14817654432820063,19054785654791909,0,14817654432820063,1,"{'ok': True, 'value': 14817654432820063, 'stdout': '14817654432820063\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07399678230285645}",1,Compute: 8101798694579273 + 6715855738240790
614,sub,8,28429567,28429567,1,28429567,1,"{'ok': True, 'value': 28429567, 'stdout': '28429567\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0825967788696289}",1,Compute: 46785243 - 18355676
615,mul,16,31419679281790770084945338965139,314218067044537217422018,0,31384255166690648305558436355175289,0,"{'ok': True, 'value': 31419679281790770084945338965139, 'stdout': '31419679281790770084945338965139\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07483029365539551}",1,Compute: 9057750742435859 * 3468816947521921
616,mul{'ok': True, 'value': 1748560180893972689680401143315117405386215817333444730843336232, 'stdout': '1748560180893972689680401143315117405386215817333444730843336232\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0750732421875}",1,Compute: 27644391988938330463498087382708 * 63251895053204434748156105677554
617,rod,2,8,5,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09488868713378906}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
618,mul{'ok': True, 'value': 74779314345162296972155427943840, 'stdout': '74779314345162296972155427943840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06892943382263184}",1,Compute: 8144771951383280 * 9181265576436678
619,knap,8,115,100,0,0,0,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06718850135803223}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 2, 2, 6, 13, 16, 2, 6]
V = [2, 15, 19, 13, 12, 29, 27, 25]
C = 30"
620,rod,16,704,65,0,155,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07488393783569336}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 30, 40, 44, 18, 21, 19, 33, 31, 23, 44, 11, 8, 33, 10, 23]"
621,ilp_assign,32,113,114,0,140,0,"{'ok': True, 'value': 113, 'stdout': '113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3697667121887207}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[68, 32, 30, 4, 93, 2, 31], [39, 93, 41, 27, 36, 40, 58], [85, 53, 90, 70, 34, 30, 51], [27, 19, 27, 15, 35, 93, 3], [15, 26, 21, 93, 85, 46, 40], [29, 20, 61, 82, 27, 46, 30], [31, 7, 12, 7, 18, 2, 58]]"
622,ilp_prod,8,90,60,0,2,0,"{'ok': True, 'value': 90, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cc6a8a69b28540879379a4044be1d549-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cc6a8a69b28540879379a4044be1d549-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 96.1765 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 2.9999\nCbc0012I Integer solution of -87 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -90 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -95 to -90 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -90, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -95 to -90\nProbing was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                90.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n90.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14713048934936523}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 12, 21, 3]
consumption (rows=resources) = [[6, 3, 4, 7], [3, 3, 3, 8], [5, 1, 6, 4], [8, 1, 7, 8]]
capacity = [20, 25, 23, 25]
upper_bounds = [3, 6, 3, 3]"
623,sub,4,1300,1300,1,-1300,0,"{'ok': True, 'value': 1300, 'stdout': '1300\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07186198234558105}",1,Compute: 9210 - 7910
624,ilp_assign,16,65,105,0,114,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43139028549194336}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 8, 32, 16, 11, 15, 37], [26, 10, 46, 17, 38, 22, 29], [22, 9, 23, 41, 1, 15, 18], [41, 7, 21, 9, 20, 44, 12], [22, 15, 18, 19, 13, 48, 30], [8, 21, 15, 38, 41, 2, 39], [7, 19, 28, 5, 19, 13, 14]]"
625,rod,4,44,22,0,1,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07267093658447266}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 9, 8, 1]"
626,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07473421096801758}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""d"""
627,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0851585865020752}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [31, 58, 89, 85, 52, 5, 96, 51, 29, 63, 76, 56, 59, 42, 29, 51, 51, 49, 76, 51, 48, 51, 8, 51]"
628,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_e8u1q4tn/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_e8u1q4tn/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07601523399353027}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
629,ilp_partition,8,1,1,1,20,0,"{'ok': True, 'value': 53, 'stdout': '53\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08646655082702637}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 10, 9, 5, 1, 23, 6, 20]"
630,sub,8,13312595,13312595,1,13312595,1,"{'ok': True, 'value': 13312595, 'stdout': '13312595\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07894635200500488}",1,Compute: 57087174 - 43774579
631,ilp_prod,16,161,209,0,207,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_vf7m17wu/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17521238327026367}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [37, 11, 14, 48, 36, 24]
consumption (rows=resources) = [[13, 4, 1, 7, 14, 15], [3, 14, 10, 14, 10, 3], [11, 1, 4, 15, 1, 5], [10, 14, 3, 15, 14, 2]]
capacity = [32, 55, 56, 60]
upper_bounds = [3, 3, 5, 3, 3, 3]"
632,add,16,12294656891175801,32222222222222222,0,12324657891175897,0,"{'ok': True, 'value': 12294656891175801, 'stdout': '12294656891175801\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07782340049743652}",1,Compute: 3991596123853097 + 8303060767322704
633,ilp_partition,8,0,1,0,22,0,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07477712631225586}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 5, 5, 17, 23, 15, 19, 22]"
634,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.30369067192077637}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 16, 41, 16, 2, 22, 48, 18, 27, 26, 1, 27, 36, 43, 39, 14]"
635,add,8,141409360,141409360,1,141417360,0,"{'ok': True, 'value': 141409360, 'stdout': '141409360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08442544937133789}",1,Compute: 48318376 + 93090984
636,ilp_assign,4,15,0,0,15,1,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3734400272369385}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 10, 12, 1], [4, 7, 7, 12], [5, 5, 1, 5], [12, 9, 10, 8]]"
637,knap,32,1695,458,0,6,0,"{'ok': True, 'value': 1695, 'stdout': '1695\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0880117416381836}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [54, 39, 5, 4, 14, 15, 6, 33, 6, 10, 59, 6, 3, 51, 9, 44, 64, 43, 64, 13, 62, 12, 3, 41, 5, 8, 61, 49, 63, 33, 7, 31]
V = [31, 115, 13, 88, 3, 31, 65, 74, 20, 9, 110, 30, 114, 89, 106, 47, 53, 36, 99, 98, 18, 113, 113, 92, 50, 44, 25, 109, 108, 94, 50, 10]
C = 458"
638,ilp_assign,2,3,7,0,7,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39421772956848145}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [2, 6]]"
639,ilp_prod,8,29,33,0,4,0,"{'ok': True, 'value': 4, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3c3ebc567bd84d19be192694010ebf63-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3c3ebc567bd84d19be192694010ebf63-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 4 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -4 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                4.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n4.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1762847900390625}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3, 8, 5]
consumption (rows=resources) = [[7, 3, 6, 8], [6, 5, 5, 2], [2, 1, 5, 3], [2, 7, 4, 6]]
capacity = [32, 18, 28, 28]
upper_bounds = [3, 3, 3, 4]"
640,ilp_partition,4,2,1,0,816,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0772099494934082}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 7, 3, 9]"
641,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07559490203857422}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cc""
T = ""abb"""
642,sub,8,8738730,8738730,1,8338730,0,"{'ok': True, 'value': 8738730, 'stdout': '8738730\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08127880096435547}",1,Compute: 41912560 - 33173830
643,ilp_prod,2,35,21,0,21,0,"{'ok': True, 'value': 35, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5a8ba6fc19a0461aa8dce008f79d9388-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5a8ba6fc19a0461aa8dce008f79d9388-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 35 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -35 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                35.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n35.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15813231468200684}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 7]
consumption (rows=resources) = [[2, 3], [1, 3]]
capacity = [10, 7]
upper_bounds = [5, 3]"
644,rod,16,280,45,0,64,0,"{'ok': True, 'value': 280, 'stdout': '280\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0827021598815918}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [11, 35, 13, 43, 9, 28, 5, 15, 37, 45, 7, 20, 41, 8, 39, 45]"
645,ilp_prod,4,44,63,0,39,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b6fe1f1546604bd7a7d3eb4814c0eb99-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b6fe1f1546604bd7a7d3eb4814c0eb99-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 39 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -36 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1711435317993164}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 9, 10]
consumption (rows=resources) = [[4, 2, 2], [1, 2, 3], [1, 4, 4]]
capacity = [13, 13, 11]
upper_bounds = [3, 3, 3]"
646,knap,4,9,16,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08601260185241699}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 8, 8]
V = [1, 8, 8, 3]
C = 10"
647,ilp_assign,8,34,46,0,46,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6381542682647705}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 5, 6, 21, 14, 19, 17], [1, 22, 17, 24, 22, 18, 16], [2, 11, 1, 17, 18, 18, 24], [1, 15, 7, 16, 14, 9, 8], [2, 23, 17, 8, 17, 14, 24], [16, 7, 20, 5, 4, 18, 10], [11, 5, 2, 18, 24, 9, 6]]"
648,lcs,16,7,6,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07368922233581543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbbdbbcbaddcddb""
T = ""cbbadadbaaaabca"""
649,ilp_prod,32,327,1053,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_63e1q_me/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_63e1q_me/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14476490020751953}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [48, 24, 13, 51, 17, 61]
consumption (rows=resources) = [[2, 6, 28, 14, 27, 14], [28, 1, 29, 18, 14, 6], [30, 4, 25, 15, 22, 8], [4, 13, 16, 9, 1, 6]]
capacity = [68, 71, 78, 103]
upper_bounds = [3, 7, 3, 3, 3, 4]"
650,ilp_partition,4,0,1,0,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09203100204467773}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 12, 8, 1]"
651,ilp_partition,8,0,1,0,10,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0811007022857666}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 7, 10, 21, 17, 10, 7, 17]"
652,ilp_prod,8,68,74,0,66,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__qw3lz8d/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec__qw3lz8d/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14120221138000488}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 12, 6, 22]
consumption (rows=resources) = [[5, 1, 3, 8], [4, 1, 6, 6], [6, 8, 7, 5], [7, 1, 2, 2]]
capacity = [22, 19, 29, 24]
upper_bounds = [3, 3, 3, 3]"
653,knap,2,10,11,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08010411262512207}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 2]
V = [9, 2, 1]
C = 4"
654,add,16,18172576331229635,18172576331229635,1,18172578331230035,0,"{'ok': True, 'value': 18172576331229635, 'stdout': '18172576331229635\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07368969917297363}",1,Compute: 8550535027855016 + 9622041303374619
655,rod,32,1056,93,0,0,0,"{'ok': True, 'value': 1056, 'stdout': '1056\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10298800468444824}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [33, 30, 63, 60, 93, 62, 47, 14, 41, 57, 55, 84, 78, 3, 27, 23, 24, 92, 30, 60, 34, 41, 93, 27, 5, 7, 85, 53, 24, 53, 27, 34]"
656,ilp_prod,2,18,24,0,18,1,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3b31b52481a84b8697d0fee215d5cd01-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3b31b52481a84b8697d0fee215d5cd01-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15027093887329102}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6]
consumption (rows=resources) = [[2, 2], [1, 2]]
capacity = [6, 9]
upper_bounds = [3, 3]"
657,ilp_assign,2,8,8,1,9,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3904430866241455}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [6, 3]]"
658,add,2,177,177,1,177,1,"{'ok': True, 'value': 177, 'stdout': '177\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07603263854980469}",1,Compute: 96 + 81
659,add,4,18049,33,0,18049,1,"{'ok': True, 'value': 18049, 'stdout': '18049\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07919192314147949}",1,Compute: 8141 + 9908
660,ilp_prod,16,113,161,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__3wab9lp/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec__3wab9lp/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14392757415771484}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 23, 35, 12, 45, 17]
consumption (rows=resources) = [[3, 2, 15, 3, 10, 11], [7, 12, 4, 10, 10, 9], [15, 10, 9, 11, 16, 1], [8, 2, 16, 7, 13, 13]]
capacity = [60, 46, 42, 35]
upper_bounds = [3, 3, 3, 3, 3, 3]"
661,rod,16,736,46,0,46,0,"{'ok': True, 'value': 736, 'stdout': '736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07778215408325195}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [46, 42, 41, 11, 29, 8, 38, 10, 9, 23, 10, 16, 4, 9, 41, 45]"
662,lcs,16,10,7,0,19,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07254171371459961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbbaadbccdddcbc""
T = ""babcdbbcadbbddadd"""
663,sub,16,2184829712278310,2184830282278310,0,-1184520312278310,0,"{'ok': True, 'value': 2184829712278310, 'stdout': '2184829712278310\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07536888122558594}",1,Compute: 5226899452061078 - 3042069739782768
664,ilp_assign,8,42,56,0,80,0,"{'ok': True, 'value': 42, 'stdout': '42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37299513816833496}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 6, 19, 1, 19, 12, 23], [16, 11, 15, 16, 14, 18, 20], [15, 4, 2, 13, 14, 7, 14], [4, 16, 18, 14, 19, 12, 8], [6, 12, 18, 19, 17, 17, 6], [6, 23, 5, 21, 19, 15, 6], [11, 5, 13, 8, 23, 22, 7]]"
665,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07332563400268555}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""ddc"""
666,sub,4,683,683,1,683,1,"{'ok': True, 'value': 683, 'stdout': '683\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07692885398864746}",1,Compute: 4961 - 4278
667,ilp_partition,8,2,1,0,10,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0831294059753418}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 22, 20, 2, 3, 10, 21, 10]"
668,ilp_partition,16,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19791173934936523}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [48, 21, 1, 38, 31, 44, 7, 48, 48, 5, 20, 38, 11, 25, 33, 31]"
669,ilp_partition,16,1,1,1,7,0,"{'ok': True, 'value': 307, 'stdout': '307\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07987332344055176}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 34, 4, 5, 42, 29, 43, 46, 16, 8, 40, 16, 26, 26, 9, 44]"
670,lcs,32,21,15,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08692502975463867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddacccdbdbaccacabbcbcadddabdaaa""
T = ""cddabcbbcbdbbaabdcbbccdcdcbdcbcd"""
671,rod,8,64,46,0,1,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07972073554992676}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 16, 22, 22, 9, 4, 2, 8]"
672,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07544517517089844}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 15, 4, 51, 90, 93, 82, 57, 69, 10, 73, 45, 16, 25, 67, 11, 44, 36, 12, 23, 64, 41, 44, 14]"
673,knap,4,22,15,0,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07799386978149414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 5, 7, 1]
V = [15, 2, 5, 7]
C = 10"
674,ilp_assign,2,5,4,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40221476554870605}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [3, 1]]"
675,rod,32,2464,1055,0,704,0,"{'ok': True, 'value': 2464, 'stdout': '2464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08507299423217773}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [77, 38, 86, 56, 19, 5, 80, 75, 19, 18, 27, 77, 16, 74, 64, 96, 85, 12, 14, 57, 64, 25, 22, 57, 85, 36, 16, 60, 72, 53, 28, 22]"
676,add,4,5010,1418,0,5010,1,"{'ok': True, 'value': 5010, 'stdout': '5010\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08150982856750488}",1,Compute: 3592 + 1418
677,mul,32,1234874901265503579128184553088595451525672480493792923122804618,-1,0,124803833845424232052820000000000,0,"{'ok': True, 'value': 1234874901265503579128184553088595451525672480493792923122804618, 'stdout': '1234874901265503579128184553088595451525672480493792923122804618\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08098912239074707}",1,Compute: 61268982711559698018491333547946 * 20154976410804975520663618064433
678,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08430242538452148}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""bd"""
679,ilp_prod,8,78,103,0,60,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d8e4bd10782d4476b17f04489bfb13e3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d8e4bd10782d4476b17f04489bfb13e3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 28 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15694212913513184}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 17, 17, 19]
consumption (rows=resources) = [[3, 3, 6, 2], [1, 6, 2, 5], [6, 1, 5, 8], [5, 8, 2, 6]]
capacity = [16, 30, 28, 27]
upper_bounds = [4, 3, 3, 3]"
680,ilp_assign,8,25,46,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_5vo7a02t/main.py"", line 14, in <module>\n    prob += lpSum([C[i][j] * x[i][j] for i in range(n) for j in range(n)])\n  File ""/tmp/cot_exec_5vo7a02t/main.py"", line 14, in <listcomp>\n    prob += lpSum([C[i][j] * x[i][j] for i in range(n) for j in range(n)])\nTypeError: \'ellipsis\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16378498077392578}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 3, 23, 7, 21, 19, 17], [7, 8, 11, 5, 7, 7, 10], [3, 6, 11, 4, 2, 10, 9], [24, 23, 4, 12, 9, 4, 7], [4, 18, 20, 12, 19, 20, 8], [1, 4, 1, 20, 11, 1, 23], [9, 7, 20, 8, 16, 18, 6]]"
681,add,4,10101,10091,0,10101,1,"{'ok': True, 'value': 10101, 'stdout': '10101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07642507553100586}",1,Compute: 8321 + 1780
682,mul,2,770,770,1,770,1,"{'ok': True, 'value': 770, 'stdout': '770\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07499146461486816}",1,Compute: 77 * 10
683,ilp_assign,8,33,56,0,75,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3866863250732422}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 24, 15, 9, 9, 1, 19], [17, 14, 16, 7, 11, 15, 14], [1, 22, 3, 10, 9, 4, 21], [24, 10, 12, 16, 12, 4, 15], [2, 11, 20, 14, 11, 12, 16], [15, 1, 18, 18, 15, 1, 17], [11, 23, 13, 21, 4, 1, 14]]"
684,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08532071113586426}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbbdcaacbaadaadbbdcdbbbaccddcdb""
T = ""cbdcacadadcabdabbbbccdacdbddddbd"""
685,ilp_partition,2,1,0,0,7,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07379889488220215}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 3, 3, 3]"
686,ilp_assign,32,57,110,0,105,0,"{'ok': True, 'value': 57, 'stdout': '57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3698885440826416}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4, 66, 1, 96, 23, 37], [34, 84, 15, 88, 72, 59, 21], [5, 35, 70, 78, 57, 86, 65], [96, 16, 79, 22, 1, 51, 27], [5, 50, 10, 40, 35, 5, 30], [48, 23, 30, 25, 79, 15, 23], [16, 35, 83, 20, 82, 76, 7]]"
687,lcs,16,8,5,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07704377174377441}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcadcdbdcddbbbc""
T = ""bbadbabcbdcabcca"""
688,sub,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07594633102416992}",1,Compute: 14 - 10
689,mul,16,25408402637657176553987097685990,25484968572684609,0,25439970500490661579997332380452370,0,"{'ok': True, 'value': 25408402637657176553987097685990, 'stdout': '25408402637657176553987097685990\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08295750617980957}",1,Compute: 6989992423522618 * 3634968551919055
690,ilp_assign,4,15,7,0,11,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38582849502563477}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 2, 2, 8], [10, 6, 1, 2], [12, 4, 2, 1], [11, 11, 9, 8]]"
691,lcs,8,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0784919261932373}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcbbbba""
T = ""ddadabdbd"""
692,lcs,16,8,6,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0758056640625}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcadbdccdaaabda""
T = ""adbddbddbdbabddb"""
693,sub,4,56,4441,0,56,1,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08050394058227539}",1,Compute: 4497 - 4441
694,ilp_assign,16,58,105,0,14,0,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39459681510925293}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 2, 41, 9, 42, 45, 8], [24, 27, 10, 10, 17, 18, 34], [42, 9, 47, 34, 3, 44, 40], [24, 17, 8, 36, 25, 45, 43], [23, 3, 33, 16, 35, 11, 28], [40, 48, 31, 41, 15, 36, 11], [13, 1, 38, 8, 21, 34, 14]]"
695,sub,32,4359748295985870761498799543400,44536383741650784453638374165078,0,43607482963858707615088045433400,0,"{'ok': True, 'value': 4359748295985870761498799543400, 'stdout': '4359748295985870761498799543400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0715184211730957}",1,Compute: 21963145606452194453638374165078 - 17603397310466323692139574621678
696,mul,16,33890552008939214639882821747335,3410470452893454978547035,0,336468544459685494965655307,0,"{'ok': True, 'value': 33890552008939214639882821747335, 'stdout': '33890552008939214639882821747335\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08074760437011719}",1,Compute: 5437482118421707 * 6232765693908405
697,ilp_prod,16,210,165,0,216,0,"{'ok': True, 'value': 72, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8071a22cdc21443a919a1c6488b8b678-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8071a22cdc21443a919a1c6488b8b678-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 82.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -72 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                72.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n72.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15961503982543945}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 15, 39, 8, 44, 7]
consumption (rows=resources) = [[4, 15, 7, 4, 6, 13], [10, 1, 5, 14, 6, 11], [5, 11, 14, 14, 1, 10], [16, 14, 3, 4, 14, 9]]
capacity = [49, 63, 35, 55]
upper_bounds = [3, 3, 3, 3, 3, 3]"
698,ilp_prod,32,187,259,0,120,0,"{'ok': True, 'value': 120, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/98fa589772f545f091bc07b017a2cb05-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/98fa589772f545f091bc07b017a2cb05-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 154.286 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -120 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                120.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n120.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14898252487182617}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [40, 8, 10, 67, 7, 12]
consumption (rows=resources) = [[21, 13, 9, 10, 26, 27], [18, 16, 6, 28, 15, 26], [10, 29, 27, 14, 2, 11], [16, 2, 3, 12, 15, 28]]
capacity = [81, 82, 108, 124]
upper_bounds = [3, 3, 4, 3, 3, 3]"
699,knap,2,13,13,1,-1,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08364081382751465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 2]
V = [1, 5, 8]
C = 4"
700,ilp_prod,8,101,100,0,3,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/616f4b99b9964316b2abc23d6a1ee046-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/616f4b99b9964316b2abc23d6a1ee046-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15006232261657715}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 23, 16, 22]
consumption (rows=resources) = [[6, 3, 7, 8], [2, 6, 4, 3], [5, 1, 7, 4], [2, 6, 3, 1]]
capacity = [22, 23, 30, 23]
upper_bounds = [3, 3, 3, 3]"
701,sub,32,21210681890828038345921632071522,21671010101010101010101010101010,0,22210681890828038345921632071522,0,"{'ok': True, 'value': 21210681890828038345921632071522, 'stdout': '21210681890828038345921632071522\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07289314270019531}",1,Compute: 75128577300732863975386405993595 - 53917895409904825629464773922073
702,add,32,144255702376661481808404648973234,144255702376661481849404648973134,0,144255692376661477808404648973234,0,"{'ok': True, 'value': 144255702376661481808404648973234, 'stdout': '144255702376661481808404648973234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0738077163696289}",1,Compute: 66482644530723433722729986182072 + 77773057845938048085674662791162
703,ilp_prod,4,55,49,0,33,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/77c618232d4c43938f2d75f98881f71a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/77c618232d4c43938f2d75f98881f71a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16023826599121094}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 11, 12]
consumption (rows=resources) = [[3, 1, 4], [4, 3, 1], [3, 2, 4]]
capacity = [8, 16, 11]
upper_bounds = [3, 5, 3]"
704,mul,4,34137207,64,0,34034653,0,"{'ok': True, 'value': 34137207, 'stdout': '34137207\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07364201545715332}",1,Compute: 5721 * 5967
705,mul,4,10943653,110055641,0,2319,0,"{'ok': True, 'value': 10943653, 'stdout': '10943653\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07362937927246094}",1,Compute: 4711 * 2323
706,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08126974105834961}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 37, 15, 1, 74, 53, 7, 73, 35, 96, 39, 73, 14, 47, 91, 5, 3, 18, 35, 24, 21, 52, 14, 95]"
707,add,32,149810611361417831473685205404796,1,0,149810611361417831473685205404806,0,"{'ok': True, 'value': 149810611361417831473685205404796, 'stdout': '149810611361417831473685205404796\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07541608810424805}",1,Compute: 65540599803782880487561985647522 + 84270011557634950986123219757274
708,ilp_prod,2,16,31,0,25,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/34bbba312f7149468dc9418324cae550-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/34bbba312f7149468dc9418324cae550-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.157517671585083}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[3, 3], [1, 3]]
capacity = [6, 10]
upper_bounds = [3, 3]"
709,rod,4,16,16,1,5,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07465863227844238}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 5, 3, 1]"
710,ilp_assign,2,4,2,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3870863914489746}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3], [1, 3]]"
711,mul,32,779393754153626603772702483876951100706823423268114835214280184,77406955573695487024858966617886,0,78015855780294980528258480230429362454,0,"{'ok': True, 'value': 779393754153626603772702483876951100706823423268114835214280184, 'stdout': '779393754153626603772702483876951100706823423268114835214280184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07333159446716309}",1,Compute: 19201737793422743507415385308943 * 40589750914138396708297493412488
712,mul,16,9533736364638588328312262819472,1,0,9456018108199895469594464,0,"{'ok': True, 'value': 9533736364638588328312262819472, 'stdout': '9533736364638588328312262819472\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08410406112670898}",1,Compute: 5388577939486628 * 1769249043384324
713,sub,32,69224283704066213637629311267185,69224283653966213637629311267189,0,69224283694066213637629311267185,0,"{'ok': True, 'value': 69224283704066213637629311267185, 'stdout': '69224283704066213637629311267185\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07401180267333984}",1,Compute: 90207804054759811410384211516266 - 20983520350693597772754900249081
714,knap,16,398,121,0,0,0,"{'ok': True, 'value': 398, 'stdout': '398\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07499957084655762}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 25, 2, 13, 6, 1, 10, 10, 32, 10, 30, 1, 3, 20, 25, 22]
V = [28, 22, 26, 24, 52, 60, 47, 2, 45, 23, 56, 2, 26, 28, 54, 38]
C = 121"
715,ilp_prod,4,48,46,0,36,0,"{'ok': True, 'value': 30, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8e2e4a56f9a84ddb9200ac3c58534472-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8e2e4a56f9a84ddb9200ac3c58534472-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 30 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -30 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                30.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n30.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14997410774230957}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 12, 11]
consumption (rows=resources) = [[3, 1, 3], [2, 3, 4], [4, 2, 4]]
capacity = [12, 14, 9]
upper_bounds = [3, 4, 3]"
716,knap,32,1639,1080,0,33,0,"{'ok': True, 'value': 1639, 'stdout': '1639\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09077715873718262}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 19, 64, 55, 20, 49, 10, 8, 10, 55, 38, 8, 27, 59, 37, 51, 33, 32, 12, 15, 41, 64, 31, 19, 49, 37, 13, 10, 28, 44, 3, 43]
V = [14, 65, 22, 92, 51, 94, 73, 8, 93, 43, 128, 46, 43, 97, 31, 51, 99, 77, 32, 120, 13, 94, 54, 110, 28, 35, 90, 26, 99, 108, 66, 99]
C = 510"
717,mul,2,798,818,0,798,1,"{'ok': True, 'value': 798, 'stdout': '798\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07461357116699219}",1,Compute: 19 * 42
718,lcs,4,1,3,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07328462600708008}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcda""
T = ""aabc"""
719,add,2,108,108,1,108,1,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08666205406188965}",1,Compute: 50 + 58
720,add,8,150200618,985020566,0,149200618,0,"{'ok': True, 'value': 150200618, 'stdout': '150200618\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08436274528503418}",1,Compute: 63765557 + 86435061
721,ilp_partition,16,1,1,1,25,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19912219047546387}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 10, 31, 15, 48, 45, 35, 34, 25, 5, 36, 30, 38, 38, 35, 12]"
722,add,16,18668404912505581,191111111111111111,0,18668414912505581,0,"{'ok': True, 'value': 18668404912505581, 'stdout': '18668404912505581\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07362771034240723}",1,Compute: 9131002988368132 + 9537401924137449
723,lcs,32,22,10,0,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07484316825866699}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabccdcdbdcdabbdbddccacabcaddcad""
T = ""aadbdcabddacadadbbddddacbadbadcdb"""
724,ilp_assign,16,59,105,0,115,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38669443130493164}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 4, 33, 42, 28, 23, 40], [36, 14, 29, 3, 17, 39, 2], [30, 16, 35, 29, 13, 31, 14], [11, 24, 15, 46, 29, 33, 38], [40, 12, 23, 16, 34, 36, 2], [6, 34, 33, 15, 48, 22, 28], [48, 16, 4, 39, 5, 32, 37]]"
725,ilp_prod,4,36,45,0,45,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a823d32d20ca491ba41188bc603ef01c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a823d32d20ca491ba41188bc603ef01c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1480414867401123}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 6]
consumption (rows=resources) = [[3, 4, 3], [2, 3, 2], [4, 4, 2]]
capacity = [15, 13, 12]
upper_bounds = [3, 3, 5]"
726,mul,32,2179784147618142946421594570972527966165187340083267345645861920,21650409022531761379888192996329618060129629060124522088324,0,218273202302342942522222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222,0,"{'ok': True, 'value': 2179784147618142946421594570972527966165187340083267345645861920, 'stdout': '2179784147618142946421594570972527966165187340083267345645861920\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08089327812194824}",1,Compute: 36084015037552935633146987493880 * 60408581066980029520649289020284
727,sub,8,18166074,18166074,1,18166074,1,"{'ok': True, 'value': 18166074, 'stdout': '18166074\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08830881118774414}",1,Compute: 56750501 - 38584427
728,ilp_assign,4,17,0,0,28,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4185166358947754}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 11, 6, 2], [1, 10, 5, 4], [12, 7, 11, 11], [10, 11, 8, 4]]"
729,mul,32,5041391560044590158740126074746061335363789904811925151962509120,50460636222195686887500000000000,0,493843446434433334444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 5041391560044590158740126074746061335363789904811925151962509120, 'stdout': '5041391560044590158740126074746061335363789904811925151962509120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11114835739135742}",1,Compute: 93513111954238144953331105321440 * 53911066102811983747780664525798
730,ilp_prod,8,120,105,0,5,0,"{'ok': True, 'value': 120, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9612877c3c8c41cab532ace3c3498dd8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9612877c3c8c41cab532ace3c3498dd8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 129.161 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -103 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -120 found by DiveCoefficient after 4 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 4\nCbc0013I At root node, 3 cuts changed objective from -129.16129 to -120 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 6 row cuts average 3.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -120, took 4 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -129.161 to -120\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                120.00000000\nEnumerated nodes:               0\nTotal iterations:               4\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n120.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15842175483703613}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 19, 17, 14]
consumption (rows=resources) = [[3, 6, 5, 6], [7, 2, 1, 4], [1, 1, 3, 7], [4, 7, 5, 6]]
capacity = [31, 28, 22, 28]
upper_bounds = [4, 4, 5, 3]"
731,sub,16,108771508190459,0,0,1087771508190459,0,"{'ok': True, 'value': 108771508190459, 'stdout': '108771508190459\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08156943321228027}",1,Compute: 7758992704675836 - 7650221196485377
732,knap,32,1761,1047,0,22,0,"{'ok': True, 'value': 1761, 'stdout': '1761\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08196210861206055}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [54, 52, 8, 12, 53, 55, 46, 54, 47, 50, 7, 50, 49, 22, 49, 21, 49, 26, 6, 53, 28, 23, 39, 41, 40, 32, 34, 12, 12, 46, 42, 42]
V = [60, 34, 127, 107, 102, 59, 90, 66, 88, 100, 47, 74, 98, 58, 89, 119, 123, 6, 45, 126, 33, 88, 57, 92, 101, 125, 57, 40, 115, 72, 14, 47]
C = 577"
733,ilp_prod,2,21,23,0,21,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ivnofn3d/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 7*x[1]], ""Total Profit"")\nTypeError: lpSum() takes 1 positional argument but 2 were given\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15168356895446777}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[3, 2], [2, 3]]
capacity = [7, 9]
upper_bounds = [3, 3]"
734,rod,16,464,640,0,65,0,"{'ok': True, 'value': 464, 'stdout': '464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07467412948608398}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [29, 39, 45, 45, 36, 47, 11, 32, 45, 35, 41, 43, 40, 28, 43, 38]"
735,knap,4,27,22,0,0,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08258438110351562}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 3, 2, 7]
V = [12, 10, 15, 8]
C = 10"
736,mul,32,643487477259592840512344235557667026604929561852189482125826780,659997370627932654414910096782736658486,0,610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 643487477259592840512344235557667026604929561852189482125826780, 'stdout': '643487477259592840512344235557667026604929561852189482125826780\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07271003723144531}",1,Compute: 33333103836156508319250389889142 * 19304757229406288446088439562090
737,ilp_prod,4,36,63,0,15,0,"{'ok': True, 'value': 27, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b6e8fb5c994c47feb0fead6cc560ec43-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b6e8fb5c994c47feb0fead6cc560ec43-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 35 RHS\nAt line 41 BOUNDS\nAt line 45 ENDATA\nProblem MODEL has 5 rows, 3 columns and 15 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 30 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -27 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                27.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n27.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17038822174072266}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 12, 4]
consumption (rows=resources) = [[2, 3, 1], [3, 3, 2], [2, 2, 1]]
capacity = [9, 10, 15]
upper_bounds = [3, 3, 5]"
738,sub,16,3901283002111016,1,0,3901283002110986,0,"{'ok': True, 'value': 3901283002111016, 'stdout': '3901283002111016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06631946563720703}",1,Compute: 7272114277418125 - 3370831275307109
739,ilp_assign,2,7,3,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3758268356323242}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6], [1, 2]]"
740,sub,16,3074698368599236,3074698368599236,1,3074698368599236,1,"{'ok': True, 'value': 3074698368599236, 'stdout': '3074698368599236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09195995330810547}",1,Compute: 8413662072559770 - 5338963703960534
741,knap,4,24,21,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07951092720031738}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 5, 7, 8]
V = [1, 12, 12, 8]
C = 13"
742,ilp_assign,2,5,4,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3998832702636719}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1], [5, 2]]"
743,ilp_assign,16,58,105,0,114,0,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3809323310852051}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 39, 48, 47, 40, 12, 42], [28, 15, 46, 10, 46, 47, 29], [10, 11, 37, 26, 7, 8, 43], [6, 5, 40, 32, 10, 15, 14], [2, 38, 24, 48, 15, 40, 17], [43, 6, 26, 37, 13, 46, 43], [24, 12, 7, 37, 43, 14, 39]]"
744,mul,32,1232630680098342044283397169362975566767336590392040736110324892,12246253655907575317417250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,1228185433365758438090070257220044555392,0,"{'ok': True, 'value': 1232630680098342044283397169362975566767336590392040736110324892, 'stdout': '1232630680098342044283397169362975566767336590392040736110324892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0776071548461914}",1,Compute: 47985014623630301269669008507334 * 25687825454810448048161143269338
745,mul,2,7140,85,0,7020,0,"{'ok': True, 'value': 7140, 'stdout': '7140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0732874870300293}",1,Compute: 84 * 85
746,add,4,12243,5510,0,12243,1,"{'ok': True, 'value': 12243, 'stdout': '12243\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08236408233642578}",1,Compute: 6733 + 5510
747,rod,8,80,22,0,1,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08168339729309082}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 2, 4, 3, 6, 20, 24, 3]"
748,add,32,114420728163188910933654998760484,34133808459259251000000000000000,0,114410726163188910933655038760484,0,"{'ok': True, 'value': 114420728163188910933654998760484, 'stdout': '114420728163188910933654998760484\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0737755298614502}",1,Compute: 89065106118366298877135083047797 + 25355622044822612056519915712687
749,ilp_prod,8,103,105,0,5,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/75788f0b96594d68b2790d78977646ab-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/75788f0b96594d68b2790d78977646ab-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.147979736328125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 19, 16, 9]
consumption (rows=resources) = [[5, 1, 5, 5], [3, 5, 8, 1], [2, 4, 1, 4], [3, 1, 7, 4]]
capacity = [26, 30, 23, 24]
upper_bounds = [5, 5, 3, 5]"
750,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08741474151611328}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [63, 57, 44, 14, 29, 52, 91, 3, 3, 67, 75, 35, 57, 79, 40, 95, 65, 50, 5, 27, 8, 47, 69, 81]"
751,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07505226135253906}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""c"""
752,mul,8,1197848431386400,1188260030168540,0,118284436533500,0,"{'ok': True, 'value': 1197848431386400, 'stdout': '1197848431386400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07516694068908691}",1,Compute: 16403425 * 73024288
753,ilp_prod,8,90,70,0,4,0,"{'ok': True, 'value': 69, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e29b5cdd640e4fdda5af9b4bff4d585d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e29b5cdd640e4fdda5af9b4bff4d585d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 43 RHS\nAt line 49 BOUNDS\nAt line 54 ENDATA\nProblem MODEL has 5 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 72.8519 - 0.00 seconds\nCgl0004I processed model has 5 rows, 4 columns (4 integer (0 of which binary)) and 20 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -58 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 5 rows 4 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -69 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 6 cuts changed objective from -72.227273 to -64 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 2.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -69, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -72.2273 to -64\nProbing was tried 1 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                69.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n69.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16512370109558105}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 18, 18, 17]
consumption (rows=resources) = [[1, 2, 4, 7], [7, 4, 6, 7], [8, 4, 5, 1], [4, 2, 6, 8]]
capacity = [21, 23, 23, 25]
upper_bounds = [3, 5, 3, 3]"
754,ilp_prod,4,60,50,0,45,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a57e9e8ec4f64aedab2d23d2384b60d0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a57e9e8ec4f64aedab2d23d2384b60d0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14836645126342773}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 10, 12]
consumption (rows=resources) = [[3, 3, 2], [4, 4, 2], [1, 4, 3]]
capacity = [13, 10, 15]
upper_bounds = [3, 3, 5]"
755,knap,8,52,100,0,0,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07595586776733398}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 11, 1, 12, 12, 15, 10, 13]
V = [16, 2, 5, 10, 16, 15, 5, 13]
C = 41"
756,ilp_assign,8,38,56,0,80,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37614870071411133}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 24, 18, 3, 16, 18, 10], [24, 5, 21, 13, 2, 4, 11], [11, 21, 15, 6, 24, 20, 22], [2, 24, 8, 23, 22, 4, 5], [13, 8, 2, 17, 21, 22, 1], [12, 21, 10, 11, 11, 13, 24], [8, 19, 3, 13, 9, 9, 16]]"
757,add,16,12644966440237400,9981587484047300,0,12644966440237400,1,"{'ok': True, 'value': 12644966440237400, 'stdout': '12644966440237400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09048843383789062}",1,Compute: 9685655488914683 + 2959310951322717
758,mul,8,3995916313820247,1877232760,0,396449455553177,0,"{'ok': True, 'value': 3995916313820247, 'stdout': '3995916313820247\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07376241683959961}",1,Compute: 47930819 * 83368413
759,ilp_partition,2,2,0,0,2,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0859980583190918}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 6, 4]"
760,sub,16,1422111338490588,1422111338490588,1,-2432111338490588,0,"{'ok': True, 'value': 1422111338490588, 'stdout': '1422111338490588\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07663178443908691}",1,Compute: 6029941110303057 - 4607829771812469
761,knap,8,96,140,0,0,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09130477905273438}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 2, 5, 15, 15, 4, 10, 3]
V = [23, 10, 3, 10, 2, 18, 13, 32]
C = 32"
762,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.29405760765075684}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""dd"""
763,add,8,122171816,421708061,0,122171816,1,"{'ok': True, 'value': 122171816, 'stdout': '122171816\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0718224048614502}",1,Compute: 34415225 + 87756591
764,ilp_assign,32,153,153,1,209,0,"{'ok': True, 'value': 153, 'stdout': '153\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38614416122436523}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[86, 65, 22, 43, 9, 81, 90], [58, 70, 29, 85, 20, 87, 32], [12, 64, 32, 2, 22, 76, 60], [3, 61, 61, 45, 93, 91, 24], [74, 38, 84, 7, 44, 83, 26], [80, 15, 60, 3, 30, 84, 65], [71, 41, 39, 79, 85, 92, 14]]"
765,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08423471450805664}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 3]"
766,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07384777069091797}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcccbac""
T = ""bbddcdbbc"""
767,sub,16,781064260988302,4746493862848322,0,781064261988830,0,"{'ok': True, 'value': 781064260988302, 'stdout': '781064260988302\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08115482330322266}",1,Compute: 5527558123836624 - 4746493862848322
768,knap,16,431,1047,0,25,0,"{'ok': True, 'value': 431, 'stdout': '431\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0974435806274414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 8, 25, 9, 2, 9, 2, 18, 20, 32, 29, 27, 15, 31, 20, 2]
V = [10, 50, 64, 24, 44, 59, 35, 11, 20, 6, 33, 44, 3, 40, 51, 20]
C = 137"
769,rod,4,20,12,0,12,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07466626167297363}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 3, 7, 12]"
770,add,2,111,111,1,111,1,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0735633373260498}",1,Compute: 55 + 56
771,add,32,59187625411589439238906377039177,64,0,59287625411489439248906376939177,0,"{'ok': True, 'value': 59187625411589439238906377039177, 'stdout': '59187625411589439238906377039177\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.089569091796875}",1,Compute: 12600250792589251630893775426275 + 46587374619000187608012601612902
772,ilp_partition,8,0,1,0,14,0,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07382702827453613}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 10, 8, 16, 14, 9, 20, 20]"
773,add,16,11308365812786628,11000000000000000,0,11308365812786628,1,"{'ok': True, 'value': 11308365812786628, 'stdout': '11308365812786628\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08226656913757324}",1,Compute: 5928990762625038 + 5379375050161590
774,rod,16,560,36,0,157,0,"{'ok': True, 'value': 560, 'stdout': '560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07223677635192871}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 37, 26, 18, 36, 32, 10, 37, 40, 33, 12, 27, 16, 22, 2, 19]"
775,knap,8,93,100,0,8,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08293986320495605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 2, 9, 12, 2, 11, 2, 16]
V = [10, 14, 26, 18, 16, 10, 19, 5]
C = 30"
776,knap,4,22,23,0,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08334541320800781}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 6, 5, 3]
V = [13, 10, 2, 9]
C = 9"
777,ilp_assign,2,5,4,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38988184928894043}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 3], [2, 4]]"
778,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07460594177246094}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 2, 5]"
779,knap,4,12,11,0,0,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07365655899047852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 8, 1, 4]
V = [9, 9, 1, 2]
C = 8"
780,add,2,112,112,1,112,1,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07283711433410645}",1,Compute: 31 + 81
781,sub,16,4949110424725321,4949110424725321,1,4949110424725321,1,"{'ok': True, 'value': 4949110424725321, 'stdout': '4949110424725321\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07357144355773926}",1,Compute: 8923054707851660 - 3973944283126339
782,ilp_partition,2,2,0,0,20,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07684087753295898}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 5, 4]"
783,add,32,87979108201728863333246825946776,87821526081333231050704072433493636269,0,87979108201728863333246825946776,1,"{'ok': True, 'value': 87979108201728863333246825946776, 'stdout': '87979108201728863333246825946776\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07689118385314941}",1,Compute: 47631975590878215260813332310507 + 40347132610850648072433493636269
784,mul,8,912404137263492,1099254760,0,909633469452,0,"{'ok': True, 'value': 912404137263492, 'stdout': '912404137263492\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09269976615905762}",1,Compute: 56562738 * 16130834
785,rod,4,24,12,0,12,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09658527374267578}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 2, 5, 12]"
786,sub,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08324694633483887}",1,Compute: 15 - 13
787,rod,16,480,84,0,64,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08418965339660645}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 2, 35, 48, 32, 3, 12, 40, 33, 11, 5, 47, 30, 22, 12, 8]"
788,ilp_partition,2,0,1,0,2,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09464335441589355}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 4, 1]"
789,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08348894119262695}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 5, 4]"
790,ilp_assign,32,136,10,0,146,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3811299800872803}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[76, 76, 49, 47, 85, 31, 63], [77, 31, 24, 60, 5, 38, 7], [31, 50, 24, 19, 75, 51, 10], [36, 17, 54, 87, 7, 26, 77], [31, 10, 20, 8, 22, 50, 68], [41, 69, 51, 49, 2, 20, 17], [73, 28, 41, 76, 21, 43, 27]]"
791,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.384655237197876}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 6], [3, 3]]"
792,ilp_partition,2,2,The answer will be the minimum difference between the two groups.,0,28,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08281683921813965}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 2, 4]"
793,ilp_prod,4,33,39,0,30,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fdaf71a4fd804e4faadd7d556af933b0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fdaf71a4fd804e4faadd7d556af933b0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -6 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n6.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16898107528686523}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3, 10]
consumption (rows=resources) = [[1, 2, 4], [4, 4, 1], [2, 1, 1]]
capacity = [15, 8, 12]
upper_bounds = [3, 3, 3]"
794,add,8,98647603,98647603,1,98647603,1,"{'ok': True, 'value': 98647603, 'stdout': '98647603\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07600927352905273}",1,Compute: 51175625 + 47471978
795,knap,32,1398,2263,0,58,0,"{'ok': True, 'value': 1398, 'stdout': '1398\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07924103736877441}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [40, 56, 42, 35, 41, 3, 32, 34, 7, 24, 19, 25, 51, 57, 30, 11, 53, 58, 26, 57, 10, 16, 32, 43, 11, 27, 41, 16, 6, 53, 30, 55]
V = [7, 53, 69, 4, 78, 119, 67, 61, 34, 31, 12, 67, 95, 64, 35, 41, 102, 93, 58, 80, 74, 56, 31, 19, 24, 72, 64, 30, 97, 123, 97, 57]
C = 520"
796,add,4,9035,89135,0,9035,1,"{'ok': True, 'value': 9035, 'stdout': '9035\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08500123023986816}",1,Compute: 4285 + 4750
797,knap,32,1661,1043,0,40,0,"{'ok': True, 'value': 1661, 'stdout': '1661\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07982230186462402}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 27, 33, 37, 21, 45, 56, 29, 41, 45, 54, 63, 8, 43, 50, 40, 44, 53, 52, 55, 45, 51, 8, 10, 13, 54, 22, 50, 59, 39, 38, 6]
V = [9, 19, 117, 113, 5, 110, 38, 81, 11, 95, 28, 107, 118, 12, 109, 40, 25, 74, 6, 79, 81, 120, 42, 124, 58, 14, 89, 64, 55, 8, 75, 103]
C = 599"
798,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.409578800201416}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [5, 2]]"
799,ilp_assign,2,7,3,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3914177417755127}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 2], [5, 6]]"
800,knap,32,1535,1649,0,46,0,"{'ok': True, 'value': 1535, 'stdout': '1535\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0984334945678711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 42, 12, 16, 58, 3, 33, 2, 3, 40, 3, 38, 4, 23, 61, 46, 37, 7, 46, 42, 14, 33, 49, 13, 33, 53, 12, 61, 62, 59, 15, 3]
V = [21, 106, 53, 41, 47, 124, 66, 37, 74, 65, 49, 56, 24, 26, 98, 12, 81, 107, 31, 34, 26, 59, 79, 1, 93, 50, 98, 43, 128, 126, 74, 50]
C = 464"
801,rod,4,20,20,1,1,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0759744644165039}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 5, 10, 8]"
802,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07600784301757812}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddbabaaccbdacaccdbbbdcbcdcaadcd""
T = ""adcbbcadcbaadbbcbcbddcdadbbddbd"""
803,rod,8,56,36,0,0,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.078094482421875}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 9, 1, 24, 7, 18, 4, 20]"
804,mul,8,4236877626423786,46777481800000000,0,4189694834615,0,"{'ok': True, 'value': 4236877626423786, 'stdout': '4236877626423786\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0761101245880127}",1,Compute: 44704677 * 94774818
805,ilp_partition,16,0,1,0,22,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0862588882446289}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 32, 43, 10, 31, 28, 9, 3, 15, 2, 2, 22, 41, 14, 9, 12]"
806,add,16,13582706661753807,,0,13582706661753807,1,"{'ok': True, 'value': 13582706661753807, 'stdout': '13582706661753807\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07468891143798828}",1,Compute: 7784988357990781 + 5797718303763026
807,lcs,16,7,6,0,10,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07856321334838867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abababaaacbcccbb""
T = ""cdaadccabcaacdd"""
808,ilp_prod,32,376,"The solution to the problem is to maximize the total profit while ensuring that the total consumption of each resource does not exceed its capacity. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the sum of the product of profit[j] and x_j for all j. The constraints are that the sum of the product of consumption[i][j] and x_j for all j, for each resource i, must be less than or equal to capacity[i] and the quantities x_j must be non-negative integers. The solution is found using a linear programming solver.",0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dkqd_nsm/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_dkqd_nsm/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.13896632194519043}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [76, 7, 14, 76, 65, 83]
consumption (rows=resources) = [[15, 19, 31, 2, 23, 31], [20, 5, 5, 27, 3, 6], [12, 22, 5, 7, 28, 21], [28, 17, 20, 26, 6, 25]]
capacity = [78, 126, 70, 116]
upper_bounds = [4, 3, 3, 4, 3, 3]"
809,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07546710968017578}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dc""
T = ""c"""
810,lcs,16,8,7,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07240843772888184}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbaabadcbcbddda""
T = ""ddddacbddaabddcd"""
811,sub,32,45110427935820450681274422993571,45110427935820450681274423093571,0,45110427935820450681274423003571,0,"{'ok': True, 'value': 45110427935820450681274422993571, 'stdout': '45110427935820450681274422993571\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07538151741027832}",1,Compute: 75674260586248919825720675387040 - 30563832650428469144446252393469
812,ilp_assign,16,101,105,0,105,0,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3925354480743408}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[38, 17, 47, 27, 8, 10, 13], [44, 41, 23, 48, 43, 26, 36], [43, 25, 27, 26, 41, 14, 18], [42, 35, 4, 35, 44, 21, 31], [17, 14, 44, 28, 48, 10, 26], [31, 47, 41, 24, 4, 26, 28], [27, 27, 31, 15, 3, 7, 9]]"
813,ilp_prod,2,24,26,0,9,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/74d12a1e0598416bac933afe580a4b46-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/74d12a1e0598416bac933afe580a4b46-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 24.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16598129272460938}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6]
consumption (rows=resources) = [[3, 3], [2, 2]]
capacity = [9, 9]
upper_bounds = [3, 3]"
814,lcs,8,3,4,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07699966430664062}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abadaccc""
T = ""dbdbabdb"""
815,add,8,104677970,104677970,1,104678970,0,"{'ok': True, 'value': 104677970, 'stdout': '104677970\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0806267261505127}",1,Compute: 67697109 + 36980861
816,ilp_partition,16,0,1,0,45,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18934059143066406}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 36, 33, 32, 12, 40, 41, 48, 45, 42, 37, 9, 3, 24, 3, 9]"
817,mul,2,7176,7236,0,2,0,"{'ok': True, 'value': 7176, 'stdout': '7176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07425427436828613}",1,Compute: 78 * 92
818,mul,16,16802887381068756700763152681152,16149334477667688,0,1689933086335687751847874176,0,"{'ok': True, 'value': 16802887381068756700763152681152, 'stdout': '16802887381068756700763152681152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09448814392089844}",1,Compute: 8999668382178408 * 1867056281133944
819,rod,8,192,22,0,30,0,"{'ok': True, 'value': 192, 'stdout': '192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0732419490814209}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [24, 15, 18, 10, 14, 7, 4, 13]"
820,mul,16,6579371079012979900849638042993,6400000000000000,0,70306513493229418644665586,0,"{'ok': True, 'value': 6579371079012979900849638042993, 'stdout': '6579371079012979900849638042993\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07578325271606445}",1,Compute: 5806696158822369 * 1133066187562897
821,rod,16,400,13,0,65,0,"{'ok': True, 'value': 400, 'stdout': '400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07913899421691895}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [25, 19, 3, 36, 45, 24, 23, 20, 39, 24, 6, 3, 22, 24, 24, 20]"
822,mul{'ok': True, 'value': 4004234669926908159811952428527308152369511139476348621107268916, 'stdout': '4004234669926908159811952428527308152369511139476348621107268916\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0826117992401123}",1,Compute: 81788157727699738322409455579132 * 48958611872128859827901149917363
823,mul,32,868411236243029759288173813620346206986671953897361732750973394,88675309486659449427437977079674,0,860313444384444404644444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 868411236243029759288173813620346206986671953897361732750973394, 'stdout': '868411236243029759288173813620346206986671953897361732750973394\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08203673362731934}",1,Compute: 15388577840661053700187454729487 * 56432195699620612083230495419662
824,ilp_prod,4,29,1,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/52181f55e8ef40339efd7956dacb11c2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/52181f55e8ef40339efd7956dacb11c2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 31 RHS\nAt line 36 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 19.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16109442710876465}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 7, 11]
consumption (rows=resources) = [[4, 3, 4], [2, 1, 3], [3, 1, 1]]
capacity = [11, 13, 16]
upper_bounds = [3, 3, 3]"
825,mul,16,49415655438515762194894614896934,4948891458332445091865921,0,493864517560795554466449466,0,"{'ok': True, 'value': 49415655438515762194894614896934, 'stdout': '49415655438515762194894614896934\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07463240623474121}",1,Compute: 8357708035663418 * 5912584554001263
826,sub,4,797,797,1,897,0,"{'ok': True, 'value': 797, 'stdout': '797\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0745546817779541}",1,Compute: 6409 - 5612
827,ilp_prod,16,267,158,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [47, 28, 9, 31, 41, 43]
consumption (rows=resources) = [[11, 3, 4, 13, 10, 6], [6, 15, 8, 8, 1, 1], [16, 6, 14, 11, 2, 11], [11, 16, 1, 10, 2, 16]]
capacity = [57, 52, 46, 55]
upper_bounds = [3, 3, 3, 4, 5, 3]"
828,knap,16,415,136,0,0,0,"{'ok': True, 'value': 415, 'stdout': '415\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07568883895874023}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 24, 28, 26, 12, 16, 31, 9, 10, 10, 32, 1, 13, 17, 24, 19]
V = [51, 28, 52, 53, 15, 32, 13, 50, 36, 43, 50, 36, 33, 29, 20, 6]
C = 136"
829,knap,8,98,105,0,0,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1010284423828125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 2, 2, 7, 1, 14, 13]
V = [28, 31, 6, 7, 22, 3, 29, 17]
C = 21"
830,ilp_prod,32,265,The solution to the problem is to use a linear programming approach to find the optimal values of the decision variables that maximize the total profit while satisfying the resource constraints.,0,250,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_bs02uty5/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_bs02uty5/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15798282623291016}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 21, 73, 49, 20, 96]
consumption (rows=resources) = [[25, 11, 11, 21, 13, 8], [27, 23, 24, 28, 18, 25], [16, 12, 9, 7, 31, 19], [10, 25, 5, 28, 11, 16]]
capacity = [99, 74, 78, 96]
upper_bounds = [3, 3, 3, 3, 3, 3]"
831,sub,16,8029663346026196,1238196031268159,0,8029663346028206,0,"{'ok': True, 'value': 8029663346026196, 'stdout': '8029663346026196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08561038970947266}",1,Compute: 9267859377294355 - 1238196031268159
832,mul,16,19359628598243347337627260321272,456395012,0,19344489823249468664686666,0,"{'ok': True, 'value': 19359628598243347337627260321272, 'stdout': '19359628598243347337627260321272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07355356216430664}",1,Compute: 7088323260515597 * 2731200015394776
833,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0731191635131836}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abac""
T = ""acdcb"""
834,knap,2,8,13,0,-1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08417367935180664}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 1]
V = [7, 8, 5]
C = 2"
835,ilp_partition,8,1,1,1,113,0,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0829310417175293}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 22, 18, 19, 17, 4, 9, 4]"
836,knap,32,1680,1043,0,32,0,"{'ok': True, 'value': 1680, 'stdout': '1680\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08878636360168457}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 63, 16, 10, 15, 26, 36, 47, 2, 53, 32, 33, 46, 32, 13, 39, 37, 55, 13, 15, 56, 8, 11, 17, 45, 47, 42, 25, 60, 46, 14, 22]
V = [62, 95, 64, 2, 103, 128, 102, 10, 46, 49, 47, 84, 89, 36, 101, 59, 82, 120, 14, 89, 87, 73, 114, 34, 47, 127, 95, 60, 53, 110, 51, 35]
C = 491"
837,lcs,16,10,6,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08655524253845215}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baaadaacbbcbcacc""
T = ""baccbaabbbadccbcc"""
838,knap,8,103,103,1,0,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07314300537109375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 14, 15, 6, 16, 5, 13, 8]
V = [9, 15, 13, 20, 25, 28, 30, 8]
C = 46"
839,ilp_partition,8,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07507014274597168}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 20, 2, 2, 1, 10, 18, 24]"
840,ilp_prod,2,22,26,0,7,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e2ce6b3bffc14a62bdf8cfb978679818-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e2ce6b3bffc14a62bdf8cfb978679818-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 12.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14820384979248047}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[2, 3], [2, 1]]
capacity = [10, 7]
upper_bounds = [3, 3]"
841,ilp_partition,16,0,1,0,37,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20253348350524902}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 34, 37, 14, 48, 46, 46, 33, 40, 35, 27, 2, 11, 13, 17, 31]"
842,knap,4,22,22,1,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08860373497009277}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 7, 4, 3]
V = [2, 16, 15, 6]
C = 10"
843,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07622480392456055}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 86, 62, 17, 56, 56, 61, 62, 66, 83, 68, 52, 59, 75, 40, 73, 71, 9, 55, 34, 45, 16, 65, 62]"
844,ilp_assign,32,74,115,0,201,0,"{'ok': True, 'value': 74, 'stdout': '74\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38955020904541016}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[94, 33, 90, 60, 57, 36, 5], [51, 32, 64, 67, 92, 2, 30], [6, 64, 12, 41, 82, 71, 29], [71, 56, 64, 13, 23, 50, 80], [1, 55, 28, 54, 20, 5, 7], [63, 95, 14, 48, 46, 89, 7], [2, 76, 18, 13, 6, 17, 63]]"
845,lcs,32,19,15,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08001518249511719}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcaccaddcbbaccdaabcacdcdabbcbbbb""
T = ""cccabbcabbcdbadbcbbaacdbacbcaacb"""
846,knap,16,413,1043,0,0,0,"{'ok': True, 'value': 413, 'stdout': '413\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08311891555786133}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 13, 15, 10, 4, 1, 14, 27, 27, 19, 3, 2, 25, 30, 22, 26]
V = [57, 8, 47, 2, 12, 40, 63, 60, 40, 11, 23, 33, 36, 29, 33, 45]
C = 123"
847,ilp_partition,8,1,1,1,12,0,"{'ok': True, 'value': 67, 'stdout': '67\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08823394775390625}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 11, 22, 1, 24, 3, 2, 12]"
848,mul,4,11379431,11268431,0,11247291,0,"{'ok': True, 'value': 11379431, 'stdout': '11379431\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07844066619873047}",1,Compute: 2857 * 3983
849,knap,2,8,14,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0861661434173584}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 3]
V = [8, 3, 8]
C = 5"
850,mul,4,34311993,250,0,34336733,0,"{'ok': True, 'value': 34311993, 'stdout': '34311993\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09186506271362305}",1,Compute: 6753 * 5081
851,add,16,16443089555312043,16443089555311443,0,16443089555312043,1,"{'ok': True, 'value': 16443089555312043, 'stdout': '16443089555312043\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08476877212524414}",1,Compute: 7001354504224700 + 9441735051087343
852,rod,2,10,6,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09626245498657227}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 6]"
853,rod,2,10,6,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07347488403320312}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 6]"
854,ilp_prod,32,295,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are that the total consumption of each resource must not exceed its capacity and that the quantities produced are non-negative. The upper bounds on the quantity of each product that can be produced are given by upper_bounds[j]. The problem is then solved using a linear programming solver, and the maximum profit is the value of the objective function after solving the problem.",0,88,0,"{'ok': True, 'value': 129, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b30383f46c2f4cc28e189f6ae4b6882c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b30383f46c2f4cc28e189f6ae4b6882c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 16 COLUMNS\nAt line 101 RHS\nAt line 113 BOUNDS\nAt line 120 ENDATA\nProblem MODEL has 11 rows, 6 columns and 66 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 133.448 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -129 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                129.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n129.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14988231658935547}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [43, 9, 23, 65, 52, 61]
consumption (rows=resources) = [[16, 22, 15, 30, 2, 2], [13, 17, 8, 7, 24, 28], [28, 19, 14, 11, 12, 15], [20, 27, 14, 5, 23, 29]]
capacity = [88, 90, 108, 95]
upper_bounds = [3, 3, 5, 3, 3, 3]"
855,rod,4,20,12,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_mdu3k_76/main.py"", line 20, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_mdu3k_76/main.py"", line 10, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0746927261352539}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 10, 11, 11]"
856,lcs,16,8,7,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07522273063659668}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbdbdcbcdaddbdc""
T = ""bdcababbcdbcbcd"""
857,rod,32,863,84,0,1,0,"{'ok': True, 'value': 863, 'stdout': '863\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07510638236999512}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [6, 23, 84, 64, 35, 25, 5, 51, 33, 54, 52, 49, 59, 91, 10, 38, 21, 37, 60, 14, 80, 70, 89, 71, 83, 39, 48, 3, 78, 61, 58, 45]"
858,lcs,4,1,3,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07538437843322754}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbca""
T = ""aaddd"""
859,knap,2,10,11,0,-1,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0822911262512207}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 2]
V = [9, 9, 1]
C = 4"
860,ilp_prod,32,780,"The solution to this problem involves setting up and solving a linear programming model with the objective of maximizing total profit, subject to resource constraints and integer constraints on the quantities produced.",0,1590,0,"{'ok': True, 'value': 159, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/64ec5720f4f24404970e99cee9be6cdb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/64ec5720f4f24404970e99cee9be6cdb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 179.19 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -159 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                159.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n159.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1608123779296875}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [53, 10, 78, 77, 50, 6]
consumption (rows=resources) = [[29, 24, 2, 29, 23, 27], [21, 30, 6, 29, 15, 21], [23, 11, 3, 9, 30, 2], [23, 29, 1, 20, 17, 7]]
capacity = [114, 71, 100, 116]
upper_bounds = [3, 3, 10, 3, 3, 3]"
861,knap,8,97,103,0,0,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0856773853302002}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 8, 12, 9, 15, 14, 9, 8]
V = [5, 14, 17, 27, 24, 20, 2, 32]
C = 43"
862,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07499837875366211}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbcbbccbddacacabdcdbbccabccabaa""
T = ""bacbaacaccdacaccadcabdbcccbddbc"""
863,ilp_prod,2,28,23,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/edda7a18cb6949ab91b9f0f729bb7424-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/edda7a18cb6949ab91b9f0f729bb7424-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 17.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16138362884521484}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[2, 2], [1, 3]]
capacity = [9, 10]
upper_bounds = [4, 3]"
864,ilp_assign,32,152,186,0,26,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37845325469970703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 78, 82, 6, 62, 53, 46], [68, 94, 13, 2, 84, 30, 52], [30, 37, 57, 52, 89, 65, 34], [85, 35, 76, 47, 55, 92, 19], [26, 91, 14, 66, 23, 62, 34], [9, 46, 93, 38, 88, 92, 33], [38, 66, 39, 86, 37, 48, 32]]"
865,mul,8,5779690699265160,5234000000000000,0,5838444593258600,0,"{'ok': True, 'value': 5779690699265160, 'stdout': '5779690699265160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0856635570526123}",1,Compute: 76377432 * 75672755
866,add,4,12083,22161,0,12083,1,"{'ok': True, 'value': 12083, 'stdout': '12083\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07494950294494629}",1,Compute: 8877 + 3206
867,mul,32,1188824272764474230870984640589445266212505174099223120118892947,11733588665234411319845239355610,0,1180363043485242122236484656031654448757,0,"{'ok': True, 'value': 1188824272764474230870984640589445266212505174099223120118892947, 'stdout': '1188824272764474230870984640589445266212505174099223120118892947\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07234764099121094}",1,Compute: 38545962247447836399484126185033 * 30841732919592307726218465272059
868,ilp_prod,32,315,260,0,12,0,"{'ok': True, 'value': 99, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a70042b12c6540b4bb4e2c9ed385bcaa-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a70042b12c6540b4bb4e2c9ed385bcaa-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 23 COLUMNS\nAt line 150 RHS\nAt line 169 BOUNDS\nAt line 176 ENDATA\nProblem MODEL has 18 rows, 6 columns and 108 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 119.9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -99 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                99.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n99.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15669560432434082}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 4, 94, 19, 69, 11]
consumption (rows=resources) = [[22, 14, 16, 22, 26, 14], [9, 22, 24, 25, 30, 8], [29, 12, 19, 25, 1, 15], [26, 17, 14, 1, 27, 18]]
capacity = [109, 88, 118, 120]
upper_bounds = [4, 4, 3, 3, 3, 6]"
869,sub,8,51490694,51490694,1,51490694,1,"{'ok': True, 'value': 51490694, 'stdout': '51490694\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08688569068908691}",1,Compute: 94839854 - 43349160
870,ilp_prod,32,268,1009,0,252,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1hgc5_7g/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_1hgc5_7g/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20092558860778809}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 87, 64, 34, 60, 53]
consumption (rows=resources) = [[21, 19, 30, 27, 32, 26], [16, 19, 24, 16, 12, 1], [17, 14, 1, 28, 15, 21], [26, 30, 17, 20, 29, 10]]
capacity = [109, 105, 70, 76]
upper_bounds = [3, 3, 3, 3, 3, 3]"
871,ilp_prod,16,211,150,0,204,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xt_o2j2s/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_xt_o2j2s/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1709909439086914}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 33, 45, 4, 22, 15]
consumption (rows=resources) = [[9, 9, 12, 9, 3, 14], [13, 5, 7, 3, 13, 3], [5, 4, 14, 2, 5, 16], [6, 2, 4, 12, 12, 1]]
capacity = [56, 42, 64, 48]
upper_bounds = [3, 6, 4, 4, 3, 4]"
872,ilp_prod,32,255,The solution to this problem would involve setting up and solving a linear programming model to find the optimal values of the decision variables that maximize the total profit while satisfying the resource constraints and non-negativity constraints.,0,201,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ew5jxojr/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ew5jxojr/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1407771110534668}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [67, 5, 30, 18, 32, 54]
consumption (rows=resources) = [[29, 19, 26, 3, 22, 13], [16, 24, 7, 31, 32, 25], [6, 28, 21, 27, 17, 29], [5, 15, 22, 3, 13, 13]]
capacity = [109, 91, 99, 64]
upper_bounds = [3, 3, 3, 3, 3, 3]"
873,ilp_partition,4,1,0,0,33,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0985727310180664}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 8, 12, 5]"
874,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07491326332092285}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 4, 24, 5, 3, 10, 8, 11]"
875,mul,32,2109537668492025705575962066536367445678013265847869316378915192,,0,210304640553665334464444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 2109537668492025705575962066536367445678013265847869316378915192, 'stdout': '2109537668492025705575962066536367445678013265847869316378915192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834200382232666}",1,Compute: 47288326304828966852300092975784 * 44610114870498280663171333563763
876,ilp_prod,8,67,60,0,64,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_tjyu1f0a/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_tjyu1f0a/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15081477165222168}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 16, 17, 7]
consumption (rows=resources) = [[2, 1, 7, 4], [3, 3, 4, 3], [5, 1, 2, 8], [4, 7, 5, 3]]
capacity = [22, 32, 31, 26]
upper_bounds = [6, 3, 3, 3]"
877,sub,16,7405541397520432,7405541397520432,1,7405541397520432,1,"{'ok': True, 'value': 7405541397520432, 'stdout': '7405541397520432\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07340502738952637}",1,Compute: 9638956263820423 - 2233414866299991
878,knap,2,9,14,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07385993003845215}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 5]
V = [9, 8, 7]
C = 5"
879,mul,2,682,682,1,31,0,"{'ok': True, 'value': 682, 'stdout': '682\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08674430847167969}",1,Compute: 31 * 22
880,add,2,140,137,0,140,1,"{'ok': True, 'value': 140, 'stdout': '140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07254242897033691}",1,Compute: 63 + 77
881,lcs,16,8,7,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10362052917480469}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbaadbddbcddccad""
T = ""ddaccbcccbdbdcd"""
882,sub,32,57099222370674126150187507620363,97468930774584126351398079925708,0,57099222369674126150187507620363,0,"{'ok': True, 'value': 57099222370674126150187507620363, 'stdout': '57099222370674126150187507620363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07714486122131348}",1,Compute: 92791666735892049240821079925708 - 35692444365217923090633572305345
883,mul,32,1900570926905040361396014286377366118913209761250478894540968560,194569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945694569456945,0,190544445348654858644884444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 1900570926905040361396014286377366118913209761250478894540968560, 'stdout': '1900570926905040361396014286377366118913209761250478894540968560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09083867073059082}",1,Compute: 27945782447648373084194005634747 * 68009222159566789254436532070480
884,sub,4,54,54,1,-54,0,"{'ok': True, 'value': 54, 'stdout': '54\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07429838180541992}",1,Compute: 7972 - 7918
885,ilp_assign,32,126,187,0,76,0,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3970479965209961}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 55, 43, 69, 53, 83, 91], [3, 4, 39, 32, 77, 7, 8], [18, 19, 49, 75, 96, 94, 38], [56, 70, 82, 22, 73, 66, 26], [53, 89, 17, 66, 87, 38, 16], [86, 95, 61, 50, 25, 30, 32], [52, 68, 14, 16, 55, 14, 76]]"
886,ilp_partition,4,3,1,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0749826431274414}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 1, 5, 12]"
887,add,2,126,126,1,126,1,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07367324829101562}",1,Compute: 31 + 95
888,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08604264259338379}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [80, 81, 22, 79, 59, 53, 19, 41, 9, 42, 7, 62, 95, 43, 67, 92, 81, 89, 1, 61, 91, 77, 31, 4]"
889,add,8,129421582,73610529,0,129421582,1,"{'ok': True, 'value': 129421582, 'stdout': '129421582\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07240033149719238}",1,Compute: 53060529 + 76361053
890,lcs,8,6,5,0,0,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0732734203338623}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbabcaca""
T = ""abdbbabca"""
891,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08350706100463867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""dca"""
892,mul,8,5946489081335748,12,0,588832455381788,0,"{'ok': True, 'value': 5946489081335748, 'stdout': '5946489081335748\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07755041122436523}",1,Compute: 86790279 * 68515612
893,knap,4,15,13,0,0,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07543015480041504}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 2, 6, 1]
V = [10, 1, 7, 5]
C = 8"
894,knap,16,338,102,0,-1,0,"{'ok': True, 'value': 338, 'stdout': '338\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07596802711486816}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 32, 7, 16, 6, 1, 3, 13, 13, 23, 3, 23, 32, 10, 4, 6]
V = [50, 8, 43, 34, 8, 11, 7, 39, 27, 53, 5, 25, 44, 23, 8, 50]
C = 97"
895,rod,4,20,20,1,3,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07527661323547363}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 10, 3, 2]"
896,ilp_assign,16,48,105,0,110,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37741780281066895}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[43, 38, 28, 14, 14, 29, 21], [22, 8, 30, 47, 24, 25, 22], [12, 30, 31, 16, 20, 21, 18], [15, 48, 16, 4, 42, 30, 2], [46, 22, 48, 11, 31, 15, 4], [3, 21, 5, 44, 46, 18, 13], [1, 33, 20, 36, 17, 1, 40]]"
897,rod,32,848,1053,0,545,0,"{'ok': True, 'value': 848, 'stdout': '848\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11323213577270508}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [23, 53, 16, 82, 62, 10, 64, 25, 94, 88, 17, 9, 59, 13, 32, 51, 29, 65, 47, 26, 83, 63, 87, 3, 70, 3, 86, 22, 64, 33, 56, 29]"
898,knap,8,96,110,0,13,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07921242713928223}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 7, 13, 3, 13, 4, 6, 13]
V = [30, 26, 20, 14, 26, 5, 13, 12]
C = 34"
899,knap,32,1472,1024,0,59,0,"{'ok': True, 'value': 1472, 'stdout': '1472\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08042168617248535}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [44, 57, 42, 39, 61, 56, 51, 58, 2, 39, 61, 61, 54, 55, 43, 22, 4, 59, 21, 32, 43, 54, 21, 21, 9, 46, 34, 39, 4, 19, 49, 25]
V = [16, 57, 47, 78, 97, 17, 66, 52, 79, 111, 127, 46, 31, 49, 26, 85, 97, 79, 93, 6, 99, 56, 43, 127, 54, 57, 55, 57, 23, 12, 1, 45]
C = 612"
900,add,4,8495,8495,1,8495,1,"{'ok': True, 'value': 8495, 'stdout': '8495\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07722091674804688}",1,Compute: 1497 + 6998
901,mul,4,1648900,1,0,1648999,0,"{'ok': True, 'value': 1648900, 'stdout': '1648900\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07916855812072754}",1,Compute: 1499 * 1100
902,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07981467247009277}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 4]"
903,lcs,8,5,4,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07458829879760742}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbadccd""
T = ""cacadbcc"""
904,knap,2,11,11,1,-1,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07378673553466797}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 3]
V = [6, 10, 1]
C = 4"
905,sub,16,5089159775552442,5089159775552442,1,-5129159775552442,0,"{'ok': True, 'value': 5089159775552442, 'stdout': '5089159775552442\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07194042205810547}",1,Compute: 9849168882640712 - 4760009107088270
906,ilp_assign,8,28,56,0,73,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4037802219390869}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 9, 3, 9, 22, 6, 18], [23, 11, 10, 14, 15, 3, 2], [2, 19, 22, 15, 23, 21, 7], [15, 14, 6, 14, 4, 2, 9], [13, 23, 1, 24, 10, 7, 21], [14, 22, 22, 3, 23, 4, 13], [15, 11, 11, 9, 11, 7, 23]]"
907,ilp_prod,2,18,31,0,9,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/daa60167053342aeae371a0a53ef55b7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/daa60167053342aeae371a0a53ef55b7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 13.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 12.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14833426475524902}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 5]
consumption (rows=resources) = [[2, 2], [1, 3]]
capacity = [7, 9]
upper_bounds = [3, 3]"
908,mul{'ok': True, 'value': 4338994400706925254859448331322709395950153416174526662723729684, 'stdout': '4338994400706925254859448331322709395950153416174526662723729684\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08322739601135254}",1,Compute: 59511932306460754330893514640668 * 72909654123865070521575702175763
909,ilp_assign,8,23,36,0,46,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39780306816101074}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 15, 17, 7, 14, 6, 9], [6, 7, 13, 1, 23, 11, 18], [13, 23, 21, 2, 4, 10, 17], [10, 10, 14, 10, 2, 1, 1], [3, 14, 5, 3, 18, 7, 15], [2, 13, 20, 1, 1, 21, 23], [13, 4, 6, 14, 12, 13, 10]]"
910,add,16,6886044221337110,6886044221337110,1,6886044221337110,1,"{'ok': True, 'value': 6886044221337110, 'stdout': '6886044221337110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07718443870544434}",1,Compute: 5453465314127166 + 1432578907209944
911,rod,8,46,20,0,6,0,"{'ok': True, 'value': 46, 'stdout': '46\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0909581184387207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 6, 19, 6, 7, 10, 20, 5]"
912,mul{'ok': True, 'value': 27990191826865761066799420060827, 'stdout': '27990191826865761066799420060827\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07342028617858887}",1,Compute: 9230693351799231 * 3032295707386917
913,ilp_prod,8,78,60,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_gcqgvnt6/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_gcqgvnt6/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14148259162902832}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 18, 4, 17]
consumption (rows=resources) = [[1, 6, 4, 6], [1, 8, 3, 2], [7, 3, 6, 1], [1, 6, 3, 5]]
capacity = [28, 30, 27, 27]
upper_bounds = [3, 3, 4, 4]"
914,sub,16,940911850041247,8522186002957746,0,9209911850041247,0,"{'ok': True, 'value': 940911850041247, 'stdout': '940911850041247\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08334803581237793}",1,Compute: 9463097852998993 - 8522186002957746
915,ilp_partition,16,0,1,0,20,0,"{'ok': True, 'value': 294, 'stdout': '294\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07320284843444824}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 9, 20, 20, 1, 28, 5, 46, 47, 21, 32, 7, 5, 26, 27, 8]"
916,sub,16,1053120621883580,10532206218885780,0,1053122621888678,0,"{'ok': True, 'value': 1053120621883580, 'stdout': '1053120621883580\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0740656852722168}",1,Compute: 8092708122124774 - 7039587500241194
917,sub{'ok': True, 'value': 6577740120674823, 'stdout': '6577740120674823\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07734847068786621}",1,Compute: 9813929705182274 - 3236189584507451
918,ilp_assign,4,18,17,0,27,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3841724395751953}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 12, 7, 6], [6, 11, 12, 2], [10, 4, 11, 1], [8, 4, 12, 4]]"
919,ilp_assign,32,89,187,0,27,0,"{'ok': True, 'value': 89, 'stdout': '89\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3881685733795166}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[74, 34, 35, 3, 17, 3, 76], [39, 58, 49, 10, 61, 50, 17], [92, 19, 64, 65, 52, 22, 35], [11, 92, 14, 82, 32, 49, 85], [40, 52, 78, 15, 19, 19, 27], [26, 24, 96, 74, 20, 25, 40], [1, 84, 81, 62, 72, 66, 27]]"
920,ilp_partition,2,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07843923568725586}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 4, 4]"
921,rod,32,1216,1055,0,659,0,"{'ok': True, 'value': 1216, 'stdout': '1216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07644486427307129}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [38, 64, 14, 20, 78, 59, 38, 81, 81, 83, 68, 35, 92, 49, 46, 72, 48, 49, 67, 61, 6, 29, 61, 85, 25, 20, 55, 52, 64, 4, 65, 70]"
922,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07829713821411133}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdaa""
T = ""dbd"""
923,ilp_partition,16,0,1,0,6,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20317697525024414}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 28, 16, 36, 22, 27, 5, 31, 9, 15, 18, 6, 24, 41, 9, 33]"
924,add,4,8460,8460,1,8460,1,"{'ok': True, 'value': 8460, 'stdout': '8460\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07191586494445801}",1,Compute: 4815 + 3645
925,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07344722747802734}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 3]"
926,rod,32,1184,1050,0,659,0,"{'ok': True, 'value': 1184, 'stdout': '1184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0744774341583252}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [36, 74, 50, 17, 55, 73, 96, 77, 76, 90, 53, 34, 18, 12, 21, 10, 12, 35, 85, 40, 90, 20, 91, 91, 70, 45, 20, 39, 6, 93, 43, 59]"
927,knap,2,9,15,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07323813438415527}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 4]
V = [7, 9, 8]
C = 5"
928,ilp_prod,16,117,105,0,6,0,"{'ok': True, 'value': 58, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/92c9be4e21ad4a3cb61bc24db1c9f432-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/92c9be4e21ad4a3cb61bc24db1c9f432-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 21 COLUMNS\nAt line 136 RHS\nAt line 153 BOUNDS\nAt line 160 ENDATA\nProblem MODEL has 16 rows, 6 columns and 96 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 80.7857 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -58 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                58.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n58.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14673614501953125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [29, 27, 36, 22, 7, 30]
consumption (rows=resources) = [[8, 10, 10, 8, 3, 9], [7, 8, 6, 7, 4, 14], [4, 15, 12, 5, 4, 11], [14, 15, 2, 8, 10, 10]]
capacity = [35, 64, 54, 39]
upper_bounds = [3, 3, 3, 4, 3, 3]"
929,ilp_assign,2,3,3,1,7,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3976881504058838}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [1, 4]]"
930,rod,2,12,12,1,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07275056838989258}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 6]"
931,ilp_partition,32,0,1,0,90,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19334030151367188}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [84, 35, 21, 75, 25, 35, 42, 90, 34, 2, 34, 23, 50, 32, 95, 16, 77, 74, 8, 91, 53, 13, 72, 87]"
932,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08152270317077637}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [52, 68, 18, 55, 33, 31, 43, 87, 41, 68, 3, 23, 91, 77, 96, 58, 16, 70, 66, 22, 42, 65, 66, 81]"
933,sub,32,54463883099527206707035020606995,5000000000000000000000000000000,0,54463883109527206707035020606995,0,"{'ok': True, 'value': 54463883099527206707035020606995, 'stdout': '54463883099527206707035020606995\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08669638633728027}",1,Compute: 98019511349435400950264035046700 - 43555628249908194243229014439705
934,ilp_partition,8,0,100,0,8,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07499170303344727}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 8, 24, 3, 24, 16, 17, 8]"
935,rod,4,24,14,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07510757446289062}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 2, 8, 7]"
936,ilp_assign,4,18,0,0,15,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38663172721862793}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3, 10, 4], [3, 1, 3, 9], [9, 6, 8, 9], [6, 3, 9, 9]]"
937,mul,8,2333618567254070,2,0,232844443377210,0,"{'ok': True, 'value': 2333618567254070, 'stdout': '2333618567254070\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07666707038879395}",1,Compute: 48952367 * 47671210
938,rod,16,197,1,0,64,0,"{'ok': True, 'value': 197, 'stdout': '197\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07629776000976562}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [2, 17, 39, 25, 48, 7, 12, 15, 35, 6, 23, 2, 18, 43, 28, 14]"
939,ilp_partition,8,1,1,1,0,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09048223495483398}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 10, 17, 16, 14, 24, 7]"
940,rod,32,2848,1055,0,0,0,"{'ok': True, 'value': 2848, 'stdout': '2848\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07310843467712402}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [89, 17, 11, 73, 9, 92, 95, 31, 80, 83, 65, 2, 41, 27, 53, 48, 72, 31, 59, 59, 77, 78, 44, 69, 35, 31, 29, 72, 36, 54, 5, 38]"
941,sub,2,17,17,1,17,1,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0728003978729248}",1,Compute: 38 - 21
942,sub,32,23031423049388579293099608102416,,0,23031423049388580293100608102416,0,"{'ok': True, 'value': 23031423049388579293099608102416, 'stdout': '23031423049388579293099608102416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07648539543151855}",1,Compute: 99822076314571197853663072601985 - 76790653265182618560563464499569
943,mul,4,25143916,119460,0,25283196,0,"{'ok': True, 'value': 25143916, 'stdout': '25143916\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07314586639404297}",1,Compute: 5947 * 4228
944,mul,2,851,851,1,851,1,"{'ok': True, 'value': 851, 'stdout': '851\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07253241539001465}",1,Compute: 23 * 37
945,ilp_assign,32,116,187,0,209,0,"{'ok': True, 'value': 116, 'stdout': '116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.379558801651001}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[79, 71, 83, 81, 78, 36, 33], [47, 3, 41, 45, 14, 30, 34], [6, 71, 38, 24, 69, 87, 63], [56, 20, 28, 53, 43, 7, 32], [53, 54, 85, 61, 71, 83, 18], [5, 74, 37, 11, 22, 94, 44], [19, 58, 55, 81, 14, 89, 67]]"
946,ilp_prod,2,28,24,0,7,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e28dfc8f3685454c8af9a8dbf9621bc0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e28dfc8f3685454c8af9a8dbf9621bc0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9.33333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 8.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18796157836914062}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8]
consumption (rows=resources) = [[1, 3], [1, 2]]
capacity = [7, 7]
upper_bounds = [7, 3]"
947,sub,2,45,45,1,45,1,"{'ok': True, 'value': 45, 'stdout': '45\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08679556846618652}",1,Compute: 57 - 12
948,add,16,11109222554804039,22443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222443222,0,11109222554804040,0,"{'ok': True, 'value': 11109222554804039, 'stdout': '11109222554804039\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07570528984069824}",1,Compute: 5615018625214178 + 5494203929589861
949,mul,2,4160,4220,0,4160,1,"{'ok': True, 'value': 4160, 'stdout': '4160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08464407920837402}",1,Compute: 65 * 64
950,knap,4,24,24,1,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07438039779663086}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 7, 8, 1]
V = [4, 3, 14, 10]
C = 10"
951,ilp_partition,4,1,0,0,21,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_kng3ncnv/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_kng3ncnv/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08745265007019043}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 2, 1, 7]"
952,ilp_assign,2,3,4,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3920323848724365}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 6], [2, 1]]"
953,ilp_assign,4,7,0,0,11,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4390120506286621}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 8, 1, 2], [5, 8, 2, 7], [8, 1, 12, 1], [2, 6, 1, 4]]"
954,sub,8,10312713,10312713,1,10312713,1,"{'ok': True, 'value': 10312713, 'stdout': '10312713\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08290672302246094}",1,Compute: 58149869 - 47837156
955,rod,8,104,30,0,1,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0899040699005127}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 1, 7, 12, 13, 12, 15, 6]"
956,knap,32,1647,1047,0,7,0,"{'ok': True, 'value': 1647, 'stdout': '1647\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08918118476867676}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [62, 9, 14, 54, 7, 13, 33, 46, 3, 20, 6, 16, 16, 3, 40, 26, 40, 7, 6, 36, 46, 42, 33, 5, 54, 43, 32, 59, 61, 23, 45, 48]
V = [19, 30, 62, 15, 117, 96, 124, 37, 71, 125, 38, 124, 33, 37, 77, 15, 34, 93, 33, 75, 19, 126, 35, 14, 73, 33, 62, 78, 27, 103, 77, 71]
C = 474"
957,ilp_assign,32,117,110,0,1,0,"{'ok': True, 'value': 117, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/19e3988b88074224b32d0ffad7a9dd07-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/19e3988b88074224b32d0ffad7a9dd07-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 117 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 117\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 117 - took 0.00 seconds\nCbc0012I Integer solution of 117 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 117, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 117 to 117\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                117.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 117.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1588430404663086}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 91, 40, 6, 54, 13, 15], [6, 23, 17, 37, 27, 50, 67], [53, 13, 28, 54, 50, 40, 57], [85, 5, 93, 70, 59, 95, 85], [66, 87, 96, 86, 85, 45, 94], [5, 47, 15, 77, 48, 89, 13], [85, 25, 40, 56, 14, 10, 94]]"
958,add,8,87827983,87828783,0,87828983,0,"{'ok': True, 'value': 87827983, 'stdout': '87827983\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07647061347961426}",1,Compute: 75856852 + 11971131
959,ilp_assign,2,6,6,1,11,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38953328132629395}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 5], [6, 5]]"
960,ilp_prod,8,78,86,0,2,0,"{'ok': True, 'value': 78, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/251a6e504e9442ccbba224abdff18585-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/251a6e504e9442ccbba224abdff18585-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 81.844 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -55 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -78 found by DiveCoefficient after 6 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 4\nCbc0013I At root node, 2 cuts changed objective from -81.844037 to -78 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 7 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 7 row cuts average 3.6 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 3 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -78, took 6 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -81.844 to -78\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 4 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                78.00000000\nEnumerated nodes:               0\nTotal iterations:               6\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n78.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19297575950622559}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 16, 5, 23]
consumption (rows=resources) = [[4, 7, 8, 7], [3, 1, 5, 7], [1, 7, 4, 6], [7, 1, 2, 6]]
capacity = [30, 16, 27, 28]
upper_bounds = [4, 3, 3, 3]"
961,sub,32,53167777407335784906239067500053,53167777407335784906239067500053,1,53167777407335784906239067500053,1,"{'ok': True, 'value': 53167777407335784906239067500053, 'stdout': '53167777407335784906239067500053\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09574699401855469}",1,Compute: 98696934611807155942204822718442 - 45529157204471371035965755218389
962,mul,2,6468,84,0,2,0,"{'ok': True, 'value': 6468, 'stdout': '6468\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07915949821472168}",1,Compute: 77 * 84
963,ilp_partition,4,3,1,0,6,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08951067924499512}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 6, 5, 6]"
964,ilp_partition,4,7,0,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ygmlxi_5/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_ygmlxi_5/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07600069046020508}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 2, 2, 1]"
965,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07514619827270508}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccb""
T = ""dadd"""
966,ilp_prod,2,21,42,0,9,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/42306a6a30a14f2a8cc661ac7f9e04a2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/42306a6a30a14f2a8cc661ac7f9e04a2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 21.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15046358108520508}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[2, 3], [3, 2]]
capacity = [7, 9]
upper_bounds = [3, 3]"
967,sub,16,4258492778957619,2609001125921211,0,4258492778957619,1,"{'ok': True, 'value': 4258492778957619, 'stdout': '4258492778957619\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08804512023925781}",1,Compute: 6867493904878830 - 2609001125921211
968,ilp_prod,16,86,155,0,150,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_20txxulw/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_20txxulw/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17708182334899902}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 43, 42, 13, 15, 35]
consumption (rows=resources) = [[16, 15, 6, 7, 7, 12], [11, 16, 15, 16, 15, 13], [3, 6, 9, 1, 14, 15], [1, 14, 3, 13, 9, 9]]
capacity = [37, 32, 59, 34]
upper_bounds = [3, 3, 3, 3, 3, 3]"
969,ilp_prod,16,239,166,0,44,0,"{'ok': True, 'value': 100, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/26836a4c1a00471b816ab72ac78326dd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/26836a4c1a00471b816ab72ac78326dd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 122.222 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -100 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                100.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n100.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1696639060974121}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 29, 37, 32, 43, 9]
consumption (rows=resources) = [[1, 1, 2, 1, 3, 9], [3, 1, 5, 16, 2, 2], [3, 1, 11, 9, 8, 7], [5, 9, 10, 3, 12, 7]]
capacity = [52, 59, 42, 44]
upper_bounds = [8, 4, 3, 3, 3, 5]"
970,sub,8,46739969,46740069,0,46740069,0,"{'ok': True, 'value': 46739969, 'stdout': '46739969\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07379293441772461}",1,Compute: 70246690 - 23506721
971,sub,8,44778159,44778159,1,44778159,1,"{'ok': True, 'value': 44778159, 'stdout': '44778159\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07242321968078613}",1,Compute: 80087790 - 35309631
972,mul,2,588,588,1,588,1,"{'ok': True, 'value': 588, 'stdout': '588\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08975529670715332}",1,Compute: 42 * 14
973,sub,8,5979837,49382743,0,49382743,0,"{'ok': True, 'value': 5979837, 'stdout': '5979837\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07474565505981445}",1,Compute: 55362580 - 49382743
974,ilp_prod,4,30,36,0,36,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2cd74aea66224bd6aeee19edcf124ab9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2cd74aea66224bd6aeee19edcf124ab9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8.57143 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -6 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n6.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14954066276550293}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 10, 9]
consumption (rows=resources) = [[1, 1, 2], [4, 1, 3], [4, 3, 3]]
capacity = [12, 9, 10]
upper_bounds = [3, 3, 3]"
975,add,4,14561,14561,1,14561,1,"{'ok': True, 'value': 14561, 'stdout': '14561\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07285618782043457}",1,Compute: 5329 + 9232
976,rod,16,240,65,0,1,0,"{'ok': True, 'value': 240, 'stdout': '240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07181072235107422}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [12, 30, 38, 28, 11, 12, 34, 33, 24, 42, 14, 40, 16, 31, 29, 2]"
977,ilp_assign,8,35,63,0,74,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.7352445125579834}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 14, 16, 11, 17, 12, 19], [22, 2, 8, 8, 16, 24, 18], [24, 17, 9, 2, 9, 16, 12], [16, 2, 4, 5, 17, 24, 7], [9, 7, 12, 15, 9, 14, 5], [3, 13, 7, 3, 14, 2, 20], [8, 18, 20, 13, 11, 19, 17]]"
978,ilp_partition,2,3,1,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08634686470031738}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 5, 6, 1]"
979,lcs,8,5,5,1,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08463621139526367}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcaddcc""
T = ""cbbdccbad"""
980,add,16,11015965793007338,11015941893016538,0,11015965793007338,1,"{'ok': True, 'value': 11015965793007338, 'stdout': '11015965793007338\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07413935661315918}",1,Compute: 4795927355790800 + 6220038437216538
981,sub,32,39975626252780070214998496421727,86115620923407547233064123581734,0,40000000000000000000000000000000,0,"{'ok': True, 'value': 39975626252780070214998496421727, 'stdout': '39975626252780070214998496421727\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08770513534545898}",1,Compute: 82521193411807547233064123581734 - 42545567159027477018065627160007
982,ilp_prod,16,136,160,0,155,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_y3jc3t7z/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_y3jc3t7z/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1656949520111084}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 29, 26, 39, 26, 21]
consumption (rows=resources) = [[12, 2, 9, 13, 4, 15], [10, 16, 4, 8, 8, 2], [3, 14, 13, 1, 14, 1], [1, 1, 4, 16, 11, 11]]
capacity = [54, 37, 34, 46]
upper_bounds = [3, 3, 3, 3, 3, 3]"
983,knap,4,26,26,1,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07706928253173828}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 8, 5]
V = [15, 4, 4, 11]
C = 9"
984,knap,2,11,13,0,1,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07365655899047852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 5]
V = [4, 7, 6]
C = 4"
985,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0768430233001709}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbbbacb""
T = ""bdddbdbba"""
986,sub,4,1691,1691,1,1691,1,"{'ok': True, 'value': 1691, 'stdout': '1691\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0745704174041748}",1,Compute: 7339 - 5648
987,knap,2,7,13,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08895635604858398}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 4]
V = [3, 7, 3]
C = 5"
988,lcs,2,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0754995346069336}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""a"""
989,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09262323379516602}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbc""
T = ""baad"""
990,ilp_assign,4,22,18,0,28,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37751293182373047}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 10, 10, 9], [9, 12, 11, 10], [7, 6, 9, 9], [3, 5, 5, 8]]"
991,ilp_prod,4,22,33,0,33,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a6adb139b92a4215a54d29eef7e33189-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a6adb139b92a4215a54d29eef7e33189-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16130304336547852}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 6, 11]
consumption (rows=resources) = [[3, 4, 4], [2, 3, 4], [1, 3, 2]]
capacity = [8, 13, 12]
upper_bounds = [3, 3, 3]"
992,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0913095474243164}",1,Compute: 48 + 74
993,lcs,8,5,3,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07409524917602539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabaaccd""
T = ""abbdadccc"""
994,ilp_assign,2,2,2,1,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3677237033843994}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 1], [1, 2]]"
995,mul,2,3492,754,0,3528,0,"{'ok': True, 'value': 3492, 'stdout': '3492\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0857086181640625}",1,Compute: 97 * 36
996,ilp_partition,2,3,0,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0731661319732666}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 6, 1]"
997,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07243585586547852}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""cab"""
998,mul,8,605995452477894,172000000000,0,61336635558284,0,"{'ok': True, 'value': 605995452477894, 'stdout': '605995452477894\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08521604537963867}",1,Compute: 29248566 * 20718809
999,sub,2,18,18,1,18,1,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08672881126403809}",1,Compute: 67 - 49
1000,knap,8,94,100,0,0,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08513069152832031}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 2, 2, 2, 11, 2, 11, 14]
V = [25, 24, 20, 13, 7, 7, 12, 5]
C = 27"
1001,ilp_assign,32,162,246,0,34,0,"{'ok': True, 'value': 162, 'stdout': '162\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37488842010498047}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[68, 20, 42, 69, 69, 95, 14], [74, 91, 17, 65, 46, 95, 47], [55, 82, 61, 61, 37, 65, 15], [52, 68, 84, 81, 94, 22, 89], [49, 37, 70, 57, 96, 40, 20], [86, 43, 44, 84, 47, 14, 55], [88, 96, 82, 2, 88, 18, 34]]"
1002,lcs,4,3,3,1,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09849309921264648}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbc""
T = ""addbc"""
1003,ilp_prod,8,106,100,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_hl4ohztk/main.py"", line 10, in <module>\n    prob += lpSum([17, 17, 19, 8] * x)\nTypeError: can\'t multiply sequence by non-int of type \'list\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14458775520324707}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 17, 19, 8]
consumption (rows=resources) = [[7, 4, 1, 8], [8, 2, 7, 2], [4, 5, 4, 8], [5, 5, 5, 8]]
capacity = [23, 25, 29, 30]
upper_bounds = [3, 5, 3, 3]"
1004,mul,16,68053541768030211195366878138016,673689883294884446464448,0,687139340944566663588845488,0,"{'ok': True, 'value': 68053541768030211195366878138016, 'stdout': '68053541768030211195366878138016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07483816146850586}",1,Compute: 7195506995565656 * 9457782726077436
1005,ilp_partition,16,1,1,1,21,0,"{'ok': True, 'value': 299, 'stdout': '299\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07408452033996582}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 34, 41, 1, 7, 17, 47, 27, 44, 1, 2, 40, 23, 39, 1, 46]"
1006,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08819031715393066}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [95, 17, 13, 13, 73, 79, 67, 59, 43, 73, 85, 80, 95, 90, 52, 29, 4, 67, 51, 92, 71, 65, 81, 9]"
1007,rod,32,1792,1054,0,56,0,"{'ok': True, 'value': 1792, 'stdout': '1792\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07420182228088379}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [56, 20, 1, 94, 48, 86, 46, 14, 76, 26, 76, 62, 68, 96, 68, 41, 51, 57, 91, 66, 37, 40, 23, 73, 45, 87, 17, 78, 13, 76, 67, 56]"
1008,add,8,158016599,158016599,1,157996579,0,"{'ok': True, 'value': 158016599, 'stdout': '158016599\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07415986061096191}",1,Compute: 66260680 + 91755919
1009,add,2,113,113,1,113,1,"{'ok': True, 'value': 113, 'stdout': '113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08403229713439941}",1,Compute: 41 + 72
1010,lcs,32,21,16,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09034013748168945}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdacdddcadbadbcdacabacbbaabbabb""
T = ""cbdcacdddababbdaddbcbaaadcdcbdd"""
1011,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07538890838623047}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [29, 56, 39, 6, 95, 96, 20, 15, 56, 62, 41, 55, 31, 15, 1, 85, 15, 95, 91, 81, 44, 18, 3, 60]"
1012,ilp_partition,2,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07480549812316895}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 1, 6]"
1013,ilp_assign,8,46,75,0,75,0,"{'ok': True, 'value': 46, 'stdout': '46\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39756131172180176}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 11, 24, 23, 11, 18, 2], [17, 16, 9, 9, 5, 18, 8], [8, 12, 17, 1, 17, 16, 14], [19, 13, 22, 15, 24, 24, 21], [10, 2, 21, 21, 15, 19, 23], [11, 4, 17, 1, 14, 24, 2], [23, 10, 11, 21, 9, 6, 18]]"
1014,rod,32,2176,1005,0,1,0,"{'ok': True, 'value': 2176, 'stdout': '2176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07231020927429199}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [68, 75, 34, 11, 63, 56, 18, 30, 12, 36, 30, 23, 25, 76, 23, 77, 45, 4, 52, 16, 55, 22, 63, 90, 6, 5, 88, 10, 78, 89, 72, 13]"
1015,add,32,90802621920148294072737555780911,,0,90792621919148304072737555780911,0,"{'ok': True, 'value': 90802621920148294072737555780911, 'stdout': '90802621920148294072737555780911\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08466005325317383}",1,Compute: 63864510846456733260116493851822 + 26938111073691560812621061929089
1016,mul,32,4624838080660511356326992427646453801601388127591594090539138320,"The final answer will be a very large number, but it will be the correct result of the multiplication.",0,4733264449766410008887834497487462528,0,"{'ok': True, 'value': 4624838080660511356326992427646453801601388127591594090539138320, 'stdout': '4624838080660511356326992427646453801601388127591594090539138320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07623147964477539}",1,Compute: 88854239986562077686869930466736 * 52049717395140079022714724876995
1017,sub,16,4781094931010190,4781094931000190,0,4781094931009890,0,"{'ok': True, 'value': 4781094931010190, 'stdout': '4781094931010190\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09171748161315918}",1,Compute: 7233099980741350 - 2452005049731160
1018,rod,16,140,60,0,64,0,"{'ok': True, 'value': 140, 'stdout': '140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09063553810119629}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [8, 6, 17, 35, 21, 22, 23, 4, 46, 48, 37, 16, 26, 2, 26, 48]"
1019,sub,8,35855657,35855657,1,35855657,1,"{'ok': True, 'value': 35855657, 'stdout': '35855657\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07424664497375488}",1,Compute: 97278237 - 61422580
1020,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07426762580871582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbaaccbbdbaabad""
T = ""caddaadcdabdabba"""
1021,add,4,13772,5859,0,13772,1,"{'ok': True, 'value': 13772, 'stdout': '13772\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07211017608642578}",1,Compute: 7913 + 5859
1022,ilp_partition,8,0,1,0,0,1,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08662724494934082}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 16, 9, 24, 23, 19, 4, 7]"
1023,rod,16,672,102,0,157,0,"{'ok': True, 'value': 672, 'stdout': '672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07231926918029785}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [42, 27, 3, 45, 34, 32, 33, 15, 8, 42, 34, 9, 6, 36, 16, 46]"
1024,ilp_prod,4,24,48,0,16,0,"{'ok': True, 'value': 2, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/27e328f3a0084e53b2048f3e229528c4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/27e328f3a0084e53b2048f3e229528c4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 8.0\nProduct_0: 0.0\nProduct_1: 0.0\nProduct_2: 2.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1568610668182373}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8, 12]
consumption (rows=resources) = [[4, 4, 4], [1, 4, 2], [1, 3, 1]]
capacity = [11, 15, 16]
upper_bounds = [3, 3, 3]"
1025,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07735800743103027}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""bc"""
1026,lcs,32,20,12,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08223485946655273}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddccaabddadabcbcdbbaadcdbdcddbab""
T = ""adbacdccbdcdabcabaabddcbccbbaba"""
1027,rod,32,1088,1084,0,650,0,"{'ok': True, 'value': 1088, 'stdout': '1088\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08178114891052246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [34, 55, 93, 47, 23, 26, 88, 58, 29, 64, 80, 54, 2, 88, 49, 78, 94, 26, 63, 90, 2, 35, 10, 69, 11, 17, 84, 50, 38, 37, 89, 70]"
1028,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07636237144470215}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabcbada""
T = ""cbcadda"""
1029,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0975649356842041}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [93, 60, 16, 22, 72, 29, 25, 40, 56, 38, 26, 8, 35, 52, 74, 26, 2, 61, 62, 16, 30, 33, 10, 90]"
1030,ilp_partition,8,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08752560615539551}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 3, 2, 5, 21, 23, 20, 7]"
1031,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08891820907592773}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbc""
T = ""dccc"""
1032,ilp_prod,4,54,35,0,60,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/91dc76452c6d477d83f32c469ce0c009-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/91dc76452c6d477d83f32c469ce0c009-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 36 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -36 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18154311180114746}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 11, 10]
consumption (rows=resources) = [[2, 2, 3], [4, 2, 2], [2, 3, 2]]
capacity = [15, 12, 12]
upper_bounds = [3, 4, 5]"
1033,ilp_prod,2,24,28,0,21,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f69630c4914d45b3b70de60ae51f5a6b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f69630c4914d45b3b70de60ae51f5a6b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 9.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14769768714904785}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[1, 2], [1, 2]]
capacity = [9, 7]
upper_bounds = [7, 3]"
1034,mul,4,14371464,280,0,0,0,"{'ok': True, 'value': 14371464, 'stdout': '14371464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09185934066772461}",1,Compute: 8524 * 1686
1035,ilp_assign,16,52,114,0,105,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3683938980102539}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 16, 3, 16, 10, 24, 3], [11, 6, 7, 43, 3, 40, 35], [2, 44, 2, 19, 42, 3, 48], [47, 36, 21, 30, 18, 29, 6], [2, 46, 37, 41, 47, 42, 1], [42, 9, 11, 14, 38, 32, 17], [7, 25, 33, 37, 26, 48, 8]]"
1036,rod,16,272,64,0,65,0,"{'ok': True, 'value': 272, 'stdout': '272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08587527275085449}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [16, 34, 33, 27, 12, 28, 9, 33, 30, 40, 38, 13, 14, 16, 41, 47]"
1037,add,16,8340875466821396,8460483450,0,8340875466821496,0,"{'ok': True, 'value': 8340875466821396, 'stdout': '8340875466821396\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08343052864074707}",1,Compute: 3103131087685724 + 5237744379135672
1038,ilp_prod,2,14,21,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_fyxmuiwu/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 7*x[1]], ""Total Profit"")\nTypeError: lpSum() takes 1 positional argument but 2 were given\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1491851806640625}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[3, 3], [2, 2]]
capacity = [7, 7]
upper_bounds = [3, 3]"
1039,knap,32,1633,1646,0,51,0,"{'ok': True, 'value': 1633, 'stdout': '1633\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09720158576965332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 38, 61, 9, 23, 32, 14, 10, 28, 53, 38, 28, 30, 18, 51, 59, 54, 62, 25, 54, 14, 6, 27, 50, 40, 19, 2, 31, 43, 60, 57, 24]
V = [66, 59, 107, 119, 97, 4, 8, 24, 58, 72, 128, 11, 31, 19, 38, 96, 54, 117, 94, 8, 41, 107, 82, 89, 128, 100, 43, 107, 46, 90, 77, 30]
C = 530"
1040,rod,16,288,36,0,64,0,"{'ok': True, 'value': 288, 'stdout': '288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09230422973632812}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [12, 36, 22, 44, 8, 48, 28, 41, 34, 16, 4, 34, 44, 35, 48, 28]"
1041,knap,2,8,14,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07754659652709961}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 2]
V = [1, 7, 8]
C = 5"
1042,add,16,11689970242268184,75,0,11689970242338184,0,"{'ok': True, 'value': 11689970242268184, 'stdout': '11689970242268184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09212160110473633}",1,Compute: 2873809454267928 + 8816160788000256
1043,mul,4,27504027,51835,0,27645877,0,"{'ok': True, 'value': 27504027, 'stdout': '27504027\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07361507415771484}",1,Compute: 4937 * 5571
1044,sub,32,9902995763251934029110054396134,109003005763252934039100054404624,0,109463006763251934029109054406134,0,"{'ok': True, 'value': 9902995763251934029110054396134, 'stdout': '9902995763251934029110054396134\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07817482948303223}",1,Compute: 98838545148865919959095488354395 - 88935549385613985929985433958261
1045,sub,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07431244850158691}",1,Compute: 20 - 13
1046,knap,4,14,13,0,0,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09287810325622559}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 6, 3, 2]
V = [9, 4, 3, 5]
C = 8"
1047,rod,2,12,12,1,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07666754722595215}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 6]"
1048,mul,2,5859,93,0,5929,0,"{'ok': True, 'value': 5859, 'stdout': '5859\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0900719165802002}",1,Compute: 63 * 93
1049,add,2,149,149,1,149,1,"{'ok': True, 'value': 149, 'stdout': '149\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08417153358459473}",1,Compute: 55 + 94
1050,mul,2,1976,2016,0,1976,1,"{'ok': True, 'value': 1976, 'stdout': '1976\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07388067245483398}",1,Compute: 26 * 76
1051,add,2,132,132,1,132,1,"{'ok': True, 'value': 132, 'stdout': '132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08280754089355469}",1,Compute: 88 + 44
1052,lcs,32,18,10,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08399081230163574}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcdaacaadbbaaabbdaccdcaaabbadcd""
T = ""abaddbabbcbdabdadcdbbcdbcbacddc"""
1053,ilp_prod,4,32,32,1,12,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/37232d8cf5c44d4fafbc06b1f3dafb38-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/37232d8cf5c44d4fafbc06b1f3dafb38-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 3 rows, 2 columns (2 integer (0 of which binary)) and 6 elements\nCutoff increment increased from 1e-05 to 3.9999\nCbc0012I Integer solution of -16 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -16, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -16 to -16\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16556859016418457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8, 4]
consumption (rows=resources) = [[1, 1, 4], [2, 2, 3], [2, 1, 1]]
capacity = [8, 9, 11]
upper_bounds = [4, 4, 3]"
1054,mul,32,764573091611577379780431581203972515465912562137743075317394744,55490831775418351915120040048710,0,7623362642177858864861591851486535549388,0,"{'ok': True, 'value': 764573091611577379780431581203972515465912562137743075317394744, 'stdout': '764573091611577379780431581203972515465912562137743075317394744\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07437825202941895}",1,Compute: 30033430566501115165471607402764 * 25457401208917236749648372545946
1055,lcs,16,8,6,0,18,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07393121719360352}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccaaaacbacdaacdb""
T = ""bbdadccbadabbbcd"""
1056,rod,32,1488,1055,0,544,0,"{'ok': True, 'value': 1488, 'stdout': '1488\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07630729675292969}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [37, 93, 71, 36, 8, 16, 22, 19, 30, 26, 60, 18, 23, 62, 65, 74, 11, 12, 6, 84, 73, 62, 35, 83, 62, 17, 54, 17, 20, 49, 16, 18]"
1057,ilp_assign,2,5,5,1,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4083390235900879}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [4, 6]]"
1058,lcs,16,8,7,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07938909530639648}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbaabbcddbdaadba""
T = ""aabacabacbbdccb"""
1059,add,2,91,91,1,91,1,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07520318031311035}",1,Compute: 49 + 42
1060,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20027422904968262}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [61, 39, 63, 67, 13, 43, 27, 28, 69, 45, 1, 36, 62, 53, 3, 41, 57, 13, 56, 75, 44, 61, 77, 60]"
1061,ilp_prod,32,456,1002,0,32,0,"{'ok': True, 'value': 60, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8924d09e3e45443bb1310f1ae8e34cb8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8924d09e3e45443bb1310f1ae8e34cb8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 26 COLUMNS\nAt line 171 RHS\nAt line 193 BOUNDS\nAt line 200 ENDATA\nProblem MODEL has 21 rows, 6 columns and 126 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 87.1875 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -60 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                60.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n60.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15602397918701172}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 92, 29, 84, 19, 94]
consumption (rows=resources) = [[21, 29, 20, 4, 2, 7], [24, 5, 12, 26, 32, 14], [4, 11, 28, 25, 18, 13], [17, 8, 2, 14, 17, 27]]
capacity = [93, 81, 75, 90]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1062,rod,8,176,30,0,50,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08452582359313965}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 23, 11, 20, 22, 13, 14, 20]"
1063,ilp_prod,32,360,1059,0,24,0,"{'ok': True, 'value': 360, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f0ea374233894302a81c16d658c4cad7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f0ea374233894302a81c16d658c4cad7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 416.842 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -360 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                360.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n360.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15927791595458984}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [90, 46, 73, 59, 24, 21]
consumption (rows=resources) = [[11, 30, 19, 3, 31, 13], [26, 13, 32, 2, 28, 25], [19, 19, 20, 31, 12, 3], [22, 2, 4, 12, 30, 4]]
capacity = [124, 123, 88, 103]
upper_bounds = [4, 4, 3, 3, 3, 4]"
1064,ilp_assign,4,15,10,0,26,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3977060317993164}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 7, 8, 1], [2, 10, 8, 6], [8, 2, 10, 8], [8, 5, 10, 7]]"
1065,rod,16,704,16,0,65,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07239127159118652}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 34, 27, 48, 10, 12, 25, 4, 26, 2, 23, 6, 7, 40, 4, 15]"
1066,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07291150093078613}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""bd"""
1067,sub,8,26368271,26368271,1,26368271,1,"{'ok': True, 'value': 26368271, 'stdout': '26368271\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07449865341186523}",1,Compute: 63874426 - 37506155
1068,sub,2,22,22,1,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07425951957702637}",1,Compute: 98 - 76
1069,ilp_assign,16,73,10,0,110,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37455201148986816}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 45, 24, 13, 32, 12, 40], [6, 13, 11, 10, 35, 43, 7], [29, 22, 27, 27, 15, 44, 14], [17, 38, 42, 7, 43, 6, 32], [14, 32, 13, 43, 37, 15, 43], [24, 27, 16, 35, 12, 29, 48], [25, 35, 38, 9, 16, 8, 1]]"
1070,knap,16,390,146,0,1,0,"{'ok': True, 'value': 390, 'stdout': '390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09085941314697266}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 18, 21, 18, 3, 3, 21, 25, 20, 32, 24, 12, 31, 15, 28, 18]
V = [9, 33, 25, 59, 1, 55, 40, 21, 3, 18, 4, 49, 62, 57, 18, 15]
C = 146"
1071,rod,16,656,84,0,65,0,"{'ok': True, 'value': 656, 'stdout': '656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0724492073059082}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [41, 46, 15, 25, 33, 20, 28, 22, 47, 12, 40, 18, 16, 7, 17, 7]"
1072,ilp_partition,16,0,1,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1860959529876709}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 15, 27, 34, 45, 16, 41, 25, 10, 39, 12, 33, 35, 3, 12, 16]"
1073,mul,4,62081964,6046,0,6163392,0,"{'ok': True, 'value': 62081964, 'stdout': '62081964\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0840752124786377}",1,Compute: 7812 * 7947
1074,ilp_assign,4,16,0,0,18,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3684499263763428}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 4, 8, 5], [5, 8, 4, 12], [12, 7, 5, 12], [1, 10, 3, 2]]"
1075,add,8,89697687,49,0,89697687,1,"{'ok': True, 'value': 89697687, 'stdout': '89697687\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07486772537231445}",1,Compute: 42848131 + 46849556
1076,knap,32,1423,1045,0,62,0,"{'ok': True, 'value': 1423, 'stdout': '1423\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07995986938476562}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [39, 20, 25, 39, 49, 54, 61, 64, 41, 62, 33, 3, 39, 40, 50, 62, 18, 10, 50, 4, 29, 10, 8, 64, 7, 47, 41, 29, 35, 40, 5, 53]
V = [21, 80, 26, 33, 26, 104, 83, 73, 75, 78, 53, 15, 18, 119, 14, 64, 108, 42, 40, 10, 6, 109, 117, 79, 52, 88, 59, 64, 47, 31, 80, 73]
C = 565"
1077,ilp_prod,2,24,26,0,24,1,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1202ac55359e49d196de7ab53ddd3ec0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1202ac55359e49d196de7ab53ddd3ec0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 26.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 24.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16007089614868164}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6]
consumption (rows=resources) = [[2, 3], [3, 3]]
capacity = [8, 10]
upper_bounds = [3, 3]"
1078,add,4,9092,39,0,9092,1,"{'ok': True, 'value': 9092, 'stdout': '9092\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08706951141357422}",1,Compute: 6403 + 2689
1079,mul,4,8685398,179233,0,8748998,0,"{'ok': True, 'value': 8685398, 'stdout': '8685398\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08647966384887695}",1,Compute: 1978 * 4391
1080,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07384848594665527}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""bac"""
1081,ilp_prod,32,426,1003,0,250,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_awp_00zp/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_awp_00zp/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1567533016204834}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [37, 6, 11, 20, 89, 74]
consumption (rows=resources) = [[30, 11, 22, 23, 23, 1], [13, 24, 1, 20, 4, 27], [19, 6, 10, 24, 21, 8], [31, 25, 2, 7, 10, 24]]
capacity = [124, 121, 89, 88]
upper_bounds = [3, 3, 5, 3, 4, 3]"
1082,mul,2,3471,3511,0,3591,0,"{'ok': True, 'value': 3471, 'stdout': '3471\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07488369941711426}",1,Compute: 39 * 89
1083,knap,32,1995,2233,0,12,0,"{'ok': True, 'value': 1995, 'stdout': '1995\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07875442504882812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [60, 5, 51, 3, 39, 36, 59, 39, 24, 26, 60, 28, 60, 12, 64, 16, 3, 27, 19, 44, 13, 61, 63, 5, 54, 16, 58, 26, 60, 17, 53, 4]
V = [28, 115, 66, 3, 126, 124, 67, 92, 90, 122, 51, 97, 12, 2, 29, 23, 26, 69, 94, 120, 113, 121, 91, 113, 99, 87, 105, 118, 45, 71, 104, 85]
C = 552"
1084,knap,4,14,14,1,0,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0816183090209961}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 5, 8]
V = [10, 3, 4, 1]
C = 10"
1085,sub,4,3204,3204,1,3204,1,"{'ok': True, 'value': 3204, 'stdout': '3204\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08857297897338867}",1,Compute: 4976 - 1772
1086,ilp_assign,32,94,187,0,208,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3583669662475586}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 47, 31, 81, 28, 19, 70], [83, 34, 20, 7, 94, 86, 11], [31, 64, 50, 53, 4, 19, 65], [71, 22, 31, 29, 77, 60, 60], [71, 35, 26, 54, 62, 41, 11], [8, 34, 81, 17, 15, 93, 60], [65, 83, 23, 94, 48, 58, 69]]"
1087,sub,4,2873,2873,1,2873,1,"{'ok': True, 'value': 2873, 'stdout': '2873\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07457423210144043}",1,Compute: 3882 - 1009
1088,rod,4,28,28,1,9,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0845954418182373}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 11, 9, 11]"
1089,add,32,178636107744310531918846802088032,100000000000000000000000000000000,0,178636107744307531918846802088032,0,"{'ok': True, 'value': 178636107744310531918846802088032, 'stdout': '178636107744310531918846802088032\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0791480541229248}",1,Compute: 92604016520946722947797757355985 + 86032091223363808971049044732047
1090,rod,32,2688,1053,0,4,0,"{'ok': True, 'value': 2688, 'stdout': '2688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09540963172912598}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [84, 83, 62, 65, 54, 33, 49, 3, 57, 65, 14, 34, 61, 44, 94, 92, 40, 19, 67, 17, 36, 25, 50, 1, 78, 83, 45, 67, 89, 96, 62, 90]"
1091,ilp_prod,8,36,63,0,28,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7c60664c670948c9babe1f7918216433-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7c60664c670948c9babe1f7918216433-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 48 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -36 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -43 to -43 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -36, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -43 to -43\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15724778175354004}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3, 18, 14]
consumption (rows=resources) = [[1, 7, 5, 1], [6, 8, 1, 1], [2, 6, 2, 3], [8, 8, 6, 8]]
capacity = [27, 17, 28, 16]
upper_bounds = [3, 3, 3, 3]"
1092,add,32,106897221976131787252059020666088,106897221976131787251059020666088,0,106897221976131787252059020666088,1,"{'ok': True, 'value': 106897221976131787252059020666088, 'stdout': '106897221976131787252059020666088\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0788116455078125}",1,Compute: 72887822335871688734864769038502 + 34009399640260098517194251627586
1093,ilp_prod,32,470,1008,0,1056,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_4e81kcgd/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_4e81kcgd/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15075302124023438}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 24, 81, 12, 56, 73]
consumption (rows=resources) = [[9, 12, 25, 32, 17, 6], [29, 20, 25, 29, 15, 9], [18, 29, 7, 5, 10, 20], [21, 30, 19, 11, 9, 17]]
capacity = [113, 128, 72, 126]
upper_bounds = [4, 3, 4, 3, 6, 3]"
1094,ilp_prod,32,302,The solution to this problem would involve setting up and solving a linear programming model to find the optimal values of the decision variables that maximize the total profit while satisfying the resource constraints and non-negativity constraints.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_qgzk844e/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_qgzk844e/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15865230560302734}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 26, 18, 59, 47, 92]
consumption (rows=resources) = [[5, 22, 21, 21, 29, 20], [18, 19, 25, 22, 14, 11], [20, 5, 9, 2, 21, 10], [28, 8, 16, 1, 32, 31]]
capacity = [112, 80, 84, 88]
upper_bounds = [3, 4, 3, 3, 3, 3]"
1095,ilp_partition,16,0,1,0,43,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2021772861480713}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 20, 14, 35, 43, 13, 3, 41, 25, 44, 19, 22, 14, 46, 15, 2]"
1096,mul,16,39699492989125356468517298740155,38333926403666718,0,3932329677380644454444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 39699492989125356468517298740155, 'stdout': '39699492989125356468517298740155\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0746009349822998}",1,Compute: 8857481861570015 * 4482029273056677
1097,ilp_partition,8,0,1,0,0,1,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07389473915100098}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 15, 16, 2, 10, 1, 6, 23]"
1098,lcs,8,2,4,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08029055595397949}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadcddbd""
T = ""cabccca"""
1099,knap,8,124,105,0,8,0,"{'ok': True, 'value': 124, 'stdout': '124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0763540267944336}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 10, 6, 14, 14, 8, 8]
V = [32, 21, 14, 31, 7, 20, 20, 17]
C = 32"
1100,lcs,16,9,7,0,18,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07914972305297852}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacdcdbcadaddcdc""
T = ""bcaddadaddaddbad"""
1101,sub,32,72082713926168806429617491234267,72082713926168806439617491234267,0,14224801478421944709164689522468,0,"{'ok': True, 'value': 72082713926168806429617491234267, 'stdout': '72082713926168806429617491234267\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08208298683166504}",1,Compute: 86307515404590751138782180756735 - 14224801478421944709164689522468
1102,add,32,87243683746472266771824185792487,7,0,87243683746472266771824185792487,1,"{'ok': True, 'value': 87243683746472266771824185792487, 'stdout': '87243683746472266771824185792487\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08257675170898438}",1,Compute: 53694282240479409878272505947346 + 33549401505992856893551679845141
1103,ilp_assign,4,11,3,0,14,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3734290599822998}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 4, 2, 1], [1, 8, 4, 2], [6, 11, 6, 3], [7, 5, 4, 1]]"
1104,add,2,89,89,1,89,1,"{'ok': True, 'value': 89, 'stdout': '89\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08728885650634766}",1,Compute: 38 + 51
1105,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08256125450134277}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""ad"""
1106,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21095919609069824}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 50, 36, 69, 8, 88, 55, 63, 11, 65, 65, 56, 59, 27, 86, 2, 37, 31, 59, 11, 11, 17, 72, 3]"
1107,ilp_partition,8,2,1,0,12,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07592415809631348}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 23, 19, 6, 14, 2, 23, 12]"
1108,knap,16,341,1043,0,5,0,"{'ok': True, 'value': 341, 'stdout': '341\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09210896492004395}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 32, 5, 3, 30, 24, 26, 16, 7, 10, 21, 14, 5, 22, 7, 22]
V = [3, 27, 24, 15, 49, 21, 44, 57, 32, 27, 34, 12, 31, 29, 34, 43]
C = 124"
1109,add,8,163106188,54,0,163096188,0,"{'ok': True, 'value': 163106188, 'stdout': '163106188\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08209943771362305}",1,Compute: 74038799 + 89067389
1110,ilp_assign,32,87,185,0,1,0,"{'ok': True, 'value': 87, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/54ff13bbd97e4b11bfa2dedabdbbcd59-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/54ff13bbd97e4b11bfa2dedabdbbcd59-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 87 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 87\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 87 - took 0.00 seconds\nCbc0012I Integer solution of 87 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 87, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 87 to 87\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                87.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nMinimum total cost: 87.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14852142333984375}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 50, 28, 17, 64, 78, 37], [75, 33, 56, 28, 49, 11, 57], [30, 91, 53, 34, 27, 38, 13], [42, 90, 85, 1, 10, 20, 28], [32, 45, 94, 56, 67, 2, 35], [1, 80, 89, 71, 35, 87, 83], [40, 13, 11, 76, 55, 6, 37]]"
1111,mul,16,21636422499559236534925545954126,2105486810765644515531951653424098,0,11766294367665821,0,"{'ok': True, 'value': 21636422499559236534925545954126, 'stdout': '21636422499559236534925545954126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07381296157836914}",1,Compute: 3911173461931287 * 5531951653424098
1112,ilp_partition,16,0,1,0,0,1,"{'ok': True, 'value': 302, 'stdout': '302\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07319307327270508}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 5, 2, 37, 6, 32, 15, 41, 22, 27, 21, 11, 8, 38, 30, 30]"
1113,sub,16,1429302354927755,4637861822178349,0,1429302354927755,1,"{'ok': True, 'value': 1429302354927755, 'stdout': '1429302354927755\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07233333587646484}",1,Compute: 6067164177106104 - 4637861822178349
1114,ilp_prod,8,110,100,0,0,0,"{'ok': True, 'value': 155, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6bb44f0f90194c6b945e5743b611a2a2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6bb44f0f90194c6b945e5743b611a2a2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 43 RHS\nAt line 49 BOUNDS\nAt line 54 ENDATA\nProblem MODEL has 5 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 167.091 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -154 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -155 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -166.8125 to -155 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -155, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -166.812 to -155\nProbing was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                155.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n155.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15227937698364258}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 18, 22, 23]
consumption (rows=resources) = [[8, 1, 4, 2], [7, 4, 4, 8], [2, 3, 1, 3], [8, 3, 3, 1]]
capacity = [21, 22, 25, 31]
upper_bounds = [3, 5, 5, 3]"
1115,rod,2,5,5,1,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_li6p2vgz/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_li6p2vgz/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07297825813293457}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 5]"
1116,knap,4,26,16,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07438039779663086}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 4, 8]
V = [7, 10, 16, 3]
C = 10"
1117,rod,16,528,46,0,46,0,"{'ok': True, 'value': 528, 'stdout': '528\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07354998588562012}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [33, 46, 31, 6, 24, 5, 40, 26, 2, 18, 17, 45, 36, 15, 39, 11]"
1118,sub,4,759,759,1,-759,0,"{'ok': True, 'value': 759, 'stdout': '759\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09994316101074219}",1,Compute: 4815 - 4056
1119,add,16,2625368637662521,201114111101,0,2625368637662521,1,"{'ok': True, 'value': 2625368637662521, 'stdout': '2625368637662521\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08171606063842773}",1,Compute: 1367939184985691 + 1257429452676830
1120,sub,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10983085632324219}",1,Compute: 97 - 94
1121,ilp_assign,2,6,5,0,7,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3841257095336914}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 2], [4, 5]]"
1122,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09484267234802246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 4]"
1123,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09237360954284668}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdcbaababdcacbb""
T = ""bdcdcdaadcddbab"""
1124,ilp_partition,32,1,10,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0439655780792236}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 86, 65, 63, 7, 40, 59, 88, 58, 90, 82, 23, 3, 86, 30, 39, 40, 76, 1, 54, 51, 25, 21, 96]"
1125,knap,32,1632,2208,0,64,0,"{'ok': True, 'value': 1632, 'stdout': '1632\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0975196361541748}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 8, 8, 42, 38, 54, 27, 61, 8, 8, 54, 10, 59, 6, 13, 35, 64, 23, 18, 42, 39, 34, 41, 48, 14, 48, 62, 24, 31, 8, 12, 61]
V = [88, 50, 7, 118, 33, 95, 24, 113, 45, 29, 86, 96, 62, 55, 35, 17, 74, 37, 66, 124, 126, 55, 96, 67, 28, 93, 128, 95, 41, 82, 128, 33]
C = 508"
1126,mul,4,24732800,24910,0,24838000,0,"{'ok': True, 'value': 24732800, 'stdout': '24732800\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0729837417602539}",1,Compute: 2950 * 8384
1127,ilp_partition,4,3,1,0,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0910794734954834}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 7, 11, 3]"
1128,ilp_partition,32,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20901203155517578}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 40, 78, 82, 62, 39, 15, 8, 96, 34, 53, 38, 22, 37, 87, 86, 21, 40, 74, 78, 89, 89, 28, 72]"
1129,knap,16,340,1047,0,0,0,"{'ok': True, 'value': 340, 'stdout': '340\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07732582092285156}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 14, 18, 16, 17, 5, 14, 17, 16, 22, 4, 11, 27, 19, 6, 14]
V = [27, 2, 17, 59, 21, 36, 9, 53, 54, 37, 29, 15, 14, 5, 30, 21]
C = 123"
1130,ilp_prod,16,181,208,0,3,0,"{'ok': True, 'value': 70, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f18b1e8b8c6f4997a3db8beee034d065-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f18b1e8b8c6f4997a3db8beee034d065-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 29 COLUMNS\nAt line 192 RHS\nAt line 217 BOUNDS\nAt line 224 ENDATA\nProblem MODEL has 24 rows, 6 columns and 144 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 84 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -70 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                70.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n70.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16541266441345215}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [35, 12, 8, 29, 41, 14]
consumption (rows=resources) = [[7, 9, 14, 1, 11, 8], [1, 8, 3, 10, 6, 3], [5, 8, 6, 15, 7, 13], [11, 11, 15, 8, 5, 12]]
capacity = [39, 37, 36, 53]
upper_bounds = [4, 4, 3, 3, 3, 3]"
1131,sub,2,59,59,1,59,1,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08614659309387207}",1,Compute: 72 - 13
1132,knap,8,91,113,0,0,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08005475997924805}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 15, 10, 2, 15, 2, 6, 10]
V = [29, 10, 4, 12, 32, 18, 23, 6]
C = 38"
1133,ilp_partition,2,0,1,0,5,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09372425079345703}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 3, 4]"
1134,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09561920166015625}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbbcaadcdcbaaba""
T = ""bbdbccacbcabbaa"""
1135,ilp_prod,8,72,105,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_lv3wh4un/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_lv3wh4un/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1491076946258545}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 7, 7, 20]
consumption (rows=resources) = [[2, 3, 2, 2], [1, 6, 3, 8], [1, 3, 8, 6], [2, 7, 4, 2]]
capacity = [24, 24, 27, 30]
upper_bounds = [10, 4, 3, 3]"
1136,ilp_partition,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10431933403015137}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 3, 4]"
1137,sub,2,49,49,1,49,1,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07407450675964355}",1,Compute: 59 - 10
1138,add,16,6267115911057167,5791712,0,6267115910957167,0,"{'ok': True, 'value': 6267115911057167, 'stdout': '6267115911057167\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06770896911621094}",1,Compute: 2283054808499149 + 3984061102558018
1139,mul,8,5591377161654128,175,0,5613436556776432,0,"{'ok': True, 'value': 5591377161654128, 'stdout': '5591377161654128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07560062408447266}",1,Compute: 71376464 * 78336427
1140,ilp_prod,2,23,15,0,24,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0549d263a523459fbba7f0b718fe47b4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0549d263a523459fbba7f0b718fe47b4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1578388214111328}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[3, 1], [3, 3]]
capacity = [7, 9]
upper_bounds = [3, 3]"
1141,mul,8,3223584134236362,31865258514,0,3234142536585882,0,"{'ok': True, 'value': 3223584134236362, 'stdout': '3223584134236362\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07483196258544922}",1,Compute: 35521746 * 90749597
1142,sub,2,8,89,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08260989189147949}",1,Compute: 97 - 89
1143,sub,4,4907,4907,1,4907,1,"{'ok': True, 'value': 4907, 'stdout': '4907\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07441973686218262}",1,Compute: 8161 - 3254
1144,add,4,4855,4855,1,4855,1,"{'ok': True, 'value': 4855, 'stdout': '4855\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0759580135345459}",1,Compute: 3507 + 1348
1145,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07375931739807129}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""dd"""
1146,lcs,16,8,5,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0807034969329834}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdadbdcdacdcdbdc""
T = ""dcbacbbadbdbbccda"""
1147,ilp_prod,16,151,154,0,60,0,"{'ok': True, 'value': 78, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/72019808227b46b3af1a743aff8ead30-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/72019808227b46b3af1a743aff8ead30-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 94 RHS\nAt line 105 BOUNDS\nAt line 112 ENDATA\nProblem MODEL has 10 rows, 6 columns and 60 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 85.4286 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -78 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                78.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n78.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16091346740722656}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 16, 17, 11, 6, 45]
consumption (rows=resources) = [[13, 3, 4, 7, 9, 2], [6, 3, 8, 10, 4, 12], [14, 7, 10, 14, 8, 13], [14, 8, 12, 1, 12, 2]]
capacity = [54, 60, 46, 55]
upper_bounds = [3, 6, 4, 3, 4, 3]"
1148,ilp_prod,16,141,165,0,156,0,"{'ok': True, 'value': 72, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8343960294a748ec8c1929191956c978-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8343960294a748ec8c1929191956c978-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 86 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -72 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                72.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n72.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1581723690032959}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 33, 5, 15, 4, 15]
consumption (rows=resources) = [[4, 14, 8, 16, 12, 1], [8, 8, 9, 12, 2, 9], [8, 9, 6, 11, 14, 3], [9, 14, 5, 12, 5, 3]]
capacity = [46, 64, 55, 43]
upper_bounds = [4, 3, 5, 3, 3, 7]"
1149,knap,16,520,114,0,0,0,"{'ok': True, 'value': 520, 'stdout': '520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0771629810333252}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 19, 3, 5, 11, 8, 1, 18, 10, 20, 6, 31, 25, 21, 18, 17]
V = [56, 61, 63, 17, 13, 58, 41, 23, 50, 30, 58, 34, 57, 32, 15, 59]
C = 112"
1150,ilp_prod,32,309,"The solution to the problem is to maximize the total profit while ensuring that the consumption of each resource does not exceed its capacity. The exact solution would require solving the linear programming problem, which is beyond the scope of this response.",0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_jtibbn0w/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_jtibbn0w/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15990543365478516}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [59, 31, 60, 36, 14, 16]
consumption (rows=resources) = [[20, 26, 25, 21, 22, 15], [23, 31, 21, 12, 13, 16], [12, 6, 5, 8, 2, 25], [11, 32, 6, 20, 8, 17]]
capacity = [127, 120, 79, 85]
upper_bounds = [5, 3, 5, 4, 5, 3]"
1151,ilp_partition,16,1,1,1,32,0,"{'ok': True, 'value': 243, 'stdout': '243\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08800387382507324}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [32, 1, 9, 45, 19, 26, 31, 4, 5, 1, 1, 22, 15, 35, 25, 28]"
1152,add,4,11812,11812,1,11812,1,"{'ok': True, 'value': 11812, 'stdout': '11812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08931708335876465}",1,Compute: 4069 + 7743
1153,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0735471248626709}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""cc"""
1154,rod,32,2176,1045,0,240,0,"{'ok': True, 'value': 2176, 'stdout': '2176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09072089195251465}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [68, 13, 77, 81, 14, 87, 41, 83, 6, 10, 87, 88, 77, 4, 43, 66, 72, 4, 34, 78, 10, 31, 9, 25, 5, 63, 78, 79, 16, 13, 90, 37]"
1155,ilp_prod,16,240,160,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ciffle1c/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ciffle1c/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14241909980773926}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 40, 24, 48, 31, 41]
consumption (rows=resources) = [[2, 14, 15, 12, 12, 11], [8, 4, 15, 2, 13, 7], [15, 5, 5, 6, 10, 15], [6, 11, 16, 9, 13, 2]]
capacity = [62, 49, 36, 47]
upper_bounds = [3, 4, 3, 5, 3, 3]"
1156,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3843111991882324}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [4, 4]]"
1157,ilp_assign,8,44,70,0,114,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37859344482421875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 21, 15, 21, 17, 9, 12], [19, 15, 24, 9, 8, 15, 12], [14, 8, 10, 4, 1, 20, 19], [20, 6, 5, 15, 21, 18, 9], [3, 6, 9, 16, 4, 15, 6], [16, 5, 13, 24, 3, 14, 22], [22, 8, 16, 24, 18, 23, 18]]"
1158,lcs,32,18,15,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07846808433532715}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcbddbccddaaabcccbcbddcbbcbdbcb""
T = ""bbdcbbcabbddcbcccabdbaadacccdbdd"""
1159,add,16,3372384242742948,7,0,3372386242742948,0,"{'ok': True, 'value': 3372384242742948, 'stdout': '3372384242742948\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07773971557617188}",1,Compute: 1436352927088325 + 1936031315654623
1160,knap,32,1543,1043,0,45,0,"{'ok': True, 'value': 1543, 'stdout': '1543\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07952475547790527}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 29, 53, 19, 54, 14, 12, 29, 2, 26, 3, 44, 31, 11, 18, 45, 27, 41, 12, 56, 3, 17, 23, 58, 54, 2, 2, 7, 47, 22, 52, 56]
V = [90, 51, 49, 31, 114, 17, 18, 81, 109, 104, 39, 36, 43, 93, 118, 41, 24, 84, 21, 118, 77, 34, 65, 114, 41, 48, 13, 77, 60, 13, 126, 79]
C = 438"
1161,sub,2,34,34,1,34,1,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07709169387817383}",1,Compute: 53 - 19
1162,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07365250587463379}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadbdbcdacbacccddddbdaadabdccaad""
T = ""abbdcbdacaacdbbdbcdadcadcabcdbb"""
1163,rod,16,236,60,0,60,0,"{'ok': True, 'value': 236, 'stdout': '236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08504796028137207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [6, 21, 46, 28, 20, 14, 37, 19, 11, 33, 17, 44, 11, 33, 11, 7]"
1164,ilp_prod,32,471,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce each product. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are the resource constraints, which require the total consumption of each resource across all products not to exceed the capacity of that resource. The non-negativity constraint requires the quantity produced for each product to be non-negative. The upper bounds on the quantity of each product that can be produced are given by upper_bounds. A linear programming solver is used to find the values of the decision variables that maximize the total profit while satisfying all the constraints. The maximum profit is the sum of the product of profit[j] and the quantity x_j for all j.",0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__ajw62e1/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec__ajw62e1/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15078258514404297}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [86, 92, 51, 21, 78, 96]
consumption (rows=resources) = [[12, 16, 23, 31, 20, 1], [1, 10, 5, 22, 4, 3], [8, 13, 32, 1, 5, 20], [22, 29, 7, 14, 32, 17]]
capacity = [102, 128, 73, 114]
upper_bounds = [5, 3, 3, 3, 3, 3]"
1165,ilp_prod,2,24,34,0,20,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6c081c96b69543df810e7e3703ef8119-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6c081c96b69543df810e7e3703ef8119-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14606213569641113}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6]
consumption (rows=resources) = [[2, 1], [3, 2]]
capacity = [6, 8]
upper_bounds = [3, 4]"
1166,ilp_prod,16,148,175,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6n1ymt01/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_6n1ymt01/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14410400390625}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 32, 5, 42, 39, 10]
consumption (rows=resources) = [[3, 14, 8, 4, 6, 1], [4, 5, 3, 16, 14, 1], [4, 4, 5, 4, 6, 10], [15, 3, 6, 9, 12, 10]]
capacity = [52, 41, 37, 32]
upper_bounds = [3, 3, 5, 3, 3, 3]"
1167,mul,4,41089815,91460,0,4063605,0,"{'ok': True, 'value': 41089815, 'stdout': '41089815\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07389092445373535}",1,Compute: 7605 * 5403
1168,rod,32,1376,1055,0,237,0,"{'ok': True, 'value': 1376, 'stdout': '1376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07077884674072266}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [43, 67, 55, 65, 18, 94, 4, 16, 54, 88, 64, 68, 1, 92, 83, 25, 81, 45, 70, 1, 37, 55, 74, 83, 4, 27, 30, 39, 72, 58, 42, 46]"
1169,ilp_assign,2,7,4,0,8,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3875865936279297}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 6], [2, 6]]"
1170,sub,16,4028655313506344,4028655313506344,1,4028655313506344,1,"{'ok': True, 'value': 4028655313506344, 'stdout': '4028655313506344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07339835166931152}",1,Compute: 5324902620972128 - 1296247307465784
1171,ilp_assign,8,52,36,0,91,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3813443183898926}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 23, 6, 3, 11, 16, 15], [8, 1, 23, 6, 24, 16, 13], [3, 8, 3, 10, 10, 24, 22], [21, 9, 6, 19, 15, 7, 6], [7, 24, 6, 19, 21, 22, 7], [10, 9, 18, 20, 15, 18, 14], [24, 20, 17, 17, 22, 24, 20]]"
1172,add,4,9761,9761,1,9761,1,"{'ok': True, 'value': 9761, 'stdout': '9761\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07053256034851074}",1,Compute: 1893 + 7868
1173,ilp_partition,8,0,1,0,20,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06656837463378906}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 15, 12, 10, 20, 1, 19, 21]"
1174,lcs,8,5,4,0,6,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06835770606994629}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacccbcc""
T = ""cbcaccdbc"""
1175,add,8,154835937,154835937,1,154835937,1,"{'ok': True, 'value': 154835937, 'stdout': '154835937\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07661843299865723}",1,Compute: 77270881 + 77565056
1176,add,2,120,121,0,120,1,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08844804763793945}",1,Compute: 71 + 49
1177,ilp_assign,32,110,187,0,155,0,"{'ok': True, 'value': 110, 'stdout': '110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3712012767791748}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 77, 30, 82, 33, 49, 12], [3, 71, 59, 3, 96, 83, 62], [42, 22, 64, 66, 89, 61, 46], [33, 25, 83, 10, 52, 34, 35], [53, 23, 16, 58, 24, 30, 80], [50, 86, 14, 12, 23, 24, 69], [57, 47, 59, 45, 23, 55, 46]]"
1178,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1997535228729248}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [55, 69, 78, 95, 57, 70, 9, 60, 96, 47, 25, 12, 39, 45, 10, 18, 14, 7, 87, 78, 18, 81, 92, 63]"
1179,mul,8,7504026558967124,6353044563355556,0,7513344344444,0,"{'ok': True, 'value': 7504026558967124, 'stdout': '7504026558967124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07539725303649902}",1,Compute: 99636389 * 75314116
1180,mul,4,4922960,4938800,0,491480,0,"{'ok': True, 'value': 4922960, 'stdout': '4922960\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07509255409240723}",1,Compute: 1043 * 4720
1181,lcs,16,8,6,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09174489974975586}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adccbdcaadcbdcbd""
T = ""daaaccbbbccdbcaaa"""
1182,rod,4,12,12,1,1,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07424116134643555}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 1, 4, 12]"
1183,lcs,32,18,16,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08312630653381348}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbaaadabbbcabcbacadbaacbabdbdaaa""
T = ""cbbdbacdbbdaddcdcbbddbbdacbdabdc"""
1184,ilp_assign,16,51,105,0,110,0,"{'ok': True, 'value': 51, 'stdout': '51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38581061363220215}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 27, 22, 32, 45, 33, 1], [3, 41, 48, 19, 27, 24, 15], [43, 23, 8, 1, 47, 33, 47], [42, 33, 5, 35, 2, 44, 12], [21, 48, 25, 38, 18, 43, 1], [18, 21, 44, 32, 17, 8, 31], [18, 31, 48, 6, 47, 2, 46]]"
1185,add,32,119331415326417713757497658882935,,0,119331415326417713757497658882935,1,"{'ok': True, 'value': 119331415326417713757497658882935, 'stdout': '119331415326417713757497658882935\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07743954658508301}",1,Compute: 90008496667256575287034666994737 + 29322918659161138470462991888198
1186,sub,4,4582,4582,1,4582,1,"{'ok': True, 'value': 4582, 'stdout': '4582\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0732426643371582}",1,Compute: 9230 - 4648
1187,add,16,5908020173074814,11111111111111111,0,5907920173074814,0,"{'ok': True, 'value': 5908020173074814, 'stdout': '5908020173074814\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0841529369354248}",1,Compute: 4665595602008418 + 1242424571066396
1188,knap,16,425,139,0,23,0,"{'ok': True, 'value': 425, 'stdout': '425\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07633686065673828}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 8, 21, 15, 9, 30, 16, 8, 8, 27, 28, 27, 4, 18, 6, 30]
V = [19, 60, 64, 21, 52, 39, 45, 56, 28, 27, 8, 42, 23, 26, 10, 45]
C = 139"
1189,ilp_assign,32,137,210,0,208,0,"{'ok': True, 'value': 137, 'stdout': '137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38092565536499023}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[80, 24, 53, 89, 53, 92, 64], [90, 49, 55, 51, 61, 4, 1], [44, 64, 39, 82, 72, 42, 60], [70, 41, 88, 28, 79, 74, 62], [30, 38, 58, 3, 34, 60, 87], [66, 36, 60, 59, 39, 7, 5], [4, 58, 70, 9, 51, 50, 28]]"
1190,ilp_prod,2,35,23,0,3,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a5056bca5e4f40f797ac825b55e17a96-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a5056bca5e4f40f797ac825b55e17a96-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 15.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15655159950256348}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 3]
consumption (rows=resources) = [[1, 2], [1, 1]]
capacity = [7, 7]
upper_bounds = [7, 3]"
1191,rod,4,24,12,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08863258361816406}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 12, 6, 4]"
1192,lcs,8,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0758216381072998}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccccdcc""
T = ""cbabcaad"""
1193,mul,4,5504188,5555548,0,544088,0,"{'ok': True, 'value': 5504188, 'stdout': '5504188\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0782480239868164}",1,Compute: 1436 * 3833
1194,ilp_assign,4,16,15,0,24,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37685465812683105}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 7, 1, 7], [8, 1, 7, 4], [10, 8, 11, 6], [10, 1, 9, 11]]"
1195,rod,2,3,3,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_3omy0gk6/main.py"", line 11, in <module>\n    print(cut_rod(P, N))\n  File ""/tmp/cot_exec_3omy0gk6/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08394360542297363}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 3]"
1196,ilp_assign,8,29,46,0,92,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3897092342376709}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 4, 21, 3, 4, 7, 4], [11, 13, 11, 3, 13, 9, 7], [23, 4, 4, 8, 22, 23, 23], [19, 2, 1, 7, 4, 12, 15], [16, 24, 18, 2, 2, 22, 10], [10, 2, 14, 3, 6, 7, 18], [12, 1, 24, 20, 17, 5, 18]]"
1197,ilp_prod,2,42,35,0,28,0,"{'ok': True, 'value': 7, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4ef638456e7f4099ba727090b86bff85-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4ef638456e7f4099ba727090b86bff85-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -7 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                7.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n7.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14637088775634766}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 7]
consumption (rows=resources) = [[1, 1], [1, 2]]
capacity = [9, 6]
upper_bounds = [6, 3]"
1198,mul,32,3787867099807230181409570845682044647339533065856793320227406487,2,0,378444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 3787867099807230181409570845682044647339533065856793320227406487, 'stdout': '3787867099807230181409570845682044647339533065856793320227406487\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0744016170501709}",1,Compute: 66731056345638596530278708006699 * 56763182051063055298981470700613
1199,knap,16,461,1684,0,-1,0,"{'ok': True, 'value': 461, 'stdout': '461\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07521414756774902}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 32, 3, 21, 6, 32, 5, 31, 28, 32, 25, 9, 23, 26, 23, 5]
V = [37, 26, 36, 35, 59, 30, 60, 41, 26, 62, 37, 30, 1, 33, 26, 64]
C = 156"
1200,sub,16,1149721129518688,-1150318930476692,0,1149721129518688,1,"{'ok': True, 'value': 1149721129518688, 'stdout': '1149721129518688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07702302932739258}",1,Compute: 2816269260037802 - 1666548130519114
1201,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ogrdqzry/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_ogrdqzry/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07374811172485352}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
1202,add,16,4782878692589306,4782878702891306,0,4782878692599306,0,"{'ok': True, 'value': 4782878692589306, 'stdout': '4782878692589306\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0806722640991211}",1,Compute: 3489007129618839 + 1293871562970467
1203,sub,4,775,775,1,-775,0,"{'ok': True, 'value': 775, 'stdout': '775\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07530379295349121}",1,Compute: 3795 - 3020
1204,ilp_assign,2,2,2,1,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37226438522338867}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [1, 3]]"
1205,add,2,151,151,1,151,1,"{'ok': True, 'value': 151, 'stdout': '151\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07227444648742676}",1,Compute: 91 + 60
1206,ilp_assign,32,108,11,0,209,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4008200168609619}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 59, 66, 52, 9, 24, 81], [81, 71, 68, 41, 34, 21, 16], [21, 63, 66, 47, 7, 4, 62], [55, 33, 82, 96, 68, 39, 64], [78, 1, 4, 54, 73, 45, 38], [53, 54, 12, 42, 36, 36, 75], [58, 12, 46, 19, 32, 79, 11]]"
1207,ilp_prod,2,15,20,0,15,1,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/157483ae7eca47de89a150dbdeb06dd8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/157483ae7eca47de89a150dbdeb06dd8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16158771514892578}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 5]
consumption (rows=resources) = [[3, 2], [3, 2]]
capacity = [7, 8]
upper_bounds = [3, 3]"
1208,knap,8,85,110,0,5,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08063888549804688}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 15, 16, 6, 7, 9, 10, 5]
V = [11, 13, 17, 17, 12, 14, 27, 16]
C = 36"
1209,sub,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07534551620483398}",1,Compute: 93 - 83
1210,ilp_partition,2,4,The answer will be the minimum difference between the two groups.,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0835564136505127}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 6, 1]"
1211,add,2,83,83,1,83,1,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08346676826477051}",1,Compute: 32 + 51
1212,knap,2,8,5,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07445573806762695}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 2]
V = [8, 2, 3]
C = 4"
1213,add,16,16635066757234261,16635066757234261,1,16635066757234261,1,"{'ok': True, 'value': 16635066757234261, 'stdout': '16635066757234261\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0723567008972168}",1,Compute: 8838888048679523 + 7796178708554738
1214,ilp_prod,32,309,1015,0,240,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_q6rloyh1/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_q6rloyh1/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17819476127624512}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [47, 51, 32, 35, 95, 80]
consumption (rows=resources) = [[31, 24, 13, 1, 24, 8], [18, 1, 19, 18, 24, 14], [13, 14, 25, 5, 26, 29], [30, 5, 31, 1, 19, 23]]
capacity = [122, 89, 72, 126]
upper_bounds = [3, 5, 3, 4, 3, 3]"
1215,ilp_prod,2,35,21,0,21,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8d628692ac2243578ee0e8b86d3395fb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8d628692ac2243578ee0e8b86d3395fb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -6 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n6.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15032672882080078}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[2, 2], [3, 1]]
capacity = [10, 8]
upper_bounds = [3, 5]"
1216,ilp_partition,2,1,0,0,6,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10009455680847168}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 2, 6, 3]"
1217,ilp_partition,4,2,1,0,12,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0970156192779541}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 11, 9, 12]"
1218,lcs,8,4,4,1,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0810391902923584}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadddadc""
T = ""bcddbcac"""
1219,mul,32,1423810866923736426835444033535668314409680734938841769519456750,1411645066707962886896064665405066666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,145979415824601394282996592391550,0,"{'ok': True, 'value': 1423810866923736426835444033535668314409680734938841769519456750, 'stdout': '1423810866923736426835444033535668314409680734938841769519456750\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08381962776184082}",1,Compute: 69490705912171346647353651665775 * 20489227274842734604267704221170
1220,sub,16,1477110319023919,1477110319023918,0,1477110319023919,1,"{'ok': True, 'value': 1477110319023919, 'stdout': '1477110319023919\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07462072372436523}",1,Compute: 8857446057043231 - 7380335738019312
1221,sub,8,33509517,33509517,1,33509517,1,"{'ok': True, 'value': 33509517, 'stdout': '33509517\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834646224975586}",1,Compute: 78381355 - 44871838
1222,add,4,14401,14401,1,14401,1,"{'ok': True, 'value': 14401, 'stdout': '14401\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0864560604095459}",1,Compute: 9223 + 5178
1223,sub,2,34,34,1,34,1,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07413506507873535}",1,Compute: 88 - 54
1224,sub,16,970440347397618,970440347397618,1,970439347397618,0,"{'ok': True, 'value': 970440347397618, 'stdout': '970440347397618\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08612251281738281}",1,Compute: 2066212692726923 - 1095772345329305
1225,mul,16,28899791039163800388581194797888,2815230585987758492057894751282170,0,288809585249845950448448,0,"{'ok': True, 'value': 28899791039163800388581194797888, 'stdout': '28899791039163800388581194797888\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09150385856628418}",1,Compute: 7988107518531048 * 3617852034680456
1226,rod,2,12,12,1,6,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07294487953186035}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 6]"
1227,mul{'ok': True, 'value': 2710689377378956190992818992258863371201303835611121068247931538, 'stdout': '2710689377378956190992818992258863371201303835611121068247931538\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07233405113220215}",1,Compute: 35459555357998890640011224992542 * 76444539419964404041702023267239
1228,ilp_prod,4,33,39,0,33,1,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/621637428b34471a96106e7ff51f5dd1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/621637428b34471a96106e7ff51f5dd1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 22.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1569349765777588}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 6, 4]
consumption (rows=resources) = [[4, 3, 1], [3, 3, 1], [3, 3, 2]]
capacity = [10, 9, 16]
upper_bounds = [3, 3, 8]"
1229,add,32,97668913947790386321025980554661,92213112131121311213112131121311,0,97668913947790386321025980554661,1,"{'ok': True, 'value': 97668913947790386321025980554661, 'stdout': '97668913947790386321025980554661\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07993459701538086}",1,Compute: 52935076026681113495906791468453 + 44733837921109272825119189086208
1230,rod,16,608,46,0,65,0,"{'ok': True, 'value': 608, 'stdout': '608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07130646705627441}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [38, 19, 9, 14, 42, 40, 45, 31, 33, 36, 19, 25, 23, 25, 34, 26]"
1231,sub,8,22860495,22860495,1,22860495,1,"{'ok': True, 'value': 22860495, 'stdout': '22860495\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0821073055267334}",1,Compute: 81589954 - 58729459
1232,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08366727828979492}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
1233,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08447718620300293}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 27, 57, 44, 31, 72, 94, 69, 55, 1, 50, 39, 82, 18, 50, 68, 88, 61, 79, 29, 66, 87, 59, 65]"
1234,knap,4,26,26,1,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08260655403137207}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 3, 7]
V = [13, 6, 13, 11]
C = 9"
1235,add,16,7350998303172899,7312925385731292,0,7350998303172909,0,"{'ok': True, 'value': 7350998303172899, 'stdout': '7350998303172899\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08226728439331055}",1,Compute: 4212465385731292 + 3138532917441607
1236,ilp_prod,16,191,160,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_nzdpagkp/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_nzdpagkp/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15326547622680664}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 38, 29, 3, 39, 31]
consumption (rows=resources) = [[11, 2, 14, 2, 5, 15], [3, 15, 8, 11, 16, 9], [8, 1, 10, 5, 12, 14], [2, 3, 7, 9, 11, 12]]
capacity = [48, 64, 35, 34]
upper_bounds = [4, 4, 3, 3, 3, 3]"
1237,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09700798988342285}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabbbddcacbadbcd""
T = ""bcabdbabcccbdbc"""
1238,ilp_assign,32,130,187,0,208,0,"{'ok': True, 'value': 130, 'stdout': '130\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36286187171936035}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[35, 20, 68, 37, 55, 2, 57], [47, 22, 17, 73, 35, 14, 16], [84, 41, 29, 69, 75, 13, 56], [63, 87, 10, 36, 62, 44, 18], [26, 35, 33, 81, 89, 24, 81], [71, 11, 58, 88, 81, 48, 91], [28, 33, 41, 54, 17, 14, 86]]"
1239,knap,2,10,11,0,-1,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08088374137878418}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 5]
V = [1, 9, 6]
C = 4"
1240,ilp_prod,4,18,23,0,36,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f6dc2a59ecd3449ca9fe637a5243ad3a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f6dc2a59ecd3449ca9fe637a5243ad3a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16961431503295898}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 4, 5]
consumption (rows=resources) = [[3, 1, 3], [4, 4, 4], [3, 1, 3]]
capacity = [13, 9, 15]
upper_bounds = [3, 3, 3]"
1241,rod,16,368,64,0,64,0,"{'ok': True, 'value': 368, 'stdout': '368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09495925903320312}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [23, 19, 3, 22, 37, 31, 46, 11, 11, 19, 42, 40, 35, 18, 38, 11]"
1242,knap,2,6,11,0,0,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08001422882080078}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 4]
V = [3, 5, 6]
C = 5"
1243,knap,2,8,11,0,-1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08388185501098633}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 3]
V = [8, 6, 3]
C = 3"
1244,rod,8,152,22,0,19,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07523059844970703}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 13, 13, 8, 10, 2, 4, 9]"
1245,ilp_prod,2,12,15,0,9,0,"{'ok': True, 'value': 9, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/79834488c3ab47e4a5edbe4a3dc466d1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/79834488c3ab47e4a5edbe4a3dc466d1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n9.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15633034706115723}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[3, 2], [3, 3]]
capacity = [9, 6]
upper_bounds = [3, 3]"
1246,mul,4,26578212,108512,0,26845952,0,"{'ok': True, 'value': 26578212, 'stdout': '26578212\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0744779109954834}",1,Compute: 9124 * 2913
1247,add,16,5624668141405124,9074513000000000,0,5624667141305124,0,"{'ok': True, 'value': 5624668141405124, 'stdout': '5624668141405124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0801231861114502}",1,Compute: 1649078693634580 + 3975589447770544
1248,mul,4,18440800,113,0,18306800,0,"{'ok': True, 'value': 18440800, 'stdout': '18440800\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0719449520111084}",1,Compute: 3700 * 4984
1249,ilp_assign,8,31,28,0,46,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37999868392944336}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 3, 7, 6, 18, 24, 21], [5, 4, 24, 22, 20, 8, 12], [4, 12, 24, 16, 7, 7, 6], [14, 3, 14, 22, 17, 9, 7], [6, 4, 8, 7, 6, 19, 22], [5, 2, 7, 14, 1, 13, 6], [3, 14, 10, 1, 21, 6, 1]]"
1250,ilp_assign,16,88,105,0,105,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3808722496032715}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[36, 8, 19, 44, 7, 33, 5], [10, 23, 10, 42, 39, 35, 37], [29, 18, 31, 25, 11, 48, 45], [35, 22, 3, 29, 31, 44, 35], [21, 14, 47, 47, 13, 46, 17], [35, 26, 16, 48, 7, 35, 10], [25, 44, 2, 44, 37, 24, 4]]"
1251,rod,32,2080,1055,0,6,0,"{'ok': True, 'value': 2080, 'stdout': '2080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07717394828796387}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [65, 3, 18, 15, 91, 73, 26, 77, 66, 57, 47, 6, 87, 13, 49, 41, 9, 46, 54, 33, 32, 17, 50, 33, 86, 12, 49, 58, 32, 87, 8, 30]"
1252,ilp_partition,16,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19590210914611816}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 24, 47, 13, 12, 42, 17, 22, 13, 35, 16, 22, 15, 19, 24, 32]"
1253,mul,2,4984,,0,4984,1,"{'ok': True, 'value': 4984, 'stdout': '4984\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08948779106140137}",1,Compute: 89 * 56
1254,rod,32,1280,86,0,1,0,"{'ok': True, 'value': 1280, 'stdout': '1280\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07203984260559082}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [40, 54, 6, 41, 24, 49, 81, 59, 43, 95, 81, 32, 90, 56, 61, 26, 8, 94, 42, 88, 76, 56, 61, 46, 71, 68, 70, 31, 35, 86, 40, 2]"
1255,ilp_assign,4,12,0,0,18,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3837275505065918}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 12, 12, 7], [5, 2, 7, 1], [2, 1, 1, 2], [12, 6, 6, 1]]"
1256,ilp_assign,16,89,105,0,43,0,"{'ok': True, 'value': 89, 'stdout': '89\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38374924659729004}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 6, 5, 28, 42, 4, 13], [15, 41, 2, 37, 37, 14, 44], [34, 15, 1, 47, 20, 11, 36], [42, 33, 38, 30, 25, 16, 25], [7, 7, 17, 29, 22, 8, 22], [24, 16, 34, 46, 14, 15, 36], [21, 12, 15, 35, 47, 22, 43]]"
1257,lcs,16,10,7,0,18,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07393097877502441}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbadaddadabaacb""
T = ""cabdaccaabdbaccbc"""
1258,mul{'ok': True, 'value': 1944490944130365156414669235112816575052693034023331414307005165, 'stdout': '1944490944130365156414669235112816575052693034023331414307005165\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07621192932128906}",1,Compute: 21541620923143991263773316994415 * 90266695856727918561452133726051
1259,knap,8,88,103,0,8,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07381582260131836}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 10, 15, 8, 12, 11, 6, 3]
V = [2, 9, 3, 29, 27, 4, 2, 23]
C = 36"
1260,knap,16,377,1047,0,16,0,"{'ok': True, 'value': 377, 'stdout': '377\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08256363868713379}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 8, 31, 4, 19, 22, 9, 1, 20, 9, 9, 21, 28, 23, 32, 2]
V = [9, 61, 17, 13, 39, 42, 24, 13, 5, 40, 41, 39, 21, 26, 9, 39]
C = 127"
1261,sub,4,1996,1996,1,1996,1,"{'ok': True, 'value': 1996, 'stdout': '1996\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08189868927001953}",1,Compute: 3480 - 1484
1262,add,2,38,38,1,38,1,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0753791332244873}",1,Compute: 17 + 21
1263,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08549284934997559}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 20, 12, 1, 20, 9, 13, 9]"
1264,rod,8,104,30,0,1,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08067059516906738}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 24, 15, 15, 4, 22, 18, 23]"
1265,ilp_prod,8,82,100,0,2,0,"{'ok': True, 'value': 82, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4790d004fb8847b0838dc2356a28a28b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4790d004fb8847b0838dc2356a28a28b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 87.4186 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -71 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 3 columns\nCbc0012I Integer solution of -82 found by DiveCoefficient after 7 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3.3333333\nCbc0013I At root node, 3 cuts changed objective from -87.418605 to -82 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 7 row cuts average 3.4 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 8 row cuts average 2.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 3 row cuts average 3.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -82, took 7 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -87.4186 to -82\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 8 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 4 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                82.00000000\nEnumerated nodes:               0\nTotal iterations:               7\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n82.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15868020057678223}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 5, 8, 19]
consumption (rows=resources) = [[2, 5, 2, 6], [5, 7, 1, 8], [3, 3, 1, 1], [1, 4, 6, 1]]
capacity = [18, 32, 26, 23]
upper_bounds = [6, 3, 3, 3]"
1266,sub,8,16693940,16693940,1,-16693940,0,"{'ok': True, 'value': 16693940, 'stdout': '16693940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09237051010131836}",1,Compute: 80204963 - 63511023
1267,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18850445747375488}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 57, 55, 59, 69, 9, 30, 73, 21, 7, 50, 44, 70, 76, 13, 44, 64, 87, 19, 26, 51, 38, 65, 43]"
1268,lcs,16,8,6,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08131670951843262}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""accccbaadccaddbd""
T = ""bbccdabbdadbabd"""
1269,knap,2,13,13,1,-1,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07322502136230469}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 2, 1]
V = [7, 5, 8]
C = 4"
1270,ilp_prod,16,134,169,0,204,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec___mcbhwk/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec___mcbhwk/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1758129596710205}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [48, 30, 19, 38, 7, 16]
consumption (rows=resources) = [[3, 4, 5, 16, 3, 11], [6, 12, 12, 15, 5, 3], [6, 8, 9, 1, 5, 10], [12, 10, 4, 10, 4, 12]]
capacity = [46, 35, 61, 35]
upper_bounds = [3, 3, 3, 3, 7, 3]"
1271,ilp_prod,2,40,80,0,20,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c47e4a63031d47ffbb862b232a9ef866-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c47e4a63031d47ffbb862b232a9ef866-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 40 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -40 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                40.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 40.0\nProduct_0: 5.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18369078636169434}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8]
consumption (rows=resources) = [[1, 1], [2, 2]]
capacity = [9, 10]
upper_bounds = [5, 5]"
1272,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21615266799926758}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [66, 49, 67, 19, 54, 94, 21, 41, 51, 41, 80, 1, 38, 21, 52, 85, 53, 36, 26, 48, 46, 2, 34, 45]"
1273,knap,4,21,22,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09320306777954102}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 1, 6]
V = [13, 1, 8, 15]
C = 6"
1274,sub,8,23303003,23303003,1,23303003,1,"{'ok': True, 'value': 23303003, 'stdout': '23303003\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08713841438293457}",1,Compute: 42645918 - 19342915
1275,mul,32,410092677314827893817445229517868204127367597711097721673075700,41986261116457095945546356196804349578,0,39486623414347992313421733654290008660,0,"{'ok': True, 'value': 410092677314827893817445229517868204127367597711097721673075700, 'stdout': '410092677314827893817445229517868204127367597711097721673075700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07645416259765625}",1,Compute: 34180419216760605763760310008660 * 11997883194882996156710866827145
1276,add,32,150018894818214457202695643921039,157338324718643957226705644521038,0,149998894818214457202695643921039,0,"{'ok': True, 'value': 150018894818214457202695643921039, 'stdout': '150018894818214457202695643921039\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08458948135375977}",1,Compute: 72552492485592489013578814631985 + 77466402332621968189116829289054
1277,sub,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0863947868347168}",1,Compute: 53 - 46
1278,knap,32,1667,128,0,53,0,"{'ok': True, 'value': 1667, 'stdout': '1667\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08197164535522461}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 36, 41, 22, 6, 22, 10, 35, 56, 2, 13, 35, 50, 55, 10, 52, 37, 53, 12, 46, 56, 14, 47, 55, 30, 60, 7, 5, 42, 63, 52, 10]
V = [12, 5, 7, 2, 52, 119, 127, 111, 128, 112, 117, 35, 79, 81, 36, 83, 107, 7, 28, 99, 17, 11, 24, 71, 8, 56, 20, 70, 81, 12, 127, 98]
C = 518"
1279,rod,4,36,32,0,4,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0729684829711914}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 7, 8, 2]"
1280,add,4,16947,16947,1,17147,0,"{'ok': True, 'value': 16947, 'stdout': '16947\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0785825252532959}",1,Compute: 7558 + 9389
1281,ilp_assign,2,3,1,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4503669738769531}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [1, 3]]"
1282,sub,8,39833211,39833211,1,39833211,1,"{'ok': True, 'value': 39833211, 'stdout': '39833211\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09157752990722656}",1,Compute: 97655573 - 57822362
1283,ilp_partition,16,0,1,0,4,0,"{'ok': True, 'value': 192, 'stdout': '192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07563424110412598}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 20, 1, 45, 23, 19, 5, 12, 5, 8, 3, 7, 24, 26, 48, 7]"
1284,ilp_prod,4,36,49,0,39,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c7e871fe0b03450dac68739fd7baa72b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c7e871fe0b03450dac68739fd7baa72b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 27 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15269827842712402}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 4, 11]
consumption (rows=resources) = [[3, 4, 4], [3, 3, 3], [3, 4, 4]]
capacity = [14, 15, 9]
upper_bounds = [3, 3, 3]"
1285,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08727431297302246}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""c"""
1286,ilp_prod,16,143,155,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_c3u_cndh/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_c3u_cndh/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19192767143249512}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 33, 46, 17, 5, 22]
consumption (rows=resources) = [[16, 12, 8, 6, 13, 15], [13, 9, 10, 14, 14, 15], [15, 15, 9, 9, 5, 10], [12, 7, 4, 7, 16, 15]]
capacity = [62, 60, 33, 45]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1287,knap,32,1758,1645,0,53,0,"{'ok': True, 'value': 1758, 'stdout': '1758\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0885465145111084}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [39, 47, 43, 35, 43, 41, 16, 42, 56, 37, 19, 53, 50, 31, 36, 47, 15, 54, 63, 31, 45, 42, 16, 37, 4, 40, 64, 15, 21, 21, 19, 14]
V = [115, 36, 3, 102, 60, 32, 5, 104, 93, 70, 125, 9, 113, 28, 50, 91, 78, 60, 25, 94, 127, 16, 11, 121, 102, 45, 35, 114, 110, 47, 36, 102]
C = 568"
1288,ilp_prod,4,48,30,0,48,1,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1dffc31c8eb84114a99965e15ad9f648-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1dffc31c8eb84114a99965e15ad9f648-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17963314056396484}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 8, 10]
consumption (rows=resources) = [[1, 3, 1], [2, 3, 2], [2, 1, 2]]
capacity = [9, 11, 8]
upper_bounds = [4, 3, 4]"
1289,sub,8,34014172,34014172,1,34014172,1,"{'ok': True, 'value': 34014172, 'stdout': '34014172\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08184337615966797}",1,Compute: 44501133 - 10486961
1290,add,32,88754955245099413609337499312962,88755055245099413609337500312962,0,88754955245099413609337499312962,1,"{'ok': True, 'value': 88754955245099413609337499312962, 'stdout': '88754955245099413609337499312962\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07314443588256836}",1,Compute: 39645553124080447906898678334369 + 49109402121018965702438820978593
1291,rod,4,20,16,0,7,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08978891372680664}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 7, 7, 7]"
1292,add,32,39628558054761997618150395697866,0,0,40008558054761997618150395697866,0,"{'ok': True, 'value': 39628558054761997618150395697866, 'stdout': '39628558054761997618150395697866\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07471251487731934}",1,Compute: 21320335001492386189624870040400 + 18308223053269611428525525657466
1293,ilp_assign,16,59,0,0,105,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36004137992858887}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 3, 47, 33, 7, 1, 37], [29, 45, 27, 22, 8, 14, 7], [29, 27, 11, 16, 44, 25, 41], [23, 34, 40, 28, 5, 9, 29], [15, 30, 8, 32, 19, 39, 31], [2, 11, 38, 19, 27, 30, 34], [47, 44, 6, 32, 14, 41, 27]]"
1294,add,4,11796,11796,1,11796,1,"{'ok': True, 'value': 11796, 'stdout': '11796\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07419085502624512}",1,Compute: 2086 + 9710
1295,mul,4,54040446,1194366,0,53384826,0,"{'ok': True, 'value': 54040446, 'stdout': '54040446\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07656526565551758}",1,Compute: 5529 * 9774
1296,ilp_partition,8,0,1,0,96,0,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08468484878540039}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 1, 11, 13, 23, 14, 11, 20]"
1297,sub,4,1712,1712,1,1712,1,"{'ok': True, 'value': 1712, 'stdout': '1712\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07253336906433105}",1,Compute: 8855 - 7143
1298,ilp_partition,16,1,1,1,37,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19012069702148438}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [39, 41, 46, 8, 37, 12, 35, 27, 38, 29, 17, 11, 46, 21, 32, 8]"
1299,ilp_prod,16,342,106,0,57,0,"{'ok': True, 'value': 84, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5fb0cfaee19a4d8584a98e998ff13b54-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5fb0cfaee19a4d8584a98e998ff13b54-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 107.625 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -84 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                84.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n84.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17050600051879883}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 32, 20, 43, 41, 4]
consumption (rows=resources) = [[13, 9, 14, 1, 2, 1], [1, 2, 16, 10, 12, 7], [16, 6, 1, 1, 3, 4], [2, 15, 3, 4, 14, 6]]
capacity = [54, 64, 41, 57]
upper_bounds = [3, 3, 3, 6, 4, 9]"
1300,ilp_assign,32,137,187,0,155,0,"{'ok': True, 'value': 137, 'stdout': '137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3662436008453369}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[30, 9, 25, 27, 72, 49, 86], [24, 87, 12, 26, 18, 81, 19], [87, 23, 30, 17, 69, 79, 83], [79, 26, 56, 28, 66, 76, 50], [75, 63, 43, 44, 90, 2, 74], [15, 31, 53, 20, 44, 65, 77], [55, 12, 63, 13, 39, 40, 46]]"
1301,add,16,8306192778072004,10,0,8306192778072004,1,"{'ok': True, 'value': 8306192778072004, 'stdout': '8306192778072004\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07496523857116699}",1,Compute: 6662738225273706 + 1643454552798298
1302,add,32,150510664905862607486388223130716,149506664905862607486388223130716,0,150510664905862607486388223130716,1,"{'ok': True, 'value': 150510664905862607486388223130716, 'stdout': '150510664905862607486388223130716\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07473230361938477}",1,Compute: 56137460509763926025294021384971 + 94373204396098681461094201745745
1303,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07613587379455566}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbdd""
T = ""aacd"""
1304,mul,16,6857858704516723156284247073145,6434236434236434,0,71504923552888395645544556558377,0,"{'ok': True, 'value': 6857858704516723156284247073145, 'stdout': '6857858704516723156284247073145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07759213447570801}",1,Compute: 2979627047895835 * 2301582914331387
1305,sub,4,1420,1420,1,1420,1,"{'ok': True, 'value': 1420, 'stdout': '1420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07322192192077637}",1,Compute: 5812 - 4392
1306,add,2,100,100,1,100,1,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06886601448059082}",1,Compute: 33 + 67
1307,knap,16,289,1047,0,0,0,"{'ok': True, 'value': 289, 'stdout': '289\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07012462615966797}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [20, 8, 28, 13, 32, 19, 23, 10, 17, 25, 5, 15, 3, 15, 21, 27]
V = [37, 5, 28, 36, 21, 8, 53, 14, 60, 24, 23, 15, 12, 2, 9, 39]
C = 140"
1308,knap,8,86,103,0,0,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08282661437988281}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 14, 3, 12, 10, 9, 11, 15]
V = [12, 17, 11, 30, 11, 28, 16, 7]
C = 44"
1309,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07680249214172363}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdba""
T = ""acb"""
1310,mul,8,2331059070129824,867,0,521694512,0,"{'ok': True, 'value': 2331059070129824, 'stdout': '2331059070129824\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08397388458251953}",1,Compute: 86735752 * 26875412
1311,sub,2,5,5,1,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0853874683380127}",1,Compute: 81 - 76
1312,ilp_prod,16,88,108,0,108,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_z2a2n09i/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_z2a2n09i/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14611411094665527}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 24, 4, 15, 15, 9]
consumption (rows=resources) = [[3, 10, 8, 8, 10, 10], [5, 11, 16, 1, 10, 10], [11, 4, 10, 10, 11, 12], [3, 10, 5, 13, 3, 4]]
capacity = [35, 58, 39, 63]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1313,mul,8,6500591936670873,65184115534693,0,1,0,"{'ok': True, 'value': 6500591936670873, 'stdout': '6500591936670873\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07647085189819336}",1,Compute: 68257421 * 95236413
1314,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09857487678527832}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 1, 1]"
1315,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09847545623779297}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccacbcccacbdabdb""
T = ""acaddcaccddabda"""
1316,sub,8,1630756,10001000,0,1630756,1,"{'ok': True, 'value': 1630756, 'stdout': '1630756\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08760523796081543}",1,Compute: 76212117 - 74581361
1317,ilp_partition,4,0,1,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08117198944091797}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 12, 3, 10]"
1318,knap,16,389,130,0,0,0,"{'ok': True, 'value': 389, 'stdout': '389\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07469844818115234}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 23, 17, 11, 3, 25, 31, 19, 1, 7, 24, 14, 28, 14, 1, 29]
V = [35, 18, 32, 25, 13, 59, 6, 60, 37, 47, 64, 30, 3, 28, 4, 16]
C = 130"
1319,sub,16,1737314889148314,1737314889148314,1,1737314889148314,1,"{'ok': True, 'value': 1737314889148314, 'stdout': '1737314889148314\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07521867752075195}",1,Compute: 4133464990047774 - 2396150100899460
1320,rod,8,56,4,0,1,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0745697021484375}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 2, 11, 8, 9, 20, 24, 18]"
1321,mul,4,4329147,200,0,4346637,0,"{'ok': True, 'value': 4329147, 'stdout': '4329147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08615922927856445}",1,Compute: 2939 * 1473
1322,lcs,32,20,12,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07475638389587402}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcddabdcccabdcdccddcbccdadacaabd""
T = ""dcaacabcdbcbdbadaccddcdbcadcaaac"""
1323,add,2,145,145,1,145,1,"{'ok': True, 'value': 145, 'stdout': '145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07543373107910156}",1,Compute: 79 + 66
1324,knap,16,365,143,0,7,0,"{'ok': True, 'value': 365, 'stdout': '365\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08414387702941895}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 12, 31, 31, 8, 7, 26, 30, 7, 26, 28, 23, 18, 26, 1, 6]
V = [49, 12, 13, 12, 56, 62, 24, 33, 24, 58, 23, 40, 14, 36, 1, 6]
C = 143"
1325,knap,32,1495,1047,0,36,0,"{'ok': True, 'value': 1495, 'stdout': '1495\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08064556121826172}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [46, 7, 27, 41, 13, 60, 17, 48, 39, 39, 41, 35, 36, 1, 16, 49, 55, 59, 61, 15, 20, 50, 10, 19, 40, 28, 28, 52, 43, 12, 28, 43]
V = [85, 62, 117, 58, 10, 30, 17, 85, 14, 119, 66, 93, 14, 40, 18, 29, 69, 12, 18, 19, 48, 124, 16, 27, 120, 42, 106, 33, 39, 112, 121, 93]
C = 539"
1326,mul,2,1615,1655,0,95,0,"{'ok': True, 'value': 1615, 'stdout': '1615\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07513546943664551}",1,Compute: 95 * 17
1327,add,8,181470296,181470304,0,181470396,0,"{'ok': True, 'value': 181470296, 'stdout': '181470296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08022737503051758}",1,Compute: 85261889 + 96208407
1328,mul,8,1347526797038910,134850465913181,0,130064348131010,0,"{'ok': True, 'value': 1347526797038910, 'stdout': '1347526797038910\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07670998573303223}",1,Compute: 33797070 * 39871113
1329,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07799243927001953}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacccbda""
T = ""cacbaba"""
1330,ilp_partition,16,1,1,1,44,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3092515468597412}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 18, 6, 18, 33, 36, 35, 44, 44, 11, 16, 10, 9, 34, 33]"
1331,add,32,103463653630344984546168801617959,103463653643048084055746595617059,0,103463653630345084546168801617959,0,"{'ok': True, 'value': 103463653630344984546168801617959, 'stdout': '103463653630344984546168801617959\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08524918556213379}",1,Compute: 75312713257316937505842756070956 + 28150940373028047040326045547003
1332,ilp_assign,32,166,242,0,208,0,"{'ok': True, 'value': 166, 'stdout': '166\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6248068809509277}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[65, 60, 5, 48, 37, 52, 14], [73, 82, 28, 44, 77, 73, 60], [69, 68, 10, 18, 21, 91, 9], [96, 35, 35, 31, 81, 69, 68], [57, 63, 13, 31, 63, 82, 25], [2, 85, 12, 23, 93, 33, 89], [62, 50, 32, 77, 53, 37, 90]]"
1333,mul,2,1287,39,0,1308,0,"{'ok': True, 'value': 1287, 'stdout': '1287\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0752248764038086}",1,Compute: 33 * 39
1334,ilp_partition,8,0,1,0,17,0,"{'ok': True, 'value': 66, 'stdout': '66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0822598934173584}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 14, 3, 15, 13, 4, 14, 17]"
1335,ilp_assign,32,130,208,0,200,0,"{'ok': True, 'value': 130, 'stdout': '130\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3788743019104004}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[84, 61, 17, 82, 49, 20, 45], [45, 13, 37, 44, 17, 37, 17], [93, 12, 46, 83, 91, 11, 28], [78, 12, 61, 77, 64, 80, 2], [27, 78, 46, 38, 56, 23, 67], [43, 40, 84, 74, 36, 42, 94], [13, 55, 61, 72, 66, 63, 29]]"
1336,sub,16,4365489818178260,9876543210,0,4365489818178260,1,"{'ok': True, 'value': 4365489818178260, 'stdout': '4365489818178260\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08536005020141602}",1,Compute: 7232536611052484 - 2867046792874224
1337,ilp_partition,16,1,1,1,39,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19376659393310547}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [29, 23, 16, 4, 30, 8, 34, 44, 39, 43, 37, 2, 40, 38, 9, 37]"
1338,knap,2,9,9,1,2,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09287476539611816}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 1]
V = [6, 3, 6]
C = 2"
1339,mul,16,9203767162271649430189150592223,9223372036854775807,0,91528005491517435645655543,0,"{'ok': True, 'value': 9203767162271649430189150592223, 'stdout': '9203767162271649430189150592223\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08810591697692871}",1,Compute: 7409504037097679 * 1242156980573937
1340,rod,8,96,30,0,30,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0934896469116211}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 16, 10, 5, 3, 9, 19, 16]"
1341,lcs,8,5,4,0,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08341097831726074}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccabcbac""
T = ""dcdbcdbda"""
1342,rod,32,896,1050,0,28,0,"{'ok': True, 'value': 896, 'stdout': '896\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07449460029602051}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [28, 1, 53, 94, 57, 5, 83, 11, 33, 23, 85, 57, 3, 62, 96, 54, 19, 58, 28, 3, 8, 71, 21, 49, 63, 24, 62, 81, 82, 55, 1, 59]"
1343,add,8,133047023,132046923,0,133046983,0,"{'ok': True, 'value': 133047023, 'stdout': '133047023\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07545685768127441}",1,Compute: 63832542 + 69214481
1344,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0745553970336914}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baacdadb""
T = ""accacba"""
1345,knap,8,65,104,0,0,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08104896545410156}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 11, 2, 6, 14, 7, 9, 15]
V = [20, 8, 15, 1, 2, 7, 22, 15]
C = 38"
1346,rod,32,1264,1050,0,1,0,"{'ok': True, 'value': 1264, 'stdout': '1264\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07451725006103516}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [9, 79, 61, 31, 83, 32, 35, 40, 39, 79, 5, 93, 53, 71, 70, 45, 19, 43, 19, 4, 63, 18, 48, 81, 63, 78, 75, 48, 93, 90, 48, 32]"
1347,ilp_assign,32,159,185,0,209,0,"{'ok': True, 'value': 159, 'stdout': '159\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3989114761352539}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[51, 55, 35, 87, 93, 71, 41], [78, 69, 31, 29, 87, 92, 65], [56, 40, 70, 48, 74, 25, 46], [14, 9, 39, 47, 94, 93, 61], [65, 31, 51, 39, 70, 96, 39], [29, 51, 96, 84, 9, 75, 72], [56, 18, 26, 8, 1, 78, 38]]"
1348,mul,4,9949614,68306,0,10103994,0,"{'ok': True, 'value': 9949614, 'stdout': '9949614\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07347965240478516}",1,Compute: 4177 * 2382
1349,rod,8,176,23,0,1,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09138178825378418}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 1, 11, 22, 22, 5, 15, 9]"
1350,ilp_prod,16,266,155,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_8k34f6m4/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_8k34f6m4/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1449756622314453}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [41, 33, 10, 4, 22, 43]
consumption (rows=resources) = [[4, 15, 5, 1, 12, 4], [3, 12, 12, 14, 5, 3], [5, 14, 1, 7, 9, 14], [6, 14, 10, 4, 6, 12]]
capacity = [35, 53, 32, 63]
upper_bounds = [6, 3, 4, 3, 3, 3]"
1351,rod,8,176,0,0,1,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0740814208984375}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 3, 13, 23, 6, 19, 3, 21]"
1352,sub,8,37761420,37761420,1,37761420,1,"{'ok': True, 'value': 37761420, 'stdout': '37761420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09904241561889648}",1,Compute: 92943757 - 55182337
1353,ilp_assign,2,5,4,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36658740043640137}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 6], [2, 3]]"
1354,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08532881736755371}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcb""
T = ""ddacc"""
1355,sub,4,532,532,1,532,1,"{'ok': True, 'value': 532, 'stdout': '532\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08601522445678711}",1,Compute: 6587 - 6055
1356,add,32,65226420490381982817508945444289,522160510207456318,0,65226420489381982817508945444299,0,"{'ok': True, 'value': 65226420490381982817508945444289, 'stdout': '65226420490381982817508945444289\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07672715187072754}",1,Compute: 20194801614659973162830794510942 + 45031618875722009654678150933347
1357,sub,8,73198288,73198308,0,73198288,1,"{'ok': True, 'value': 73198288, 'stdout': '73198288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07633209228515625}",1,Compute: 84310084 - 11111796
1358,ilp_assign,16,48,105,0,105,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3992774486541748}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 46, 46, 40, 28, 27, 20], [6, 34, 6, 16, 13, 39, 42], [17, 5, 7, 38, 25, 6, 42], [27, 16, 25, 28, 4, 2, 23], [15, 12, 5, 40, 27, 23, 32], [30, 5, 2, 6, 20, 9, 30], [18, 28, 44, 2, 4, 3, 38]]"
1359,ilp_assign,32,212,187,0,209,0,"{'ok': True, 'value': 212, 'stdout': '212\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39228248596191406}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[86, 42, 28, 63, 27, 38, 89], [42, 27, 47, 28, 24, 18, 10], [47, 23, 77, 58, 13, 81, 50], [37, 7, 43, 56, 43, 20, 84], [50, 94, 96, 77, 47, 47, 39], [76, 26, 65, 88, 22, 59, 48], [93, 78, 73, 65, 44, 94, 69]]"
1360,mul,16,19303265527849428949447500497460,19255189470270336,0,2008686120859717552965656,0,"{'ok': True, 'value': 19303265527849428949447500497460, 'stdout': '19303265527849428949447500497460\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07549595832824707}",1,Compute: 8006328912928647 * 2411000814203180
1361,sub,2,19,19,1,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0923616886138916}",1,Compute: 75 - 56
1362,mul,8,873942025374024,8735845958666844,0,868048859192888,0,"{'ok': True, 'value': 873942025374024, 'stdout': '873942025374024\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08187127113342285}",1,Compute: 51937222 * 16826892
1363,rod,8,24,22,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0687408447265625}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 6, 8, 3, 15, 2, 10, 10]"
1364,rod,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08300900459289551}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 6]"
1365,add,32,132035447870482484492888615041024,465587431765535995855538561882868,0,132035447870482484492888615441024,0,"{'ok': True, 'value': 132035447870482484492888615041024, 'stdout': '132035447870482484492888615041024\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07556414604187012}",1,Compute: 40184404625535995855538561882868 + 91851043244946488637350053158156
1366,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08529996871948242}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 3]"
1367,knap,8,72,100,0,1,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08020496368408203}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 12, 2, 11, 4, 7, 12]
V = [20, 9, 5, 2, 28, 11, 1, 24]
C = 27"
1368,knap,4,16,15,0,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07369709014892578}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 2, 2, 7]
V = [2, 1, 14, 7]
C = 8"
1369,sub,16,5442614556378808,5442614556378808,1,5442614556378808,1,"{'ok': True, 'value': 5442614556378808, 'stdout': '5442614556378808\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07706093788146973}",1,Compute: 6731098560949095 - 1288484004570287
1370,add,8,106828182,106828182,1,106828182,1,"{'ok': True, 'value': 106828182, 'stdout': '106828182\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07700967788696289}",1,Compute: 55843634 + 50984548
1371,add,32,114721865748881510836695344565177,114721865748881510836695344565177,1,114721865748881510836695344565177,1,"{'ok': True, 'value': 114721865748881510836695344565177, 'stdout': '114721865748881510836695344565177\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07728171348571777}",1,Compute: 56893263106701384167895552411156 + 57828602642180126668799792154021
1372,ilp_assign,32,143,189,0,209,0,"{'ok': True, 'value': 143, 'stdout': '143\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3742825984954834}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[67, 12, 41, 25, 71, 91, 21], [76, 96, 50, 88, 23, 25, 7], [76, 25, 37, 26, 59, 6, 11], [67, 65, 95, 89, 15, 27, 39], [34, 80, 49, 20, 41, 84, 96], [84, 65, 70, 90, 15, 89, 8], [85, 5, 78, 31, 53, 71, 27]]"
1373,rod,16,656,46,0,65,0,"{'ok': True, 'value': 656, 'stdout': '656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07344651222229004}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [41, 48, 42, 38, 34, 12, 21, 28, 16, 20, 27, 16, 23, 10, 19, 22]"
1374,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07627534866333008}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""cda"""
1375,ilp_prod,2,24,23,0,9,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5004ee1dec2441e49e386b5cfa785f62-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5004ee1dec2441e49e386b5cfa785f62-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 24.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1629619598388672}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 5]
consumption (rows=resources) = [[3, 3], [3, 2]]
capacity = [10, 9]
upper_bounds = [3, 3]"
1376,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07352805137634277}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadc""
T = ""bdcd"""
1377,ilp_assign,32,173,246,0,10,0,"{'ok': True, 'value': 173, 'stdout': '173\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4063577651977539}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[53, 89, 45, 73, 51, 10, 85], [91, 3, 1, 27, 92, 65, 29], [68, 48, 58, 69, 94, 45, 55], [37, 86, 31, 49, 62, 90, 15], [64, 78, 95, 77, 39, 11, 70], [44, 61, 5, 67, 6, 12, 28], [49, 87, 64, 41, 96, 65, 10]]"
1378,ilp_prod,4,40,60,0,60,0,"{'ok': True, 'value': 50, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fb889656c22045ffb49e1194c7a9fe0f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fb889656c22045ffb49e1194c7a9fe0f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 53.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -50 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                50.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n50.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15497803688049316}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 10, 5]
consumption (rows=resources) = [[2, 3, 2], [4, 2, 4], [3, 2, 2]]
capacity = [11, 16, 12]
upper_bounds = [4, 3, 4]"
1379,mul{'ok': True, 'value': 37190193342618159818041387219547, 'stdout': '37190193342618159818041387219547\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07739114761352539}",1,Compute: 8213994313370059 * 4527662416576433
1380,knap,2,13,13,1,-1,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07886385917663574}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 4, 1]
V = [9, 6, 4]
C = 3"
1381,ilp_prod,4,71,43,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_twoovrh7/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_twoovrh7/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14245963096618652}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4, 10]
consumption (rows=resources) = [[3, 3, 1], [1, 2, 1], [1, 4, 2]]
capacity = [15, 9, 13]
upper_bounds = [5, 3, 6]"
1382,ilp_assign,8,32,56,0,80,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40063977241516113}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 13, 20, 13, 16, 9, 12], [6, 16, 4, 19, 22, 9, 24], [15, 16, 16, 1, 11, 2, 6], [12, 15, 19, 3, 21, 5, 10], [18, 20, 20, 7, 1, 21, 2], [7, 9, 19, 24, 3, 7, 21], [22, 7, 3, 23, 23, 3, 9]]"
1383,ilp_assign,4,10,18,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41692113876342773}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4, 6, 9], [7, 3, 7, 5], [7, 11, 1, 11], [8, 3, 10, 12]]"
1384,lcs,32,18,10,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07712244987487793}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdaaaabdbbaacdcaccccabcdbdaacaac""
T = ""bddbbdcdcabccabaabbcbcbccbbacba"""
1385,ilp_prod,32,363,1000,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_pihta733/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_pihta733/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15910840034484863}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 9, 69, 23, 89, 84]
consumption (rows=resources) = [[24, 5, 5, 20, 29, 24], [6, 10, 31, 8, 15, 15], [5, 14, 8, 8, 22, 28], [14, 10, 32, 15, 16, 17]]
capacity = [113, 95, 105, 126]
upper_bounds = [4, 7, 3, 5, 3, 3]"
1386,knap,32,1660,1000,0,60,0,"{'ok': True, 'value': 1660, 'stdout': '1660\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08234524726867676}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 59, 31, 16, 54, 12, 8, 20, 13, 62, 34, 57, 19, 49, 31, 60, 64, 11, 28, 24, 61, 26, 19, 53, 22, 42, 38, 30, 13, 5, 48, 1]
V = [58, 22, 35, 110, 69, 58, 83, 23, 58, 83, 83, 29, 107, 111, 116, 107, 90, 1, 101, 104, 125, 1, 27, 128, 79, 115, 89, 55, 71, 8, 28, 1]
C = 508"
1387,add,32,120231868932709927779837392176115,119231866932709927539837383176133,0,120231869332709925779837392176115,0,"{'ok': True, 'value': 120231868932709927779837392176115, 'stdout': '120231868932709927779837392176115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0726768970489502}",1,Compute: 91716303770600171309230939180621 + 28515565162109756470606452995494
1388,knap,4,22,23,0,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07070660591125488}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 8, 8, 3]
V = [2, 8, 13, 9]
C = 12"
1389,knap,8,111,105,0,8,0,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.085540771484375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 7, 13, 12, 16, 6, 9, 9]
V = [20, 29, 5, 17, 26, 16, 28, 18]
C = 36"
1390,ilp_assign,2,4,3,0,7,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4013679027557373}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 2], [2, 5]]"
1391,ilp_prod,32,270,1050,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6iheo9om/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_6iheo9om/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1442723274230957}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [75, 72, 24, 27, 54, 70]
consumption (rows=resources) = [[12, 7, 22, 2, 10, 2], [32, 19, 6, 25, 10, 17], [29, 5, 9, 9, 22, 24], [9, 21, 13, 29, 18, 27]]
capacity = [86, 75, 107, 81]
upper_bounds = [3, 3, 3, 3, 4, 3]"
1392,sub,16,8270107646954825,1250960913487963,0,8269107647004825,0,"{'ok': True, 'value': 8270107646954825, 'stdout': '8270107646954825\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07631635665893555}",1,Compute: 9521068560442788 - 1250960913487963
1393,ilp_partition,16,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1980299949645996}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 38, 13, 43, 10, 46, 3, 41, 26, 14, 32, 32, 22, 34, 32, 47]"
1394,ilp_partition,8,1,1,1,17,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07607603073120117}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 19, 21, 23, 9, 3, 2, 17]"
1395,rod,4,8,8,1,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06674814224243164}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 2, 4, 8]"
1396,rod,2,12,6,0,10,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08172035217285156}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 4]"
1397,knap,2,9,16,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09852242469787598}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 3]
V = [9, 7, 7]
C = 3"
1398,sub,2,12,12,1,12,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07962703704833984}",1,Compute: 41 - 29
1399,add,4,10513,10513,1,10513,1,"{'ok': True, 'value': 10513, 'stdout': '10513\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08229446411132812}",1,Compute: 6495 + 4018
1400,lcs,4,3,3,1,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07318282127380371}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbc""
T = ""cabab"""
1401,ilp_assign,32,78,185,0,209,0,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4060492515563965}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[68, 77, 91, 42, 73, 36, 37], [6, 26, 56, 71, 7, 88, 57], [5, 39, 93, 28, 9, 11, 76], [49, 79, 91, 6, 4, 81, 32], [95, 51, 10, 87, 79, 78, 44], [64, 6, 20, 60, 69, 42, 91], [1, 24, 41, 45, 80, 68, 60]]"
1402,mul,4,18595178,185398,0,18535938,0,"{'ok': True, 'value': 18595178, 'stdout': '18595178\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08531022071838379}",1,Compute: 5474 * 3397
1403,ilp_partition,32,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19776415824890137}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [95, 17, 40, 32, 85, 88, 84, 36, 60, 90, 4, 1, 86, 62, 59, 60, 7, 80, 3, 27, 77, 10, 63, 37]"
1404,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07399487495422363}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccc""
T = ""dddbb"""
1405,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07320952415466309}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacb""
T = ""bcdc"""
1406,rod,8,92,30,0,30,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07553315162658691}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 23, 11, 22, 21, 20, 14, 7]"
1407,ilp_partition,4,2,1,0,22,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0926351547241211}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 2, 11, 7]"
1408,ilp_assign,16,69,105,0,114,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3842799663543701}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 11, 44, 17, 5, 3, 9], [31, 35, 38, 23, 14, 43, 41], [28, 40, 5, 21, 39, 46, 25], [48, 39, 34, 3, 16, 33, 27], [34, 41, 11, 32, 47, 14, 45], [20, 47, 8, 34, 27, 9, 46], [46, 37, 45, 44, 27, 17, 2]]"
1409,mul,2,2146,59,0,2166,0,"{'ok': True, 'value': 2146, 'stdout': '2146\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07367730140686035}",1,Compute: 58 * 37
1410,mul,32,1139793092879850468362064466954316441233387764954597347483803228,"The exact answer to the problem is the product of the two numbers, which is too large to be written out in full.",0,11416882043648462542862498534268198223778888,0,"{'ok': True, 'value': 1139793092879850468362064466954316441233387764954597347483803228, 'stdout': '1139793092879850468362064466954316441233387764954597347483803228\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08331561088562012}",1,Compute: 12124441021824231271431446478311 * 94007887937118138533857992641348
1411,mul,2,920,920,1,920,1,"{'ok': True, 'value': 920, 'stdout': '920\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07677507400512695}",1,Compute: 40 * 23
1412,ilp_assign,16,59,105,0,114,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39536547660827637}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[30, 27, 23, 36, 21, 36, 13], [35, 22, 7, 9, 38, 24, 31], [39, 4, 22, 31, 2, 48, 29], [6, 21, 31, 6, 10, 28, 25], [18, 29, 41, 17, 48, 17, 20], [14, 13, 40, 21, 47, 10, 38], [39, 4, 37, 26, 23, 6, 30]]"
1413,sub,16,2745320121886457,9446775564442776,0,-7254679921883437,0,"{'ok': True, 'value': 2745320121886457, 'stdout': '2745320121886457\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07645678520202637}",1,Compute: 9313863286329233 - 6568543164442776
1414,knap,32,1402,1049,0,54,0,"{'ok': True, 'value': 1402, 'stdout': '1402\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09110307693481445}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [47, 51, 48, 41, 42, 31, 52, 7, 43, 25, 37, 27, 62, 20, 44, 6, 53, 41, 54, 33, 10, 24, 8, 27, 38, 11, 15, 51, 32, 51, 20, 7]
V = [81, 89, 66, 72, 6, 51, 62, 62, 5, 86, 26, 108, 90, 47, 68, 44, 53, 107, 91, 7, 34, 21, 54, 77, 72, 91, 51, 128, 73, 38, 47, 9]
C = 529"
1415,mul,4,23120904,2275984,0,2301504,0,"{'ok': True, 'value': 23120904, 'stdout': '23120904\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08469104766845703}",1,Compute: 2708 * 8538
1416,ilp_partition,2,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07683324813842773}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 2, 4]"
1417,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_b6fsghk8/main.py"", line 11, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_b6fsghk8/main.py"", line 6, in rod_cutting\n    q = max(q, P[i] + rod_cutting(P, N-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08305668830871582}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
1418,knap,2,7,13,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07160043716430664}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 2]
V = [4, 4, 7]
C = 6"
1419,ilp_prod,16,155,161,0,207,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_8ze5j6q0/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_8ze5j6q0/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15346264839172363}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 27, 48, 33, 8, 31]
consumption (rows=resources) = [[7, 3, 5, 1, 5, 12], [8, 6, 13, 10, 10, 16], [1, 16, 16, 15, 4, 16], [8, 3, 7, 10, 9, 7]]
capacity = [60, 51, 59, 52]
upper_bounds = [6, 3, 3, 3, 5, 3]"
1420,rod,16,256,47,0,64,0,"{'ok': True, 'value': 256, 'stdout': '256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0756220817565918}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [4, 32, 26, 18, 1, 40, 27, 13, 13, 11, 43, 5, 11, 47, 44, 15]"
1421,rod,16,464,65,0,64,0,"{'ok': True, 'value': 464, 'stdout': '464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07401895523071289}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [29, 2, 2, 31, 8, 13, 44, 32, 17, 39, 18, 23, 12, 6, 37, 36]"
1422,ilp_prod,16,164,1056,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_v7pizb9s/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_v7pizb9s/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.147780179977417}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [41, 12, 31, 31, 14, 12]
consumption (rows=resources) = [[4, 5, 4, 4, 15, 5], [1, 7, 10, 2, 11, 15], [9, 7, 13, 15, 7, 1], [10, 3, 15, 4, 13, 5]]
capacity = [42, 60, 36, 42]
upper_bounds = [4, 5, 3, 3, 3, 4]"
1423,sub,32,3783915425091939709451330011575,37841054250929406105451330011575,0,37849054250919496500451430011575,0,"{'ok': True, 'value': 3783915425091939709451330011575, 'stdout': '3783915425091939709451330011575\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07429647445678711}",1,Compute: 63965137287414089397669912604478 - 60181221862322149688218582592903
1424,mul,2,1575,1575,1,1575,1,"{'ok': True, 'value': 1575, 'stdout': '1575\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07534980773925781}",1,Compute: 75 * 21
1425,mul,16,15382739724729858505947750607365,15394888121634587566966444445,0,15391926067955763564667555,0,"{'ok': True, 'value': 15382739724729858505947750607365, 'stdout': '15382739724729858505947750607365\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06811666488647461}",1,Compute: 2330646761325979 * 6600202132723935
1426,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0788106918334961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""cd"""
1427,ilp_partition,2,3,1,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07645297050476074}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 5, 6]"
1428,sub,2,28,28,1,28,1,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0844271183013916}",1,Compute: 43 - 15
1429,knap,8,94,147,0,0,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08297348022460938}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 5, 4, 13, 11, 1, 5, 12]
V = [32, 10, 3, 6, 21, 13, 18, 31]
C = 31"
1430,lcs,8,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0837411880493164}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbddccb""
T = ""abcabac"""
1431,ilp_partition,8,1,1,1,19,0,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07655906677246094}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 24, 4, 24, 1, 15, 19]"
1432,add,32,120985331705624123432656016161415,141001111955337123623493872273335,0,121005271705624123432656016161415,0,"{'ok': True, 'value': 120985331705624123432656016161415, 'stdout': '120985331705624123432656016161415\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07258081436157227}",1,Compute: 58317860572101424836926207356669 + 62667471133522698595729808804746
1433,ilp_prod,8,84,105,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_hjbcv5o8/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_hjbcv5o8/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15376615524291992}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 22, 7, 9]
consumption (rows=resources) = [[5, 4, 8, 3], [6, 2, 7, 1], [6, 8, 8, 1], [7, 5, 1, 6]]
capacity = [23, 30, 31, 22]
upper_bounds = [3, 3, 3, 3]"
1434,add,2,52,52,1,52,1,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07760119438171387}",1,Compute: 39 + 13
1435,add,2,181,181,1,181,1,"{'ok': True, 'value': 181, 'stdout': '181\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07454228401184082}",1,Compute: 84 + 97
1436,sub,4,5913,5913,1,5913,1,"{'ok': True, 'value': 5913, 'stdout': '5913\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07553386688232422}",1,Compute: 9208 - 3295
1437,lcs,16,8,7,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0737144947052002}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbabdcbcbbadbab""
T = ""ddbcccadaaabbdc"""
1438,rod,16,736,120,0,154,0,"{'ok': True, 'value': 736, 'stdout': '736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07318115234375}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [46, 24, 4, 19, 47, 3, 17, 21, 46, 30, 18, 45, 41, 35, 5, 16]"
1439,ilp_assign,8,28,56,0,75,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38541746139526367}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 9, 4, 9, 11, 10, 24], [16, 6, 9, 9, 15, 12, 11], [20, 5, 12, 14, 6, 3, 6], [3, 23, 8, 11, 3, 6, 10], [4, 14, 5, 9, 20, 10, 2], [3, 9, 10, 13, 13, 4, 4], [15, 18, 6, 18, 1, 2, 20]]"
1440,ilp_assign,4,21,0,0,6,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39758849143981934}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 11, 3, 3], [3, 11, 12, 11], [3, 11, 5, 12], [2, 11, 5, 6]]"
1441,ilp_partition,16,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1885054111480713}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [38, 33, 31, 7, 24, 43, 35, 1, 2, 42, 31, 34, 36, 29, 1, 11]"
1442,add,8,60899255,60899255,1,60899255,1,"{'ok': True, 'value': 60899255, 'stdout': '60899255\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0760183334350586}",1,Compute: 12061049 + 48838206
1443,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07562041282653809}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baabdabbcccbcbdb""
T = ""acaabacdccacdccd"""
1444,sub,8,56001518,56001518,1,56001518,1,"{'ok': True, 'value': 56001518, 'stdout': '56001518\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.083953857421875}",1,Compute: 88010434 - 32008916
1445,ilp_partition,4,2,0,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_7fn2e51e/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_7fn2e51e/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08272290229797363}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 7, 1, 2]"
1446,ilp_assign,8,32,36,0,20,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.381500244140625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 18, 20, 9, 16, 14, 5], [9, 7, 24, 6, 7, 11, 11], [19, 15, 18, 13, 21, 13, 13], [12, 15, 17, 9, 17, 9, 3], [7, 9, 2, 12, 18, 8, 15], [15, 1, 14, 17, 6, 15, 12], [1, 2, 23, 6, 12, 2, 2]]"
1447,ilp_partition,32,0,1,0,35,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0397562980651855}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [34, 49, 83, 12, 27, 79, 91, 86, 16, 24, 89, 32, 19, 11, 30, 83, 65, 96, 58, 47, 53, 79, 12, 35]"
1448,rod,4,32,32,1,4,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07532882690429688}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 11, 5, 1]"
1449,lcs,16,9,7,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08464264869689941}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdacaabbcaacbbb""
T = ""abcaacccddbcabba"""
1450,knap,16,449,136,0,0,0,"{'ok': True, 'value': 449, 'stdout': '449\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09671282768249512}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 18, 16, 28, 19, 16, 24, 12, 17, 23, 25, 13, 14, 9, 12, 16]
V = [60, 17, 36, 46, 24, 60, 4, 43, 24, 48, 56, 43, 24, 57, 58, 12]
C = 136"
1451,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07906913757324219}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [75, 86, 60, 16, 55, 4, 85, 49, 13, 38, 36, 55, 78, 59, 6, 32, 31, 33, 95, 73, 42, 89, 4, 65]"
1452,add,8,127322442,127322442,1,127322442,1,"{'ok': True, 'value': 127322442, 'stdout': '127322442\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08173441886901855}",1,Compute: 50286231 + 77036211
1453,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07127952575683594}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [83, 23, 23, 36, 83, 29, 8, 47, 25, 21, 9, 8, 13, 66, 86, 90, 17, 29, 15, 74, 36, 15, 89, 57]"
1454,rod,8,168,42,0,1,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07564640045166016}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 4, 22, 23, 2, 13, 7, 12]"
1455,rod,4,40,40,1,1,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07074284553527832}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 8, 11, 3]"
1456,rod,4,36,24,0,6,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08200645446777344}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 6, 2, 2]"
1457,mul,2,406,406,1,406,1,"{'ok': True, 'value': 406, 'stdout': '406\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07575249671936035}",1,Compute: 29 * 14
1458,mul{'ok': True, 'value': 17612184087845428382108969522196, 'stdout': '17612184087845428382108969522196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08643412590026855}",1,Compute: 2048588309285166 * 8597229618083206
1459,add,32,118451187491792831631145367794655,11845118749179283163114536779465,0,118451187491792831631145367794655,1,"{'ok': True, 'value': 118451187491792831631145367794655, 'stdout': '118451187491792831631145367794655\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08777141571044922}",1,Compute: 61487410774528086803483418655567 + 56963776717264744827661949139088
1460,lcs,4,3,3,1,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07242250442504883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdd""
T = ""cbdd"""
1461,mul,4,38276496,86,0,38404416,0,"{'ok': True, 'value': 38276496, 'stdout': '38276496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08411049842834473}",1,Compute: 4236 * 9036
1462,rod,8,96,22,0,24,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0806431770324707}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 10, 4, 17, 2, 9, 5, 18]"
1463,ilp_assign,16,75,105,0,2,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3946206569671631}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[28, 8, 18, 22, 7, 5, 36], [27, 10, 32, 22, 32, 35, 16], [24, 16, 40, 39, 45, 23, 17], [46, 37, 25, 3, 47, 38, 5], [13, 36, 42, 29, 6, 11, 41], [32, 21, 33, 2, 32, 46, 36], [25, 2, 27, 30, 31, 10, 16]]"
1464,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07501387596130371}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbccaccddcdcadd""
T = ""aaccddabdcbabbab"""
1465,ilp_prod,16,98,120,0,160,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_54d21sqr/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_54d21sqr/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15693926811218262}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 26, 4, 20, 17, 17]
consumption (rows=resources) = [[12, 12, 14, 8, 8, 4], [14, 11, 16, 2, 1, 15], [12, 15, 13, 3, 14, 2], [5, 6, 3, 16, 16, 10]]
capacity = [58, 47, 56, 45]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1466,add,8,41428234,41428234,1,41428234,1,"{'ok': True, 'value': 41428234, 'stdout': '41428234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08655500411987305}",1,Compute: 22088848 + 19339386
1467,add,8,169466927,169466927,1,169466927,1,"{'ok': True, 'value': 169466927, 'stdout': '169466927\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07629966735839844}",1,Compute: 86032611 + 83434316
1468,sub,2,28,28,1,28,1,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08908820152282715}",1,Compute: 44 - 16
1469,ilp_partition,2,1,1,1,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08832430839538574}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 2, 2]"
1470,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08535194396972656}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcd""
T = ""dbcc"""
1471,ilp_prod,2,16,27,0,9,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/71be672376de467bb182a0b35534b615-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/71be672376de467bb182a0b35534b615-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 16.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1642003059387207}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3]
consumption (rows=resources) = [[3, 3], [2, 2]]
capacity = [6, 9]
upper_bounds = [3, 3]"
1472,knap,8,117,110,0,0,0,"{'ok': True, 'value': 117, 'stdout': '117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08439350128173828}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 6, 16, 5, 7, 8, 6, 13]
V = [13, 28, 5, 13, 25, 31, 20, 10]
C = 33"
1473,lcs,16,9,6,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09638047218322754}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcbdacdabcbdccd""
T = ""bdddcabacdbdaddd"""
1474,rod,4,24,15,0,6,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07826638221740723}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 7, 10, 2]"
1475,knap,2,9,7,0,1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07768583297729492}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 1]
V = [6, 4, 3]
C = 2"
1476,ilp_prod,32,491,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce for each product j. The objective function is to maximize the total profit, which is the sum of the product of profit[j] and x_j for all j. The constraints are that the total consumption of each resource must not exceed its capacity and that the quantity produced for each product must be non-negative. The upper bounds on the quantity of each product that can be produced are given by upper_bounds[j]. The problem is then solved using a linear programming solver, and the maximum profit is the value of the objective function after solving the problem.",0,119,0,"{'ok': True, 'value': 135, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b123b71d9a0e4c5ab6157e53ab4fcb14-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b123b71d9a0e4c5ab6157e53ab4fcb14-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 25 COLUMNS\nAt line 164 RHS\nAt line 185 BOUNDS\nAt line 192 ENDATA\nProblem MODEL has 20 rows, 6 columns and 120 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 142.258 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -135 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                135.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n135.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17803525924682617}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [45, 43, 29, 89, 87, 58]
consumption (rows=resources) = [[2, 19, 29, 29, 3, 7], [24, 5, 13, 25, 3, 25], [28, 12, 3, 7, 10, 18], [12, 2, 25, 22, 31, 13]]
capacity = [94, 96, 98, 119]
upper_bounds = [3, 4, 3, 3, 3, 3]"
1477,knap,32,1656,1024,0,63,0,"{'ok': True, 'value': 1656, 'stdout': '1656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08042669296264648}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [47, 8, 61, 5, 55, 2, 55, 26, 22, 50, 53, 15, 24, 28, 30, 63, 12, 60, 51, 48, 12, 49, 55, 38, 15, 57, 16, 26, 14, 60, 26, 18]
V = [96, 69, 95, 53, 24, 2, 60, 128, 102, 25, 111, 76, 41, 74, 22, 91, 21, 9, 67, 118, 81, 91, 16, 41, 101, 18, 113, 9, 64, 103, 102, 36]
C = 550"
1478,rod,8,184,25,0,1,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07485580444335938}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 3, 16, 1, 7, 4, 3, 14]"
1479,ilp_prod,8,84,1430,0,4,0,"{'ok': True, 'value': 84, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9ba85a48002a4dd4997ed9b9773786ec-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9ba85a48002a4dd4997ed9b9773786ec-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 84 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -84 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -84, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -84 to -84\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                84.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n84.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15252113342285156}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 5, 21, 22]
consumption (rows=resources) = [[8, 8, 5, 8], [4, 8, 4, 4], [2, 4, 2, 7], [3, 6, 4, 4]]
capacity = [20, 31, 20, 26]
upper_bounds = [3, 3, 4, 3]"
1480,ilp_prod,32,589,1000,0,248,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tbk1an5z/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_tbk1an5z/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14401531219482422}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 64, 71, 75, 78, 65]
consumption (rows=resources) = [[12, 2, 14, 11, 12, 14], [27, 22, 25, 6, 22, 18], [4, 29, 24, 10, 27, 27], [12, 17, 16, 2, 15, 30]]
capacity = [81, 112, 108, 112]
upper_bounds = [4, 3, 4, 7, 4, 3]"
1481,rod,16,560,42,0,46,0,"{'ok': True, 'value': 560, 'stdout': '560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06910347938537598}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 40, 6, 32, 4, 37, 11, 10, 29, 15, 39, 32, 40, 17, 42, 34]"
1482,ilp_prod,16,197,The solution to the problem is to use a linear programming approach to find the optimal solution.,0,168,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_o322ucg1/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_o322ucg1/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14565134048461914}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 27, 35, 46, 26, 23]
consumption (rows=resources) = [[13, 14, 11, 4, 1, 6], [15, 15, 4, 15, 5, 5], [5, 13, 6, 7, 1, 16], [11, 4, 14, 9, 14, 4]]
capacity = [60, 45, 42, 63]
upper_bounds = [3, 3, 4, 3, 4, 3]"
1483,knap,2,7,13,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08022356033325195}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 1]
V = [3, 6, 7]
C = 4"
1484,mul,4,38803086,3540796,0,38736446,0,"{'ok': True, 'value': 38803086, 'stdout': '38803086\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07299017906188965}",1,Compute: 7882 * 4923
1485,knap,4,21,22,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07138633728027344}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 8, 1, 3]
V = [12, 6, 9, 9]
C = 8"
1486,ilp_partition,2,1,1,1,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07775235176086426}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 4, 4, 6]"
1487,mul,2,720,720,1,720,1,"{'ok': True, 'value': 720, 'stdout': '720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08271288871765137}",1,Compute: 30 * 24
1488,ilp_assign,8,32,56,0,0,0,"{'ok': True, 'value': 32, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c6d00f272841422f9ab3fd9c18dab5b0-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/c6d00f272841422f9ab3fd9c18dab5b0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 265 RHS\nAt line 280 BOUNDS\nAt line 330 ENDATA\nProblem MODEL has 14 rows, 49 columns and 98 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 32 - 0.00 seconds\nCgl0004I processed model has 14 rows, 49 columns (49 integer (49 of which binary)) and 98 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 0 integers unsatisfied sum - 0\nCbc0038I Solution found of 32\nCbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 32 - took 0.00 seconds\nCbc0012I Integer solution of 32 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 32, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 32 to 32\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                32.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\nStatus: Optimal\nMinimum total cost: 32.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16064810752868652}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 1, 12, 13, 23, 22, 23], [22, 11, 7, 6, 4, 9, 21], [16, 20, 24, 2, 13, 19, 2], [16, 20, 21, 18, 22, 6, 3], [11, 2, 21, 17, 23, 19, 23], [4, 9, 17, 17, 2, 24, 11], [17, 4, 17, 5, 7, 14, 3]]"
1489,lcs,32,22,16,0,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07407498359680176}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbccdbbcacbdbbaadabbcacabcbdaba""
T = ""baccbbcbabaacdbcabadcacaccabcdcb"""
1490,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09083247184753418}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbba""
T = ""abca"""
1491,sub,8,6205496,6205496,1,6205496,1,"{'ok': True, 'value': 6205496, 'stdout': '6205496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08462905883789062}",1,Compute: 47030169 - 40824673
1492,add,32,77738339513597759309279138343431,,0,77738339513607769309279140343431,0,"{'ok': True, 'value': 77738339513597759309279138343431, 'stdout': '77738339513597759309279138343431\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08274102210998535}",1,Compute: 38194596369830580074752835940024 + 39543743143767179234526302403407
1493,sub,8,11254950,11254950,1,11254950,1,"{'ok': True, 'value': 11254950, 'stdout': '11254950\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07702016830444336}",1,Compute: 87949201 - 76694251
1494,ilp_partition,16,0,1,0,36,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18555307388305664}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 44, 36, 3, 34, 18, 40, 28, 40, 15, 14, 46, 25, 11, 38, 34]"
1495,knap,4,16,15,0,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07516288757324219}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 1, 5]
V = [8, 5, 8, 8]
C = 7"
1496,ilp_partition,16,0,1,0,47,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1905529499053955}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 10, 48, 37, 18, 36, 24, 1, 19, 10, 47, 16, 38, 5, 19, 28]"
1497,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11009454727172852}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcb""
T = ""caa"""
1498,ilp_assign,8,26,36,0,36,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41003894805908203}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 11, 23, 8, 2, 18, 16], [3, 3, 3, 16, 18, 19, 20], [18, 18, 13, 22, 7, 19, 1], [11, 19, 11, 19, 13, 8, 11], [8, 2, 3, 2, 20, 4, 10], [4, 7, 11, 7, 2, 13, 11], [3, 18, 17, 14, 23, 9, 4]]"
1499,knap,8,78,100,0,0,0,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07525467872619629}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 11, 1, 1, 13, 7, 13, 6]
V = [15, 30, 3, 4, 29, 12, 24, 1]
C = 33"
1500,knap,8,95,144,0,7,0,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07556319236755371}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 7, 10, 11, 13, 15, 7, 6]
V = [21, 21, 32, 7, 7, 4, 21, 7]
C = 42"
1501,sub,32,35915233691329252568711331728893,35915233691329252564711331728893,0,35915223691329252568711331728893,0,"{'ok': True, 'value': 35915233691329252568711331728893, 'stdout': '35915233691329252568711331728893\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08033609390258789}",1,Compute: 50402998881783036084567545710709 - 14487765190453783515856213981816
1502,sub,2,28,28,1,28,1,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07514429092407227}",1,Compute: 89 - 61
1503,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07358574867248535}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""a"""
1504,sub,16,12361143814735,123631143857373,0,1236114385736735,0,"{'ok': True, 'value': 12361143814735, 'stdout': '12361143814735\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09426450729370117}",1,Compute: 6736587947827178 - 6724226804012443
1505,rod,32,3008,1035,0,1,0,"{'ok': True, 'value': 3008, 'stdout': '3008\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06938457489013672}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [94, 37, 3, 3, 37, 12, 94, 47, 82, 26, 54, 10, 50, 86, 77, 64, 11, 7, 20, 23, 57, 68, 72, 47, 20, 58, 68, 70, 7, 76, 87, 16]"
1506,lcs,2,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0881650447845459}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""adc"""
1507,sub,16,151560800955855,151560800955855,1,1515608009955855,0,"{'ok': True, 'value': 151560800955855, 'stdout': '151560800955855\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07685136795043945}",1,Compute: 6898694620893718 - 6747133819937863
1508,ilp_partition,8,0,1,0,17,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08750653266906738}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 18, 7, 3, 17, 19, 13, 17]"
1509,ilp_prod,2,24,29,0,7,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cb8b363d75ea4fd48d23a34d5f8480de-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cb8b363d75ea4fd48d23a34d5f8480de-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 7 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -6 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 6.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1585674285888672}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 8]
consumption (rows=resources) = [[2, 1], [3, 2]]
capacity = [10, 7]
upper_bounds = [3, 3]"
1510,rod,8,136,1,0,39,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07039427757263184}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 15, 2, 22, 21, 1, 21, 4]"
1511,mul,32,8311976762787033161091761810286827200430155998755336231369307337,814646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464,0,823598636825256693097682030437992,0,"{'ok': True, 'value': 8311976762787033161091761810286827200430155998755336231369307337, 'stdout': '8311976762787033161091761810286827200430155998755336231369307337\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0714728832244873}",1,Compute: 94547215441262834654884101521899 * 87913501460556741964003912942363
1512,ilp_partition,8,0,1,0,11,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07245278358459473}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 23, 17, 7, 20, 2, 3, 11]"
1513,lcs,32,19,10,0,2,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07315802574157715}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abccdadaddcbddadbbcdbbdcaccccccd""
T = ""bcbbcddabdbcbcdbadaddddabaacbbadd"""
1514,knap,4,12,16,0,0,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08685994148254395}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 8, 4, 6]
V = [3, 12, 2, 4]
C = 10"
1515,mul,16,14044824156384924340570189368615,1,0,1418448524847685864664466660805,0,"{'ok': True, 'value': 14044824156384924340570189368615, 'stdout': '14044824156384924340570189368615\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11403703689575195}",1,Compute: 4787379802560105 * 2933718387848463
1516,add,2,101,101,1,101,1,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08285403251647949}",1,Compute: 87 + 14
1517,ilp_assign,2,7,7,1,8,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38456201553344727}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [2, 4]]"
1518,knap,4,26,22,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06698250770568848}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 8, 1, 8]
V = [11, 6, 15, 11]
C = 9"
1519,add,32,124998925873262461293694904236571,124998925873262461293694894236571,0,124998925873262461293694904236571,1,"{'ok': True, 'value': 124998925873262461293694904236571, 'stdout': '124998925873262461293694904236571\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08396291732788086}",1,Compute: 56489319864727943289399272521807 + 68509606008534518004295631714764
1520,knap,16,393,158,0,-1,0,"{'ok': True, 'value': 393, 'stdout': '393\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0665137767791748}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 29, 29, 30, 1, 26, 9, 3, 31, 19, 20, 27, 32, 32, 6, 20]
V = [41, 26, 31, 27, 43, 57, 17, 31, 32, 41, 5, 18, 58, 8, 42, 15]
C = 158"
1521,ilp_assign,4,22,23,0,36,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.382108211517334}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 8, 5, 9], [2, 5, 3, 7], [7, 8, 12, 11], [4, 9, 3, 12]]"
1522,knap,2,9,17,0,-1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07599091529846191}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 5]
V = [9, 3, 9]
C = 7"
1523,knap,2,5,5,1,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07492804527282715}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 4, 2]
V = [2, 8, 3]
C = 3"
1524,sub,2,13,13,1,13,1,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08552193641662598}",1,Compute: 62 - 49
1525,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07482433319091797}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""a"""
1526,ilp_partition,8,1,1,1,18,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0806128978729248}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 8, 7, 12, 24, 3, 18, 18]"
1527,ilp_partition,16,1,1,1,41,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19113707542419434}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 39, 41, 14, 48, 17, 43, 33, 13, 21, 38, 17, 3, 15, 35, 25]"
1528,sub,4,1303,1303,1,1303,1,"{'ok': True, 'value': 1303, 'stdout': '1303\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0804293155670166}",1,Compute: 7087 - 5784
1529,add,16,7343241781166775,100,0,7343241781166775,1,"{'ok': True, 'value': 7343241781166775, 'stdout': '7343241781166775\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0863037109375}",1,Compute: 5568442154320041 + 1774799626846734
1530,ilp_prod,8,75,100,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ow58cref/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_ow58cref/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15598392486572266}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 12, 16, 21]
consumption (rows=resources) = [[7, 8, 7, 5], [1, 5, 7, 4], [5, 4, 7, 8], [1, 5, 7, 1]]
capacity = [28, 18, 30, 27]
upper_bounds = [4, 3, 3, 3]"
1531,mul,4,12966075,12858536,0,12910665,0,"{'ok': True, 'value': 12966075, 'stdout': '12966075\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08472323417663574}",1,Compute: 3033 * 4275
1532,ilp_partition,4,1,0,0,2,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08448481559753418}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 12, 7, 4]"
1533,add,4,12551,37,0,12551,1,"{'ok': True, 'value': 12551, 'stdout': '12551\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08240365982055664}",1,Compute: 7846 + 4705
1534,ilp_prod,16,180,0,0,207,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_95x_sx7j/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15060853958129883}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [45, 33, 45, 29, 22, 13]
consumption (rows=resources) = [[16, 14, 2, 13, 2, 15], [11, 16, 16, 13, 8, 2], [12, 8, 1, 2, 15, 9], [8, 14, 15, 13, 16, 5]]
capacity = [36, 58, 48, 52]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1535,add,8,106650061,1234732,0,106649061,0,"{'ok': True, 'value': 106650061, 'stdout': '106650061\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0690162181854248}",1,Compute: 25334251 + 81315810
1536,ilp_prod,4,36,40,0,36,1,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/53f0488df7574d11aa88c07f27c4e65c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/53f0488df7574d11aa88c07f27c4e65c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 22.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1533825397491455}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 12, 8]
consumption (rows=resources) = [[3, 4, 4], [2, 2, 1], [4, 1, 3]]
capacity = [12, 14, 9]
upper_bounds = [3, 3, 3]"
1537,knap,32,1639,114,0,3,0,"{'ok': True, 'value': 1639, 'stdout': '1639\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08509016036987305}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 54, 7, 16, 43, 23, 20, 36, 14, 53, 62, 58, 44, 40, 51, 36, 11, 29, 37, 58, 17, 35, 49, 37, 19, 40, 22, 46, 2, 56, 10, 46]
V = [15, 102, 102, 23, 37, 61, 65, 80, 9, 8, 65, 1, 87, 6, 14, 57, 35, 97, 59, 114, 85, 87, 10, 78, 93, 105, 113, 63, 106, 127, 58, 105]
C = 543"
1538,mul{'ok': True, 'value': 2371657807212418829624696761198530320166270214929155701139040845, 'stdout': '2371657807212418829624696761198530320166270214929155701139040845\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0838468074798584}",1,Compute: 71019593624396347931149302830479 * 33394415346213936288719481875555
1539,knap,8,77,147,0,8,0,"{'ok': True, 'value': 77, 'stdout': '77\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08321213722229004}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 13, 9, 15, 13, 3, 6, 10]
V = [2, 11, 24, 27, 31, 1, 4, 20]
C = 35"
1540,add,16,15604759964120727,118436284846493989,0,15584760364120727,0,"{'ok': True, 'value': 15604759964120727, 'stdout': '15604759964120727\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06775832176208496}",1,Compute: 7843628484649398 + 7761131479471329
1541,rod,16,592,236,0,84,0,"{'ok': True, 'value': 592, 'stdout': '592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07686424255371094}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [37, 7, 46, 24, 37, 22, 37, 18, 41, 20, 42, 46, 43, 2, 5, 33]"
1542,rod,4,36,18,0,4,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07938504219055176}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 4, 7, 7]"
1543,ilp_assign,16,43,125,0,115,0,"{'ok': True, 'value': 43, 'stdout': '43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3860023021697998}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 15, 20, 19, 38, 42, 31], [28, 31, 4, 22, 47, 37, 45], [46, 44, 42, 1, 26, 16, 1], [40, 8, 14, 15, 31, 1, 34], [41, 5, 24, 4, 8, 6, 28], [16, 46, 24, 2, 10, 3, 3], [12, 39, 14, 14, 5, 11, 48]]"
1544,ilp_assign,16,44,105,0,117,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.366823673248291}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 36, 44, 2, 8, 40, 20], [48, 32, 47, 30, 34, 40, 3], [15, 43, 12, 39, 24, 5, 7], [40, 13, 21, 7, 17, 27, 6], [11, 45, 3, 26, 15, 21, 9], [14, 41, 47, 42, 1, 31, 23], [17, 25, 42, 14, 34, 37, 44]]"
1545,mul,32,5181435721013732954541215302214930647023734599510061721845883480,5,0,519668444456664456364564646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646,0,"{'ok': True, 'value': 5181435721013732954541215302214930647023734599510061721845883480, 'stdout': '5181435721013732954541215302214930647023734599510061721845883480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07256364822387695}",1,Compute: 53505559802283727943801432850582 * 96839202134514973574226357211140
1546,ilp_assign,8,42,66,0,75,0,"{'ok': True, 'value': 42, 'stdout': '42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37840795516967773}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 14, 21, 8, 19, 2, 17], [20, 1, 15, 22, 22, 8, 23], [2, 5, 18, 16, 16, 5, 11], [9, 14, 16, 12, 20, 8, 14], [11, 2, 3, 21, 16, 4, 10], [17, 5, 5, 20, 10, 19, 11], [14, 9, 5, 20, 19, 15, 18]]"
1547,knap,2,13,5,0,1,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10994100570678711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 4]
V = [10, 3, 2]
C = 3"
1548,knap,4,23,14,0,0,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09020543098449707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 7, 5]
V = [2, 11, 1, 12]
C = 9"
1549,mul,8,3339596543924160,355555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555,0,33284433879040,0,"{'ok': True, 'value': 3339596543924160, 'stdout': '3339596543924160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07989311218261719}",1,Compute: 36934560 * 90419286
1550,mul,8,6813558523243265,680451600355555,0,6780696468555,0,"{'ok': True, 'value': 6813558523243265, 'stdout': '6813558523243265\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07585763931274414}",1,Compute: 81354451 * 83751515
1551,ilp_assign,4,9,15,0,21,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41240692138671875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 2, 10, 4], [4, 5, 1, 2], [7, 3, 3, 9], [2, 5, 9, 5]]"
1552,knap,2,10,12,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07505416870117188}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 5]
V = [10, 2, 6]
C = 6"
1553,ilp_assign,8,34,46,0,75,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3939356803894043}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 24, 4, 12, 13, 20, 1], [19, 15, 5, 22, 18, 7, 18], [16, 4, 20, 11, 2, 10, 7], [1, 9, 15, 22, 5, 16, 18], [3, 11, 3, 24, 21, 8, 4], [12, 8, 4, 11, 23, 4, 1], [4, 17, 20, 19, 17, 5, 11]]"
1554,ilp_partition,32,1,1,1,51,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0376169681549072}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [77, 96, 92, 3, 2, 41, 12, 9, 51, 4, 90, 63, 9, 76, 55, 76, 40, 71, 9, 89, 54, 68, 4, 34]"
1555,ilp_assign,2,9,3,0,12,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37032222747802734}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 6], [3, 6]]"
1556,knap,16,396,151,0,0,0,"{'ok': True, 'value': 396, 'stdout': '396\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07589840888977051}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [26, 25, 19, 18, 31, 26, 23, 14, 19, 10, 29, 18, 13, 3, 20, 9]
V = [22, 26, 28, 6, 27, 56, 15, 48, 43, 49, 27, 24, 56, 24, 26, 42]
C = 151"
1557,sub,32,4262579272293434793675501102495,0,0,42625802722493435803875501102495,0,"{'ok': True, 'value': 4262579272293434793675501102495, 'stdout': '4262579272293434793675501102495\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09011554718017578}",1,Compute: 70781986228047028003300066212436 - 66519406955753593209624565109941
1558,ilp_prod,16,127,140,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_flkzx6s8/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_flkzx6s8/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15684223175048828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [29, 12, 25, 25, 12, 34]
consumption (rows=resources) = [[16, 12, 9, 9, 10, 8], [11, 13, 15, 1, 14, 7], [6, 16, 1, 5, 13, 5], [16, 6, 2, 4, 15, 10]]
capacity = [37, 63, 61, 37]
upper_bounds = [3, 3, 4, 4, 3, 3]"
1559,sub,8,2197071,2197071,1,2197071,1,"{'ok': True, 'value': 2197071, 'stdout': '2197071\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0857229232788086}",1,Compute: 27530035 - 25332964
1560,mul{'ok': True, 'value': 622383511585956889444942340342028229000927602808712497159692618, 'stdout': '622383511585956889444942340342028229000927602808712497159692618\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07049369812011719}",1,Compute: 19264578785535683695157430457621 * 32307143515292305905804373418658
1561,sub,2,66,66,1,66,1,"{'ok': True, 'value': 66, 'stdout': '66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07038760185241699}",1,Compute: 90 - 24
1562,add,32,123000994094757828858940868902390,5,0,123001004094757828858940868902390,0,"{'ok': True, 'value': 123000994094757828858940868902390, 'stdout': '123000994094757828858940868902390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07243180274963379}",1,Compute: 65906184873642996876262649525565 + 57094809221114831982678219376825
1563,ilp_partition,8,1,1,1,20,0,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07982921600341797}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 5, 5, 11, 16, 17, 14, 4]"
1564,ilp_partition,8,2,1,0,18,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07149624824523926}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 22, 13, 1, 21, 24, 18, 18]"
1565,knap,32,1956,1043,0,33,0,"{'ok': True, 'value': 1956, 'stdout': '1956\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08381772041320801}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 13, 32, 58, 13, 30, 20, 20, 53, 28, 1, 56, 50, 33, 31, 57, 34, 24, 43, 32, 10, 3, 19, 9, 61, 49, 19, 36, 28, 37, 4, 60]
V = [51, 118, 95, 19, 124, 83, 84, 54, 76, 12, 100, 65, 84, 88, 117, 128, 53, 113, 81, 71, 93, 126, 7, 48, 26, 54, 116, 43, 66, 15, 116, 60]
C = 482"
1566,add,32,141845490557062194234960064248049,141845488557062194234960064248449,0,141845490557062194234960064248049,1,"{'ok': True, 'value': 141845490557062194234960064248049, 'stdout': '141845490557062194234960064248049\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0839378833770752}",1,Compute: 42764085396170799117942747302149 + 99081405160891395117017316945900
1567,add,16,13525645721809955,12529965761809435,0,13525645721810055,0,"{'ok': True, 'value': 13525645721809955, 'stdout': '13525645721809955\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07254743576049805}",1,Compute: 7505657733988585 + 6019987987821370
1568,rod,2,6,6,1,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0888369083404541}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
1569,knap,32,1551,1045,0,23,0,"{'ok': True, 'value': 1551, 'stdout': '1551\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07871890068054199}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 46, 47, 40, 42, 57, 11, 41, 37, 40, 26, 41, 42, 60, 23, 29, 16, 48, 36, 21, 29, 51, 9, 59, 1, 16, 23, 53, 5, 52, 46, 38]
V = [122, 99, 125, 35, 94, 1, 59, 35, 104, 43, 34, 25, 38, 57, 87, 111, 11, 3, 83, 75, 86, 47, 13, 54, 59, 43, 54, 124, 79, 13, 87, 19]
C = 557"
1570,add,2,170,170,1,170,1,"{'ok': True, 'value': 170, 'stdout': '170\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.085968017578125}",1,Compute: 93 + 77
1571,ilp_assign,4,17,10,0,35,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.361957311630249}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 12, 1, 10], [11, 4, 8, 1], [12, 8, 12, 9], [8, 3, 11, 9]]"
1572,sub,16,3812101078875343,3812091078875343,0,3812099078875343,0,"{'ok': True, 'value': 3812101078875343, 'stdout': '3812101078875343\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07231640815734863}",1,Compute: 8620628999660563 - 4808527920785220
1573,ilp_assign,16,65,105,0,105,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41077661514282227}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 26, 32, 30, 36, 45, 23], [35, 23, 5, 38, 20, 3, 43], [7, 29, 46, 13, 9, 5, 33], [40, 14, 38, 11, 36, 2, 6], [29, 3, 25, 19, 17, 43, 7], [24, 2, 30, 39, 16, 11, 17], [36, 17, 30, 11, 17, 6, 2]]"
1574,mul,16,43643682736084568589755084074830,6,0,4303939642545605666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 43643682736084568589755084074830, 'stdout': '43643682736084568589755084074830\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07344651222229004}",1,Compute: 6423304912640610 * 6794583680777303
1575,rod,16,137,65,0,65,0,"{'ok': True, 'value': 137, 'stdout': '137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08455610275268555}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [2, 15, 26, 33, 10, 8, 46, 40, 10, 17, 33, 18, 44, 21, 19, 34]"
1576,knap,16,373,126,0,3,0,"{'ok': True, 'value': 373, 'stdout': '373\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0913844108581543}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 32, 27, 5, 23, 22, 2, 2, 8, 30, 29, 23, 5, 12, 28, 1]
V = [14, 43, 15, 15, 20, 37, 39, 30, 37, 11, 59, 12, 57, 22, 57, 1]
C = 126"
1577,knap,4,18,16,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09458327293395996}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 7, 5]
V = [16, 2, 6, 8]
C = 10"
1578,sub,16,5600510147750596,5590509147750596,0,-5599990847749404,0,"{'ok': True, 'value': 5600510147750596, 'stdout': '5600510147750596\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07744431495666504}",1,Compute: 8919049264113612 - 3318539116363016
1579,mul,8,380639376668952,398873946524404,0,380688536688704,0,"{'ok': True, 'value': 380639376668952, 'stdout': '380639376668952\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08255839347839355}",1,Compute: 21129116 * 18014922
1580,sub,32,41630287356888083771697006796931,0,0,41630287356888083771707006806931,0,"{'ok': True, 'value': 41630287356888083771697006796931, 'stdout': '41630287356888083771697006796931\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08116960525512695}",1,Compute: 99804378757808102392081328486539 - 58174091400920018620384321689608
1581,mul,32,2508907640734573801589977709172009428172663826541716142910765115,"The actual multiplication result is not provided here due to the limitation of the problem statement. However, the process and the rationale are provided.",0,253878676588527212567608979167585,0,"{'ok': True, 'value': 2508907640734573801589977709172009428172663826541716142910765115, 'stdout': '2508907640734573801589977709172009428172663826541716142910765115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08423161506652832}",1,Compute: 73878676588527212567608979167585 * 33959834644956103148587088718619
1582,ilp_prod,4,33,33,1,21,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d8e57612548a4f608b0331dc405277d4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d8e57612548a4f608b0331dc405277d4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15282726287841797}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 11, 8]
consumption (rows=resources) = [[1, 3, 1], [1, 3, 4], [3, 2, 4]]
capacity = [9, 10, 9]
upper_bounds = [3, 3, 3]"
1583,mul,2,3741,87,0,3691,0,"{'ok': True, 'value': 3741, 'stdout': '3741\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07384419441223145}",1,Compute: 43 * 87
1584,rod,2,10,5,0,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09163188934326172}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
1585,lcs,32,19,15,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07699823379516602}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcbcddccdcdacdcbcccdbaadddbcbac""
T = ""adbacdcccbabadbbbbbdbaadcbbccacca"""
1586,knap,2,7,11,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07356142997741699}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 5]
V = [2, 7, 7]
C = 6"
1587,lcs,8,4,4,1,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08368802070617676}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcaccdcb""
T = ""accbacaaa"""
1588,lcs,32,20,10,0,1,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07819104194641113}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdcbdaddccbbadcdcadcbcdbabcccba""
T = ""bbcadbadddcadbbdddcdcddacaccada"""
1589,rod,16,768,65,0,192,0,"{'ok': True, 'value': 768, 'stdout': '768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08077859878540039}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [48, 40, 14, 15, 33, 11, 24, 41, 18, 41, 27, 32, 4, 15, 11, 25]"
1590,knap,4,26,23,0,0,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07204294204711914}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 1, 7]
V = [5, 13, 13, 4]
C = 8"
1591,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0762786865234375}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbb""
T = ""cadb"""
1592,ilp_partition,8,2,1,0,11,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07260608673095703}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 19, 8, 8, 8, 12, 12, 11]"
1593,rod,16,656,48,0,65,0,"{'ok': True, 'value': 656, 'stdout': '656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06958222389221191}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [41, 24, 33, 28, 26, 46, 14, 32, 24, 48, 33, 37, 23, 9, 16, 18]"
1594,sub,8,19894900,19894900,1,200000000,0,"{'ok': True, 'value': 19894900, 'stdout': '19894900\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06633996963500977}",1,Compute: 46552936 - 26658036
1595,lcs,32,17,10,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0923612117767334}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""accbbaabccacdabbdabaccddacdcabac""
T = ""caacdbbbddbddcadbbbbcadbdabaaad"""
1596,add,8,109840840,109837840,0,110840840,0,"{'ok': True, 'value': 109840840, 'stdout': '109840840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07209300994873047}",1,Compute: 65657173 + 44183667
1597,ilp_assign,16,70,105,0,105,0,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42757749557495117}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[43, 46, 37, 17, 9, 19, 29], [16, 45, 17, 30, 22, 44, 1], [24, 34, 28, 20, 2, 11, 10], [31, 41, 29, 6, 27, 16, 17], [10, 44, 9, 38, 17, 14, 26], [23, 28, 21, 10, 43, 22, 40], [39, 26, 5, 6, 47, 34, 42]]"
1598,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2149355411529541}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [40, 68, 91, 86, 84, 67, 2, 20, 89, 28, 52, 87, 62, 14, 18, 91, 79, 16, 73, 37, 43, 36, 17, 72]"
1599,lcs,2,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08144330978393555}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""ba"""
1600,sub,4,1335,1335,1,1335,1,"{'ok': True, 'value': 1335, 'stdout': '1335\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07405734062194824}",1,Compute: 2384 - 1049
1601,rod,16,336,1,0,64,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0667121410369873}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [18, 42, 2, 15, 12, 5, 27, 3, 23, 43, 12, 9, 33, 24, 9, 10]"
1602,sub,2,70,70,1,70,1,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07565975189208984}",1,Compute: 85 - 15
1603,ilp_assign,32,111,187,0,110,0,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4058554172515869}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 59, 39, 81, 94, 40, 16], [19, 51, 43, 39, 2, 35, 35], [77, 22, 69, 30, 56, 79, 32], [65, 82, 96, 30, 92, 76, 6], [90, 14, 96, 62, 6, 45, 89], [83, 50, 51, 83, 10, 25, 10], [10, 64, 95, 5, 16, 43, 12]]"
1604,rod,4,12,11,0,5,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09572029113769531}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 5, 8, 11]"
1605,rod,8,72,25,0,1,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08500385284423828}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 13, 1, 23, 19, 24, 2, 4]"
1606,add,2,72,72,1,72,1,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07499027252197266}",1,Compute: 32 + 40
1607,sub,8,53020673,53020673,1,53020673,1,"{'ok': True, 'value': 53020673, 'stdout': '53020673\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07406139373779297}",1,Compute: 79518438 - 26497765
1608,sub,16,3221974227280270,3221974227280270,1,3222000000000000,0,"{'ok': True, 'value': 3221974227280270, 'stdout': '3221974227280270\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07498025894165039}",1,Compute: 6879037809401570 - 3657063582121300
1609,knap,2,10,22,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07507205009460449}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 3]
V = [9, 10, 10]
C = 6"
1610,rod,4,48,48,1,4,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07284927368164062}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 5, 4, 3]"
1611,ilp_assign,32,95,187,0,117,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_kagatqpn/main.py"", line 14, in <module>\n    prob += lpSum([C[i][j] * x[i][j] for i in range(n) for j in range(n)])\n  File ""/tmp/cot_exec_kagatqpn/main.py"", line 14, in <listcomp>\n    prob += lpSum([C[i][j] * x[i][j] for i in range(n) for j in range(n)])\nTypeError: \'ellipsis\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19956207275390625}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 1, 2, 48, 84, 15, 21], [15, 53, 74, 64, 81, 47, 86], [45, 11, 38, 12, 12, 25, 2], [43, 60, 67, 20, 91, 21, 81], [41, 6, 39, 82, 41, 34, 52], [16, 43, 30, 31, 14, 74, 35], [75, 35, 84, 35, 66, 43, 84]]"
1612,ilp_partition,8,1,1,1,6,0,"{'ok': True, 'value': 89, 'stdout': '89\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07158994674682617}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 7, 24, 18, 13, 2, 9, 6]"
1613,ilp_assign,16,65,119,0,40,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.373002290725708}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 31, 21, 47, 40, 36, 29], [41, 33, 15, 17, 29, 23, 30], [9, 44, 15, 15, 28, 18, 19], [16, 17, 38, 4, 17, 9, 3], [44, 10, 11, 9, 31, 16, 8], [4, 25, 15, 43, 45, 4, 24], [19, 5, 29, 18, 40, 20, 40]]"
1614,lcs,2,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06893491744995117}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""bc"""
1615,ilp_prod,4,36,39,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_1fcslo_f/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_1fcslo_f/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16102313995361328}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 6, 5]
consumption (rows=resources) = [[3, 3, 3], [1, 3, 2], [2, 1, 3]]
capacity = [11, 8, 14]
upper_bounds = [3, 3, 3]"
1616,ilp_partition,4,2,1,0,47,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06813383102416992}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 5, 8, 11]"
1617,ilp_prod,8,54,54,1,2,0,"{'ok': True, 'value': 54, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/64cc96a350bc41c5980d366198c94233-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/64cc96a350bc41c5980d366198c94233-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 64.4016 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -40 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 3 columns\nCbc0012I Integer solution of -54 found by DiveCoefficient after 153 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 2.6666667\nCbc0013I At root node, 3 cuts changed objective from -64.401575 to -54.000015 in 64 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 3.0 elements, 1 column cuts (1 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 109 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 31 row cuts average 2.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -54, took 153 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -64.4016 to -54\nProbing was tried 64 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 64 times and created 109 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)\nKnapsack was tried 64 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 64 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 64 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 64 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 64 times and created 31 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                54.00000000\nEnumerated nodes:               0\nTotal iterations:               153\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n54.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16449189186096191}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 12, 9, 12]
consumption (rows=resources) = [[2, 3, 4, 7], [1, 5, 8, 8], [5, 1, 8, 2], [6, 7, 2, 1]]
capacity = [29, 17, 16, 27]
upper_bounds = [3, 3, 3, 3]"
1618,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07083535194396973}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
1619,ilp_prod,4,30,48,0,45,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d1affe69fed245ee90b034caf712842e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d1affe69fed245ee90b034caf712842e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 13.75 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15793585777282715}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6, 6]
consumption (rows=resources) = [[2, 2, 1], [4, 2, 1], [1, 2, 3]]
capacity = [13, 11, 12]
upper_bounds = [3, 5, 4]"
1620,sub,8,10074354,10074354,1,10074354,1,"{'ok': True, 'value': 10074354, 'stdout': '10074354\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0799558162689209}",1,Compute: 74208607 - 64134253
1621,sub,2,27,27,1,27,1,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09326672554016113}",1,Compute: 50 - 23
1622,add,2,118,118,1,118,1,"{'ok': True, 'value': 118, 'stdout': '118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08724379539489746}",1,Compute: 45 + 73
1623,add,2,59,59,1,59,1,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07949447631835938}",1,Compute: 32 + 27
1624,sub,4,1996,2367,0,-2006,0,"{'ok': True, 'value': 1996, 'stdout': '1996\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08246374130249023}",1,Compute: 4363 - 2367
1625,ilp_assign,4,20,0,0,32,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3767240047454834}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 8, 1, 10], [11, 8, 1, 8], [12, 12, 11, 9], [7, 6, 8, 5]]"
1626,ilp_partition,2,2,0,0,18,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08698892593383789}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 4, 2]"
1627,ilp_prod,8,89,100,0,3,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a7454c88125a4fad8eb3a81319b3c31d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a7454c88125a4fad8eb3a81319b3c31d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3.42857 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15424633026123047}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 17, 24, 12]
consumption (rows=resources) = [[7, 2, 1, 7], [1, 2, 3, 4], [5, 4, 3, 8], [8, 3, 7, 2]]
capacity = [22, 23, 16, 24]
upper_bounds = [3, 4, 3, 3]"
1628,ilp_assign,16,71,113,0,117,0,"{'ok': True, 'value': 71, 'stdout': '71\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3653883934020996}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 23, 3, 25, 34, 1, 42], [11, 20, 31, 19, 45, 29, 23], [48, 3, 38, 36, 7, 7, 2], [26, 28, 41, 37, 21, 1, 4], [19, 39, 35, 27, 47, 42, 48], [39, 23, 5, 14, 27, 25, 21], [48, 34, 6, 26, 45, 34, 48]]"
1629,ilp_assign,16,73,22,0,110,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38589978218078613}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 16, 40, 13, 2, 41, 24], [41, 45, 45, 44, 17, 6, 44], [19, 33, 31, 35, 8, 41, 34], [46, 5, 40, 44, 33, 14, 46], [17, 7, 14, 47, 7, 13, 18], [11, 9, 23, 24, 15, 33, 29], [29, 37, 39, 6, 34, 10, 28]]"
1630,knap,16,482,1043,0,9,0,"{'ok': True, 'value': 482, 'stdout': '482\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09670233726501465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 7, 25, 17, 1, 19, 19, 4, 3, 23, 22, 5, 3, 32, 29, 5]
V = [58, 61, 37, 24, 55, 49, 26, 18, 38, 23, 56, 35, 8, 21, 16, 62]
C = 111"
1631,mul,16,7306432995116145489307688909958,725155486964166553210158,0,7301553624641418751808522368530458,0,"{'ok': True, 'value': 7306432995116145489307688909958, 'stdout': '7306432995116145489307688909958\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08336734771728516}",1,Compute: 5841202895713137 * 1250843897320934
1632,sub,32,40339697317229739820432896734996,40339217317229739820432896734996,0,39999697317229740160432846735006,0,"{'ok': True, 'value': 40339697317229739820432896734996, 'stdout': '40339697317229739820432896734996\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09112191200256348}",1,Compute: 64472509893957371616326402483731 - 24132812576727631795893505748735
1633,ilp_prod,2,22,27,0,21,0,"{'ok': True, 'value': 7, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d8f99fc78da94fc7a688aa5eb8c8c8b0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d8f99fc78da94fc7a688aa5eb8c8c8b0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 7 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -7 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                7.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n7.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15236806869506836}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5]
consumption (rows=resources) = [[3, 2], [3, 1]]
capacity = [9, 7]
upper_bounds = [3, 4]"
1634,lcs,2,1,2,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0762169361114502}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dc""
T = ""daa"""
1635,lcs,16,10,7,0,20,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10248446464538574}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abacdbddcccdabad""
T = ""daadcaaacdbaadbad"""
1636,sub,8,15322283,15322283,1,15322283,1,"{'ok': True, 'value': 15322283, 'stdout': '15322283\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07044100761413574}",1,Compute: 96033778 - 80711495
1637,rod,32,1520,1050,0,39,0,"{'ok': True, 'value': 1520, 'stdout': '1520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07564663887023926}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [26, 95, 79, 61, 61, 83, 92, 26, 1, 62, 15, 23, 6, 73, 59, 78, 4, 75, 79, 59, 49, 27, 21, 16, 2, 17, 82, 91, 55, 70, 15, 39]"
1638,knap,2,9,10,0,-1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0753183364868164}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 2, 2]
V = [6, 8, 1]
C = 4"
1639,sub,32,4088599878195449844613404501678,34088600878195449844613404501678,0,38886398781895449544613404501678,0,"{'ok': True, 'value': 4088599878195449844613404501678, 'stdout': '4088599878195449844613404501678\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07442736625671387}",1,Compute: 73613978908377956639968727843658 - 69525379030182506795355323341980
1640,ilp_partition,4,1,1,1,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_hsh25sqa/main.py"", line 10, in <module>\n    output = min_difference(weights)\n  File ""/tmp/cot_exec_hsh25sqa/main.py"", line 7, in min_difference\n    return total_sum - 2 * max(dp)\nValueError: max() arg is an empty sequence\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07881927490234375}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 11, 1, 5]"
1641,mul,32,5172196995665026724989439704392367807421338474132224454206403968,52665699440454874458937864848665685856568633536,0,5109864646446456656660444464444416,0,"{'ok': True, 'value': 5172196995665026724989439704392367807421338474132224454206403968, 'stdout': '5172196995665026724989439704392367807421338474132224454206403968\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06766271591186523}",1,Compute: 94294497871691758809801243916464 * 54851524875851498869110907215112
1642,add,4,3380,3380,1,3380,1,"{'ok': True, 'value': 3380, 'stdout': '3380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07521295547485352}",1,Compute: 1119 + 2261
1643,ilp_assign,8,51,100,0,46,0,"{'ok': True, 'value': 51, 'stdout': '51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.487044095993042}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 11, 5, 10, 22, 11, 9], [5, 15, 16, 11, 13, 16, 12], [21, 15, 11, 14, 22, 15, 23], [20, 17, 18, 24, 11, 20, 12], [10, 16, 24, 12, 6, 11, 11], [14, 5, 1, 9, 11, 4, 10], [18, 13, 10, 4, 21, 4, 4]]"
1644,mul{'ok': True, 'value': 957553025818013935757291062839523590610481802712343105773054080, 'stdout': '957553025818013935757291062839523590610481802712343105773054080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07616972923278809}",1,Compute: 11370145861926917321637993160320 * 84216424085146771320417402965669
1645,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09405922889709473}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""c"""
1646,knap,2,4,12,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07420873641967773}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 3]
V = [4, 4, 4]
C = 3"
1647,add,2,132,1312,0,132,1,"{'ok': True, 'value': 132, 'stdout': '132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08451104164123535}",1,Compute: 75 + 57
1648,lcs,32,18,15,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08649373054504395}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acddddaaccdcacaacaccadaaacdcbcad""
T = ""bbdbdabdbbacaaaccadbadddcbbddbcc"""
1649,knap,4,21,24,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08209061622619629}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 7, 5, 8]
V = [12, 9, 7, 13]
C = 12"
1650,add,2,141,141,1,141,1,"{'ok': True, 'value': 141, 'stdout': '141\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08166956901550293}",1,Compute: 56 + 85
1651,rod,32,537,1095,0,0,0,"{'ok': True, 'value': 537, 'stdout': '537\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08382177352905273}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [7, 27, 51, 4, 42, 11, 16, 51, 59, 78, 79, 48, 41, 61, 56, 85, 53, 72, 87, 8, 47, 73, 77, 62, 16, 21, 89, 5, 73, 59, 58, 42]"
1652,add,4,2620,2620,1,2620,1,"{'ok': True, 'value': 2620, 'stdout': '2620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07247352600097656}",1,Compute: 1296 + 1324
1653,rod,4,28,12,0,4,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0744485855102539}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 4, 4, 2]"
1654,rod,32,992,1055,0,1,0,"{'ok': True, 'value': 992, 'stdout': '992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08968091011047363}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [31, 1, 6, 86, 44, 13, 7, 93, 26, 36, 35, 27, 45, 26, 84, 91, 41, 62, 76, 34, 59, 57, 36, 30, 95, 16, 58, 55, 82, 41, 77, 35]"
1655,ilp_assign,2,8,7,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6351327896118164}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6], [5, 2]]"
1656,mul,4,5545704,83,0,5558984,0,"{'ok': True, 'value': 5545704, 'stdout': '5545704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09293937683105469}",1,Compute: 3228 * 1718
1657,ilp_assign,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3955419063568115}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1], [5, 5]]"
1658,sub,32,37693655026314029032359267828181,37820104026314029032359267828181,0,37693655026314029032359267828181,1,"{'ok': True, 'value': 37693655026314029032359267828181, 'stdout': '37693655026314029032359267828181\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06767702102661133}",1,Compute: 83157268855560367375385512577858 - 45463613829246338343026244749677
1659,sub,8,55007147,55007147,1,55007147,1,"{'ok': True, 'value': 55007147, 'stdout': '55007147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07661104202270508}",1,Compute: 84748004 - 29740857
1660,add,16,10803460817896371,10811986722064371,0,10813456757896371,0,"{'ok': True, 'value': 10803460817896371, 'stdout': '10803460817896371\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06921601295471191}",1,Compute: 1102748550925321 + 9700712266971050
1661,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07383942604064941}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""d"""
1662,ilp_prod,32,335,"The solution to this problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The exact solution would require a linear programming solver, which is not feasible to provide in this format.",0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_taxkahnr/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_taxkahnr/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14391541481018066}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [91, 23, 70, 24, 65, 32]
consumption (rows=resources) = [[27, 10, 26, 31, 1, 32], [7, 6, 9, 20, 11, 31], [13, 6, 27, 11, 2, 4], [22, 13, 17, 27, 25, 8]]
capacity = [80, 109, 72, 110]
upper_bounds = [3, 8, 3, 3, 4, 3]"
1663,sub,8,1899330,1899330,1,1899330,1,"{'ok': True, 'value': 1899330, 'stdout': '1899330\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07310652732849121}",1,Compute: 56936164 - 55036834
1664,ilp_assign,16,50,115,0,115,0,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3723480701446533}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 2, 23, 10, 39, 7, 2], [21, 12, 32, 7, 47, 37, 31], [32, 7, 44, 24, 28, 44, 20], [32, 43, 44, 19, 17, 16, 46], [2, 41, 28, 1, 46, 41, 45], [14, 5, 4, 29, 48, 8, 24], [15, 29, 9, 8, 12, 43, 28]]"
1665,rod,2,5,5,1,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_vrpkzzsf/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_vrpkzzsf/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07917237281799316}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 5]"
1666,ilp_partition,4,3,0,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07457971572875977}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 3, 12]"
1667,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07516837120056152}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 6, 1]"
1668,ilp_assign,8,38,59,0,46,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3814990520477295}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 15, 10, 16, 14, 5, 11], [6, 17, 6, 13, 9, 4, 19], [6, 12, 20, 20, 12, 4, 10], [19, 16, 11, 20, 20, 21, 11], [21, 3, 10, 1, 5, 4, 18], [22, 8, 9, 4, 23, 9, 24], [4, 5, 21, 24, 16, 24, 7]]"
1669,ilp_partition,32,1,10,0,85,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0409295558929443}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [76, 4, 85, 3, 90, 25, 32, 88, 45, 45, 75, 66, 81, 56, 47, 5, 13, 55, 34, 83, 53, 32, 37, 37]"
1670,ilp_assign,32,95,10,0,105,0,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39612483978271484}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[66, 1, 32, 40, 3, 54, 2], [36, 20, 63, 31, 46, 44, 44], [3, 7, 56, 29, 2, 73, 92], [94, 92, 50, 64, 31, 2, 4], [79, 75, 72, 76, 60, 26, 93], [83, 34, 19, 91, 83, 65, 67], [93, 31, 7, 23, 11, 69, 9]]"
1671,add,4,10417,59,0,10417,1,"{'ok': True, 'value': 10417, 'stdout': '10417\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0702211856842041}",1,Compute: 1759 + 8658
1672,ilp_assign,4,7,17,0,21,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3763301372528076}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 2, 10, 5], [2, 4, 6, 4], [6, 2, 1, 4], [9, 7, 4, 2]]"
1673,ilp_partition,4,2,1,0,14,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0798492431640625}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 8, 7, 11]"
1674,mul,8,572918426670798,573456513258,0,5738344389598,0,"{'ok': True, 'value': 572918426670798, 'stdout': '572918426670798\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06838274002075195}",1,Compute: 20070453 * 28545366
1675,sub,32,23681538080838714713333813289606,9,0,23681518080838714713332573290006,0,"{'ok': True, 'value': 23681538080838714713333813289606, 'stdout': '23681538080838714713333813289606\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0799398422241211}",1,Compute: 88979774432318917841728069705101 - 65298236351480203128394256415495
1676,knap,32,1757,1043,0,1,0,"{'ok': True, 'value': 1757, 'stdout': '1757\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08251261711120605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 51, 15, 53, 45, 12, 31, 32, 59, 2, 41, 1, 30, 16, 11, 40, 45, 45, 52, 51, 60, 49, 53, 34, 62, 31, 12, 55, 7, 45, 6, 30]
V = [4, 27, 50, 112, 93, 91, 85, 18, 103, 47, 83, 44, 34, 106, 86, 69, 119, 53, 111, 48, 17, 113, 103, 116, 126, 101, 36, 106, 108, 26, 70, 96]
C = 543"
1677,ilp_assign,32,158,187,0,110,0,"{'ok': True, 'value': 158, 'stdout': '158\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4085052013397217}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 77, 55, 27, 78, 38, 30], [8, 55, 12, 69, 38, 75, 64], [17, 33, 88, 61, 68, 46, 52], [79, 77, 40, 62, 88, 6, 23], [56, 66, 44, 67, 65, 37, 16], [17, 93, 75, 87, 72, 88, 64], [79, 12, 69, 69, 88, 93, 17]]"
1678,sub,8,12374620,12374620,1,12374620,1,"{'ok': True, 'value': 12374620, 'stdout': '12374620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09190082550048828}",1,Compute: 53657567 - 41282947
1679,knap,32,1655,1043,0,33,0,"{'ok': True, 'value': 1655, 'stdout': '1655\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09654545783996582}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [52, 41, 19, 34, 30, 14, 59, 17, 58, 18, 5, 56, 62, 20, 33, 1, 59, 58, 17, 17, 47, 61, 40, 24, 11, 6, 63, 5, 24, 49, 48, 51]
V = [99, 83, 101, 90, 78, 71, 13, 115, 96, 111, 71, 127, 66, 20, 48, 1, 107, 84, 2, 24, 12, 11, 70, 14, 94, 35, 26, 106, 116, 81, 46, 64]
C = 549"
1680,ilp_prod,32,301,1049,0,1320,0,"{'ok': True, 'value': 110, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f9041a28b0d640a58cb7f85f01e16602-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f9041a28b0d640a58cb7f85f01e16602-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 117.857 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -110 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                110.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n110.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1484823226928711}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 41, 19, 65, 57, 40]
consumption (rows=resources) = [[10, 26, 32, 25, 23, 10], [11, 24, 9, 7, 11, 24], [14, 31, 12, 5, 20, 12], [5, 29, 30, 30, 2, 7]]
capacity = [120, 118, 75, 69]
upper_bounds = [5, 3, 3, 3, 3, 4]"
1681,ilp_partition,4,2,0,0,2,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08242297172546387}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 8, 1, 3]"
1682,ilp_partition,4,1,0,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0846395492553711}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 9, 11, 8]"
1683,mul,2,3658,3638,0,3718,0,"{'ok': True, 'value': 3658, 'stdout': '3658\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08655595779418945}",1,Compute: 59 * 62
1684,knap,8,121,145,0,0,0,"{'ok': True, 'value': 121, 'stdout': '121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09064555168151855}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 7, 13, 1, 6, 15, 8, 2]
V = [8, 28, 22, 9, 6, 26, 31, 27]
C = 34"
1685,rod,2,6,5,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08518290519714355}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 5]"
1686,ilp_assign,2,4,2,0,2,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3787105083465576}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1], [3, 1]]"
1687,mul,8,1510804122694464,103445226408,0,151923133453928,0,"{'ok': True, 'value': 1510804122694464, 'stdout': '1510804122694464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09278559684753418}",1,Compute: 52105692 * 28994992
1688,add,16,7793412245660611,8174647505353785,0,7833412245660611,0,"{'ok': True, 'value': 7793412245660611, 'stdout': '7793412245660611\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07877254486083984}",1,Compute: 1164853755306831 + 6628558490353780
1689,knap,16,427,147,0,0,0,"{'ok': True, 'value': 427, 'stdout': '427\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07718372344970703}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 19, 6, 9, 7, 25, 25, 18, 29, 25, 23, 30, 20, 27, 4, 21]
V = [49, 16, 42, 11, 52, 61, 33, 57, 15, 23, 44, 22, 12, 29, 28, 50]
C = 147"
1690,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08577895164489746}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 2, 2]"
1691,mul,4,18433592,18046672,0,1852412,0,"{'ok': True, 'value': 18433592, 'stdout': '18433592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08361959457397461}",1,Compute: 1912 * 9641
1692,ilp_assign,4,14,15,0,15,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36507225036621094}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2, 1, 12], [12, 7, 4, 10], [8, 3, 3, 4], [8, 12, 9, 2]]"
1693,mul,16,15726606907221391535949013949545,6,0,157829833589385687489666668,0,"{'ok': True, 'value': 15726606907221391535949013949545, 'stdout': '15726606907221391535949013949545\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07550764083862305}",1,Compute: 6002843596736365 * 2619859513876333
1694,rod,8,34,34,1,1,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08219003677368164}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 3, 8, 17, 15, 14, 22, 3]"
1695,sub,4,3757,3757,1,3757,1,"{'ok': True, 'value': 3757, 'stdout': '3757\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07560324668884277}",1,Compute: 9875 - 6118
1696,lcs,8,5,5,1,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07291507720947266}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaacadca""
T = ""abbadacba"""
1697,lcs,32,19,12,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08282613754272461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caaadbddbcbdacbdadccabccaabdcacc""
T = ""accdbbcdccaaaacbddbcaadbbdcdaada"""
1698,rod,16,368,64,0,64,0,"{'ok': True, 'value': 368, 'stdout': '368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07920598983764648}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [23, 19, 10, 8, 40, 35, 32, 6, 8, 39, 13, 46, 47, 20, 26, 15]"
1699,knap,8,119,103,0,0,0,"{'ok': True, 'value': 119, 'stdout': '119\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07545971870422363}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 4, 14, 13, 15, 12, 3]
V = [12, 31, 4, 18, 28, 10, 20, 28]
C = 32"
1700,sub,16,3073121796949800,3073081796950200,0,3073121796950000,0,"{'ok': True, 'value': 3073121796949800, 'stdout': '3073121796949800\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07474350929260254}",1,Compute: 6973539385011533 - 3900417588061733
1701,add,2,131,131,1,131,1,"{'ok': True, 'value': 131, 'stdout': '131\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09351038932800293}",1,Compute: 56 + 75
1702,lcs,8,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07876133918762207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbabdbb""
T = ""aabcddabc"""
1703,mul,8,1159925653862768,1157055536850432,0,1160343331927048,0,"{'ok': True, 'value': 1159925653862768, 'stdout': '1159925653862768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08207225799560547}",1,Compute: 38480752 * 30143009
1704,knap,16,420,169,0,0,0,"{'ok': True, 'value': 420, 'stdout': '420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07702064514160156}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 17, 16, 31, 14, 17, 22, 15, 27, 30, 30, 30, 29, 19, 17, 10]
V = [57, 38, 59, 25, 2, 64, 52, 13, 8, 47, 49, 52, 39, 12, 32, 40]
C = 169"
1705,add,32,102530578148168280241299105623074,,0,102529578148168280241299105623074,0,"{'ok': True, 'value': 102530578148168280241299105623074, 'stdout': '102530578148168280241299105623074\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07079100608825684}",1,Compute: 53296733014198368054733600210929 + 49233845133969912186565505412145
1706,sub,2,50,50,1,50,1,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07898187637329102}",1,Compute: 64 - 14
1707,rod,8,76,22,0,1,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07020854949951172}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [1, 19, 24, 12, 4, 12, 20, 8]"
1708,knap,8,94,103,0,0,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08478236198425293}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 10, 7, 2, 12, 14, 9]
V = [13, 1, 6, 21, 16, 8, 28, 29]
C = 33"
1709,lcs,8,4,4,1,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09682011604309082}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabbcabb""
T = ""acaacdbad"""
1710,lcs,32,19,15,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07549834251403809}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabaacddaacbaccadbddccdcdabdcbdd""
T = ""bbcbdbdadccdabdcddadcabccbcbccddc"""
1711,sub,4,189,189,1,-189,0,"{'ok': True, 'value': 189, 'stdout': '189\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08339595794677734}",1,Compute: 5240 - 5051
1712,lcs,32,18,16,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07929515838623047}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdbbadbddadaacacdbdbaacdaabcada""
T = ""addcadcaadbaabadaacbdddcdcbbbabab"""
1713,lcs,32,19,14,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06870865821838379}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaabbabdabdbcddbcddbdacbbcdaaaab""
T = ""cddbcaaadaabbaccababcbccbbacddaad"""
1714,mul,16,56794646164799950199343383342496,5710334375499832651452516,0,56368563666665844444444444444,0,"{'ok': True, 'value': 56794646164799950199343383342496, 'stdout': '56794646164799950199343383342496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.066741943359375}",1,Compute: 6737022222999792 * 8430229897551238
1715,mul,8,2939086495728672,2934544355644444,0,2938534334442,0,"{'ok': True, 'value': 2939086495728672, 'stdout': '2939086495728672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07288193702697754}",1,Compute: 82451071 * 35646432
1716,add,32,46249059448235042388377976713101,46249059448234942388377976713101,0,46248959448234942468377976713101,0,"{'ok': True, 'value': 46249059448235042388377976713101, 'stdout': '46249059448235042388377976713101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09877300262451172}",1,Compute: 21453368721264594923785727210869 + 24795690726970447464592249502232
1717,rod,16,240,-1,0,64,0,"{'ok': True, 'value': 240, 'stdout': '240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08680891990661621}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [15, 2, 30, 13, 25, 23, 28, 38, 40, 34, 16, 31, 13, 2, 38, 31]"
1718,ilp_assign,16,61,105,0,117,0,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39423346519470215}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 41, 11, 25, 13, 35, 3], [24, 42, 33, 10, 43, 45, 29], [39, 13, 9, 1, 17, 29, 21], [37, 45, 2, 39, 1, 29, 5], [12, 3, 47, 29, 3, 37, 48], [3, 16, 2, 11, 19, 21, 7], [42, 15, 28, 3, 20, 32, 41]]"
1719,ilp_assign,4,17,11,0,26,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3946540355682373}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 6, 4, 6], [12, 10, 1, 6], [2, 4, 3, 8], [10, 9, 7, 9]]"
1720,add,8,86543544,86543545,0,86543544,1,"{'ok': True, 'value': 86543544, 'stdout': '86543544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08979010581970215}",1,Compute: 25768993 + 60774551
1721,rod,16,272,64,0,64,0,"{'ok': True, 'value': 272, 'stdout': '272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0682075023651123}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [17, 5, 12, 32, 10, 41, 25, 32, 43, 24, 14, 11, 10, 11, 28, 38]"
1722,ilp_assign,16,69,105,0,115,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3787109851837158}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[29, 45, 20, 8, 23, 44, 46], [21, 46, 22, 5, 21, 1, 25], [23, 22, 5, 18, 21, 12, 3], [40, 24, 46, 38, 31, 37, 30], [9, 31, 37, 4, 47, 30, 5], [23, 29, 23, 21, 9, 28, 46], [45, 12, 17, 44, 3, 44, 40]]"
1723,sub,32,39067017830369759737976681937092,39067017830369759737976681937092,1,39067017830369759738076681937092,0,"{'ok': True, 'value': 39067017830369759737976681937092, 'stdout': '39067017830369759737976681937092\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06684398651123047}",1,Compute: 76569882575205510044581679191537 - 37502864744835750306604997254445
1724,sub,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08441448211669922}",1,Compute: 33 - 30
1725,knap,16,400,1040,0,-1,0,"{'ok': True, 'value': 400, 'stdout': '400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07673192024230957}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 19, 10, 25, 3, 15, 1, 24, 25, 22, 5, 5, 5, 28, 24, 7]
V = [55, 60, 6, 14, 29, 7, 21, 45, 39, 15, 32, 56, 21, 61, 8, 20]
C = 112"
1726,knap,16,371,140,0,2,0,"{'ok': True, 'value': 371, 'stdout': '371\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07880783081054688}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 11, 24, 4, 26, 11, 26, 16, 21, 18, 8, 29, 6, 23, 11, 15]
V = [56, 3, 36, 54, 33, 61, 6, 23, 38, 6, 4, 60, 18, 43, 39, 35]
C = 140"
1727,sub,32,78704158013261545410650006052222,78704256308561545404649906052222,0,14299663522966347496010093089613,0,"{'ok': True, 'value': 78704158013261545410650006052222, 'stdout': '78704158013261545410650006052222\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07993602752685547}",1,Compute: 93003821536227892906660099141835 - 14299663522966347496010093089613
1728,lcs,16,10,7,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08161163330078125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcaddcbbccacbdb""
T = ""aadbdaddacbabddda"""
1729,sub,4,2383,2383,1,2383,1,"{'ok': True, 'value': 2383, 'stdout': '2383\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07611083984375}",1,Compute: 8716 - 6333
1730,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08676767349243164}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdad""
T = ""bbcb"""
1731,knap,4,21,17,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07889604568481445}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 6, 5, 4]
V = [14, 3, 4, 7]
C = 11"
1732,add,4,7071,7071,1,7071,1,"{'ok': True, 'value': 7071, 'stdout': '7071\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08408284187316895}",1,Compute: 1539 + 5532
1733,ilp_assign,32,148,185,0,86,0,"{'ok': True, 'value': 148, 'stdout': '148\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41207170486450195}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 9, 73, 50, 74, 92, 65], [66, 75, 64, 43, 51, 28, 32], [11, 62, 7, 1, 87, 71, 12], [43, 8, 62, 88, 80, 56, 82], [71, 89, 81, 58, 18, 60, 91], [58, 24, 44, 8, 84, 80, 61], [18, 9, 61, 62, 36, 54, 86]]"
1734,add,8,61485312,61485312,1,61485312,1,"{'ok': True, 'value': 61485312, 'stdout': '61485312\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08242392539978027}",1,Compute: 30316448 + 31168864
1735,ilp_assign,16,44,105,0,105,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38977718353271484}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 32, 24, 42, 20, 48, 10], [15, 11, 4, 31, 5, 23, 13], [30, 42, 22, 1, 5, 38, 40], [12, 6, 35, 48, 27, 19, 26], [10, 42, 9, 29, 8, 7, 19], [35, 4, 33, 8, 42, 20, 3], [5, 24, 25, 26, 17, 45, 28]]"
1736,rod,4,20,20,1,1,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08961606025695801}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 8, 10, 9]"
1737,lcs,32,16,10,0,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07459306716918945}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbaaabbdbbcbabddccbdbddbadbcada""
T = ""abaaaaacdddddddacadabdbbacddcbc"""
1738,ilp_partition,4,3,0,0,8,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07570576667785645}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 8, 12, 6]"
1739,mul,4,12318024,88,0,1224564,0,"{'ok': True, 'value': 12318024, 'stdout': '12318024\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09265375137329102}",1,Compute: 8088 * 1523
1740,mul,4,12337668,26,0,12203688,0,"{'ok': True, 'value': 12337668, 'stdout': '12337668\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09340620040893555}",1,Compute: 6228 * 1981
1741,rod,4,16,14,0,3,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07425093650817871}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 3, 7, 8]"
1742,add,8,170768610,1707685886,0,170768610,1,"{'ok': True, 'value': 170768610, 'stdout': '170768610\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07454347610473633}",1,Compute: 77475352 + 93293258
1743,ilp_prod,16,159,209,0,207,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_8yctgrr1/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1412057876586914}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 47, 27, 48, 36, 27]
consumption (rows=resources) = [[8, 8, 7, 1, 2, 1], [9, 10, 2, 11, 7, 13], [3, 15, 15, 11, 16, 12], [13, 11, 16, 12, 5, 9]]
capacity = [37, 55, 40, 48]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1744,sub,8,67831741,25169526,0,67831741,1,"{'ok': True, 'value': 67831741, 'stdout': '67831741\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08256649971008301}",1,Compute: 93001267 - 25169526
1745,ilp_assign,2,3,4,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4075500965118408}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [2, 2]]"
1746,mul{'ok': True, 'value': 5087277670109576765690762116434810329303256464141835154387326765, 'stdout': '5087277670109576765690762116434810329303256464141835154387326765\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09590387344360352}",1,Compute: 58160542194937019439533725994915 * 87469570917315717577293454961391
1747,knap,32,1574,1044,0,32,0,"{'ok': True, 'value': 1574, 'stdout': '1574\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09580779075622559}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [56, 46, 14, 16, 44, 48, 19, 57, 4, 48, 57, 14, 36, 57, 16, 44, 32, 5, 44, 33, 27, 35, 20, 24, 53, 18, 25, 12, 28, 44, 22, 20]
V = [10, 14, 7, 46, 75, 115, 96, 106, 120, 97, 35, 57, 8, 3, 93, 119, 67, 40, 127, 108, 66, 84, 94, 21, 73, 55, 14, 12, 6, 8, 84, 26]
C = 509"
1748,rod,2,8,6,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08745884895324707}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
1749,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07033944129943848}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcdadac""
T = ""acadadd"""
1750,knap,4,20,22,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07334113121032715}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 8, 6]
V = [3, 10, 10, 7]
C = 11"
1751,sub,32,14181684243237021450326029918355,550070000011640769788675947404538,0,14182674243236921450325029916355,0,"{'ok': True, 'value': 14181684243237021450326029918355, 'stdout': '14181684243237021450326029918355\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08544921875}",1,Compute: 74019315447260569788675947404538 - 59837631204023548338349917486183
1752,mul,16,24767344506933296452124572102560,248609150009746468628736,0,2481028945444352890382336,0,"{'ok': True, 'value': 24767344506933296452124572102560, 'stdout': '24767344506933296452124572102560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07231521606445312}",1,Compute: 5547739583781216 * 4464402867672535
1753,lcs,8,4,3,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10643458366394043}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbddcac""
T = ""bdadadbdd"""
1754,sub,4,334,334,1,334,1,"{'ok': True, 'value': 334, 'stdout': '334\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07809019088745117}",1,Compute: 4873 - 4539
1755,mul,4,10891206,36,0,11130666,0,"{'ok': True, 'value': 10891206, 'stdout': '10891206\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11085987091064453}",1,Compute: 2902 * 3753
1756,add,8,92973006,93000000,0,92972706,0,"{'ok': True, 'value': 92973006, 'stdout': '92973006\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0818171501159668}",1,Compute: 28516304 + 64456702
1757,sub,8,31624409,31624409,1,31624409,1,"{'ok': True, 'value': 31624409, 'stdout': '31624409\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10100078582763672}",1,Compute: 79204216 - 47579807
1758,sub,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07322168350219727}",1,Compute: 87 - 80
1759,sub,32,71477254164429172950585722882204,79647714549104905432586663744306,0,71477254164429172950585722882204,1,"{'ok': True, 'value': 71477254164429172950585722882204, 'stdout': '71477254164429172950585722882204\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07362604141235352}",1,Compute: 99245272930518990562586663744306 - 27768018766089817612000940862102
1760,sub,2,49,49,1,49,1,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0731501579284668}",1,Compute: 76 - 27
1761,ilp_partition,4,1,0,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08468937873840332}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 2, 7, 3]"
1762,lcs,8,4,3,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10416698455810547}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbdcddc""
T = ""dcbadbbd"""
1763,knap,16,451,1,0,0,0,"{'ok': True, 'value': 451, 'stdout': '451\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0750875473022461}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 15, 6, 21, 8, 19, 25, 8, 13, 5, 14, 5, 18, 22, 8, 19]
V = [33, 15, 61, 46, 21, 26, 48, 63, 15, 45, 60, 37, 33, 56, 47, 5]
C = 112"
1764,knap,8,94,115,0,10,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07511067390441895}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 6, 14, 1, 14, 3, 3, 10]
V = [28, 11, 17, 4, 21, 13, 32, 17]
C = 33"
1765,rod,32,1296,2159,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_qugy1gcd/main.py"", line 20, in <module>\n    output = rod_cutting(P, N)\n  File ""/tmp/cot_exec_qugy1gcd/main.py"", line 10, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07067203521728516}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [1, 81, 84, 53, 23, 57, 86, 54, 79, 36, 6, 13, 19, 3, 75, 62, 84, 1, 2, 86, 7, 58, 20, 1, 63, 81, 15, 44, 50, 12, 15, 78]"
1766,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07813882827758789}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""aad"""
1767,sub,8,20490820,20490820,1,20490780,0,"{'ok': True, 'value': 20490820, 'stdout': '20490820\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08067822456359863}",1,Compute: 30804331 - 10313511
1768,knap,32,1722,1024,0,61,0,"{'ok': True, 'value': 1722, 'stdout': '1722\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09027481079101562}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [51, 22, 28, 24, 37, 36, 53, 53, 25, 7, 47, 2, 61, 33, 52, 14, 18, 36, 20, 27, 35, 10, 51, 3, 59, 19, 49, 18, 37, 40, 23, 47]
V = [64, 49, 33, 98, 22, 31, 32, 117, 110, 126, 66, 101, 96, 24, 12, 62, 16, 126, 61, 16, 23, 97, 50, 46, 122, 88, 98, 86, 66, 51, 102, 101]
C = 518"
1769,ilp_prod,32,402,The problem is a linear programming problem and can be solved using a binary integer programming model.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_csdp194m/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_csdp194m/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16492486000061035}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 78, 40, 82, 5, 41]
consumption (rows=resources) = [[2, 20, 31, 10, 12, 30], [8, 21, 32, 18, 14, 24], [7, 8, 20, 13, 30, 31], [14, 10, 6, 30, 20, 9]]
capacity = [121, 99, 70, 112]
upper_bounds = [8, 4, 3, 3, 3, 3]"
1770,add,16,11416711784943236,10815152023,0,11416711784943236,1,"{'ok': True, 'value': 11416711784943236, 'stdout': '11416711784943236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07878637313842773}",1,Compute: 7418578379409004 + 3998133405534232
1771,ilp_partition,2,2,0,0,10,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07721519470214844}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 4, 2]"
1772,ilp_prod,16,244,160,0,160,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xu7f3t27/main.py"", line 10, in <module>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\n  File ""/tmp/cot_exec_xu7f3t27/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j]*x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14130187034606934}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 8, 8, 16, 45, 30]
consumption (rows=resources) = [[3, 15, 14, 3, 5, 1], [4, 6, 2, 3, 12, 5], [4, 15, 3, 3, 9, 12], [15, 5, 12, 8, 1, 15]]
capacity = [49, 64, 50, 41]
upper_bounds = [3, 3, 3, 5, 5, 3]"
1773,ilp_prod,8,137,100,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_o03uu3ja/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_o03uu3ja/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16004395484924316}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 21, 5, 13]
consumption (rows=resources) = [[6, 2, 6, 3], [2, 4, 3, 8], [3, 3, 6, 7], [1, 3, 6, 1]]
capacity = [20, 27, 29, 28]
upper_bounds = [3, 6, 3, 3]"
1774,ilp_partition,2,1,0,0,7,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08925771713256836}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 3, 4]"
1775,add,4,12158,12198,0,12158,1,"{'ok': True, 'value': 12158, 'stdout': '12158\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09348487854003906}",1,Compute: 7529 + 4629
1776,rod,2,8,5,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07462930679321289}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
1777,knap,2,10,10,1,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07749247550964355}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 4, 3]
V = [4, 3, 6]
C = 4"
1778,add,2,27,27,1,27,1,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07515764236450195}",1,Compute: 14 + 13
1779,sub,4,6313,6313,1,6313,1,"{'ok': True, 'value': 6313, 'stdout': '6313\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07861804962158203}",1,Compute: 8779 - 2466
1780,add,4,5037,5037,1,5037,1,"{'ok': True, 'value': 5037, 'stdout': '5037\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07539224624633789}",1,Compute: 1499 + 3538
1781,ilp_partition,32,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07745695114135742}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [49, 39, 83, 17, 62, 32, 9, 49, 76, 63, 79, 85, 29, 16, 13, 66, 21, 10, 68, 42, 20, 30, 21, 44]"
1782,ilp_partition,4,1,0,0,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07645940780639648}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 3, 1]"
1783,ilp_assign,8,23,46,0,36,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37327003479003906}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 15, 4, 7, 24, 12, 12], [7, 2, 11, 8, 19, 11, 17], [23, 21, 12, 21, 1, 17, 17], [11, 20, 1, 19, 17, 17, 4], [1, 21, 7, 17, 2, 23, 8], [24, 14, 4, 7, 18, 19, 24], [6, 17, 23, 2, 12, 4, 18]]"
1784,add,2,149,149,1,149,1,"{'ok': True, 'value': 149, 'stdout': '149\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07457304000854492}",1,Compute: 81 + 68
1785,ilp_prod,32,250,100,0,240,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_meiupco4/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_meiupco4/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14342284202575684}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 49, 40, 45, 78, 16]
consumption (rows=resources) = [[7, 21, 24, 21, 26, 24], [20, 22, 13, 22, 28, 11], [18, 6, 25, 5, 12, 27], [8, 20, 4, 32, 5, 3]]
capacity = [121, 95, 69, 125]
upper_bounds = [3, 4, 3, 3, 3, 3]"
1786,mul,16,6272569308072237274858489309525,12103944025,0,623546448556477244444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 6272569308072237274858489309525, 'stdout': '6272569308072237274858489309525\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07713055610656738}",1,Compute: 1098975273234595 * 5707652811523495
1787,sub,32,64772233038134709662774257227673,64772233038134709564774257227673,0,64772233038134709662774257227673,1,"{'ok': True, 'value': 64772233038134709662774257227673, 'stdout': '64772233038134709662774257227673\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08058929443359375}",1,Compute: 75201892617483421895940860233253 - 10429659579348712233166603005580
1788,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_yjnnnhyy/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_yjnnnhyy/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07364296913146973}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 2]"
1789,sub,16,8572004840418,2922,0,85719413840418,0,"{'ok': True, 'value': 8572004840418, 'stdout': '8572004840418\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07603120803833008}",1,Compute: 2931032112425260 - 2922460107584842
1790,add,16,12747303624450798,11111111111111111,0,12747303624450804,0,"{'ok': True, 'value': 12747303624450798, 'stdout': '12747303624450798\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08578801155090332}",1,Compute: 4594616444667260 + 8152687179783538
1791,rod,32,1152,1055,0,1,0,"{'ok': True, 'value': 1152, 'stdout': '1152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07188129425048828}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [12, 72, 38, 66, 55, 30, 68, 7, 60, 47, 10, 65, 63, 5, 78, 59, 19, 50, 16, 21, 91, 55, 40, 73, 42, 23, 52, 13, 55, 7, 50, 12]"
1792,rod,8,192,25,0,1,0,"{'ok': True, 'value': 192, 'stdout': '192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08011364936828613}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [24, 1, 4, 10, 24, 6, 7, 22]"
1793,add,4,8238,8238,1,8238,1,"{'ok': True, 'value': 8238, 'stdout': '8238\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08726882934570312}",1,Compute: 4567 + 3671
1794,ilp_partition,16,0,1,0,32,0,"{'ok': True, 'value': 374, 'stdout': '374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1001741886138916}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [32, 41, 37, 6, 1, 38, 1, 39, 10, 25, 40, 19, 31, 40, 18, 4]"
1795,ilp_prod,8,72,100,0,17,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/834fb6c70988452b95415696b7cfbf78-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/834fb6c70988452b95415696b7cfbf78-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 75.6 - 0.00 seconds\nCgl0004I processed model has 3 rows, 4 columns (4 integer (0 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -72 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 3\nCbc0013I At root node, 2 cuts changed objective from -75.4 to -72 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -72, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -75.4 to -72\nProbing was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                72.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 72.0\nQuantity of product 0: 4.0\nQuantity of product 1: 0.0\nQuantity of product 2: 0.0\nQuantity of product 3: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1562025547027588}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 18, 9, 17]
consumption (rows=resources) = [[1, 6, 6, 5], [4, 1, 5, 7], [5, 8, 3, 5], [2, 4, 1, 3]]
capacity = [27, 31, 21, 32]
upper_bounds = [4, 3, 4, 4]"
1796,knap,8,103,100,0,0,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07634568214416504}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 3, 3, 1, 14, 2, 16, 1]
V = [29, 15, 20, 3, 7, 18, 10, 18]
C = 26"
1797,ilp_partition,2,1,2,0,2,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07411718368530273}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 5, 4, 6]"
1798,add,2,130,130,1,130,1,"{'ok': True, 'value': 130, 'stdout': '130\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09386372566223145}",1,Compute: 61 + 69
1799,lcs,32,19,10,0,1,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0771944522857666}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcdbabdbbacbbdaccccdabdbccabbbb""
T = ""bdcbccdaadacbaacaccadccbbbcaadcaa"""
1800,sub,4,1925,1925,1,-1925,0,"{'ok': True, 'value': 1925, 'stdout': '1925\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07321548461914062}",1,Compute: 5084 - 3159
1801,ilp_assign,32,125,187,0,155,0,"{'ok': True, 'value': 125, 'stdout': '125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3813002109527588}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[35, 31, 39, 70, 77, 57, 22], [34, 42, 17, 74, 20, 81, 86], [94, 77, 90, 47, 38, 47, 25], [36, 22, 94, 43, 73, 2, 50], [43, 7, 56, 37, 52, 23, 54], [29, 29, 57, 41, 33, 86, 56], [6, 61, 5, 42, 1, 34, 76]]"
1802,ilp_prod,16,140,239,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ofa8qxm1/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ofa8qxm1/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14521193504333496}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 46, 43, 27, 37, 24]
consumption (rows=resources) = [[8, 6, 5, 16, 10, 9], [13, 9, 13, 11, 14, 8], [5, 10, 8, 16, 4, 9], [5, 8, 3, 15, 12, 2]]
capacity = [62, 38, 38, 49]
upper_bounds = [3, 3, 3, 3, 3, 4]"
1803,knap,2,12,12,1,0,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07315373420715332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 5]
V = [10, 2, 6]
C = 5"
1804,lcs,8,3,5,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08744454383850098}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbddaaa""
T = ""cbbacbcab"""
1805,rod,4,28,15,0,4,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07853865623474121}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 5, 3, 4]"
1806,mul,2,6188,6168,0,6268,0,"{'ok': True, 'value': 6188, 'stdout': '6188\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08330774307250977}",1,Compute: 68 * 91
1807,rod,16,240,65,0,65,0,"{'ok': True, 'value': 240, 'stdout': '240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07138872146606445}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [15, 28, 29, 9, 17, 48, 22, 18, 41, 22, 37, 33, 44, 18, 36, 17]"
1808,sub,4,717,717,1,717,1,"{'ok': True, 'value': 717, 'stdout': '717\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09179067611694336}",1,Compute: 1743 - 1026
1809,ilp_partition,16,0,1,0,29,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19848179817199707}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 17, 29, 25, 11, 19, 28, 38, 4, 16, 20, 30, 37, 47, 11, 18]"
1810,add,8,118222398,118222408,0,118222408,0,"{'ok': True, 'value': 118222398, 'stdout': '118222398\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07481956481933594}",1,Compute: 55060707 + 63161691
1811,ilp_prod,8,38,100,0,3,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0e9e6793c2d34f55adfe1f6384855b1d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0e9e6793c2d34f55adfe1f6384855b1d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3.375 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15246844291687012}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 11, 12, 4]
consumption (rows=resources) = [[1, 4, 4, 8], [7, 7, 8, 4], [1, 3, 1, 6], [3, 5, 3, 6]]
capacity = [30, 26, 32, 26]
upper_bounds = [3, 3, 3, 3]"
1812,ilp_partition,16,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14099454879760742}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 18, 9, 13, 2, 29, 8, 20, 16, 28, 14, 6, 16, 8, 10, 27]"
1813,ilp_assign,4,18,1,0,28,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3887326717376709}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3, 3, 12], [4, 10, 5, 12], [11, 5, 11, 9], [6, 6, 9, 6]]"
1814,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07024025917053223}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [54, 46, 8, 42, 88, 41, 33, 29, 46, 7, 81, 6, 49, 89, 52, 55, 96, 87, 81, 28, 43, 46, 67, 39]"
1815,sub,32,11104645960935140202770817564965,9,0,111046459630361402237870817564965,0,"{'ok': True, 'value': 11104645960935140202770817564965, 'stdout': '11104645960935140202770817564965\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08484148979187012}",1,Compute: 94001581908710831243356719588921 - 82896935947775691040585902023956
1816,knap,4,26,22,0,7,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10224723815917969}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 8, 2, 7]
V = [6, 3, 12, 14]
C = 9"
1817,mul,8,3523873638607988,823061638,0,350848443339388,0,"{'ok': True, 'value': 3523873638607988, 'stdout': '3523873638607988\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09296178817749023}",1,Compute: 45528772 * 77398829
1818,knap,4,22,17,0,0,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0787818431854248}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 7, 8, 7]
V = [12, 6, 7, 10]
C = 12"
1819,lcs,32,19,10,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0929727554321289}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbaacbddddaaddabacbacdcbbcbbbaa""
T = ""ddddbccdcbdbbdddcabccdbcbdddbcbac"""
1820,mul,2,2187,2187,1,2301,0,"{'ok': True, 'value': 2187, 'stdout': '2187\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09144735336303711}",1,Compute: 81 * 27
1821,knap,8,95,110,0,8,0,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07506370544433594}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 11, 4, 1, 4, 15, 1, 9]
V = [31, 14, 22, 11, 25, 12, 6, 7]
C = 30"
1822,ilp_assign,16,85,105,0,105,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3929269313812256}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 19, 31, 35, 13, 1, 44], [48, 32, 25, 39, 13, 33, 39], [47, 21, 45, 28, 29, 30, 48], [11, 41, 27, 45, 32, 1, 10], [48, 22, 33, 44, 12, 40, 19], [10, 44, 13, 8, 37, 6, 5], [8, 36, 20, 45, 40, 1, 17]]"
1823,sub,2,19,17,0,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07857322692871094}",1,Compute: 36 - 17
1824,mul,4,66662210,167,0,66585330,0,"{'ok': True, 'value': 66662210, 'stdout': '66662210\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0745241641998291}",1,Compute: 8966 * 7435
1825,mul,8,3603451226153354,500,0,4724192,0,"{'ok': True, 'value': 3603451226153354, 'stdout': '3603451226153354\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09454226493835449}",1,Compute: 95345687 * 37793542
1826,lcs,8,4,5,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07830452919006348}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbcacdc""
T = ""aaacbca"""
1827,ilp_assign,32,118,209,0,216,0,"{'ok': True, 'value': 118, 'stdout': '118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3925514221191406}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[85, 19, 75, 47, 64, 22, 74], [73, 30, 25, 73, 87, 86, 37], [70, 51, 20, 7, 62, 29, 50], [17, 92, 33, 44, 80, 29, 81], [75, 43, 85, 66, 53, 5, 54], [51, 32, 86, 48, 32, 61, 84], [42, 46, 32, 50, 86, 24, 13]]"
1828,add,8,106233759,106233759,1,106233759,1,"{'ok': True, 'value': 106233759, 'stdout': '106233759\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0742495059967041}",1,Compute: 76566706 + 29667053
1829,knap,4,23,22,0,0,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07371115684509277}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 1, 1]
V = [11, 1, 12, 10]
C = 6"
1830,add{'ok': True, 'value': 79503750289726553207474934367704, 'stdout': '79503750289726553207474934367704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08011269569396973}",1,Compute: 32829554823212328116176699999861 + 46674195466514225091298234367843
1831,lcs,8,3,4,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09508323669433594}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcccbdcb""
T = ""cbcddad"""
1832,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09520983695983887}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcabddbb""
T = ""cdcdcaaba"""
1833,ilp_assign,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40264344215393066}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [2, 3]]"
1834,ilp_assign,4,16,0,0,33,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3944430351257324}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 7, 10, 2], [8, 7, 4, 11], [8, 9, 11, 6], [1, 7, 4, 12]]"
1835,knap,4,18,14,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07434821128845215}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 6, 1, 8]
V = [1, 14, 4, 8]
C = 8"
1836,rod,2,4,3,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gjd1p6hv/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_gjd1p6hv/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08556389808654785}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 3]"
1837,sub,16,4846294282699651,4846304277700351,0,-5143704273300351,0,"{'ok': True, 'value': 4846294282699651, 'stdout': '4846294282699651\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07498741149902344}",1,Compute: 8519770154750818 - 3673475872051167
1838,mul{'ok': True, 'value': 419146885370523955668894902278969056278119949252236157460837855, 'stdout': '419146885370523955668894902278969056278119949252236157460837855\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07391929626464844}",1,Compute: 33489974092811791365320842726185 * 12515593001324197779810869731783
1839,sub,32,38363127502965895660516328125162,38363127503065895660516328125162,0,38363127503965895660516328125162,0,"{'ok': True, 'value': 38363127502965895660516328125162, 'stdout': '38363127502965895660516328125162\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07835865020751953}",1,Compute: 95267965197937370852475949482500 - 56904837694971475191959621357338
1840,ilp_assign,16,86,105,0,117,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39617180824279785}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 14, 29, 39, 12, 1, 25], [17, 6, 4, 34, 44, 4, 28], [10, 9, 1, 45, 44, 37, 39], [6, 40, 9, 7, 9, 37, 28], [23, 36, 23, 48, 35, 42, 39], [46, 19, 2, 24, 29, 35, 37], [17, 12, 8, 21, 30, 48, 35]]"
1841,ilp_partition,16,0,1,0,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19397330284118652}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 29, 47, 38, 4, 23, 46, 40, 3, 9, 22, 37, 12, 29, 1, 31]"
1842,knap,4,31,32,0,0,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07533788681030273}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 8, 8]
V = [11, 15, 16, 15]
C = 10"
1843,rod,32,437,84,0,224,0,"{'ok': True, 'value': 437, 'stdout': '437\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07505607604980469}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [2, 17, 41, 8, 13, 84, 29, 21, 61, 73, 95, 48, 26, 14, 26, 72, 7, 65, 85, 4, 19, 85, 28, 94, 26, 88, 44, 6, 84, 80, 31, 54]"
1844,mul,8,3086795233091430,37852600090,0,28649495283322,0,"{'ok': True, 'value': 3086795233091430, 'stdout': '3086795233091430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07970476150512695}",1,Compute: 40447089 * 76316870
1845,lcs,8,5,4,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08145022392272949}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babcabdd""
T = ""bcaddaca"""
1846,ilp_prod,32,280,1000,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_c9xbqks8/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_c9xbqks8/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14082860946655273}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [63, 8, 44, 70, 64, 16]
consumption (rows=resources) = [[8, 5, 25, 18, 23, 30], [25, 22, 2, 10, 10, 9], [19, 30, 30, 11, 5, 28], [1, 7, 30, 5, 6, 28]]
capacity = [73, 73, 74, 125]
upper_bounds = [3, 3, 3, 4, 3, 3]"
1847,sub,4,4392,4392,1,4392,1,"{'ok': True, 'value': 4392, 'stdout': '4392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0821390151977539}",1,Compute: 6087 - 1695
1848,knap,16,406,157,0,0,0,"{'ok': True, 'value': 406, 'stdout': '406\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07402515411376953}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 17, 13, 26, 13, 18, 32, 21, 9, 15, 20, 30, 21, 29, 4, 21]
V = [62, 19, 13, 22, 3, 38, 42, 63, 1, 57, 19, 60, 48, 20, 59, 18]
C = 157"
1849,mul,2,4074,97,0,4034,0,"{'ok': True, 'value': 4074, 'stdout': '4074\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08706164360046387}",1,Compute: 42 * 97
1850,ilp_partition,2,1,0,0,15,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07674026489257812}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 4, 3]"
1851,knap,16,421,119,0,4,0,"{'ok': True, 'value': 421, 'stdout': '421\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07446479797363281}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 10, 13, 9, 31, 10, 2, 6, 1, 22, 32, 27, 25, 31, 5, 11]
V = [30, 34, 9, 28, 31, 24, 46, 35, 38, 34, 5, 51, 28, 56, 31, 48]
C = 119"
1852,rod,2,6,6,1,8,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07399868965148926}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
1853,ilp_partition,16,1,1,1,31,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.25823116302490234}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 3, 11, 27, 31, 12, 15, 8, 37, 41, 39, 23, 18, 25, 25, 40]"
1854,ilp_prod,2,14,21,0,1,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/51a528ef2ef849029976fd61bdc66baa-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/51a528ef2ef849029976fd61bdc66baa-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 14.0\nProduct_0: 2.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20163655281066895}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[3, 3], [3, 1]]
capacity = [6, 9]
upper_bounds = [3, 3]"
1855,knap,16,481,137,0,0,0,"{'ok': True, 'value': 481, 'stdout': '481\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07736086845397949}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 29, 28, 5, 31, 17, 17, 17, 28, 8, 2, 13, 8, 16, 27, 26]
V = [59, 58, 42, 49, 26, 56, 40, 26, 34, 2, 51, 29, 23, 59, 57, 42]
C = 137"
1856,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0788874626159668}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [86, 29, 65, 5, 6, 73, 44, 16, 28, 79, 20, 17, 22, 48, 69, 45, 5, 96, 92, 30, 50, 55, 36, 24]"
1857,ilp_prod,4,43,35,0,44,0,"{'ok': True, 'value': 22, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/880cf0df64574a49af77fd9c5011a5f8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/880cf0df64574a49af77fd9c5011a5f8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 29.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -22 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                22.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n22.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1565260887145996}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 7, 12]
consumption (rows=resources) = [[1, 1, 3], [1, 2, 4], [3, 2, 2]]
capacity = [15, 14, 8]
upper_bounds = [3, 4, 3]"
1858,mul,16,38934903511290453892195795897504,10,0,388342920381214926288588464888,0,"{'ok': True, 'value': 38934903511290453892195795897504, 'stdout': '38934903511290453892195795897504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09254884719848633}",1,Compute: 4414631714391128 * 8819513388708668
1859,ilp_partition,8,0,1,0,2,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09314155578613281}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 17, 10, 7, 14, 8, 15, 2]"
1860,add,16,18546201655728928,5,0,18546201655728928,1,"{'ok': True, 'value': 18546201655728928, 'stdout': '18546201655728928\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08674335479736328}",1,Compute: 8679913871574948 + 9866287784153980
1861,ilp_partition,4,4,3,0,2,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09649991989135742}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 5, 6, 12]"
1862,knap,4,16,20,0,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07342529296875}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 5, 2, 2]
V = [16, 5, 6, 4]
C = 8"
1863,lcs,2,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07485389709472656}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""cb"""
1864,knap,16,399,1047,0,0,0,"{'ok': True, 'value': 399, 'stdout': '399\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09137845039367676}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 19, 17, 28, 14, 29, 17, 19, 14, 23, 24, 2, 10, 19, 20, 2]
V = [52, 52, 50, 20, 43, 12, 45, 4, 41, 37, 6, 11, 15, 2, 6, 64]
C = 140"
1865,ilp_partition,4,4,1,0,12,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07279467582702637}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 1, 7]"
1866,mul{'ok': True, 'value': 5297462551714511983169533519796179768466163236520016650974476752, 'stdout': '5297462551714511983169533519796179768466163236520016650974476752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09302353858947754}",1,Compute: 57652514595734690278078653689986 * 91886062366244724012252334400232
1867,mul,2,871,871,1,871,1,"{'ok': True, 'value': 871, 'stdout': '871\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12399911880493164}",1,Compute: 13 * 67
1868,knap,4,17,14,0,-1,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0740976333618164}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 6, 8]
V = [1, 5, 12, 12]
C = 9"
1869,mul,32,1416325152111965110140261694022823861574146684599466254432257769,2,0,141444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 1416325152111965110140261694022823861574146684599466254432257769, 'stdout': '1416325152111965110140261694022823861574146684599466254432257769\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08939623832702637}",1,Compute: 38261047383809262005309643382613 * 37017417163318545552197982732613
1870,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08761143684387207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcb""
T = ""bbd"""
1871,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08637452125549316}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbddcddd""
T = ""dadaacacd"""
1872,ilp_assign,4,15,19,0,25,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3982388973236084}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 12, 8, 5], [1, 12, 9, 12], [12, 10, 6, 6], [11, 3, 1, 3]]"
1873,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2526230812072754}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 15, 82, 68, 19, 13, 6, 29, 38, 38, 58, 61, 82, 14, 68, 84, 54, 20, 44, 38, 92, 3, 43, 27]"
1874,mul,8,6653071713630588,6638946855343228,0,6643645538887688,0,"{'ok': True, 'value': 6653071713630588, 'stdout': '6653071713630588\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09291410446166992}",1,Compute: 70973132 * 93740709
1875,lcs,32,17,10,0,0,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08200693130493164}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbccabcabccdbcdcbddaabacdbdabdcd""
T = ""dccbaaacbaabaacbabaadcccdcbdcaa"""
1876,rod,2,6,4,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08444380760192871}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
1877,sub,4,729,729,1,729,1,"{'ok': True, 'value': 729, 'stdout': '729\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0737311840057373}",1,Compute: 2260 - 1531
1878,ilp_assign,8,36,76,0,80,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40647220611572266}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 6, 4, 9, 2, 5, 23], [10, 15, 22, 11, 3, 10, 18], [11, 21, 13, 18, 2, 2, 13], [14, 10, 23, 21, 8, 11, 15], [2, 19, 22, 2, 15, 10, 24], [9, 21, 2, 22, 23, 19, 17], [20, 14, 24, 13, 13, 7, 8]]"
1879,ilp_prod,2,24,22,0,20,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7437ecc22cca4ed1867ca985bb3e2738-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7437ecc22cca4ed1867ca985bb3e2738-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 13.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1579132080078125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4]
consumption (rows=resources) = [[3, 1], [3, 1]]
capacity = [8, 6]
upper_bounds = [3, 6]"
1880,ilp_assign,16,61,10,0,117,0,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39035487174987793}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 1, 41, 37, 3, 19, 11], [10, 7, 21, 6, 34, 15, 38], [42, 17, 35, 19, 7, 36, 12], [41, 4, 35, 44, 43, 14, 21], [10, 14, 23, 37, 33, 17, 30], [2, 14, 30, 44, 41, 36, 11], [27, 16, 31, 2, 6, 36, 40]]"
1881,mul,4,14004641,120,0,14034911,0,"{'ok': True, 'value': 14004641, 'stdout': '14004641\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07311272621154785}",1,Compute: 6433 * 2177
1882,add,16,10247485754192121,11023151017,0,10247485754192121,1,"{'ok': True, 'value': 10247485754192121, 'stdout': '10247485754192121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07384037971496582}",1,Compute: 3619194769141246 + 6628290985050875
1883,ilp_prod,2,18,21,0,18,1,"{'ok': True, 'value': 9, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/23d1ea11d64d4f058892ea4f2310c65a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/23d1ea11d64d4f058892ea4f2310c65a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n9.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15799498558044434}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[3, 3], [1, 1]]
capacity = [10, 8]
upper_bounds = [3, 3]"
1884,rod,4,8,7,0,7,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08398985862731934}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 1, 4, 7]"
1885,lcs,2,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07495284080505371}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""a"""
1886,rod,4,24,24,1,6,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08462119102478027}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 11, 1, 6]"
1887,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_uklhy06x/main.py"", line 11, in <module>\n    output = cut_rod(P, N)\n  File ""/tmp/cot_exec_uklhy06x/main.py"", line 6, in cut_rod\n    q = max(q, P[i] + cut_rod(P, n-i))\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09226012229919434}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
1888,ilp_partition,16,0,10,0,24,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18951964378356934}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [27, 10, 36, 27, 25, 48, 24, 7, 27, 34, 30, 30, 36, 4, 2, 21]"
1889,mul,32,3822274540738440381759606998980509744609666177280647436146823810,0,0,376644464044395345648436244864433664931666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 3822274540738440381759606998980509744609666177280647436146823810, 'stdout': '3822274540738440381759606998980509744609666177280647436146823810\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09045648574829102}",1,Compute: 85152157937549206781149326806687 * 44887582808432236489215516653630
1890,add,8,117323230,122323650,0,117323230,1,"{'ok': True, 'value': 117323230, 'stdout': '117323230\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08480501174926758}",1,Compute: 42325491 + 74997739
1891,knap,4,27,27,1,0,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07410740852355957}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 7, 1, 7]
V = [14, 7, 13, 12]
C = 11"
1892,knap,2,8,13,0,-1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08550405502319336}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 5]
V = [5, 8, 3]
C = 7"
1893,ilp_assign,8,43,76,0,7,0,"{'ok': True, 'value': 43, 'stdout': '43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42420268058776855}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 15, 4, 23, 6, 21, 14], [22, 9, 24, 11, 1, 7, 22], [3, 10, 23, 15, 12, 4, 15], [12, 24, 14, 24, 14, 7, 17], [22, 20, 20, 21, 18, 21, 19], [24, 6, 19, 9, 12, 19, 6], [9, 5, 2, 3, 21, 22, 7]]"
1894,add,8,142401169,142391169,0,142401169,1,"{'ok': True, 'value': 142401169, 'stdout': '142401169\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07330846786499023}",1,Compute: 68159718 + 74241451
1895,ilp_prod,4,47,39,0,33,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/53b1aa73d9c945aca84eb86affdd2361-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/53b1aa73d9c945aca84eb86affdd2361-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1582796573638916}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 11, 12]
consumption (rows=resources) = [[1, 1, 3], [3, 4, 3], [3, 2, 1]]
capacity = [10, 13, 11]
upper_bounds = [3, 3, 3]"
1896,rod,8,80,24,0,24,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08368325233459473}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 20, 13, 15, 10, 10, 8, 3]"
1897,sub,4,3804,3804,1,3804,1,"{'ok': True, 'value': 3804, 'stdout': '3804\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07800650596618652}",1,Compute: 8094 - 4290
1898,add,32,70636053817638183296380534118982,614454410161410,0,70636053817638183296380534118982,1,"{'ok': True, 'value': 70636053817638183296380534118982, 'stdout': '70636053817638183296380534118982\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07593107223510742}",1,Compute: 58897726710294571761818788626587 + 11738327107343611534561745492395
1899,ilp_prod,4,24,33,0,3,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5bdef6c3b92745f5b6b14057c8808983-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5bdef6c3b92745f5b6b14057c8808983-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1667468547821045}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 3, 7]
consumption (rows=resources) = [[4, 4, 4], [4, 1, 3], [3, 2, 3]]
capacity = [9, 10, 14]
upper_bounds = [3, 3, 3]"
1900,ilp_partition,8,0,1,0,5,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10938525199890137}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 4, 16, 3, 11, 17, 13, 5]"
1901,ilp_partition,4,3,The answer will be the minimum difference between two subsets.,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0743093490600586}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 3, 11, 11]"
1902,add,8,97504594,97504594,1,97504594,1,"{'ok': True, 'value': 97504594, 'stdout': '97504594\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07346463203430176}",1,Compute: 20526934 + 76977660
1903,ilp_assign,16,89,105,0,117,0,"{'ok': True, 'value': 89, 'stdout': '89\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.364365816116333}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 15, 9, 29, 13, 27, 7], [28, 16, 25, 6, 23, 21, 16], [17, 39, 41, 41, 39, 6, 37], [41, 30, 34, 43, 34, 34, 25], [46, 35, 29, 5, 18, 28, 10], [13, 9, 6, 19, 20, 36, 8], [39, 37, 11, 17, 17, 41, 13]]"
1904,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07628607749938965}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadd""
T = ""abbc"""
1905,ilp_prod,8,73,100,0,6,0,"{'ok': True, 'value': 46, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ceee15aee1d04309a33964641e34197f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ceee15aee1d04309a33964641e34197f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 21 COLUMNS\nAt line 98 RHS\nAt line 115 BOUNDS\nAt line 120 ENDATA\nProblem MODEL has 16 rows, 4 columns and 64 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 51.75 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -46 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                46.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n46.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14913320541381836}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 17, 24, 4]
consumption (rows=resources) = [[1, 8, 5, 5], [4, 5, 8, 5], [5, 8, 8, 2], [5, 3, 6, 5]]
capacity = [25, 20, 18, 23]
upper_bounds = [3, 3, 3, 4]"
1906,knap,4,28,26,0,0,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0742347240447998}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 4, 8, 5]
V = [15, 11, 12, 13]
C = 11"
1907,ilp_prod,16,147,165,0,132,0,"{'ok': True, 'value': 88, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b199161a628641cf82cd6d54f05cc86b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b199161a628641cf82cd6d54f05cc86b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 96.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -88 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                88.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n88.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1553785800933838}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [44, 11, 46, 9, 33, 13]
consumption (rows=resources) = [[9, 4, 8, 1, 3, 10], [9, 10, 16, 12, 4, 14], [14, 1, 11, 3, 11, 12], [3, 14, 3, 10, 1, 11]]
capacity = [40, 56, 35, 64]
upper_bounds = [3, 4, 3, 4, 3, 3]"
1908,add,2,97,97,1,97,1,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07348179817199707}",1,Compute: 67 + 30
1909,ilp_prod,32,210,100,0,1008,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_970mrsxj/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_970mrsxj/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16393494606018066}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 15, 48, 9, 81, 61]
consumption (rows=resources) = [[29, 9, 17, 31, 25, 22], [16, 12, 26, 23, 25, 24], [13, 10, 26, 16, 10, 9], [16, 29, 27, 19, 22, 23]]
capacity = [69, 86, 77, 92]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1910,add,2,150,150,1,150,1,"{'ok': True, 'value': 150, 'stdout': '150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07690834999084473}",1,Compute: 75 + 75
1911,sub,32,4811064045117907789709906135022,44811063945117907789710006135022,0,48109944045117907789710006135022,0,"{'ok': True, 'value': 4811064045117907789709906135022, 'stdout': '4811064045117907789709906135022\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09084510803222656}",1,Compute: 81421682284080800985017676032305 - 76610618238962893195307769897283
1912,lcs,32,19,16,0,1,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08696675300598145}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbaddadbbbbabbbaaccbcbdcbacbdcbd""
T = ""bbacbbbddadaabcdccabcdbbacddbabbc"""
1913,ilp_assign,4,12,10,0,32,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43178629875183105}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 11, 9, 10], [9, 5, 9, 1], [3, 9, 5, 1], [11, 2, 8, 5]]"
1914,add,16,9477727962682841,9874910000000000,0,9477727962682841,1,"{'ok': True, 'value': 9477727962682841, 'stdout': '9477727962682841\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08330345153808594}",1,Compute: 5000142271109319 + 4477585691573522
1915,ilp_prod,32,472,1000,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_f96f8mrf/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_f96f8mrf/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15807390213012695}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [29, 18, 77, 39, 69, 79]
consumption (rows=resources) = [[30, 4, 16, 1, 27, 19], [13, 32, 15, 8, 10, 24], [20, 7, 12, 14, 4, 11], [5, 14, 16, 15, 14, 6]]
capacity = [83, 128, 118, 85]
upper_bounds = [3, 4, 5, 5, 3, 4]"
1916,mul,8,2931992906700512,101,0,294383433325952,0,"{'ok': True, 'value': 2931992906700512, 'stdout': '2931992906700512\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10280346870422363}",1,Compute: 31525238 * 93004624
1917,ilp_prod,2,18,18,1,18,1,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a37c01266d7243c7a54528dbf66a7507-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a37c01266d7243c7a54528dbf66a7507-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16735291481018066}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3]
consumption (rows=resources) = [[1, 3], [1, 2]]
capacity = [6, 8]
upper_bounds = [6, 3]"
1918,rod,16,288,65,0,84,0,"{'ok': True, 'value': 288, 'stdout': '288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08870196342468262}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [18, 18, 8, 40, 3, 46, 24, 21, 10, 34, 3, 45, 38, 13, 4, 47]"
1919,sub,32,14805313912684816629499301293601,67000000000000000000000000000000,0,14805313912684816629500281303558,0,"{'ok': True, 'value': 14805313912684816629499301293601, 'stdout': '14805313912684816629499301293601\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08673715591430664}",1,Compute: 59319339292997680564837143791553 - 44514025380312863935337842497952
1920,rod,2,10,10,1,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07388114929199219}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 5]"
1921,sub,8,35895295,35895295,1,35895295,1,"{'ok': True, 'value': 35895295, 'stdout': '35895295\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10993790626525879}",1,Compute: 72571891 - 36676596
1922,sub,2,74,74,1,74,1,"{'ok': True, 'value': 74, 'stdout': '74\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08466482162475586}",1,Compute: 97 - 23
1923,lcs,32,20,10,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09844326972961426}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcaacadabbbcbbdccadacdabacbdcdb""
T = ""bcddaacddbadbdcabdadbabddcbbbcbd"""
1924,lcs,2,1,0,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07331204414367676}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""ad"""
1925,rod,8,152,22,0,1,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08817458152770996}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 7, 16, 9, 15, 3, 17, 19]"
1926,ilp_assign,16,59,145,0,114,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4116823673248291}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[35, 4, 38, 40, 6, 27, 45], [46, 43, 3, 12, 26, 39, 39], [16, 18, 39, 34, 17, 13, 19], [34, 26, 25, 40, 3, 48, 17], [34, 1, 21, 6, 6, 6, 8], [33, 25, 40, 42, 4, 43, 35], [34, 21, 11, 35, 4, 9, 34]]"
1927,add,4,10083,10083,1,10083,1,"{'ok': True, 'value': 10083, 'stdout': '10083\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0789494514465332}",1,Compute: 2741 + 7342
1928,sub,8,43755744,43755744,1,43755744,1,"{'ok': True, 'value': 43755744, 'stdout': '43755744\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08011507987976074}",1,Compute: 57352497 - 13596753
1929,lcs,2,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07228779792785645}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""ada"""
1930,mul,8,4329357045836760,432432430873200,0,321186144,0,"{'ok': True, 'value': 4329357045836760, 'stdout': '4329357045836760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08185148239135742}",1,Compute: 46836524 * 92435490
1931,mul,2,1700,1700,1,1700,1,"{'ok': True, 'value': 1700, 'stdout': '1700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07648730278015137}",1,Compute: 20 * 85
1932,ilp_prod,4,36,39,0,36,1,"{'ok': True, 'value': 27, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/afb1dfb7d19e4f83920bc0d7139b5355-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/afb1dfb7d19e4f83920bc0d7139b5355-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 33.75 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -27 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                27.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n27.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20010876655578613}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 9, 4]
consumption (rows=resources) = [[1, 4, 3], [2, 1, 1], [3, 2, 3]]
capacity = [10, 15, 13]
upper_bounds = [4, 3, 3]"
1933,knap,4,12,22,0,0,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0804283618927002}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 7, 7, 5]
V = [2, 10, 4, 8]
C = 10"
1934,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0745704174041748}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bada""
T = ""bbba"""
1935,ilp_prod,8,71,62,0,4,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b12c07a0538c4e7c9844b0dad2884c4b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b12c07a0538c4e7c9844b0dad2884c4b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 79.8235 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -66 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -71 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3\nCbc0013I At root node, 2 cuts changed objective from -79.823529 to -71 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -71, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -79.8235 to -71\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                71.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\nStatus: Optimal\nOptimal value: 71.0\nOptimal solution:\nx_0: 1.0\nx_1: 0.0\nx_2: 3.0\nx_3: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17770099639892578}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 14, 19, 6]
consumption (rows=resources) = [[2, 7, 7, 6], [6, 2, 2, 3], [6, 5, 4, 2], [6, 5, 4, 8]]
capacity = [23, 23, 23, 31]
upper_bounds = [3, 3, 3, 3]"
1936,sub,2,46,46,1,46,1,"{'ok': True, 'value': 46, 'stdout': '46\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07675886154174805}",1,Compute: 85 - 39
1937,mul,16,19817603476754157741324172766832,9001400057984133,0,19740383864161843459458598506658624,0,"{'ok': True, 'value': 19817603476754157741324172766832, 'stdout': '19817603476754157741324172766832\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07604479789733887}",1,Compute: 3934427972832432 * 5036971985151701
1938,knap,16,441,1,0,-1,0,"{'ok': True, 'value': 441, 'stdout': '441\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07509326934814453}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 10, 4, 6, 18, 14, 25, 28, 6, 5, 3, 8, 24, 29, 10, 30]
V = [34, 60, 13, 33, 27, 27, 55, 49, 11, 57, 48, 50, 4, 31, 26, 54]
C = 111"
1939,sub,2,41,41,1,41,1,"{'ok': True, 'value': 41, 'stdout': '41\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08545207977294922}",1,Compute: 70 - 29
1940,mul,2,2279,2299,0,2329,0,"{'ok': True, 'value': 2279, 'stdout': '2279\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07380509376525879}",1,Compute: 53 * 43
1941,ilp_assign,16,85,105,0,115,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3946647644042969}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 28, 19, 7, 47, 5, 36], [42, 26, 28, 13, 28, 18, 19], [24, 39, 36, 34, 29, 43, 20], [18, 1, 27, 15, 25, 4, 9], [36, 30, 26, 10, 31, 42, 9], [6, 20, 21, 43, 34, 37, 45], [7, 15, 40, 21, 45, 38, 9]]"
1942,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08128929138183594}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbc""
T = ""aab"""
1943,ilp_prod,4,42,34,0,21,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c9c611306b374e8382eef72a671497a2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c9c611306b374e8382eef72a671497a2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 31 RHS\nAt line 36 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1571495532989502}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5, 7]
consumption (rows=resources) = [[1, 4, 3], [2, 3, 2], [2, 1, 3]]
capacity = [13, 13, 14]
upper_bounds = [6, 3, 4]"
1944,ilp_assign,16,79,105,0,11,0,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3838818073272705}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[48, 41, 37, 20, 28, 15, 10], [19, 36, 40, 4, 21, 14, 27], [36, 11, 9, 23, 20, 12, 6], [34, 47, 11, 37, 10, 41, 2], [28, 15, 31, 48, 42, 26, 1], [45, 44, 18, 37, 16, 19, 4], [22, 15, 10, 37, 12, 44, 28]]"
1945,sub,8,4353344,4353344,1,4453344,0,"{'ok': True, 'value': 4353344, 'stdout': '4353344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08896470069885254}",1,Compute: 40479408 - 36126064
1946,ilp_prod,2,36,12,0,12,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1d479bb8d12e41a2930c718408d79091-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1d479bb8d12e41a2930c718408d79091-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14854836463928223}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[2, 1], [1, 1]]
capacity = [6, 10]
upper_bounds = [3, 6]"
1947,knap,32,1642,1045,0,28,0,"{'ok': True, 'value': 1642, 'stdout': '1642\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09757876396179199}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 62, 14, 15, 61, 1, 27, 24, 47, 63, 41, 6, 13, 23, 28, 26, 16, 23, 40, 3, 39, 15, 13, 45, 34, 21, 60, 59, 36, 1, 10, 46]
V = [40, 106, 116, 23, 27, 81, 21, 7, 76, 40, 19, 45, 83, 43, 69, 112, 96, 116, 68, 96, 28, 87, 63, 62, 31, 11, 46, 63, 104, 91, 18, 109]
C = 467"
1948,lcs,4,3,3,1,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07182955741882324}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddad""
T = ""dcda"""
1949,ilp_prod,4,63,31,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ttz_d_jb/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_ttz_d_jb/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14969468116760254}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 6, 8]
consumption (rows=resources) = [[1, 4, 3], [1, 3, 4], [2, 2, 1]]
capacity = [16, 11, 11]
upper_bounds = [5, 3, 3]"
1950,lcs,16,12,8,0,0,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0787956714630127}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabdddcdabdcaaad""
T = ""dbbddcadcbdbdcaa"""
1951,sub,16,7585583302600652,,0,7585573302600652,0,"{'ok': True, 'value': 7585583302600652, 'stdout': '7585583302600652\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0816802978515625}",1,Compute: 9110376489087046 - 1524793186486394
1952,knap,8,72,100,0,0,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09507441520690918}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 9, 8, 14, 10, 1, 6, 13]
V = [9, 1, 24, 7, 1, 9, 10, 20]
C = 32"
1953,ilp_assign,16,45,105,0,114,0,"{'ok': True, 'value': 45, 'stdout': '45\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40339136123657227}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[48, 10, 40, 9, 33, 45, 23], [1, 46, 44, 25, 23, 42, 24], [27, 34, 7, 43, 2, 34, 17], [37, 18, 32, 4, 8, 34, 4], [47, 26, 39, 48, 10, 8, 41], [35, 18, 21, 1, 15, 40, 41], [41, 14, 42, 4, 14, 47, 42]]"
1954,ilp_partition,4,0,1,0,11,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07193946838378906}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 5, 2, 11]"
1955,ilp_assign,2,6,7,0,7,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.49611425399780273}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [5, 2]]"
1956,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09768199920654297}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 10, 81, 59, 50, 69, 26, 86, 1, 30, 1, 76, 20, 3, 25, 53, 50, 74, 59, 33, 75, 65, 76, 39]"
1957,mul,8,1146352888356920,2648438802,0,114113554313120,0,"{'ok': True, 'value': 1146352888356920, 'stdout': '1146352888356920\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07564377784729004}",1,Compute: 87740131 * 13065320
1958,sub,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08886146545410156}",1,Compute: 24 - 18
1959,ilp_prod,2,36,22,0,24,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/acff4fbc1b3d4b10bb2301d2c6b7992d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/acff4fbc1b3d4b10bb2301d2c6b7992d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 26.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1494886875152588}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6]
consumption (rows=resources) = [[3, 1], [3, 1]]
capacity = [10, 6]
upper_bounds = [3, 6]"
1960,add,32,132180534716233994911627500914601,132180534716234094911627500914601,0,132180534716234094921627480914601,0,"{'ok': True, 'value': 132180534716233994911627500914601, 'stdout': '132180534716233994911627500914601\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07765984535217285}",1,Compute: 66364922358902899523682642471410 + 65815612357331095387944858443191
1961,knap,32,1602,1645,0,3,0,"{'ok': True, 'value': 1602, 'stdout': '1602\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08995938301086426}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [45, 11, 42, 47, 32, 14, 16, 43, 64, 10, 5, 39, 16, 38, 51, 40, 36, 30, 22, 26, 22, 8, 19, 61, 56, 36, 40, 15, 32, 49, 37, 49]
V = [80, 72, 115, 59, 46, 47, 111, 101, 27, 60, 118, 104, 56, 79, 110, 6, 84, 4, 85, 71, 41, 18, 4, 115, 101, 102, 41, 89, 58, 77, 32, 97]
C = 525"
1962,ilp_prod,4,40,30,0,30,0,"{'ok': True, 'value': 3, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7eb0f6f1e31440ccab2cdd860abd6d26-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7eb0f6f1e31440ccab2cdd860abd6d26-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 35 RHS\nAt line 41 BOUNDS\nAt line 45 ENDATA\nProblem MODEL has 5 rows, 3 columns and 15 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -3 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                3.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n3.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18801236152648926}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 10, 5]
consumption (rows=resources) = [[4, 3, 4], [4, 1, 2], [4, 3, 1]]
capacity = [13, 12, 15]
upper_bounds = [3, 4, 3]"
1963,ilp_partition,16,0,1,0,2,0,"{'ok': True, 'value': 234, 'stdout': '234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07649898529052734}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 46, 2, 7, 14, 14, 32, 27, 33, 23, 33, 2, 1, 15, 10, 46]"
1964,rod,16,336,65,0,84,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11456179618835449}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [21, 12, 4, 12, 31, 2, 16, 8, 36, 38, 43, 40, 10, 7, 6, 39]"
1965,sub,4,4999,4999,1,4999,1,"{'ok': True, 'value': 4999, 'stdout': '4999\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0743706226348877}",1,Compute: 9059 - 4060
1966,add,8,161385609,161385609,1,161385609,1,"{'ok': True, 'value': 161385609, 'stdout': '161385609\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0770270824432373}",1,Compute: 81586074 + 79799535
1967,ilp_assign,4,18,26,0,27,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6244194507598877}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2, 12, 2], [4, 10, 5, 8], [9, 5, 12, 2], [12, 8, 10, 11]]"
1968,mul{'ok': True, 'value': 52040273569430659527673231285072, 'stdout': '52040273569430659527673231285072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08636164665222168}",1,Compute: 8504679535770532 * 6119016401564596
1969,add,32,85953992536085503999584273869132,860102104178783162,0,85951022536085504009584273869132,0,"{'ok': True, 'value': 85953992536085503999584273869132, 'stdout': '85953992536085503999584273869132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0940408706665039}",1,Compute: 62603305025411711783108895396519 + 23350687510673792216475378472613
1970,add,4,3752,3752,1,3752,1,"{'ok': True, 'value': 3752, 'stdout': '3752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07746648788452148}",1,Compute: 1837 + 1915
1971,lcs,4,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08417844772338867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbb""
T = ""cdd"""
1972,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07647037506103516}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""ac"""
1973,mul,4,20768216,21722846,0,20786886,0,"{'ok': True, 'value': 20768216, 'stdout': '20768216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09298276901245117}",1,Compute: 7336 * 2831
1974,ilp_prod,16,116,199,0,4,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9e578eb12b5540d398ef73b51d672a7c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9e578eb12b5540d398ef73b51d672a7c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 14 COLUMNS\nAt line 87 RHS\nAt line 97 BOUNDS\nAt line 104 ENDATA\nProblem MODEL has 9 rows, 6 columns and 54 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1681058406829834}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 3, 45, 13, 5, 7]
consumption (rows=resources) = [[8, 9, 13, 3, 3, 8], [4, 9, 11, 3, 10, 8], [7, 8, 12, 15, 3, 12], [16, 4, 10, 11, 12, 2]]
capacity = [35, 32, 52, 53]
upper_bounds = [3, 3, 3, 3, 3, 4]"
1975,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07467818260192871}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 4, 5, 3]"
1976,ilp_assign,16,76,105,0,105,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37971019744873047}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 31, 48, 27, 10, 42, 15], [46, 28, 27, 16, 47, 13, 6], [36, 4, 6, 3, 13, 26, 20], [25, 20, 3, 23, 22, 32, 15], [27, 10, 27, 3, 10, 12, 12], [45, 32, 8, 43, 29, 43, 31], [41, 47, 43, 38, 8, 28, 38]]"
1977,ilp_prod,16,212,"The solution to the problem involves using a linear programming approach to maximize the total profit while ensuring resource constraints are met. The decision variables are the quantities x_j to produce, which are assumed to be integers. The objective function is the sum of the product of profit[j] and x_j for all j. The constraints are resource constraints, non-negativity, and upper bounds. A linear programming solver can be used to find the optimal solution, and the maximum profit is returned.",0,156,0,"{'ok': True, 'value': 108, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/26cb29d8fa934d228387981229d4df2b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/26cb29d8fa934d228387981229d4df2b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 113.786 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -108 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                108.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n108.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20113015174865723}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 39, 40, 14, 44, 30]
consumption (rows=resources) = [[8, 12, 11, 2, 3, 8], [14, 11, 13, 7, 8, 15], [5, 7, 4, 10, 14, 5], [7, 2, 5, 14, 11, 2]]
capacity = [37, 59, 55, 48]
upper_bounds = [4, 3, 3, 3, 3, 3]"
1978,rod,32,2624,1055,0,9,0,"{'ok': True, 'value': 2624, 'stdout': '2624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0747995376586914}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [82, 7, 57, 21, 27, 40, 46, 38, 44, 17, 31, 41, 77, 96, 33, 23, 11, 85, 36, 20, 5, 89, 15, 19, 36, 46, 91, 39, 87, 15, 87, 47]"
1979,ilp_partition,4,7,1,0,1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07901453971862793}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 1, 9, 11]"
1980,ilp_assign,16,69,114,0,105,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3857853412628174}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 16, 38, 10, 27, 8, 33], [1, 9, 22, 6, 45, 3, 10], [33, 28, 5, 6, 27, 11, 47], [37, 19, 22, 36, 29, 39, 13], [34, 33, 38, 41, 42, 23, 19], [42, 2, 2, 1, 42, 16, 2], [3, 18, 45, 22, 48, 3, 14]]"
1981,ilp_assign,8,38,11,0,36,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43000340461730957}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 21, 19, 13, 6, 5, 5], [19, 22, 10, 22, 5, 2, 5], [9, 21, 12, 14, 11, 12, 14], [17, 13, 14, 24, 24, 13, 12], [20, 4, 8, 3, 17, 1, 8], [18, 5, 3, 23, 6, 1, 2], [18, 11, 9, 22, 22, 7, 3]]"
1982,mul,2,2574,66,0,2604,0,"{'ok': True, 'value': 2574, 'stdout': '2574\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2900514602661133}",1,Compute: 39 * 66
1983,mul,8,5063187616521060,300,0,447489390,0,"{'ok': True, 'value': 5063187616521060, 'stdout': '5063187616521060\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07714557647705078}",1,Compute: 74581565 * 67887924
1984,ilp_prod,16,116,"The solution to this problem would involve setting up and solving a linear programming model with the objective of maximizing total profit, subject to resource constraints and non-negativity constraints. The exact solution would depend on the specific values of the profit, consumption, capacity, and upper_bounds arrays.",0,24,0,"{'ok': True, 'value': 72, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a4fe16d0c8ce4d3995427f0db26576ce-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a4fe16d0c8ce4d3995427f0db26576ce-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 94 RHS\nAt line 105 BOUNDS\nAt line 112 ENDATA\nProblem MODEL has 10 rows, 6 columns and 60 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 88 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -72 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                72.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n72.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1823735237121582}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 31, 23, 35, 30, 4]
consumption (rows=resources) = [[13, 14, 15, 11, 5, 5], [14, 16, 1, 15, 4, 2], [11, 16, 10, 12, 14, 14], [7, 3, 2, 8, 10, 14]]
capacity = [62, 55, 44, 42]
upper_bounds = [3, 3, 4, 3, 3, 3]"
1985,ilp_assign,2,7,2,0,3,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.422698974609375}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [6, 1]]"
1986,mul{'ok': True, 'value': 17513565047323044598173418452816, 'stdout': '17513565047323044598173418452816\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07719969749450684}",1,Compute: 9565560746410058 * 1830897896278152
1987,ilp_partition,16,1,1,1,34,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1943345069885254}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 12, 34, 39, 17, 29, 36, 16, 27, 41, 44, 17, 5, 22, 20, 21]"
1988,mul,4,4089558,27929497400,0,4028858,0,"{'ok': True, 'value': 4089558, 'stdout': '4089558\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07603025436401367}",1,Compute: 1441 * 2838
1989,lcs,32,15,16,0,1,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07489013671875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbacbdbcabcbabbbcbcbbaaabdacbbda""
T = ""abadadaaddcaaadabcdccbbbcaaddcc"""
1990,knap,4,23,16,0,0,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18192791938781738}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 6, 8, 2]
V = [8, 15, 3, 8]
C = 11"
1991,add,4,6056,6056,1,6056,1,"{'ok': True, 'value': 6056, 'stdout': '6056\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18576765060424805}",1,Compute: 2211 + 3845
1992,mul,16,43128316727352186416153922336869,42381216486555048091000000,0,424914992699435287550456558551,0,"{'ok': True, 'value': 43128316727352186416153922336869, 'stdout': '43128316727352186416153922336869\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18407011032104492}",1,Compute: 9360314137721597 * 4607571508048777
1993,ilp_prod,4,40,55,0,35,0,"{'ok': True, 'value': 30, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b4d8ee8ca22e48ef905fd49367f8a9e9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b4d8ee8ca22e48ef905fd49367f8a9e9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 37.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -30 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                30.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n30.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2400341033935547}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 5, 10]
consumption (rows=resources) = [[4, 1, 4], [2, 3, 2], [1, 1, 2]]
capacity = [15, 12, 11]
upper_bounds = [3, 4, 3]"
1994,ilp_partition,8,1,1,1,0,0,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07199287414550781}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 8, 1, 8, 20, 13, 6, 10]"
1995,rod,4,20,13,0,11,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.23550796508789062}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 10, 11, 5]"
1996,add,16,17430935605879568,,0,17430935605879568,1,"{'ok': True, 'value': 17430935605879568, 'stdout': '17430935605879568\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07995009422302246}",1,Compute: 7664271463547349 + 9766664142332219
1997,mul,4,9399180,2086560,0,9286860,0,"{'ok': True, 'value': 9399180, 'stdout': '9399180\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08730697631835938}",1,Compute: 2415 * 3892
1998,mul,32,1067657917836145067338526668591854973760985625400772222414564455,99999999999999999999999999999999,0,10284048641498224104482954378539266880666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 1067657917836145067338526668591854973760985625400772222414564455, 'stdout': '1067657917836145067338526668591854973760985625400772222414564455\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07492375373840332}",1,Compute: 39744704004481348339736281770385 * 26862897701182101276306616318583
1999,sub,32,65406448141509476746418033072382,11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,0,65406448141509476746418033072382,1,"{'ok': True, 'value': 65406448141509476746418033072382, 'stdout': '65406448141509476746418033072382\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07260489463806152}",1,Compute: 95091548589917006423687471183577 - 29685100448407529677269438111195
