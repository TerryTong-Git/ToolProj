idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,rod,2,12,12,1,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_pe9bzrr6/main.py"", line 10, in <module>\n    output = f(2, [6, 4])\n  File ""/tmp/cot_exec_pe9bzrr6/main.py"", line 6, in f\n    revenue = P[i] + f(N - i, P)\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15708422660827637}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 4]"
1,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11156892776489258}",1,Compute: 60 - 39
2,add,16,6978207684534572,6203582818,0,6978207684534572,1,"{'ok': True, 'value': 6978207684534572, 'stdout': '6978207684534572\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10548138618469238}",1,Compute: 4124873036425021 + 2853334648109551
3,ilp_assign,4,15,Cannot be determined without implementing the Hungarian Algorithm,0,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_x7dtfqm6/main.py"", line 14, in <module>\n    output = f([[8, 1, 5, 12], [10, 10, 10, 7], [11, 3, 3, 9], [4, 1, 4, 9]])\n  File ""/tmp/cot_exec_x7dtfqm6/main.py"", line 12, in f\n    return min_cost\nNameError: name \'min_cost\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09506106376647949}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 1, 5, 12], [10, 10, 10, 7], [11, 3, 3, 9], [4, 1, 4, 9]]"
4,mul,8,4543994144374806,45309999999999998,0,45307935767856766,0,"{'ok': True, 'value': 4543994144374806, 'stdout': '4543994144374806\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10083150863647461}",1,Compute: 46142079 * 98478314
5,rod,16,256,0,0,109,0,"{'ok': True, 'value': 256, 'stdout': '256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10497331619262695}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [16, 18, 13, 5, 41, 47, 11, 38, 29, 38, 47, 10, 39, 17, 30, 34]"
6,rod,8,104,0,0,37,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11459660530090332}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 8, 4, 23, 7, 23, 22, 10]"
7,mul,4,26813640,27339640,0,26820440,0,"{'ok': True, 'value': 26813640, 'stdout': '26813640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09861373901367188}",1,Compute: 3262 * 8220
8,rod,16,432,,0,266,0,"{'ok': True, 'value': 432, 'stdout': '432\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09800338745117188}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [27, 8, 3, 13, 16, 38, 27, 11, 8, 29, 11, 44, 16, 11, 48, 7]"
9,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10907196998596191}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbbdadc""
T = ""bddcdcacd"""
10,mul,32,4000598905870066922661865962176026068606834982999713150006624768,400000000000000000000000000000000000000000,0,400399999999999999999999999999999,0,"{'ok': True, 'value': 4000598905870066922661865962176026068606834982999713150006624768, 'stdout': '4000598905870066922661865962176026068606834982999713150006624768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10450625419616699}",1,Compute: 50142357114875757331558539639866 * 79784819383435153884532017493248
11,rod,8,160,22,0,39,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10382080078125}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 6, 12, 10, 3, 6, 6, 9]"
12,knap,2,10,10,1,11,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1031498908996582}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 4]
V = [7, 10, 1]
C = 4"
13,add,4,11119,11199,0,11119,1,"{'ok': True, 'value': 11119, 'stdout': '11119\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10233664512634277}",1,Compute: 1475 + 9644
14,knap,4,26,17,0,24,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10994577407836914}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 2, 6, 7]
V = [7, 10, 10, 16]
C = 10"
15,lcs,4,1,3,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09688758850097656}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbd""
T = ""adab"""
16,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10700798034667969}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 15, 6, 23, 20, 17, 2, 13]"
17,rod,32,977,,0,0,0,"{'ok': True, 'value': 977, 'stdout': '977\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0972137451171875}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [16, 57, 92, 58, 45, 40, 70, 52, 44, 94, 88, 74, 64, 15, 83, 49, 49, 27, 72, 1, 36, 82, 77, 93, 95, 94, 66, 26, 60, 77, 67, 53]"
18,sub,8,14207962,14208062,0,14208062,0,"{'ok': True, 'value': 14207962, 'stdout': '14207962\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09634280204772949}",1,Compute: 71623617 - 57415655
19,add,2,109,109,1,109,1,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10081171989440918}",1,Compute: 27 + 82
20,sub,2,24,24,1,24,1,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10896515846252441}",1,Compute: 42 - 18
21,mul,2,1825,1825,1,1825,1,"{'ok': True, 'value': 1825, 'stdout': '1825\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10679483413696289}",1,Compute: 25 * 73
22,lcs,16,10,5,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10832357406616211}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdacdcabbcbcdbc""
T = ""adcdbaaabbbbccccc"""
23,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11088895797729492}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""dba"""
24,ilp_prod,16,205,Cannot be determined without an integer linear programming solver,0,370,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_a8sn1tme/main.py"", line 18, in <module>\n    output = f(profit, consumption, capacity, upper_bounds)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10134625434875488}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 27, 37, 21, 38, 19]
consumption (rows=resources) = [[16, 11, 4, 7, 11, 2], [1, 1, 10, 11, 15, 13], [11, 13, 3, 3, 11, 15], [4, 9, 7, 16, 12, 9]]
capacity = [43, 45, 51, 44]
upper_bounds = [3, 3, 4, 3, 3, 3]"
25,ilp_assign,16,45,Cannot be determined without implementing the Hungarian Algorithm.,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_x8dc9l63/main.py"", line 14, in <module>\n    output = f(C)\nNameError: name \'C\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10396361351013184}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 24, 6, 18, 6, 29, 6], [42, 37, 42, 22, 15, 25, 20], [3, 21, 12, 21, 38, 20, 16], [22, 7, 35, 40, 38, 39, 6], [16, 15, 2, 16, 26, 5, 18], [36, 5, 47, 5, 2, 41, 1], [19, 23, 32, 31, 10, 7, 33]]"
26,add,32,198267234717943403902104405206747,198267234717943403802004334199048,0,198267234717943403802104205206747,0,"{'ok': True, 'value': 198267234717943403902104405206747, 'stdout': '198267234717943403902104405206747\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09843730926513672}",1,Compute: 98509082625719534849225332187253 + 99758152092223869052879073019494
27,ilp_partition,2,0,4,0,2,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10011100769042969}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 2, 4]"
28,knap,8,79,43,0,39,0,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10115861892700195}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 8, 6, 6, 3, 9, 2, 3]
V = [6, 2, 29, 1, 18, 16, 18, 8]
C = 19"
29,ilp_partition,16,0,10,0,10,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10968232154846191}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 5, 33, 43, 12, 12, 10, 10, 21, 20, 7, 46, 33, 39, 19, 9]"
30,ilp_assign,32,109,Cannot be determined,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_mw7o2i0l/main.py"", line 14, in <module>\n    output = f(C)\nNameError: name \'C\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10326862335205078}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[60, 66, 6, 35, 66, 13, 96], [76, 55, 9, 46, 9, 85, 57], [3, 22, 65, 91, 21, 89, 12], [52, 82, 89, 36, 78, 39, 27], [68, 27, 31, 43, 35, 9, 10], [90, 67, 85, 48, 60, 66, 72], [95, 7, 22, 39, 84, 95, 92]]"
31,sub,32,40645652367997390793901477458466,56715652368007390793901477458466,0,40645652368007390793901477458466,0,"{'ok': True, 'value': 40645652367997390793901477458466, 'stdout': '40645652367997390793901477458466\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10545945167541504}",1,Compute: 58501750341776933679762340663130 - 17856097973779542885860863204664
32,mul{'ok': True, 'value': 5333591417279976785668434475484, 'stdout': '5333591417279976785668434475484\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09945201873779297}",1,Compute: 2748466546416076 * 1940569887683309
33,add,8,143697835,14508035,0,143697835,1,"{'ok': True, 'value': 143697835, 'stdout': '143697835\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10973501205444336}",1,Compute: 56147529 + 87550306
34,ilp_prod,4,35,Cannot be determined without using optimization algorithms,0,63,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11852169036865234}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 6, 9]
consumption (rows=resources) = [[4, 2, 3], [3, 1, 4], [1, 2, 4]]
capacity = [13, 15, 8]
upper_bounds = [3, 4, 3]"
35,knap,32,1608,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_m_xdw8ge/main.py"", line 16, in <module>\n    output = f(W, V, C)\nNameError: name \'W\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1023259162902832}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 33, 13, 35, 11, 18, 11, 57, 31, 49, 56, 51, 22, 42, 57, 17, 63, 28, 16, 56, 53, 16, 38, 36, 32, 49, 1, 25, 57, 3, 4, 32]
V = [67, 53, 45, 73, 38, 52, 70, 80, 65, 115, 44, 92, 126, 108, 32, 54, 99, 53, 73, 28, 7, 31, 4, 76, 35, 20, 96, 80, 112, 92, 83, 1]
C = 512"
36,sub,4,3542,4842,0,3542,1,"{'ok': True, 'value': 3542, 'stdout': '3542\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10885357856750488}",1,Compute: 8174 - 4632
37,ilp_prod,8,72,Cannot be determined without a linear programming solver,0,-1,0,"{'ok': True, 'value': -1, 'stdout': '-1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10664749145507812}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 8, 24, 11]
consumption (rows=resources) = [[5, 8, 6, 8], [8, 2, 1, 5], [7, 6, 7, 4], [5, 2, 5, 4]]
capacity = [29, 16, 23, 16]
upper_bounds = [3, 3, 3, 3]"
38,sub,16,2172560573980750,2172560574070750,0,2172560573970750,0,"{'ok': True, 'value': 2172560573980750, 'stdout': '2172560573980750\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0965726375579834}",1,Compute: 7072231520712061 - 4899670946731311
39,knap,16,332,,0,1,0,"{'ok': True, 'value': 332, 'stdout': '332\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0898582935333252}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 8, 19, 16, 32, 9, 7, 21, 3, 27, 5, 25, 10, 9, 22, 8]
V = [49, 10, 29, 11, 35, 47, 38, 15, 59, 36, 14, 6, 38, 2, 2, 12]
C = 121"
40,rod,16,124,,0,107,0,"{'ok': True, 'value': 124, 'stdout': '124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09334778785705566}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [7, 12, 3, 4, 39, 2, 14, 44, 3, 32, 46, 34, 47, 40, 29, 22]"
41,ilp_assign,8,27,Cannot be determined,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xjop90ir/main.py"", line 16, in <module>\n    output = f(C)\nNameError: name \'C\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11185908317565918}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 5, 2, 24, 6, 15, 23], [17, 22, 14, 18, 8, 21, 23], [17, 15, 8, 17, 21, 1, 13], [22, 19, 11, 22, 21, 14, 2], [24, 10, 5, 7, 2, 10, 3], [3, 10, 10, 24, 6, 14, 19], [9, 5, 1, 18, 2, 19, 7]]"
42,rod,4,36,31,0,10,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10436415672302246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 7, 10, 1]"
43,ilp_prod,2,30,Cannot be determined without a solver,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_41lur_c5/main.py"", line 8, in <module>\n    output = f(profit, consumption, capacity, upper_bounds)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10447001457214355}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[1, 3], [1, 2]]
capacity = [6, 6]
upper_bounds = [6, 3]"
44,mul,4,43954614,43950614,0,43929794,0,"{'ok': True, 'value': 43954614, 'stdout': '43954614\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09865379333496094}",1,Compute: 9123 * 4818
45,ilp_partition,32,1,,0,10,0,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10028553009033203}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [72, 35, 46, 79, 95, 30, 51, 72, 52, 23, 62, 34, 79, 43, 92, 29, 34, 79, 91, 32, 85, 4, 80, 52]"
46,lcs,32,20,,0,1,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11501836776733398}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddadcbcdadaacbbbccddbabdabcdbbc""
T = ""dbdccbaacbbccccbdaadbbcdbaddcdba"""
47,ilp_assign,2,2,2,1,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dahim5kg/main.py"", line 18, in <module>\n    output = f([[1, 6], [5, 1]])\n  File ""/tmp/cot_exec_dahim5kg/main.py"", line 13, in f\n    for assignment in itertools.permutations(range(n)):\nNameError: name \'itertools\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10440206527709961}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 6], [5, 1]]"
48,ilp_partition,4,3,7,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10673809051513672}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 4, 7, 9]"
49,ilp_prod,32,606,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_hr1fjsw8/main.py"", line 21, in <module>\n    output = f(profit, consumption, capacity, upper_bounds)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10226869583129883}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [94, 42, 92, 24, 60, 82]
consumption (rows=resources) = [[13, 24, 1, 25, 28, 26], [22, 5, 32, 16, 19, 2], [27, 10, 26, 18, 12, 5], [1, 23, 17, 27, 20, 10]]
capacity = [123, 97, 126, 85]
upper_bounds = [4, 3, 3, 3, 4, 4]"
