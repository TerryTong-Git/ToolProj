idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,sub,16,2196427266728182,0,0,2196427266735122,0,"{'ok': True, 'value': 2196427266728182, 'stdout': '2196427266728182\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15593981742858887}",1,Compute: 9454938309536112 - 7258511042807930
1,mul,4,51240510,51757490,0,137308,0,"{'ok': True, 'value': 51240510, 'stdout': '51240510\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10768747329711914}",1,Compute: 8583 * 5970
2,rod,2,3,3,1,3,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_j1ztdfcc/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_j1ztdfcc/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09413814544677734}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 3]"
3,knap,32,1700,583,0,460,0,"{'ok': True, 'value': 1700, 'stdout': '1700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11486625671386719}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [62, 22, 51, 36, 19, 35, 57, 49, 22, 4, 58, 39, 55, 53, 54, 56, 50, 23, 49, 25, 25, 10, 60, 42, 30, 50, 10, 37, 14, 16, 50, 3]
V = [54, 104, 117, 101, 65, 21, 61, 102, 26, 74, 116, 74, 65, 112, 119, 62, 89, 83, 60, 89, 6, 65, 31, 124, 83, 77, 14, 10, 69, 101, 104, 46]
C = 583"
4,ilp_partition,8,1,1,1,7,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10462069511413574}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 22, 12, 7, 22, 6, 14, 3]"
5,add,4,11357,11357,1,11357,1,"{'ok': True, 'value': 11357, 'stdout': '11357\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10490179061889648}",1,Compute: 4886 + 6471
6,ilp_partition,4,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1220390796661377}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 7, 4, 12]"
7,sub,2,14,14,1,14,1,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10358715057373047}",1,Compute: 48 - 34
8,ilp_assign,4,19,18,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 3, 12, 5], [12, 12, 6, 1], [12, 12, 11, 5], [8, 8, 3, 11]]"
9,ilp_partition,16,1,10,0,1,1,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10616040229797363}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [33, 20, 6, 30, 15, 11, 37, 38, 38, 14, 34, 19, 38, 42, 37, 31]"
10,sub,4,2910,2910,1,2910,1,"{'ok': True, 'value': 2910, 'stdout': '2910\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1045083999633789}",1,Compute: 7548 - 4638
11,mul,8,2741065658243698,254282395,0,2741579172380000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.03946852684021}",0,Compute: 50856479 * 53898062
12,ilp_prod,32,489,450,0,394,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xcm9eydf/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3633003234863281}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [70, 40, 93, 17, 85, 56]
consumption (rows=resources) = [[31, 26, 8, 32, 7, 5], [27, 29, 20, 16, 18, 2], [18, 9, 19, 30, 10, 19], [29, 11, 28, 20, 18, 14]]
capacity = [85, 94, 79, 114]
upper_bounds = [3, 3, 4, 3, 5, 4]"
13,add,8,77683033,77691023,0,77683033,1,"{'ok': True, 'value': 77683033, 'stdout': '77683033\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09696388244628906}",1,Compute: 27091909 + 50591124
14,add,32,99789491944271358080772359553744,1,0,99789491944279358173372339553844,0,"{'ok': True, 'value': 99789491944271358080772359553744, 'stdout': '99789491944271358080772359553744\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09550666809082031}",1,Compute: 52816841241080622149399774443918 + 46972650703190735931372585109826
15,sub,16,2288339688250285,2288539696381957,0,2288139688248285,0,"{'ok': True, 'value': 2288339688250285, 'stdout': '2288339688250285\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13409733772277832}",1,Compute: 8215134696381957 - 5926795008131672
16,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10515141487121582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbd""
T = ""acdba"""
17,sub,32,25365530629673890897110796398826,0,0,25417560530703982897413656368823,0,"{'ok': True, 'value': 25365530629673890897110796398826, 'stdout': '25365530629673890897110796398826\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10760211944580078}",1,Compute: 73422899588041781401857967250178 - 48057368958367890504747170851352
18,ilp_prod,16,169,195,0,172,0,"{'ok': True, 'value': 169, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a35f88102d8b46eda89527d2e9ab078b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a35f88102d8b46eda89527d2e9ab078b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 183.005 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -132 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -169 found by DiveCoefficient after 7 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 6\nCbc0013I At root node, 3 cuts changed objective from -183.00526 to -169 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 6 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 8 row cuts average 5.6 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -169, took 7 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -183.005 to -169\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 8 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                169.00000000\nEnumerated nodes:               0\nTotal iterations:               7\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n169.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18492531776428223}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 37, 23, 13, 12, 37]
consumption (rows=resources) = [[4, 5, 8, 10, 14, 14], [9, 12, 10, 15, 15, 2], [15, 14, 1, 4, 10, 6], [3, 4, 8, 12, 15, 12]]
capacity = [50, 41, 49, 38]
upper_bounds = [3, 3, 4, 3, 3, 3]"
19,ilp_prod,32,376,300,0,336,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_x4ck592l/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1605234146118164}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [94, 63, 22, 24, 47, 21]
consumption (rows=resources) = [[18, 30, 19, 10, 4, 18], [19, 19, 15, 7, 22, 10], [6, 19, 19, 18, 32, 22], [22, 27, 29, 1, 3, 20]]
capacity = [69, 113, 118, 81]
upper_bounds = [3, 3, 3, 6, 3, 3]"
20,lcs,16,9,10,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0859076976776123}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdcdccacacbacac""
T = ""addcccbdaaddcadb"""
21,mul,4,19554812,19554812,1,19382722,0,"{'ok': True, 'value': 19554812, 'stdout': '19554812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10482645034790039}",1,Compute: 9797 * 1996
22,rod,8,34,60,0,32,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_w_7t5ke0/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_w_7t5ke0/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09877872467041016}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 5, 11, 17, 16, 16, 17, 22]"
23,mul,32,1910187090012944950869996472393713743948395172343680781646254690,190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,19000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 377238513434307927733577597149511215371296711949765668732491350, 'stdout': '377238513434307927733577597149511215371296711949765668732491350\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0967247486114502}",0,Compute: 37143318686788250153747994835690 * 51427474914684774375511359265101
24,ilp_partition,16,1,10,0,71,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08455801010131836}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [35, 13, 8, 21, 42, 48, 2, 28, 15, 29, 20, 27, 18, 6, 36, 13]"
25,add,16,16121209643009129,16121203254986129,0,16121112644009129,0,"{'ok': True, 'value': 16121209643009129, 'stdout': '16121209643009129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0956883430480957}",1,Compute: 9254939256196383 + 6866270386812746
26,ilp_assign,8,29,50,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1, 5, 18, 9, 8, 12], [11, 24, 5, 4, 9, 14, 12], [20, 2, 18, 2, 22, 15, 2], [24, 21, 11, 10, 10, 22, 24], [13, 10, 13, 16, 10, 22, 4], [19, 22, 21, 1, 23, 4, 14], [3, 7, 4, 21, 1, 8, 16]]"
27,mul{'ok': True, 'value': 26886745426400939249037771557790, 'stdout': '26886745426400939249037771557790\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09725260734558105}",0,Compute: 3490103839728742 * 5428425039073077
28,knap,4,28,76,0,22,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0961906909942627}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 7, 2]
V = [15, 10, 16, 13]
C = 7"
29,rod,2,12,7,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ic2npyy9/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_ic2npyy9/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09170293807983398}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 1]"
30,mul,2,7480,7480,1,7480,1,"{'ok': True, 'value': 7480, 'stdout': '7480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10885930061340332}",1,Compute: 88 * 85
31,knap,8,94,0,0,52,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13872623443603516}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 6, 3, 9, 13, 7, 5, 6]
V = [5, 21, 25, 14, 11, 3, 29, 14]
C = 28"
32,ilp_assign,8,31,100,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 22, 4, 7, 23, 15, 13], [7, 14, 2, 24, 6, 23, 22], [13, 14, 12, 17, 5, 3, 17], [23, 6, 2, 19, 7, 17, 18], [24, 15, 21, 10, 10, 16, 5], [1, 23, 15, 14, 22, 22, 19], [12, 14, 23, 12, 7, 9, 7]]"
33,sub,4,1384,1384,1,1384,1,"{'ok': True, 'value': 1384, 'stdout': '1384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09169650077819824}",1,Compute: 9962 - 8578
34,sub,16,885598700160853,8,0,8825998680260853,0,"{'ok': True, 'value': 885598700160853, 'stdout': '885598700160853\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10573029518127441}",1,Compute: 8192808279296303 - 7307209579135450
35,lcs,2,2,1,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09056568145751953}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""cda"""
36,ilp_prod,2,40,14,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_wkg89h9p/main.py"", line 7, in <module>\n    x = pulp.LpVariable.dicts(""x"", range(len(profit)), 0, None, pulp.LpInteger)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15865349769592285}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[2, 1], [3, 2]]
capacity = [8, 10]
upper_bounds = [3, 5]"
37,rod,16,197,120,0,108,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10512471199035645}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [12, 8, 37, 8, 47, 20, 12, 23, 31, 32, 34, 11, 38, 18, 41, 45]"
38,sub,4,2625,2625,1,2625,1,"{'ok': True, 'value': 2625, 'stdout': '2625\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10485601425170898}",1,Compute: 7565 - 4940
39,add,2,93,93,1,93,1,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11715078353881836}",1,Compute: 54 + 39
40,sub,4,1269,1269,1,1269,1,"{'ok': True, 'value': 1269, 'stdout': '1269\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09440803527832031}",1,Compute: 3829 - 2560
41,rod,16,336,125,0,101,0,"{'ok': True, 'value': 77, 'stdout': '77\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10183000564575195}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [8, 42, 9, 5, 41, 26, 11, 12, 15, 19, 7, 4, 39, 14, 1, 39]"
42,ilp_partition,4,6,3,0,6,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0973665714263916}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 4, 1, 12]"
43,ilp_partition,16,0,173,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12915849685668945}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 27, 17, 34, 41, 16, 25, 27, 3, 3, 48, 47, 13, 24, 26, 21]"
44,ilp_prod,2,15,9,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 1.3746111392974854}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3]
consumption (rows=resources) = [[3, 2], [3, 1]]
capacity = [10, 7]
upper_bounds = [3, 5]"
45,sub,8,47123316,6,0,47123316,1,"{'ok': True, 'value': 47123316, 'stdout': '47123316\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11619067192077637}",1,Compute: 67493345 - 20370029
46,sub,32,21051174113114867971512719091613,9,0,21051173613084867971142728189360,0,"{'ok': True, 'value': 21051174113114867971512719091613, 'stdout': '21051174113114867971512719091613\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09488463401794434}",1,Compute: 34305859384848095499112728189360 - 13254685271733227527600009097747
47,ilp_assign,8,35,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 23, 21, 8, 1, 5, 14], [12, 9, 16, 2, 13, 4, 10], [23, 14, 8, 8, 17, 19, 14], [19, 9, 1, 1, 5, 16, 23], [5, 12, 3, 20, 8, 18, 21], [18, 5, 5, 13, 5, 20, 23], [24, 11, 7, 5, 5, 20, 23]]"
48,sub,16,4272205158376849,4271805158376849,0,4271995158376849,0,"{'ok': True, 'value': 4272205158376849, 'stdout': '4272205158376849\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09290623664855957}",1,Compute: 8457351073501505 - 4185145915124656
49,add,32,165774033948755041305004606111190,7,0,165773033948755041255200906911190,0,"{'ok': True, 'value': 165774033948755041305004606111190, 'stdout': '165774033948755041305004606111190\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09546279907226562}",1,Compute: 68611866220659233841477252089003 + 97162167728095807463527354022187
50,rod,16,203,127,0,107,0,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08399081230163574}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 14, 39, 47, 9, 16, 16, 46, 35, 24, 34, 34, 2, 37, 33, 13]"
51,ilp_assign,2,6,2,0,140,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 2], [4, 6]]"
52,ilp_partition,2,1,1,1,11,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09396648406982422}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 5, 4]"
53,knap,32,1222,313,0,313,0,"{'ok': True, 'value': 1222, 'stdout': '1222\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10213398933410645}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 26, 28, 28, 21, 1, 47, 4, 30, 6, 19, 22, 15, 31, 53, 19, 27, 45, 7, 10, 48, 37, 40, 7, 28, 61, 4, 11, 6, 12, 64, 28]
V = [30, 30, 5, 9, 105, 114, 30, 12, 5, 1, 66, 26, 65, 79, 42, 96, 14, 26, 88, 87, 39, 106, 24, 72, 23, 113, 26, 31, 14, 13, 19, 10]
C = 404"
54,ilp_partition,4,1,1,1,5,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0944521427154541}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 3, 4, 4]"
55,ilp_assign,32,112,282,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 90, 37, 48, 15, 11, 41], [4, 25, 26, 93, 46, 66, 2], [50, 37, 35, 61, 19, 91, 5], [78, 52, 61, 61, 1, 70, 26], [15, 66, 87, 36, 59, 19, 24], [61, 29, 16, 75, 17, 82, 82], [72, 43, 26, 40, 56, 53, 54]]"
56,ilp_partition,16,1,10,0,0,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09477972984313965}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 12, 28, 24, 24, 2, 11, 12, 40, 23, 45, 45, 31, 41, 29, 44]"
57,ilp_prod,2,16,16,1,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.37242627143859863}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6]
consumption (rows=resources) = [[3, 3], [3, 1]]
capacity = [7, 8]
upper_bounds = [3, 3]"
58,ilp_partition,16,1,10,0,292,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08559799194335938}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [34, 17, 35, 36, 12, 46, 3, 23, 31, 35, 40, 12, 15, 21, 42, 41]"
59,add,2,124,124,1,124,1,"{'ok': True, 'value': 124, 'stdout': '124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08841824531555176}",1,Compute: 59 + 65
60,sub,8,39024203,39024203,1,39024203,1,"{'ok': True, 'value': 39024203, 'stdout': '39024203\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0931849479675293}",1,Compute: 71429297 - 32405094
61,ilp_partition,8,0,1,0,6,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09246969223022461}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 4, 14, 15, 11, 17, 4, 1]"
62,lcs,4,2,2,1,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09433412551879883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babd""
T = ""aacab"""
63,knap,2,9,9,1,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10201525688171387}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 2]
V = [3, 9, 4]
C = 2"
64,knap,16,436,200,0,193,0,"{'ok': True, 'value': 436, 'stdout': '436\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09620261192321777}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 16, 21, 14, 11, 29, 13, 27, 24, 9, 20, 12, 30, 2, 12, 8]
V = [5, 19, 54, 38, 28, 8, 10, 55, 35, 61, 57, 60, 11, 44, 14, 39]
C = 128"
65,mul,2,1207,1207,1,1207,1,"{'ok': True, 'value': 1207, 'stdout': '1207\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09398150444030762}",1,Compute: 17 * 71
66,add,4,14175,14175,1,14175,1,"{'ok': True, 'value': 14175, 'stdout': '14175\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10295581817626953}",1,Compute: 8923 + 5252
67,ilp_prod,32,286,337,0,309,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_y8uak11s/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16201567649841309}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [46, 26, 52, 87, 64, 25]
consumption (rows=resources) = [[8, 29, 13, 31, 8, 5], [6, 24, 31, 21, 29, 28], [24, 12, 14, 25, 32, 5], [32, 22, 1, 21, 27, 6]]
capacity = [109, 111, 80, 78]
upper_bounds = [3, 3, 3, 3, 3, 3]"
68,ilp_partition,4,3,3,1,3,1,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0998530387878418}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 8, 4, 5]"
69,mul{'ok': True, 'value': 3564376664469275364657772043237629760924665845410311216264122560, 'stdout': '3564376664469275364657772043237629760924665845410311216264122560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08511471748352051}",0,Compute: 38085354278441268238856625118580 * 23617565787972040472107196198539
70,sub,16,4608078092260115,0,0,4607978092259115,0,"{'ok': True, 'value': 4608078092260115, 'stdout': '4608078092260115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10131430625915527}",1,Compute: 8337354552482732 - 3729276460222617
71,ilp_prod,32,497,300,0,284,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_v46ijr_r/main.py"", line 10, in <module>\n    c = -profit  # Negate to maximize\nTypeError: bad operand type for unary -: \'list\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3793022632598877}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 64, 37, 64, 78, 57]
consumption (rows=resources) = [[13, 15, 12, 14, 12, 31], [31, 11, 5, 26, 20, 8], [28, 30, 2, 17, 24, 15], [26, 1, 9, 31, 4, 22]]
capacity = [118, 108, 109, 87]
upper_bounds = [3, 3, 9, 3, 4, 3]"
72,rod,16,336,107,0,107,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11452984809875488}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [21, 31, 4, 14, 26, 7, 29, 46, 41, 26, 32, 35, 36, 13, 29, 7]"
73,sub,2,51,51,1,51,1,"{'ok': True, 'value': 51, 'stdout': '51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1023712158203125}",1,Compute: 63 - 12
74,lcs,4,2,2,1,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08568716049194336}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcd""
T = ""cdaa"""
75,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0884256362915039}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""a"""
76,lcs,16,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1018216609954834}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcbaaadcbaabbba""
T = ""bbdcadccbabaddbc"""
77,ilp_partition,16,1,10,0,10,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11171579360961914}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [39, 24, 23, 16, 14, 17, 13, 11, 22, 18, 43, 48, 21, 24, 3, 5]"
78,knap,16,481,149,0,149,0,"{'ok': True, 'value': 481, 'stdout': '481\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1116948127746582}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 3, 31, 30, 23, 23, 23, 14, 9, 16, 27, 5, 16, 17, 20, 30]
V = [43, 57, 3, 63, 63, 17, 4, 55, 50, 24, 37, 49, 25, 52, 4, 32]
C = 149"
79,mul,4,1870752,1860752,0,1878312,0,"{'ok': True, 'value': 1870752, 'stdout': '1870752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0988612174987793}",1,Compute: 1499 * 1248
80,lcs,32,17,15,0,16,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09738469123840332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdcddadabccadaddabcaaaaccacaaab""
T = ""aacbbacddddbbdbabbabbdbdbdabccdb"""
81,ilp_prod,4,60,26,0,26,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_q4xjt34i/main.py"", line 8\n    tableau[i][i] = -consumption[i][j] for j in range(n)\n                                       ^^^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15058588981628418}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 12, 7]
consumption (rows=resources) = [[2, 1, 3], [3, 2, 3], [3, 3, 3]]
capacity = [14, 12, 15]
upper_bounds = [4, 5, 4]"
82,ilp_prod,4,36,24,0,19,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.35918402671813965}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 12, 5]
consumption (rows=resources) = [[3, 3, 3], [4, 2, 2], [1, 3, 2]]
capacity = [9, 8, 13]
upper_bounds = [3, 3, 3]"
83,sub,32,5374241239360971895671991338548,0,0,5937024123236017192517195138956,0,"{'ok': True, 'value': 5374241239360971895671991338548, 'stdout': '5374241239360971895671991338548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09378337860107422}",1,Compute: 69335801109613156364049896638956 - 63961559870252184468377905300408
84,knap,4,16,12,0,22,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11435198783874512}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 3, 1]
V = [12, 3, 3, 4]
C = 5"
85,add,32,64693865425195643825416820363321,1,0,64693875425205643875316820363321,0,"{'ok': True, 'value': 64693865425195643825416820363321, 'stdout': '64693865425195643825416820363321\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09247040748596191}",1,Compute: 48883964386273419975777242009904 + 15809901038922223849639578353417
86,add,4,12249,11449,0,12249,1,"{'ok': True, 'value': 12249, 'stdout': '12249\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11011409759521484}",1,Compute: 5419 + 6830
87,ilp_assign,4,11,20,0,16,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.049679756164551}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1, 6, 8], [6, 10, 12, 6], [4, 11, 1, 1], [8, 1, 3, 5]]"
88,ilp_prod,4,36,36,1,29,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_c9odd8wu/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1645374298095703}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 9, 5]
consumption (rows=resources) = [[2, 3, 4], [4, 2, 4], [4, 2, 4]]
capacity = [12, 13, 10]
upper_bounds = [3, 4, 3]"
89,rod,8,72,101,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ulrrr59v/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_ulrrr59v/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08817863464355469}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 18, 17, 24, 18, 6, 8, 3]"
90,ilp_partition,16,1,10,0,203,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09415912628173828}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [32, 39, 46, 14, 32, 18, 26, 8, 33, 5, 7, 23, 11, 13, 44, 28]"
91,sub,2,32,32,1,32,1,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1196894645690918}",1,Compute: 95 - 63
92,mul,4,37268588,37269548,0,3639688,0,"{'ok': True, 'value': 37268588, 'stdout': '37268588\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11203694343566895}",1,Compute: 7217 * 5164
93,sub,8,44271006,44271006,1,44277006,0,"{'ok': True, 'value': 44271006, 'stdout': '44271006\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12268376350402832}",1,Compute: 96578139 - 52307133
94,rod,32,2144,1000,0,455,0,"{'ok': True, 'value': 2144, 'stdout': '2144\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08589506149291992}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [67, 7, 26, 45, 9, 75, 56, 89, 71, 69, 59, 30, 75, 83, 9, 4, 40, 5, 82, 94, 34, 11, 30, 95, 58, 45, 37, 74, 91, 39, 90, 35]"
95,ilp_assign,8,35,100,0,40,0,"{'ok': True, 'value': -5, 'stdout': '-5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2084486484527588}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2, 12, 20, 15, 6, 22], [24, 15, 19, 12, 12, 5, 15], [7, 18, 16, 18, 10, 20, 7], [5, 20, 8, 10, 4, 22, 3], [21, 8, 14, 17, 7, 22, 10], [16, 23, 2, 13, 7, 21, 23], [2, 10, 24, 10, 20, 7, 14]]"
96,ilp_prod,2,16,15,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.3771941661834717}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[3, 3], [1, 2]]
capacity = [7, 9]
upper_bounds = [3, 3]"
97,knap,8,47,38,0,32,0,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0898435115814209}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 15, 2, 7, 3, 11, 15, 10]
V = [8, 16, 8, 13, 2, 13, 9, 2]
C = 32"
98,ilp_assign,8,32,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 4, 3, 23, 13, 16, 12], [7, 2, 17, 14, 8, 16, 7], [6, 8, 7, 17, 22, 11, 21], [23, 10, 16, 20, 19, 17, 8], [7, 10, 4, 19, 1, 2, 20], [11, 3, 17, 21, 6, 15, 18], [3, 14, 24, 5, 18, 2, 23]]"
99,ilp_partition,2,1,0,0,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09625005722045898}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 6, 3]"
100,lcs,32,20,16,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09507918357849121}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdcbabccbcadbbbbcbcacbcbdccdadc""
T = ""caccbaabcbacdaabbcdabbbadbbacaca"""
101,rod,32,608,1053,0,1028,0,"{'ok': True, 'value': 608, 'stdout': '608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11223268508911133}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [19, 11, 47, 25, 27, 55, 85, 92, 11, 14, 42, 25, 62, 49, 49, 23, 66, 84, 33, 49, 76, 48, 29, 21, 56, 15, 15, 55, 49, 50, 9, 72]"
102,knap,4,29,16,0,18,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09592461585998535}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 8, 3, 1]
V = [11, 5, 7, 11]
C = 7"
103,ilp_assign,32,159,330,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 92, 29, 73, 14, 72, 25], [37, 91, 27, 37, 73, 78, 88], [55, 88, 77, 34, 23, 52, 41], [1, 48, 51, 16, 5, 94, 32], [24, 23, 36, 39, 68, 95, 86], [17, 91, 66, 48, 19, 59, 59], [91, 45, 61, 81, 92, 30, 81]]"
104,add,4,18153,18153,1,18153,1,"{'ok': True, 'value': 18153, 'stdout': '18153\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09470248222351074}",1,Compute: 8526 + 9627
105,knap,16,373,154,0,143,0,"{'ok': True, 'value': 373, 'stdout': '373\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09690117835998535}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 15, 16, 23, 28, 7, 6, 2, 15, 22, 16, 13, 11, 6, 11, 4]
V = [39, 33, 43, 45, 55, 48, 27, 1, 64, 17, 23, 49, 1, 24, 3, 34]
C = 104"
106,mul,2,429,429,1,429,1,"{'ok': True, 'value': 429, 'stdout': '429\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09874105453491211}",1,Compute: 39 * 11
107,sub,32,3801457622844803969863930216027,484,0,39801457622844803979261632215927,0,"{'ok': True, 'value': 3801457622844803969863930216027, 'stdout': '3801457622844803969863930216027\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09037280082702637}",1,Compute: 72244586485002161225924662493432 - 68443128862157357256060732277405
108,mul,32,7830170875455161743273441117835957757076004407316250104758005550,7814399999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,78015227713422423987544755604950,0,"{'ok': True, 'value': 8165337131962725650760742628697551922816492044986593855471057550, 'stdout': '8165337131962725650760742628697551922816492044986593855471057550\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10161399841308594}",0,Compute: 82671480636517881880595075604950 * 94714293431880260329146878486789
109,add,16,13417907913912034,0,0,1341770383703950,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08418631553649902}",0,Compute: 5047561747993950 + 8370346165918084
110,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09514307975769043}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 90, 73, 80, 20, 51, 5, 53, 8, 17, 92, 76, 53, 62, 36, 55, 5, 58, 8, 52, 11, 74, 10, 72]"
111,mul,2,4592,4592,1,4592,1,"{'ok': True, 'value': 4592, 'stdout': '4592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09086799621582031}",1,Compute: 56 * 82
112,knap,4,22,14,0,15,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1033482551574707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 3, 2]
V = [8, 7, 10, 14]
C = 4"
113,add,4,7531,7531,1,7531,1,"{'ok': True, 'value': 7531, 'stdout': '7531\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09445834159851074}",1,Compute: 5408 + 2123
114,lcs,4,3,2,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11104822158813477}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccca""
T = ""abccc"""
115,ilp_assign,8,30,102,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 11, 22, 24, 12, 15, 24], [7, 13, 15, 3, 13, 12, 1], [10, 7, 19, 12, 12, 21, 1], [4, 15, 13, 10, 23, 6, 10], [24, 21, 8, 24, 11, 11, 7], [2, 2, 1, 23, 6, 20, 15], [11, 23, 2, 9, 19, 17, 9]]"
116,rod,16,592,105,0,105,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10119915008544922}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [37, 39, 31, 2, 25, 37, 35, 25, 16, 48, 34, 10, 36, 7, 27, 36]"
117,lcs,4,2,13,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08469367027282715}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdaa""
T = ""adcac"""
118,ilp_assign,2,5,2,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9jfa1r7v/main.py"", line 59, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_9jfa1r7v/main.py"", line 53, in hungarian_algorithm\n    uncover_rows()\n  File ""/tmp/cot_exec_9jfa1r7v/main.py"", line 41, in uncover_rows\n    cost_matrix[i][j] += min_cost\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21527719497680664}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5], [1, 3]]"
119,ilp_prod,4,55,51,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_e27mt260/main.py"", line 8\n    tableau[i][i] = -consumption[i][j] for j in range(n)\n                                       ^^^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0844879150390625}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 11, 4]
consumption (rows=resources) = [[3, 1, 4], [4, 2, 4], [1, 2, 4]]
capacity = [10, 10, 13]
upper_bounds = [3, 5, 3]"
120,ilp_assign,32,103,120,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 87, 84, 86, 29, 5, 57], [43, 93, 67, 38, 26, 4, 27], [74, 48, 44, 83, 64, 74, 91], [45, 14, 68, 7, 13, 53, 54], [94, 4, 26, 49, 12, 70, 72], [60, 56, 15, 81, 27, 91, 9], [33, 13, 86, 75, 89, 23, 7]]"
121,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10392451286315918}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""bc"""
122,add,16,2984896383479876,3000000000000000,0,3004896383479876,0,"{'ok': True, 'value': 2984896383479876, 'stdout': '2984896383479876\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09519505500793457}",1,Compute: 1601069347944902 + 1383827035534974
123,add,4,11042,11042,1,11042,1,"{'ok': True, 'value': 11042, 'stdout': '11042\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08362388610839844}",1,Compute: 6400 + 4642
124,add,8,115555045,115554045,0,114554045,0,"{'ok': True, 'value': 115555045, 'stdout': '115555045\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09484624862670898}",1,Compute: 52398134 + 63156911
125,knap,4,27,43,0,23,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10519623756408691}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 7, 5, 7]
V = [11, 16, 7, 16]
C = 12"
126,ilp_prod,4,70,72,0,34,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_rrldmpld/main.py"", line 8\n    tableau[i][i] = -consumption[i][j] for j in range(n)\n                                       ^^^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08562421798706055}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 3, 10]
consumption (rows=resources) = [[1, 4, 2], [4, 3, 2], [1, 1, 1]]
capacity = [14, 15, 11]
upper_bounds = [3, 3, 7]"
127,knap,8,76,52,0,43,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09630537033081055}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 2, 7, 6, 2, 4, 2, 4]
V = [20, 13, 11, 10, 15, 14, 6, 23]
C = 19"
128,lcs,32,19,16,0,14,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09308719635009766}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabbadccaacddddacaabdbcddcddddac""
T = ""cdabaadbcbadabdbadabccabbadbdcbc"""
129,sub,8,10928803,10928803,1,10928793,0,"{'ok': True, 'value': 10928803, 'stdout': '10928803\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10213923454284668}",1,Compute: 31624459 - 20695656
130,knap,2,9,9,1,11,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08845663070678711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 5]
V = [9, 2, 8]
C = 5"
131,add,2,139,139,1,139,1,"{'ok': True, 'value': 139, 'stdout': '139\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11000728607177734}",1,Compute: 66 + 73
132,add,8,114913665,114913665,1,114913665,1,"{'ok': True, 'value': 114913665, 'stdout': '114913665\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09508919715881348}",1,Compute: 56966029 + 57947636
133,sub,8,2287902,23287902,0,2292902,0,"{'ok': True, 'value': 2287902, 'stdout': '2287902\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11191177368164062}",1,Compute: 30432936 - 28145034
134,mul,2,2852,2852,1,2852,1,"{'ok': True, 'value': 2852, 'stdout': '2852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0964059829711914}",1,Compute: 92 * 31
135,lcs,8,2,6,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10653567314147949}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcbcbbb""
T = ""dbaadad"""
136,ilp_partition,16,0,17,0,132,0,"{'ok': True, 'value': 89, 'stdout': '89\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09204673767089844}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 26, 15, 11, 27, 11, 36, 35, 22, 16, 14, 10, 19, 46, 43, 5]"
137,mul,8,683891537821625,6842186666625,0,687157625000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.043060541152954}",0,Compute: 16637525 * 41105365
138,ilp_prod,32,336,0,0,390,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_61qro7dp/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.220245361328125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [90, 6, 55, 66, 25, 40]
consumption (rows=resources) = [[18, 11, 32, 23, 16, 17], [15, 22, 14, 30, 4, 18], [23, 32, 13, 14, 28, 12], [21, 31, 2, 29, 28, 17]]
capacity = [89, 107, 86, 120]
upper_bounds = [3, 3, 3, 3, 3, 5]"
139,add,16,7176296682273912,7176293681884792,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09287834167480469}",0,Compute: 4342581701622359 + 2833714980651553
140,mul,2,2765,2765,1,2765,1,"{'ok': True, 'value': 2765, 'stdout': '2765\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08452391624450684}",1,Compute: 35 * 79
141,sub,4,2980,2980,1,2980,1,"{'ok': True, 'value': 2980, 'stdout': '2980\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10074567794799805}",1,Compute: 4548 - 1568
142,ilp_prod,4,23,22,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_7vm8azgm/main.py"", line 8\n    tableau[i][i] = -consumption[i][j] for j in range(n)\n                                       ^^^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0950784683227539}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 3, 9]
consumption (rows=resources) = [[3, 3, 2], [3, 1, 3], [4, 4, 1]]
capacity = [9, 8, 16]
upper_bounds = [3, 3, 3]"
143,add,8,151876016,156376546,0,151876016,1,"{'ok': True, 'value': 151876016, 'stdout': '151876016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10317206382751465}",1,Compute: 73258877 + 78617139
144,lcs,4,2,2,1,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11441206932067871}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babc""
T = ""acdb"""
145,lcs,16,7,10,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10431218147277832}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdddcabbabaccaac""
T = ""ccabdbdbbadadbb"""
146,sub,8,2360956,23599656,0,1960966,0,"{'ok': True, 'value': 2360956, 'stdout': '2360956\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0936281681060791}",1,Compute: 96556300 - 94195344
147,mul,8,2374390857492378,2391639999997998,0,2371999999998,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0484399795532227}",0,Compute: 39898258 * 59511141
148,lcs,4,1,3,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13650107383728027}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badc""
T = ""ccc"""
149,ilp_assign,8,33,0,0,22,0,"{'ok': True, 'value': -5, 'stdout': '-5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22655034065246582}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 20, 20, 21, 3, 7, 14], [12, 17, 24, 16, 12, 23, 4], [15, 11, 1, 8, 10, 14, 22], [22, 5, 7, 9, 23, 17, 20], [2, 6, 19, 10, 2, 22, 4], [9, 21, 19, 4, 6, 23, 21], [18, 15, 19, 8, 15, 14, 2]]"
150,sub,4,1178,1178,1,1178,1,"{'ok': True, 'value': 1178, 'stdout': '1178\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09485077857971191}",1,Compute: 8369 - 7191
151,knap,16,419,150,0,150,0,"{'ok': True, 'value': 419, 'stdout': '419\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10590481758117676}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 29, 28, 20, 24, 21, 17, 15, 30, 26, 22, 3, 14, 7, 9, 16]
V = [46, 19, 58, 52, 33, 2, 54, 41, 19, 41, 9, 27, 50, 27, 52, 12]
C = 150"
152,mul{'ok': True, 'value': 9829623803912025909030487768905, 'stdout': '9829623803912025909030487768905\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10156393051147461}",1,Compute: 8943848563493295 * 1099037370113159
153,ilp_assign,32,119,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[73, 23, 42, 6, 31, 9, 39], [72, 14, 63, 63, 46, 26, 73], [54, 26, 29, 84, 75, 90, 23], [31, 59, 27, 6, 75, 88, 82], [25, 83, 77, 47, 32, 26, 90], [65, 19, 25, 74, 87, 94, 4], [35, 11, 3, 91, 71, 91, 77]]"
154,lcs,16,9,10,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10770964622497559}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccddaacdddbcbccb""
T = ""adccabbcdcaadbddb"""
155,add,16,8645397395541355,,0,864539642510275,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10497546195983887}",0,Compute: 6764642396441078 + 1880754999100277
156,ilp_prod,8,33,100,0,70,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8c096ux3/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1715230941772461}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 6, 10, 6]
consumption (rows=resources) = [[7, 7, 3, 2], [8, 4, 3, 4], [5, 6, 6, 6], [5, 3, 1, 4]]
capacity = [24, 31, 16, 26]
upper_bounds = [3, 3, 3, 3]"
157,sub,8,19433447,19433447,1,19433447,1,"{'ok': True, 'value': 19433447, 'stdout': '19433447\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10178589820861816}",1,Compute: 35724655 - 16291208
158,rod,8,128,127,0,32,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_cnn44yv4/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_cnn44yv4/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11107373237609863}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 17, 3, 23, 2, 5, 18, 14]"
159,rod,2,6,6,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_r8twgjja/main.py"", line 10, in <module>\n    print(max_revenue(N, P))\n  File ""/tmp/cot_exec_r8twgjja/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10845398902893066}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 2]"
160,add,8,136178691,136671711,0,136178691,1,"{'ok': True, 'value': 136178691, 'stdout': '136178691\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0960392951965332}",1,Compute: 64929513 + 71249178
161,knap,8,77,58,0,58,0,"{'ok': True, 'value': 77, 'stdout': '77\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11093997955322266}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 14, 13, 1, 16, 5, 13, 16]
V = [15, 2, 25, 4, 27, 6, 16, 3]
C = 40"
162,mul,2,6156,6156,1,6156,1,"{'ok': True, 'value': 6156, 'stdout': '6156\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09249162673950195}",1,Compute: 76 * 81
163,add,4,12233,12333,0,12233,1,"{'ok': True, 'value': 12233, 'stdout': '12233\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09225940704345703}",1,Compute: 4802 + 7431
164,ilp_assign,2,11,11,1,11,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.053229570388794}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [6, 6]]"
165,mul,8,5625956484173652,7490000000000000,0,567357317212,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.033620595932007}",0,Compute: 82736214 * 67998718
166,ilp_prod,16,156,150,0,125,0,"{'ok': True, 'value': 156, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b52c621f5c154eb88ef761739586d748-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b52c621f5c154eb88ef761739586d748-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 162.5 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -156 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -162 to -162 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -156, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -162 to -162\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                156.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n156.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17113518714904785}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 15, 25, 7, 27, 39]
consumption (rows=resources) = [[7, 11, 13, 10, 6, 10], [10, 9, 12, 8, 8, 4], [13, 5, 12, 10, 12, 12], [2, 2, 3, 14, 11, 12]]
capacity = [47, 51, 50, 56]
upper_bounds = [3, 4, 3, 4, 4, 4]"
167,rod,8,76,110,0,32,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11065125465393066}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 19, 15, 22, 4, 22, 13, 8]"
168,ilp_assign,16,60,120,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 14, 24, 40, 44, 46, 5], [30, 30, 22, 44, 19, 22, 44], [34, 2, 33, 6, 9, 11, 2], [2, 16, 14, 45, 44, 47, 47], [28, 20, 41, 12, 7, 25, 34], [34, 1, 40, 13, 5, 14, 11], [21, 14, 47, 21, 15, 17, 23]]"
169,mul,8,3567438490316498,3570781555587098,0,355157717777778,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0583105087280273}",0,Compute: 77935399 * 45774302
170,ilp_partition,2,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13244915008544922}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 4, 6]"
171,lcs,32,14,16,0,0,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09607243537902832}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbadabbbaacbacacdaaadabbacdbbcd""
T = ""bccddccdcaaccbdddddabbdbaadddcc"""
172,rod,8,46,112,0,32,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__px4ce3p/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec__px4ce3p/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09782147407531738}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 4, 2, 23, 19, 14, 16, 6]"
173,rod,16,264,113,0,100,0,"{'ok': True, 'value': 264, 'stdout': '264\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09533834457397461}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [13, 33, 22, 18, 41, 37, 14, 31, 36, 10, 29, 3, 25, 33, 26, 26]"
174,rod,2,12,6,0,6,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09339737892150879}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 3]"
175,lcs,8,5,2,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09587883949279785}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbadbdb""
T = ""cbacbbbd"""
176,lcs,32,20,15,0,13,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10004115104675293}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdacbbaddabbcddbacdbcbbddbdabdb""
T = ""aaabbdbdacddcbdaaccddcacbaaabdcd"""
177,knap,32,1663,568,0,568,0,"{'ok': True, 'value': 1663, 'stdout': '1663\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09016633033752441}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 34, 4, 47, 12, 41, 54, 45, 61, 56, 33, 11, 37, 61, 63, 59, 30, 60, 39, 38, 17, 50, 8, 13, 26, 64, 32, 4, 54, 39, 23, 18]
V = [84, 9, 61, 93, 96, 32, 65, 87, 108, 15, 29, 59, 42, 101, 4, 56, 92, 63, 22, 51, 56, 126, 33, 106, 7, 96, 109, 28, 35, 127, 111, 83]
C = 568"
178,add,32,81159662412031649794469726843211,1,0,198432723799623523624996277087111,0,"{'ok': True, 'value': 81159662412031649794469726843211, 'stdout': '81159662412031649794469726843211\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09875249862670898}",1,Compute: 13030341265394552592160747804882 + 68129321146637097202308979038329
179,add,4,9096,9096,1,9096,1,"{'ok': True, 'value': 9096, 'stdout': '9096\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10094857215881348}",1,Compute: 1500 + 7596
180,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10478401184082031}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 10, 1, 9]"
181,ilp_assign,8,33,100,0,0,0,"{'ok': True, 'value': -6, 'stdout': '-6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2259845733642578}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 7, 9, 6, 24, 11, 8], [6, 21, 21, 2, 20, 8, 13], [9, 9, 7, 21, 9, 13, 2], [2, 5, 24, 16, 14, 10, 12], [13, 12, 20, 7, 10, 9, 9], [16, 20, 5, 19, 12, 5, 13], [2, 3, 9, 3, 16, 7, 15]]"
182,ilp_assign,4,12,20,0,20,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2231738567352295}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 2, 6, 6], [6, 9, 1, 11], [6, 10, 2, 8], [11, 2, 9, 8]]"
183,ilp_assign,8,40,100,0,45,0,"{'ok': True, 'value': -5, 'stdout': '-5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22329044342041016}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 16, 8, 7, 3, 22, 5], [8, 7, 20, 20, 23, 5, 18], [9, 3, 19, 12, 3, 12, 17], [9, 6, 22, 19, 16, 14, 18], [19, 23, 18, 8, 5, 18, 19], [4, 14, 24, 14, 12, 8, 15], [22, 18, 13, 11, 22, 19, 6]]"
184,ilp_prod,16,148,120,0,194,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_0l9sg8s2/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16803693771362305}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 17, 42, 46, 4, 30]
consumption (rows=resources) = [[1, 2, 6, 1, 15, 14], [5, 12, 13, 8, 16, 9], [4, 10, 1, 10, 2, 10], [2, 3, 12, 12, 4, 15]]
capacity = [49, 34, 35, 49]
upper_bounds = [6, 3, 3, 3, 3, 3]"
185,ilp_assign,2,6,0,0,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_w7rki62q/main.py"", line 59, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_w7rki62q/main.py"", line 53, in hungarian_algorithm\n    uncover_rows()\n  File ""/tmp/cot_exec_w7rki62q/main.py"", line 41, in uncover_rows\n    cost_matrix[i][j] += min_cost\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20913052558898926}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5], [3, 4]]"
186,ilp_partition,8,1,0,0,77,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08662962913513184}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 18, 4, 10, 17, 4, 7, 15]"
187,ilp_prod,8,95,66,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_52cxoali/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15259218215942383}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 23, 24, 7]
consumption (rows=resources) = [[1, 6, 8, 2], [7, 3, 5, 2], [6, 5, 4, 6], [3, 4, 1, 4]]
capacity = [31, 27, 20, 29]
upper_bounds = [3, 4, 3, 3]"
188,knap,16,430,150,0,136,0,"{'ok': True, 'value': 430, 'stdout': '430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09531641006469727}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 6, 31, 17, 20, 2, 22, 25, 16, 28, 10, 29, 5, 31, 17, 27]
V = [9, 16, 50, 16, 35, 49, 5, 12, 45, 10, 51, 61, 62, 21, 52, 6]
C = 147"
189,rod,16,224,113,0,108,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09847569465637207}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [11, 28, 35, 16, 18, 23, 41, 39, 35, 13, 19, 38, 16, 7, 35, 3]"
190,ilp_partition,8,1,1,1,9,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10243868827819824}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 6, 1, 20, 11, 1, 5, 9]"
191,ilp_prod,32,508,1533,0,345,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.37883782386779785}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [90, 79, 42, 96, 79, 32]
consumption (rows=resources) = [[25, 4, 20, 25, 7, 27], [1, 19, 2, 18, 4, 18], [14, 25, 25, 28, 16, 24], [15, 6, 2, 7, 21, 13]]
capacity = [90, 84, 121, 109]
upper_bounds = [3, 4, 4, 3, 5, 3]"
192,sub,2,27,27,1,27,1,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1071014404296875}",1,Compute: 52 - 25
193,lcs,16,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09449958801269531}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddcacaacabbadab""
T = ""dadccbddadcaacbd"""
194,lcs,8,4,6,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09020638465881348}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcbcccc""
T = ""dacbcaad"""
195,rod,32,990,1000,0,487,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10880422592163086}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [30, 37, 93, 47, 13, 91, 30, 33, 15, 62, 54, 51, 79, 48, 70, 46, 74, 60, 96, 88, 35, 54, 31, 68, 48, 74, 80, 76, 24, 22, 22, 91]"
196,lcs,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10826301574707031}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""cdd"""
197,knap,2,9,7,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12961626052856445}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 5]
V = [3, 6, 7]
C = 5"
198,add,4,14055,14055,1,14055,1,"{'ok': True, 'value': 14055, 'stdout': '14055\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12395548820495605}",1,Compute: 9652 + 4403
199,mul{'ok': True, 'value': 5030305145664578092506431027008, 'stdout': '5030305145664578092506431027008\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10187530517578125}",1,Compute: 2006941082316197 * 2506453821683264
200,add,2,63,63,1,63,1,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09528446197509766}",1,Compute: 50 + 13
201,ilp_partition,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09329485893249512}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 9, 6, 6]"
202,ilp_assign,16,60,123,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[29, 8, 47, 31, 45, 23, 18], [8, 21, 25, 8, 11, 34, 48], [35, 29, 47, 33, 6, 32, 22], [37, 8, 21, 7, 7, 36, 16], [32, 16, 32, 22, 3, 11, 4], [1, 28, 44, 22, 20, 36, 40], [48, 16, 23, 10, 44, 48, 5]]"
203,ilp_assign,2,8,,0,8,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6o41260z/main.py"", line 59, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_6o41260z/main.py"", line 53, in hungarian_algorithm\n    uncover_rows()\n  File ""/tmp/cot_exec_6o41260z/main.py"", line 41, in uncover_rows\n    cost_matrix[i][j] += min_cost\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2177727222442627}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [5, 3]]"
204,lcs,4,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09551882743835449}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacd""
T = ""caaa"""
205,knap,16,401,233,0,138,0,"{'ok': True, 'value': 401, 'stdout': '401\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10553526878356934}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 24, 7, 25, 19, 24, 21, 12, 27, 16, 13, 5, 15, 6, 17, 27]
V = [29, 64, 33, 5, 51, 45, 52, 60, 54, 27, 7, 37, 30, 20, 19, 44]
C = 144"
206,ilp_partition,8,0,1,0,16,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1079864501953125}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 15, 21, 22, 2, 12, 23, 8]"
207,add,4,11194,11204,0,11194,1,"{'ok': True, 'value': 11194, 'stdout': '11194\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10550236701965332}",1,Compute: 9380 + 1814
208,sub,8,53557431,0,0,53557431,1,"{'ok': True, 'value': 53557431, 'stdout': '53557431\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10175180435180664}",1,Compute: 83622331 - 30064900
209,mul,4,9324882,9321482,0,9309302,0,"{'ok': True, 'value': 9324882, 'stdout': '9324882\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10514450073242188}",1,Compute: 1701 * 5482
210,rod,4,44,19,0,17,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09712982177734375}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 3, 3, 2]"
211,ilp_prod,32,484,1234,0,303,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_f4d_zwtj/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18300342559814453}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [83, 30, 69, 28, 44, 11]
consumption (rows=resources) = [[4, 14, 20, 11, 12, 19], [2, 10, 17, 4, 16, 1], [19, 6, 5, 20, 15, 30], [9, 29, 25, 7, 8, 5]]
capacity = [67, 66, 102, 73]
upper_bounds = [5, 3, 3, 5, 4, 3]"
212,sub,32,57359307593563369593482945879041,1,0,57360305593513069593482945879941,0,"{'ok': True, 'value': 57359307593563369593482945879041, 'stdout': '57359307593563369593482945879041\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09457683563232422}",1,Compute: 95719005523512399740259282080046 - 38359697929949030146776336201005
213,lcs,2,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09991097450256348}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""b"""
214,sub,32,11154786250194558126706046803429,1,0,114607263132894574338885466913729,0,"{'ok': True, 'value': 11154786250194558126706046803429, 'stdout': '11154786250194558126706046803429\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09219598770141602}",1,Compute: 74772499653633402923574902256255 - 63617713403438844796868855452826
215,add,16,9530515019865274,9530515000000000,0,9530515020465274,0,"{'ok': True, 'value': 9530515019865274, 'stdout': '9530515019865274\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09411430358886719}",1,Compute: 2241113377178652 + 7289401642686622
216,mul,4,23643464,23641464,0,23547024,0,"{'ok': True, 'value': 23643464, 'stdout': '23643464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08539271354675293}",1,Compute: 2924 * 8086
217,sub,8,19904543,19904543,1,19904543,1,"{'ok': True, 'value': 19904543, 'stdout': '19904543\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11135411262512207}",1,Compute: 77592384 - 57687841
218,ilp_prod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.3707287311553955}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3]
consumption (rows=resources) = [[3, 3], [3, 2]]
capacity = [7, 7]
upper_bounds = [3, 3]"
219,lcs,16,7,7,1,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09716439247131348}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcdadcabdabdadb""
T = ""aaaacacddaddcdd"""
220,ilp_prod,16,241,222,0,203,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ikm8p12z/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17540955543518066}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [40, 20, 45, 40, 26, 47]
consumption (rows=resources) = [[3, 4, 11, 6, 12, 13], [15, 6, 6, 14, 16, 7], [1, 6, 7, 6, 3, 1], [3, 7, 15, 9, 2, 13]]
capacity = [49, 58, 47, 60]
upper_bounds = [3, 7, 4, 4, 3, 3]"
221,sub,16,3458751286353599,3458751286353600,0,3458751286353609,0,"{'ok': True, 'value': 3458751286353599, 'stdout': '3458751286353599\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09555482864379883}",1,Compute: 8558205190481062 - 5099453904127463
222,ilp_partition,8,0,1,0,6,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09456753730773926}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 8, 19, 20, 15, 4, 1, 7]"
223,rod,32,1424,580,0,500,0,"{'ok': True, 'value': 1424, 'stdout': '1424\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10198760032653809}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [30, 89, 51, 15, 56, 42, 8, 33, 67, 15, 25, 20, 5, 52, 33, 88, 54, 78, 21, 72, 17, 35, 74, 3, 67, 46, 47, 10, 58, 24, 80, 50]"
224,lcs,2,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10106205940246582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""a"""
225,sub,16,719855530956196,,0,7197555530956196,0,"{'ok': True, 'value': 719855530956196, 'stdout': '719855530956196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09313035011291504}",1,Compute: 9745211027247018 - 9025355496290822
226,mul,4,31786368,32622813,0,31846888,0,"{'ok': True, 'value': 31786368, 'stdout': '31786368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09554529190063477}",1,Compute: 4209 * 7552
227,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09464430809020996}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcc""
T = ""ddabd"""
228,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09335184097290039}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbacacba""
T = ""adcaddc"""
229,ilp_assign,16,64,120,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[41, 13, 3, 12, 46, 23, 28], [44, 17, 14, 11, 14, 26, 34], [12, 12, 16, 30, 10, 40, 40], [40, 19, 37, 21, 11, 44, 21], [35, 37, 40, 19, 16, 13, 11], [19, 3, 10, 9, 2, 28, 4], [23, 46, 29, 10, 28, 14, 11]]"
230,ilp_assign,32,117,120,0,165,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0571842193603516}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 60, 58, 30, 86, 58, 1], [55, 38, 84, 36, 8, 5, 28], [55, 35, 31, 88, 57, 45, 43], [53, 38, 67, 87, 1, 35, 24], [36, 1, 85, 10, 19, 84, 21], [95, 61, 75, 80, 14, 39, 36], [51, 80, 42, 16, 12, 76, 82]]"
231,ilp_assign,2,9,0,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_rd3bv4_m/main.py"", line 59, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_rd3bv4_m/main.py"", line 53, in hungarian_algorithm\n    uncover_rows()\n  File ""/tmp/cot_exec_rd3bv4_m/main.py"", line 41, in uncover_rows\n    cost_matrix[i][j] += min_cost\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21407723426818848}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [6, 4]]"
232,knap,8,92,58,0,52,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08449125289916992}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 12, 8, 11, 8, 8, 7, 10]
V = [20, 21, 20, 1, 31, 17, 15, 10]
C = 35"
233,sub,32,5636220822535571768179461159534,6,0,55636230822535571778174381164534,0,"{'ok': True, 'value': 5636220822535571768179461159534, 'stdout': '5636220822535571768179461159534\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11482381820678711}",1,Compute: 67880567201898476444830435465310 - 62244346379362904676650974305776
234,ilp_assign,32,125,10,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[83, 22, 70, 58, 92, 32, 85], [4, 50, 4, 94, 27, 22, 87], [17, 58, 82, 76, 67, 28, 93], [94, 95, 38, 58, 71, 24, 67], [26, 36, 23, 22, 66, 68, 10], [3, 67, 50, 34, 4, 24, 38], [68, 36, 80, 54, 73, 10, 46]]"
235,ilp_partition,4,2,0,0,0,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11177444458007812}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 11, 3, 2]"
236,mul,8,5486179546424830,556800000000000,0,5479999999990,0,"{'ok': True, 'value': 5486179546424830, 'stdout': '5486179546424830\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09295845031738281}",1,Compute: 85609534 * 64083745
237,ilp_partition,32,0,10,0,75,0,"{'ok': True, 'value': 182, 'stdout': '182\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09334254264831543}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 80, 78, 53, 23, 62, 8, 11, 56, 53, 13, 81, 95, 37, 5, 87, 28, 7, 75, 5, 80, 23, 72, 51]"
238,knap,4,17,17,1,11,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09357476234436035}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 1, 1, 5]
V = [8, 3, 8, 9]
C = 6"
239,ilp_prod,2,15,18,0,12,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.3902096748352051}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[2, 2], [3, 2]]
capacity = [7, 10]
upper_bounds = [3, 3]"
240,rod,4,36,24,0,13,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11507749557495117}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 1, 5, 9]"
241,rod,32,2400,512,0,443,0,"{'ok': True, 'value': 2400, 'stdout': '2400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11358976364135742}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [75, 62, 75, 67, 77, 36, 67, 11, 85, 45, 41, 95, 81, 51, 9, 76, 2, 23, 5, 10, 18, 51, 58, 44, 29, 14, 30, 19, 74, 82, 6, 43]"
242,sub,16,4842987405603374,4842987435603374,0,4843087435603374,0,"{'ok': True, 'value': 4842987405603374, 'stdout': '4842987405603374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10083723068237305}",1,Compute: 6398968135533186 - 1555980729929812
243,knap,16,356,135,0,126,0,"{'ok': True, 'value': 356, 'stdout': '356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11418700218200684}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 28, 15, 32, 24, 17, 16, 5, 17, 19, 3, 19, 31, 31, 11, 6]
V = [26, 7, 44, 37, 9, 29, 22, 19, 56, 41, 26, 60, 24, 1, 26, 7]
C = 143"
244,knap,16,384,189,0,165,0,"{'ok': True, 'value': 384, 'stdout': '384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10010719299316406}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 23, 29, 21, 12, 14, 29, 14, 13, 25, 22, 29, 18, 18, 11, 20]
V = [12, 10, 62, 32, 13, 64, 16, 58, 22, 15, 42, 49, 29, 13, 58, 30]
C = 149"
245,ilp_prod,16,78,315,0,140,0,"{'ok': True, 'value': 78, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8b444ca9d57d4c968616936bf33ede31-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8b444ca9d57d4c968616936bf33ede31-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 64 RHS\nAt line 75 BOUNDS\nAt line 82 ENDATA\nProblem MODEL has 10 rows, 6 columns and 30 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 113.75 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -78 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -111.91667 to -78 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -78, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -111.917 to -78\nProbing was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                78.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n78.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18014216423034668}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 39, 38, 14, 3, 37]
consumption (rows=resources) = [[12, 10, 6, 1, 16, 6], [12, 12, 14, 16, 16, 12], [14, 4, 3, 4, 8, 11], [7, 2, 2, 12, 8, 14]]
capacity = [56, 35, 35, 59]
upper_bounds = [3, 3, 3, 3, 3, 3]"
246,knap,4,18,0,0,22,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12084245681762695}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 5, 1, 8]
V = [10, 4, 8, 9]
C = 10"
247,add,32,62037486342172802755471015629953,0,0,62037486342172792755467235400653,0,"{'ok': True, 'value': 62037486342172802755471015629953, 'stdout': '62037486342172802755471015629953\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10008454322814941}",1,Compute: 20170313328112443402446293945055 + 41867173014060359353024721684898
248,ilp_assign,4,20,20,1,25,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0643463134765625}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 10, 8, 3], [5, 11, 9, 5], [10, 7, 10, 9], [5, 5, 5, 1]]"
249,add,2,108,108,1,108,1,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11597132682800293}",1,Compute: 85 + 23
250,ilp_partition,32,0,424,0,10,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10631632804870605}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 29, 27, 15, 42, 48, 72, 84, 77, 66, 46, 38, 96, 10, 95, 48, 20, 85, 68, 7, 9, 60, 69, 66]"
251,lcs,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0910799503326416}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""dbd"""
252,add,32,121617340448265247105045968297633,0,0,121617330451325220115046270291633,0,"{'ok': True, 'value': 121617340448265247105045968297633, 'stdout': '121617340448265247105045968297633\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10569238662719727}",1,Compute: 50933057267336838999919711810495 + 70684283180928408105126256487138
253,knap,4,13,15,0,15,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09985923767089844}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 6, 4, 5]
V = [2, 12, 1, 3]
C = 10"
254,lcs,32,17,16,0,11,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09514999389648438}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaccdabbbbdbbdcdbdaaababccaddbac""
T = ""cbcdbccacdabbacbdcababacbbabbbbbb"""
255,ilp_assign,4,18,28,0,25,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22334837913513184}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1, 6, 7], [9, 6, 9, 8], [6, 10, 2, 10], [11, 5, 9, 11]]"
256,knap,2,9,9,1,11,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11409282684326172}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 2]
V = [9, 4, 5]
C = 4"
257,lcs,8,2,3,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09746026992797852}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcaccdbc""
T = ""dcbbbda"""
258,knap,32,1582,495,0,444,0,"{'ok': True, 'value': 1582, 'stdout': '1582\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08848190307617188}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [48, 11, 8, 16, 19, 20, 3, 33, 29, 25, 10, 45, 53, 45, 64, 50, 25, 35, 25, 53, 31, 49, 28, 13, 42, 22, 52, 31, 41, 48, 5, 27]
V = [42, 83, 78, 117, 26, 4, 48, 95, 52, 41, 72, 42, 29, 49, 97, 111, 80, 53, 17, 73, 128, 119, 59, 13, 67, 84, 101, 40, 87, 85, 116, 44]
C = 503"
259,lcs,32,18,16,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10482573509216309}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbccccacbdbdbbdacdadadbdabccccbd""
T = ""cbcddcbbbbbcaacbbcbbbddabbbddbc"""
260,rod,4,32,10,0,19,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0968635082244873}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 10, 7, 9]"
261,knap,32,1649,486,0,486,0,"{'ok': True, 'value': 1649, 'stdout': '1649\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09682154655456543}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [55, 48, 39, 3, 49, 11, 35, 18, 62, 1, 39, 23, 47, 21, 10, 35, 1, 17, 44, 47, 20, 15, 26, 58, 36, 27, 27, 58, 26, 10, 12, 53]
V = [105, 111, 118, 45, 128, 67, 28, 52, 78, 25, 96, 80, 89, 24, 2, 55, 82, 25, 55, 116, 103, 99, 52, 64, 112, 110, 33, 91, 71, 93, 32, 12]
C = 486"
262,add,16,15291910673571325,,0,14291891267088524,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0969851016998291}",0,Compute: 8927691267088524 + 6364219406482801
263,knap,2,8,11,0,11,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08594131469726562}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 3]
V = [8, 7, 6]
C = 5"
264,ilp_partition,16,1,1,1,114,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10258769989013672}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 8, 2, 45, 20, 41, 18, 45, 7, 9, 24, 29, 28, 22, 46, 4]"
265,add,2,25,25,1,25,1,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08429527282714844}",1,Compute: 12 + 13
266,lcs,16,10,10,1,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1088869571685791}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbcdcaaacbacbaa""
T = ""cbacddcabbcacbc"""
267,ilp_prod,16,190,194,0,124,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.3546905517578125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [41, 23, 38, 15, 10, 24]
consumption (rows=resources) = [[16, 7, 10, 2, 7, 6], [11, 7, 7, 14, 4, 11], [9, 6, 1, 10, 13, 13], [13, 3, 11, 11, 5, 9]]
capacity = [49, 60, 42, 61]
upper_bounds = [3, 7, 4, 4, 3, 3]"
268,sub,2,19,19,1,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09392118453979492}",1,Compute: 94 - 75
269,ilp_assign,16,62,110,0,10,0,"{'ok': True, 'value': -5, 'stdout': '-5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19864654541015625}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 37, 46, 7, 21, 11, 35], [41, 30, 43, 32, 2, 35, 31], [5, 1, 30, 21, 37, 23, 23], [27, 10, 46, 8, 7, 30, 43], [21, 11, 42, 5, 25, 2, 33], [29, 1, 43, 39, 9, 19, 18], [20, 4, 31, 31, 4, 37, 10]]"
270,ilp_assign,32,82,192,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[74, 2, 51, 7, 57, 9, 58], [19, 40, 69, 77, 14, 86, 21], [94, 22, 10, 68, 83, 15, 90], [14, 20, 67, 93, 1, 64, 73], [13, 92, 95, 45, 79, 19, 87], [3, 65, 4, 42, 64, 75, 24], [77, 21, 64, 85, 16, 34, 21]]"
271,lcs,32,17,17,1,15,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0949239730834961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbccacbdadababbdbbbbcbaccaabaab""
T = ""cbabdadaabaaacddcdabbcddacddbdb"""
272,ilp_partition,32,1,10,0,1,1,"{'ok': True, 'value': 181, 'stdout': '181\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09535050392150879}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [52, 90, 91, 26, 73, 62, 18, 3, 23, 3, 44, 86, 50, 42, 51, 46, 49, 77, 68, 34, 78, 21, 60, 80]"
273,knap,2,13,12,0,9,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09386944770812988}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 1]
V = [7, 9, 6]
C = 3"
274,add,8,169494486,170597436,0,169494486,1,"{'ok': True, 'value': 169494486, 'stdout': '169494486\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08341002464294434}",1,Compute: 70970383 + 98524103
275,mul{'ok': True, 'value': 87618711859537663460013171219042, 'stdout': '87618711859537663460013171219042\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09102988243103027}",1,Compute: 9099388570954318 * 9629076852396519
276,mul{'ok': True, 'value': 536281097338787721078652149507582036171335768595312580978015356, 'stdout': '536281097338787721078652149507582036171335768595312580978015356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10416197776794434}",0,Compute: 33720032199312116732373501169383 * 23796262210955661711764913930951
277,lcs,16,8,10,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08760190010070801}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adacddaddacaccca""
T = ""abcabcdbadadcbd"""
278,mul,4,58511448,58469368,0,58446488,0,"{'ok': True, 'value': 58511448, 'stdout': '58511448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0896754264831543}",1,Compute: 6408 * 9131
279,add,8,131810239,131812099,0,131812239,0,"{'ok': True, 'value': 131810239, 'stdout': '131810239\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08533334732055664}",1,Compute: 75678926 + 56131313
280,rod,8,160,80,0,36,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_n1q24l7w/main.py"", line 14, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_n1q24l7w/main.py"", line 10, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09340643882751465}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 11, 5, 19, 6, 14, 22, 10]"
281,mul,8,395354988274155,299999999,0,394323000000,0,"{'ok': True, 'value': 395354988274155, 'stdout': '395354988274155\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.8453526496887207}",1,Compute: 10916157 * 36217415
282,lcs,4,2,2,1,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0863656997680664}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcd""
T = ""cad"""
283,lcs,32,18,16,0,12,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0879828929901123}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adadacddabcdbdddddbaabaadcbbdadd""
T = ""cbbdbdcbabbaadabdbdadcdddadadaad"""
284,ilp_assign,16,66,100,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 6, 42, 14, 11, 45, 20], [6, 6, 45, 14, 9, 48, 5], [29, 17, 24, 16, 10, 12, 38], [16, 28, 5, 24, 34, 35, 12], [4, 35, 44, 3, 18, 1, 36], [48, 38, 31, 27, 13, 38, 8], [23, 46, 22, 33, 33, 38, 48]]"
285,knap,2,10,12,0,12,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08501124382019043}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 2]
V = [10, 2, 5]
C = 6"
286,add,16,7209454519742655,0,0,3320000000000000,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09643864631652832}",0,Compute: 4324066182290364 + 2885388337452291
287,rod,4,32,12,0,25,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09388875961303711}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 6, 6, 5]"
288,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09252572059631348}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbd""
T = ""cccb"""
289,rod,2,8,8,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_hu_ffanx/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_hu_ffanx/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1013953685760498}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 1]"
290,ilp_partition,32,1,10,0,37,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09881472587585449}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 20, 50, 80, 59, 90, 61, 60, 73, 48, 34, 7, 61, 49, 50, 82, 49, 65, 83, 14, 81, 10, 62, 91]"
291,add,4,6933,6933,1,6933,1,"{'ok': True, 'value': 6933, 'stdout': '6933\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1063838005065918}",1,Compute: 3662 + 3271
292,rod,2,6,6,1,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_k69hk1sq/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_k69hk1sq/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08367562294006348}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 5]"
293,ilp_assign,4,14,17,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0904862880706787}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 7, 1, 5], [2, 11, 8, 2], [9, 4, 10, 12], [11, 12, 5, 7]]"
294,ilp_partition,2,0,2,0,2,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08644294738769531}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 1, 3]"
295,ilp_prod,8,144,108,0,102,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_wrz6hmo_/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21873760223388672}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 18, 9, 23]
consumption (rows=resources) = [[5, 1, 5, 5], [3, 5, 5, 8], [3, 7, 6, 6], [4, 5, 1, 5]]
capacity = [32, 25, 31, 25]
upper_bounds = [6, 4, 5, 3]"
296,mul{'ok': True, 'value': 50549265569716946104467912636271, 'stdout': '50549265569716946104467912636271\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10087728500366211}",1,Compute: 9251884190462377 * 5463672537300823
297,knap,8,104,71,0,63,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11111783981323242}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 6, 15, 15, 10, 6, 11, 13]
V = [27, 26, 31, 15, 20, 2, 5, 10]
C = 42"
298,add,32,117153438875807252436061295849037,10,0,117153398575707252456059295849037,0,"{'ok': True, 'value': 117153438875807252436061295849037, 'stdout': '117153438875807252436061295849037\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09828448295593262}",1,Compute: 90976168580036944056825401167813 + 26177270295770308379235894681224
299,ilp_assign,16,55,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 21, 46, 11, 10, 24, 16], [43, 38, 3, 46, 47, 27, 42], [11, 21, 38, 14, 41, 16, 31], [19, 18, 38, 42, 34, 33, 46], [37, 33, 31, 15, 11, 46, 5], [37, 16, 30, 9, 25, 11, 2], [45, 7, 48, 4, 3, 36, 4]]"
300,ilp_prod,8,64,197,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__vz0zhkf/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1755845546722412}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 8, 20, 19]
consumption (rows=resources) = [[3, 5, 7, 8], [5, 6, 8, 7], [7, 5, 4, 6], [4, 5, 1, 2]]
capacity = [24, 28, 21, 24]
upper_bounds = [3, 4, 3, 3]"
301,ilp_assign,2,7,7,1,4,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3121790885925293}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 5], [3, 6]]"
302,mul{'ok': True, 'value': 4093664287718041026150398624931480480351693160209901566318883116, 'stdout': '4093664287718041026150398624931480480351693160209901566318883116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10559320449829102}",0,Compute: 68373058569144908639309195862538 * 28574206081645789623000757427895
303,ilp_prod,32,196,215,0,197,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_mp30dxjc/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17621970176696777}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 49, 13, 10, 7, 19]
consumption (rows=resources) = [[19, 11, 14, 13, 9, 25], [26, 22, 28, 5, 26, 23], [10, 10, 8, 15, 21, 30], [25, 23, 15, 9, 12, 12]]
capacity = [98, 101, 94, 93]
upper_bounds = [3, 4, 3, 6, 3, 3]"
304,ilp_prod,8,57,100,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_v0t5qegz/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15366148948669434}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 21, 16, 7]
consumption (rows=resources) = [[6, 3, 8, 7], [3, 2, 7, 5], [7, 8, 1, 5], [3, 5, 7, 5]]
capacity = [19, 24, 16, 19]
upper_bounds = [3, 3, 3, 3]"
305,knap,32,1672,555,0,612,0,"{'ok': True, 'value': 1650, 'stdout': '1650\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10509037971496582}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [49, 37, 23, 22, 57, 40, 39, 3, 62, 61, 38, 47, 62, 41, 12, 11, 62, 23, 59, 55, 25, 43, 36, 18, 34, 50, 44, 2, 11, 57, 57, 45]
V = [125, 73, 100, 77, 30, 1, 13, 6, 37, 8, 68, 41, 11, 126, 112, 106, 82, 102, 56, 39, 7, 108, 88, 103, 60, 61, 55, 34, 125, 49, 87, 10]
C = 612"
306,ilp_prod,4,24,22,0,24,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_2c59fmiz/main.py"", line 8\n    tableau[i][i] = -consumption[i][j] for j in range(n)\n                                       ^^^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09281802177429199}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8, 8]
consumption (rows=resources) = [[2, 4, 4], [3, 4, 2], [4, 4, 4]]
capacity = [16, 9, 15]
upper_bounds = [3, 3, 3]"
307,lcs,16,8,10,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09510517120361328}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbbbbbbabddcdda""
T = ""bdcacabdcbdccaac"""
308,ilp_partition,16,0,10,0,32,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08502030372619629}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [27, 18, 29, 46, 26, 12, 9, 45, 28, 23, 46, 44, 24, 38, 24, 33]"
309,lcs,32,16,16,1,0,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08339595794677734}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbddcadbcdddddaacbcddacaacbbadcd""
T = ""ababbdccdcaaaaabaaaadcbbbddddaacb"""
310,ilp_prod,2,17,18,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.6133561134338379}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 4]
consumption (rows=resources) = [[2, 1], [1, 3]]
capacity = [8, 10]
upper_bounds = [4, 3]"
311,lcs,8,5,6,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09439516067504883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbddaba""
T = ""bbddaccb"""
312,mul{'ok': True, 'value': 7633427700837428290522657986035891047932122552143782116963608900, 'stdout': '7633427700837428290522657986035891047932122552143782116963608900\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09928464889526367}",0,Compute: 85610201472394645212978328020068 * 52401852273259635088852903946198
313,lcs,4,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08329367637634277}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbaa""
T = ""cdcc"""
314,rod,2,10,10,1,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_j96n0olr/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_j96n0olr/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08357954025268555}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 1]"
315,ilp_assign,2,5,3,0,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_qpm9am9b/main.py"", line 59, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_qpm9am9b/main.py"", line 53, in hungarian_algorithm\n    uncover_rows()\n  File ""/tmp/cot_exec_qpm9am9b/main.py"", line 41, in uncover_rows\n    cost_matrix[i][j] += min_cost\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2043895721435547}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [3, 3]]"
316,ilp_prod,8,79,72,0,103,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6o_4hbjo/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16532564163208008}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 19, 11, 24]
consumption (rows=resources) = [[5, 7, 2, 7], [8, 4, 2, 6], [3, 1, 7, 1], [5, 6, 1, 8]]
capacity = [26, 16, 26, 28]
upper_bounds = [3, 3, 3, 3]"
317,mul{'ok': True, 'value': 8429059567206373332201383971836, 'stdout': '8429059567206373332201383971836\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09515070915222168}",1,Compute: 3749862022013556 * 2247831924941131
318,ilp_partition,8,0,1,0,8,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09454536437988281}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 18, 9, 2, 7, 14, 11, 22]"
319,knap,2,10,6,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10484433174133301}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 4, 1]
V = [7, 3, 3]
C = 3"
320,lcs,16,9,8,0,12,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09503459930419922}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdddaccbcaabaac""
T = ""abddaddadaabbddc"""
321,add,32,163820857622690710128050977326088,1,0,163820837626690691128080737326088,0,"{'ok': True, 'value': 163820857622690710128050977326088, 'stdout': '163820857622690710128050977326088\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1023404598236084}",1,Compute: 76072242028719153345547339677275 + 87748615593971556782503637648813
322,mul,8,649232839818459,645125069333339,0,470942930,0,"{'ok': True, 'value': 649232839818459, 'stdout': '649232839818459\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09579849243164062}",1,Compute: 23038497 * 28180347
323,ilp_assign,2,4,0,0,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_oxkf_88s/main.py"", line 59, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_oxkf_88s/main.py"", line 53, in hungarian_algorithm\n    uncover_rows()\n  File ""/tmp/cot_exec_oxkf_88s/main.py"", line 41, in uncover_rows\n    cost_matrix[i][j] += min_cost\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22299599647521973}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [1, 1]]"
324,knap,8,76,0,0,52,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09638285636901855}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 9, 5, 13, 4, 16, 1, 16]
V = [20, 17, 19, 14, 9, 25, 3, 25]
C = 36"
325,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08372378349304199}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [32, 35, 13, 3, 26, 41, 23, 31, 33, 27, 15, 13, 41, 6, 1, 10]"
326,ilp_partition,4,0,2,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11411523818969727}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 2, 8, 4]"
327,mul,16,36974606690381541058077376107498,9328401026168217,0,36938442486261567726785442376000000000000,0,"{'ok': True, 'value': 28255408353591017934339646616166, 'stdout': '28255408353591017934339646616166\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08524894714355469}",0,Compute: 3963659643990394 * 9328401026168217
328,add,16,6863687935401456,4,0,6863689999999999,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09702539443969727}",0,Compute: 5425570227778207 + 1438117707623249
329,rod,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09372210502624512}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 5]"
330,ilp_prod,2,21,10,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_e2z_6nxg/main.py"", line 61, in <module>\n    max_profit = simplex(profit, consumption, capacity, upper_bounds)\n  File ""/tmp/cot_exec_e2z_6nxg/main.py"", line 8, in simplex\n    tableau[i][i] = -consumption[i][j]\nUnboundLocalError: local variable \'j\' referenced before assignment\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10407710075378418}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[2, 3], [1, 2]]
capacity = [6, 7]
upper_bounds = [3, 3]"
331,ilp_assign,8,42,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 11, 7, 10, 10, 15], [15, 23, 18, 19, 23, 17, 7], [23, 15, 13, 3, 24, 1, 3], [10, 24, 20, 15, 7, 24, 10], [14, 6, 21, 20, 22, 13, 13], [24, 15, 8, 8, 16, 1, 10], [9, 16, 16, 12, 4, 19, 24]]"
332,rod,16,352,154,0,107,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09557271003723145}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [22, 20, 36, 12, 48, 9, 27, 21, 35, 19, 39, 2, 42, 35, 16, 2]"
333,add,2,83,83,1,83,1,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09477782249450684}",1,Compute: 44 + 39
334,ilp_partition,2,2,1,0,2,1,"{'ok': False, 'value': None, 'stdout': 'inf\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11323881149291992}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 3, 6, 1]"
335,ilp_partition,32,0,10,0,1,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10542058944702148}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [69, 90, 75, 58, 78, 18, 89, 44, 88, 40, 17, 14, 18, 17, 93, 91, 90, 85, 38, 66, 29, 55, 85, 49]"
336,sub,2,11,11,1,11,1,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11706233024597168}",1,Compute: 92 - 81
337,ilp_prod,32,344,319,0,302,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9178ma1t/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16786479949951172}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 65, 76, 22, 86, 52]
consumption (rows=resources) = [[20, 16, 24, 10, 11, 27], [29, 24, 9, 31, 19, 18], [27, 29, 28, 22, 10, 24], [2, 19, 8, 21, 16, 25]]
capacity = [65, 92, 102, 80]
upper_bounds = [3, 3, 3, 3, 4, 3]"
338,ilp_prod,32,420,166,0,297,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_c_f33fvn/main.py"", line 10, in <module>\n    c = -profit  # Negate to maximize\nTypeError: bad operand type for unary -: \'list\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3886911869049072}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [35, 82, 61, 78, 84, 17]
consumption (rows=resources) = [[22, 18, 31, 21, 8, 5], [3, 15, 32, 31, 14, 25], [31, 24, 2, 24, 17, 13], [18, 12, 13, 19, 1, 18]]
capacity = [93, 79, 112, 119]
upper_bounds = [3, 4, 3, 3, 5, 3]"
339,ilp_prod,2,10,30,0,10,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_qdqb3wj0/main.py"", line 7, in <module>\n    x = pulp.LpVariable.dicts(""x"", range(len(profit)), 0, None, pulp.LpInteger)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16179704666137695}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 5]
consumption (rows=resources) = [[1, 3], [3, 3]]
capacity = [8, 7]
upper_bounds = [3, 3]"
340,lcs,8,6,8,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08363080024719238}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcdcada""
T = ""dcddcabdd"""
341,ilp_assign,16,78,11,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 46, 21, 4, 30, 13, 44], [8, 30, 10, 25, 25, 14, 21], [22, 16, 32, 30, 26, 47, 1], [30, 23, 42, 41, 31, 22, 4], [29, 26, 44, 39, 45, 38, 44], [31, 32, 46, 44, 19, 4, 33], [30, 15, 6, 42, 20, 42, 11]]"
342,ilp_partition,2,1,1,1,9,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11298012733459473}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 4, 2, 4]"
343,ilp_prod,16,174,154,0,137,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_k5fx7f0d/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15205788612365723}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [40, 37, 15, 11, 6, 20]
consumption (rows=resources) = [[1, 15, 15, 6, 7, 10], [10, 5, 3, 6, 3, 6], [6, 14, 6, 7, 14, 9], [11, 5, 8, 14, 11, 1]]
capacity = [46, 42, 50, 35]
upper_bounds = [3, 3, 3, 3, 3, 4]"
344,ilp_partition,4,5,2,0,27,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834496021270752}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 3, 9, 11]"
345,ilp_prod,2,24,23,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_mhvdfduk/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15097427368164062}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 5]
consumption (rows=resources) = [[3, 2], [1, 3]]
capacity = [9, 10]
upper_bounds = [3, 3]"
346,add,32,144988612891602759643860245524562,1,0,144987612891602760663861043524562,0,"{'ok': True, 'value': 144988612891602759643860245524562, 'stdout': '144988612891602759643860245524562\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08548450469970703}",1,Compute: 99310470264049648996107367559831 + 45678142627553110647752877964731
347,ilp_prod,32,279,390,0,315,0,"{'ok': True, 'value': 279, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/401fc59b749b4d0aad740eb0d18a04e8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/401fc59b749b4d0aad740eb0d18a04e8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 64 RHS\nAt line 75 BOUNDS\nAt line 82 ENDATA\nProblem MODEL has 10 rows, 6 columns and 30 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 334.286 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -256 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3\nCbc0013I At root node, 3 cuts changed objective from -320 to -281.67586 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 109 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -256 best solution, best possible -281.67586 (0.01 seconds)\nCbc0012I Integer solution of -259 found by rounding after 77 iterations and 1 nodes (0.01 seconds)\nCbc0016I Integer solution of -279 found by strong branching after 83 iterations and 1 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -279, took 93 iterations and 4 nodes (0.01 seconds)\nCbc0032I Strong branching done 8 times (12 iterations), fathomed 1 nodes and fixed 0 variables\nCbc0035I Maximum depth 1, 1 variables fixed on reduced cost\nCuts at root node changed objective from -320 to -281.676\nProbing was tried 100 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 107 times and created 115 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                279.00000000\nEnumerated nodes:               4\nTotal iterations:               93\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n279.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17276573181152344}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 39, 95, 92, 72, 19]
consumption (rows=resources) = [[24, 12, 19, 27, 2, 28], [22, 21, 29, 19, 18, 19], [20, 5, 4, 7, 31, 5], [22, 32, 11, 23, 10, 29]]
capacity = [80, 72, 97, 81]
upper_bounds = [3, 3, 3, 3, 3, 3]"
348,add,2,134,134,1,134,1,"{'ok': True, 'value': 134, 'stdout': '134\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08546090126037598}",1,Compute: 97 + 37
349,add,16,14862629356358535,1506263635512223,0,14999999999999999,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08462214469909668}",0,Compute: 8081450756984677 + 6781178599373858
350,rod,16,296,125,0,101,0,"{'ok': True, 'value': 42, 'stdout': '42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09713172912597656}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [3, 37, 23, 34, 1, 25, 43, 7, 1, 1, 37, 12, 30, 7, 14, 24]"
351,mul,2,1950,1950,1,1950,1,"{'ok': True, 'value': 1950, 'stdout': '1950\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08139204978942871}",1,Compute: 75 * 26
352,knap,4,25,22,0,22,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09633708000183105}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 2, 5]
V = [9, 6, 16, 2]
C = 8"
353,sub,4,1034,1034,1,1034,1,"{'ok': True, 'value': 1034, 'stdout': '1034\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0836334228515625}",1,Compute: 4796 - 3762
354,add,8,122403962,122404062,0,122404962,0,"{'ok': True, 'value': 122403962, 'stdout': '122403962\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0823519229888916}",1,Compute: 97124852 + 25279110
355,mul,4,10247974,10247484,0,10199999999996,0,"{'ok': True, 'value': 10247974, 'stdout': '10247974\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08266425132751465}",1,Compute: 2491 * 4114
356,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 171, 'stdout': '171\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0817868709564209}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [76, 55, 41, 20, 13, 38, 37, 34, 30, 1, 17, 54, 37, 12, 70, 45, 41, 18, 95, 13, 7, 9, 60, 66]"
357,ilp_prod,8,80,180,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_30wix1et/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16246747970581055}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 10, 22, 14]
consumption (rows=resources) = [[7, 4, 2, 1], [6, 1, 8, 1], [3, 5, 4, 7], [5, 3, 1, 1]]
capacity = [31, 28, 19, 28]
upper_bounds = [4, 3, 3, 3]"
358,knap,16,441,146,0,136,0,"{'ok': True, 'value': 441, 'stdout': '441\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09444212913513184}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 4, 30, 21, 11, 15, 31, 11, 28, 26, 8, 20, 6, 30, 11, 28]
V = [63, 18, 9, 4, 62, 17, 31, 6, 39, 53, 60, 33, 45, 43, 47, 5]
C = 146"
359,add,32,89324202461197339558603662791389,1,0,89324202461207339558503662791389,0,"{'ok': True, 'value': 89324202461197339558603662791389, 'stdout': '89324202461197339558603662791389\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0928339958190918}",1,Compute: 71183668010710693263380528888225 + 18140534450486646295223133903164
360,knap,32,1669,506,0,495,0,"{'ok': True, 'value': 1669, 'stdout': '1669\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09818673133850098}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 59, 17, 20, 1, 50, 22, 17, 14, 27, 15, 8, 63, 29, 51, 45, 38, 12, 29, 48, 4, 13, 34, 36, 38, 40, 24, 56, 63, 42, 49, 36]
V = [104, 54, 107, 90, 19, 115, 78, 79, 102, 90, 8, 73, 34, 29, 83, 61, 63, 88, 36, 12, 90, 43, 65, 103, 16, 58, 77, 87, 88, 11, 1, 106]
C = 506"
361,add,4,15698,15998,0,15698,1,"{'ok': True, 'value': 15698, 'stdout': '15698\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0843513011932373}",1,Compute: 7032 + 8666
362,mul,16,16309022527197348436280448238440,613929034,0,16489999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,"{'ok': True, 'value': 16309022527197348436280448238440, 'stdout': '16309022527197348436280448238440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11039137840270996}",1,Compute: 6139290347024340 * 2656499628674866
363,add,4,11798,11808,0,11808,0,"{'ok': True, 'value': 11798, 'stdout': '11798\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09681344032287598}",1,Compute: 2226 + 9572
364,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08401656150817871}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""ab"""
365,ilp_assign,8,30,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5, 2, 20, 9, 9, 12], [1, 5, 23, 1, 3, 15, 23], [14, 23, 13, 10, 22, 5, 13], [14, 12, 15, 12, 10, 16, 6], [9, 1, 10, 8, 23, 2, 16], [2, 1, 3, 20, 15, 1, 21], [8, 5, 23, 13, 24, 20, 13]]"
366,ilp_prod,8,90,86,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ox7m_9gu/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16417670249938965}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 21, 24, 17]
consumption (rows=resources) = [[2, 7, 7, 2], [1, 1, 7, 6], [3, 7, 1, 3], [5, 7, 3, 8]]
capacity = [25, 24, 17, 28]
upper_bounds = [5, 3, 3, 3]"
367,ilp_partition,4,3,1,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0880727767944336}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 10, 9, 9]"
368,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1040961742401123}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""cd"""
369,lcs,32,19,20,0,14,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0920107364654541}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcddacddacacdcadcdddbbcbdbcabaab""
T = ""dcddbcbacaaaadbcccabccadcdcbcac"""
370,ilp_assign,32,117,200,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 75, 62, 44, 20, 83, 88], [8, 66, 10, 85, 85, 47, 76], [38, 61, 38, 58, 28, 9, 85], [80, 77, 18, 27, 62, 36, 37], [75, 83, 80, 6, 66, 15, 24], [47, 39, 20, 93, 28, 2, 34], [74, 51, 56, 45, 58, 50, 17]]"
371,ilp_assign,2,5,5,1,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_viozvvgx/main.py"", line 59, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_viozvvgx/main.py"", line 53, in hungarian_algorithm\n    uncover_rows()\n  File ""/tmp/cot_exec_viozvvgx/main.py"", line 41, in uncover_rows\n    cost_matrix[i][j] += min_cost\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2171487808227539}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5], [1, 1]]"
372,add,4,10409,10409,1,10409,1,"{'ok': True, 'value': 10409, 'stdout': '10409\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08786368370056152}",1,Compute: 5987 + 4422
373,ilp_partition,8,0,1,0,44,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08394575119018555}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 8, 9, 21, 19, 16, 16, 7]"
374,sub,4,525,525,1,525,1,"{'ok': True, 'value': 525, 'stdout': '525\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08080768585205078}",1,Compute: 1906 - 1381
375,ilp_prod,4,18,24,0,17,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_vtx33nmb/main.py"", line 10, in <module>\n    c = -profit  # Negate to maximize\nTypeError: bad operand type for unary -: \'list\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.4097402095794678}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5, 3]
consumption (rows=resources) = [[1, 4, 4], [4, 2, 2], [1, 2, 4]]
capacity = [10, 12, 11]
upper_bounds = [3, 3, 3]"
376,rod,8,104,97,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_t4e31d4g/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_t4e31d4g/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09774184226989746}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 19, 8, 13, 20, 4, 6, 22]"
377,ilp_partition,4,6,16,0,8,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08729672431945801}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 7, 12, 12]"
378,mul,2,2304,2304,1,2304,1,"{'ok': True, 'value': 2304, 'stdout': '2304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11051654815673828}",1,Compute: 36 * 64
379,ilp_partition,2,1,,0,3,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11141180992126465}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 5, 5]"
380,rod,4,28,28,1,18,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09392547607421875}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 5, 4, 11]"
381,rod,2,6,6,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dfzj_qkr/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_dfzj_qkr/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09218358993530273}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 1]"
382,add,2,151,151,1,151,1,"{'ok': True, 'value': 151, 'stdout': '151\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11251068115234375}",1,Compute: 93 + 58
383,ilp_partition,2,2,2,1,2,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09382033348083496}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 6, 2]"
384,add,2,126,126,1,126,1,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0863504409790039}",1,Compute: 29 + 97
385,ilp_assign,32,130,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[77, 71, 89, 94, 25, 3, 92], [50, 71, 51, 14, 86, 67, 7], [88, 79, 88, 77, 67, 55, 48], [76, 3, 26, 47, 57, 2, 17], [85, 49, 75, 63, 50, 13, 42], [3, 80, 26, 13, 40, 5, 57], [20, 1, 72, 71, 86, 60, 81]]"
386,ilp_partition,8,1,1,1,105,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09084558486938477}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 16, 17, 18, 13, 13, 20]"
387,sub,4,1239,1239,1,1239,1,"{'ok': True, 'value': 1239, 'stdout': '1239\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09944319725036621}",1,Compute: 7504 - 6265
388,add,16,15766776134590602,15766776981380592,0,15766776134580592,0,"{'ok': True, 'value': 15766776134590602, 'stdout': '15766776134590602\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08279967308044434}",1,Compute: 9829664536286004 + 5937111598304598
389,add,2,85,85,1,85,1,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08363914489746094}",1,Compute: 72 + 13
390,sub,4,558,558,1,558,1,"{'ok': True, 'value': 558, 'stdout': '558\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09351372718811035}",1,Compute: 9659 - 9101
391,ilp_prod,4,41,89,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_eeesl22u/main.py"", line 8\n    tableau[i][i] = -consumption[i][j] for j in range(n)\n                                       ^^^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10822510719299316}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 11]
consumption (rows=resources) = [[2, 4, 3], [2, 2, 3], [1, 3, 1]]
capacity = [15, 8, 10]
upper_bounds = [4, 3, 3]"
392,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0970308780670166}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""bc"""
393,rod,2,6,6,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u5n11fyf/main.py"", line 10, in <module>\n    print(max_revenue(N, P))\n  File ""/tmp/cot_exec_u5n11fyf/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09387326240539551}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 2]"
394,knap,2,4,5,0,7,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1077430248260498}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 5]
V = [4, 2, 1]
C = 7"
395,sub,16,4564278509188365,1,0,4564278509188365,1,"{'ok': True, 'value': 4564278509188365, 'stdout': '4564278509188365\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09897685050964355}",1,Compute: 8515029274653902 - 3950750765465537
396,rod,16,400,104,0,105,0,"{'ok': True, 'value': 400, 'stdout': '400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10321855545043945}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [25, 15, 36, 1, 39, 37, 36, 21, 27, 25, 36, 41, 43, 14, 9, 28]"
397,add,32,105348094534603299832502126455881,4,0,105347391597394529311910166093381,0,"{'ok': True, 'value': 105348094534603299832502126455881, 'stdout': '105348094534603299832502126455881\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08119940757751465}",1,Compute: 22025169690316793537712737716383 + 83322924844286506294789388739498
398,sub,32,31665247506398910131977727702939,,0,31659247506399009132077627729939,0,"{'ok': True, 'value': 31665247506398910131977727702939, 'stdout': '31665247506398910131977727702939\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12178826332092285}",1,Compute: 60458724601639242373413988177373 - 28793477095240332241436260474434
399,rod,8,144,100,0,36,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_wwq97dh_/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_wwq97dh_/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09207677841186523}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [18, 13, 18, 9, 19, 2, 7, 7]"
400,rod,4,14,21,0,21,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10537004470825195}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 7, 6, 12]"
401,ilp_assign,2,7,0,0,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_m38wdzn3/main.py"", line 59, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_m38wdzn3/main.py"", line 53, in hungarian_algorithm\n    uncover_rows()\n  File ""/tmp/cot_exec_m38wdzn3/main.py"", line 41, in uncover_rows\n    cost_matrix[i][j] += min_cost\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21220850944519043}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [2, 3]]"
402,mul,8,7463109323292852,1174226666666660,0,7498305346888,0,"{'ok': True, 'value': 7463109323292852, 'stdout': '7463109323292852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08923554420471191}",1,Compute: 82404723 * 90566524
403,ilp_prod,8,132,100,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_oil4m434/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16865992546081543}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 21, 18, 8]
consumption (rows=resources) = [[6, 7, 3, 6], [2, 1, 1, 5], [2, 8, 2, 1], [1, 5, 5, 5]]
capacity = [30, 28, 19, 23]
upper_bounds = [5, 3, 4, 4]"
404,ilp_assign,32,110,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[90, 19, 87, 52, 93, 38, 35], [85, 77, 8, 15, 30, 38, 4], [92, 78, 95, 41, 4, 62, 21], [25, 86, 86, 83, 87, 23, 54], [19, 59, 57, 17, 45, 15, 6], [82, 7, 87, 78, 20, 73, 47], [50, 11, 43, 41, 83, 47, 11]]"
405,add,2,60,60,1,60,1,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08430933952331543}",1,Compute: 18 + 42
406,ilp_partition,16,0,1,0,15,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11033034324645996}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 30, 26, 19, 16, 11, 31, 15, 41, 38, 15, 39, 17, 34, 27, 30]"
407,add,16,17505532772958967,0,0,17505532773444967,0,"{'ok': True, 'value': 17505532772958967, 'stdout': '17505532772958967\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0945279598236084}",1,Compute: 8954441612942863 + 8551091160016104
408,mul,8,792724949802018,804999999,0,800000000000000000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.039933681488037}",0,Compute: 18372363 * 43147686
409,add,16,8874449793423068,0,0,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10389542579650879}",0,Compute: 3646944862743914 + 5227504930679154
410,ilp_partition,8,0,1,0,8,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10267233848571777}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 22, 6, 15, 17, 1, 11, 23]"
411,add,2,69,69,1,69,1,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09538626670837402}",1,Compute: 11 + 58
412,sub,16,7085131457949167,2,0,7085131457949167,1,"{'ok': True, 'value': 7085131457949167, 'stdout': '7085131457949167\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09169197082519531}",1,Compute: 9872861014235122 - 2787729556285955
413,sub,32,56793357609870537776549620548106,56793357609869537776549619546176,0,56793357909869537776549619548106,0,"{'ok': True, 'value': 56793357609870537776549620548106, 'stdout': '56793357609870537776549620548106\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08347177505493164}",1,Compute: 76842512905275190407705917834907 - 20049155295404652631156297286801
414,rod,8,64,64,1,22,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09104728698730469}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 16, 6, 2, 22, 13, 10, 1]"
415,ilp_partition,4,1,2,0,3,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10397863388061523}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 8, 7]"
416,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10039806365966797}",1,Compute: 74 - 73
417,ilp_prod,16,295,200,0,197,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_a9m5ufo8/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17879891395568848}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [31, 8, 5, 47, 48, 31]
consumption (rows=resources) = [[5, 13, 9, 2, 2, 2], [6, 8, 10, 4, 10, 6], [2, 4, 16, 5, 9, 4], [3, 11, 5, 8, 8, 11]]
capacity = [60, 54, 32, 36]
upper_bounds = [9, 3, 3, 4, 3, 3]"
418,knap,4,26,31,0,21,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10475540161132812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 8, 2, 8]
V = [12, 5, 14, 5]
C = 12"
419,ilp_prod,4,35,26,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_99ohz9sj/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1630237102508545}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5, 5]
consumption (rows=resources) = [[1, 4, 4], [1, 1, 1], [2, 4, 4]]
capacity = [16, 12, 10]
upper_bounds = [5, 3, 3]"
420,add,32,100413960538380068352785849573389,2,0,22081604803317365352785850571636,0,"{'ok': True, 'value': 100413960538380068352785849573389, 'stdout': '100413960538380068352785849573389\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10309886932373047}",1,Compute: 87259295276315286710672867526447 + 13154665262064781642112982046942
421,rod,16,704,46,0,104,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09437894821166992}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 41, 13, 42, 12, 41, 17, 39, 46, 17, 1, 5, 43, 43, 25, 2]"
422,sub,32,68739467671113133700857194718315,0,0,68739427671113133700857195738315,0,"{'ok': True, 'value': 68739467671113133700857194718315, 'stdout': '68739467671113133700857194718315\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08548450469970703}",1,Compute: 89025983614230767039869415188232 - 20286515943117633339012220469917
423,ilp_assign,8,38,40,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 17, 10, 3, 2, 14, 5], [12, 7, 3, 15, 12, 4, 19], [20, 11, 22, 4, 7, 20, 11], [6, 6, 11, 3, 7, 24, 10], [18, 19, 3, 16, 19, 15, 17], [15, 13, 12, 17, 21, 17, 16], [6, 22, 5, 1, 6, 10, 6]]"
424,ilp_partition,8,1,1,1,3,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09891557693481445}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 16, 9, 16, 5, 22, 22, 7]"
425,mul,4,55304450,55364500,0,55240550,0,"{'ok': True, 'value': 55304450, 'stdout': '55304450\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08499741554260254}",1,Compute: 8870 * 6235
426,ilp_partition,16,0,10,0,10,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08618855476379395}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 3, 24, 8, 22, 4, 14, 48, 40, 23, 12, 36, 38, 47, 19, 32]"
427,rod,4,44,44,1,21,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09887218475341797}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 12, 3, 10]"
428,lcs,8,4,6,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0956118106842041}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daabdbbc""
T = ""bccaddadb"""
429,ilp_prod,2,15,21,0,15,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1rei5g6u/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1614694595336914}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5]
consumption (rows=resources) = [[3, 2], [3, 2]]
capacity = [6, 9]
upper_bounds = [3, 3]"
430,lcs,8,5,4,0,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09515166282653809}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddbadcb""
T = ""acdbcad"""
431,ilp_assign,8,40,110,0,34,0,"{'ok': True, 'value': -2, 'stdout': '-2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20325708389282227}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 16, 12, 17, 10, 24, 13], [3, 19, 14, 5, 22, 23, 17], [8, 14, 16, 3, 19, 24, 12], [18, 17, 6, 2, 23, 7, 7], [1, 12, 8, 8, 23, 17, 17], [21, 14, 18, 14, 6, 8, 1], [8, 17, 18, 2, 21, 5, 18]]"
432,mul,2,5040,5040,1,5040,1,"{'ok': True, 'value': 5040, 'stdout': '5040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09529638290405273}",1,Compute: 84 * 60
433,mul,8,919007597081164,915449535449544,0,9090909090909090,0,"{'ok': True, 'value': 919007597081164, 'stdout': '919007597081164\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.5441222190856934}",1,Compute: 28905862 * 31793122
434,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 183, 'stdout': '183\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08791613578796387}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [50, 40, 38, 47, 30, 6, 78, 49, 79, 88, 81, 33, 12, 20, 67, 65, 32, 47, 95, 68, 36, 63, 48, 86]"
435,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11285781860351562}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""cd"""
436,rod,32,1088,106,0,588,0,"{'ok': True, 'value': 1088, 'stdout': '1088\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09333014488220215}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [34, 36, 42, 84, 60, 27, 91, 12, 46, 61, 89, 48, 37, 78, 17, 39, 88, 89, 2, 54, 13, 94, 76, 94, 9, 84, 78, 58, 65, 74, 58, 26]"
437,rod,16,480,136,0,107,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10446953773498535}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 23, 9, 40, 16, 20, 48, 3, 28, 29, 32, 48, 4, 12, 36, 25]"
438,ilp_prod,2,10,19,0,10,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_bfyvupdf/main.py"", line 16, in <module>\n    res = linprog(c, A_ub=A, b_ub=b, bounds=bounds, method=\'highs\')\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/scipy/optimize/_linprog.py"", line 649, in linprog\n    lp, solver_options = _parse_linprog(lp, options, meth)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/scipy/optimize/_linprog_util.py"", line 1026, in _parse_linprog\n    lp = _clean_inputs(lp._replace(A_ub=A_ub, A_eq=A_eq))\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/scipy/optimize/_linprog_util.py"", line 445, in _clean_inputs\n    raise ValueError(\nValueError: Invalid input for linprog: provide a 2-D array for bounds, not a 3-D array.\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.40010809898376465}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 3]
consumption (rows=resources) = [[3, 3], [1, 1]]
capacity = [7, 7]
upper_bounds = [3, 3]"
439,ilp_prod,8,44,43,0,70,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_i3022nvn/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19129681587219238}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 16, 4, 10]
consumption (rows=resources) = [[6, 7, 8, 4], [2, 6, 7, 3], [4, 8, 2, 7], [7, 4, 5, 1]]
capacity = [25, 17, 24, 18]
upper_bounds = [3, 3, 3, 3]"
440,add,32,91015286148443898405595913440759,1,0,251489113495641032959089131462159,0,"{'ok': True, 'value': 91015286148443898405595913440759, 'stdout': '91015286148443898405595913440759\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09587764739990234}",1,Compute: 17829977483017448263721570891261 + 73185308665426450141874342549498
441,add,8,114701701,115701651,0,114701601,0,"{'ok': True, 'value': 114701701, 'stdout': '114701701\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08592772483825684}",1,Compute: 54968050 + 59733651
442,knap,16,394,149,0,154,0,"{'ok': True, 'value': 394, 'stdout': '394\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10865068435668945}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 7, 12, 20, 7, 20, 6, 8, 21, 29, 19, 29, 19, 29, 30, 10]
V = [39, 35, 10, 37, 5, 51, 17, 63, 42, 34, 16, 38, 56, 29, 32, 50]
C = 149"
443,lcs,16,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1011819839477539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcdbcbbdaacbddb""
T = ""babdccdcadabacdc"""
444,rod,2,3,3,1,3,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_s1c96rh8/main.py"", line 10, in <module>\n    print(max_revenue(N, P))\n  File ""/tmp/cot_exec_s1c96rh8/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09586048126220703}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 3]"
445,lcs,8,4,1,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08681011199951172}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addbdddc""
T = ""aaaadbd"""
446,lcs,16,7,7,1,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09923768043518066}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccdabaabcdbbbda""
T = ""ccccccddddccdbb"""
447,ilp_partition,4,1,1,1,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08379673957824707}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 12, 3, 2]"
448,ilp_assign,16,69,100,0,0,0,"{'ok': True, 'value': -7, 'stdout': '-7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1973116397857666}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 43, 18, 9, 14, 1, 11], [29, 4, 40, 37, 27, 45, 7], [36, 3, 34, 11, 46, 42, 43], [42, 30, 5, 1, 36, 1, 10], [15, 1, 35, 3, 33, 42, 38], [44, 16, 39, 46, 28, 46, 7], [32, 24, 22, 11, 47, 43, 14]]"
449,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0912928581237793}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""dc"""
450,mul,4,4025287,4030797,0,3999997,0,"{'ok': True, 'value': 4025287, 'stdout': '4025287\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10237431526184082}",1,Compute: 2291 * 1757
451,add,2,77,77,1,77,1,"{'ok': True, 'value': 77, 'stdout': '77\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08210897445678711}",1,Compute: 64 + 13
452,knap,4,23,0,0,20,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0808858871459961}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 7, 3]
V = [5, 9, 7, 14]
C = 9"
453,add,8,58121886,57822936,0,58121886,1,"{'ok': True, 'value': 58121886, 'stdout': '58121886\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10711455345153809}",1,Compute: 14330267 + 43791619
454,add,2,166,166,1,166,1,"{'ok': True, 'value': 166, 'stdout': '166\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09771919250488281}",1,Compute: 99 + 67
455,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10101962089538574}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""ac"""
456,mul,4,24811410,24813170,0,2776410,0,"{'ok': True, 'value': 24811410, 'stdout': '24811410\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10292625427246094}",1,Compute: 7345 * 3378
457,rod,8,92,70,0,92,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_thh8nq2i/main.py"", line 14, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_thh8nq2i/main.py"", line 10, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09497976303100586}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 23, 13, 10, 17, 1, 19, 9]"
458,ilp_prod,32,437,285,0,198,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.3835000991821289}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [41, 69, 58, 49, 57, 4]
consumption (rows=resources) = [[28, 4, 8, 25, 31, 30], [2, 6, 4, 21, 10, 21], [12, 31, 3, 22, 14, 8], [9, 15, 24, 12, 5, 30]]
capacity = [113, 108, 128, 105]
upper_bounds = [4, 4, 4, 4, 3, 3]"
459,ilp_assign,4,11,20,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.045797824859619}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 2, 4, 7], [4, 10, 1, 10], [4, 11, 4, 4], [12, 7, 7, 4]]"
460,knap,8,138,100,0,70,0,"{'ok': True, 'value': 138, 'stdout': '138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09550094604492188}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 2, 14, 10, 13, 2, 1, 9]
V = [31, 29, 15, 18, 21, 31, 29, 4]
C = 33"
461,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10297870635986328}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""bac"""
462,lcs,32,18,15,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09364724159240723}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdbbdbbddbabbbdbdacadbdbddaabbb""
T = ""dcaaddadbdbaacabbbdcbbccdadadcac"""
463,knap,16,445,149,0,129,0,"{'ok': True, 'value': 445, 'stdout': '445\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09604120254516602}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 19, 32, 18, 20, 8, 30, 9, 18, 21, 20, 22, 3, 20, 13, 17]
V = [60, 29, 1, 41, 59, 15, 9, 55, 46, 33, 6, 18, 40, 48, 44, 52]
C = 149"
464,lcs,16,9,0,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09433174133300781}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adaabaddcabddcba""
T = ""caddbbcddcdcdaa"""
465,mul,4,7202958,7202558,0,7236788,0,"{'ok': True, 'value': 7202958, 'stdout': '7202958\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09252238273620605}",1,Compute: 3129 * 2302
466,lcs,16,9,10,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0828702449798584}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babdacccdbcdabdb""
T = ""cadddcaddbcacdbc"""
467,knap,2,9,11,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09074115753173828}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 5]
V = [9, 5, 6]
C = 5"
468,add,16,10766127544045696,,0,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08230423927307129}",0,Compute: 9696851260548087 + 1069276283497609
469,rod,4,16,16,1,16,1,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10468173027038574}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 4, 7, 5]"
470,ilp_partition,32,0,10,0,95,0,"{'ok': True, 'value': 186, 'stdout': '186\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08743619918823242}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [34, 45, 77, 27, 23, 32, 20, 60, 57, 1, 41, 94, 85, 49, 54, 92, 92, 12, 57, 53, 54, 68, 7, 78]"
471,ilp_prod,32,288,394,0,396,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_yhs_ryfq/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16869831085205078}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 35, 91, 96, 59, 62]
consumption (rows=resources) = [[32, 4, 32, 19, 21, 10], [31, 17, 15, 29, 23, 3], [26, 20, 19, 26, 22, 32], [15, 29, 14, 17, 23, 15]]
capacity = [83, 93, 87, 126]
upper_bounds = [3, 4, 3, 3, 3, 3]"
472,ilp_assign,16,37,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 38, 22, 33, 42, 2, 14], [6, 48, 31, 30, 5, 11, 18], [34, 2, 27, 19, 38, 36, 38], [13, 12, 21, 7, 47, 37, 19], [46, 20, 13, 37, 34, 8, 1], [18, 14, 14, 16, 35, 13, 32], [21, 26, 39, 31, 47, 7, 24]]"
473,ilp_partition,16,1,10,0,10,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1283726692199707}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 44, 18, 7, 36, 42, 17, 11, 12, 34, 48, 39, 11, 28, 45, 20]"
474,mul{'ok': True, 'value': 3964516495667461219666804281696959742668076861406459845063381556, 'stdout': '3964516495667461219666804281696959742668076861406459845063381556\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08284163475036621}",0,Compute: 61701993633862582571965330755674 * 49397102098832676388688284625246
475,lcs,8,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10267782211303711}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbacacd""
T = ""cccdbcb"""
476,add,32,115370491107437471473082231816473,1,0,115370491007467471553081231716473,0,"{'ok': True, 'value': 115370491107437471473082231816473, 'stdout': '115370491107437471473082231816473\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09417343139648438}",1,Compute: 46258014034976275868180761656606 + 69112477072461195604901470159867
477,sub{'ok': True, 'value': 9829748255124890106559009268781, 'stdout': '9829748255124890106559009268781\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12028241157531738}",1,Compute: 58549460491507305584611421206046 - 48719712236382415478052411937265
478,knap,16,423,151,0,134,0,"{'ok': True, 'value': 423, 'stdout': '423\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08578372001647949}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 26, 26, 25, 29, 1, 16, 9, 5, 32, 26, 14, 7, 30, 13, 26]
V = [52, 56, 4, 36, 3, 6, 63, 54, 17, 23, 25, 49, 37, 11, 6, 53]
C = 151"
479,lcs,32,17,16,0,15,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10291576385498047}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaacdcbaabcdcccaccdddacabcadbcdc""
T = ""cabbdcadacbcabddbdacdbcacabaabab"""
480,ilp_prod,2,24,48,0,16,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_qd6zotaw/main.py"", line 7, in <module>\n    x = pulp.LpVariable.dicts(""x"", range(len(profit)), 0, None, pulp.LpInteger)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1695101261138916}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8]
consumption (rows=resources) = [[1, 1], [2, 2]]
capacity = [10, 7]
upper_bounds = [3, 3]"
481,ilp_partition,32,1,12,0,10,0,"{'ok': True, 'value': 41, 'stdout': '41\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09331321716308594}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 48, 5, 92, 90, 1, 27, 45, 75, 49, 2, 82, 17, 61, 7, 96, 89, 39, 78, 77, 13, 79, 33, 50]"
482,sub,4,841,841,1,841,1,"{'ok': True, 'value': 841, 'stdout': '841\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09187197685241699}",1,Compute: 6916 - 6075
483,ilp_partition,2,1,4,0,13,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0934908390045166}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 2, 4]"
484,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0891718864440918}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""bc"""
485,ilp_assign,32,125,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[44, 84, 46, 30, 65, 13, 1], [62, 22, 34, 8, 78, 69, 15], [76, 70, 36, 41, 37, 44, 47], [36, 21, 38, 77, 94, 77, 49], [51, 91, 26, 81, 45, 91, 93], [9, 81, 57, 3, 60, 85, 40], [10, 71, 52, 36, 82, 68, 34]]"
486,rod,8,136,100,0,45,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_e9sgtsrt/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_e9sgtsrt/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10925531387329102}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 3, 11, 22, 2, 9, 19, 17]"
487,rod,32,886,1080,0,474,0,"{'ok': True, 'value': 886, 'stdout': '886\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09469032287597656}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [1, 26, 86, 74, 37, 23, 61, 75, 36, 38, 77, 94, 47, 83, 39, 87, 81, 75, 70, 58, 37, 67, 67, 74, 9, 19, 41, 40, 43, 17, 2, 29]"
488,ilp_partition,32,0,10,0,45,0,"{'ok': True, 'value': 180, 'stdout': '180\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09536004066467285}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 74, 33, 45, 82, 92, 70, 62, 45, 53, 32, 79, 27, 72, 79, 25, 86, 31, 88, 3, 52, 11, 23, 27]"
489,knap,32,1539,455,0,387,0,"{'ok': True, 'value': 1539, 'stdout': '1539\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10841536521911621}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [62, 5, 58, 32, 26, 10, 2, 56, 19, 1, 8, 35, 42, 9, 29, 1, 18, 13, 45, 26, 36, 62, 23, 60, 19, 41, 21, 51, 27, 39, 33, 59]
V = [113, 35, 48, 45, 41, 128, 105, 84, 44, 36, 68, 6, 104, 70, 45, 91, 28, 65, 12, 45, 109, 7, 17, 6, 3, 119, 111, 94, 38, 46, 15, 3]
C = 484"
490,ilp_assign,16,70,123,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 8, 45, 32, 17, 12, 4], [7, 35, 30, 5, 12, 22, 30], [35, 11, 46, 32, 48, 24, 17], [45, 20, 31, 12, 43, 20, 34], [2, 12, 16, 7, 48, 25, 5], [8, 19, 45, 7, 17, 43, 15], [12, 44, 24, 7, 29, 7, 21]]"
491,ilp_prod,16,111,120,0,103,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_q46syya4/main.py"", line 10, in <module>\n    c = -profit  # Minimize the negative of the profit to maximize the profit\nTypeError: bad operand type for unary -: \'list\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.40581798553466797}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 43, 6, 21, 25, 17]
consumption (rows=resources) = [[7, 15, 16, 16, 2, 7], [4, 11, 10, 14, 8, 6], [9, 9, 12, 4, 12, 14], [14, 15, 16, 8, 4, 6]]
capacity = [60, 61, 35, 38]
upper_bounds = [3, 3, 3, 3, 3, 3]"
492,rod,8,60,87,0,39,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lbsszkjt/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_lbsszkjt/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09546065330505371}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 15, 4, 21, 21, 8, 15, 12]"
493,ilp_prod,8,94,100,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8efbi19l/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1526637077331543}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 13, 16, 22]
consumption (rows=resources) = [[8, 2, 5, 1], [5, 6, 4, 4], [4, 4, 7, 6], [5, 1, 8, 3]]
capacity = [29, 31, 18, 32]
upper_bounds = [3, 4, 3, 3]"
494,ilp_partition,32,1,10,0,0,0,"{'ok': True, 'value': 189, 'stdout': '189\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09445333480834961}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [72, 1, 96, 33, 82, 19, 59, 71, 33, 10, 20, 29, 73, 36, 22, 12, 93, 71, 39, 54, 91, 72, 32, 33]"
495,mul{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_zjvyrwgp/main.py"", line 8, in <module>\n    res = multiply_large_numbers(7330040001257647, 7701112652539732)\n  File ""/tmp/cot_exec_zjvyrwgp/main.py"", line 4, in multiply_large_numbers\n    digit = int(b[-i-1])\nTypeError: \'int\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09153532981872559}",0,Compute: 7330040001257647 * 7701112652539732
496,ilp_partition,4,1,0,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09515857696533203}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 1, 1]"
497,mul{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_l8jb3c4f/main.py"", line 8, in <module>\n    result = multiply_large_numbers(32798506066153556205839858481627, 85383411749730208873623184850106)\n  File ""/tmp/cot_exec_l8jb3c4f/main.py"", line 4, in multiply_large_numbers\n    digit = int(b[-i-1])\nTypeError: \'int\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09343528747558594}",0,Compute: 32798506066153556205839858481627 * 85383411749730208873623184850106
498,mul,4,19135215,176902,0,10252115,0,"{'ok': True, 'value': 19135215, 'stdout': '19135215\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09442830085754395}",1,Compute: 9889 * 1935
499,ilp_assign,2,7,7,1,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0576655864715576}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6], [2, 1]]"
500,knap,4,19,15,0,23,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10003662109375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 5, 6]
V = [5, 10, 14, 9]
C = 7"
501,mul{'ok': True, 'value': 41361772897930456640551511403108, 'stdout': '41361772897930456640551511403108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10275816917419434}",1,Compute: 8514261397390446 * 4857940221403998
502,sub,16,748686915854134,15,0,7496886925884134,0,"{'ok': True, 'value': 748686915854134, 'stdout': '748686915854134\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09616947174072266}",1,Compute: 9916885681770672 - 9168198765916538
503,mul,4,12655268,72440,0,12199688,0,"{'ok': True, 'value': 12655268, 'stdout': '12655268\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0942678451538086}",1,Compute: 3622 * 3494
504,sub,16,1377936588721713,0,0,1377937588621033,0,"{'ok': True, 'value': 1377936588721713, 'stdout': '1377936588721713\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10536694526672363}",1,Compute: 8489761071901035 - 7111824483179322
505,ilp_partition,32,0,10,0,10,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09472990036010742}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 68, 85, 48, 55, 15, 58, 83, 45, 60, 96, 45, 83, 53, 89, 9, 85, 83, 6, 43, 82, 73, 91, 21]"
506,ilp_partition,32,0,1,0,767,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10261154174804688}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 88, 69, 67, 19, 18, 47, 11, 83, 76, 72, 7, 55, 59, 58, 71, 71, 56, 69, 82, 11, 70, 73, 2]"
507,ilp_assign,16,85,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 43, 17, 11, 48, 38, 19], [19, 32, 33, 21, 33, 42, 40], [28, 8, 4, 5, 5, 20, 40], [27, 42, 25, 24, 22, 37, 6], [46, 10, 36, 37, 48, 29, 33], [27, 15, 36, 17, 48, 27, 22], [42, 20, 12, 3, 8, 47, 7]]"
508,rod,16,736,108,0,104,0,"{'ok': True, 'value': 43, 'stdout': '43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09698081016540527}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [46, 10, 30, 11, 20, 3, 42, 20, 38, 19, 3, 40, 34, 21, 19, 3]"
509,knap,16,442,122,0,132,0,"{'ok': True, 'value': 442, 'stdout': '442\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09422588348388672}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 14, 27, 13, 16, 27, 13, 27, 25, 3, 11, 1, 14, 7, 4, 19]
V = [19, 51, 47, 24, 22, 21, 19, 64, 12, 58, 24, 37, 35, 45, 57, 32]
C = 122"
510,ilp_assign,16,64,100,0,0,0,"{'ok': True, 'value': -10, 'stdout': '-10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2007436752319336}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 40, 24, 24, 22, 10, 21], [21, 35, 45, 22, 41, 4, 21], [30, 11, 6, 1, 47, 2, 32], [44, 7, 13, 25, 40, 34, 27], [39, 8, 17, 34, 28, 3, 30], [14, 3, 36, 1, 45, 47, 19], [27, 5, 22, 23, 38, 26, 4]]"
511,add,4,11371,11771,0,11371,1,"{'ok': True, 'value': 11371, 'stdout': '11371\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0870664119720459}",1,Compute: 7548 + 3823
512,ilp_prod,4,41,30,0,30,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_g7altcdu/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16721796989440918}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 5, 9]
consumption (rows=resources) = [[4, 4, 1], [2, 3, 3], [1, 1, 2]]
capacity = [14, 16, 9]
upper_bounds = [3, 3, 4]"
513,sub,4,2323,2323,1,2323,1,"{'ok': True, 'value': 2323, 'stdout': '2323\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0998373031616211}",1,Compute: 4059 - 1736
514,ilp_partition,16,0,1,0,10,0,"{'ok': True, 'value': 89, 'stdout': '89\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08454036712646484}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [34, 41, 35, 7, 20, 29, 14, 38, 44, 30, 10, 17, 4, 11, 13, 45]"
515,knap,16,441,205,0,135,0,"{'ok': True, 'value': 441, 'stdout': '441\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08675456047058105}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 14, 8, 9, 25, 8, 25, 16, 30, 31, 6, 11, 1, 23, 4, 30]
V = [18, 64, 50, 26, 25, 8, 44, 26, 62, 36, 23, 64, 54, 7, 20, 25]
C = 135"
516,rod,8,40,102,0,78,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_luelvt_d/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_luelvt_d/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09326839447021484}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 8, 11, 13, 2, 14, 24, 19]"
517,ilp_assign,4,21,18,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.043036460876465}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6, 7, 11], [2, 4, 10, 3], [4, 11, 10, 5], [10, 7, 10, 8]]"
518,ilp_prod,4,30,30,1,35,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dch1apno/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16153955459594727}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7, 10]
consumption (rows=resources) = [[1, 1, 4], [1, 4, 3], [4, 3, 3]]
capacity = [15, 8, 16]
upper_bounds = [4, 3, 3]"
519,rod,16,448,143,0,118,0,"{'ok': True, 'value': 448, 'stdout': '448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11258697509765625}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [28, 16, 45, 24, 7, 23, 16, 46, 5, 24, 44, 35, 43, 43, 44, 20]"
520,rod,4,40,18,0,13,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09753942489624023}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 9, 2, 3]"
521,lcs,4,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0931100845336914}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcaa""
T = ""ccdd"""
522,rod,4,48,40,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6atvzb93/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_6atvzb93/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09636807441711426}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 9, 11, 10]"
523,rod,32,1248,1214,0,1000,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10409021377563477}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [35, 78, 66, 6, 1, 46, 49, 13, 25, 45, 24, 6, 14, 73, 3, 83, 68, 61, 86, 3, 70, 29, 59, 83, 22, 35, 50, 13, 13, 7, 76, 16]"
524,sub,16,3620949278992956,9,0,3620749278993056,0,"{'ok': True, 'value': 3620949278992956, 'stdout': '3620949278992956\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10606241226196289}",1,Compute: 9914115941006454 - 6293166662013498
525,knap,4,23,14,0,20,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0884394645690918}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 7, 1]
V = [7, 14, 12, 2]
C = 5"
526,sub,32,33488472843095420067773593878,9,0,32964234391637020965902485003491,0,"{'ok': True, 'value': 33488472843095420067773593878, 'stdout': '33488472843095420067773593878\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08530735969543457}",1,Compute: 85664234391637020965902485003491 - 85630745918793925545834711409613
527,lcs,8,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10075831413269043}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acadbabc""
T = ""ddccbbb"""
528,mul,32,2701401402401703087808014071165634966446642958495595340852106439,26924516836678473827244337459615345695779,0,26918215247963667223235565598813377237673223335037461739677766998639482433,0,"{'ok': True, 'value': 1246744124566649422226654284093083411801740086204372820120550511, 'stdout': '1246744124566649422226654284093083411801740086204372820120550511\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11352038383483887}",0,Compute: 37682620578263253789748843520983 * 71688257370294796973894088358033
529,ilp_assign,4,16,20,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.048710823059082}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 1, 8, 8], [6, 4, 9, 8], [4, 12, 8, 6], [12, 11, 3, 7]]"
530,mul,4,12684951,12686951,0,12702011,0,"{'ok': True, 'value': 12684951, 'stdout': '12684951\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12675833702087402}",1,Compute: 2817 * 4503
531,ilp_prod,4,44,40,0,30,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_97q78xa1/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17384624481201172}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4, 11]
consumption (rows=resources) = [[2, 2, 4], [1, 2, 4], [2, 1, 2]]
capacity = [16, 16, 9]
upper_bounds = [4, 8, 4]"
532,lcs,8,5,6,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1615924835205078}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbccdccb""
T = ""bcadcbdd"""
533,mul,8,666601636757658,66666666666681118,0,664867199998,0,"{'ok': True, 'value': 666601636757658, 'stdout': '666601636757658\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0942680835723877}",1,Compute: 14379566 * 46357563
534,add,4,10240,10240,1,10240,1,"{'ok': True, 'value': 10240, 'stdout': '10240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1050252914428711}",1,Compute: 5239 + 5001
535,sub,4,1481,1481,1,1481,1,"{'ok': True, 'value': 1481, 'stdout': '1481\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09308671951293945}",1,Compute: 4378 - 2897
536,add,8,89868936,90000000,0,90868936,0,"{'ok': True, 'value': 89868936, 'stdout': '89868936\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09745645523071289}",1,Compute: 36145445 + 53723491
537,sub,32,29245318593436726053548528140031,0,0,29251318593436526053549538136231,0,"{'ok': True, 'value': 29245318593436726053548528140031, 'stdout': '29245318593436726053548528140031\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10866069793701172}",1,Compute: 54362981764566863706083469246914 - 25117663171130137652534941106883
538,add,16,12528521955619694,1253069983518670,0,12533531837192064,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0996863842010498}",0,Compute: 4890541203518670 + 7637980752101024
539,add,4,6299,6300,0,6309,0,"{'ok': True, 'value': 6299, 'stdout': '6299\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09938311576843262}",1,Compute: 4111 + 2188
540,lcs,16,9,10,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09792208671569824}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdabbabccbbdcca""
T = ""bdccdccdaaaccbdbb"""
541,sub,2,24,24,1,24,1,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09031891822814941}",1,Compute: 56 - 32
542,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10262489318847656}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""a"""
543,mul,8,2558733877655408,25401600000000000,0,2540160000000,0,"{'ok': True, 'value': 2558733877655408, 'stdout': '2558733877655408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09243249893188477}",1,Compute: 97804004 * 26161852
544,ilp_prod,16,207,120,0,135,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__3wkn9ga/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15323114395141602}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 6, 4, 27, 12, 33]
consumption (rows=resources) = [[7, 13, 15, 6, 8, 2], [6, 14, 15, 1, 7, 2], [13, 3, 13, 1, 5, 8], [13, 11, 7, 4, 13, 11]]
capacity = [34, 36, 44, 54]
upper_bounds = [3, 3, 3, 5, 4, 4]"
545,mul,2,3120,3120,1,3120,1,"{'ok': True, 'value': 3120, 'stdout': '3120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0921475887298584}",1,Compute: 80 * 39
546,ilp_prod,8,38,132,0,55,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1mk4aa_y/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1543254852294922}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 11, 6, 12]
consumption (rows=resources) = [[5, 1, 2, 6], [3, 4, 5, 2], [3, 8, 6, 7], [8, 8, 2, 8]]
capacity = [18, 17, 17, 16]
upper_bounds = [3, 3, 3, 3]"
547,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1023414134979248}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""abd"""
548,ilp_partition,8,1,1,1,3,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10212993621826172}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 24, 14, 18, 21, 17, 22, 22]"
549,ilp_assign,32,146,10,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[41, 65, 93, 73, 81, 33, 73], [20, 50, 87, 24, 48, 42, 18], [17, 69, 92, 62, 83, 61, 95], [77, 51, 52, 94, 23, 36, 59], [50, 44, 80, 89, 19, 48, 10], [77, 19, 3, 14, 66, 30, 35], [86, 37, 26, 93, 92, 94, 2]]"
550,ilp_partition,4,1,1,1,9,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08624768257141113}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 2, 1]"
551,ilp_assign,8,28,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 15, 11, 14, 8, 21, 4], [6, 17, 2, 24, 13, 6, 1], [17, 16, 16, 12, 18, 14, 1], [21, 20, 22, 14, 13, 8, 17], [1, 18, 21, 2, 21, 7, 21], [11, 2, 5, 15, 23, 6, 15], [5, 5, 9, 17, 13, 23, 3]]"
552,ilp_assign,16,41,100,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 30, 17, 31, 47, 4, 2], [22, 31, 45, 1, 16, 36, 9], [4, 26, 7, 15, 4, 20, 40], [24, 7, 7, 18, 18, 47, 10], [16, 35, 48, 39, 10, 31, 4], [27, 29, 46, 2, 1, 22, 41], [28, 20, 32, 4, 47, 29, 21]]"
553,sub,8,12940977,12934977,0,12939997,0,"{'ok': True, 'value': 12940977, 'stdout': '12940977\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09830021858215332}",1,Compute: 70354973 - 57413996
554,sub,4,6429,6429,1,6429,1,"{'ok': True, 'value': 6429, 'stdout': '6429\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09155130386352539}",1,Compute: 9066 - 2637
555,ilp_prod,16,200,195,0,193,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lrm72epf/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16819381713867188}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [46, 19, 30, 32, 19, 44]
consumption (rows=resources) = [[11, 3, 1, 9, 14, 5], [8, 12, 13, 1, 8, 6], [8, 4, 7, 4, 7, 8], [2, 14, 11, 5, 1, 15]]
capacity = [45, 35, 34, 38]
upper_bounds = [4, 3, 3, 5, 3, 3]"
556,ilp_prod,32,290,296,0,337,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_maowkbdb/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17400193214416504}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [41, 72, 84, 40, 61, 19]
consumption (rows=resources) = [[13, 17, 21, 21, 21, 18], [6, 16, 4, 6, 4, 27], [25, 19, 3, 19, 32, 28], [21, 31, 31, 32, 7, 32]]
capacity = [94, 73, 111, 96]
upper_bounds = [4, 3, 3, 3, 3, 3]"
557,ilp_partition,32,0,422,0,279,0,"{'ok': True, 'value': 189, 'stdout': '189\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10330939292907715}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 25, 93, 12, 3, 29, 20, 7, 81, 29, 25, 88, 96, 14, 32, 63, 83, 12, 37, 58, 77, 69, 60, 57]"
558,ilp_partition,4,0,2,0,20,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11303949356079102}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 2, 2, 12]"
559,mul,4,21983990,21983990,1,22090990,0,"{'ok': True, 'value': 21983990, 'stdout': '21983990\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09442853927612305}",1,Compute: 4130 * 5323
560,rod,2,4,3,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_sh4v1zx6/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_sh4v1zx6/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08421039581298828}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 1]"
561,knap,8,94,60,0,63,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09298396110534668}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 2, 14, 14, 12, 12, 5, 6]
V = [15, 15, 4, 24, 5, 29, 21, 14]
C = 36"
562,mul{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gmslq7ee/main.py"", line 8, in <module>\n    res = multiply_large_numbers(2728106963046048, 2814118228261913)\n  File ""/tmp/cot_exec_gmslq7ee/main.py"", line 4, in multiply_large_numbers\n    digit = int(b[-i-1])\nTypeError: \'int\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10838675498962402}",0,Compute: 2728106963046048 * 2814118228261913
563,mul,2,2294,2294,1,2294,1,"{'ok': True, 'value': 2294, 'stdout': '2294\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10909342765808105}",1,Compute: 31 * 74
564,knap,8,79,55,0,51,0,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11261630058288574}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 4, 10, 8, 10, 15, 11, 3]
V = [5, 5, 15, 8, 30, 30, 1, 11]
C = 37"
565,ilp_prod,8,88,0,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_e54koz0w/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1791675090789795}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 22, 17, 6]
consumption (rows=resources) = [[6, 6, 7, 7], [5, 2, 4, 8], [6, 7, 7, 7], [5, 3, 3, 1]]
capacity = [26, 27, 28, 18]
upper_bounds = [3, 4, 3, 3]"
566,lcs,8,7,6,0,6,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0982515811920166}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcbdacc""
T = ""cadcdacac"""
567,ilp_partition,2,0,,0,8,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0948493480682373}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 5, 6, 5]"
568,mul,8,4504693237436124,45000000000000695688,0,450000000000000000,0,"{'ok': True, 'value': 4504693237436124, 'stdout': '4504693237436124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11403584480285645}",1,Compute: 51801258 * 86961078
569,mul{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_2sjk7n46/main.py"", line 8, in <module>\n    res = multiply_large_numbers(5607147726388281, 4611470672550543)\n  File ""/tmp/cot_exec_2sjk7n46/main.py"", line 4, in multiply_large_numbers\n    digit = int(b[-i-1])\nTypeError: \'int\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1032254695892334}",0,Compute: 5607147726388281 * 4611470672550543
570,lcs,16,8,10,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10644769668579102}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caddccdadbbdacaa""
T = ""cbdabadbadaabdb"""
571,add,8,116133757,111132757,0,116133757,1,"{'ok': True, 'value': 116133757, 'stdout': '116133757\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1028904914855957}",1,Compute: 58904676 + 57229081
572,ilp_prod,4,40,9,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_exd2zkhs/main.py"", line 8\n    tableau[i][i + 1] = -consumption[i][j] for j in range(n)\n                                           ^^^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11264491081237793}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 11, 6]
consumption (rows=resources) = [[2, 1, 1], [4, 3, 1], [3, 1, 2]]
capacity = [8, 9, 9]
upper_bounds = [3, 3, 4]"
573,add,16,15752600671807840,15999999999999999,0,15752600371807840,0,"{'ok': True, 'value': 15752600671807840, 'stdout': '15752600671807840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10631346702575684}",1,Compute: 7659818199809127 + 8092782471998713
574,ilp_prod,32,358,450,0,303,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_e4ngo5ge/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17510533332824707}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 86, 19, 25, 12, 50]
consumption (rows=resources) = [[2, 12, 17, 5, 21, 27], [9, 12, 31, 8, 31, 16], [12, 26, 25, 14, 8, 9], [22, 1, 13, 7, 20, 9]]
capacity = [91, 128, 112, 121]
upper_bounds = [5, 4, 4, 8, 4, 3]"
575,lcs,32,20,15,0,10,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10426163673400879}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adadcbdbdbcdaddcbaacabdbbaacaaab""
T = ""baabbbadbdbbcacdacabddbdcbccaadd"""
576,sub,16,828829147252424,8,0,8588422906525326,0,"{'ok': True, 'value': 828829147252424, 'stdout': '828829147252424\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09779024124145508}",1,Compute: 8588422906525326 - 7759593759272902
577,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10475611686706543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""b"""
578,ilp_partition,4,0,,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0946204662322998}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 5, 6, 1]"
579,sub,2,57,57,1,57,1,"{'ok': True, 'value': 57, 'stdout': '57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09338235855102539}",1,Compute: 71 - 14
580,ilp_assign,2,5,5,1,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.1146740913391113}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 6], [4, 4]]"
581,rod,4,40,40,1,22,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0966939926147461}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 10, 12, 9]"
582,ilp_prod,8,26,40,0,31,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_k8klz2yc/main.py"", line 10, in <module>\n    c = -profit  # Minimize the negative of the profit to maximize the profit\nTypeError: bad operand type for unary -: \'list\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.42687392234802246}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5, 13, 4]
consumption (rows=resources) = [[4, 2, 7, 4], [2, 6, 8, 8], [2, 7, 6, 2], [4, 7, 3, 6]]
capacity = [21, 17, 30, 18]
upper_bounds = [4, 3, 3, 3]"
583,ilp_prod,2,40,48,0,16,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.37755322456359863}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8]
consumption (rows=resources) = [[2, 2], [3, 1]]
capacity = [10, 6]
upper_bounds = [3, 5]"
584,rod,4,44,23,0,15,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09471440315246582}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 12, 4, 2]"
585,add,32,126287617034547929137958210308193,1,0,126287647034578629137958510308193,0,"{'ok': True, 'value': 126287617034547929137958210308193, 'stdout': '126287617034547929137958210308193\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11231231689453125}",1,Compute: 43205125211458717290068254377442 + 83082491823089211847889955930751
586,add,8,61874021,61874021,1,61873221,0,"{'ok': True, 'value': 61874021, 'stdout': '61874021\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10688018798828125}",1,Compute: 42174285 + 19699736
587,add,16,12537284219545845,12537281209106845,0,12537284219505845,0,"{'ok': True, 'value': 12537284219545845, 'stdout': '12537284219545845\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08561849594116211}",1,Compute: 9199547773173405 + 3337736446372440
588,lcs,4,2,4,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11004829406738281}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acca""
T = ""adac"""
589,ilp_prod,2,64,31,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_zl4aixsu/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2213599681854248}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[2, 1], [3, 1]]
capacity = [8, 8]
upper_bounds = [3, 8]"
590,sub,16,7881368629173959,7881368629174959,0,7881361619173959,0,"{'ok': True, 'value': 7881368629173959, 'stdout': '7881368629173959\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09639716148376465}",1,Compute: 9622430474360494 - 1741061845186535
591,sub,16,2569131452808419,0,0,2568931452108419,0,"{'ok': True, 'value': 2569131452808419, 'stdout': '2569131452808419\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11424589157104492}",1,Compute: 6941586069907053 - 4372454617098634
592,add,8,132216806,132216706,0,132216806,1,"{'ok': True, 'value': 132216806, 'stdout': '132216806\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09317398071289062}",1,Compute: 81439920 + 50776886
593,knap,4,27,43,0,22,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09604668617248535}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 5, 8, 4]
V = [11, 16, 4, 1]
C = 12"
594,knap,16,390,195,0,146,0,"{'ok': True, 'value': 390, 'stdout': '390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10413694381713867}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 20, 27, 5, 12, 2, 25, 19, 10, 19, 9, 11, 20, 15, 20, 29]
V = [28, 25, 7, 27, 49, 42, 46, 50, 6, 51, 12, 21, 64, 20, 46, 40]
C = 122"
595,mul,8,3369774196028184,48547679999999999,0,3391234562484,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0362019538879395}",0,Compute: 60268376 * 55912809
596,ilp_assign,4,19,28,0,18,0,"{'ok': True, 'value': -5, 'stdout': '-5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3410201072692871}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1, 11, 12], [12, 3, 9, 12], [10, 11, 6, 5], [5, 7, 7, 9]]"
597,rod,4,44,23,0,17,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0962364673614502}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 6, 5, 1]"
598,lcs,32,20,18,0,16,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10002255439758301}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdaccadddacddcacbbaacddcccadbadb""
T = ""cbcabdcdbdaccacbcdcbccdccdbbbcd"""
599,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_q3scxls3/main.py"", line 10, in <module>\n    print(max_revenue(N, P))\n  File ""/tmp/cot_exec_q3scxls3/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09438538551330566}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 2]"
600,knap,16,425,124,0,132,0,"{'ok': True, 'value': 425, 'stdout': '425\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1008598804473877}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 26, 9, 17, 3, 17, 16, 22, 6, 17, 25, 7, 9, 16, 32, 21]
V = [60, 53, 11, 60, 5, 56, 26, 51, 34, 17, 18, 49, 8, 3, 7, 57]
C = 124"
601,rod,2,6,6,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ktfh3ipq/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_ktfh3ipq/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10615682601928711}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
602,ilp_partition,8,0,,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11131024360656738}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 3, 3, 1, 1, 22, 3, 3]"
603,mul,2,4560,4560,1,4560,1,"{'ok': True, 'value': 4560, 'stdout': '4560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09662413597106934}",1,Compute: 76 * 60
604,rod,16,264,100,0,100,0,"{'ok': True, 'value': 264, 'stdout': '264\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09636902809143066}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 33, 9, 26, 12, 29, 39, 7, 33, 18, 46, 31, 12, 24, 43, 10]"
605,mul,16,24509025914032544767592624345692,23452439032177992689644906479616,0,245112475419184824706497256946502,0,"{'ok': True, 'value': 24509025914032544767592624345692, 'stdout': '24509025914032544767592624345692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10509562492370605}",1,Compute: 4706497256946502 * 5207487559428346
606,mul,8,2100506122917330,20868692000000,0,209999999999999990,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.037174701690674}",0,Compute: 34781170 * 60392049
607,sub,8,48070788,48070798,0,48070788,1,"{'ok': True, 'value': 48070788, 'stdout': '48070788\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09359884262084961}",1,Compute: 92146393 - 44075605
608,knap,8,93,60,0,61,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0836184024810791}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 7, 9, 3, 15, 10, 1, 9]
V = [2, 26, 8, 7, 21, 29, 6, 32]
C = 27"
609,lcs,32,17,16,0,17,1,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09308123588562012}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbacbdaacacbbbcbcbddbdccccbcacbb""
T = ""bcbbdbccdcbccaaddccbbaaaabbcabcd"""
610,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09264421463012695}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacabbad""
T = ""bcbabcdaa"""
611,lcs,16,9,10,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11776041984558105}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccddacdcdbdbdbb""
T = ""acbddccbadcacddd"""
612,ilp_partition,16,1,10,0,16,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11163568496704102}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [41, 5, 45, 16, 8, 42, 20, 1, 9, 26, 26, 41, 4, 8, 39, 4]"
613,knap,32,1784,1170,0,525,0,"{'ok': True, 'value': 1784, 'stdout': '1784\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11000728607177734}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [53, 18, 50, 54, 56, 59, 62, 31, 55, 32, 9, 4, 42, 45, 30, 35, 54, 41, 22, 45, 31, 25, 17, 63, 21, 22, 19, 29, 5, 49, 48, 44]
V = [123, 95, 92, 59, 121, 106, 119, 61, 26, 38, 51, 39, 58, 33, 87, 106, 117, 115, 120, 27, 49, 1, 117, 104, 128, 52, 116, 20, 44, 119, 77, 13]
C = 585"
614,add,4,9364,9004,0,9364,1,"{'ok': True, 'value': 9364, 'stdout': '9364\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11762046813964844}",1,Compute: 3960 + 5404
615,mul{'ok': True, 'value': 15728086648124242425803344437900, 'stdout': '15728086648124242425803344437900\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09809660911560059}",1,Compute: 4798084335952785 * 3277992954452940
616,knap,4,17,1,0,22,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10071635246276855}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 5, 7, 1]
V = [4, 11, 12, 5]
C = 9"
617,rod,4,20,24,0,18,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09751057624816895}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 10, 5, 8]"
618,knap,4,25,26,0,25,1,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09682726860046387}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 7, 5]
V = [9, 16, 10, 9]
C = 8"
619,add,2,97,97,1,97,1,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0917978286743164}",1,Compute: 87 + 10
620,add,32,57272280376891516829865668464791,3,0,57272280376891516829865620764791,0,"{'ok': True, 'value': 57272280376891516829865668464791, 'stdout': '57272280376891516829865668464791\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08523917198181152}",1,Compute: 45558327737223316880115511428893 + 11713952639668199949750157035898
621,sub,32,43929181327208078365449315382310,18,0,43925180425217678355371215082910,0,"{'ok': True, 'value': 43929181327208078365449315382310, 'stdout': '43929181327208078365449315382310\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09159469604492188}",1,Compute: 87358079328556567021158041744092 - 43428898001348488655708726361782
622,knap,4,28,19,0,18,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11235260963439941}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 8, 2, 3]
V = [13, 7, 6, 9]
C = 7"
623,rod,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09629988670349121}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 5]"
624,ilp_partition,2,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09400582313537598}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 3, 1, 6]"
625,ilp_prod,8,60,100,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_it9941ci/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16505074501037598}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 7, 9, 15]
consumption (rows=resources) = [[8, 5, 7, 6], [8, 6, 2, 1], [3, 8, 3, 2], [1, 2, 1, 3]]
capacity = [24, 22, 30, 28]
upper_bounds = [3, 3, 3, 4]"
626,lcs,32,16,14,0,12,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09447908401489258}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbcdadcaabadaccbbccddbdcdbcddaa""
T = ""caabdddbddcdbabbdbbaadabcbbbdab"""
627,rod,4,48,29,0,23,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09390950202941895}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 6, 2, 11]"
628,ilp_assign,8,28,105,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 4, 24, 14, 10, 24, 22], [10, 23, 14, 18, 2, 22, 24], [22, 5, 4, 6, 17, 16, 14], [4, 2, 12, 21, 11, 10, 2], [10, 15, 2, 12, 10, 18, 21], [7, 9, 24, 9, 6, 10, 17], [11, 18, 3, 23, 2, 5, 5]]"
629,sub,4,1986,2000,0,2000,0,"{'ok': True, 'value': 1986, 'stdout': '1986\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09636235237121582}",1,Compute: 4729 - 2743
630,ilp_assign,16,46,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 32, 30, 47, 2, 32, 17], [19, 18, 47, 25, 31, 8, 6], [20, 41, 25, 28, 13, 16, 34], [10, 5, 45, 46, 47, 19, 14], [7, 23, 18, 9, 15, 23, 23], [11, 48, 7, 7, 47, 13, 20], [16, 41, 5, 3, 22, 39, 47]]"
631,rod,32,2304,1000,0,345,0,"{'ok': True, 'value': 2304, 'stdout': '2304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09589385986328125}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [72, 41, 31, 65, 28, 59, 60, 20, 43, 7, 56, 15, 29, 14, 92, 41, 17, 50, 83, 94, 91, 62, 6, 36, 10, 29, 13, 38, 23, 9, 81, 5]"
632,knap,2,18,10,0,17,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11366057395935059}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 2]
V = [10, 9, 8]
C = 3"
633,sub,16,2627068166958422,6,0,2629068166958422,0,"{'ok': True, 'value': 2627068166958422, 'stdout': '2627068166958422\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09127497673034668}",1,Compute: 6373812613508908 - 3746744446550486
634,lcs,8,2,4,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10138154029846191}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbddabdd""
T = ""ccbcbaaa"""
635,ilp_prod,16,140,184,0,132,0,"{'ok': True, 'value': 140, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/64b6b61448f94d1dbda9618e930a5cca-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/64b6b61448f94d1dbda9618e930a5cca-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 64 RHS\nAt line 75 BOUNDS\nAt line 82 ENDATA\nProblem MODEL has 10 rows, 6 columns and 30 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 153.607 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -105 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -140 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 5\nCbc0013I At root node, 2 cuts changed objective from -153.60748 to -140 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -140, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -153.607 to -140\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                140.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n140.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17574334144592285}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 35, 20, 12, 16, 32]
consumption (rows=resources) = [[2, 9, 4, 3, 2, 3], [16, 5, 16, 15, 13, 8], [2, 14, 6, 2, 10, 15], [2, 5, 7, 7, 6, 7]]
capacity = [40, 33, 56, 33]
upper_bounds = [3, 4, 3, 3, 3, 3]"
636,add,16,15190811348896785,15200811236896955,0,15211211238876725,0,"{'ok': True, 'value': 15190811348896785, 'stdout': '15190811348896785\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10916781425476074}",1,Compute: 7734001476464693 + 7456809872432092
637,ilp_partition,8,1,1,1,51,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10008406639099121}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 12, 21, 21, 6, 9, 4, 3]"
638,rod,16,256,110,0,117,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09687972068786621}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [16, 17, 5, 46, 33, 21, 16, 42, 40, 36, 15, 17, 11, 41, 9, 4]"
639,sub,8,39389539,39389549,0,39389539,1,"{'ok': True, 'value': 39389539, 'stdout': '39389539\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11230754852294922}",1,Compute: 97170675 - 57781136
640,lcs,32,20,15,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09528183937072754}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcddacaaaccabdbacdbabddccdbcabaa""
T = ""accbdbbaccaabacaacbabdddadaaabcd"""
641,ilp_prod,16,256,155,0,120,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.6245763301849365}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 46, 34, 24, 38, 17]
consumption (rows=resources) = [[12, 2, 2, 4, 6, 16], [15, 3, 13, 2, 5, 3], [10, 1, 15, 8, 8, 7], [5, 13, 5, 5, 6, 12]]
capacity = [35, 55, 33, 63]
upper_bounds = [3, 4, 3, 4, 4, 3]"
642,ilp_partition,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09381461143493652}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 3, 5]"
643,rod,16,464,102,0,102,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11155080795288086}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [29, 3, 7, 12, 27, 9, 44, 32, 33, 15, 16, 4, 24, 11, 36, 43]"
644,ilp_assign,32,128,120,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 21, 49, 82, 69, 61, 90], [79, 38, 31, 44, 22, 51, 39], [91, 83, 74, 17, 31, 44, 9], [61, 38, 15, 49, 56, 30, 32], [29, 60, 29, 43, 95, 49, 78], [59, 77, 63, 26, 11, 17, 72], [69, 48, 2, 23, 27, 74, 7]]"
645,ilp_prod,8,86,78,0,101,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lmfg0b19/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1749098300933838}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 21, 13, 21]
consumption (rows=resources) = [[3, 3, 2, 4], [8, 4, 6, 3], [4, 5, 3, 3], [7, 7, 8, 6]]
capacity = [17, 18, 16, 27]
upper_bounds = [3, 3, 3, 4]"
646,ilp_prod,8,68,60,0,71,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1nvg5yog/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18376851081848145}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 13, 3, 17]
consumption (rows=resources) = [[3, 1, 7, 4], [5, 8, 4, 1], [7, 7, 7, 7], [5, 8, 6, 1]]
capacity = [18, 31, 29, 21]
upper_bounds = [4, 3, 3, 4]"
647,sub,4,785,8085,0,785,1,"{'ok': True, 'value': 785, 'stdout': '785\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09618639945983887}",1,Compute: 5647 - 4862
648,knap,16,412,146,0,135,0,"{'ok': True, 'value': 412, 'stdout': '412\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08258843421936035}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 15, 14, 18, 16, 28, 18, 16, 24, 32, 27, 13, 30, 21, 3, 15]
V = [29, 20, 55, 16, 10, 54, 55, 49, 59, 13, 26, 8, 51, 27, 28, 56]
C = 146"
649,rod,4,20,25,0,18,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09978747367858887}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 7, 2, 11]"
650,ilp_prod,16,174,390,0,183,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dxlolrif/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x_{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16042613983154297}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 47, 5, 44, 30, 40]
consumption (rows=resources) = [[10, 14, 10, 6, 6, 5], [1, 1, 14, 7, 8, 15], [4, 1, 14, 6, 10, 15], [6, 13, 7, 10, 11, 4]]
capacity = [39, 39, 62, 35]
upper_bounds = [3, 3, 3, 3, 3, 3]"
651,ilp_partition,2,0,1,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09286665916442871}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 2, 5]"
652,ilp_assign,32,69,11,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 12, 49, 47, 35, 60, 50], [30, 41, 31, 95, 89, 56, 21], [13, 22, 73, 15, 96, 57, 23], [17, 3, 85, 43, 25, 2, 39], [9, 28, 72, 78, 8, 24, 79], [41, 33, 80, 3, 43, 86, 62], [44, 47, 10, 75, 47, 36, 65]]"
653,sub,8,53143102,53143102,1,53143102,1,"{'ok': True, 'value': 53143102, 'stdout': '53143102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09235978126525879}",1,Compute: 83815221 - 30672119
654,sub,16,2144384052261496,2144353269245376,0,2144383952256496,0,"{'ok': True, 'value': 2144384052261496, 'stdout': '2144384052261496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10156774520874023}",1,Compute: 4410353269245376 - 2265969216983880
655,ilp_assign,4,16,17,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0478389263153076}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 11, 9, 7], [3, 4, 4, 2], [10, 3, 10, 9], [2, 12, 5, 8]]"
656,add,16,14111464439886455,,0,14111464440086455,0,"{'ok': True, 'value': 14111464439886455, 'stdout': '14111464439886455\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09801673889160156}",1,Compute: 8444892575517522 + 5666571864368933
657,ilp_prod,32,327,936,0,210,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.422487735748291}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [38, 69, 29, 54, 20, 73]
consumption (rows=resources) = [[20, 21, 9, 5, 14, 24], [31, 7, 4, 4, 25, 12], [17, 32, 11, 25, 9, 8], [29, 9, 4, 5, 30, 9]]
capacity = [91, 85, 75, 87]
upper_bounds = [3, 3, 6, 3, 3, 3]"
658,lcs,16,7,10,0,10,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10939216613769531}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caddbbcadaddadaa""
T = ""cdcccbdbbdabbbc"""
659,ilp_partition,32,0,10,0,332,0,"{'ok': True, 'value': 178, 'stdout': '178\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1155848503112793}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [88, 59, 10, 54, 49, 55, 37, 61, 60, 81, 49, 74, 90, 69, 73, 84, 16, 45, 6, 63, 31, 48, 27, 15]"
660,lcs,16,9,10,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11476540565490723}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbacdbbbbcacbdcb""
T = ""daccbabdbcdbccca"""
661,ilp_partition,16,1,1,1,311,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11749124526977539}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 46, 14, 44, 12, 37, 32, 43, 48, 16, 9, 14, 3, 33, 22, 16]"
662,ilp_prod,16,130,125,0,117,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_jzx5ya4f/main.py"", line 19, in <module>\n    prob += pulp.lpSum([consumption[j][i] * x[j] for j in range(6)]) <= capacity[i]\n  File ""/tmp/cot_exec_jzx5ya4f/main.py"", line 19, in <listcomp>\n    prob += pulp.lpSum([consumption[j][i] * x[j] for j in range(6)]) <= capacity[i]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19061994552612305}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 25, 18, 20, 34, 19]
consumption (rows=resources) = [[3, 8, 14, 13, 16, 6], [14, 15, 14, 8, 15, 3], [13, 13, 7, 7, 5, 2], [5, 15, 12, 12, 4, 9]]
capacity = [47, 52, 51, 33]
upper_bounds = [3, 3, 3, 3, 3, 3]"
663,sub,4,1636,1636,1,1636,1,"{'ok': True, 'value': 1636, 'stdout': '1636\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12105751037597656}",1,Compute: 8246 - 6610
664,add,8,83112993,83212313,0,83110993,0,"{'ok': True, 'value': 83112993, 'stdout': '83112993\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1099095344543457}",1,Compute: 32550680 + 50562313
665,knap,8,129,70,0,71,0,"{'ok': True, 'value': 129, 'stdout': '129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1005556583404541}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 1, 16, 3, 14, 3, 16, 4]
V = [9, 26, 27, 16, 25, 31, 21, 29]
C = 36"
666,knap,32,1437,500,0,463,0,"{'ok': True, 'value': 1437, 'stdout': '1437\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09062671661376953}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 49, 31, 11, 34, 5, 53, 19, 35, 56, 29, 42, 56, 28, 14, 28, 47, 64, 21, 41, 49, 15, 30, 52, 55, 60, 51, 37, 17, 28, 42, 4]
V = [19, 21, 82, 109, 15, 125, 30, 4, 119, 63, 121, 75, 98, 90, 67, 54, 16, 32, 27, 32, 12, 21, 46, 75, 105, 16, 22, 30, 50, 38, 116, 3]
C = 563"
667,add,8,125165934,135165934,0,125165934,1,"{'ok': True, 'value': 125165934, 'stdout': '125165934\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08119463920593262}",1,Compute: 33974074 + 91191860
668,ilp_partition,2,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0931081771850586}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 3, 6, 2]"
669,ilp_prod,4,77,28,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_cmh7v27v/main.py"", line 8\n    tableau[i][i] = -consumption[i][j] for j in range(n)\n                                       ^^^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10314321517944336}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 11, 11]
consumption (rows=resources) = [[4, 1, 2], [4, 2, 3], [1, 1, 2]]
capacity = [14, 15, 16]
upper_bounds = [3, 7, 5]"
670,ilp_partition,8,1,1,1,69,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09863686561584473}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 8, 13, 10, 18, 5, 10, 5]"
671,rod,16,512,152,0,109,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10567164421081543}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [32, 6, 11, 48, 41, 44, 39, 25, 45, 41, 32, 17, 29, 2, 27, 3]"
672,sub,8,6493886,64939206,0,6493916,0,"{'ok': True, 'value': 6493886, 'stdout': '6493886\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10421538352966309}",1,Compute: 30912035 - 24418149
673,knap,32,1339,547,0,437,0,"{'ok': True, 'value': 1339, 'stdout': '1339\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10279655456542969}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [60, 39, 34, 61, 32, 43, 28, 55, 39, 15, 6, 43, 50, 61, 14, 10, 16, 60, 43, 37, 50, 9, 48, 26, 63, 9, 11, 58, 47, 43, 39, 16]
V = [99, 15, 56, 119, 122, 31, 74, 92, 63, 29, 123, 40, 112, 14, 12, 7, 10, 25, 71, 27, 54, 26, 67, 5, 22, 75, 43, 119, 35, 48, 52, 49]
C = 582"
674,rod,2,6,6,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_mtb816nv/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_mtb816nv/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09401178359985352}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 1]"
675,ilp_prod,32,467,420,0,296,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.4066329002380371}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [80, 89, 8, 20, 18, 93]
consumption (rows=resources) = [[12, 17, 1, 9, 4, 4], [11, 14, 16, 18, 25, 10], [22, 16, 28, 30, 4, 32], [20, 14, 7, 11, 21, 8]]
capacity = [76, 115, 104, 110]
upper_bounds = [4, 4, 3, 3, 4, 3]"
676,rod,16,688,240,0,207,0,"{'ok': True, 'value': 688, 'stdout': '688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10946226119995117}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [43, 44, 32, 42, 47, 21, 20, 18, 11, 23, 43, 34, 48, 47, 24, 6]"
677,mul{'ok': True, 'value': 13827919926096555934414434224259, 'stdout': '13827919926096555934414434224259\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10380172729492188}",1,Compute: 7532098108682363 * 1835865614941593
678,knap,16,346,158,0,158,0,"{'ok': True, 'value': 346, 'stdout': '346\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09628438949584961}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [26, 32, 26, 24, 4, 4, 27, 28, 11, 10, 22, 13, 10, 32, 27, 21]
V = [1, 47, 48, 47, 11, 50, 17, 5, 19, 7, 40, 34, 43, 6, 11, 17]
C = 158"
679,mul,2,4575,4575,1,4575,1,"{'ok': True, 'value': 4575, 'stdout': '4575\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1187436580657959}",1,Compute: 61 * 75
680,sub,8,33105461,33105461,1,33105461,1,"{'ok': True, 'value': 33105461, 'stdout': '33105461\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.105621337890625}",1,Compute: 52391688 - 19286227
681,sub{'ok': True, 'value': 10126444715717944931942427418879, 'stdout': '10126444715717944931942427418879\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08579373359680176}",1,Compute: 94348110457904245678213062148931 - 84221665742186300746270634730052
682,knap,32,1530,462,0,347,0,"{'ok': True, 'value': 1530, 'stdout': '1530\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08900022506713867}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [50, 26, 38, 5, 42, 29, 51, 3, 51, 64, 56, 39, 57, 28, 50, 35, 12, 19, 1, 32, 63, 41, 41, 11, 40, 19, 23, 1, 26, 8, 35, 61]
V = [25, 67, 86, 77, 72, 93, 59, 50, 117, 17, 69, 97, 36, 37, 25, 87, 31, 77, 38, 14, 39, 4, 105, 41, 61, 24, 52, 69, 117, 34, 122, 46]
C = 528"
683,ilp_assign,2,7,0,0,7,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0656800270080566}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5], [6, 3]]"
684,ilp_partition,8,0,1,0,72,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11073112487792969}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 2, 9, 20, 5, 15, 7, 5]"
685,mul{'ok': True, 'value': 9675947662478189961428379447225, 'stdout': '9675947662478189961428379447225\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10429048538208008}",1,Compute: 8396781738633243 * 1152340023078075
686,ilp_partition,32,0,0,1,748,0,"{'ok': True, 'value': 66, 'stdout': '66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09587574005126953}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 29, 92, 17, 20, 1, 66, 75, 57, 95, 80, 94, 4, 86, 27, 55, 21, 64, 13, 78, 13, 33, 49, 28]"
687,mul{'ok': True, 'value': 2729010341119597094581066648540591597543429683541473972284000730, 'stdout': '2729010341119597094581066648540591597543429683541473972284000730\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09381818771362305}",0,Compute: 93786977993333062198683745952095 * 43163852656534459966517466979092
688,sub,8,14192091,14192091,1,14192091,1,"{'ok': True, 'value': 14192091, 'stdout': '14192091\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09826326370239258}",1,Compute: 47216217 - 33024126
689,sub,32,57050558046703681697753864523080,7,0,57050558046703681697753864523080,1,"{'ok': True, 'value': 57050558046703681697753864523080, 'stdout': '57050558046703681697753864523080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09345054626464844}",1,Compute: 82787508108344166425298998372211 - 25736950061640484727545133849131
690,mul,8,3530279361272576,2725547936,0,352137817216,0,"{'ok': True, 'value': 3530279361272576, 'stdout': '3530279361272576\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.9792559146881104}",1,Compute: 92395721 * 38208256
691,knap,2,5,7,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08582425117492676}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 3]
V = [2, 5, 2]
C = 3"
692,lcs,16,8,10,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09757232666015625}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbcacbccbadbdba""
T = ""adbdcdbabbdddcca"""
693,ilp_prod,8,96,53,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_w7r5sqnc/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1517775058746338}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 11, 18, 3]
consumption (rows=resources) = [[3, 8, 2, 4], [3, 2, 7, 1], [3, 2, 2, 8], [8, 1, 1, 5]]
capacity = [17, 32, 31, 22]
upper_bounds = [3, 3, 4, 3]"
694,sub,32,31073328961688357112695122850435,0,0,31048358961688357112624628846335,0,"{'ok': True, 'value': 31073328961688357112695122850435, 'stdout': '31073328961688357112695122850435\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08421683311462402}",1,Compute: 63379470031444848720614569991485 - 32306141069756491607919447141050
695,ilp_partition,2,0,0,1,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09368228912353516}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 2, 4]"
696,add,2,109,109,1,109,1,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10059642791748047}",1,Compute: 27 + 82
697,ilp_assign,4,15,20,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.066458225250244}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5, 12, 8], [1, 12, 9, 5], [4, 9, 2, 9], [6, 6, 5, 9]]"
698,mul{'ok': True, 'value': 2494243233923072, 'stdout': '2494243233923072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08477306365966797}",1,Compute: 42795008 * 58283509
699,ilp_prod,4,38,37,0,29,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xess5kx5/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1881868839263916}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4, 11]
consumption (rows=resources) = [[2, 4, 3], [1, 1, 4], [2, 4, 2]]
capacity = [14, 11, 9]
upper_bounds = [4, 3, 3]"
700,rod,8,72,107,0,32,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_movniwzm/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_movniwzm/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10622382164001465}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 12, 9, 18, 13, 13, 17, 17]"
701,ilp_prod,2,22,15,0,18,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6bfcg3y0/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17991232872009277}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[1, 3], [3, 1]]
capacity = [9, 9]
upper_bounds = [3, 3]"
702,mul{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_e1ty7qkz/main.py"", line 8, in <module>\n    result = multiply_large_numbers(26480494744095764721974595101497, 71937189053540261845613646101039)\n  File ""/tmp/cot_exec_e1ty7qkz/main.py"", line 4, in multiply_large_numbers\n    digit = int(b[-i-1])\nTypeError: \'int\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09724736213684082}",0,Compute: 26480494744095764721974595101497 * 71937189053540261845613646101039
703,ilp_assign,32,104,11,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[74, 40, 24, 91, 83, 55, 28], [25, 8, 11, 83, 26, 22, 47], [53, 29, 88, 27, 1, 57, 47], [66, 74, 5, 38, 65, 78, 67], [89, 20, 15, 29, 83, 66, 12], [81, 21, 91, 54, 57, 13, 73], [43, 3, 67, 82, 40, 8, 54]]"
704,knap,4,17,18,0,17,1,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10669183731079102}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 8, 6, 2]
V = [5, 5, 9, 8]
C = 12"
705,knap,4,15,15,1,12,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09149622917175293}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 7, 2, 2]
V = [5, 7, 5, 8]
C = 9"
706,lcs,8,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10665130615234375}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbabaaa""
T = ""ddcbddadd"""
707,rod,32,768,546,0,243,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10777616500854492}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [24, 18, 27, 23, 71, 2, 68, 68, 58, 6, 94, 70, 38, 43, 26, 94, 68, 44, 24, 63, 78, 54, 27, 65, 84, 7, 56, 30, 46, 68, 91, 33]"
708,knap,32,1479,514,0,345,0,"{'ok': True, 'value': 1479, 'stdout': '1479\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11997389793395996}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [49, 48, 63, 24, 41, 11, 59, 32, 40, 54, 52, 52, 17, 28, 25, 3, 21, 45, 18, 39, 42, 11, 4, 7, 8, 34, 25, 25, 31, 43, 49, 28]
V = [21, 74, 32, 56, 28, 67, 96, 33, 69, 23, 51, 82, 5, 90, 105, 23, 55, 11, 5, 115, 79, 61, 5, 100, 117, 45, 113, 9, 3, 34, 78, 123]
C = 514"
709,lcs,4,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09035468101501465}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdc""
T = ""babcb"""
710,ilp_assign,2,6,0,0,140,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 1], [5, 6]]"
711,ilp_partition,2,2,1,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0855717658996582}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 5, 4]"
712,ilp_prod,2,12,16,0,12,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.37601518630981445}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 4]
consumption (rows=resources) = [[3, 3], [1, 2]]
capacity = [10, 10]
upper_bounds = [3, 3]"
713,add,2,119,119,1,119,1,"{'ok': True, 'value': 119, 'stdout': '119\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08521199226379395}",1,Compute: 80 + 39
714,knap,32,1986,597,0,555,0,"{'ok': True, 'value': 1986, 'stdout': '1986\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09990096092224121}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 11, 23, 1, 56, 40, 6, 56, 27, 25, 63, 4, 40, 30, 13, 43, 2, 64, 54, 27, 30, 60, 21, 21, 19, 21, 59, 46, 13, 31, 38, 55]
V = [111, 115, 2, 104, 38, 112, 65, 100, 94, 78, 110, 124, 28, 85, 26, 43, 40, 78, 47, 23, 116, 128, 105, 26, 123, 99, 97, 93, 80, 77, 115, 122]
C = 511"
715,sub,8,5207898,52079898,0,5207998,0,"{'ok': True, 'value': 5207898, 'stdout': '5207898\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0958855152130127}",1,Compute: 99367997 - 94160099
716,mul,4,1358420,1358320,0,1351660,0,"{'ok': True, 'value': 1358420, 'stdout': '1358420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10045170783996582}",1,Compute: 1252 * 1085
717,knap,8,85,44,0,46,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11153221130371094}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 7, 12, 4, 4, 12, 4]
V = [13, 8, 6, 1, 28, 16, 6, 20]
C = 25"
718,mul,8,6066452638045100,370,0,600000000000000000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.035644292831421}",0,Compute: 68969575 * 87958388
719,rod,4,40,38,0,24,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10945892333984375}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 3, 11, 4]"
720,knap,2,10,14,0,9,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1157383918762207}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 1]
V = [5, 4, 10]
C = 3"
721,sub,32,48420005895477512954085724582912,1,0,48375975895517412954086494383612,0,"{'ok': True, 'value': 48420005895477512954085724582912, 'stdout': '48420005895477512954085724582912\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09440350532531738}",1,Compute: 92037530104967260400766491717061 - 43617524209489747446680767134149
722,sub,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10583949089050293}",1,Compute: 30 - 23
723,add,32,57837320926072483787173507804680,57835311028192183856204308258110,0,182654850705919271318352778252220,0,"{'ok': True, 'value': 57837320926072483787173507804680, 'stdout': '57837320926072483787173507804680\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09261679649353027}",1,Compute: 13868614431208587281241433388394 + 43968706494863896505932074416286
724,add,16,14244659026116539,10,0,14244659026116439,0,"{'ok': True, 'value': 14244659026116539, 'stdout': '14244659026116539\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09014773368835449}",1,Compute: 9683599369144471 + 4561059656972068
725,knap,8,90,61,0,62,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09430837631225586}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 16, 14, 9, 4, 11, 5, 9]
V = [2, 7, 24, 30, 17, 7, 19, 9]
C = 38"
726,sub,4,2564,2564,1,2564,1,"{'ok': True, 'value': 2564, 'stdout': '2564\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10345816612243652}",1,Compute: 5498 - 2934
727,ilp_assign,16,45,120,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 32, 39, 27, 3, 16, 8], [47, 25, 44, 35, 34, 2, 38], [20, 1, 2, 16, 34, 46, 41], [25, 18, 41, 24, 47, 1, 14], [40, 47, 28, 14, 47, 29, 33], [4, 9, 35, 40, 18, 42, 3], [7, 26, 7, 4, 32, 39, 32]]"
728,add,16,18201245254435899,1,0,1819129503200000,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10096955299377441}",0,Compute: 8477036606133886 + 9724208648302013
729,lcs,4,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09161520004272461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddad""
T = ""dacda"""
730,ilp_prod,8,88,100,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_goz3pup0/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15199589729309082}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 18, 14, 12]
consumption (rows=resources) = [[1, 2, 1, 3], [4, 8, 5, 7], [7, 1, 2, 7], [3, 4, 8, 7]]
capacity = [31, 19, 29, 21]
upper_bounds = [4, 3, 3, 3]"
731,ilp_assign,8,25,10,0,0,0,"{'ok': True, 'value': -6, 'stdout': '-6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21034741401672363}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 12, 11, 17, 15, 6, 13], [21, 16, 19, 6, 2, 17, 7], [22, 8, 5, 4, 9, 18, 1], [1, 12, 10, 7, 2, 10, 22], [22, 5, 5, 3, 23, 6, 19], [14, 9, 5, 3, 7, 6, 20], [14, 7, 13, 18, 16, 6, 20]]"
732,ilp_partition,8,1,10,0,25,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08746623992919922}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 21, 5, 7, 5, 23, 8, 15]"
733,sub,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10353207588195801}",1,Compute: 74 - 64
734,rod,32,1952,1024,0,432,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11450338363647461}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [61, 72, 96, 23, 4, 50, 37, 72, 62, 2, 96, 88, 7, 51, 38, 11, 52, 82, 24, 94, 89, 18, 5, 72, 90, 83, 32, 21, 3, 23, 54, 43]"
735,ilp_assign,32,125,210,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[61, 79, 80, 18, 92, 25, 89], [86, 8, 13, 81, 70, 78, 69], [47, 47, 13, 62, 38, 96, 44], [91, 3, 57, 3, 24, 1, 8], [73, 91, 72, 8, 70, 76, 88], [35, 32, 22, 95, 75, 82, 7], [54, 70, 6, 66, 40, 92, 42]]"
736,sub,4,3888,3888,1,3888,1,"{'ok': True, 'value': 3888, 'stdout': '3888\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11311554908752441}",1,Compute: 6005 - 2117
737,ilp_prod,32,404,294,0,266,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_5x1gq89x/main.py"", line 17, in <module>\n    prob += pulp.lpSum([consumption[j][i] * x[j] for j in range(6)]) <= capacity[i]\n  File ""/tmp/cot_exec_5x1gq89x/main.py"", line 17, in <listcomp>\n    prob += pulp.lpSum([consumption[j][i] * x[j] for j in range(6)]) <= capacity[i]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16662096977233887}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 78, 70, 78, 54, 53]
consumption (rows=resources) = [[25, 30, 10, 14, 17, 21], [18, 4, 21, 26, 4, 32], [7, 16, 14, 10, 2, 12], [1, 28, 18, 18, 1, 7]]
capacity = [70, 112, 87, 96]
upper_bounds = [3, 3, 5, 4, 4, 3]"
738,knap,32,1802,486,0,486,0,"{'ok': True, 'value': 1802, 'stdout': '1802\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10299539566040039}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [20, 51, 32, 20, 44, 27, 32, 49, 1, 62, 37, 18, 28, 44, 44, 34, 7, 4, 10, 31, 52, 24, 5, 26, 32, 31, 44, 56, 42, 7, 1, 57]
V = [87, 85, 42, 58, 128, 2, 101, 12, 73, 112, 4, 74, 38, 35, 104, 1, 110, 125, 37, 52, 31, 81, 127, 112, 18, 81, 91, 54, 20, 56, 108, 32]
C = 486"
739,knap,32,1683,493,0,493,0,"{'ok': True, 'value': 1683, 'stdout': '1683\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12640905380249023}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [51, 59, 12, 9, 17, 62, 45, 34, 5, 34, 25, 23, 21, 60, 21, 56, 54, 20, 31, 1, 38, 5, 8, 23, 52, 57, 19, 28, 60, 26, 14, 17]
V = [28, 66, 76, 7, 92, 81, 73, 9, 84, 5, 2, 99, 118, 45, 98, 56, 2, 51, 38, 125, 14, 94, 100, 106, 45, 123, 41, 45, 46, 119, 30, 55]
C = 493"
740,sub,2,25,25,1,25,1,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1066596508026123}",1,Compute: 85 - 60
741,sub,16,2046647554294891,7,0,2046647554294891,1,"{'ok': True, 'value': 2046647554294891, 'stdout': '2046647554294891\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09272146224975586}",1,Compute: 8828690315959901 - 6782042761665010
742,mul,2,6960,6960,1,6960,1,"{'ok': True, 'value': 6960, 'stdout': '6960\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08261632919311523}",1,Compute: 80 * 87
743,ilp_partition,32,1,100,0,902,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09478616714477539}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [38, 6, 78, 91, 58, 14, 93, 36, 75, 91, 23, 4, 62, 5, 82, 27, 91, 63, 4, 69, 64, 44, 63, 38]"
744,ilp_partition,2,2,2,1,0,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1006462574005127}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 2, 6]"
745,ilp_assign,2,4,4,1,2,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21033549308776855}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [3, 2]]"
746,ilp_assign,16,74,10,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[29, 14, 18, 11, 35, 20, 47], [26, 1, 13, 37, 39, 31, 1], [19, 41, 48, 17, 36, 17, 5], [25, 3, 37, 36, 45, 3, 13], [45, 31, 14, 26, 21, 20, 32], [40, 33, 17, 46, 17, 39, 11], [26, 26, 32, 36, 15, 16, 27]]"
747,rod,8,120,72,0,72,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_24b3i8e4/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_24b3i8e4/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08806705474853516}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 24, 1, 18, 8, 16, 6, 18]"
748,ilp_partition,8,0,,0,58,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10395669937133789}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 10, 1, 21, 8, 6, 22]"
749,knap,2,17,12,0,19,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0980827808380127}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 5]
V = [10, 7, 2]
C = 4"
750,knap,8,100,63,0,63,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0959787368774414}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 12, 14, 13, 14, 1, 13, 5]
V = [28, 9, 4, 19, 25, 28, 7, 13]
C = 44"
751,mul{'ok': True, 'value': 14690794654061212377330680871338, 'stdout': '14690794654061212377330680871338\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09497213363647461}",1,Compute: 9623599841393086 * 1526538394798283
752,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10816049575805664}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcb""
T = ""dbbca"""
753,lcs,32,20,17,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11461043357849121}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabbbbdacdbbadcaacbccddcadccbdac""
T = ""dcabbcdcaadcacbaaaadcaacbcdcada"""
754,mul{'ok': True, 'value': 4377809343134541713528870198825824099153139802910891601558931504, 'stdout': '4377809343134541713528870198825824099153139802910891601558931504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0931549072265625}",0,Compute: 81696265098621088069121140537974 * 69098477573222522865618370468535
755,ilp_assign,2,10,92,0,10,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lnvm52t7/main.py"", line 59, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_lnvm52t7/main.py"", line 53, in hungarian_algorithm\n    uncover_rows()\n  File ""/tmp/cot_exec_lnvm52t7/main.py"", line 41, in uncover_rows\n    cost_matrix[i][j] += min_cost\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.208848237991333}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6], [5, 4]]"
756,rod,16,304,120,0,100,0,"{'ok': True, 'value': 304, 'stdout': '304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0971066951751709}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [19, 4, 23, 13, 22, 12, 16, 9, 6, 3, 7, 10, 20, 21, 32, 38]"
757,add,4,14260,14260,1,14260,1,"{'ok': True, 'value': 14260, 'stdout': '14260\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10284137725830078}",1,Compute: 6186 + 8074
758,rod,32,608,123,0,420,0,"{'ok': True, 'value': 608, 'stdout': '608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1037607192993164}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [19, 34, 4, 72, 41, 12, 1, 39, 28, 18, 42, 71, 48, 29, 91, 30, 24, 86, 38, 42, 40, 6, 13, 48, 37, 6, 63, 9, 61, 61, 32, 23]"
759,ilp_assign,32,106,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 35, 18, 69, 63, 35, 34], [69, 11, 20, 44, 18, 30, 57], [82, 55, 92, 76, 79, 69, 12], [32, 33, 61, 72, 49, 88, 90], [32, 3, 32, 91, 75, 53, 54], [44, 85, 6, 14, 3, 1, 33], [50, 15, 47, 26, 53, 9, 65]]"
760,sub,32,38684387525422086572620408274417,3868035752542278637855343915424,0,38619357025422086470882418274417,0,"{'ok': True, 'value': 38684387525422086572620408274417, 'stdout': '38684387525422086572620408274417\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09463214874267578}",1,Compute: 90834912598412315210475752189841 - 52150525072990228637855343915424
761,knap,8,123,75,0,70,0,"{'ok': True, 'value': 123, 'stdout': '123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09394121170043945}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 4, 12, 9, 10, 10, 5, 4]
V = [9, 30, 3, 29, 31, 21, 24, 9]
C = 35"
762,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10296273231506348}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 3, 5, 1]"
763,mul,4,29875200,3142003,0,28160000,0,"{'ok': True, 'value': 29875200, 'stdout': '29875200\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10514044761657715}",1,Compute: 9600 * 3112
764,mul,16,30525369645362140878647290400010,0,0,30473052003598573429929000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 30525369645362140878647290400010, 'stdout': '30525369645362140878647290400010\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10281920433044434}",1,Compute: 3159291621198495 * 9662093059260598
765,knap,4,25,28,0,22,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09128665924072266}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 7, 5, 8]
V = [9, 12, 16, 11]
C = 10"
766,knap,8,116,100,0,61,0,"{'ok': True, 'value': 116, 'stdout': '116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09244465827941895}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 15, 4, 2, 6, 1, 2, 14]
V = [18, 27, 9, 16, 24, 27, 22, 4]
C = 29"
767,ilp_assign,32,93,10,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 20, 47, 10, 13, 32, 71], [78, 79, 80, 41, 83, 79, 76], [78, 5, 28, 29, 45, 18, 9], [17, 65, 15, 31, 18, 26, 62], [34, 51, 46, 82, 68, 13, 44], [92, 73, 1, 27, 92, 25, 34], [67, 23, 12, 88, 62, 16, 3]]"
768,ilp_prod,4,20,27,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_26v4_npo/main.py"", line 8\n    tableau[i][i + 1] = -consumption[i][j] for j in range(n)\n                                           ^^^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09369039535522461}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 3, 9]
consumption (rows=resources) = [[4, 3, 3], [4, 4, 4], [1, 1, 4]]
capacity = [8, 8, 8]
upper_bounds = [3, 3, 3]"
769,ilp_partition,4,1,3,0,1,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10131502151489258}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 1, 4, 9]"
770,knap,2,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09447026252746582}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 4]
V = [2, 1, 4]
C = 3"
771,add,16,15112054370883794,7,0,1511202037166176,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11112761497497559}",0,Compute: 9437522777972998 + 5674531592910796
772,mul,2,3740,3740,1,3740,1,"{'ok': True, 'value': 3740, 'stdout': '3740\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10132980346679688}",1,Compute: 55 * 68
773,add,32,99327329427395891740174482948897,0,0,99327329427396188760174482950897,0,"{'ok': True, 'value': 99327329427395891740174482948897, 'stdout': '99327329427395891740174482948897\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10199713706970215}",1,Compute: 39980017101052887705800461898868 + 59347312326343004034374021050029
774,ilp_partition,32,0,10,0,708,0,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10134243965148926}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [49, 50, 80, 14, 52, 53, 25, 94, 24, 7, 9, 96, 55, 6, 48, 52, 22, 11, 81, 19, 81, 67, 89, 18]"
775,rod,8,96,86,0,13,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08921670913696289}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 14, 19, 8, 15, 9, 13, 12]"
776,ilp_prod,4,69,35,0,25,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_qb2rpm1k/main.py"", line 8\n    tableau[i][i] = -consumption[i][j] for j in range(n)\n                                       ^^^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0933830738067627}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 9, 10]
consumption (rows=resources) = [[1, 1, 4], [1, 1, 4], [1, 2, 1]]
capacity = [8, 12, 15]
upper_bounds = [8, 7, 3]"
777,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_3copqg0f/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_3copqg0f/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10403752326965332}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
778,ilp_prod,16,128,150,0,156,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_mqt1wvn4/main.py"", line 17, in <module>\n    prob += pulp.lpSum([consumption[j][i] * x[j] for j in range(6)]) <= capacity[i]\n  File ""/tmp/cot_exec_mqt1wvn4/main.py"", line 17, in <listcomp>\n    prob += pulp.lpSum([consumption[j][i] * x[j] for j in range(6)]) <= capacity[i]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17551207542419434}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 31, 21, 35, 25, 15]
consumption (rows=resources) = [[5, 10, 4, 16, 12, 13], [6, 2, 3, 16, 2, 13], [5, 5, 6, 3, 13, 7], [13, 12, 14, 6, 14, 9]]
capacity = [46, 55, 32, 50]
upper_bounds = [3, 4, 3, 3, 3, 3]"
779,mul,4,13338072,13337392,0,13246312,0,"{'ok': True, 'value': 13338072, 'stdout': '13338072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11066794395446777}",1,Compute: 1452 * 9186
780,mul,2,735,735,1,735,1,"{'ok': True, 'value': 735, 'stdout': '735\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09383916854858398}",1,Compute: 15 * 49
781,knap,16,435,154,0,132,0,"{'ok': True, 'value': 435, 'stdout': '435\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10124015808105469}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 25, 24, 28, 13, 11, 1, 28, 3, 16, 4, 26, 8, 24, 24]
V = [18, 49, 13, 41, 63, 1, 60, 31, 52, 11, 56, 49, 3, 45, 38, 30]
C = 121"
782,add,2,172,172,1,172,1,"{'ok': True, 'value': 172, 'stdout': '172\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11189651489257812}",1,Compute: 93 + 79
783,mul,32,3279508359011625447989050296673599794601316213544498324464211538,3,0,32739436897338372176565425699271779360258,0,"{'ok': True, 'value': 1160487028253670969105537547272879763128120220714934769731710614, 'stdout': '1160487028253670969105537547272879763128120220714934769731710614\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08865118026733398}",0,Compute: 97136671811423245126730614519758 * 33761794571038166789298605964911
784,rod,32,688,1000,0,385,0,"{'ok': True, 'value': 688, 'stdout': '688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1006767749786377}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [12, 43, 25, 41, 34, 51, 44, 27, 74, 68, 50, 27, 75, 56, 73, 47, 45, 65, 16, 44, 4, 49, 33, 38, 85, 59, 82, 85, 38, 65, 24, 20]"
785,lcs,16,9,10,0,0,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08926653861999512}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbbdbccbbadcddd""
T = ""ddabcacaddcbbacd"""
786,sub,16,4801271353441852,3,0,4801372353437852,0,"{'ok': True, 'value': 4801271353441852, 'stdout': '4801271353441852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1006019115447998}",1,Compute: 8935150139093549 - 4133878785651697
787,knap,4,24,16,0,22,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09790778160095215}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 4, 8, 6]
V = [16, 8, 11, 6]
C = 13"
788,add,8,110004930,110005000,0,110004930,1,"{'ok': True, 'value': 110004930, 'stdout': '110004930\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11044001579284668}",1,Compute: 67189354 + 42815576
789,lcs,32,19,16,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09784698486328125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adaaacacbccbbaacbabcbabddbdaadac""
T = ""ddccaccdabbbabccbbcacbaaccddcadda"""
790,ilp_assign,8,39,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 19, 20, 9, 6, 24, 7], [6, 3, 11, 12, 3, 4, 18], [8, 7, 11, 18, 18, 15, 23], [3, 14, 19, 12, 6, 6, 20], [4, 12, 6, 22, 16, 20, 3], [15, 14, 7, 3, 3, 22, 21], [9, 11, 13, 12, 19, 11, 14]]"
791,knap,2,7,7,1,9,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10671758651733398}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 2]
V = [2, 7, 7]
C = 3"
792,ilp_partition,32,1,10,0,7,0,"{'ok': True, 'value': 178, 'stdout': '178\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09567952156066895}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 50, 35, 45, 51, 1, 53, 64, 62, 89, 75, 46, 32, 89, 25, 63, 67, 40, 16, 22, 61, 33, 11, 13]"
793,mul{'ok': True, 'value': 947918627846741869907655040366928907518199259012733797397755303, 'stdout': '947918627846741869907655040366928907518199259012733797397755303\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0935354232788086}",0,Compute: 97691061675081250607911141151293 * 17591605546495586506442872230790
794,rod,8,184,124,0,64,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_vraeue_s/main.py"", line 14, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_vraeue_s/main.py"", line 10, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10272812843322754}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 15, 24, 8, 16, 24, 13, 1]"
795,knap,32,1714,536,0,455,0,"{'ok': True, 'value': 1714, 'stdout': '1714\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1071004867553711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 42, 24, 23, 41, 53, 19, 23, 24, 47, 52, 12, 28, 20, 63, 48, 35, 23, 40, 62, 5, 50, 18, 59, 40, 44, 16, 45, 55, 31, 14, 1]
V = [119, 31, 84, 128, 54, 26, 6, 77, 106, 53, 81, 109, 50, 43, 45, 13, 127, 112, 30, 45, 3, 11, 22, 117, 111, 90, 49, 15, 92, 122, 24, 94]
C = 536"
796,ilp_partition,4,2,2,1,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12008047103881836}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 5, 12, 5]"
797,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10298800468444824}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cc""
T = ""bdc"""
798,ilp_assign,8,36,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 2, 9, 11, 1, 23, 22], [20, 16, 14, 14, 14, 12, 20], [24, 16, 7, 24, 14, 13, 10], [4, 3, 24, 6, 23, 11, 12], [19, 14, 23, 13, 4, 13, 2], [14, 20, 7, 4, 8, 23, 16], [13, 6, 22, 5, 8, 20, 4]]"
799,ilp_prod,16,222,123,0,147,0,"{'ok': True, 'value': 222, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/03bcb936f5204daeb53efe185f277b52-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/03bcb936f5204daeb53efe185f277b52-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 64 RHS\nAt line 75 BOUNDS\nAt line 82 ENDATA\nProblem MODEL has 10 rows, 6 columns and 30 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 224.103 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -176 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -191 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -222 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 3\nCbc0013I At root node, 1 cuts changed objective from -224.10345 to -222 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 4 column cuts (4 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -222, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 3 variables fixed on reduced cost\nCuts at root node changed objective from -224.103 to -222\nProbing was tried 3 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                222.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n222.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1926591396331787}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 45, 14, 15, 15, 44]
consumption (rows=resources) = [[2, 1, 14, 16, 2, 8], [8, 4, 11, 14, 6, 2], [13, 10, 12, 1, 15, 11], [13, 15, 16, 16, 12, 6]]
capacity = [59, 35, 53, 48]
upper_bounds = [3, 3, 3, 3, 3, 4]"
800,ilp_prod,8,69,102,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_7xvupu91/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1751246452331543}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 6, 17, 7]
consumption (rows=resources) = [[8, 4, 4, 1], [4, 2, 2, 2], [1, 2, 1, 5], [7, 3, 6, 2]]
capacity = [17, 28, 23, 21]
upper_bounds = [3, 4, 3, 4]"
801,sub,4,2912,2912,1,2912,1,"{'ok': True, 'value': 2912, 'stdout': '2912\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0935056209564209}",1,Compute: 7383 - 4471
802,rod,32,2144,1056,0,374,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0924532413482666}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [67, 78, 75, 88, 37, 1, 17, 82, 44, 57, 54, 78, 43, 80, 14, 20, 27, 66, 48, 74, 85, 89, 86, 21, 58, 60, 47, 54, 13, 57, 56, 80]"
803,mul,4,1954116,1954116,1,1951236,0,"{'ok': True, 'value': 1954116, 'stdout': '1954116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14106535911560059}",1,Compute: 1236 * 1581
804,knap,8,118,60,0,60,0,"{'ok': True, 'value': 118, 'stdout': '118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09641027450561523}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 9, 5, 10, 8, 3, 9, 2]
V = [2, 28, 19, 31, 28, 28, 5, 12]
C = 30"
805,mul,2,4482,4482,1,4492,0,"{'ok': True, 'value': 4482, 'stdout': '4482\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09181809425354004}",1,Compute: 54 * 83
806,ilp_prod,8,44,100,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6jhe_vo2/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17472434043884277}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 8, 9, 11]
consumption (rows=resources) = [[4, 2, 7, 6], [6, 4, 2, 1], [7, 6, 6, 7], [6, 5, 7, 5]]
capacity = [27, 18, 29, 23]
upper_bounds = [3, 4, 3, 4]"
807,rod,32,1504,1000,0,557,0,"{'ok': True, 'value': 1504, 'stdout': '1504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09396767616271973}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [47, 8, 87, 80, 90, 46, 79, 71, 85, 94, 17, 29, 30, 39, 55, 7, 42, 17, 65, 15, 29, 66, 31, 74, 9, 45, 96, 19, 29, 34, 66, 63]"
808,rod,2,12,12,1,6,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10884952545166016}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
809,add,4,9625,9625,1,9625,1,"{'ok': True, 'value': 9625, 'stdout': '9625\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09574294090270996}",1,Compute: 3761 + 5864
810,add,4,10478,10548,0,10548,0,"{'ok': True, 'value': 10478, 'stdout': '10478\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09852337837219238}",1,Compute: 5070 + 5408
811,mul,16,25570004971238084647784407157492,2557177732387264,0,25598442486261567726785672,0,"{'ok': True, 'value': 59400785289709421814693953678684, 'stdout': '59400785289709421814693953678684\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11859416961669922}",0,Compute: 8571312495510827 * 2983207645810396
812,ilp_prod,16,219,180,0,156,0,"{'ok': True, 'value': 219, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/99a891e8a0304533bbd693dbfd6db3a5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/99a891e8a0304533bbd693dbfd6db3a5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 64 RHS\nAt line 75 BOUNDS\nAt line 82 ENDATA\nProblem MODEL has 10 rows, 6 columns and 30 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 223.5 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -219 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -223.5 to -223.5 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -219, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -223.5 to -223.5\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                219.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n219.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1769545078277588}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 27, 33, 8, 31, 48]
consumption (rows=resources) = [[4, 6, 9, 10, 14, 10], [10, 7, 12, 5, 7, 4], [14, 7, 9, 8, 5, 3], [11, 2, 15, 9, 2, 2]]
capacity = [47, 34, 54, 37]
upper_bounds = [3, 4, 3, 4, 3, 4]"
813,lcs,8,5,4,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09464168548583984}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcccdadd""
T = ""dccdccbad"""
814,rod,8,144,122,0,32,0,"{'ok': True, 'value': 144, 'stdout': '144\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09754180908203125}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [18, 15, 9, 3, 6, 16, 19, 13]"
815,add,8,113089720,113089710,0,113089620,0,"{'ok': True, 'value': 113089720, 'stdout': '113089720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0966651439666748}",1,Compute: 86076643 + 27013077
816,add,8,71995816,72296516,0,71995816,1,"{'ok': True, 'value': 71995816, 'stdout': '71995816\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10310006141662598}",1,Compute: 12296515 + 59699301
817,ilp_assign,16,60,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[28, 41, 2, 11, 18, 24, 16], [5, 10, 40, 45, 21, 26, 35], [35, 38, 46, 20, 34, 21, 24], [32, 10, 40, 14, 27, 14, 7], [6, 11, 1, 41, 2, 6, 30], [34, 37, 5, 12, 23, 34, 36], [41, 12, 12, 48, 27, 5, 30]]"
818,mul{'ok': True, 'value': 972214529319757767327682773767079896664255713528836264132063688, 'stdout': '972214529319757767327682773767079896664255713528836264132063688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10351729393005371}",0,Compute: 34504993778437035093919833005516 * 81905765439133840093897825067182
819,sub,2,39,39,1,39,1,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09619903564453125}",1,Compute: 96 - 57
820,mul{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_c7mb42z6/main.py"", line 8, in <module>\n    result = multiply_large_numbers(82246899856281801944756818997152, 92203933501373076774728209439834)\n  File ""/tmp/cot_exec_c7mb42z6/main.py"", line 4, in multiply_large_numbers\n    digit = int(b[-i-1])\nTypeError: \'int\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10862231254577637}",0,Compute: 82246899856281801944756818997152 * 92203933501373076774728209439834
821,ilp_prod,4,20,20,1,17,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_8iw0_ko1/main.py"", line 8\n    tableau[i][i] = -consumption[i][j] for j in range(n)\n                                       ^^^\nSyntaxError: invalid syntax\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10368919372558594}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5, 5]
consumption (rows=resources) = [[3, 2, 2], [1, 2, 4], [2, 2, 4]]
capacity = [14, 11, 9]
upper_bounds = [4, 4, 3]"
822,ilp_assign,16,59,100,0,-33,0,"{'ok': True, 'value': -7, 'stdout': '-7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22858786582946777}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 35, 5, 29, 38, 28, 6], [34, 39, 8, 30, 39, 31, 17], [25, 30, 31, 25, 25, 7, 25], [22, 41, 45, 1, 5, 12, 32], [28, 2, 6, 47, 25, 44, 33], [39, 22, 3, 2, 33, 42, 1], [29, 48, 34, 12, 29, 20, 46]]"
823,sub,32,13927436216856771387309864891906,1,0,139933462168263717273230658848106,0,"{'ok': True, 'value': 13927436216856771387309864891906, 'stdout': '13927436216856771387309864891906\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09964466094970703}",1,Compute: 46445339623496382009546977784102 - 32517903406639610622237112892196
824,ilp_assign,4,12,19,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 9, 9, 1], [3, 6, 6, 4], [3, 10, 3, 10], [2, 7, 6, 9]]"
825,sub,2,39,39,1,39,1,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10306239128112793}",1,Compute: 85 - 46
826,sub,16,397485953430109,3999999999999999,0,3965886053429909,0,"{'ok': True, 'value': 397485953430109, 'stdout': '397485953430109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10700821876525879}",1,Compute: 3174374790922262 - 2776888837492153
827,knap,8,93,56,0,52,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0954136848449707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 1, 5, 8, 16, 4, 10, 14]
V = [13, 22, 7, 16, 16, 32, 8, 12]
C = 36"
828,ilp_prod,2,36,36,1,18,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_un6thepd/main.py"", line 7, in <module>\n    x = pulp.LpVariable.dicts(""x"", range(len(profit)), 0, None, pulp.LpInteger)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16651296615600586}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[1, 2], [2, 1]]
capacity = [10, 9]
upper_bounds = [4, 5]"
829,lcs,8,2,4,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10967469215393066}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbdaacc""
T = ""ccdcddbb"""
830,rod,8,32,53,0,34,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09819340705871582}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [1, 8, 5, 3, 1, 5, 11, 19]"
831,rod,4,20,18,0,13,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10309815406799316}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 9, 3, 1]"
832,sub{'ok': True, 'value': 2200913458220788118807075370953, 'stdout': '2200913458220788118807075370953\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09236693382263184}",1,Compute: 72093113526378443687158804429700 - 69892200068157655568351729058747
833,mul{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_rxsakq6i/main.py"", line 8, in <module>\n    result = multiply_large_numbers(55507686282077793698024671832525, 59047628722103123325963138668351)\n  File ""/tmp/cot_exec_rxsakq6i/main.py"", line 4, in multiply_large_numbers\n    digit = int(b[-i-1])\nTypeError: \'int\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09920620918273926}",0,Compute: 55507686282077793698024671832525 * 59047628722103123325963138668351
834,rod,32,1056,470,0,587,0,"{'ok': True, 'value': 1056, 'stdout': '1056\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09974861145019531}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [3, 66, 45, 74, 14, 30, 8, 95, 63, 87, 37, 77, 7, 62, 70, 88, 51, 92, 49, 84, 68, 49, 70, 68, 95, 47, 6, 36, 38, 70, 58, 25]"
835,ilp_prod,2,8,7,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_uwruipjc/main.py"", line 7, in <module>\n    x = pulp.LpVariable.dicts(\'x\', range(len(profit)), 0, None, pulp.LpInteger)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16486716270446777}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[2, 3], [3, 2]]
capacity = [6, 8]
upper_bounds = [3, 3]"
836,ilp_prod,4,36,36,1,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.3707549571990967}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 12, 4]
consumption (rows=resources) = [[3, 4, 3], [1, 1, 3], [2, 2, 1]]
capacity = [9, 14, 11]
upper_bounds = [3, 3, 3]"
837,ilp_partition,8,0,1,0,8,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09898734092712402}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 5, 10, 19, 22, 19, 16, 11]"
838,ilp_assign,4,11,20,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 1, 1, 4], [2, 9, 3, 1], [9, 4, 4, 8], [5, 4, 8, 9]]"
839,knap,2,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09483480453491211}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 3]
V = [1, 1, 1]
C = 3"
840,sub,16,3735341148815657,3639341100000000,0,3735336148007657,0,"{'ok': True, 'value': 3735341148815657, 'stdout': '3735341148815657\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1116342544555664}",1,Compute: 8195924436907638 - 4460583288091981
841,ilp_prod,4,24,75,0,30,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u1kogzt8/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16578388214111328}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 6, 7]
consumption (rows=resources) = [[1, 2, 2], [4, 3, 4], [4, 3, 4]]
capacity = [9, 10, 10]
upper_bounds = [3, 3, 3]"
842,sub,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09432196617126465}",1,Compute: 96 - 38
843,lcs,32,18,16,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10867094993591309}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addcaddcddbabcadbabccbcdbbaacddc""
T = ""bccbaaacbadccabcdcbbcbbbbddcacd"""
844,knap,8,81,58,0,53,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10881304740905762}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 5, 12, 2, 12, 4, 8, 4]
V = [28, 10, 2, 24, 9, 10, 19, 2]
C = 31"
845,ilp_partition,2,1,2,0,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11261200904846191}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 3, 2]"
846,sub,32,18748278296330059450450873303689,0,0,18748288593334563057118742170654,0,"{'ok': True, 'value': 18748278296330059450450873303689, 'stdout': '18748278296330059450450873303689\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11099576950073242}",1,Compute: 82243295238110633057118742170654 - 63495016941780573606667868866965
847,rod,16,720,120,0,118,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_y9p7ltfc/main.py"", line 8, in <module>\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10138130187988281}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [45, 14, 1, 41, 29, 45, 13, 40, 25, 20, 10, 22, 24, 40, 25, 7]"
848,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_mvc73jrv/main.py"", line 10, in <module>\n    print(max_revenue(N, P))\n  File ""/tmp/cot_exec_mvc73jrv/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10152935981750488}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
849,mul{'ok': True, 'value': 297401890608215346859005055228897473084861246255548894847039394, 'stdout': '297401890608215346859005055228897473084861246255548894847039394\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11228346824645996}",0,Compute: 40921011797091971755060210191389 * 64596304158426354190868160776270
850,sub,8,39297846,39297846,1,39297846,1,"{'ok': True, 'value': 39297846, 'stdout': '39297846\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1022176742553711}",1,Compute: 74368300 - 35070454
851,ilp_prod,4,23,72,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1diu_k76/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21140074729919434}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 8, 7]
consumption (rows=resources) = [[1, 4, 4], [4, 3, 3], [3, 4, 2]]
capacity = [16, 10, 8]
upper_bounds = [3, 3, 3]"
852,ilp_prod,32,275,273,0,275,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_2o96q8i1/main.py"", line 19, in <module>\n    prob += pulp.lpSum([consumption[j][i] * x[j] for j in range(6)]) <= capacity[i]\n  File ""/tmp/cot_exec_2o96q8i1/main.py"", line 19, in <listcomp>\n    prob += pulp.lpSum([consumption[j][i] * x[j] for j in range(6)]) <= capacity[i]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17388057708740234}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 54, 35, 11, 84, 93]
consumption (rows=resources) = [[26, 28, 17, 18, 32, 18], [13, 24, 21, 23, 5, 12], [32, 21, 2, 22, 21, 20], [25, 6, 13, 21, 30, 32]]
capacity = [113, 79, 66, 89]
upper_bounds = [3, 3, 3, 3, 3, 3]"
853,knap,16,418,131,0,128,0,"{'ok': True, 'value': 418, 'stdout': '418\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10190820693969727}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 3, 16, 8, 14, 12, 26, 26, 9, 15, 14, 32, 10, 8, 25, 29]
V = [46, 3, 62, 63, 8, 32, 37, 23, 61, 9, 41, 12, 34, 39, 17, 8]
C = 131"
854,mul,2,590,590,1,590,1,"{'ok': True, 'value': 590, 'stdout': '590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11620545387268066}",1,Compute: 10 * 59
855,lcs,16,8,10,0,0,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12029600143432617}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcddddaadcbaaca""
T = ""bdabbdabcdcbbacdd"""
856,sub,2,45,45,1,45,1,"{'ok': True, 'value': 45, 'stdout': '45\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10251045227050781}",1,Compute: 66 - 21
857,ilp_partition,4,1,5,0,25,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11234617233276367}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 8, 1, 6]"
858,add,8,115765856,116365956,0,115764856,0,"{'ok': True, 'value': 115765856, 'stdout': '115765856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10350966453552246}",1,Compute: 68598438 + 47167418
859,rod,4,36,36,1,18,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09239840507507324}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 6, 9, 9]"
860,mul,2,4136,4136,1,4116,0,"{'ok': True, 'value': 4136, 'stdout': '4136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11532783508300781}",1,Compute: 44 * 94
861,lcs,4,2,0,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11463570594787598}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abad""
T = ""bddac"""
862,sub,8,19665920,4,0,19665920,1,"{'ok': True, 'value': 19665920, 'stdout': '19665920\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09395790100097656}",1,Compute: 84812990 - 65147070
863,ilp_partition,2,5,0,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09716916084289551}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 6, 1]"
864,add,32,138938491667545281497584748580672,5,0,138938496666555359553720779132672,0,"{'ok': True, 'value': 138938491667545281497584748580672, 'stdout': '138938491667545281497584748580672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11314678192138672}",1,Compute: 42322004922940829617338070283577 + 96616486744604451880246678297095
865,ilp_prod,16,205,120,0,183,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_s4fd6ic4/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18808531761169434}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [38, 5, 43, 16, 24, 7]
consumption (rows=resources) = [[14, 9, 8, 2, 10, 4], [10, 5, 14, 12, 3, 10], [3, 15, 16, 6, 8, 1], [1, 7, 7, 11, 3, 13]]
capacity = [58, 64, 56, 53]
upper_bounds = [4, 3, 3, 4, 5, 4]"
866,rod,4,36,12,0,15,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08918309211730957}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 6, 2, 6]"
867,ilp_prod,8,47,114,0,53,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_nheohy34/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18224501609802246}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 4, 11, 12]
consumption (rows=resources) = [[3, 8, 6, 1], [8, 6, 4, 4], [6, 1, 1, 8], [4, 7, 3, 3]]
capacity = [23, 18, 28, 17]
upper_bounds = [3, 3, 3, 3]"
868,ilp_assign,4,13,10,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 4, 1, 2], [10, 9, 9, 9], [3, 3, 5, 1], [2, 4, 1, 11]]"
869,sub,8,67059662,67059662,1,67059662,1,"{'ok': True, 'value': 67059662, 'stdout': '67059662\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10211896896362305}",1,Compute: 81753670 - 14694008
870,ilp_prod,32,684,220,0,270,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_7hyzvfa8/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16027188301086426}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 33, 49, 28, 60, 42]
consumption (rows=resources) = [[10, 29, 26, 30, 1, 27], [8, 6, 28, 23, 2, 26], [9, 15, 5, 20, 6, 2], [25, 23, 25, 32, 6, 9]]
capacity = [106, 72, 107, 81]
upper_bounds = [3, 3, 3, 3, 10, 3]"
871,ilp_assign,8,40,41,0,39,0,"{'ok': True, 'value': -5, 'stdout': '-5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22165393829345703}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 15, 19, 16, 9, 22, 20], [14, 10, 9, 15, 3, 4, 11], [15, 22, 22, 10, 17, 8, 17], [11, 8, 5, 6, 9, 23, 8], [14, 1, 22, 14, 13, 8, 5], [3, 3, 6, 15, 20, 24, 13], [8, 10, 20, 13, 9, 1, 10]]"
872,ilp_assign,32,95,10,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[74, 46, 68, 1, 92, 2, 10], [36, 23, 69, 13, 55, 25, 38], [51, 66, 40, 89, 78, 6, 53], [54, 23, 60, 78, 66, 36, 90], [89, 94, 17, 4, 33, 9, 60], [28, 56, 52, 34, 13, 25, 24], [43, 12, 3, 24, 73, 10, 30]]"
873,ilp_assign,8,39,107,0,45,0,"{'ok': True, 'value': -7, 'stdout': '-7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22069454193115234}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 1, 17, 14, 20, 6, 2], [24, 13, 21, 14, 7, 6, 8], [3, 20, 15, 18, 18, 11, 22], [22, 9, 7, 17, 20, 9, 13], [8, 22, 10, 20, 9, 23, 5], [23, 21, 9, 12, 19, 24, 9], [17, 21, 8, 7, 18, 22, 1]]"
874,sub,8,21921150,21921140,0,21921140,0,"{'ok': True, 'value': 21921150, 'stdout': '21921150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10462450981140137}",1,Compute: 73493792 - 51572642
875,ilp_prod,16,174,150,0,126,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_bi8enfqu/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22677350044250488}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 28, 28, 20, 15, 44]
consumption (rows=resources) = [[16, 12, 13, 4, 1, 8], [16, 13, 9, 9, 3, 6], [13, 4, 2, 7, 12, 6], [6, 10, 4, 8, 1, 14]]
capacity = [50, 42, 41, 40]
upper_bounds = [3, 3, 3, 4, 3, 3]"
876,rod,2,8,8,1,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10073494911193848}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
877,sub,2,19,19,1,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12031435966491699}",1,Compute: 99 - 80
878,ilp_partition,8,0,1,0,46,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1259136199951172}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 20, 21, 24, 3, 22, 20, 13]"
879,sub,4,4289,4289,1,4289,1,"{'ok': True, 'value': 4289, 'stdout': '4289\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10581231117248535}",1,Compute: 9110 - 4821
880,ilp_assign,2,5,5,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_o3gyiedm/main.py"", line 59, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_o3gyiedm/main.py"", line 53, in hungarian_algorithm\n    uncover_rows()\n  File ""/tmp/cot_exec_o3gyiedm/main.py"", line 41, in uncover_rows\n    cost_matrix[i][j] += min_cost\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2347102165222168}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 2], [3, 1]]"
881,knap,2,8,8,1,7,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08872485160827637}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 4]
V = [3, 2, 8]
C = 5"
882,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09571003913879395}",1,Compute: 68 - 47
883,ilp_assign,4,11,20,0,20,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21390724182128906}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1, 8, 6], [12, 1, 1, 6], [7, 12, 3, 9], [1, 12, 10, 12]]"
884,add,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11463475227355957}",1,Compute: 36 + 22
885,rod,4,15,24,0,22,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11187148094177246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 7, 12, 2]"
886,ilp_partition,8,0,1,0,14,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09517121315002441}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 2, 5, 14, 20, 23, 7, 7]"
887,ilp_prod,8,44,63,0,63,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_drstzf_y/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18543410301208496}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 8, 12, 11]
consumption (rows=resources) = [[6, 3, 5, 7], [8, 8, 3, 7], [1, 2, 4, 6], [1, 5, 1, 7]]
capacity = [19, 26, 20, 16]
upper_bounds = [3, 3, 3, 3]"
888,lcs,4,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1060025691986084}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbb""
T = ""dcad"""
889,knap,2,9,11,0,12,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1049506664276123}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5]
V = [9, 2, 6]
C = 5"
890,sub,8,16176487,16176487,1,16176487,1,"{'ok': True, 'value': 16176487, 'stdout': '16176487\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10368108749389648}",1,Compute: 57775148 - 41598661
891,ilp_assign,4,30,10,0,37,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.14030385017395}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 7, 4, 12], [9, 8, 10, 10], [11, 9, 9, 8], [10, 11, 12, 10]]"
892,ilp_prod,16,141,456,0,183,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_z9oo3o9k/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19355463981628418}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [38, 27, 25, 38, 6, 9]
consumption (rows=resources) = [[15, 9, 2, 11, 15, 5], [10, 15, 2, 5, 10, 4], [4, 3, 14, 14, 3, 14], [12, 6, 16, 16, 14, 10]]
capacity = [61, 61, 47, 45]
upper_bounds = [3, 4, 3, 3, 3, 3]"
893,mul,2,910,910,1,910,1,"{'ok': True, 'value': 910, 'stdout': '910\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1121530532836914}",1,Compute: 13 * 70
894,ilp_prod,16,58,197,0,100,0,"{'ok': True, 'value': 58, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2c937be42fd640099d265126d0439f10-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2c937be42fd640099d265126d0439f10-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 63.7377 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -48 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -58 found by DiveCoefficient after 255 iterations and 0 nodes (0.02 seconds)\nCbc0031I 4 added rows had average density of 5.75\nCbc0013I At root node, 4 cuts changed objective from -63.737705 to -58.000068 in 81 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 190 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 62 row cuts average 5.2 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0001I Search completed - best objective -58, took 255 iterations and 0 nodes (0.02 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -63.7377 to -58.0001\nProbing was tried 81 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nGomory was tried 81 times and created 190 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 81 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nClique was tried 81 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 81 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 81 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 81 times and created 62 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                58.00000000\nEnumerated nodes:               0\nTotal iterations:               255\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n58.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19089078903198242}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 7, 16, 16, 16, 4]
consumption (rows=resources) = [[6, 14, 16, 15, 11, 6], [7, 14, 3, 13, 12, 12], [3, 15, 1, 7, 9, 12], [12, 1, 7, 8, 14, 11]]
capacity = [55, 60, 61, 39]
upper_bounds = [3, 3, 3, 3, 3, 3]"
895,mul{'ok': True, 'value': 905294992826214513393062356579114035123311659403518344056052840, 'stdout': '905294992826214513393062356579114035123311659403518344056052840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11154937744140625}",0,Compute: 64872424945138657058048092671980 * 85160907723348420204366640055931
896,knap,2,11,6,0,6,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08838438987731934}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 1]
V = [5, 1, 10]
C = 2"
897,add,4,11980,12990,0,12080,0,"{'ok': True, 'value': 11980, 'stdout': '11980\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10347342491149902}",1,Compute: 3713 + 8267
898,add,8,153940083,154040093,0,153940083,1,"{'ok': True, 'value': 153940083, 'stdout': '153940083\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09552955627441406}",1,Compute: 92608626 + 61331457
899,rod,8,80,85,0,34,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_g0qwsc_8/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_g0qwsc_8/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0941472053527832}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 20, 7, 17, 1, 17, 2, 11]"
900,rod,4,20,23,0,19,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09737229347229004}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 9, 5, 8]"
901,ilp_prod,2,20,32,0,13,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.35689640045166016}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4]
consumption (rows=resources) = [[2, 2], [1, 3]]
capacity = [9, 10]
upper_bounds = [4, 3]"
902,sub,8,19013658,18813658,0,18813658,0,"{'ok': True, 'value': 19013658, 'stdout': '19013658\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09542679786682129}",1,Compute: 78148513 - 59134855
903,mul,8,6154103790192456,610987827768,0,61234567842328448,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0530731678009033}",0,Compute: 78544242 * 78352068
904,sub,32,16708182665340967744069834353935,8,0,16627232665357083523139523392545,0,"{'ok': True, 'value': 16708182665340967744069834353935, 'stdout': '16708182665340967744069834353935\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10282683372497559}",1,Compute: 69618238518693873523139523392545 - 52910055853352905779069689038610
905,rod,8,68,70,0,34,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ifwil4xx/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_ifwil4xx/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10814881324768066}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 17, 18, 9, 7, 13, 1, 18]"
906,knap,32,1453,533,0,533,0,"{'ok': True, 'value': 1453, 'stdout': '1453\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09565043449401855}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 59, 56, 33, 1, 60, 47, 2, 37, 41, 20, 51, 44, 64, 12, 43, 49, 7, 2, 59, 64, 20, 32, 14, 44, 15, 26, 17, 29, 48, 36, 20]
V = [15, 105, 80, 75, 72, 107, 21, 6, 71, 27, 76, 16, 54, 70, 12, 29, 121, 51, 4, 59, 3, 119, 118, 52, 123, 37, 89, 12, 89, 40, 32, 58]
C = 533"
907,ilp_partition,4,0,1,0,14,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1169891357421875}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 7, 2, 1]"
908,ilp_assign,2,6,0,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_7lumc1q8/main.py"", line 59, in <module>\n    min_cost = hungarian_algorithm(cost_matrix)\n  File ""/tmp/cot_exec_7lumc1q8/main.py"", line 53, in hungarian_algorithm\n    uncover_rows()\n  File ""/tmp/cot_exec_7lumc1q8/main.py"", line 41, in uncover_rows\n    cost_matrix[i][j] += min_cost\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2242746353149414}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 5], [4, 3]]"
909,ilp_assign,32,91,123,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[90, 50, 26, 58, 8, 93, 37], [34, 34, 6, 86, 74, 26, 49], [60, 30, 69, 91, 30, 33, 17], [72, 95, 44, 6, 2, 63, 16], [20, 19, 5, 81, 65, 36, 95], [39, 1, 67, 2, 80, 80, 79], [28, 88, 52, 75, 15, 94, 46]]"
910,add,32,165980186042421143480694124440035,1,0,165974183542431249000000000000000,0,"{'ok': True, 'value': 165980186042421143480694124440035, 'stdout': '165980186042421143480694124440035\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09414911270141602}",1,Compute: 66963161866675692834560917012226 + 99017024175745450646133207427809
911,ilp_assign,4,11,38,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.051421642303467}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 2, 2, 12], [3, 5, 7, 2], [3, 5, 9, 12], [11, 5, 4, 4]]"
912,ilp_partition,8,2,37,0,78,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09987068176269531}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 10, 22, 10, 5, 15, 2, 2]"
913,add,4,8719,9149,0,8719,1,"{'ok': True, 'value': 8719, 'stdout': '8719\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08634233474731445}",1,Compute: 3427 + 5292
914,add,2,98,98,1,98,1,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11946940422058105}",1,Compute: 25 + 73
915,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10799455642700195}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""dbd"""
916,knap,32,1915,438,0,438,0,"{'ok': True, 'value': 1915, 'stdout': '1915\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09950971603393555}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 29, 22, 47, 4, 55, 35, 47, 13, 45, 45, 23, 53, 11, 10, 29, 30, 5, 28, 36, 18, 41, 25, 5, 62, 25, 14, 31, 3, 35, 2, 11]
V = [123, 10, 103, 29, 111, 104, 101, 90, 124, 96, 82, 120, 66, 38, 42, 31, 109, 35, 18, 52, 102, 107, 73, 113, 13, 83, 47, 51, 86, 97, 70, 118]
C = 438"
917,add,16,13351574509484798,13351573557184798,0,13351574507184798,0,"{'ok': True, 'value': 13351574509484798, 'stdout': '13351574509484798\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09568905830383301}",1,Compute: 6551149649745004 + 6800424859739794
918,ilp_partition,2,1,,0,1,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10457372665405273}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 2, 6, 1]"
919,lcs,8,4,6,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09987092018127441}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcbdacb""
T = ""bbbabdc"""
920,lcs,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09372901916503906}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caaa""
T = ""bda"""
921,sub,32,61243158090848373293046443977347,61243158090848373342256444377487,0,61243151290848373342537444377347,0,"{'ok': True, 'value': 61243158090848373293046443977347, 'stdout': '61243158090848373293046443977347\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10551762580871582}",1,Compute: 75999781078333288220872988373059 - 14756622987484914927826544395712
922,mul{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_en3odswa/main.py"", line 8, in <module>\n    result = multiply_large_numbers(40517817875958597195968970681844, 17792835864849444873528518173308)\n  File ""/tmp/cot_exec_en3odswa/main.py"", line 4, in multiply_large_numbers\n    digit = int(b[-i-1])\nTypeError: \'int\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11452364921569824}",0,Compute: 40517817875958597195968970681844 * 17792835864849444873528518173308
923,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tq59y6t7/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_tq59y6t7/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11172080039978027}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
924,ilp_assign,16,39,100,0,125,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.067310333251953}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 29, 5, 46, 25, 4, 1], [45, 13, 23, 13, 7, 45, 3], [31, 13, 4, 43, 12, 21, 3], [43, 33, 17, 14, 13, 27, 34], [5, 37, 12, 17, 3, 10, 1], [46, 4, 38, 36, 14, 48, 12], [21, 9, 12, 45, 26, 38, 1]]"
925,knap,8,138,70,0,63,0,"{'ok': True, 'value': 138, 'stdout': '138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10548233985900879}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 3, 10, 2, 12, 2, 3, 3]
V = [3, 20, 23, 20, 6, 31, 23, 21]
C = 25"
926,ilp_partition,16,1,1,1,693,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10725235939025879}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [38, 37, 45, 19, 9, 41, 43, 33, 9, 3, 9, 41, 35, 10, 38, 1]"
927,knap,16,403,144,0,145,0,"{'ok': True, 'value': 403, 'stdout': '403\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10223793983459473}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 6, 10, 9, 12, 2, 1, 4, 5, 24, 31, 4, 5, 30, 30, 2]
V = [36, 46, 58, 11, 45, 9, 23, 23, 1, 51, 25, 29, 20, 63, 16, 45]
C = 98"
928,add,2,137,137,1,137,1,"{'ok': True, 'value': 137, 'stdout': '137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09680604934692383}",1,Compute: 67 + 70
929,rod,32,1632,450,0,1085,0,"{'ok': True, 'value': 1632, 'stdout': '1632\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10083246231079102}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [51, 20, 68, 23, 9, 89, 95, 58, 9, 95, 25, 22, 49, 35, 19, 70, 19, 72, 70, 44, 43, 80, 34, 89, 20, 16, 45, 91, 29, 22, 8, 33]"
930,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10447287559509277}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daca""
T = ""baba"""
931,ilp_assign,2,3,0,0,3,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0564403533935547}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [2, 5]]"
932,mul,8,817094754765024,129734933111116,0,819200000000000,0,"{'ok': True, 'value': 817094754765024, 'stdout': '817094754765024\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.009695291519165}",1,Compute: 40611911 * 20119584
933,rod,32,1296,1000,0,1002,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09629964828491211}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [36, 81, 76, 31, 11, 94, 7, 72, 59, 21, 13, 95, 19, 90, 2, 21, 91, 57, 89, 80, 18, 3, 7, 52, 12, 40, 51, 69, 38, 91, 39, 65]"
934,ilp_assign,8,35,50,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 20, 9, 15, 23, 14, 10], [4, 10, 2, 16, 6, 9, 18], [7, 5, 2, 22, 13, 18, 1], [19, 17, 10, 1, 24, 13, 11], [4, 9, 6, 20, 23, 7, 3], [6, 23, 22, 19, 21, 13, 17], [19, 24, 1, 8, 13, 22, 1]]"
935,ilp_prod,4,18,44,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tz7a32sp/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1779623031616211}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 8, 5]
consumption (rows=resources) = [[2, 3, 2], [3, 4, 3], [1, 3, 2]]
capacity = [15, 8, 12]
upper_bounds = [3, 3, 3]"
936,ilp_assign,2,7,60,0,7,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.056920051574707}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 6], [4, 3]]"
937,lcs,32,19,16,0,0,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09699749946594238}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badbcacdabbbdcbddcaadacabdddbadb""
T = ""cacccbacdbcadadaccdcdcadbabaaac"""
938,ilp_partition,16,0,10,0,249,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10749030113220215}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 12, 26, 42, 30, 14, 40, 1, 30, 26, 25, 23, 44, 24, 32, 39]"
939,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10106754302978516}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""ca"""
940,sub,4,4958,4958,1,4958,1,"{'ok': True, 'value': 4958, 'stdout': '4958\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08600997924804688}",1,Compute: 8220 - 3262
941,ilp_assign,4,12,20,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1, 8, 1], [2, 11, 11, 10], [11, 10, 7, 12], [10, 6, 6, 2]]"
942,ilp_assign,4,12,0,0,140,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 1, 4, 12], [2, 6, 2, 11], [11, 2, 3, 12], [5, 7, 10, 6]]"
943,rod,8,160,171,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_imz9mcv6/main.py"", line 14, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_imz9mcv6/main.py"", line 10, in max_revenue\n    max_rev = max(max_rev, P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09286141395568848}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 21, 12, 3, 1, 14, 19, 16]"
944,ilp_partition,4,0,,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1035604476928711}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 3, 4]"
945,ilp_prod,2,72,57,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 0.6383535861968994}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 8]
consumption (rows=resources) = [[3, 1], [2, 1]]
capacity = [9, 9]
upper_bounds = [3, 9]"
946,mul{'ok': True, 'value': 813331284769618968396094390012093615620606852823462110260391906, 'stdout': '813331284769618968396094390012093615620606852823462110260391906\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11281204223632812}",0,Compute: 40358675987566334601399258252502 * 30271369320154627434819957525102
947,ilp_assign,4,17,48,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0544445514678955}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 6, 6, 5], [10, 6, 1, 12], [2, 11, 4, 5], [7, 9, 5, 10]]"
948,lcs,8,2,4,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12182354927062988}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdccdddc""
T = ""bbabbbabd"""
949,add,32,130145926640364688059903303430155,1,0,120645126740654708439141815833047,0,"{'ok': True, 'value': 130145926640364688059903303430155, 'stdout': '130145926640364688059903303430155\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10538554191589355}",1,Compute: 42911670613809979620761487597108 + 87234256026554708439141815833047
950,knap,2,8,11,0,11,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09535765647888184}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 5]
V = [5, 8, 6]
C = 6"
951,rod,32,2048,1047,0,455,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08395552635192871}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [64, 43, 6, 42, 60, 31, 53, 5, 57, 69, 91, 79, 21, 29, 82, 92, 29, 77, 51, 13, 87, 20, 30, 84, 45, 3, 56, 96, 60, 57, 68, 18]"
952,knap,32,1459,577,0,497,0,"{'ok': True, 'value': 1459, 'stdout': '1459\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10093235969543457}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 26, 54, 39, 29, 37, 11, 10, 34, 40, 58, 64, 35, 56, 55, 32, 4, 47, 14, 22, 20, 20, 59, 22, 1, 2, 54, 49, 42, 61, 37, 3]
V = [4, 1, 22, 34, 64, 125, 52, 27, 22, 71, 26, 50, 34, 78, 35, 87, 38, 33, 27, 102, 123, 58, 14, 117, 57, 122, 56, 77, 54, 95, 75, 8]
C = 528"
953,mul{'ok': True, 'value': 3941272328057268634363276764354036329129656881236849379712529556, 'stdout': '3941272328057268634363276764354036329129656881236849379712529556\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10504889488220215}",0,Compute: 90216886807033314679034057791254 * 41083777618084720970566363668634
954,ilp_assign,8,30,41,0,55,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.047861099243164}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 11, 11, 16, 6, 10, 1], [9, 1, 18, 21, 20, 19, 1], [14, 18, 15, 1, 20, 17, 13], [4, 4, 19, 19, 1, 13, 3], [16, 7, 12, 19, 2, 14, 16], [18, 11, 7, 1, 5, 16, 16], [9, 14, 21, 17, 4, 14, 15]]"
955,sub,2,20,20,1,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08899378776550293}",1,Compute: 61 - 41
956,ilp_assign,4,9,21,0,17,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22854876518249512}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 1, 11, 2], [6, 1, 5, 9], [12, 1, 5, 7], [1, 6, 6, 5]]"
957,ilp_partition,2,0,1,0,12,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09701395034790039}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 5, 4, 6]"
958,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08018374443054199}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbbcbdd""
T = ""cbcbcbac"""
959,ilp_assign,32,83,100,0,160,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.054733991622925}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[92, 87, 33, 23, 41, 64, 3], [89, 79, 59, 52, 94, 20, 56], [70, 82, 44, 22, 1, 66, 93], [76, 66, 53, 11, 83, 27, 1], [8, 13, 17, 14, 32, 24, 69], [53, 79, 33, 7, 87, 93, 34], [8, 24, 81, 48, 41, 65, 87]]"
960,mul,4,43890000,43890000,1,44050000,0,"{'ok': True, 'value': 43890000, 'stdout': '43890000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0974736213684082}",1,Compute: 8400 * 5225
961,knap,32,1503,510,0,513,0,"{'ok': True, 'value': 1503, 'stdout': '1503\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10904693603515625}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 43, 34, 1, 41, 39, 30, 14, 50, 58, 48, 43, 35, 62, 28, 46, 7, 52, 53, 41, 61, 4, 16, 43, 58, 59, 14, 34, 18, 28, 1, 57]
V = [2, 19, 33, 7, 13, 2, 18, 118, 126, 100, 91, 108, 5, 51, 43, 8, 35, 21, 53, 52, 61, 3, 122, 82, 62, 33, 105, 100, 128, 51, 103, 67]
C = 564"
962,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09497880935668945}",1,Compute: 95 - 74
963,ilp_partition,32,0,10,0,200,0,"{'ok': True, 'value': 181, 'stdout': '181\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0955209732055664}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [60, 65, 47, 22, 41, 43, 52, 39, 6, 71, 2, 37, 90, 63, 66, 38, 28, 51, 7, 44, 53, 75, 91, 71]"
964,ilp_partition,32,1,10,0,92,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10730242729187012}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [42, 31, 63, 65, 31, 47, 60, 43, 95, 84, 75, 28, 92, 89, 23, 76, 18, 71, 15, 56, 42, 8, 14, 61]"
965,ilp_assign,16,98,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 47, 11, 27, 17, 23, 19], [21, 17, 12, 34, 38, 14, 40], [40, 35, 7, 39, 11, 17, 8], [13, 3, 44, 44, 9, 34, 41], [38, 44, 41, 47, 44, 30, 48], [42, 36, 8, 35, 36, 16, 12], [27, 27, 39, 11, 3, 22, 45]]"
966,add,2,115,115,1,115,1,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09686851501464844}",1,Compute: 77 + 38
967,ilp_prod,2,24,15,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xfr8gcn8/main.py"", line 7, in <module>\n    x = [pulp.LpVariable(f""x{i}"", lowBound=0, cat=\'Integer\') for i in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15256476402282715}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[3, 2], [3, 1]]
capacity = [6, 6]
upper_bounds = [3, 3]"
968,add,32,117117623357677304844968655260768,0,0,117117653357677204845268755261768,0,"{'ok': True, 'value': 117117623357677304844968655260768, 'stdout': '117117623357677304844968655260768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10485053062438965}",1,Compute: 79004759727319933294492676482473 + 38112863630357371550475978778295
969,knap,4,22,16,0,16,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09865307807922363}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 5, 3]
V = [16, 4, 13, 6]
C = 5"
970,mul,4,41515285,36901385,0,50975385,0,"{'ok': True, 'value': 41515285, 'stdout': '41515285\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08535528182983398}",1,Compute: 7277 * 5705
971,rod,2,5,5,1,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8kbo1mwp/main.py"", line 10, in <module>\n    result = max_revenue(N, P)\n  File ""/tmp/cot_exec_8kbo1mwp/main.py"", line 5, in max_revenue\n    dp[i] = max(dp[i], P[i] + dp[i - P[i]])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08671283721923828}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 5]"
972,mul,16,39001644318494873638098352914992,38743247093972784000000000,0,3884893848848938488,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0358633995056152}",0,Compute: 8697173810237683 * 4484404378878224
973,sub,2,11,11,1,11,1,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09103584289550781}",1,Compute: 33 - 22
974,knap,8,81,55,0,52,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08341765403747559}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 14, 4, 7, 1, 8, 10, 7]
V = [19, 20, 17, 23, 18, 19, 4, 2]
C = 33"
975,mul{'ok': True, 'value': 45747751153413124166059039434727, 'stdout': '45747751153413124166059039434727\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08678531646728516}",1,Compute: 5104587451166041 * 8962085886678847
976,mul,2,4104,4104,1,2400,0,"{'ok': True, 'value': 4104, 'stdout': '4104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0828542709350586}",1,Compute: 57 * 72
977,mul{'ok': True, 'value': 48182236216381369924294346501368, 'stdout': '48182236216381369924294346501368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10153555870056152}",1,Compute: 8591537959152977 * 5608103746436984
978,mul,8,4228103012293803,2319836621,0,424999999999999999,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.043473958969116}",0,Compute: 48994877 * 86296839
979,rod,16,640,40,0,107,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11003255844116211}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [40, 40, 13, 22, 1, 28, 29, 47, 13, 11, 2, 33, 17, 30, 15, 6]"
980,rod,32,1536,1027,0,890,0,"{'ok': True, 'value': 1536, 'stdout': '1536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08638978004455566}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [48, 92, 10, 89, 31, 83, 8, 1, 34, 10, 74, 36, 47, 58, 80, 66, 33, 22, 25, 69, 5, 26, 69, 77, 78, 66, 74, 56, 33, 49, 70, 89]"
981,ilp_partition,4,0,1,0,8,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09337115287780762}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 3, 4, 1]"
982,ilp_assign,16,41,102,0,10,0,"{'ok': True, 'value': -13, 'stdout': '-13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21076655387878418}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[35, 23, 48, 12, 48, 5, 46], [17, 24, 22, 4, 34, 20, 44], [10, 47, 39, 31, 42, 4, 30], [41, 27, 40, 6, 2, 1, 3], [2, 2, 14, 24, 14, 29, 3], [46, 4, 15, 20, 13, 36, 12], [13, 37, 13, 24, 35, 14, 47]]"
983,lcs,4,2,1,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08772897720336914}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcb""
T = ""dbd"""
984,ilp_assign,32,132,249,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[89, 55, 66, 17, 28, 11, 87], [13, 78, 58, 79, 57, 10, 67], [3, 66, 28, 14, 5, 85, 1], [23, 63, 62, 34, 87, 79, 61], [77, 40, 55, 90, 78, 39, 91], [94, 3, 73, 52, 47, 63, 33], [29, 65, 41, 45, 23, 89, 91]]"
985,lcs,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09334659576416016}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""da"""
986,rod,32,2144,1028,0,453,0,"{'ok': True, 'value': 2144, 'stdout': '2144\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08350777626037598}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [67, 39, 71, 93, 24, 12, 14, 69, 96, 71, 73, 78, 58, 91, 21, 54, 23, 27, 40, 28, 82, 77, 44, 90, 60, 60, 9, 45, 35, 84, 89, 21]"
987,ilp_assign,2,3,0,0,140,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [2, 5]]"
988,add,8,83875829,83875829,1,83875829,1,"{'ok': True, 'value': 83875829, 'stdout': '83875829\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08465194702148438}",1,Compute: 61879641 + 21996188
989,ilp_partition,16,1,10,0,168,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08326077461242676}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [29, 8, 41, 3, 45, 1, 35, 37, 15, 16, 3, 39, 32, 43, 22, 14]"
990,knap,32,1872,409,0,409,0,"{'ok': True, 'value': 1872, 'stdout': '1872\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08770108222961426}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 1, 13, 18, 37, 14, 6, 35, 7, 62, 64, 7, 27, 25, 7, 45, 36, 48, 29, 42, 42, 64, 5, 18, 17, 25, 31, 7, 12, 5, 7, 25]
V = [92, 106, 41, 50, 54, 96, 63, 59, 7, 108, 82, 99, 34, 88, 35, 25, 116, 74, 103, 103, 26, 54, 82, 90, 101, 100, 120, 79, 18, 124, 15, 125]
C = 409"
991,rod,32,2816,1296,0,584,0,"{'ok': True, 'value': 2816, 'stdout': '2816\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08327388763427734}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [88, 42, 34, 83, 43, 21, 64, 86, 10, 66, 73, 63, 44, 23, 96, 14, 52, 93, 6, 29, 7, 58, 22, 71, 81, 74, 65, 7, 32, 6, 76, 65]"
992,ilp_partition,16,1,16,0,54,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08695745468139648}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 30, 46, 17, 46, 12, 8, 3, 6, 3, 19, 32, 4, 8, 41, 20]"
993,ilp_prod,32,248,300,0,317,0,"{'ok': True, 'value': 248, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e37f004d95b24485b545bd438869a99d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e37f004d95b24485b545bd438869a99d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 64 RHS\nAt line 75 BOUNDS\nAt line 82 ENDATA\nProblem MODEL has 10 rows, 6 columns and 30 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 270.826 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -180 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -248 found by DiveCoefficient after 163 iterations and 0 nodes (0.02 seconds)\nCbc0031I 2 added rows had average density of 6\nCbc0013I At root node, 2 cuts changed objective from -270.82586 to -248.00037 in 85 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 149 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 35 row cuts average 5.4 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -248, took 163 iterations and 0 nodes (0.02 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -270.826 to -248\nProbing was tried 85 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nGomory was tried 85 times and created 149 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)\nKnapsack was tried 85 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 85 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 85 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 85 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 85 times and created 35 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                248.00000000\nEnumerated nodes:               0\nTotal iterations:               163\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n248.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1795048713684082}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [37, 68, 38, 68, 59, 28]
consumption (rows=resources) = [[17, 31, 6, 9, 12, 16], [22, 18, 9, 5, 9, 10], [27, 2, 9, 9, 1, 22], [14, 21, 30, 22, 31, 6]]
capacity = [95, 95, 123, 73]
upper_bounds = [4, 3, 3, 3, 3, 5]"
994,ilp_assign,16,87,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 5, 33, 47, 40, 14, 28], [21, 32, 28, 42, 26, 43, 41], [2, 37, 46, 47, 34, 42, 36], [7, 11, 26, 35, 10, 17, 14], [32, 48, 9, 22, 47, 47, 36], [41, 7, 11, 39, 46, 42, 32], [2, 20, 3, 43, 35, 7, 18]]"
995,ilp_partition,16,1,10,0,-1038,0,"{'ok': True, 'value': 89, 'stdout': '89\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0869741439819336}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 1, 31, 42, 24, 26, 47, 10, 38, 24, 9, 39, 16, 25, 21, 13]"
996,knap,16,430,205,0,129,0,"{'ok': True, 'value': 430, 'stdout': '430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09274411201477051}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 22, 24, 29, 20, 6, 4, 21, 11, 9, 4, 24, 31, 16, 3, 3]
V = [2, 62, 59, 60, 55, 32, 52, 23, 14, 32, 37, 39, 30, 4, 14, 27]
C = 129"
997,knap,2,18,18,1,10,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09906983375549316}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 1]
V = [6, 10, 8]
C = 3"
998,ilp_prod,32,264,295,0,299,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_qsvz7q6a/main.py"", line 10, in <module>\n    c = -profit  # Negate to maximize\nTypeError: bad operand type for unary -: \'list\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.4136934280395508}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [38, 71, 26, 88, 68, 77]
consumption (rows=resources) = [[11, 15, 1, 9, 18, 28], [16, 1, 23, 24, 9, 21], [15, 6, 11, 29, 25, 31], [14, 28, 27, 19, 27, 27]]
capacity = [78, 110, 95, 79]
upper_bounds = [5, 3, 3, 3, 3, 3]"
999,sub,2,43,43,1,43,1,"{'ok': True, 'value': 43, 'stdout': '43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10075855255126953}",1,Compute: 90 - 47
