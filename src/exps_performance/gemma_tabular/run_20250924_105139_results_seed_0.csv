idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,ilp_assign,16,44,Cannot be determined without implementing the Hungarian Algorithm,0,108,0,"{'ok': True, 'value': -29, 'stdout': '-29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1593165397644043}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[46, 31, 6, 44, 32, 15, 35], [26, 18, 41, 2, 8, 18, 43], [3, 1, 17, 26, 34, 38, 46], [26, 29, 7, 48, 17, 23, 19], [44, 13, 39, 6, 3, 5, 17], [20, 35, 22, 8, 34, 16, 11], [5, 27, 19, 19, 34, 9, 37]]"
1,ilp_assign,32,113,,0,224,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lt6qz25_/main.py"", line 24, in <module>\n    min_cost = hungarian(C)\n  File ""/tmp/cot_exec_lt6qz25_/main.py"", line 4, in hungarian\n    n = C.shape[0]\nAttributeError: \'list\' object has no attribute \'shape\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.6104450225830078}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[82, 51, 35, 33, 56, 46, 79], [42, 12, 40, 4, 64, 2, 33], [26, 51, 50, 56, 82, 81, 87], [50, 90, 5, 75, 60, 46, 73], [17, 73, 91, 36, 42, 4, 51], [61, 67, 18, 6, 11, 73, 45], [47, 1, 9, 25, 92, 15, 86]]"
2,sub,16,228302551638673,228202551713873,0,228202552063873,0,"{'ok': True, 'value': 228302551638673, 'stdout': '228302551638673\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17102742195129395}",1,Compute: 1365979018727553 - 1137676467088880
3,rod,4,24,21,0,10,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10089302062988281}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 7, 1, 2]"
4,ilp_assign,8,45, ,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_jcwpbba4/main.py"", line 11\n    while not all(row_covered) or not all(col_covered):\n    ^\nIndentationError: expected an indented block after function definition on line 7\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09761667251586914}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3, 23, 1, 17, 15, 22], [7, 4, 16, 13, 9, 7, 21], [2, 7, 20, 5, 4, 7, 15], [13, 12, 18, 5, 4, 20, 16], [5, 19, 13, 21, 22, 14, 17], [16, 22, 11, 16, 16, 21, 22], [7, 18, 20, 8, 1, 11, 23]]"
5,ilp_prod,4,28,Cannot be determined without using a linear programming algorithm.,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_vedbf6we/main.py"", line 10, in <module>\n    prob += lpSum(profit[i] * x[i] for i in range(3)), ""Total Profit""\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 2469, in lpSum\n    return LpAffineExpression().addInPlace(vector)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 968, in addInPlace\n    for e in other:\n  File ""/tmp/cot_exec_vedbf6we/main.py"", line 10, in <genexpr>\n    prob += lpSum(profit[i] * x[i] for i in range(3)), ""Total Profit""\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.25688648223876953}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6, 3]
consumption (rows=resources) = [[1, 1, 1], [2, 1, 4], [1, 3, 1]]
capacity = [8, 8, 11]
upper_bounds = [4, 3, 3]"
6,rod,8,84,37,0,48,0,"{'ok': True, 'value': 84, 'stdout': '84\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09694409370422363}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 21, 17, 21, 21, 12, 4, 5]"
7,sub,4,5636,5636,1,5636,1,"{'ok': True, 'value': 5636, 'stdout': '5636\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10800528526306152}",1,Compute: 9965 - 4329
8,mul,16,5727944462022541928458085852017,5729797696972972547,0,1,0,"{'ok': True, 'value': 5727944462022541928458085852017, 'stdout': '5727944462022541928458085852017\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09781765937805176}",1,Compute: 2447369025893203 * 2340449846925739
9,sub,8,73573313,73573313,1,73573313,1,"{'ok': True, 'value': 73573313, 'stdout': '73573313\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10821032524108887}",1,Compute: 85242487 - 11669174
10,sub,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11062812805175781}",1,Compute: 75 - 72
11,knap,4,17,To be determined by filling out the dynamic programming table,0,17,1,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10750269889831543}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 8, 6, 4]
V = [8, 1, 9, 4]
C = 10"
12,add,8,46632018,461308,0,46632018,1,"{'ok': True, 'value': 46632018, 'stdout': '46632018\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10920238494873047}",1,Compute: 12863820 + 33768198
13,rod,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10962891578674316}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 5]"
14,mul,4,30759404,16000,0,30892644,0,"{'ok': True, 'value': 30759404, 'stdout': '30759404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11462950706481934}",1,Compute: 6194 * 4966
15,rod,16,160,,0,100,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09954333305358887}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [10, 12, 30, 8, 31, 23, 46, 17, 9, 2, 14, 24, 22, 31, 19, 19]"
16,ilp_prod,32,351,Cannot be determined without a linear programming solver.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_kv01oty2/main.py"", line 4, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17817902565002441}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [91, 86, 4, 44, 61, 73]
consumption (rows=resources) = [[32, 31, 6, 4, 26, 17], [2, 7, 6, 22, 23, 7], [31, 3, 10, 19, 3, 1], [25, 22, 11, 10, 11, 12]]
capacity = [84, 95, 106, 67]
upper_bounds = [3, 3, 6, 4, 3, 4]"
17,rod,2,4,3,0,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10534954071044922}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 3]"
18,rod,4,48,12,0,12,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0971832275390625}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 4, 6, 3]"
19,ilp_assign,16,108,The answer cannot be determined without implementing the Hungarian Algorithm.,0,109,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_j86ap0b6/main.py"", line 16, in <module>\n    min_cost = hungarian(C)\n  File ""/tmp/cot_exec_j86ap0b6/main.py"", line 13, in hungarian\n    return min_cost  \nNameError: name \'min_cost\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09683942794799805}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 41, 14, 35, 7, 27, 41], [35, 26, 48, 18, 19, 29, 24], [37, 41, 9, 11, 8, 45, 8], [25, 26, 38, 30, 9, 36, 43], [20, 23, 41, 31, 48, 27, 14], [31, 32, 45, 33, 21, 32, 42], [4, 29, 20, 10, 48, 32, 4]]"
20,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1183781623840332}",1,Compute: 59 + 63
21,rod,16,576,,0,107,0,"{'ok': True, 'value': 576, 'stdout': '576\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09744477272033691}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [36, 41, 21, 12, 38, 6, 7, 35, 38, 20, 11, 25, 10, 9, 15, 21]"
22,rod,32,2272,32,0,297,0,"{'ok': True, 'value': 2272, 'stdout': '2272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10392189025878906}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [71, 61, 5, 69, 74, 71, 34, 88, 5, 59, 51, 93, 16, 52, 45, 64, 7, 3, 35, 95, 5, 33, 88, 88, 75, 90, 38, 88, 27, 68, 67, 44]"
23,ilp_prod,32,284,Cannot be determined without a linear programming solver.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_zyk2dg2u/main.py"", line 4, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17082500457763672}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 3, 21, 75, 8, 59]
consumption (rows=resources) = [[9, 22, 1, 31, 17, 13], [5, 28, 18, 12, 11, 5], [11, 8, 25, 28, 18, 20], [19, 1, 28, 18, 17, 21]]
capacity = [107, 88, 119, 82]
upper_bounds = [4, 3, 3, 3, 4, 3]"
24,ilp_partition,16,1,,0,1,1,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09950923919677734}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 3, 8, 40, 1, 18, 41, 45, 19, 47, 15, 10, 37, 19, 13, 7]"
25,ilp_prod,8,96,Cannot be determined without a linear programming solver.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_kbdcayvz/main.py"", line 9, in <module>\n    c = -profit  # Minimize negative profit for maximization\nTypeError: bad operand type for unary -: \'list\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 1.147904396057129}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7, 21, 12]
consumption (rows=resources) = [[6, 7, 3, 5], [2, 8, 4, 1], [5, 3, 2, 5], [7, 6, 5, 7]]
capacity = [19, 19, 31, 31]
upper_bounds = [3, 3, 4, 3]"
26,lcs,16,10,1,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10753440856933594}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbdabcdadddaadb""
T = ""abcacbddaadcacb"""
27,ilp_prod,32,363,Cannot be determined without using specialized algorithms or computational tools.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0rnz1bk7/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1732630729675293}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 68, 22, 87, 92, 75]
consumption (rows=resources) = [[25, 24, 30, 3, 27, 15], [2, 24, 11, 13, 23, 32], [2, 16, 16, 18, 12, 27], [5, 29, 16, 29, 7, 13]]
capacity = [85, 120, 72, 118]
upper_bounds = [3, 3, 3, 4, 3, 3]"
28,mul,32,733785658252636338895171499373936678879472135208959962959078100,738699486698977696176961672972936,0,1921927501684412,0,"{'ok': True, 'value': 733785658252636338895171499373936678879472135208959962959078100, 'stdout': '733785658252636338895171499373936678879472135208959962959078100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09961581230163574}",1,Compute: 19219275016844124361651750860900 * 38179674186957268617193836243709
29,sub,16,4623941648806838,4623941648806838,1,4623941648806838,1,"{'ok': True, 'value': 4623941648806838, 'stdout': '4623941648806838\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10474181175231934}",1,Compute: 8601670171602902 - 3977728522796064
30,ilp_prod,2,9,9,1,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_3e5b08gk/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18033051490783691}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3]
consumption (rows=resources) = [[3, 2], [3, 3]]
capacity = [6, 10]
upper_bounds = [3, 3]"
31,ilp_partition,8,0,,0,3,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1155858039855957}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 13, 19, 10, 23, 23, 16, 3]"
32,add,8,160426430,160426430,1,160426430,1,"{'ok': True, 'value': 160426430, 'stdout': '160426430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13051128387451172}",1,Compute: 62162678 + 98263752
33,ilp_assign,2,5,5,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_5nbbrczd/main.py"", line 19\n    total_cost = np.sum(C[np.where(assignment_matrix == 1)])\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10434627532958984}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 4], [1, 1]]"
34,add,4,16303,16303,1,16303,1,"{'ok': True, 'value': 16303, 'stdout': '16303\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11552047729492188}",1,Compute: 6451 + 9852
35,ilp_partition,4,1,3,0,1,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09356522560119629}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 5, 11, 6]"
36,lcs,4,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10536479949951172}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbb""
T = ""cda"""
37,knap,16,393,,0,299,0,"{'ok': True, 'value': 393, 'stdout': '393\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11872196197509766}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 19, 8, 13, 3, 26, 29, 24, 13, 30, 23, 5, 3, 3, 32, 17]
V = [4, 28, 30, 12, 54, 40, 15, 19, 55, 55, 11, 14, 54, 9, 13, 54]
C = 136"
38,mul,8,3067190476575375,307799999999977775,0,307299999997725,0,"{'ok': True, 'value': 3067190476575375, 'stdout': '3067190476575375\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1150667667388916}",1,Compute: 78484925 * 39079995
39,lcs,8,3,4,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12131953239440918}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbdcccbc""
T = ""daabcbbb"""
40,sub,8,3631986,3631986,1,3631986,1,"{'ok': True, 'value': 3631986, 'stdout': '3631986\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12153077125549316}",1,Compute: 26557854 - 22925868
41,mul,8,888717097129724,888799999999964,0,888908497764,0,"{'ok': True, 'value': 888717097129724, 'stdout': '888717097129724\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10756468772888184}",1,Compute: 55085956 * 16133279
42,lcs,32,19,,0,18,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10765910148620605}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddddaaababdbdaddabbdbbcccdacbcdd""
T = ""ccbaaabdbbcadaadcacbcbbaccbcdcbba"""
43,ilp_assign,16,69,Cannot be determined without visual representation and matrix manipulation.,0,107,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_sfet99i_/main.py"", line 16, in <module>\n    min_cost = hungarian(C)\n  File ""/tmp/cot_exec_sfet99i_/main.py"", line 13, in hungarian\n    return min_cost  \nNameError: name \'min_cost\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09788155555725098}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[38, 5, 17, 18, 34, 24, 35], [2, 39, 40, 31, 16, 18, 3], [40, 21, 26, 41, 7, 35, 4], [10, 46, 26, 2, 27, 47, 26], [28, 7, 46, 30, 39, 30, 11], [11, 22, 31, 27, 11, 38, 19], [33, 8, 24, 23, 10, 41, 23]]"
44,sub,32,31350296711000340690426538218145,31350296710990340690426538218345,0,31350296711000340690426538218145,1,"{'ok': True, 'value': 31350296711000340690426538218145, 'stdout': '31350296711000340690426538218145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11157464981079102}",1,Compute: 73183822493762824653451468923916 - 41833525782762483963024930705771
45,lcs,32,18,,0,10,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11110806465148926}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcaccddadddcdbccaaabcacabadbdbdb""
T = ""aaccdccaabcabcbbcccdcdcbacaaddda"""
46,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10347962379455566}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""aa"""
47,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1070711612701416}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddaddab""
T = ""acbddaad"""
48,knap,16,300,,0,118,0,"{'ok': True, 'value': 300, 'stdout': '300\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10810041427612305}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 2, 29, 28, 27, 2, 32, 21, 17, 6, 23, 5, 8, 23, 2, 23]
V = [45, 23, 2, 30, 47, 10, 19, 27, 1, 27, 16, 1, 38, 48, 4, 30]
C = 129"
49,add,32,111588036603972076698304407552643,83740936603971976708304407552643,0,111588036603971076698304407552643,0,"{'ok': True, 'value': 111588036603972076698304407552643, 'stdout': '111588036603972076698304407552643\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10856914520263672}",1,Compute: 80646759920380079103873753786137 + 30941276683591997594430653766506
50,add,4,13013,13013,1,13013,1,"{'ok': True, 'value': 13013, 'stdout': '13013\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10165619850158691}",1,Compute: 3044 + 9969
51,rod,8,72,22,0,22,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10623431205749512}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 1, 2, 2, 7, 22, 9, 18]"
52,sub,8,50852468,50852468,1,50852468,1,"{'ok': True, 'value': 50852468, 'stdout': '50852468\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11850309371948242}",1,Compute: 71465572 - 20613104
53,rod,32,800,The answer cannot be determined without the actual calculation using the provided price list and the dynamic programming approach described.,0,235,0,"{'ok': True, 'value': 800, 'stdout': '800\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09891247749328613}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [25, 6, 53, 83, 8, 90, 40, 50, 7, 77, 92, 22, 46, 10, 53, 7, 57, 46, 78, 80, 33, 87, 40, 73, 59, 53, 24, 4, 59, 34, 25, 50]"
54,ilp_prod,4,46,Cannot be determined without a full implementation,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_zmyhynwp/main.py"", line 10, in <module>\n    prob += sum(profit[j] * x[j] for j in range(3)), ""Total Profit""\n  File ""/tmp/cot_exec_zmyhynwp/main.py"", line 10, in <genexpr>\n    prob += sum(profit[j] * x[j] for j in range(3)), ""Total Profit""\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18952608108520508}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4, 10]
consumption (rows=resources) = [[2, 1, 1], [4, 1, 3], [1, 2, 1]]
capacity = [12, 13, 14]
upper_bounds = [3, 7, 4]"
55,ilp_assign,32,112, ,0,90,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_bfllx1rf/main.py"", line 16, in <module>\n    min_cost = hungarian(C)\n  File ""/tmp/cot_exec_bfllx1rf/main.py"", line 13, in hungarian\n    return min_cost  \nNameError: name \'min_cost\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09745287895202637}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[70, 61, 6, 41, 4, 41, 51], [17, 82, 36, 53, 86, 19, 77], [19, 52, 40, 66, 8, 21, 17], [18, 62, 91, 83, 92, 93, 6], [94, 67, 6, 72, 89, 96, 90], [81, 50, 24, 45, 75, 11, 11], [72, 23, 34, 26, 34, 42, 90]]"
56,knap,2,7,13,0,13,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12189269065856934}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 5]
V = [2, 6, 7]
C = 6"
57,ilp_assign,4,14,Cannot be determined without visual representation and ability to perform matrix operations.,0,17,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_vqawbpce/main.py"", line 16, in <module>\n    min_cost = hungarian(C)\n  File ""/tmp/cot_exec_vqawbpce/main.py"", line 13, in hungarian\n    return min_cost\nNameError: name \'min_cost\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.12079238891601562}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 11, 4, 1], [11, 3, 3, 6], [9, 5, 2, 10], [8, 11, 3, 1]]"
58,add,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1026449203491211}",1,Compute: 15 + 43
59,add,4,4363,4363,1,4363,1,"{'ok': True, 'value': 4363, 'stdout': '4363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10390472412109375}",1,Compute: 3049 + 1314
60,rod,2,10,10,1,5,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10098409652709961}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 3]"
61,ilp_prod,2,18,,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_wkp0p2e_/main.py"", line 16, in <module>\n    prob += lpSum(profit[j] * x[j] for j in range(len(profit)))\nNameError: name \'lpSum\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18070673942565918}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 5]
consumption (rows=resources) = [[1, 3], [2, 3]]
capacity = [6, 7]
upper_bounds = [3, 3]"
62,ilp_assign,16,58,"The minimum total cost needs to be calculated using the Hungarian Algorithm, which is beyond the scope of a text-based explanation.",0, ,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_vnu1int5/main.py"", line 6, in <module>\n    C = C - np.min(C, axis=1, keepdims=True)\nNameError: name \'C\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2181839942932129}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 15, 16, 41, 19, 22, 11], [16, 23, 15, 11, 27, 30, 24], [37, 9, 25, 37, 1, 11, 38], [1, 44, 25, 46, 12, 10, 2], [2, 21, 33, 1, 3, 4, 8], [37, 40, 10, 10, 44, 25, 2], [27, 28, 37, 44, 22, 46, 16]]"
63,add,32,142015097264916484845342616074140,142015107280916484845342616444130,0,142015107261916484845342616474140,0,"{'ok': True, 'value': 142015097264916484845342616074140, 'stdout': '142015097264916484845342616074140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10327291488647461}",1,Compute: 63614992616708114520566631488775 + 78400104648208370324775984585365
64,mul,32,1735616122049056936783496798341010022119269065530673412258020780,,0,173296633367469794643674277771947662424626224,0,"{'ok': True, 'value': 1735616122049056936783496798341010022119269065530673412258020780, 'stdout': '1735616122049056936783496798341010022119269065530673412258020780\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13315820693969727}",1,Compute: 73058155820062295184423333813570 * 23756637470069348003849196338454
65,add,16,10588711885564532,1054930105494602,0,10588711855564532,0,"{'ok': True, 'value': 10588711885564532, 'stdout': '10588711885564532\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10366463661193848}",1,Compute: 1762398785486839 + 8826313100077693
66,ilp_prod,16,86,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_bdmp7jbt/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17061901092529297}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 33, 8, 14, 9, 20]
consumption (rows=resources) = [[4, 5, 15, 13, 6, 14], [14, 6, 8, 15, 11, 5], [12, 15, 3, 16, 7, 10], [1, 15, 15, 1, 7, 10]]
capacity = [39, 51, 41, 59]
upper_bounds = [3, 3, 3, 3, 4, 3]"
67,knap,2,17,15,0,15,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1205284595489502}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 2]
V = [9, 8, 8]
C = 5"
68,mul,16,67190237593290174076729869487072,6719497983973864672,0,67098667449679964896,0,"{'ok': True, 'value': 67190237593290174076729869487072, 'stdout': '67190237593290174076729869487072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10433340072631836}",1,Compute: 6909479298356287 * 9724356162305056
69,ilp_assign,8,24,The answer cannot be determined without applying the Hungarian Algorithm to the given matrix.,0,49,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6c0j4euw/main.py"", line 36, in <module>\n    min_cost = hungarian(C)\n  File ""/tmp/cot_exec_6c0j4euw/main.py"", line 20, in hungarian\n    new_zero_row, new_zero_col = next((i, j) for i in range(n) for j in range(n) if C[i][j] == 0 and i not in covered_rows and j not in covered_cols)\nStopIteration\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11280298233032227}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 11, 4, 16, 4, 23, 16], [14, 2, 10, 11, 24, 22, 5], [6, 21, 19, 13, 21, 3, 3], [3, 7, 24, 8, 2, 13, 1], [4, 13, 18, 17, 10, 15, 16], [19, 23, 22, 7, 14, 3, 12], [8, 9, 19, 6, 14, 7, 12]]"
70,rod,32,1600,228,0,278,0,"{'ok': True, 'value': 1600, 'stdout': '1600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11364507675170898}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [50, 33, 27, 15, 73, 43, 32, 76, 87, 93, 69, 88, 46, 21, 20, 43, 96, 2, 75, 7, 73, 20, 45, 47, 38, 81, 38, 42, 64, 52, 77, 56]"
71,sub,2,13,13,1,13,1,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11055588722229004}",1,Compute: 61 - 48
72,sub,4,2578,2578,1,2578,1,"{'ok': True, 'value': 2578, 'stdout': '2578\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1130518913269043}",1,Compute: 8290 - 5712
73,knap,8,103,The answer cannot be determined without implementing the dynamic programming algorithm and filling the `dp` table.,0,48,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11375188827514648}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 7, 4, 7, 10, 9, 6, 4]
V = [31, 26, 6, 2, 18, 29, 8, 17]
C = 25"
74,ilp_assign,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_c87cf9ul/main.py"", line 19\n    total_cost = np.sum(C[np.where(assignment_matrix == 1)])\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11485743522644043}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [2, 2]]"
75,ilp_partition,2,1,5,0,1,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10093474388122559}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 4, 1]"
76,ilp_partition,2,1,5,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11081790924072266}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 3, 6]"
77,knap,8,75,49,0,42,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11077427864074707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 10, 15, 2, 14, 7, 3, 5]
V = [1, 26, 27, 21, 1, 14, 1, 1]
C = 33"
78,knap,4,28,22,0,22,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11162900924682617}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 7, 5, 8]
V = [16, 12, 3, 11]
C = 12"
79,ilp_partition,32,0, ,0,10,0,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11383247375488281}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [91, 33, 34, 67, 59, 20, 58, 71, 20, 5, 81, 75, 23, 83, 66, 5, 41, 10, 25, 83, 59, 79, 31, 59]"
80,ilp_partition,4,0,2,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10931587219238281}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 11, 7, 10]"
81,ilp_partition,8,1,,0,11,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10423803329467773}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 11, 11, 2, 17, 5, 9, 20]"
82,mul,2,3905,3905,1,3905,1,"{'ok': True, 'value': 3905, 'stdout': '3905\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10959339141845703}",1,Compute: 71 * 55
83,add,16,4382461230891940,4382461220891940,0,4382461230892040,0,"{'ok': True, 'value': 4382461230891940, 'stdout': '4382461230891940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11532211303710938}",1,Compute: 1355025928791222 + 3027435302100718
84,ilp_partition,16,0,Not computable without implementation,0,2,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1100916862487793}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [40, 14, 2, 23, 31, 26, 1, 34, 5, 44, 6, 44, 48, 43, 26, 1]"
85,ilp_partition,32,1,10,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [67, 21, 91, 43, 84, 18, 61, 72, 8, 70, 11, 67, 44, 1, 11, 14, 55, 78, 46, 73, 58, 43, 49, 66]"
86,mul,2,3108,3108,1,3108,1,"{'ok': True, 'value': 3108, 'stdout': '3108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1139073371887207}",1,Compute: 84 * 37
87,knap,32,1716,Cannot be determined without programming,0,499,0,"{'ok': True, 'value': 1716, 'stdout': '1716\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12285661697387695}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [42, 9, 8, 45, 55, 18, 28, 58, 56, 19, 46, 40, 23, 43, 53, 49, 2, 53, 34, 60, 6, 16, 53, 50, 22, 1, 18, 19, 11, 43, 31, 23]
V = [64, 6, 44, 44, 21, 110, 27, 118, 39, 11, 65, 88, 97, 7, 10, 128, 23, 92, 75, 39, 118, 61, 92, 42, 104, 87, 70, 127, 101, 4, 80, 74]
C = 517"
88,ilp_prod,8,55,,0,55,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/scipy/optimize/_linprog_util.py"", line 431, in _clean_inputs\n    bounds_conv = np.atleast_2d(np.array(bounds, dtype=float))\nValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 2 dimensions. The detected shape was (1, 2) + inhomogeneous part.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_v4unped8/main.py"", line 19, in <module>\n    result = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/scipy/optimize/_linprog.py"", line 649, in linprog\n    lp, solver_options = _parse_linprog(lp, options, meth)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/scipy/optimize/_linprog_util.py"", line 1026, in _parse_linprog\n    lp = _clean_inputs(lp._replace(A_ub=A_ub, A_eq=A_eq))\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/scipy/optimize/_linprog_util.py"", line 433, in _clean_inputs\n    raise ValueError(\nValueError: Invalid input for linprog: unable to interpret bounds, check values and dimensions: setting an array element with a sequence. The requested array has an inhomogeneous shape after 2 dimensions. The detected shape was (1, 2) + inhomogeneous part.\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.4005460739135742}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 14, 21, 4]
consumption (rows=resources) = [[8, 8, 7, 6], [3, 4, 7, 5], [1, 3, 3, 5], [6, 6, 6, 2]]
capacity = [26, 17, 17, 24]
upper_bounds = [3, 3, 3, 3]"
89,add,8,74270325,74269725,0,74270325,1,"{'ok': True, 'value': 74270325, 'stdout': '74270325\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1153106689453125}",1,Compute: 43679612 + 30590713
90,mul,8,3961792921537000,3949999999955500,0,39609969770000,0,"{'ok': True, 'value': 3961792921537000, 'stdout': '3961792921537000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11701798439025879}",1,Compute: 83057326 * 47699500
91,sub,32,8889664476346805891872662567347,89896634476346805891802662567347,0,88888674476346805891872662564647,0,"{'ok': True, 'value': 8889664476346805891872662567347, 'stdout': '8889664476346805891872662567347\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10345101356506348}",1,Compute: 82033201482394529949881898385254 - 73143537006047724058009235817907
92,mul,4,18272306,18272306,1,18271606,0,"{'ok': True, 'value': 18272306, 'stdout': '18272306\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12464642524719238}",1,Compute: 2501 * 7306
93,ilp_assign,4,10,The answer can be found by implementing the Hungarian Algorithm or using a library that implements it.,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_hi771eu_/main.py"", line 16, in <module>\n    min_cost = hungarian(C)\n  File ""/tmp/cot_exec_hi771eu_/main.py"", line 13, in hungarian\n    return total_cost\nNameError: name \'total_cost\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11440205574035645}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1, 9, 8], [1, 10, 2, 12], [7, 4, 5, 6], [12, 8, 10, 3]]"
94,lcs,4,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11136412620544434}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abba""
T = ""dcb"""
95,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10860824584960938}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""a"""
96,ilp_prod,16,119,,0,147,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_si5wzbdb/main.py"", line 8, in <module>\n    profit += lpSum(profit[j] * x[j] for j in range(6))\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 2469, in lpSum\n    return LpAffineExpression().addInPlace(vector)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 968, in addInPlace\n    for e in other:\n  File ""/tmp/cot_exec_si5wzbdb/main.py"", line 8, in <genexpr>\n    profit += lpSum(profit[j] * x[j] for j in range(6))\nTypeError: \'LpProblem\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1848132610321045}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [35, 18, 18, 14, 21, 26]
consumption (rows=resources) = [[14, 2, 5, 1, 13, 3], [3, 5, 14, 10, 14, 5], [14, 10, 12, 3, 8, 15], [12, 2, 13, 14, 1, 14]]
capacity = [52, 60, 45, 55]
upper_bounds = [3, 4, 3, 3, 4, 3]"
97,knap,32,1472,Cannot be determined without programming,0,494,0,"{'ok': True, 'value': 1472, 'stdout': '1472\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11565184593200684}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [42, 47, 4, 17, 51, 20, 23, 10, 18, 27, 64, 28, 31, 17, 30, 50, 46, 17, 64, 14, 4, 46, 63, 59, 40, 2, 29, 21, 64, 62, 41, 11]
V = [67, 36, 103, 49, 82, 75, 99, 16, 54, 10, 81, 64, 88, 113, 58, 67, 89, 42, 79, 5, 92, 15, 39, 91, 6, 126, 16, 7, 62, 12, 4, 58]
C = 531"
98,lcs,16,10,,0,8,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10513067245483398}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdaaadbcdddbaabc""
T = ""ccadccdddabbbccaa"""
99,ilp_partition,16,0,0,1,10,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11408829689025879}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 9, 27, 37, 43, 23, 7, 28, 28, 16, 31, 25, 15, 26, 16, 42]"
