idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,knap,0,81,42,0,42,0,81,1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 7, 9, 4, 9, 17, 7, 14]
V = [2, 15, 2, 26, 10, 3, 11, 29]
C = 40"
1,lcs,0,5,4,0,4,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acadddd""
T = ""adaddadc"""
2,ilp_partition,0,0,42,0,42,0,0,1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 9, 4, 2, 10, 1, 20, 1]"
3,ilp_partition,0,0,42,0,42,0,0,1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 4, 2, 7, 8, 19, 14, 6]"
4,knap,0,69,42,0,42,0,69,1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 1, 15, 1, 9]
V = [16, 18, 8, 40, 12, 23]
C = 16"
5,ilp_partition,0,1,42,0,42,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 3, 19, 18, 8, 19, 3, 9, 12, 10, 19, 18]"
6,ilp_prod,0,38,42,0,42,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7]
consumption (rows=resources) = [[3, 3], [3, 4]]
capacity = [18, 20]
upper_bounds = [6, 5]"
7,ilp_prod,0,76,42,0,42,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 18, 11]
consumption (rows=resources) = [[8, 2, 7], [5, 8, 1]]
capacity = [20, 29]
upper_bounds = [3, 3, 3]"
8,lcs,0,3,4,0,3,1,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadabdcdad""
T = ""cdbbb"""
9,lcs,0,4,4,1,4,1,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbdcc""
T = ""cadbbdadcbdd"""
10,ilp_partition,0,1,42,0,42,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 18, 9, 16, 11, 4, 7, 11, 2, 1, 1, 10, 20, 11]"
11,knap,0,134,42,0,59,0,134,1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 6, 9, 17, 6, 9, 10]
V = [30, 21, 32, 31, 8, 2, 20, 25]
C = 33"
12,knap,0,97,42,0,42,0,97,1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 18, 8, 17, 15, 8, 17, 1, 13, 11]
V = [28, 4, 20, 9, 14, 4, 20, 5, 5, 20]
C = 61"
13,knap,0,127,42,0,42,0,127,1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 12, 1, 18, 18, 11, 15, 1]
V = [15, 12, 36, 38, 12, 6, 36, 17]
C = 45"
14,lcs,0,3,4,0,4,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acaaaadb""
T = ""abddbcbbdca"""
15,lcs,0,4,4,1,4,1,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcacdbccdd""
T = ""dbddb"""
16,ilp_partition,0,0,42,0,42,0,0,1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 6, 8, 6, 4, 14, 13, 18]"
17,ilp_prod,0,88,42,0,42,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 13, 9]
consumption (rows=resources) = [[1, 1, 4], [8, 3, 1]]
capacity = [22, 16]
upper_bounds = [3, 5, 5]"
18,ilp_prod,0,44,42,0,42,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 10, 11]
consumption (rows=resources) = [[6, 3, 6], [7, 4, 5], [2, 7, 6]]
capacity = [27, 25, 27]
upper_bounds = [3, 3, 4]"
19,ilp_prod,0,64,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 15, 15, 8]
consumption (rows=resources) = [[5, 4, 8, 3], [2, 6, 1, 7], [2, 7, 3, 3]]
capacity = [20, 13, 29]
upper_bounds = [4, 3, 3, 3]"
