idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6782174110412598}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbca""
T = ""bccab"""
1,ilp_prod,4,46,93,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_kxs658b_/main.py"", line 10, in <module>\n    x = pulp.LpVariable.dicts(\'x\', range(len(profit)), lowBound=0, upBound=upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2757401466369629}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 12, 11]
consumption (rows=resources) = [[3, 3, 3], [3, 1, 3], [2, 4, 2]]
capacity = [16, 9, 13]
upper_bounds = [3, 3, 3]"
2,ilp_assign,4,15,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_mwf3nbbs/main.py"", line 11\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08369994163513184}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 6, 4, 7], [5, 1, 6, 3], [6, 10, 5, 4], [6, 2, 9, 10]]"
3,knap,2,9,12,0,12,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_gn456cqv/main.py"", line 8\n    dp = np.zeros((C + 1, len(W) + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10030555725097656}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 3]
V = [1, 7, 9]
C = 4"
4,rod,4,32,42,0,10,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07932281494140625}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 1, 6, 10]"
5,ilp_assign,4,15,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_c0yp17f0/main.py"", line 11\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08582592010498047}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 12, 8, 6], [2, 4, 11, 6], [1, 1, 1, 5], [12, 10, 6, 8]]"
6,rod,4,24,42,0,11,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08627820014953613}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 7, 4, 5]"
7,ilp_assign,2,7,6,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_q2ssxeee/main.py"", line 7, in <module>\n    workers = range(len(C))\nNameError: name \'C\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1742544174194336}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4], [3, 6]]"
8,ilp_assign,6,30,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_7cyq77ui/main.py"", line 8\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09753298759460449}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 15, 17, 18, 2, 6], [10, 18, 9, 12, 8, 13], [18, 13, 6, 16, 9, 11], [8, 9, 8, 1, 13, 11], [14, 8, 9, 7, 3, 6], [15, 5, 9, 15, 17, 6]]"
9,lcs,6,4,4,1,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21195602416992188}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbbac""
T = ""bbcdbab"""
10,knap,2,6,42,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_0vkd_kvq/main.py"", line 8\n    dp = np.zeros((C + 1, len(W) + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09766483306884766}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 5]
V = [4, 6, 4]
C = 6"
11,ilp_prod,6,85,42,0,68,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 3, 11, 5]
consumption (rows=resources) = [[3, 3, 1, 3], [1, 4, 1, 6], [3, 3, 6, 2]]
capacity = [16, 24, 18]
upper_bounds = [5, 5, 3, 4]"
12,ilp_partition,4,0,2,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21535110473632812}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 3, 2, 9]"
13,ilp_partition,6,1,42,0,4,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2205345630645752}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 16, 17, 12, 4, 11]"
14,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09244537353515625}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbda""
T = ""adb"""
15,lcs,4,1,3,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20803189277648926}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacd""
T = ""dbca"""
16,ilp_partition,6,2,4,0,5,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21482038497924805}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 7, 14, 2, 2, 3]"
17,ilp_assign,2,6,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_rh1f_yay/main.py"", line 7, in <module>\n    workers = range(len(C))\nNameError: name \'C\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16165447235107422}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 6], [5, 2]]"
18,ilp_partition,4,1,4,0,6,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.24118900299072266}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 2, 12]"
19,lcs,6,3,4,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21265530586242676}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdabc""
T = ""dbbcddb"""
20,lcs,6,2,3,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20578885078430176}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccbaa""
T = ""cbbcccc"""
21,rod,6,78,42,0,42,0,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08935761451721191}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [13, 18, 1, 7, 17, 15]"
22,ilp_partition,6,2,42,0,4,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20540976524353027}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 18, 7, 18, 14, 3]"
23,rod,2,6,4,0,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10091328620910645}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 6]"
24,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09440231323242188}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""a"""
25,rod,2,8,5,0,5,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10201764106750488}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
26,rod,6,16,42,0,42,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08190464973449707}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [1, 1, 8, 9, 7, 6]"
27,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07810258865356445}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dc""
T = ""bac"""
28,rod,4,16,42,0,13,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09103775024414062}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 6, 10, 3]"
29,rod,2,8,4,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0862891674041748}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
30,rod,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08022689819335938}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
31,ilp_assign,2,6,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_udhmtlkq/main.py"", line 7, in <module>\n    workers = range(len(C))\nNameError: name \'C\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1612529754638672}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5], [6, 1]]"
32,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2169334888458252}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baca""
T = ""aaada"""
33,ilp_prod,6,72,42,0,78,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 10, 12, 3]
consumption (rows=resources) = [[4, 6, 6, 2], [6, 4, 3, 2], [1, 5, 1, 3]]
capacity = [16, 24, 23]
upper_bounds = [4, 3, 3, 7]"
34,ilp_partition,4,2,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u48j71vm/main.py"", line 17, in <module>\n    print(min_partition_difference(weights))\n  File ""/tmp/cot_exec_u48j71vm/main.py"", line 12, in min_partition_difference\n    if abs(left_sum - right_sum) < min_diff:\nUnboundLocalError: local variable \'min_diff\' referenced before assignment\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20730829238891602}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 6, 8]"
35,ilp_partition,2,1,4,0,5,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20095539093017578}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 6, 2]"
36,ilp_prod,2,60,70,0,46,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_lqrohsm1/main.py"", line 10, in <module>\n    x = pulp.LpVariable.dicts(\'x\', range(len(profit)), lowBound=0, cat=\'Integer\', up=upper_bounds)\nTypeError: LpVariable.dicts() got an unexpected keyword argument \'up\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17387652397155762}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[1, 2], [1, 2]]
capacity = [10, 10]
upper_bounds = [10, 5]"
37,ilp_prod,6,100,42,0,70,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_zteahx5p/main.py"", line 10\n    x = pulp.LpVariable.dicts(\'x\', range(len(profit)), lowBound=0, upBound=upper_bounds)\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09660172462463379}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 12, 16, 14]
consumption (rows=resources) = [[5, 3, 1, 1], [4, 6, 4, 3], [3, 5, 4, 3]]
capacity = [24, 23, 22]
upper_bounds = [4, 3, 5, 7]"
38,ilp_partition,6,0,1,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21384549140930176}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 3, 9, 6, 4, 5]"
39,rod,6,108,42,0,42,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09707212448120117}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [18, 14, 4, 10, 9, 8]"
40,ilp_assign,6,29,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_qn__aqfa/main.py"", line 8\n    tasks = range(6)\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09740757942199707}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 18, 10, 5, 15, 9], [16, 6, 15, 17, 2, 9], [17, 4, 14, 3, 12, 3], [15, 1, 6, 17, 6, 3], [13, 9, 10, 7, 17, 7], [8, 11, 9, 3, 3, 17]]"
41,rod,4,32,42,0,42,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0824441909790039}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 6, 12, 7]"
42,ilp_prod,2,20,26,0,21,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_b8i3tjgd/main.py"", line 10, in <module>\n    x = pulp.LpVariable.dicts(\'x\', range(len(profit)), lowBound=0, upBound=upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1797037124633789}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[3, 1], [1, 3]]
capacity = [7, 6]
upper_bounds = [3, 3]"
43,lcs,4,1,3,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20447516441345215}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbaa""
T = ""cdcc"""
44,ilp_partition,2,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19772863388061523}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 4, 3]"
45,ilp_assign,2,7,6,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_5qnufmex/main.py"", line 7, in <module>\n    workers = range(len(C))\nNameError: name \'C\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15969634056091309}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5], [2, 4]]"
46,lcs,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_f7wt9176/main.py"", line 6\n    n = len(S)\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08900642395019531}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""da"""
47,lcs,6,2,4,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21301531791687012}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadbbc""
T = ""ddabda"""
48,rod,4,28,42,0,9,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09838438034057617}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 5, 1, 3]"
49,ilp_prod,4,54,42,0,69,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_ud2fr4r0/main.py"", line 10\n    x = pulp.LpVariable.dicts(\'x\', range(len(profit)), lowBound=0, upBound=upper_bounds)\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09301495552062988}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 9, 4]
consumption (rows=resources) = [[4, 2, 2], [3, 1, 4], [1, 2, 1]]
capacity = [12, 13, 12]
upper_bounds = [3, 6, 3]"
50,ilp_partition,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20996308326721191}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 5, 5]"
51,ilp_assign,6,27,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_dqrb5yqh/main.py"", line 8\n    tasks = range(6)\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09961652755737305}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5, 15, 12, 10, 13], [8, 4, 7, 10, 3, 4], [8, 13, 11, 16, 4, 6], [2, 2, 1, 7, 2, 16], [17, 15, 11, 9, 4, 6], [4, 8, 13, 8, 16, 15]]"
52,rod,6,60,42,0,42,0,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09200358390808105}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [10, 5, 18, 7, 9, 10]"
53,ilp_prod,2,28,36,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_r04lsj8y/main.py"", line 10, in <module>\n    x = pulp.LpVariable.dicts(\'x\', range(len(profit)), lowBound=0, upBound=upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17737269401550293}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[3, 1], [1, 3]]
capacity = [9, 8]
upper_bounds = [3, 3]"
54,rod,2,8,5,0,5,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0842735767364502}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
55,ilp_prod,4,54,42,0,66,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_o60h1d9z/main.py"", line 10, in <module>\n    x = pulp.LpVariable.dicts(\'x\', range(len(profit)), lowBound=0, upBound=upper_bounds)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 461, in dicts\n    d[i] = LpVariable(\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 296, in __init__\n    if not math.isfinite(self.upBound):\nTypeError: must be real number, not list\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18471598625183105}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 12, 9]
consumption (rows=resources) = [[2, 1, 4], [2, 2, 2], [1, 4, 4]]
capacity = [16, 12, 16]
upper_bounds = [6, 4, 4]"
56,knap,4,23,42,0,31,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec___mivhri/main.py"", line 8\n    dp = np.zeros((C + 1, len(W) + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09209275245666504}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 8, 7]
V = [8, 15, 8, 1]
C = 9"
57,lcs,6,2,4,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21896791458129883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abadcb""
T = ""cccdcdc"""
58,knap,4,24,42,0,29,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_58g4c3q3/main.py"", line 8\n    dp = np.zeros((len(V) + 1, C + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08946657180786133}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 2, 2, 5]
V = [10, 6, 14, 9]
C = 7"
59,ilp_partition,2,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2120509147644043}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 4, 5]"
60,ilp_assign,2,3,3,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_y09g261z/main.py"", line 8\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08811354637145996}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [2, 3]]"
61,knap,2,9,9,1,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_xkzkg4kx/main.py"", line 8\n    dp = np.zeros((C + 1, len(W) + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08889555931091309}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 3]
V = [2, 6, 9]
C = 3"
62,ilp_prod,2,22,29,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_lqdt5ldk/main.py"", line 7, in <module>\n    x = pulp.LpVariable.dicts(""x"", range(len(profit)), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16945958137512207}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 7]
consumption (rows=resources) = [[3, 1], [2, 3]]
capacity = [8, 10]
upper_bounds = [3, 3]"
63,ilp_partition,4,2,4,0,1,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19947314262390137}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 2, 9, 11]"
64,knap,4,30,42,0,32,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_lbiy31eo/main.py"", line 8\n    dp = np.zeros((len(V) + 1, C + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0875389575958252}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 6, 2, 4]
V = [14, 7, 16, 4]
C = 8"
65,knap,6,62,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_15fe6oiy/main.py"", line 8\n    dp = np.zeros((len(V) + 1, C + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08481335639953613}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 5, 7, 4, 10]
V = [24, 2, 16, 22, 13, 23]
C = 16"
66,rod,4,24,42,0,42,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08495497703552246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 12, 12, 9]"
67,knap,6,50,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_0frspfot/main.py"", line 8\n    dp = np.zeros((len(V) + 1, C + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09119296073913574}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 6, 7, 9, 3, 9]
V = [24, 2, 17, 3, 9, 21]
C = 22"
68,knap,4,12,42,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_n7xvcy10/main.py"", line 8\n    dp = np.zeros((len(V) + 1, C + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10561418533325195}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 6, 7, 1]
V = [10, 5, 7, 2]
C = 10"
69,rod,4,44,42,0,42,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09411978721618652}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 7, 5, 9]"
70,ilp_assign,6,26,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_tw6bmvfz/main.py"", line 8\n    tasks = range(6)\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07827997207641602}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 15, 10, 1, 2, 18], [2, 17, 5, 2, 9, 4], [14, 3, 7, 1, 16, 5], [9, 7, 15, 13, 11, 9], [9, 8, 8, 2, 6, 12], [14, 18, 17, 2, 12, 18]]"
71,ilp_prod,6,38,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_y2z4iyqk/main.py"", line 7, in <module>\n    x = pulp.LpVariable.dicts(""x"", range(len(profit)), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18714666366577148}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 6, 9, 15]
consumption (rows=resources) = [[2, 3, 1, 1], [1, 5, 6, 1], [5, 3, 6, 6]]
capacity = [22, 14, 13]
upper_bounds = [3, 3, 3, 3]"
72,ilp_prod,2,16,20,0,28,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4c01c43eec594f6fb0060946995ab06c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4c01c43eec594f6fb0060946995ab06c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 3.9999\nCbc0012I Integer solution of -16 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -16, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -16 to -16\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15676069259643555}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4]
consumption (rows=resources) = [[2, 3], [3, 3]]
capacity = [8, 6]
upper_bounds = [3, 3]"
73,knap,6,43,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_8adqnvof/main.py"", line 8\n    dp = np.zeros((len(V) + 1, C + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1003715991973877}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 7, 7, 3, 6, 8]
V = [5, 20, 16, 7, 4, 14]
C = 19"
74,ilp_prod,6,54,42,0,69,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 6, 15, 15]
consumption (rows=resources) = [[2, 5, 1, 3], [6, 5, 6, 6], [6, 5, 2, 4]]
capacity = [21, 20, 18]
upper_bounds = [3, 3, 3, 3]"
75,knap,4,21,42,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_414cx7to/main.py"", line 8\n    dp = np.zeros((len(V) + 1, C + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08669304847717285}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 1, 4]
V = [15, 6, 2, 13]
C = 4"
76,ilp_assign,6,26,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_7uw7hy57/main.py"", line 8\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09528589248657227}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1, 5, 9, 8, 5], [4, 6, 14, 2, 4, 18], [9, 4, 7, 9, 3, 17], [3, 3, 7, 6, 17, 14], [1, 12, 16, 10, 8, 7], [16, 8, 14, 15, 12, 18]]"
77,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.086883544921875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""ad"""
78,ilp_partition,4,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21506166458129883}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 3, 3]"
79,ilp_prod,4,66,42,0,68,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 9, 11]
consumption (rows=resources) = [[3, 4, 2], [1, 1, 1], [2, 2, 2]]
capacity = [16, 11, 12]
upper_bounds = [5, 4, 6]"
80,knap,2,9,42,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_207zx77p/main.py"", line 8\n    dp = np.zeros((len(W) + 1, C + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09410572052001953}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 4]
V = [1, 9, 4]
C = 5"
81,ilp_assign,4,8,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_cdnj_sn7/main.py"", line 11\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09366130828857422}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 10, 2, 4], [4, 1, 4, 7], [2, 5, 9, 2], [12, 2, 1, 11]]"
82,ilp_assign,6,20,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_0qlfnjux/main.py"", line 8\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08875823020935059}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 6, 8, 8, 10, 15], [18, 13, 7, 15, 9, 11], [16, 4, 7, 3, 2, 1], [1, 16, 11, 13, 10, 7], [13, 6, 5, 1, 1, 13], [5, 18, 2, 13, 9, 5]]"
83,rod,6,54,42,0,42,0,"{'ok': True, 'value': 54, 'stdout': '54\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09150195121765137}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [9, 15, 6, 18, 12, 16]"
84,ilp_partition,6,1,42,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20239853858947754}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 18, 2, 15, 5]"
85,ilp_prod,6,48,42,0,68,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 8, 17, 9]
consumption (rows=resources) = [[3, 5, 1, 6], [4, 5, 4, 4], [3, 5, 5, 6]]
capacity = [23, 23, 13]
upper_bounds = [4, 3, 3, 3]"
86,ilp_assign,4,17,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_dn9aatob/main.py"", line 8\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10012531280517578}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 6, 7, 2], [2, 6, 10, 8], [2, 5, 4, 10], [9, 12, 8, 11]]"
87,ilp_partition,4,2,4,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gimik6wl/main.py"", line 17, in <module>\n    print(min_partition_difference(weights))\n  File ""/tmp/cot_exec_gimik6wl/main.py"", line 12, in min_partition_difference\n    if abs(left_sum - right_sum) < min_diff:\nUnboundLocalError: local variable \'min_diff\' referenced before assignment\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20615077018737793}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 10, 2, 8]"
88,lcs,6,2,4,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22591710090637207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adaacb""
T = ""bbccddb"""
89,knap,6,42,42,1,52,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_nk6t1pli/main.py"", line 8\n    dp = np.zeros((len(V) + 1, C + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09047102928161621}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 12, 12, 12, 8, 10]
V = [3, 4, 20, 17, 19, 13]
C = 28"
90,ilp_prod,4,31,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_ic956pwd/main.py"", line 10\n    x = pulp.LpVariable.dicts(\'x\', range(len(profit)), lowBound=0, upBound=upper_bounds)\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.10054254531860352}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 11, 4]
consumption (rows=resources) = [[4, 3, 1], [1, 3, 1], [1, 1, 4]]
capacity = [9, 8, 11]
upper_bounds = [3, 3, 3]"
91,knap,6,62,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec__h_dnahk/main.py"", line 8\n    dp = np.zeros((len(V) + 1, C + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09005475044250488}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 12, 2, 3, 10]
V = [22, 22, 23, 3, 15, 8]
C = 17"
92,lcs,2,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11071443557739258}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""dba"""
93,ilp_partition,2,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20658206939697266}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 5, 4]"
94,ilp_assign,4,11,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_0f4ixpgh/main.py"", line 11\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.12236404418945312}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5, 3, 9], [4, 5, 4, 4], [6, 2, 5, 2], [8, 2, 11, 10]]"
95,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22614145278930664}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbc""
T = ""cdcdd"""
96,knap,2,10,15,0,10,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_7n6vllqj/main.py"", line 8\n    dp = np.zeros((C + 1, len(W) + 1))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.11665797233581543}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 2]
V = [5, 5, 10]
C = 5"
97,rod,6,36,42,0,42,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09325170516967773}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [6, 7, 12, 13, 17, 11]"
98,lcs,6,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20775532722473145}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caddcd""
T = ""dadcbcd"""
99,ilp_assign,2,6,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_mk98ljic/main.py"", line 7, in <module>\n    workers = range(len(C))\nNameError: name \'C\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17934250831604004}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [3, 5]]"
