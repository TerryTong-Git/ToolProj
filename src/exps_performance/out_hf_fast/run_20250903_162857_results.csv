idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,lcs,6,2,4,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.433666467666626}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbbab""
T = ""bdccdca"""
1,ilp_assign,4,24,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_vvti_mah/main.py"", line 11\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08954119682312012}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 12, 11, 12], [6, 2, 8, 11], [9, 2, 3, 9], [7, 6, 8, 12]]"
2,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07945513725280762}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbda""
T = ""bddbc"""
3,rod,6,108,42,0,42,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07858920097351074}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [18, 7, 17, 14, 16, 12]"
4,ilp_prod,6,58,42,0,62,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 14, 3, 13]
consumption (rows=resources) = [[4, 5, 1, 2], [6, 2, 5, 5], [2, 1, 5, 3]]
capacity = [12, 22, 13]
upper_bounds = [3, 3, 3, 4]"
5,ilp_assign,6,22,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_dqq_eddv/main.py"", line 12, in <module>\n    model += pulp.lpSum(C[i][j] * vars[i][j] for i in range(n) for j in range(n))\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 2469, in lpSum\n    return LpAffineExpression().addInPlace(vector)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py"", line 968, in addInPlace\n    for e in other:\n  File ""/tmp/cot_exec_dqq_eddv/main.py"", line 12, in <genexpr>\n    model += pulp.lpSum(C[i][j] * vars[i][j] for i in range(n) for j in range(n))\nTypeError: \'LpVariable\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2263188362121582}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1, 15, 1, 9, 8], [9, 4, 6, 12, 10, 3], [6, 6, 9, 17, 6, 9], [10, 15, 11, 16, 16, 4], [1, 10, 13, 11, 14, 7], [9, 4, 9, 17, 7, 14]]"
6,knap,2,8,42,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09913015365600586}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 4]
V = [4, 2, 8]
C = 6"
7,knap,4,20,42,0,22,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10492062568664551}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 8, 5]
V = [1, 14, 4, 6]
C = 10"
8,ilp_prod,2,31,39,0,31,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_g6nhvagl/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2549777030944824}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7]
consumption (rows=resources) = [[1, 3], [2, 2]]
capacity = [7, 10]
upper_bounds = [5, 3]"
9,ilp_partition,4,1,1,1,4,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.28767967224121094}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 8, 1, 5]"
10,rod,4,44,42,0,42,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08349013328552246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 12, 5, 2]"
11,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08819365501403809}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""ad"""
12,ilp_prod,6,34,42,0,65,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_4_xw0iqz/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0)\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15602636337280273}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 17, 10, 3]
consumption (rows=resources) = [[4, 6, 5, 3], [6, 6, 4, 1], [6, 3, 2, 2]]
capacity = [12, 16, 13]
upper_bounds = [3, 3, 3, 4]"
13,ilp_assign,2,2,2,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '  File ""/tmp/cot_exec_wih645cz/main.py"", line 8\n    tasks = range(len(C[0]))\nIndentationError: unexpected indent\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09000921249389648}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3], [1, 1]]"
14,ilp_partition,6,0,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_hgz1c_63/main.py"", line 11, in <module>\n    model += abs(sum([weights[i] * x[i] for i in range(num_items)]) - sum([weights[i] * (1 - x[i]) for i in range(num_items)]))\nTypeError: bad operand type for abs(): \'LpAffineExpression\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1632840633392334}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 8, 1, 13, 5, 2]"
15,knap,6,49,42,0,42,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/122ed0bf9b6645099357224ad9be2932-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/122ed0bf9b6645099357224ad9be2932-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 6 COLUMNS\nAt line 31 RHS\nAt line 33 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 1 rows, 6 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 50.5 - 0.00 seconds\nCgl0004I processed model has 1 rows, 6 columns (6 integer (6 of which binary)) and 6 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0038I Initial state - 1 integers unsatisfied sum - 0.25\nCbc0038I Solution found of -47\nCbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 6 columns, reduced to 0 rows 0 columns\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I Round again with cutoff of -48.2499\nCbc0038I Reduced cost fixing fixed 3 variables on major pass 2\nCbc0038I Pass   1: suminf.    0.08928 (1) obj. -48.2499 iterations 1\nCbc0038I Pass   2: suminf.    0.25000 (1) obj. -50.5 iterations 1\nCbc0038I Pass   3: suminf.    0.08928 (1) obj. -48.2499 iterations 1\nCbc0038I Pass   4: suminf.    0.25000 (1) obj. -50.5 iterations 1\nCbc0038I Pass   5: suminf.    0.08928 (1) obj. -48.2499 iterations 1\nCbc0038I Pass   6: suminf.    0.08928 (1) obj. -48.2499 iterations 0\nCbc0038I Pass   7: suminf.    0.08928 (1) obj. -48.2499 iterations 0\nCbc0038I Pass   8: suminf.    0.08928 (1) obj. -48.2499 iterations 0\nCbc0038I Pass   9: suminf.    0.44444 (1) obj. -48.6667 iterations 3\nCbc0038I Pass  10: suminf.    0.48610 (2) obj. -48.2499 iterations 2\nCbc0038I Pass  11: suminf.    0.44444 (1) obj. -48.6667 iterations 1\nCbc0038I Pass  12: suminf.    0.44444 (1) obj. -48.6667 iterations 0\nCbc0038I Pass  13: suminf.    0.44444 (1) obj. -48.6667 iterations 0\nCbc0038I Pass  14: suminf.    0.08928 (1) obj. -48.2499 iterations 3\nCbc0038I Pass  15: suminf.    0.05358 (1) obj. -48.2499 iterations 1\nCbc0038I Solution found of -49\nCbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous\nCbc0038I Full problem 1 rows 6 columns, reduced to 1 rows 3 columns\nCbc0038I Mini branch and bound did not improve solution (0.00 seconds)\nCbc0038I Round again with cutoff of -50.0999\nCbc0038I Reduced cost fixing fixed 5 variables on major pass 3\nCbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -49 - took 0.00 seconds\nCbc0012I Integer solution of -49 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 1 rows 6 columns, reduced to 0 rows 0 columns\nCbc0001I Search completed - best objective -49, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 5 variables fixed on reduced cost\nCuts at root node changed objective from -50.5 to -47\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                49.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n49.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18356704711914062}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 12, 9, 3, 9, 9]
V = [7, 14, 2, 16, 12, 19]
C = 24"
16,ilp_partition,2,1,1,1,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 5, 1]"
17,ilp_partition,2,1,3,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_5tyseywg/main.py"", line 23, in <module>\n    print(min_partition_difference(weights))\n  File ""/tmp/cot_exec_5tyseywg/main.py"", line 11, in min_partition_difference\n    dp[j][0] = float(\'inf\')\nOverflowError: cannot convert float infinity to integer\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2422780990600586}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 5, 6]"
18,ilp_prod,4,40,42,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xgufwg7o/main.py"", line 7, in <module>\n    x = LpVariable.dicts(""x"", range(len(profit)), lowBound=0, cat=\'Integer\')\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2516181468963623}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 11, 9]
consumption (rows=resources) = [[2, 3, 3], [4, 4, 1], [4, 2, 4]]
capacity = [14, 10, 13]
upper_bounds = [3, 3, 3]"
19,rod,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08646178245544434}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
