idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,mul,8,7008056456815568,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 76207208 * 91960546
1,ilp_assign,8,22,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 15, 9, 16, 24, 2, 1], [11, 16, 23, 1, 8, 18, 5], [2, 13, 4, 8, 2, 10, 20], [12, 4, 4, 9, 9, 24, 5], [8, 18, 24, 20, 5, 16, 2], [14, 15, 23, 1, 1, 11, 21], [14, 10, 16, 2, 24, 15, 11]]"
2,ilp_partition,16,1,2,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 45, 14, 11, 33, 23, 27, 33, 16, 19, 42, 28, 46, 37, 26, 42]"
3,lcs,2,2,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""bcd"""
4,lcs,32,20,6,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccbaadbbaddcdcbacbbcdabdcbddbda""
T = ""cacbbaabdadabbabadaaaacbdbdccca"""
5,lcs,16,8,-8,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbbbbddcacdacbc""
T = ""adcaabadaccbbccd"""
6,lcs,4,2,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacd""
T = ""cba"""
7,rod,8,64,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [8, 1, 4, 7, 14, 22, 10, 16]"
8,ilp_partition,16,0,0,1,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 42, 38, 28, 39, 16, 34, 12, 12, 45, 22, 21, 13, 42, 1, 19]"
9,knap,32,1654,7,0,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 59, 28, 48, 6, 64, 37, 52, 36, 19, 49, 32, 3, 22, 34, 35, 59, 40, 56, 19, 1, 28, 34, 25, 1, 21, 8, 4, 39, 64, 24, 27]
V = [44, 17, 76, 40, 48, 73, 91, 108, 87, 89, 52, 16, 72, 108, 60, 33, 113, 100, 46, 4, 39, 23, 56, 122, 7, 7, 124, 95, 105, 92, 110, 13]
C = 488"
10,ilp_prod,32,362,35,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [88, 38, 20, 34, 74, 13]
consumption (rows=resources) = [[32, 9, 17, 3, 8, 6], [22, 17, 31, 28, 7, 3], [22, 9, 30, 21, 24, 30], [1, 21, 24, 17, 32, 13]]
capacity = [97, 84, 102, 124]
upper_bounds = [3, 4, 3, 3, 3, 3]"
11,sub,32,46284063327858623697753428588035,93331590,0,93331590892230411336968269375003,0,"{'ok': True, 'value': 373326363568921645347873077500012, 'stdout': '373326363568921645347873077500012\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4646148681640625}",0,Compute: 93331590892230411336968269375003 - 47047527564371787639214840786968
12,ilp_prod,16,168,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 42, 23, 19, 42, 4]
consumption (rows=resources) = [[11, 16, 11, 12, 3, 12], [9, 6, 11, 2, 8, 3], [10, 4, 16, 16, 12, 7], [14, 7, 8, 6, 8, 15]]
capacity = [45, 34, 44, 55]
upper_bounds = [3, 3, 3, 3, 3, 3]"
13,add,2,134,157,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 97 + 37
14,knap,8,112,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 5, 16, 13, 7, 7, 2, 11]
V = [13, 31, 18, 12, 32, 27, 4, 10]
C = 38"
15,ilp_partition,4,1,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 10, 8, 3]"
16,ilp_prod,32,760,27,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 95, 3, 51, 61, 24]
consumption (rows=resources) = [[5, 10, 22, 26, 3, 30], [6, 13, 8, 29, 24, 18], [5, 6, 14, 4, 30, 16], [7, 9, 19, 20, 11, 2]]
capacity = [81, 121, 118, 112]
upper_bounds = [10, 8, 3, 3, 3, 3]"
17,lcs,32,19,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddbcddabdabcdbaddbcaaaababdccca""
T = ""bbbcddbadccbacbdccacbcdbdccabcc"""
18,lcs,32,20,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbadbccbadcdcbbadcccbcacbbbabac""
T = ""baaadacbdbcaccbbccdcadbdacbabba"""
19,mul,32,2439363823747521218717279597714182308571042033437643225257443680,5,0,2,0,"{'ok': True, 'value': 121452662590870490452632786924160, 'stdout': '121452662590870490452632786924160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1000986099243164}",0,Compute: 30363165647717622613158196731040 * 80339574998527416325655743109167
20,ilp_prod,16,162,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 45, 11, 48, 35, 26]
consumption (rows=resources) = [[5, 15, 15, 12, 16, 8], [9, 6, 11, 16, 1, 15], [13, 5, 14, 11, 6, 1], [14, 3, 7, 1, 2, 4]]
capacity = [40, 38, 47, 43]
upper_bounds = [3, 3, 3, 3, 3, 3]"
21,mul,16,79521195414545686360242149319648,,0,1,0,"{'ok': True, 'value': 34841999280171024, 'stdout': '34841999280171024\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07653188705444336}",0,Compute: 8710499820042756 * 9129349297679608
22,add,8,109880334,7,0,2,0,"{'ok': True, 'value': 175955440, 'stdout': '175955440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07553696632385254}",0,Compute: 43988860 + 65891474
23,knap,2,14,-3,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 4]
V = [8, 6, 5]
C = 3"
24,add,4,13122,7,0,0,0,"{'ok': True, 'value': 14108, 'stdout': '14108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09929370880126953}",0,Compute: 3527 + 9595
25,lcs,16,10,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccddcaddadbcacbd""
T = ""adddcdbdcababdcca"""
26,knap,2,4,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 4]
V = [1, 2, 4]
C = 4"
27,ilp_prod,8,72,0,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 3, 17, 23]
consumption (rows=resources) = [[4, 1, 1, 2], [1, 4, 6, 2], [7, 4, 6, 7], [5, 3, 5, 5]]
capacity = [24, 27, 23, 23]
upper_bounds = [3, 5, 3, 3]"
28,ilp_partition,4,5,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 3, 1, 1]"
29,ilp_assign,32,127,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 48, 60, 30, 30, 31, 26], [95, 47, 25, 38, 30, 54, 2], [9, 16, 84, 10, 28, 9, 56], [75, 67, 60, 28, 43, 70, 69], [32, 66, 91, 42, 47, 92, 50], [64, 8, 74, 70, 84, 10, 21], [76, 53, 18, 55, 11, 68, 16]]"
30,rod,8,176,10,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 6, 1, 7, 2, 1, 3, 13]"
31,sub,2,50,-30,0,7,0,"{'ok': True, 'value': 376, 'stdout': '376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0799565315246582}",0,Compute: 94 - 44
32,knap,4,39,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 8, 1]
V = [12, 11, 6, 16]
C = 7"
33,ilp_prod,16,105,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 34, 19, 17, 35, 23]
consumption (rows=resources) = [[12, 6, 1, 3, 13, 12], [9, 15, 13, 8, 11, 8], [14, 6, 4, 6, 4, 15], [6, 5, 1, 11, 7, 1]]
capacity = [51, 36, 45, 35]
upper_bounds = [3, 3, 3, 3, 3, 3]"
34,mul,32,8843571146362744864202369443870194047609287618227074493124627644,-3,0,-92233720,0,"{'ok': True, 'value': 364857560914904057248950344626416, 'stdout': '364857560914904057248950344626416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07253408432006836}",0,Compute: 91214390228726014312237586156604 * 96953683779356691421836770913761
35,add,16,5374459878029660,2355271879410051,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07486772537231445}",0,Compute: 3019187998619609 + 2355271879410051
36,add,2,87,77,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 21 + 66
37,ilp_assign,16,61,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 10, 30, 27, 45, 36, 4], [37, 9, 23, 28, 45, 17, 46], [44, 15, 2, 28, 12, 40, 47], [12, 16, 32, 47, 14, 41, 9], [36, 47, 11, 42, 32, 10, 2], [38, 3, 31, 10, 13, 28, 16], [30, 42, 10, 45, 17, 25, 16]]"
38,rod,8,96,14,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 14, 7, 6, 1, 14, 2, 8]"
39,knap,4,16,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 2, 3, 7]
V = [2, 9, 7, 2]
C = 9"
40,lcs,4,2,0,0,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddab""
T = ""babb"""
41,ilp_prod,8,47,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 9, 6, 17]
consumption (rows=resources) = [[4, 7, 7, 7], [1, 5, 1, 1], [8, 7, 3, 3], [4, 7, 5, 2]]
capacity = [17, 29, 20, 30]
upper_bounds = [3, 3, 3, 3]"
42,add,4,14815,8235,0,4,0,"{'ok': True, 'value': 26360, 'stdout': '26360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08216166496276855}",0,Compute: 6590 + 8225
43,knap,2,12,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 2]
V = [8, 10, 2]
C = 5"
44,ilp_assign,32,119,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 93, 13, 52, 32, 59, 93], [13, 82, 5, 54, 83, 27, 5], [94, 74, 15, 81, 44, 36, 80], [73, 20, 32, 59, 54, 39, 1], [79, 46, 42, 31, 43, 62, 87], [85, 10, 10, 55, 73, 77, 51], [73, 1, 2, 43, 76, 49, 95]]"
45,ilp_assign,32,92,20,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 86, 90, 95, 86, 64, 3], [26, 50, 19, 60, 11, 39, 1], [47, 4, 74, 90, 56, 85, 86], [45, 86, 72, 57, 87, 34, 3], [96, 52, 46, 50, 35, 69, 29], [35, 51, 20, 84, 20, 9, 55], [79, 58, 32, 19, 4, 1, 66]]"
46,ilp_partition,16,0,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [35, 8, 31, 34, 11, 18, 39, 17, 29, 39, 38, 4, 39, 11, 9, 24]"
47,sub,4,1722,7,0,6,0,"{'ok': True, 'value': 29180, 'stdout': '29180\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09126853942871094}",0,Compute: 7295 - 5573
48,ilp_partition,32,0,0,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 83, 55, 31, 89, 42, 36, 40, 94, 11, 93, 47, 61, 71, 24, 92, 23, 69, 54, 76, 48, 12, 40, 3]"
49,knap,8,103,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 5, 13, 12, 6, 6, 6, 5]
V = [32, 6, 29, 12, 19, 18, 23, 29]
C = 31"
50,mul,8,4737902145006240,880584040604,0,17,0,"{'ok': True, 'value': 352230240, 'stdout': '352230240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08616280555725098}",0,Compute: 88057560 * 53804604
51,lcs,2,0,,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""cd"""
52,ilp_assign,16,51,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 17, 44, 6, 24, 25, 15], [28, 5, 14, 34, 45, 15, 12], [13, 1, 36, 2, 34, 3, 5], [24, 31, 28, 14, 32, 22, 12], [11, 38, 42, 13, 23, 22, 6], [9, 32, 2, 48, 6, 14, 40], [23, 45, 13, 20, 16, 1, 45]]"
53,add,16,11129186012778022,9872701324394820,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0950937271118164}",0,Compute: 1256484688383202 + 9872701324394820
54,add,2,139,166,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 66 + 73
55,sub,8,12544167,0,0,0,0,"{'ok': True, 'value': 188603324, 'stdout': '188603324\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08068394660949707}",0,Compute: 47150831 - 34606664
56,ilp_assign,8,30,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 22, 8, 3, 15, 8, 21], [9, 21, 1, 17, 20, 11, 7], [12, 19, 22, 10, 12, 23, 7], [22, 12, 11, 18, 18, 9, 14], [3, 13, 7, 24, 15, 24, 19], [7, 7, 11, 16, 15, 1, 2], [10, 5, 17, 13, 3, 10, 18]]"
57,lcs,32,20,1,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babcacdcdccdbcaddbbcacdbcbddadbd""
T = ""baaacacdbcdcacadbdaadacddababbca"""
58,add,32,113752892887806529379746551796338,0,0,8120129182879882795,0,"{'ok': True, 'value': 324788883934555183247485005568032, 'stdout': '324788883934555183247485005568032\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08469367027282715}",0,Compute: 81197220983638795811871251392008 + 32555671904167733567875300404330
59,knap,32,1420,110,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 44, 59, 58, 41, 20, 35, 5, 29, 45, 19, 23, 46, 1, 54, 30, 8, 14, 43, 55, 7, 41, 21, 32, 7, 35, 24, 13, 27, 15, 19, 60]
V = [82, 32, 57, 116, 122, 105, 17, 3, 88, 46, 36, 60, 97, 37, 47, 32, 68, 84, 51, 9, 103, 66, 39, 11, 25, 110, 46, 82, 24, 2, 19, 20]
C = 468"
60,mul,16,23869832869051607832974999712698,7,0,0,0,"{'ok': True, 'value': 31664156815102076, 'stdout': '31664156815102076\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08989977836608887}",0,Compute: 7916039203775519 * 3015375777531142
61,rod,2,4,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
62,mul,4,2903290,20,0,6,0,"{'ok': True, 'value': 7768, 'stdout': '7768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08229780197143555}",0,Compute: 1942 * 1495
63,ilp_partition,16,0,,0,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 21, 27, 32, 35, 1, 26, 23, 22, 13, 1, 29, 9, 24, 22, 46]"
64,ilp_prod,2,15,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 4]
consumption (rows=resources) = [[2, 1], [1, 3]]
capacity = [6, 10]
upper_bounds = [3, 3]"
65,rod,16,768,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [48, 29, 47, 25, 7, 8, 5, 41, 2, 2, 34, 20, 5, 17, 40, 30]"
66,add,2,53,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 23 + 30
67,mul,4,37221956,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 4819 * 7724
68,mul,8,5750034711678630,1,0,4,0,"{'ok': True, 'value': 327981560, 'stdout': '327981560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0709536075592041}",0,Compute: 81995390 * 70126317
69,rod,32,1536,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [48, 52, 4, 31, 50, 8, 22, 50, 28, 96, 13, 47, 2, 46, 8, 20, 61, 90, 9, 83, 3, 88, 15, 72, 52, 65, 2, 42, 89, 80, 89, 66]"
70,ilp_prod,32,466,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [71, 3, 5, 61, 40, 51]
consumption (rows=resources) = [[12, 14, 3, 19, 6, 12], [10, 12, 22, 22, 21, 26], [12, 1, 11, 4, 22, 25], [8, 15, 11, 17, 3, 30]]
capacity = [78, 95, 95, 87]
upper_bounds = [6, 5, 4, 4, 4, 3]"
71,sub,2,49,-13,0,3,0,"{'ok': True, 'value': 300, 'stdout': '300\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11142158508300781}",0,Compute: 75 - 26
72,ilp_assign,2,7,7,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [5, 3]]"
73,knap,4,17,-3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 8, 2]
V = [5, 11, 3, 6]
C = 9"
74,knap,16,314,0,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 14, 21, 2, 5, 6, 21, 28, 4, 32, 8, 1, 30, 16, 31, 19]
V = [49, 45, 34, 27, 8, 16, 14, 16, 6, 11, 23, 38, 53, 8, 11, 15]
C = 123"
75,sub,32,345489093626344652230334328219,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 56385766589911736819336902299653 - 56040277496285392167106567971434
76,ilp_assign,2,5,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5], [4, 3]]"
77,lcs,32,17,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcadbabadbacdaadddddaddcbdbcdca""
T = ""abbccdccaddccdcdcdbccbcdbbaccbc"""
78,ilp_assign,4,10,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 10, 3, 1], [4, 5, 8, 10], [9, 1, 6, 1], [3, 12, 4, 5]]"
79,knap,4,20,5,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 1, 3, 6]
V = [8, 11, 9, 9]
C = 8"
80,ilp_assign,4,16,4,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 9, 5, 12], [12, 1, 10, 9], [9, 1, 10, 1], [9, 7, 8, 7]]"
81,ilp_prod,2,18,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[1, 1], [3, 3]]
capacity = [9, 10]
upper_bounds = [3, 3]"
82,sub,32,13644889986020492461975767896170,-9223372036854775807,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07835102081298828}",0,Compute: 78012668170328767046899323983156 - 64367778184308274584923556086986
83,lcs,32,19,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdabbabdccdbabccccaadddcdbcdbac""
T = ""abbdcbbbcbabdadcadcdcbbaaadbdacca"""
84,ilp_assign,2,3,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [1, 5]]"
85,ilp_assign,8,30,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 22, 24, 8, 5, 7, 2], [17, 11, 8, 13, 15, 23, 9], [23, 6, 4, 2, 3, 2, 10], [16, 2, 4, 21, 10, 20, 12], [12, 8, 7, 9, 7, 6, 11], [9, 22, 24, 11, 12, 2, 3], [7, 6, 13, 21, 15, 7, 20]]"
86,add,2,115,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 68 + 47
87,lcs,16,10,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdcdbcddaabcaab""
T = ""dddbddcdbabbdbbaa"""
88,add,4,11826,2,0,-3,0,"{'ok': True, 'value': 26692, 'stdout': '26692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07675361633300781}",0,Compute: 6673 + 5153
89,lcs,16,10,-8,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadcdddbbcbdbcab""
T = ""aabadcddbcbacaaaa"""
90,mul,2,392,7,0,2,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07823824882507324}",0,Compute: 28 * 14
91,mul,2,2759,0,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 31 * 89
92,ilp_assign,32,142,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[78, 58, 70, 63, 94, 76, 74], [4, 11, 90, 50, 19, 52, 79], [52, 55, 51, 47, 95, 3, 22], [58, 20, 88, 96, 73, 45, 19], [55, 17, 4, 7, 94, 49, 76], [26, 86, 59, 55, 49, 38, 78], [86, 8, 25, 37, 35, 54, 28]]"
93,mul,2,3444,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 82 * 42
94,ilp_partition,32,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 9, 61, 82, 40, 76, 81, 76, 11, 83, 84, 34, 84, 19, 52, 31, 7, 31, 19, 85, 39, 23, 10, 75]"
95,sub,4,2253,7,0,1,0,"{'ok': True, 'value': 31232, 'stdout': '31232\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08539533615112305}",0,Compute: 7808 - 5555
96,add,4,10459,7,0,2,0,"{'ok': True, 'value': 27440, 'stdout': '27440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09758520126342773}",0,Compute: 6860 + 3599
97,ilp_partition,4,1,,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 7, 6, 11]"
98,lcs,8,4,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadabacd""
T = ""bcdcdcca"""
99,mul,2,5655,0,0,70,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 87 * 65
100,knap,8,70,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 11, 12, 9, 8, 14, 5, 8]
V = [26, 3, 16, 13, 10, 22, 12, 7]
C = 40"
101,ilp_prod,2,16,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8]
consumption (rows=resources) = [[3, 3], [2, 2]]
capacity = [8, 9]
upper_bounds = [3, 3]"
102,mul,16,33965507001789028447697816157748,-92233720368547,0,0,0,"{'ok': True, 'value': 33571883762561336, 'stdout': '33571883762561336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08749270439147949}",0,Compute: 8392970940640334 * 4046899154305622
103,ilp_prod,4,28,27,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8, 7]
consumption (rows=resources) = [[3, 3, 2], [1, 2, 4], [1, 4, 4]]
capacity = [13, 16, 13]
upper_bounds = [4, 3, 3]"
104,sub,8,53135287,7,0,0,0,"{'ok': True, 'value': 335404332, 'stdout': '335404332\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07662582397460938}",0,Compute: 83851083 - 30715796
105,ilp_assign,4,16,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 2, 5, 2], [8, 4, 8, 5], [1, 5, 6, 1], [12, 11, 10, 8]]"
106,mul,16,59534018323717590611197436921737,,0,0,0,"{'ok': True, 'value': 34706025636887228, 'stdout': '34706025636887228\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08771014213562012}",0,Compute: 8676506409221807 * 6861519546673991
107,lcs,8,3,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabdadbb""
T = ""aaacacd"""
108,knap,4,21,15,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 4, 2]
V = [5, 8, 12, 9]
C = 6"
109,lcs,16,9,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbabacdacccccbb""
T = ""dacdbbacacbabadbb"""
110,knap,32,1608,128,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 4, 47, 64, 54, 21, 36, 53, 40, 18, 20, 17, 8, 45, 44, 11, 9, 62, 2, 20, 36, 45, 46, 4, 14, 52, 2, 13, 39, 39, 37, 23]
V = [24, 4, 61, 32, 9, 34, 127, 54, 127, 99, 24, 3, 57, 32, 23, 5, 90, 80, 27, 86, 85, 42, 97, 18, 96, 128, 107, 82, 114, 44, 113, 53]
C = 465"
111,knap,16,463,14,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 30, 8, 14, 2, 17, 2, 24, 6, 21, 27, 23, 31, 28, 17, 6]
V = [37, 61, 63, 59, 30, 60, 39, 38, 17, 50, 8, 13, 26, 64, 32, 4]
C = 134"
112,lcs,4,2,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadc""
T = ""adbd"""
113,ilp_assign,8,47,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 23, 7, 16, 9, 13, 4], [17, 3, 4, 12, 6, 7, 22], [14, 10, 14, 9, 17, 21, 8], [13, 14, 2, 2, 24, 24, 7], [12, 13, 11, 14, 9, 15, 23], [13, 6, 5, 23, 14, 12, 23], [22, 12, 19, 12, 17, 14, 2]]"
114,lcs,2,1,2,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""d"""
115,mul,2,2546,1,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 67 * 38
116,add,16,13365726364015897,7,0,4,0,"{'ok': True, 'value': 28386526491828932, 'stdout': '28386526491828932\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07879972457885742}",0,Compute: 7096631622957233 + 6269094741058664
117,ilp_partition,16,0,24,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 3, 37, 45, 8, 7, 30, 12, 41, 5, 21, 4, 10, 7, 25, 47]"
118,add,16,9707869743109957,0,0,0,0,"{'ok': True, 'value': 8928062496029720, 'stdout': '8928062496029720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08999919891357422}",0,Compute: 2232015624007430 + 7475854119102527
119,ilp_assign,8,40,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 16, 8, 21, 19, 8, 20], [9, 17, 14, 15, 19, 19, 23], [10, 5, 21, 22, 17, 5, 2], [5, 21, 18, 5, 19, 1, 17], [9, 18, 18, 6, 23, 2, 12], [16, 18, 20, 6, 8, 11, 21], [21, 6, 23, 7, 22, 6, 19]]"
120,knap,32,1579,27,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 24, 18, 37, 32, 56, 19, 16, 23, 50, 27, 47, 4, 9, 56, 25, 64, 4, 6, 45, 7, 27, 19, 9, 31, 15, 41, 24, 50, 20, 44, 55]
V = [116, 78, 40, 68, 34, 107, 90, 64, 111, 95, 13, 45, 81, 86, 87, 18, 96, 21, 42, 54, 19, 72, 115, 9, 8, 102, 47, 10, 126, 79, 93, 109]
C = 466"
121,ilp_partition,2,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 2, 2, 4]"
122,ilp_partition,4,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 4, 7, 1]"
123,lcs,8,5,1,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcaadac""
T = ""cdcddcaa"""
124,lcs,2,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""cc"""
125,rod,16,352,1000,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [17, 44, 27, 39, 11, 36, 9, 18, 37, 2, 34, 23, 24, 5, 29, 12]"
126,add,2,58,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 36 + 22
127,knap,16,409,-8,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 17, 2, 23, 7, 15, 4, 32, 19, 4, 31, 26, 25, 25, 24, 3]
V = [36, 38, 58, 25, 1, 26, 37, 23, 61, 36, 38, 47, 39, 58, 37, 9]
C = 140"
128,sub,8,8793759,88310951,0,0,0,"{'ok': True, 'value': 353243804, 'stdout': '353243804\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08246994018554688}",0,Compute: 88310951 - 79517192
129,ilp_assign,8,27,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 14, 24, 19, 9, 22, 19], [12, 23, 3, 4, 11, 6, 12], [13, 15, 6, 24, 6, 14, 23], [16, 7, 1, 17, 24, 6, 7], [22, 21, 6, 22, 3, 20, 24], [24, 20, 20, 1, 3, 7, 15], [9, 2, 13, 9, 14, 24, 8]]"
130,ilp_prod,16,260,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 5, 41, 27, 42, 46]
consumption (rows=resources) = [[9, 3, 5, 8, 12, 9], [16, 12, 4, 12, 2, 1], [7, 12, 13, 1, 5, 16], [2, 10, 4, 9, 13, 12]]
capacity = [48, 54, 62, 54]
upper_bounds = [3, 4, 4, 4, 4, 3]"
131,ilp_partition,2,2,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 2, 2]"
132,sub,32,19090300203685598196072756056347,3,0,0,0,"{'ok': True, 'value': 128307846694185386740703308757000, 'stdout': '128307846694185386740703308757000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0968167781829834}",0,Compute: 32076961673546346685175827189250 - 12986661469860748489103071132903
133,mul,8,4439490255959809,0,0,2,0,"{'ok': True, 'value': 304597012, 'stdout': '304597012\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07680821418762207}",0,Compute: 76149253 * 58299853
134,sub,32,30723114399956195010517261214582,-17774651800335986377884793825749,0,120,0,"{'ok': True, 'value': 193991064801168725553608220161324, 'stdout': '193991064801168725553608220161324\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06817865371704102}",0,Compute: 48497766200292181388402055040331 - 17774651800335986377884793825749
135,lcs,4,1,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbc""
T = ""acb"""
136,mul,16,24621463270537776345737687813976,1,0,0,0,"{'ok': True, 'value': 17209518012210136, 'stdout': '17209518012210136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08326411247253418}",0,Compute: 4302379503052534 * 5722754873917764
137,sub,8,59027247,77038600,0,0,0,"{'ok': True, 'value': 308154400, 'stdout': '308154400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07827639579772949}",0,Compute: 77038600 - 18011353
138,add,8,146231208,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 88442159 + 57789049
139,lcs,8,4,0,0,21,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babcabbb""
T = ""daabcbc"""
140,sub,16,1736849274328656,1,0,0,0,"{'ok': True, 'value': 24818451684746552, 'stdout': '24818451684746552\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07140684127807617}",0,Compute: 6204612921186638 - 4467763646857982
141,ilp_prod,4,40,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 4, 6]
consumption (rows=resources) = [[2, 1, 4], [1, 2, 1], [1, 4, 4]]
capacity = [8, 8, 12]
upper_bounds = [4, 3, 3]"
142,ilp_partition,8,1,1,1,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 9, 24, 9, 16, 4, 16, 22]"
143,add,4,10578,8008,0,6,0,"{'ok': True, 'value': 31172, 'stdout': '31172\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07560181617736816}",0,Compute: 7793 + 2785
144,rod,8,60,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 15, 11, 6, 20, 8, 16, 6]"
145,ilp_partition,16,0,6,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 48, 18, 4, 47, 43, 26, 5, 46, 5, 35, 46, 23, 2, 42, 21]"
146,ilp_partition,16,1,22,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 9, 43, 48, 48, 38, 47, 5, 47, 3, 3, 8, 45, 18, 22, 4]"
147,sub,2,24,-12,0,0,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07649922370910645}",0,Compute: 84 - 60
148,add,8,136423695,0,0,0,0,"{'ok': True, 'value': 245884676, 'stdout': '245884676\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07847380638122559}",0,Compute: 61471169 + 74952526
149,add,2,137,27,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 67 + 70
150,ilp_prod,2,24,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4]
consumption (rows=resources) = [[2, 1], [3, 1]]
capacity = [6, 6]
upper_bounds = [3, 6]"
151,sub,2,26,82,0,1,0,"{'ok': True, 'value': 328, 'stdout': '328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09058475494384766}",0,Compute: 82 - 56
152,mul,4,23650893,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 9093 * 2601
153,rod,2,8,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
154,ilp_assign,8,24,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 16, 20, 14, 2, 8, 4], [24, 13, 22, 18, 17, 1, 19], [10, 1, 1, 8, 17, 23, 21], [13, 9, 21, 12, 24, 1, 7], [20, 24, 14, 7, 24, 15, 17], [2, 5, 18, 20, 9, 21, 2], [4, 13, 4, 2, 16, 20, 16]]"
155,ilp_prod,32,255,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [65, 33, 60, 28, 75, 26]
consumption (rows=resources) = [[27, 8, 8, 17, 31, 5], [14, 32, 26, 31, 9, 17], [23, 26, 27, 1, 17, 28], [17, 12, 15, 25, 12, 18]]
capacity = [73, 113, 109, 101]
upper_bounds = [3, 3, 4, 3, 3, 3]"
156,knap,2,7,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 3]
V = [1, 7, 3]
C = 4"
157,lcs,16,8,0,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdacdbcacabaabab""
T = ""cbddcadbcdddddaac"""
158,knap,16,317,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 13, 26, 17, 19, 15, 11, 24, 2, 28, 18, 24, 7, 23, 23, 12]
V = [53, 11, 10, 29, 30, 5, 28, 36, 18, 41, 25, 5, 62, 25, 14, 31]
C = 147"
159,rod,8,120,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 20, 7, 17, 7, 23, 2, 7]"
160,add,2,109,109,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 27 + 82
161,knap,16,381,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 13, 14, 28, 6, 7, 21, 13, 31, 25, 25, 12, 17, 25, 24, 15]
V = [21, 56, 15, 15, 55, 49, 50, 9, 51, 20, 23, 9, 58, 9, 25, 22]
C = 150"
162,ilp_partition,2,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 5, 1]"
163,knap,4,26,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 1, 6]
V = [12, 12, 14, 7]
C = 10"
164,ilp_assign,16,50,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 15, 12, 14, 10, 42, 20], [32, 44, 45, 13, 8, 44, 11], [31, 31, 27, 12, 28, 7, 4], [37, 17, 21, 28, 17, 13, 48], [6, 26, 24, 38, 12, 47, 35], [21, 2, 45, 24, 47, 9, 7], [3, 13, 35, 5, 17, 8, 5]]"
165,add,4,14251,8081,0,4,0,"{'ok': True, 'value': 39072, 'stdout': '39072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10129094123840332}",0,Compute: 9768 + 4483
166,sub,4,1337,3,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0845482349395752}",0,Compute: 6898 - 5561
167,lcs,4,1,100,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcac""
T = ""daaa"""
168,rod,8,152,12,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 15, 9, 19, 12, 18, 11, 17]"
169,lcs,16,9,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcaacbcdcadaada""
T = ""acddabcdbdddddba"""
170,add,4,15752,52,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 8218 + 7534
171,mul,4,14166780,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 5780 * 2451
172,ilp_partition,2,2,0,0,11111,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 2, 4]"
173,rod,8,92,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 23, 16, 15, 12, 12, 12, 20]"
174,mul,32,3912357314485570733084481970313256077579247269242030506467605600,,0,120,0,"{'ok': True, 'value': 257621002049972263876566642389600, 'stdout': '257621002049972263876566642389600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08740448951721191}",0,Compute: 64405250512493065969141660597400 * 60745937378609648138177234491844
175,rod,4,24,12,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 12, 1, 12]"
176,add,2,83,154,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 44 + 39
177,ilp_prod,2,24,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[3, 2], [3, 1]]
capacity = [9, 6]
upper_bounds = [3, 4]"
178,rod,2,5,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 5]"
179,lcs,8,2,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcdbbbd""
T = ""acccccc"""
180,ilp_prod,8,78,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 10, 19, 6]
consumption (rows=resources) = [[8, 4, 2, 2], [8, 5, 5, 1], [6, 7, 4, 7], [3, 8, 2, 8]]
capacity = [24, 29, 18, 19]
upper_bounds = [3, 3, 4, 3]"
181,knap,4,29,10000,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 8, 1, 4]
V = [15, 16, 13, 10]
C = 10"
182,rod,4,20,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 7, 3, 4]"
183,ilp_partition,16,0,76,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 39, 7, 24, 41, 39, 5, 8, 37, 16, 46, 32, 5, 4, 16, 2]"
184,knap,4,16,2025,0,210,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 5, 5, 7]
V = [11, 10, 6, 4]
C = 12"
185,rod,32,1760,1,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [55, 43, 17, 78, 66, 61, 52, 29, 23, 48, 3, 81, 24, 83, 79, 71, 14, 18, 22, 39, 26, 24, 86, 60, 12, 46, 44, 22, 54, 96, 29, 85]"
186,ilp_assign,4,15,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 2, 7, 3], [12, 10, 4, 8], [11, 7, 8, 2], [7, 11, 3, 12]]"
187,add,2,131,246,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 46 + 85
188,mul,4,37989653,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 4421 * 8593
189,lcs,2,1,100,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""dba"""
190,rod,8,52,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 13, 4, 12, 12, 18, 20, 5]"
191,knap,32,1397,26,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 33, 24, 32, 10, 64, 42, 15, 7, 43, 26, 52, 3, 25, 59, 17, 3, 32, 63, 48, 41, 56, 50, 45, 53, 23, 64, 19, 8, 31, 20, 42]
V = [54, 2, 109, 104, 88, 89, 7, 29, 16, 50, 57, 96, 57, 16, 76, 41, 74, 12, 95, 66, 99, 94, 15, 53, 60, 66, 75, 67, 55, 40, 67, 51]
C = 527"
192,knap,16,396,3,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 32, 14, 8, 8, 2, 3, 27, 29, 8, 3, 2, 1, 17, 7]
V = [33, 40, 21, 48, 7, 13, 44, 44, 20, 53, 12, 36, 12, 57, 13, 16]
C = 85"
193,add,2,88,82,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 32 + 56
194,lcs,16,8,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcccabccadcdcbc""
T = ""cdabbadccaacddd"""
195,add,32,59084184916681002600178988035063,7,0,80,0,"{'ok': True, 'value': 155766665446742614524100004573932, 'stdout': '155766665446742614524100004573932\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08711123466491699}",0,Compute: 38941666361685653631025001143483 + 20142518554995348969153986891580
196,ilp_partition,32,0,88,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [27, 64, 6, 88, 74, 63, 23, 61, 96, 51, 25, 94, 69, 44, 30, 24, 34, 4, 73, 8, 93, 86, 17, 90]"
197,ilp_prod,2,28,3,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8]
consumption (rows=resources) = [[1, 3], [2, 1]]
capacity = [10, 8]
upper_bounds = [4, 3]"
198,ilp_partition,32,1,,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 5, 61, 15, 51, 82, 54, 55, 35, 47, 16, 74, 66, 52, 41, 67, 89, 66, 17, 48, 35, 96, 84, 26]"
199,sub,2,54,-2,0,2,0,"{'ok': True, 'value': 284, 'stdout': '284\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0853719711303711}",0,Compute: 71 - 17
200,ilp_assign,16,60,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 24, 1, 15, 40, 23, 8], [47, 41, 43, 29, 34, 25, 20], [31, 30, 10, 23, 14, 4, 11], [26, 46, 25, 26, 41, 8, 23], [25, 9, 33, 1, 30, 37, 8], [28, 17, 3, 25, 27, 19, 4], [28, 24, 18, 2, 17, 34, 12]]"
201,ilp_prod,8,136,27,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 18, 5, 13]
consumption (rows=resources) = [[2, 5, 5, 3], [1, 6, 2, 3], [3, 3, 1, 1], [1, 2, 6, 8]]
capacity = [17, 32, 18, 30]
upper_bounds = [6, 3, 3, 3]"
202,mul,32,2434138133393387524417131736814722144422228452150135829470970810,5,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07810044288635254}",0,Compute: 24541010406728655180292429591835 * 99186549088704002060000520263886
203,mul,2,2988,1,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 36 * 83
204,ilp_partition,2,1,2,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 3, 1]"
205,lcs,8,3,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaabcabd""
T = ""ccbbdaca"""
206,mul,2,361,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 19 * 19
207,ilp_assign,2,9,4,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [6, 5]]"
208,knap,16,355,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 25, 18, 30, 10, 26, 16, 10, 22, 14, 16, 25, 1, 31, 19, 9]
V = [28, 44, 44, 34, 7, 4, 10, 31, 52, 24, 5, 26, 32, 31, 44, 56]
C = 147"
209,ilp_partition,16,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 21, 40, 10, 21, 28, 26, 16, 4, 23, 12, 16, 28, 40, 28, 40]"
210,sub,32,10137341611172900040097221638763,2,0,0,0,"{'ok': True, 'value': 241568493662689637025911858668176, 'stdout': '241568493662689637025911858668176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08910727500915527}",0,Compute: 60392123415672409256477964667044 - 50254781804499509216380743028281
211,mul,16,38177513185632315399182206477626,760436273444703,0,132,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08775711059570312}",0,Compute: 7628429140436742 * 5004636273444703
212,mul,16,36847379551123169727542461417149,7,0,132,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07461380958557129}",0,Compute: 6248801326384379 * 5896711645406631
213,sub,2,59,-19,0,64,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 91 - 32
214,rod,32,1408,729,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [44, 1, 71, 72, 6, 43, 56, 42, 89, 43, 12, 75, 76, 17, 62, 10, 86, 59, 22, 6, 80, 85, 12, 11, 93, 26, 20, 88, 30, 32, 38, 77]"
215,ilp_partition,4,2,231,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 10, 4, 3]"
216,sub,2,7,-3,0,7,1,"{'ok': True, 'value': 348, 'stdout': '348\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07179045677185059}",0,Compute: 87 - 80
217,rod,2,2,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
218,ilp_prod,32,416,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [40, 80, 48, 94, 50, 48]
consumption (rows=resources) = [[16, 31, 23, 14, 12, 14], [19, 16, 9, 3, 24, 20], [8, 9, 6, 27, 15, 17], [6, 2, 1, 14, 5, 29]]
capacity = [72, 103, 119, 89]
upper_bounds = [4, 3, 3, 4, 4, 3]"
219,rod,4,16,4,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 8, 2, 10]"
220,ilp_partition,8,0,1,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 19, 11, 16, 24, 22, 23, 10]"
221,lcs,8,4,4,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacbdcbc""
T = ""cacabdd"""
222,rod,8,96,140,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 22, 9, 24, 24, 8, 3, 20]"
223,ilp_assign,32,157,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[83, 8, 14, 29, 64, 47, 30], [90, 41, 56, 80, 14, 90, 40], [74, 77, 80, 91, 37, 70, 82], [62, 86, 22, 18, 31, 72, 6], [7, 87, 90, 36, 59, 74, 20], [39, 90, 48, 42, 36, 11, 15], [67, 50, 64, 69, 34, 60, 29]]"
224,ilp_prod,8,66,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 10, 22]
consumption (rows=resources) = [[1, 7, 1, 1], [3, 1, 8, 7], [3, 6, 7, 4], [8, 5, 2, 5]]
capacity = [16, 25, 32, 17]
upper_bounds = [3, 3, 3, 3]"
225,rod,4,44,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 6, 7, 7]"
226,rod,16,376,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 47, 39, 15, 25, 4, 20, 36, 42, 25, 7, 27, 1, 34, 39, 39]"
227,rod,8,144,7,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [18, 5, 8, 2, 18, 10, 14, 22]"
228,knap,16,373,152,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 18, 1, 6, 31, 3, 26, 8, 28, 26, 26, 23, 31, 24, 21, 30]
V = [33, 19, 21, 16, 55, 18, 9, 26, 51, 54, 37, 57, 7, 42, 24, 26]
C = 152"
229,mul,2,3145,85,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 85 * 37
230,ilp_prod,8,80,27,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 21, 8, 17]
consumption (rows=resources) = [[1, 3, 2, 1], [3, 7, 5, 4], [1, 2, 7, 5], [8, 8, 8, 2]]
capacity = [26, 19, 25, 23]
upper_bounds = [3, 3, 3, 4]"
231,lcs,8,4,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addadaaa""
T = ""adbcaddc"""
232,add,8,147630107,3,0,1,0,"{'ok': True, 'value': 200620856, 'stdout': '200620856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08797407150268555}",0,Compute: 50155214 + 97474893
233,mul,2,780,0,0,132,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08806562423706055}",0,Compute: 13 * 60
234,ilp_prod,8,55,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 6, 7, 24]
consumption (rows=resources) = [[8, 6, 4, 6], [1, 1, 2, 3], [8, 8, 2, 7], [1, 3, 2, 5]]
capacity = [16, 30, 23, 23]
upper_bounds = [3, 3, 4, 3]"
235,lcs,2,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""d"""
236,ilp_partition,2,1,,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 3, 5, 2]"
237,knap,8,105,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 7, 16, 15, 12, 16, 14, 1]
V = [27, 16, 25, 18, 2, 21, 7, 16]
C = 41"
238,knap,16,324,0,0,91,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 2, 28, 30, 29, 9, 31, 12, 2, 25, 19, 31, 1, 4, 26, 19]
V = [11, 52, 24, 18, 5, 32, 21, 3, 23, 54, 43, 19, 34, 4, 41, 12]
C = 145"
239,rod,2,8,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
240,lcs,8,4,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcacabc""
T = ""bcabcad"""
241,rod,4,14,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 7, 3, 6]"
242,add,16,8276152576046119,0,0,0,0,"{'ok': True, 'value': 24496496449750788, 'stdout': '24496496449750788\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07575058937072754}",0,Compute: 6124124112437697 + 2152028463608422
243,knap,32,1726,15,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [52, 49, 63, 36, 23, 18, 35, 54, 43, 35, 40, 42, 37, 32, 10, 14, 42, 56, 49, 1, 37, 17, 37, 9, 33, 12, 48, 19, 56, 12, 51, 20]
V = [105, 33, 128, 64, 106, 8, 17, 43, 127, 50, 8, 107, 59, 108, 55, 118, 73, 30, 5, 100, 94, 6, 41, 24, 126, 41, 33, 125, 18, 100, 125, 15]
C = 541"
244,ilp_assign,8,33,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 23, 11, 8, 21, 9, 11], [2, 13, 10, 1, 21, 15, 1], [14, 1, 4, 6, 22, 8, 1], [13, 20, 15, 5, 3, 7, 7], [14, 19, 19, 23, 12, 12, 3], [24, 8, 7, 4, 5, 20, 9], [12, 23, 24, 11, 14, 9, 14]]"
245,knap,4,26,1,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 6, 3]
V = [16, 3, 11, 10]
C = 11"
246,ilp_partition,2,0,-2,0,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 4, 3, 3]"
247,ilp_assign,2,6,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [5, 5]]"
248,rod,2,8,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
249,add,4,9576,,0,7,0,"{'ok': True, 'value': 26344, 'stdout': '26344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08131289482116699}",0,Compute: 6586 + 2990
250,lcs,32,19,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdcabdacdbcbcccaaadcbaaacdbcdbd""
T = ""bacbabbdaaaadbacdabcadddaabbcda"""
251,ilp_partition,4,1,-1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 2, 3, 9]"
252,rod,4,12,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 6, 3, 3]"
253,ilp_assign,4,21,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 9, 4, 3], [1, 11, 7, 9], [1, 10, 9, 5], [1, 12, 7, 6]]"
254,lcs,16,7,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaddccbbaaaabbca""
T = ""cddcddacddacacd"""
255,sub,4,7443,7,0,0,0,"{'ok': True, 'value': 34652, 'stdout': '34652\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08757877349853516}",0,Compute: 8663 - 1220
256,lcs,32,17,21,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabadcacdbcccbaabccddddbbaadddbb""
T = ""accacaabdddbabbcdbacabcbccdcdda"""
257,rod,16,608,41,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [38, 41, 8, 22, 37, 18, 31, 34, 45, 21, 8, 36, 5, 3, 15, 32]"
258,sub,2,55,0,0,22,0,"{'ok': True, 'value': 268, 'stdout': '268\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07832932472229004}",0,Compute: 67 - 12
259,knap,2,10,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 4]
V = [4, 10, 1]
C = 4"
260,ilp_partition,8,1,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 16, 16, 1, 7, 11, 7, 4]"
261,rod,4,36,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 6, 10, 1]"
262,sub,2,1,0,0,120,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06836271286010742}",0,Compute: 20 - 19
263,ilp_prod,16,196,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 23, 45, 27, 29, 48]
consumption (rows=resources) = [[3, 15, 14, 14, 2, 7], [5, 13, 2, 14, 2, 5], [14, 16, 9, 14, 2, 15], [2, 13, 3, 3, 14, 11]]
capacity = [41, 38, 50, 50]
upper_bounds = [3, 3, 3, 3, 3, 3]"
264,sub,2,29,-41,0,2,0,"{'ok': True, 'value': 332, 'stdout': '332\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0836191177368164}",0,Compute: 83 - 54
265,ilp_assign,8,31,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 18, 3, 15, 19, 14, 3], [17, 20, 4, 15, 20, 16, 9], [13, 15, 16, 13, 13, 4, 13], [11, 21, 23, 1, 3, 6, 16], [14, 1, 3, 24, 13, 22, 17], [20, 11, 2, 1, 17, 21, 1], [15, 24, 17, 6, 15, 10, 23]]"
266,sub,2,3,1,0,0,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08816814422607422}",0,Compute: 44 - 41
267,ilp_assign,2,9,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 3], [6, 3]]"
268,ilp_assign,2,5,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [3, 1]]"
269,rod,16,272,,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [14, 34, 13, 21, 5, 4, 14, 43, 20, 11, 12, 40, 19, 2, 41, 10]"
270,knap,16,444,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 13, 22, 3, 12, 6, 12, 1, 28, 20, 3, 28, 14, 13, 32, 2]
V = [40, 30, 13, 43, 2, 64, 54, 27, 30, 60, 21, 21, 19, 21, 59, 46]
C = 120"
271,ilp_prod,8,58,25,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 23, 6, 20]
consumption (rows=resources) = [[2, 8, 1, 7], [6, 1, 2, 8], [5, 1, 6, 8], [3, 5, 8, 1]]
capacity = [20, 25, 19, 19]
upper_bounds = [3, 3, 3, 3]"
272,ilp_assign,2,4,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [2, 6]]"
273,knap,4,12,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 8, 7, 1]
V = [10, 6, 10, 2]
C = 10"
274,ilp_prod,16,163,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 35, 41, 21, 10, 23]
consumption (rows=resources) = [[8, 13, 1, 8, 10, 5], [11, 6, 13, 16, 6, 4], [15, 7, 16, 4, 3, 3], [12, 16, 11, 15, 14, 12]]
capacity = [43, 45, 56, 63]
upper_bounds = [3, 3, 3, 3, 4, 5]"
275,sub,32,37803017627173498943212919878335,0,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07829880714416504}",0,Compute: 48418602192919657489917478500282 - 10615584565746158546704558621947
276,knap,8,97,7,0,25,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 13, 12, 13, 5, 3, 8, 7]
V = [32, 31, 25, 21, 17, 1, 17, 2]
C = 33"
277,ilp_prod,16,216,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 5, 47, 17, 35, 36]
consumption (rows=resources) = [[14, 11, 9, 10, 5, 5], [1, 4, 7, 8, 8, 1], [16, 6, 2, 2, 11, 3], [2, 10, 4, 10, 12, 1]]
capacity = [33, 44, 33, 50]
upper_bounds = [3, 3, 3, 3, 3, 6]"
278,sub,16,5362938131629205,,0,-1,0,"{'ok': True, 'value': 36992657774370244, 'stdout': '36992657774370244\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07573342323303223}",0,Compute: 9248164443592561 - 3885226311963356
279,lcs,2,0,0,1,14,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""c"""
280,ilp_prod,2,12,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[3, 3], [1, 2]]
capacity = [9, 10]
upper_bounds = [3, 3]"
281,lcs,16,8,44,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacaabdbcddcdddd""
T = ""cdcdabaadbcbada"""
282,sub,16,1233551286892199,0,0,6,0,"{'ok': True, 'value': 30977118863113388, 'stdout': '30977118863113388\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07679295539855957}",0,Compute: 7744279715778347 - 6510728428886148
283,sub,16,7447716351282058,-1,0,2,0,"{'ok': True, 'value': 34446734748312980, 'stdout': '34446734748312980\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08333039283752441}",0,Compute: 8611683687078245 - 1163967335796187
284,mul,16,33860782069328149663102408672860,,0,0,0,"{'ok': True, 'value': 16981915945713524, 'stdout': '16981915945713524\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08455395698547363}",0,Compute: 4245478986428381 * 7975727162370060
285,rod,2,10,13,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
286,lcs,2,1,6,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""c"""
287,add,8,166310987,0,0,120,0,"{'ok': True, 'value': 296324332, 'stdout': '296324332\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07565093040466309}",0,Compute: 74081083 + 92229904
288,knap,4,24,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 6, 3]
V = [12, 4, 13, 12]
C = 8"
289,lcs,16,8,3,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daabcddadbbaadba""
T = ""ccababacbcdbdbc"""
290,sub,32,40060059777294498592260272656818,69646918592939644880566,0,0,0,"{'ok': True, 'value': 278587674371758579522265589049640, 'stdout': '278587674371758579522265589049640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0811622142791748}",0,Compute: 69646918592939644880566397262410 - 29586858815645146288306124605592
291,add,2,138,134,0,1,0,"{'ok': True, 'value': 296, 'stdout': '296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09626030921936035}",0,Compute: 74 + 64
292,mul,16,66522406823504251500053605870200,0,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08806490898132324}",0,Compute: 6891379970930990 * 9652987805650980
293,knap,4,24,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 7, 8, 3]
V = [16, 8, 2, 8]
C = 11"
294,ilp_prod,16,228,4,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [44, 35, 8, 43, 13, 48]
consumption (rows=resources) = [[14, 15, 4, 11, 1, 10], [2, 14, 11, 9, 5, 13], [6, 12, 11, 5, 5, 16], [16, 13, 13, 6, 9, 15]]
capacity = [56, 53, 41, 55]
upper_bounds = [3, 3, 3, 5, 6, 3]"
295,ilp_assign,2,8,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 4], [4, 6]]"
296,ilp_partition,4,0,3,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 10, 8, 7]"
297,sub,4,4536,,0,132,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14730596542358398}",0,Compute: 6906 - 2370
298,knap,16,407,12,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 20, 12, 9, 21, 3, 16, 24, 24, 8, 17, 22, 27, 4, 8, 15]
V = [21, 51, 2, 28, 46, 32, 11, 26, 28, 63, 17, 53, 4, 48, 55, 14]
C = 128"
299,knap,2,10,5,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 5]
V = [1, 7, 10]
C = 5"
300,mul,4,63996121,7193,0,0,0,"{'ok': True, 'value': 28772, 'stdout': '28772\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07865142822265625}",0,Compute: 7193 * 8897
301,sub,4,4096,3746,0,2,0,"{'ok': True, 'value': 31368, 'stdout': '31368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16367602348327637}",0,Compute: 7842 - 3746
302,knap,32,1669,9,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 37, 51, 60, 14, 41, 7, 48, 13, 9, 33, 6, 57, 40, 19, 3, 4, 45, 12, 20, 25, 29, 9, 21, 36, 41, 41, 47, 35, 35, 31, 10]
V = [57, 79, 6, 48, 32, 25, 92, 34, 106, 125, 22, 124, 2, 70, 21, 23, 108, 119, 35, 90, 77, 85, 65, 62, 26, 58, 116, 26, 47, 2, 125, 9]
C = 451"
303,add,32,146066169252055403042634600152733,5,0,1,0,"{'ok': True, 'value': 35177518846408215304295492526656, 'stdout': '35177518846408215304295492526656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08142328262329102}",0,Compute: 88794379711602053826073873131664 + 57271789540453349216560727021069
304,mul,4,16580895,3,0,4089,0,"{'ok': True, 'value': 16356, 'stdout': '16356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07890009880065918}",0,Compute: 4055 * 4089
305,ilp_partition,8,1,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 21, 22, 1, 14, 21, 18, 6]"
306,add,4,9454,1,0,31,0,"{'ok': True, 'value': 26380, 'stdout': '26380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07896566390991211}",0,Compute: 6595 + 2859
307,ilp_partition,2,0,,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 2, 3]"
308,add,8,155043050,20,0,6,0,"{'ok': True, 'value': 398398476, 'stdout': '398398476\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08197569847106934}",0,Compute: 99599619 + 55443431
309,sub,16,2430173968602254,7,0,8939595645602160,0,"{'ok': True, 'value': 35758382582408640, 'stdout': '35758382582408640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08740067481994629}",0,Compute: 8939595645602160 - 6509421676999906
310,sub,4,142,0,0,-3,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07479333877563477}",0,Compute: 1341 - 1199
311,add,8,105181441,71219160,0,6,0,"{'ok': True, 'value': 15849124, 'stdout': '15849124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08383774757385254}",0,Compute: 33962281 + 71219160
312,lcs,16,8,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdabccdbadaaacac""
T = ""ccbbaacbabcbabd"""
313,mul,2,720,360,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10230207443237305}",0,Compute: 12 * 60
314,ilp_assign,32,116,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[59, 39, 63, 15, 15, 39, 3], [71, 24, 46, 73, 67, 4, 70], [37, 24, 76, 15, 27, 57, 68], [36, 80, 28, 38, 83, 51, 51], [59, 4, 34, 50, 69, 43, 37], [48, 14, 52, 61, 65, 95, 47], [3, 81, 9, 86, 20, 51, 90]]"
315,ilp_partition,16,1,,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 34, 15, 19, 46, 17, 25, 12, 11, 48, 7, 22, 17, 1, 6, 47]"
316,sub,2,43,-43,0,1,0,"{'ok': True, 'value': 296, 'stdout': '296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09052062034606934}",0,Compute: 74 - 31
317,lcs,32,17,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcbbdcbbbbcbcddccbcdcbcabbadbad""
T = ""dcccabbaacdddcddbcacabbddddcdcc"""
318,ilp_assign,32,150,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 45, 69, 85, 72, 48, 4], [95, 40, 46, 31, 52, 33, 4], [78, 43, 12, 93, 76, 1, 64], [96, 71, 54, 82, 92, 93, 66], [76, 19, 56, 47, 34, 11, 66], [33, 67, 43, 53, 81, 42, 73], [81, 57, 10, 34, 8, 17, 81]]"
319,add,32,52142705590247707398859102736907,0,0,39729670112590342203354542648748,0,"{'ok': True, 'value': 158918680450361368813418170594992, 'stdout': '158918680450361368813418170594992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08670186996459961}",0,Compute: 39729670112590342203354542648748 + 12413035477657365195504560088159
320,sub,16,1803944369459442,-13,0,0,0,"{'ok': True, 'value': 22222766571893888, 'stdout': '22222766571893888\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08062386512756348}",0,Compute: 4555691642973472 - 2751747273514030
321,ilp_partition,4,1,2,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 8, 11]"
322,lcs,4,3,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbb""
T = ""bdcbb"""
323,lcs,4,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbc""
T = ""ddcad"""
324,mul,8,2792400628477080,317844,0,9,0,"{'ok': True, 'value': 127137720, 'stdout': '127137720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0821676254272461}",0,Compute: 31784430 * 87854356
325,ilp_assign,4,11,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1, 5, 2], [3, 10, 5, 8], [12, 7, 5, 2], [5, 1, 8, 3]]"
326,sub,32,52062678230668809038770419867873,3,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08312511444091797}",0,Compute: 66466522881580022417701044938011 - 14403844650911213378930625070138
327,ilp_partition,8,1,17,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 8, 5, 1, 17, 15, 16, 2]"
328,rod,16,132,120,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [7, 10, 14, 33, 24, 37, 43, 45, 43, 11, 29, 30, 24, 27, 7, 29]"
329,rod,8,104,4,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 5, 23, 21, 2, 5, 2, 24]"
330,mul,4,34624024,4,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 3748 * 9238
331,ilp_assign,2,5,20,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [1, 6]]"
332,ilp_prod,8,69,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 17, 23, 15]
consumption (rows=resources) = [[8, 4, 8, 2], [4, 3, 5, 5], [1, 2, 7, 1], [4, 6, 5, 4]]
capacity = [31, 20, 30, 17]
upper_bounds = [3, 3, 3, 4]"
333,add,16,10011748497312632,7,0,4480135444377831,0,"{'ok': True, 'value': 17920541777511324, 'stdout': '17920541777511324\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09046816825866699}",0,Compute: 4480135444377831 + 5531613052934801
334,ilp_partition,2,0,7,0,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 3, 2]"
335,lcs,2,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""a"""
336,sub,8,63397488,1,0,0,0,"{'ok': True, 'value': 368214340, 'stdout': '368214340\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0896596908569336}",0,Compute: 92033585 - 28636097
337,add,8,86664276,84028673,0,30,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08223438262939453}",0,Compute: 48267493 + 38396783
338,mul,2,2010,0,0,120,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0957493782043457}",0,Compute: 30 * 67
339,lcs,8,5,0,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcbcbdd""
T = ""dccdaacd"""
340,ilp_assign,32,67,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 30, 33, 8, 94, 39, 44], [83, 56, 11, 89, 36, 72, 94], [94, 64, 23, 18, 71, 3, 93], [36, 80, 60, 7, 77, 94, 50], [60, 28, 54, 82, 83, 35, 19], [5, 8, 31, 15, 63, 23, 71], [56, 68, 53, 3, 1, 6, 40]]"
341,mul,8,1535325076695066,1,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07886362075805664}",0,Compute: 40972947 * 37471678
342,ilp_assign,16,89,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 41, 15, 13, 44, 48, 7], [16, 32, 42, 6, 19, 29, 39], [35, 30, 29, 35, 45, 38, 29], [39, 9, 45, 22, 44, 20, 9], [7, 9, 9, 47, 46, 45, 43], [19, 33, 15, 28, 43, 25, 12], [40, 39, 27, 12, 31, 4, 6]]"
343,ilp_assign,16,117,2015,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 29, 17, 33, 22, 16, 13], [28, 6, 38, 37, 26, 47, 3], [4, 10, 16, 26, 14, 18, 35], [19, 19, 48, 46, 41, 29, 13], [20, 12, 48, 34, 39, 5, 25], [34, 27, 20, 44, 30, 9, 39], [28, 43, 40, 47, 36, 26, 43]]"
344,mul,4,42789992,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 8267 * 5176
345,ilp_assign,16,103,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 39, 27, 21, 10, 21, 41], [34, 24, 29, 24, 27, 28, 47], [36, 23, 13, 29, 30, 16, 46], [43, 4, 47, 26, 9, 41, 41], [11, 31, 8, 22, 9, 44, 42], [1, 16, 20, 48, 45, 29, 34], [41, 40, 35, 46, 30, 40, 40]]"
346,lcs,4,2,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbca""
T = ""baa"""
347,ilp_prod,8,79,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 7, 22, 13]
consumption (rows=resources) = [[4, 2, 6, 8], [4, 5, 1, 4], [3, 6, 4, 4], [7, 2, 6, 5]]
capacity = [21, 16, 32, 25]
upper_bounds = [3, 3, 3, 3]"
348,rod,8,168,7,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 23, 2, 2, 1, 16, 15, 15]"
349,knap,4,23,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 4, 4, 2]
V = [11, 13, 7, 10]
C = 8"
350,knap,32,1484,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [49, 2, 23, 37, 24, 63, 53, 60, 63, 13, 26, 15, 40, 22, 49, 52, 55, 32, 41, 28, 9, 22, 26, 47, 13, 28, 21, 17, 49, 33, 28, 56]
V = [103, 110, 109, 58, 95, 113, 28, 109, 128, 46, 11, 26, 23, 2, 128, 91, 20, 27, 112, 60, 23, 15, 11, 27, 10, 37, 94, 110, 14, 53, 15, 65]
C = 548"
351,ilp_prod,2,12,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3]
consumption (rows=resources) = [[2, 2], [2, 2]]
capacity = [8, 9]
upper_bounds = [4, 4]"
352,add,32,144388711716657997680288512745916,1915,0,0,0,"{'ok': True, 'value': 348877363944624148844636215679808, 'stdout': '348877363944624148844636215679808\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08190655708312988}",0,Compute: 87219340986156037211159053919952 + 57169370730501960469129458825964
353,ilp_prod,16,244,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 34, 40, 14, 41, 13]
consumption (rows=resources) = [[16, 4, 9, 6, 11, 12], [8, 4, 1, 16, 6, 9], [2, 4, 9, 11, 10, 11], [12, 9, 6, 10, 13, 13]]
capacity = [44, 54, 36, 60]
upper_bounds = [3, 6, 4, 3, 3, 3]"
354,ilp_assign,32,81,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 15, 41, 2, 53, 25, 6], [20, 69, 89, 88, 91, 54, 49], [84, 28, 52, 74, 82, 17, 16], [18, 2, 72, 7, 13, 83, 15], [70, 79, 4, 46, 29, 92, 9], [1, 64, 78, 14, 35, 26, 73], [43, 7, 11, 22, 80, 82, 42]]"
355,knap,32,1760,107,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [34, 15, 37, 12, 20, 50, 21, 11, 60, 36, 22, 10, 6, 24, 33, 18, 28, 45, 10, 56, 61, 39, 55, 33, 53, 61, 40, 38, 20, 25, 48, 36]
V = [128, 104, 101, 3, 99, 128, 52, 114, 82, 5, 120, 1, 108, 4, 95, 108, 80, 88, 98, 101, 122, 52, 38, 75, 99, 107, 10, 48, 16, 4, 31, 62]
C = 528"
356,ilp_partition,32,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 92, 94, 83, 13, 29, 20, 16, 42, 43, 69, 83, 95, 59, 59, 75, 56, 43, 2, 82, 48, 88, 5, 63]"
357,knap,4,19,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 8, 3, 2]
V = [4, 14, 2, 15]
C = 8"
358,mul,32,755191344549123563791937238086289709912756122155658129151654156,5,0,120,0,"{'ok': True, 'value': 63852607857628991172505912767016, 'stdout': '63852607857628991172505912767016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08501052856445312}",0,Compute: 15963151964407247793126478191754 * 47308410408731314014361762942414
359,ilp_prod,32,515,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [50, 75, 70, 65, 36, 68]
consumption (rows=resources) = [[17, 11, 12, 30, 12, 13], [11, 10, 14, 3, 9, 32], [29, 6, 26, 3, 1, 30], [30, 7, 30, 28, 29, 21]]
capacity = [104, 68, 76, 74]
upper_bounds = [3, 6, 3, 3, 3, 3]"
360,sub,16,2018105082267628,3,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08714795112609863}",0,Compute: 4242820992617226 - 2224715910349598
361,ilp_assign,2,5,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 5], [6, 2]]"
362,knap,2,10,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 4]
V = [5, 10, 6]
C = 5"
363,ilp_prod,16,172,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 48, 38, 6, 37, 40]
consumption (rows=resources) = [[9, 8, 6, 2, 14, 2], [10, 11, 7, 1, 13, 13], [4, 2, 14, 12, 1, 7], [12, 15, 1, 5, 13, 16]]
capacity = [56, 38, 52, 33]
upper_bounds = [3, 3, 3, 4, 3, 3]"
364,add,4,14403,7,0,4,0,"{'ok': True, 'value': 19600, 'stdout': '19600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0948178768157959}",0,Compute: 4900 + 9503
365,add,16,11185267881342209,20,0,67108864,0,"{'ok': True, 'value': 32367204158732340, 'stdout': '32367204158732340\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09382176399230957}",0,Compute: 8091801039683085 + 3093466841659124
366,add,4,12852,7,0,1,0,"{'ok': True, 'value': 39520, 'stdout': '39520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07173728942871094}",0,Compute: 9880 + 2972
367,sub,16,3387482379273621,3,0,12233556448276698,0,"{'ok': True, 'value': 26494225793106792, 'stdout': '26494225793106792\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08081388473510742}",0,Compute: 6623556448276698 - 3236074069003077
368,lcs,4,2,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbda""
T = ""abbcb"""
369,ilp_prod,32,432,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 60, 77, 12, 19, 72]
consumption (rows=resources) = [[12, 9, 26, 16, 25, 16], [19, 15, 12, 10, 27, 3], [26, 1, 13, 31, 18, 8], [23, 11, 18, 11, 11, 19]]
capacity = [126, 101, 102, 90]
upper_bounds = [3, 6, 4, 3, 3, 4]"
370,mul,8,3273286432256603,,0,34118683,0,"{'ok': True, 'value': 136474732, 'stdout': '136474732\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08327579498291016}",0,Compute: 34118683 * 95938241
371,ilp_prod,16,236,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 37, 38, 32, 30, 10]
consumption (rows=resources) = [[7, 3, 9, 4, 6, 2], [5, 8, 4, 7, 10, 7], [10, 14, 9, 6, 13, 11], [1, 12, 13, 4, 2, 8]]
capacity = [43, 43, 49, 51]
upper_bounds = [4, 3, 3, 6, 3, 4]"
372,ilp_prod,32,213,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [28, 51, 92, 22, 91, 29]
consumption (rows=resources) = [[28, 20, 19, 24, 30, 1], [9, 5, 25, 25, 15, 25], [19, 9, 1, 4, 28, 6], [21, 22, 27, 24, 26, 14]]
capacity = [91, 117, 84, 72]
upper_bounds = [3, 3, 3, 3, 3, 4]"
373,ilp_prod,2,25,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5]
consumption (rows=resources) = [[2, 1], [1, 2]]
capacity = [6, 10]
upper_bounds = [3, 5]"
374,lcs,32,17,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdaadddcabdbdbddbacddaadacdddca""
T = ""cccaddbcbabbddcbcaccbccbbcabcdbc"""
375,ilp_assign,16,51,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 34, 48, 15, 33, 8, 30], [24, 47, 46, 46, 17, 37, 34], [11, 6, 18, 6, 44, 34, 1], [48, 5, 26, 41, 4, 30, 42], [29, 32, 3, 4, 10, 44, 2], [7, 44, 48, 26, 11, 6, 18], [48, 25, 45, 29, 41, 3, 41]]"
376,ilp_prod,2,18,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[3, 3], [1, 3]]
capacity = [9, 8]
upper_bounds = [3, 3]"
377,mul,2,7448,7,0,98,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 98 * 76
378,ilp_prod,2,10,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5]
consumption (rows=resources) = [[3, 3], [2, 2]]
capacity = [8, 8]
upper_bounds = [3, 3]"
379,ilp_partition,16,1,40,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 41, 13, 17, 46, 30, 17, 35, 4, 18, 16, 3, 8, 1, 45, 44]"
380,lcs,32,18,6,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcaccdaccccdcbddaaddbaccabacbdb""
T = ""cbabddadbbaaaadbbaddadacadacabad"""
381,ilp_assign,2,6,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 2], [4, 6]]"
382,ilp_assign,8,41,-1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1, 23, 2, 14, 12, 2], [17, 15, 19, 24, 22, 15, 21], [17, 10, 18, 13, 13, 22, 11], [9, 16, 3, 1, 5, 11, 3], [21, 12, 2, 2, 21, 13, 11], [7, 5, 14, 8, 10, 11, 1], [8, 7, 9, 13, 10, 16, 13]]"
383,ilp_partition,32,1,2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [68, 62, 90, 74, 53, 84, 35, 16, 73, 33, 24, 43, 59, 4, 24, 13, 21, 61, 91, 66, 38, 31, 44, 64]"
384,add,16,11265701697726455,7,0,0,0,"{'ok': True, 'value': 30735960417013084, 'stdout': '30735960417013084\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08989810943603516}",0,Compute: 7683990104253271 + 3581711593473184
385,sub,32,27091880869801641950979642481254,-31708835742724284385994352922321,0,3,0,"{'ok': True, 'value': 235202866450103705347895981614300, 'stdout': '235202866450103705347895981614300\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10538315773010254}",0,Compute: 58800716612525926336973995403575 - 31708835742724284385994352922321
386,mul,2,4048,1,0,1,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09968209266662598}",0,Compute: 44 * 92
387,add,32,109576421601547609931588032555392,-1,0,2,0,"{'ok': True, 'value': 342338836378487429411728687483824, 'stdout': '342338836378487429411728687483824\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0885474681854248}",0,Compute: 85584709094621857352932171870956 + 23991712506925752578655860684436
388,sub,2,61,7,0,-6,0,"{'ok': True, 'value': 368, 'stdout': '368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09431076049804688}",0,Compute: 92 - 31
389,knap,32,1769,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 14, 62, 12, 31, 17, 45, 36, 33, 6, 53, 46, 2, 42, 24, 32, 23, 60, 12, 3, 44, 1, 7, 52, 35, 38, 51, 59, 37, 47, 63, 54]
V = [69, 69, 44, 118, 101, 93, 70, 3, 83, 64, 49, 88, 121, 89, 64, 38, 47, 91, 71, 10, 74, 121, 64, 122, 47, 103, 34, 115, 83, 32, 29, 48]
C = 534"
390,ilp_partition,16,1,1,1,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 34, 26, 4, 6, 10, 16, 29, 31, 33, 28, 35, 8, 14, 26, 7]"
391,ilp_assign,2,7,7,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [6, 5]]"
392,sub,2,12,38,0,2,0,"{'ok': True, 'value': 296, 'stdout': '296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07507658004760742}",0,Compute: 74 - 62
393,lcs,16,9,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdddadadaadaddc""
T = ""ddcddbabcadbabc"""
394,add,8,111095516,3,0,0,0,"{'ok': True, 'value': 298255700, 'stdout': '298255700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07940673828125}",0,Compute: 74563925 + 36531591
395,mul,16,37276528268211146011085956805178,7652754975849642,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09913325309753418}",0,Compute: 4870994613815209 * 7652754975849642
396,ilp_assign,16,66,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 16, 34, 46, 35, 6, 25], [35, 33, 22, 7, 36, 15, 26], [19, 40, 42, 23, 28, 1, 44], [3, 17, 47, 8, 22, 33, 9], [22, 4, 38, 7, 24, 21, 37], [31, 18, 41, 17, 12, 31, 20], [12, 1, 14, 45, 11, 44, 10]]"
397,ilp_partition,2,2,,0,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 3, 3, 6]"
398,lcs,4,2,0,0,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caca""
T = ""abbc"""
399,mul,8,2459981525813142,0,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07752156257629395}",0,Compute: 98666058 * 24932399
400,mul,16,52268605480251191156146046476515,1,0,0,0,"{'ok': True, 'value': 31017729887965404, 'stdout': '31017729887965404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07428669929504395}",0,Compute: 7754432471991351 * 6740481095043765
401,lcs,32,19,2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbccbcbabdcadcadbcbbdaabdcddaabb""
T = ""caccadcbddbdaabcaaabacbdbcacadadb"""
402,rod,4,20,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 4, 4, 3]"
403,mul,8,5376080768273523,,0,6,0,"{'ok': True, 'value': 271038852, 'stdout': '271038852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07061886787414551}",0,Compute: 67759713 * 79340371
404,ilp_assign,16,52,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[44, 35, 29, 32, 23, 7, 3], [28, 20, 26, 13, 33, 17, 16], [47, 6, 33, 30, 32, 4, 30], [18, 28, 6, 1, 28, 28, 26], [3, 3, 15, 18, 8, 48, 48], [31, 40, 21, 18, 15, 42, 36], [10, 34, 30, 5, 41, 32, 2]]"
405,knap,16,431,0,0,1977,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 30, 20, 4, 25, 19, 12, 11, 29, 20, 20, 2, 31, 31, 19, 24]
V = [62, 41, 12, 11, 62, 23, 59, 55, 25, 43, 36, 18, 34, 50, 44, 2]
C = 154"
406,ilp_partition,2,0,,0,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 3, 1]"
407,sub,16,4479521710405140,-5265392992991094,0,0,0,"{'ok': True, 'value': 38979658813584936, 'stdout': '38979658813584936\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07242012023925781}",0,Compute: 9744914703396234 - 5265392992991094
408,knap,32,1719,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [56, 14, 53, 42, 6, 47, 44, 16, 3, 31, 22, 5, 33, 44, 48, 51, 53, 38, 1, 20, 53, 5, 52, 21, 7, 15, 12, 20, 16, 43, 32, 31]
V = [38, 47, 41, 122, 44, 64, 72, 79, 124, 88, 43, 116, 69, 3, 90, 31, 13, 84, 35, 114, 44, 82, 59, 81, 49, 108, 94, 82, 32, 30, 20, 50]
C = 467"
409,rod,8,112,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 11, 1, 12, 12, 12, 24, 3]"
410,add,32,52959172867855269837456030923362,1,0,8463427565749507,0,"{'ok': True, 'value': 169853710262998029334928409520588, 'stdout': '169853710262998029334928409520588\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06977534294128418}",0,Compute: 42463427565749507333732102380147 + 10495745302105762503723928543215
411,sub,4,867,7,0,4,0,"{'ok': True, 'value': 36872, 'stdout': '36872\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06714892387390137}",0,Compute: 9218 - 8351
412,knap,2,10,-3,0,71,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 5]
V = [10, 7, 3]
C = 5"
413,mul,2,1050,1,0,111111,0,"{'ok': True, 'value': 300, 'stdout': '300\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0696113109588623}",0,Compute: 75 * 14
414,lcs,8,3,0,0,32,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaddcadb""
T = ""cbbdbcc"""
415,rod,16,528,44,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [33, 32, 34, 39, 38, 44, 19, 1, 9, 41, 22, 29, 27, 39, 22, 40]"
416,ilp_partition,32,0,63,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 71, 7, 23, 28, 63, 61, 35, 23, 72, 47, 12, 53, 31, 20, 23, 34, 15, 72, 25, 26, 70, 54, 8]"
417,add,2,85,20,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 14 + 71
418,knap,16,430,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 31, 19, 2, 1, 1, 6, 9, 16, 32, 13, 7, 6, 18, 7, 13]
V = [17, 39, 18, 44, 19, 17, 14, 51, 62, 29, 7, 59, 29, 61, 28, 39]
C = 101"
419,sub,8,7394223,1855,0,16,0,"{'ok': True, 'value': 74230556, 'stdout': '74230556\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06986093521118164}",0,Compute: 18557639 - 11163416
420,ilp_prod,4,42,0,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4, 7]
consumption (rows=resources) = [[3, 1, 1], [3, 2, 2], [3, 1, 2]]
capacity = [15, 13, 14]
upper_bounds = [4, 6, 6]"
421,knap,4,22,-3,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 6, 2, 4]
V = [7, 3, 15, 7]
C = 6"
422,knap,16,292,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 22, 20, 8, 25, 4, 14, 30, 31, 8, 19, 23, 16, 8, 31, 10]
V = [56, 7, 6, 4, 5, 13, 36, 14, 27, 13, 34, 3, 11, 38, 22, 60]
C = 146"
423,ilp_assign,4,17,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6, 3, 5], [7, 11, 8, 11], [8, 12, 3, 7], [1, 2, 10, 4]]"
424,add,16,13001456797452087,7,0,2025,0,"{'ok': True, 'value': 15368680825019700, 'stdout': '15368680825019700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08151078224182129}",0,Compute: 3842170206254925 + 9159286591197162
425,ilp_assign,16,105,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[43, 7, 16, 38, 13, 24, 21], [39, 25, 26, 22, 31, 9, 19], [25, 5, 38, 28, 35, 33, 11], [34, 18, 39, 34, 15, 25, 46], [47, 40, 39, 29, 12, 34, 36], [46, 48, 34, 30, 16, 15, 31], [11, 25, 22, 20, 41, 6, 37]]"
426,ilp_assign,2,7,7,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [4, 6]]"
427,lcs,4,2,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbb""
T = ""baaba"""
428,mul,2,5056,15,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 64 * 79
429,ilp_prod,16,100,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [28, 29, 15, 14, 6, 7]
consumption (rows=resources) = [[14, 2, 12, 13, 6, 3], [5, 5, 5, 5, 13, 15], [16, 15, 12, 9, 2, 16], [13, 13, 13, 4, 3, 16]]
capacity = [50, 34, 60, 38]
upper_bounds = [3, 3, 3, 3, 3, 3]"
430,lcs,16,5,-8,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccacaaabcaacbbac""
T = ""ddddbbdbabbabbdbd"""
431,ilp_partition,2,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 3, 5, 2]"
432,ilp_assign,32,89,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[41, 30, 89, 19, 81, 79, 49], [1, 25, 77, 2, 44, 1, 50], [28, 25, 11, 5, 80, 80, 40], [49, 21, 74, 59, 47, 52, 82], [23, 55, 32, 59, 92, 54, 10], [76, 10, 80, 21, 17, 49, 51], [10, 20, 30, 80, 75, 19, 76]]"
433,mul,4,22475132,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 3356 * 6697
434,ilp_prod,32,338,25,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [87, 9, 63, 82, 41, 44]
consumption (rows=resources) = [[3, 8, 23, 28, 24, 16], [20, 27, 14, 15, 19, 26], [9, 21, 19, 22, 11, 18], [19, 28, 12, 5, 6, 7]]
capacity = [67, 70, 123, 106]
upper_bounds = [3, 3, 3, 3, 3, 3]"
435,sub,32,13682109075738233543910224781388,7,0,0,0,"{'ok': True, 'value': 302641729701128048403111340943212, 'stdout': '302641729701128048403111340943212\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10951018333435059}",0,Compute: 75660432425282012100777835235803 - 61978323349543778556867610454415
436,ilp_partition,32,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 72, 65, 56, 35, 69, 92, 96, 69, 39, 5, 2, 15, 36, 84, 90, 14, 29, 20, 66, 49, 86, 39, 25]"
437,knap,2,9,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 5]
V = [6, 9, 6]
C = 6"
438,knap,32,1605,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [35, 21, 47, 6, 52, 56, 25, 39, 25, 52, 32, 58, 7, 38, 28, 63, 56, 24, 56, 60, 41, 15, 11, 44, 41, 21, 45, 35, 15, 7, 37, 22]
V = [100, 24, 91, 85, 111, 43, 74, 103, 12, 119, 77, 44, 34, 37, 103, 88, 25, 108, 45, 6, 60, 37, 72, 83, 124, 79, 36, 61, 19, 45, 26, 99]
C = 557"
439,rod,2,8,10,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
440,knap,16,352,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 16, 7, 1, 30, 8, 21, 32, 14, 7, 2, 20, 27, 14, 21, 28]
V = [25, 22, 23, 7, 64, 56, 15, 23, 2, 6, 11, 59, 56, 45, 25, 8]
C = 138"
441,rod,8,152,114,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 19, 17, 11, 10, 3, 18, 20]"
442,ilp_partition,2,4,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 5, 1]"
443,ilp_prod,8,168,4,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 20, 23, 24]
consumption (rows=resources) = [[4, 3, 7, 3], [2, 2, 5, 3], [6, 8, 8, 3], [5, 4, 5, 2]]
capacity = [32, 26, 23, 23]
upper_bounds = [3, 3, 3, 7]"
444,sub,32,65541064721143707753415581247310,5,0,1,0,"{'ok': True, 'value': 355658055095451290302037495776820, 'stdout': '355658055095451290302037495776820\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08618426322937012}",0,Compute: 88914513773862822575509373944205 - 23373449052719114822093792696895
445,ilp_prod,16,233,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [44, 37, 11, 10, 31, 11]
consumption (rows=resources) = [[2, 3, 15, 5, 7, 6], [3, 6, 10, 9, 15, 15], [16, 2, 16, 10, 11, 5], [16, 9, 8, 15, 12, 2]]
capacity = [57, 51, 50, 57]
upper_bounds = [3, 6, 3, 3, 3, 3]"
446,ilp_partition,2,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 6, 2]"
447,rod,2,12,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 3]"
448,add,16,7219820946624302,,0,1963145785242821,0,"{'ok': True, 'value': 7852583140971284, 'stdout': '7852583140971284\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07689523696899414}",0,Compute: 1963145785242821 + 5256675161381481
449,ilp_prod,32,312,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [78, 43, 39, 51, 91, 70]
consumption (rows=resources) = [[20, 17, 2, 30, 23, 15], [18, 11, 28, 21, 22, 26], [12, 25, 18, 18, 17, 23], [19, 9, 31, 22, 24, 8]]
capacity = [73, 96, 91, 122]
upper_bounds = [3, 3, 3, 3, 3, 3]"
450,ilp_prod,8,73,0,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 22, 7, 10]
consumption (rows=resources) = [[4, 6, 1, 4], [8, 1, 2, 3], [7, 3, 8, 4], [4, 1, 6, 3]]
capacity = [21, 29, 23, 24]
upper_bounds = [3, 3, 3, 5]"
451,add,32,80200551631782376208713733897265,0,0,2,0,"{'ok': True, 'value': 183621173493523524755132175930688, 'stdout': '183621173493523524755132175930688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08656072616577148}",0,Compute: 45905293373380881188783043982672 + 34295258258401495019930689914593
452,ilp_assign,4,8,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 3, 6, 9], [2, 11, 1, 1], [10, 5, 2, 8], [2, 1, 11, 1]]"
453,sub,8,8868449,3,0,10,0,"{'ok': True, 'value': 268752580, 'stdout': '268752580\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08631372451782227}",0,Compute: 67188145 - 58319696
454,add,2,169,188,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 94 + 75
455,add,32,108504120962316108060452268547459,284371804786300622947500,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09307026863098145}",0,Compute: 28437180478630062294750099913776 + 80066940483686045765702168633683
456,knap,4,27,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 3, 8, 8]
V = [15, 12, 7, 2]
C = 13"
457,knap,8,108,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 3, 14, 15, 10, 14, 15, 13]
V = [9, 30, 31, 25, 7, 22, 18, 10]
C = 48"
458,rod,16,560,120,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 7, 32, 16, 41, 5, 44, 34, 24, 17, 9, 26, 17, 5, 41, 46]"
459,knap,32,1573,618,0,63,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 39, 53, 20, 62, 39, 61, 22, 22, 57, 44, 54, 49, 39, 45, 45, 57, 25, 48, 57, 10, 57, 31, 13, 52, 38, 34, 21, 36, 33, 17, 46]
V = [41, 61, 3, 116, 78, 16, 94, 52, 96, 16, 40, 62, 16, 59, 62, 117, 118, 20, 94, 78, 48, 47, 118, 66, 95, 123, 64, 123, 22, 59, 26, 53]
C = 618"
460,mul,8,1502345450884160,7,0,0,0,"{'ok': True, 'value': 370731632, 'stdout': '370731632\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07895970344543457}",0,Compute: 92682908 * 16209520
461,lcs,8,6,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdaacbdd""
T = ""bdbabdccd"""
462,ilp_partition,4,2,17,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 3, 10, 7]"
463,ilp_prod,32,182,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [80, 51, 8, 62, 87, 54]
consumption (rows=resources) = [[31, 8, 32, 28, 3, 18], [30, 30, 1, 31, 27, 26], [28, 3, 12, 20, 10, 8], [1, 9, 19, 20, 28, 31]]
capacity = [68, 70, 85, 82]
upper_bounds = [3, 3, 3, 3, 3, 3]"
464,ilp_partition,4,0,,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 9, 10]"
465,add,4,13780,-1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 8764 + 5016
466,lcs,16,10,-8,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdddacabcadbcdc""
T = ""cabbdcadacbcabdd"""
467,ilp_assign,32,125,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 59, 61, 78, 21, 87, 43], [49, 89, 45, 82, 29, 69, 21], [72, 50, 41, 37, 71, 55, 78], [7, 14, 79, 36, 15, 74, 62], [7, 16, 40, 32, 67, 23, 29], [71, 53, 86, 13, 90, 69, 35], [95, 6, 21, 15, 41, 81, 20]]"
468,add,2,85,38,0,0,0,"{'ok': True, 'value': 288, 'stdout': '288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09259629249572754}",0,Compute: 72 + 13
469,sub,2,13,-5,0,3,0,"{'ok': True, 'value': 272, 'stdout': '272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08697223663330078}",0,Compute: 68 - 55
470,ilp_partition,2,2,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 5, 6]"
471,lcs,4,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbd""
T = ""cbaaa"""
472,sub,4,2756,7,0,4,0,"{'ok': True, 'value': 29988, 'stdout': '29988\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07614517211914062}",0,Compute: 7497 - 4741
473,mul,16,14314025439458578356932532159110,,0,3,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08610224723815918}",0,Compute: 3645156524985455 * 3926861670094042
474,mul,16,35096591900935280632846315858530,82996965,0,2,0,"{'ok': True, 'value': 33198786007095560, 'stdout': '33198786007095560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10589885711669922}",0,Compute: 8299696501773890 * 4228659673692177
475,lcs,2,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cc""
T = ""c"""
476,ilp_partition,16,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [33, 42, 1, 13, 33, 36, 32, 46, 17, 1, 13, 12, 29, 24, 28, 15]"
477,knap,8,82,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 12, 12, 14, 10, 9, 15, 3]
V = [4, 7, 18, 20, 14, 28, 13, 16]
C = 44"
478,ilp_prod,16,135,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 33, 16, 30, 29, 21]
consumption (rows=resources) = [[14, 14, 4, 12, 8, 4], [2, 16, 9, 16, 14, 7], [8, 6, 7, 6, 16, 16], [6, 3, 13, 10, 4, 14]]
capacity = [61, 33, 48, 55]
upper_bounds = [4, 3, 3, 3, 3, 3]"
479,ilp_partition,4,1,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 3, 9, 5]"
480,ilp_prod,8,48,3,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 5, 16, 10]
consumption (rows=resources) = [[6, 2, 6, 4], [2, 6, 5, 1], [6, 1, 7, 2], [1, 1, 3, 8]]
capacity = [19, 22, 27, 18]
upper_bounds = [3, 3, 3, 3]"
481,add,2,93,65,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 54 + 39
482,rod,16,448,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [28, 35, 39, 4, 8, 39, 44, 25, 31, 30, 47, 2, 6, 4, 39, 33]"
483,sub,8,15296507,0,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07787632942199707}",0,Compute: 66266184 - 50969677
484,knap,4,33,3,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 2, 7]
V = [5, 15, 13, 6]
C = 6"
485,mul,2,2352,7,0,74,0,"{'ok': True, 'value': 196, 'stdout': '196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08558917045593262}",0,Compute: 49 * 48
486,sub,4,439,20,0,3,0,"{'ok': True, 'value': 20560, 'stdout': '20560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08737492561340332}",0,Compute: 5140 - 4701
487,ilp_partition,16,0,3,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 30, 35, 33, 23, 36, 3, 29, 27, 23, 17, 7, 48, 11, 16, 17]"
488,ilp_assign,4,18,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 10, 3, 9], [4, 10, 1, 4], [12, 8, 6, 11], [3, 7, 11, 6]]"
489,lcs,32,19,-1,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbcaaaabdacdcbdccdcbccbdccdabaa""
T = ""ccdbaccaacaadadaaabacadadaabcbda"""
490,add,16,6728572035338609,7,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07815718650817871}",0,Compute: 4479839859393835 + 2248732175944774
491,mul,8,2002371572907087,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 57548811 * 34794317
492,ilp_partition,16,0,8,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 22, 20, 17, 26, 22, 3, 3, 8, 48, 16, 4, 2, 7, 29, 6]"
493,mul,4,30269538,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 9477 * 3194
494,knap,16,431,30,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 22, 29, 11, 7, 30, 9, 10, 1, 25, 11, 9, 7, 14, 8, 4]
V = [63, 29, 51, 45, 38, 12, 29, 48, 4, 13, 34, 36, 38, 40, 24, 56]
C = 109"
495,add,16,4973506256166924,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 3056144135201593 + 1917362120965331
496,mul,4,12673134,126465,0,7,0,"{'ok': True, 'value': 12492, 'stdout': '12492\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07001042366027832}",0,Compute: 3123 * 4058
497,ilp_partition,32,0,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [40, 46, 25, 34, 81, 51, 56, 9, 48, 25, 75, 92, 94, 21, 7, 4, 32, 62, 15, 66, 36, 86, 26, 41]"
498,sub,2,10,7,0,2,0,"{'ok': True, 'value': 356, 'stdout': '356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07457971572875977}",0,Compute: 89 - 79
499,knap,2,14,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 1]
V = [9, 6, 8]
C = 2"
500,ilp_partition,4,1,5,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 12, 7, 3]"
501,ilp_assign,8,51,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 24, 6, 14, 9, 12, 10], [11, 9, 6, 17, 19, 7, 20], [20, 18, 4, 20, 6, 9, 4], [7, 2, 22, 22, 5, 17, 21], [19, 22, 21, 24, 22, 15, 24], [21, 18, 4, 18, 18, 8, 6], [14, 14, 20, 6, 2, 11, 23]]"
502,add,2,166,134,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 99 + 67
503,mul,4,43323600,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 5484 * 7900
504,sub,8,19557615,,0,0,0,"{'ok': True, 'value': 121359252, 'stdout': '121359252\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07540106773376465}",0,Compute: 30339813 - 10782198
505,add,16,10588479741921405,0,0,132,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09336042404174805}",0,Compute: 3104351111617910 + 7484128630303495
506,ilp_partition,8,1,2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 19, 9, 4, 11, 11, 3, 15]"
507,sub,32,87116008115242570923703921793695,1,0,98119830354402135160020373338436,0,"{'ok': True, 'value': 392479321417608540640081493353744, 'stdout': '392479321417608540640081493353744\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07628345489501953}",0,Compute: 98119830354402135160020373338436 - 11003822239159564236316451544741
508,ilp_partition,32,1,92,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [33, 59, 79, 4, 53, 41, 16, 94, 50, 42, 94, 61, 78, 47, 91, 83, 92, 9, 39, 72, 9, 89, 39, 59]"
509,ilp_prod,2,12,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 3]
consumption (rows=resources) = [[3, 2], [1, 2]]
capacity = [7, 10]
upper_bounds = [3, 3]"
510,mul,16,14462624199787660938027713119584,0,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0844879150390625}",0,Compute: 3289490242023696 * 4396615626040054
511,ilp_partition,32,1,69,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [87, 69, 79, 1, 5, 56, 81, 89, 75, 4, 20, 35, 36, 83, 12, 86, 43, 20, 86, 46, 67, 45, 52, 80]"
512,add,16,12369875879248092,7,0,4802461015668281,0,"{'ok': True, 'value': 12098444030673124, 'stdout': '12098444030673124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09364056587219238}",0,Compute: 3024611007668281 + 9345264871579811
513,ilp_assign,32,177,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[84, 76, 79, 91, 85, 77, 61], [22, 52, 9, 74, 28, 73, 2], [47, 45, 45, 69, 84, 29, 79], [6, 41, 34, 70, 26, 17, 62], [90, 9, 41, 69, 44, 61, 12], [67, 36, 65, 30, 58, 69, 92], [87, 6, 67, 91, 37, 81, 34]]"
514,knap,16,407,146,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 25, 14, 28, 24, 23, 8, 22, 2, 25, 17, 19, 30, 19, 12, 10]
V = [64, 43, 6, 42, 60, 31, 53, 5, 57, 21, 29, 29, 51, 13, 20, 30]
C = 146"
515,ilp_partition,4,4,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 9, 8, 9]"
516,rod,16,304,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [19, 35, 44, 2, 18, 4, 18, 14, 25, 40, 25, 28, 16, 24, 15, 6]"
517,ilp_partition,8,1,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 13, 5, 13, 3, 24, 20]"
518,knap,2,10,7,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 2]
V = [2, 10, 1]
C = 4"
519,lcs,2,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""da"""
520,ilp_partition,2,0,,0,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 5, 3]"
521,knap,2,10,,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 3]
V = [10, 10, 2]
C = 5"
522,rod,32,1568,729,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [49, 32, 57, 66, 19, 21, 48, 17, 44, 69, 96, 79, 74, 27, 51, 82, 85, 48, 31, 57, 10, 53, 48, 64, 22, 48, 16, 68, 33, 25, 37, 48]"
523,knap,16,460,24,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 25, 24, 22, 31, 24, 23, 15, 31, 27, 30, 16, 7, 10, 13, 10]
V = [29, 17, 44, 53, 59, 58, 60, 14, 25, 1, 59, 52, 64, 26, 58, 10]
C = 155"
524,sub,16,1775160523906214,0,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07087826728820801}",0,Compute: 6817829276978140 - 5042668753071926
525,lcs,32,21,2,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcabdbaccbbaaddbcdccabbdcdbdcbd""
T = ""cbdcbcaddcbbaabccbacbaddaacabddbd"""
526,lcs,8,5,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abddaacc""
T = ""acdaccbc"""
527,mul,4,7942112,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 2264 * 3508
528,rod,4,48,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 11, 6, 7]"
529,ilp_prod,4,32,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8, 12]
consumption (rows=resources) = [[2, 2, 2], [3, 3, 3], [3, 1, 4]]
capacity = [12, 11, 10]
upper_bounds = [3, 3, 3]"
530,sub,16,5439045219999479,,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07748579978942871}",0,Compute: 6588260931747456 - 1149215711747977
531,ilp_assign,4,21,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3, 4, 2], [10, 8, 9, 9], [6, 11, 11, 5], [4, 9, 10, 5]]"
532,mul,32,5203270485956217900053345227907683337861216424311163278354429168,0,0,1,0,"{'ok': True, 'value': 235279690100984039121740840495992, 'stdout': '235279690100984039121740840495992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07810640335083008}",0,Compute: 58819922525246009780435210123998 * 88461022432032787233729302577416
533,ilp_partition,16,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 42, 16, 40, 36, 40, 7, 45, 12, 13, 34, 24, 29, 18, 2, 43]"
534,ilp_prod,16,178,1,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 34, 24, 24, 29, 31]
consumption (rows=resources) = [[1, 2, 10, 2, 13, 14], [5, 10, 4, 14, 16, 13], [4, 16, 4, 3, 14, 15], [10, 8, 9, 1, 9, 5]]
capacity = [50, 61, 41, 50]
upper_bounds = [5, 3, 5, 4, 3, 3]"
535,ilp_partition,8,0,3,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 4, 1, 20, 15, 6, 3, 18]"
536,add,8,46916384,12345,0,4,0,"{'ok': True, 'value': 49981496, 'stdout': '49981496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07594704627990723}",0,Compute: 12495374 + 34421010
537,add,32,89194229438271121156239441275954,12,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08329176902770996}",0,Compute: 26660702353471297991053664369492 + 62533527084799823165185776906462
538,ilp_assign,2,5,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [3, 5]]"
539,rod,2,12,6,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
540,sub,16,1630307454914643,-1395692099,0,0,0,"{'ok': True, 'value': 17422516279535392, 'stdout': '17422516279535392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07819485664367676}",0,Compute: 4355629069883848 - 2725321614969205
541,sub,2,15,-6,0,2048,0,"{'ok': True, 'value': 288, 'stdout': '288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09645676612854004}",0,Compute: 72 - 57
542,add,16,11992867306326287,8342088453543862,0,0,0,"{'ok': True, 'value': 14603115411129700, 'stdout': '14603115411129700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08161330223083496}",0,Compute: 3650778852782425 + 8342088453543862
543,mul,16,2241218354538315128945928420671,58280000000000000,0,1518282652982431,0,"{'ok': True, 'value': 5904614269644164, 'stdout': '5904614269644164\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0893397331237793}",0,Compute: 1476153567411041 * 1518282652982431
544,mul,16,8591325334339140485547100024782,16708,0,1670825897197574,0,"{'ok': True, 'value': 6683303588790296, 'stdout': '6683303588790296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0868675708770752}",0,Compute: 1670825897197574 * 5141963234319693
545,ilp_partition,2,0,,0,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 5, 4]"
546,lcs,2,1,2,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""ad"""
547,sub,16,3490602152425137,7,0,4785885636497899,0,"{'ok': True, 'value': 19143542545991596, 'stdout': '19143542545991596\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08085966110229492}",0,Compute: 4785885636497899 - 1295283484072762
548,rod,8,176,7,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 3, 8, 9, 10, 18, 15, 11]"
549,add,16,11451807430017767,15,0,3,0,"{'ok': True, 'value': 5815537200397248, 'stdout': '5815537200397248\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09058570861816406}",0,Compute: 1453884300099312 + 9997923129918455
550,ilp_prod,8,103,27,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 12, 23, 19]
consumption (rows=resources) = [[3, 3, 3, 1], [1, 7, 4, 4], [8, 2, 1, 7], [3, 5, 8, 3]]
capacity = [28, 22, 25, 26]
upper_bounds = [3, 3, 3, 3]"
551,ilp_assign,16,89,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 4, 25, 10, 9, 23, 28], [19, 28, 6, 5, 31, 4, 35], [33, 39, 28, 34, 23, 10, 33], [45, 26, 43, 8, 19, 47, 23], [34, 4, 47, 12, 41, 14, 40], [40, 2, 28, 18, 25, 27, 36], [27, 28, 36, 42, 37, 26, 45]]"
552,mul,2,1134,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 81 * 14
553,ilp_partition,8,1,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 7, 18, 2, 19, 21, 14, 7]"
554,rod,16,352,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [22, 14, 21, 30, 22, 38, 31, 6, 38, 47, 16, 16, 30, 5, 44, 39]"
555,ilp_prod,8,114,25,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 8, 9, 9]
consumption (rows=resources) = [[1, 1, 7, 8], [1, 4, 4, 2], [6, 7, 3, 1], [7, 5, 6, 1]]
capacity = [30, 26, 28, 30]
upper_bounds = [4, 4, 4, 3]"
556,knap,2,5,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 2]
V = [3, 5, 3]
C = 3"
557,ilp_partition,16,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [31, 1, 2, 40, 23, 12, 23, 8, 20, 13, 43, 17, 41, 27, 1, 33]"
558,knap,32,1368,0,0,40,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 27, 23, 20, 20, 7, 4, 37, 28, 22, 16, 8, 28, 24, 42, 46, 57, 18, 8, 3, 30, 16, 37, 62, 3, 32, 17, 46, 61, 8, 19, 15]
V = [5, 88, 10, 90, 40, 8, 9, 39, 39, 26, 24, 34, 41, 97, 91, 86, 38, 8, 108, 123, 103, 31, 47, 45, 24, 18, 53, 75, 27, 114, 25, 122]
C = 394"
559,sub,4,7302,1,0,0,0,"{'ok': True, 'value': 34436, 'stdout': '34436\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07714557647705078}",0,Compute: 8609 - 1307
560,add,4,2621,3201,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 1612 + 1009
561,mul,32,1412510375150158008720262904062418773543130649679996873474346250,5,0,2,0,"{'ok': True, 'value': 71083758911550420781654178377500, 'stdout': '71083758911550420781654178377500\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07813215255737305}",0,Compute: 17770939727887605195413544594375 * 79484281460565180360546319206054
562,ilp_prod,32,338,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [38, 52, 78, 26, 62, 66]
consumption (rows=resources) = [[10, 18, 10, 6, 28, 31], [9, 20, 19, 24, 25, 5], [2, 17, 22, 3, 26, 18], [28, 11, 26, 1, 21, 28]]
capacity = [74, 106, 123, 106]
upper_bounds = [3, 4, 4, 4, 3, 3]"
563,ilp_prod,32,438,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 36, 49, 61, 80, 66]
consumption (rows=resources) = [[22, 17, 24, 8, 5, 21], [31, 1, 1, 13, 6, 12], [20, 24, 12, 31, 23, 15], [16, 18, 9, 6, 29, 2]]
capacity = [108, 90, 127, 93]
upper_bounds = [3, 5, 4, 4, 3, 5]"
564,knap,2,8,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 2]
V = [4, 6, 8]
C = 5"
565,rod,32,1856,729,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [58, 48, 85, 59, 5, 33, 57, 20, 95, 36, 9, 31, 5, 28, 17, 54, 14, 83, 54, 22, 12, 51, 53, 2, 18, 24, 77, 58, 10, 23, 49, 3]"
566,add,32,92251869915927140651825047758146,1915,0,0,0,"{'ok': True, 'value': 84919590866382950040869573231736, 'stdout': '84919590866382950040869573231736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0826725959777832}",0,Compute: 21229897716595737510217393307934 + 71021972199331403141607654450212
567,add,4,18883,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 9897 + 8986
568,ilp_partition,16,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 26, 36, 8, 9, 26, 44, 18, 13, 48, 41, 6, 27, 6, 32, 26]"
569,sub,2,49,7,0,59,0,"{'ok': True, 'value': 236, 'stdout': '236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07669782638549805}",0,Compute: 59 - 10
570,ilp_assign,4,17,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 6, 10, 12], [5, 7, 10, 5], [6, 10, 2, 7], [4, 10, 8, 6]]"
571,mul,32,7565871867532635209546382102360140257683214503372677713923061232,1,0,1,0,"{'ok': True, 'value': 380019262405371740916528070766656, 'stdout': '380019262405371740916528070766656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08156967163085938}",0,Compute: 95004815601342935229132017691664 * 79636719671983535255305149317663
572,lcs,8,5,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddabcbbd""
T = ""ddadacd"""
573,ilp_prod,16,183,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [40, 31, 42, 4, 45, 16]
consumption (rows=resources) = [[14, 6, 16, 4, 4, 9], [13, 7, 15, 3, 14, 13], [14, 10, 16, 15, 13, 4], [12, 2, 16, 8, 12, 7]]
capacity = [39, 56, 56, 38]
upper_bounds = [3, 5, 3, 3, 3, 4]"
574,ilp_assign,8,29,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 11, 23, 6, 5, 12, 8], [22, 19, 2, 23, 24, 14, 21], [6, 11, 19, 7, 21, 8, 16], [10, 9, 19, 21, 17, 17, 23], [19, 17, 16, 8, 6, 23, 3], [19, 8, 15, 5, 13, 6, 1], [23, 4, 24, 2, 2, 18, 2]]"
575,mul,16,19246751548509381693574124637612,0,0,8841973028224371,0,"{'ok': True, 'value': 35367892112897484, 'stdout': '35367892112897484\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08363699913024902}",0,Compute: 8841973028224371 * 2176748502519972
576,rod,8,76,1,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [8, 19, 21, 6, 5, 22, 24, 14]"
577,lcs,16,8,0,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbdbbbbcbaccaab""
T = ""abacbabdadaabaa"""
578,ilp_prod,2,42,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[1, 1], [2, 1]]
capacity = [9, 6]
upper_bounds = [3, 6]"
579,sub,32,64824286420295497052754341710348,-1,0,10,0,"{'ok': True, 'value': 363852841545796541704481832950348, 'stdout': '363852841545796541704481832950348\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09042978286743164}",0,Compute: 90963210386449135426120458237587 - 26138923966153638373366116527239
580,ilp_prod,8,91,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 23, 13, 5]
consumption (rows=resources) = [[1, 5, 7, 3], [4, 6, 7, 1], [4, 3, 4, 2], [4, 2, 4, 4]]
capacity = [17, 29, 26, 20]
upper_bounds = [5, 3, 3, 5]"
581,ilp_assign,32,103,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 12, 73, 71, 85, 70, 63], [90, 45, 44, 8, 40, 10, 11], [27, 27, 23, 88, 62, 85, 60], [60, 3, 69, 24, 32, 96, 34], [8, 17, 5, 96, 94, 23, 70], [70, 33, 71, 64, 93, 31, 74], [79, 91, 20, 71, 1, 46, 63]]"
582,sub,16,724851379795484,-9146576029048808,0,0,0,"{'ok': True, 'value': 39485709635377168, 'stdout': '39485709635377168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09523749351501465}",0,Compute: 9871427408844292 - 9146576029048808
583,add,4,12513,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 3997 + 8516
584,ilp_prod,4,21,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 7, 3]
consumption (rows=resources) = [[2, 1, 1], [4, 4, 2], [2, 4, 1]]
capacity = [14, 11, 9]
upper_bounds = [3, 3, 5]"
585,mul,4,22435491,75012911,0,7501,0,"{'ok': True, 'value': 30004, 'stdout': '30004\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09033417701721191}",0,Compute: 7501 * 2991
586,lcs,4,1,18,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddb""
T = ""cdcc"""
587,ilp_prod,4,64,10000000,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4, 9]
consumption (rows=resources) = [[1, 2, 3], [1, 4, 2], [1, 4, 2]]
capacity = [12, 16, 15]
upper_bounds = [10, 3, 4]"
588,knap,32,1575,2025,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [33, 5, 50, 23, 9, 49, 41, 6, 48, 21, 7, 1, 7, 18, 25, 45, 35, 1, 16, 56, 38, 17, 14, 41, 27, 1, 13, 37, 64, 29, 56, 24]
V = [125, 86, 80, 108, 25, 57, 1, 56, 95, 69, 57, 50, 30, 98, 50, 80, 49, 87, 78, 33, 98, 106, 30, 49, 46, 2, 80, 37, 47, 76, 114, 18]
C = 428"
589,ilp_partition,16,1,7,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [41, 38, 6, 43, 23, 10, 10, 6, 4, 34, 46, 10, 44, 3, 44, 7]"
590,rod,8,88,15,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 7, 6, 15, 7, 14, 12, 5]"
591,lcs,32,18,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaddcddbcbdbdcbbdabaaadcbccaabdc""
T = ""abbbdddccabaaddccaacbbccacacaba"""
592,ilp_prod,2,32,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[2, 1], [1, 3]]
capacity = [9, 7]
upper_bounds = [4, 3]"
593,ilp_assign,32,113,-1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[94, 44, 35, 76, 9, 23, 4], [72, 58, 51, 56, 36, 82, 15], [18, 25, 35, 3, 55, 37, 23], [13, 6, 30, 20, 57, 67, 36], [49, 24, 85, 9, 47, 20, 47], [47, 60, 82, 9, 84, 65, 57], [19, 15, 46, 11, 10, 86, 14]]"
594,mul,32,1648583909387579151844663231245526039555859246223326330185203456,359,0,359857122261291180448,0,"{'ok': True, 'value': 143942848904516472179346380544864, 'stdout': '143942848904516472179346380544864\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08678269386291504}",0,Compute: 35985712226129118044836595136216 * 45812179540260628904433503514016
595,mul,16,58246845245777929668136576403043,,0,0,0,"{'ok': True, 'value': 28031296026971076, 'stdout': '28031296026971076\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09088850021362305}",0,Compute: 7007824006742769 * 8311687792064147
596,mul,8,2226204999984610,7,0,0,0,"{'ok': True, 'value': 356421908, 'stdout': '356421908\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08720040321350098}",0,Compute: 89105477 * 24983930
597,knap,4,24,-3,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 1, 7, 8]
V = [6, 12, 2, 12]
C = 11"
598,lcs,32,21,7,0,38,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caabcadbbbaacbdbdabacbdbcbdabdcb""
T = ""acabcadcadccaadcdcabcddbdbbabacbd"""
599,knap,8,108,8,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 15, 14, 13, 9, 3, 15, 15]
V = [10, 17, 1, 24, 28, 16, 23, 30]
C = 43"
600,add,16,5266610538234289,0,0,1,0,"{'ok': True, 'value': 14602994091034336, 'stdout': '14602994091034336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07607746124267578}",0,Compute: 3650748522758584 + 1615862015475705
601,ilp_partition,32,1,6,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 32, 68, 51, 16, 59, 62, 2, 1, 30, 61, 28, 83, 49, 73, 84, 19, 96, 87, 89, 58, 83, 47, 47]"
602,lcs,8,4,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddaaacd""
T = ""cdbdddb"""
603,lcs,2,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""acc"""
604,ilp_assign,4,14,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 11, 7, 11], [3, 4, 9, 8], [2, 11, 7, 11], [7, 4, 5, 1]]"
605,sub,4,2439,20,0,7,0,"{'ok': True, 'value': 20684, 'stdout': '20684\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08140683174133301}",0,Compute: 5171 - 2732
606,mul,2,2700,7,0,1,0,"{'ok': True, 'value': 300, 'stdout': '300\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07822155952453613}",0,Compute: 75 * 36
607,knap,8,95,0,0,14,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 8, 5, 14, 4, 3, 14, 14]
V = [25, 30, 7, 13, 4, 26, 14, 14]
C = 35"
608,rod,32,2528,729,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [79, 91, 61, 88, 5, 93, 34, 37, 1, 2, 11, 77, 34, 12, 58, 79, 88, 4, 45, 78, 11, 48, 52, 87, 63, 6, 37, 81, 61, 23, 74, 65]"
609,sub,32,43387471697197658614725034294792,-88342434063722375015006101712724,0,0,0,"{'ok': True, 'value': 353369736254889500060024406850896, 'stdout': '353369736254889500060024406850896\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07922029495239258}",0,Compute: 88342434063722375015006101712724 - 44954962366524716400281067417932
610,ilp_partition,2,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 3, 2]"
611,ilp_partition,2,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 2, 4, 6]"
612,add,2,63,63,1,10,0,"{'ok': True, 'value': 200, 'stdout': '200\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08848261833190918}",0,Compute: 50 + 13
613,ilp_partition,8,0,,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 16, 22, 12, 11, 3, 18, 17]"
614,sub,4,2408,7,0,0,0,"{'ok': True, 'value': 39240, 'stdout': '39240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07890796661376953}",0,Compute: 9810 - 7402
615,sub,32,45220508431535374360314007816421,69229559461923144808462716426673,0,0,0,"{'ok': True, 'value': 276918237847692579233850865706692, 'stdout': '276918237847692579233850865706692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1252002716064453}",0,Compute: 69229559461923144808462716426673 - 24009051030387770448148708610252
616,sub,2,38,,0,0,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08866310119628906}",0,Compute: 80 - 42
617,sub,4,4853,0,0,1,0,"{'ok': True, 'value': 37624, 'stdout': '37624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07626700401306152}",0,Compute: 9406 - 4553
618,sub,8,36899737,0,0,0,0,"{'ok': True, 'value': 247096676, 'stdout': '247096676\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11384201049804688}",0,Compute: 61774169 - 24874432
619,add,8,146316079,7,0,0,0,"{'ok': True, 'value': 384907584, 'stdout': '384907584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07749438285827637}",0,Compute: 96226896 + 50089183
620,add,32,113861247255878761634013532379130,244071578914876914992101537,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08009958267211914}",0,Compute: 24407157891487691499210153785103 + 89454089364391070134803378594027
621,lcs,4,2,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daad""
T = ""dcd"""
622,ilp_assign,2,6,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [4, 3]]"
623,ilp_prod,32,371,25,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 10, 70, 51, 58, 91]
consumption (rows=resources) = [[6, 6, 4, 28, 16, 19], [2, 16, 23, 31, 16, 26], [19, 3, 12, 5, 8, 28], [5, 22, 5, 13, 17, 13]]
capacity = [109, 103, 119, 103]
upper_bounds = [6, 4, 4, 3, 6, 3]"
624,ilp_partition,32,1,7,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [27, 17, 30, 73, 35, 67, 24, 9, 35, 88, 91, 2, 11, 82, 57, 35, 35, 56, 89, 3, 59, 29, 42, 61]"
625,ilp_prod,16,207,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 33, 4, 31, 38, 47]
consumption (rows=resources) = [[14, 9, 7, 11, 6, 15], [10, 6, 14, 7, 7, 2], [3, 7, 6, 12, 14, 8], [7, 1, 15, 12, 2, 10]]
capacity = [64, 41, 39, 46]
upper_bounds = [4, 5, 3, 3, 3, 4]"
626,mul,8,2318305092805975,17955937025,0,0,0,"{'ok': True, 'value': 142117612, 'stdout': '142117612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08017492294311523}",0,Compute: 35529403 * 65250325
627,ilp_assign,8,38,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 18, 6, 1, 24, 18, 21], [12, 20, 10, 18, 6, 21, 1], [16, 18, 6, 12, 19, 17, 12], [23, 18, 14, 16, 16, 12, 14], [4, 22, 3, 4, 8, 11, 7], [2, 23, 20, 19, 23, 2, 19], [12, 8, 20, 14, 13, 2, 22]]"
628,add,8,104544222,0,0,132,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08766341209411621}",0,Compute: 64942350 + 39601872
629,rod,16,336,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [2, 42, 34, 31, 43, 2, 35, 15, 30, 42, 11, 18, 25, 7, 7, 4]"
630,ilp_assign,8,36,-1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 4, 23, 16, 9, 6, 2], [4, 18, 15, 3, 6, 11, 15], [18, 6, 23, 16, 24, 12, 9], [23, 10, 16, 6, 22, 10, 17], [1, 6, 8, 4, 24, 13, 3], [4, 10, 23, 4, 9, 22, 8], [6, 22, 12, 4, 15, 4, 11]]"
631,rod,8,72,7,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 10, 17, 2, 10, 16, 16, 23]"
632,knap,4,17,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 8, 3, 3]
V = [6, 3, 9, 8]
C = 8"
633,ilp_partition,32,0,46,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [33, 14, 34, 68, 13, 63, 10, 61, 80, 50, 43, 43, 47, 59, 65, 38, 6, 58, 5, 24, 23, 81, 19, 11]"
634,ilp_prod,16,199,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 41, 12, 4, 9, 35]
consumption (rows=resources) = [[8, 9, 10, 7, 1, 1], [13, 2, 15, 3, 15, 5], [10, 4, 6, 6, 3, 4], [4, 5, 1, 16, 4, 12]]
capacity = [41, 33, 64, 33]
upper_bounds = [3, 4, 3, 3, 3, 3]"
635,ilp_assign,4,16,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 12, 6, 3], [11, 10, 1, 11], [12, 7, 11, 1], [5, 6, 11, 1]]"
636,ilp_partition,2,1,2,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 2, 3]"
637,mul,16,32976880462799205366044997581228,7,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07113051414489746}",0,Compute: 4822912781723846 * 6837544437412018
638,rod,8,120,,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 6, 19, 14, 16, 21, 5, 24]"
639,knap,2,9,-3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 4]
V = [9, 1, 4]
C = 4"
640,ilp_assign,2,5,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 2], [5, 2]]"
641,sub,32,15603993354568210847866342231077,-24097264492801040836389757226487,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08503246307373047}",0,Compute: 39701257847369251684256099457564 - 24097264492801040836389757226487
642,add,16,14345098228114070,2022,0,0,0,"{'ok': True, 'value': 23285258188375564, 'stdout': '23285258188375564\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08392500877380371}",0,Compute: 5821314547093891 + 8523783681020179
643,ilp_assign,4,16,-1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 9, 12, 1], [6, 12, 8, 2], [7, 11, 3, 5], [2, 6, 5, 4]]"
644,rod,2,12,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 3]"
645,ilp_partition,16,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 12, 35, 39, 10, 31, 46, 35, 18, 27, 21, 46, 18, 32, 37, 22]"
646,ilp_prod,4,36,500,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 11, 9]
consumption (rows=resources) = [[2, 4, 4], [3, 4, 1], [1, 2, 3]]
capacity = [9, 9, 13]
upper_bounds = [3, 3, 3]"
647,mul,2,2914,,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 31 * 94
648,ilp_assign,32,93,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[57, 11, 10, 13, 29, 34, 4], [65, 35, 80, 17, 62, 88, 35], [74, 9, 62, 65, 44, 32, 74], [67, 60, 1, 36, 73, 6, 7], [1, 72, 89, 11, 31, 17, 57], [26, 30, 27, 14, 61, 24, 29], [50, 37, 43, 26, 96, 73, 12]]"
649,knap,16,341,40,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 10, 8, 15, 18, 16, 6, 4, 30, 11, 7, 10, 1, 11, 29, 9]
V = [3, 7, 52, 12, 40, 51, 38, 39, 48, 10, 31, 8, 1, 34, 10, 36]
C = 104"
650,knap,16,421,59220,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 16, 19, 28, 28, 29, 1, 26, 10, 28, 17, 25, 24, 20, 28, 31]
V = [14, 43, 13, 22, 20, 39, 24, 12, 58, 64, 53, 13, 62, 50, 49, 47]
C = 168"
651,rod,32,1664,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [52, 64, 51, 58, 47, 75, 34, 60, 95, 68, 33, 15, 50, 31, 57, 66, 65, 74, 40, 91, 63, 61, 21, 85, 54, 63, 67, 70, 73, 79, 18, 49]"
652,rod,2,8,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
653,ilp_assign,8,35,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 3, 21, 7, 6, 23, 10], [3, 3, 23, 7, 5, 24, 3], [15, 9, 12, 8, 5, 6, 19], [8, 14, 3, 12, 17, 18, 6], [2, 18, 22, 2, 9, 1, 18], [24, 19, 16, 14, 7, 19, 4], [12, 23, 11, 17, 17, 19, 24]]"
654,add,32,42216881326116118267064776541137,3,0,2,0,"{'ok': True, 'value': 58155410358871026097728471747700, 'stdout': '58155410358871026097728471747700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07932853698730469}",0,Compute: 14538852589717756524432117936925 + 27678028736398361742632658604212
655,mul,2,7968,672,0,18,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 96 * 83
656,mul,8,3741510350127521,0,0,3,0,"{'ok': True, 'value': 345949228, 'stdout': '345949228\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07975554466247559}",0,Compute: 86487307 * 43260803
657,lcs,32,19,4,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badcaadddcdacabacdaddbccdacddabd""
T = ""dbaaacbcaaaaaaacbdbabdaddcaabcddc"""
658,ilp_prod,32,404,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [89, 25, 28, 54, 9, 58]
consumption (rows=resources) = [[27, 6, 20, 11, 28, 8], [1, 24, 5, 4, 14, 2], [17, 5, 22, 2, 9, 13], [2, 13, 16, 27, 30, 29]]
capacity = [106, 114, 78, 103]
upper_bounds = [3, 4, 3, 3, 3, 3]"
659,add,16,11417262326523697,7,0,9082808498121858,0,"{'ok': True, 'value': 36331233992487432, 'stdout': '36331233992487432\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0812978744506836}",0,Compute: 9082808498121858 + 2334453828401839
660,knap,8,66,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 2, 1, 5, 8, 16, 13, 11]
V = [9, 19, 9, 9, 10, 10, 16, 13]
C = 34"
661,knap,16,443,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 24, 19, 2, 31, 11, 26, 18, 10, 18, 29, 25, 11, 2, 29, 20]
V = [55, 53, 54, 56, 50, 23, 49, 25, 25, 10, 60, 42, 30, 50, 10, 37]
C = 144"
662,rod,2,2,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
663,mul,16,4473872276960842585316649647100,3395305233470700,0,0,0,"{'ok': True, 'value': 5270656944604212, 'stdout': '5270656944604212\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10579729080200195}",0,Compute: 1317664236151053 * 3395305233470700
664,ilp_prod,2,17,3,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[1, 1], [3, 2]]
capacity = [10, 8]
upper_bounds = [3, 4]"
665,lcs,16,9,0,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbcdbacabaccbca""
T = ""cacdabaadcbaddb"""
666,ilp_partition,4,1,10,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 4, 5, 2]"
667,sub,4,4828,1915,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 9116 - 4288
668,sub,8,13167511,3,0,1,0,"{'ok': True, 'value': 280476584, 'stdout': '280476584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0888071060180664}",0,Compute: 70119146 - 56951635
669,add,32,126502363569855466291155923046859,5,0,0,0,"{'ok': True, 'value': 338654940179609616849156924980840, 'stdout': '338654940179609616849156924980840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09321713447570801}",0,Compute: 84663735044902404212289231245210 + 41838628524953062078866691801649
670,ilp_prod,32,371,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 82, 69, 19, 22, 51]
consumption (rows=resources) = [[23, 7, 30, 7, 13, 23], [31, 30, 4, 25, 31, 28], [24, 19, 12, 30, 10, 27], [32, 22, 17, 6, 19, 5]]
capacity = [125, 74, 86, 115]
upper_bounds = [3, 3, 4, 3, 3, 3]"
671,ilp_prod,32,312,-9,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 78, 62, 32, 25, 25]
consumption (rows=resources) = [[8, 16, 23, 31, 24, 22], [26, 22, 2, 25, 28, 28], [28, 15, 28, 16, 12, 7], [22, 1, 26, 2, 21, 26]]
capacity = [96, 118, 65, 108]
upper_bounds = [3, 4, 3, 3, 4, 4]"
672,knap,4,19,24,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 6, 3, 5]
V = [16, 10, 3, 14]
C = 10"
673,sub,2,16,-20,0,6,0,"{'ok': True, 'value': 304, 'stdout': '304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.076080322265625}",0,Compute: 76 - 60
674,lcs,2,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""c"""
675,lcs,8,4,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbadadc""
T = ""bddccdaba"""
676,add,4,17277,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 8558 + 8719
677,add,8,80166455,0,0,241,0,"{'ok': True, 'value': 166287692, 'stdout': '166287692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08022546768188477}",0,Compute: 41571923 + 38594532
678,lcs,16,9,2015,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbadabccabbadbd""
T = ""bccdaccadddacddc"""
679,ilp_assign,2,3,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1], [2, 5]]"
680,ilp_prod,32,183,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [64, 5, 16, 50, 78, 35]
consumption (rows=resources) = [[28, 28, 21, 28, 32, 8], [32, 25, 29, 25, 32, 8], [14, 21, 27, 29, 15, 30], [19, 28, 12, 7, 6, 2]]
capacity = [71, 96, 121, 80]
upper_bounds = [3, 3, 3, 3, 3, 4]"
681,rod,32,704,0,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [6, 38, 31, 88, 5, 72, 48, 59, 70, 32, 83, 10, 15, 75, 10, 81, 58, 19, 10, 38, 19, 26, 27, 28, 57, 41, 63, 76, 48, 10, 91, 42]"
682,ilp_partition,2,1,4,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 3, 3]"
683,ilp_prod,16,194,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 8, 44, 40, 38, 6]
consumption (rows=resources) = [[14, 15, 15, 14, 3, 1], [1, 8, 7, 4, 11, 12], [12, 10, 3, 12, 5, 2], [3, 15, 9, 12, 7, 6]]
capacity = [47, 41, 61, 60]
upper_bounds = [3, 3, 3, 3, 3, 3]"
684,knap,2,9,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 4]
V = [9, 5, 3]
C = 5"
685,lcs,8,3,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbadcddd""
T = ""ddabcaca"""
686,ilp_partition,16,1,10,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 46, 43, 34, 9, 39, 8, 20, 6, 7, 11, 34, 6, 37, 8, 40]"
687,lcs,2,1,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""a"""
688,lcs,32,19,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbcabbcddbcdcdbcbddcabbbddbdacd""
T = ""cacdcabaccddcbdbcdaddadddaabdaa"""
689,ilp_prod,4,55,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 11, 11]
consumption (rows=resources) = [[2, 3, 1], [1, 3, 4], [2, 3, 3]]
capacity = [15, 8, 10]
upper_bounds = [5, 3, 3]"
690,rod,16,640,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [40, 25, 17, 18, 21, 42, 30, 14, 46, 6, 23, 31, 45, 24, 19, 39]"
691,add,16,8628392725151217,0,0,35,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07432913780212402}",0,Compute: 2345138943288570 + 6283253781862647
692,ilp_partition,16,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 35, 6, 20, 33, 14, 12, 9, 24, 34, 44, 48, 15, 32, 43]"
693,add,8,134169703,3,0,-3,0,"{'ok': True, 'value': 279078372, 'stdout': '279078372\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0701444149017334}",0,Compute: 69769593 + 64400110
694,knap,2,15,7,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 2, 1]
V = [7, 5, 10]
C = 4"
695,ilp_partition,2,0,,0,-11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 5, 6]"
696,ilp_assign,8,34,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 23, 1, 18, 19, 8, 8], [2, 20, 16, 22, 11, 7, 7], [4, 1, 23, 10, 21, 9, 23], [4, 5, 12, 15, 14, 11, 23], [2, 17, 10, 3, 15, 8, 6], [19, 19, 19, 7, 17, 10, 19], [21, 19, 16, 10, 22, 9, 4]]"
697,lcs,4,3,5,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcb""
T = ""abadc"""
698,sub,8,22272882,15,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07967805862426758}",0,Compute: 62134824 - 39861942
699,add,32,74143223312629899116417099639357,1,0,0,0,"{'ok': True, 'value': 211187835670980434932431234032916, 'stdout': '211187835670980434932431234032916\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07618546485900879}",0,Compute: 52796958917745108733107808508229 + 21346264394884790383309291131128
700,lcs,8,3,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adabaabd""
T = ""bcbccdd"""
701,mul,4,41078224,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 7529 * 5456
702,add,8,84422289,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 51163681 + 33258608
703,ilp_partition,32,1,70,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [85, 1, 13, 63, 76, 49, 95, 59, 18, 50, 64, 6, 86, 18, 67, 73, 86, 51, 96, 87, 84, 41, 88, 75]"
704,ilp_assign,4,10,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4, 7, 11], [1, 11, 1, 9], [7, 10, 3, 1], [12, 7, 11, 7]]"
705,sub,8,3137275,-68091893,0,6,0,"{'ok': True, 'value': 284916672, 'stdout': '284916672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0711522102355957}",0,Compute: 71229168 - 68091893
706,add,32,125814608628255951714477829608449,94471641742272344904304806838946,0,0,0,"{'ok': True, 'value': 377886566969089379617219227355784, 'stdout': '377886566969089379617219227355784\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07476329803466797}",0,Compute: 94471641742272344904304806838946 + 31342966885983606810173022769503
707,add,32,140116640061234489771153827018782,,0,0,0,"{'ok': True, 'value': 321552936775257056159631535280984, 'stdout': '321552936775257056159631535280984\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07975554466247559}",0,Compute: 80388234193814264039907883820246 + 59728405867420225731245943198536
708,add,16,10589253398354766,0,0,0,0,"{'ok': True, 'value': 21449510083613520, 'stdout': '21449510083613520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07147622108459473}",0,Compute: 5362377520903380 + 5226875877451386
709,sub,32,8705158486605241463263599216771,-9223372036854775807,0,1,0,"{'ok': True, 'value': 313011086436900302935521435553036, 'stdout': '313011086436900302935521435553036\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08107542991638184}",0,Compute: 78252771609225075733880358888259 - 69547613122619834270616759671488
710,add,2,151,203,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 93 + 58
711,rod,4,16,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 1, 4, 11]"
712,knap,8,103,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 15, 10, 8, 4, 3, 5]
V = [13, 12, 2, 28, 11, 11, 29, 21]
C = 24"
713,lcs,32,21,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdbdadbcddaacccababdbcddcadcccb""
T = ""aabcbdaaaacbdbcccbadcdcdcdccbbcbc"""
714,ilp_assign,2,5,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [6, 3]]"
715,ilp_assign,8,37,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 16, 6, 17, 22, 7, 6], [4, 24, 14, 12, 8, 6, 13], [23, 19, 12, 23, 20, 12, 5], [18, 22, 6, 8, 9, 18, 8], [21, 3, 3, 7, 19, 14, 16], [2, 11, 8, 3, 14, 3, 11], [6, 16, 8, 12, 24, 19, 19]]"
716,add,8,117605649,81151969,0,1,0,"{'ok': True, 'value': 145814720, 'stdout': '145814720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07840561866760254}",0,Compute: 36453680 + 81151969
717,rod,16,640,60,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [40, 18, 47, 28, 16, 41, 1, 23, 35, 24, 9, 21, 15, 6, 11, 29]"
718,ilp_prod,8,35,27,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 10, 6, 9]
consumption (rows=resources) = [[3, 7, 7, 3], [4, 4, 8, 3], [2, 7, 8, 6], [1, 8, 8, 1]]
capacity = [23, 25, 21, 32]
upper_bounds = [6, 3, 3, 3]"
719,rod,16,640,13,0,37,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [40, 42, 1, 27, 8, 33, 6, 28, 23, 47, 44, 2, 26, 38, 43, 34]"
720,ilp_prod,8,72,0,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 24, 14, 16]
consumption (rows=resources) = [[7, 8, 8, 4], [2, 3, 8, 8], [1, 2, 2, 7], [7, 5, 4, 8]]
capacity = [27, 28, 32, 19]
upper_bounds = [3, 3, 3, 3]"
721,sub,2,1,1,1,0,0,"{'ok': True, 'value': 124, 'stdout': '124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08311343193054199}",0,Compute: 31 - 30
722,lcs,2,2,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""ca"""
723,sub,2,65,17,0,2,0,"{'ok': True, 'value': 356, 'stdout': '356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08542728424072266}",0,Compute: 89 - 24
724,ilp_assign,8,34,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 21, 9, 6, 6, 17, 24], [20, 6, 14, 23, 10, 13, 13], [8, 6, 14, 6, 18, 18, 11], [8, 7, 5, 10, 23, 22, 3], [21, 3, 23, 8, 4, 21, 10], [1, 5, 13, 13, 21, 2, 4], [20, 2, 5, 15, 13, 10, 8]]"
725,mul,8,8429313947724622,9,0,9,0,"{'ok': True, 'value': 373195252, 'stdout': '373195252\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0874488353729248}",0,Compute: 93298813 * 90347494
726,ilp_prod,2,24,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[2, 1], [2, 2]]
capacity = [7, 9]
upper_bounds = [3, 4]"
727,rod,32,1344,92,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [42, 34, 30, 41, 43, 42, 92, 34, 50, 1, 68, 71, 80, 44, 5, 54, 57, 74, 88, 12, 25, 72, 78, 69, 93, 46, 39, 22, 31, 43, 34, 16]"
728,add,8,108560208,14921719,0,120,0,"{'ok': True, 'value': 59686876, 'stdout': '59686876\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10164713859558105}",0,Compute: 14921719 + 93638489
729,sub,2,34,1,0,0,0,"{'ok': True, 'value': 180, 'stdout': '180\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09774184226989746}",0,Compute: 45 - 11
730,sub,16,3160936363644197,,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08937311172485352}",0,Compute: 6447158759296228 - 3286222395652031
731,sub,8,11837494,3,0,409,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07152962684631348}",0,Compute: 63366457 - 51528963
732,sub,32,30874651253098951915470933201459,6,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09917283058166504}",0,Compute: 66451817734546933206117344761325 - 35577166481447981290646411559866
733,mul,16,73464572036022864842690979886251,,0,15,0,"{'ok': True, 'value': 30331338521535276, 'stdout': '30331338521535276\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08455562591552734}",0,Compute: 7582834630383819 * 9688273003034529
734,knap,16,399,0,0,18,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 12, 13, 13, 26, 30, 6, 5, 9, 31, 23, 17, 3, 17, 13, 12]
V = [21, 60, 21, 56, 54, 20, 31, 1, 38, 5, 8, 23, 52, 57, 19, 28]
C = 119"
735,knap,16,430,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 26, 26, 12, 6, 22, 17, 1, 21, 20, 15, 7, 25, 29, 24, 22]
V = [35, 62, 28, 46, 7, 52, 53, 41, 61, 4, 16, 43, 58, 59, 14, 34]
C = 145"
736,sub,2,44,-14,0,1,0,"{'ok': True, 'value': 316, 'stdout': '316\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07756161689758301}",0,Compute: 79 - 35
737,lcs,4,3,22,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcac""
T = ""cdaca"""
738,mul,32,2769359048573666120588623814296190065559386572849760596992686344,0,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08882260322570801}",0,Compute: 31408348963597475749940755969224 * 88172703754131587979733945575881
739,rod,2,6,14,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
740,ilp_assign,4,15,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 3, 2, 11], [8, 9, 11, 4], [3, 4, 5, 6], [12, 6, 6, 12]]"
741,sub,32,19424421963160820053822143570822,2025,0,0,0,"{'ok': True, 'value': 265190660072465231759560134934404, 'stdout': '265190660072465231759560134934404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07170724868774414}",0,Compute: 66297665018116307939890033733601 - 46873243054955487886067890162779
742,add,4,14364,0,0,91,0,"{'ok': True, 'value': 35996, 'stdout': '35996\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09123563766479492}",0,Compute: 8999 + 5365
743,add,2,55,354,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 22 + 33
744,lcs,4,1,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcb""
T = ""ccda"""
745,rod,8,152,247,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 13, 1, 12, 17, 10, 8, 13]"
746,ilp_assign,16,103,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 12, 26, 34, 42, 45, 14], [27, 37, 25, 38, 26, 37, 35], [12, 44, 14, 25, 28, 46, 45], [22, 10, 15, 45, 35, 46, 32], [21, 39, 27, 11, 44, 42, 47], [37, 1, 7, 13, 25, 27, 39], [1, 14, 4, 13, 36, 32, 8]]"
747,ilp_prod,16,158,27,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 16, 9, 13, 23, 47]
consumption (rows=resources) = [[4, 4, 13, 11, 12, 3], [5, 6, 3, 12, 1, 6], [9, 3, 11, 14, 5, 6], [16, 4, 16, 8, 6, 13]]
capacity = [56, 45, 39, 40]
upper_bounds = [3, 7, 3, 3, 4, 3]"
748,rod,32,880,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [15, 55, 33, 41, 69, 68, 59, 83, 21, 4, 40, 46, 90, 60, 9, 34, 19, 49, 81, 20, 1, 93, 37, 87, 13, 79, 80, 4, 41, 14, 48, 44]"
749,knap,16,421,9,0,122,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 20, 14, 9, 21, 24, 15, 15, 12, 19, 21, 20, 3, 7, 24, 19]
V = [6, 63, 9, 61, 61, 32, 23, 42, 34, 43, 21, 64, 10, 63, 44, 23]
C = 122"
750,ilp_prod,4,18,10000,0,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6, 8]
consumption (rows=resources) = [[4, 1, 4], [4, 1, 1], [2, 4, 4]]
capacity = [16, 12, 8]
upper_bounds = [3, 3, 3]"
751,sub,4,1769,6,0,4,0,"{'ok': True, 'value': 21000, 'stdout': '21000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0789337158203125}",0,Compute: 5250 - 3481
752,mul,16,29074487092578511342312109727276,,0,15,0,"{'ok': True, 'value': 19595614029059108, 'stdout': '19595614029059108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08500146865844727}",0,Compute: 4898903507264777 * 5934896870179788
753,ilp_partition,2,1,,0,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 3, 5]"
754,sub,8,15163556,7,0,1,0,"{'ok': True, 'value': 171775520, 'stdout': '171775520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0831291675567627}",0,Compute: 42943880 - 27780324
755,rod,8,88,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 6, 5, 2, 12, 16, 8, 20]"
756,ilp_assign,8,32,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 19, 23, 4, 11, 6, 18], [21, 15, 22, 16, 1, 18, 16], [3, 1, 15, 11, 19, 12, 12], [14, 5, 23, 4, 4, 15, 22], [11, 6, 21, 3, 13, 1, 17], [15, 1, 22, 20, 5, 10, 9], [10, 2, 16, 16, 2, 19, 5]]"
757,lcs,32,20,2,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdccbcadacaacbbcbdbdaccbdbcddbbc""
T = ""bcdaabccacabacccdcccdabccbabcbbad"""
758,sub,4,1710,20,0,4,0,"{'ok': True, 'value': 22316, 'stdout': '22316\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07440924644470215}",0,Compute: 5579 - 3869
759,mul,32,5372497750510867048591818764452910557864815839974844823226468630,2025,0,0,0,"{'ok': True, 'value': 283877586258391758631861300924040, 'stdout': '283877586258391758631861300924040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07804465293884277}",0,Compute: 70969396564597939657965325231010 * 75701612393177090905749565041563
760,ilp_assign,8,40,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 7, 9, 6, 18, 10, 24], [13, 1, 7, 19, 20, 16, 1], [10, 21, 24, 9, 18, 9, 3], [13, 2, 19, 18, 23, 2, 7], [23, 16, 7, 13, 11, 10, 16], [20, 17, 9, 23, 9, 20, 6], [13, 13, 16, 18, 8, 8, 14]]"
761,knap,4,31,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 4, 2]
V = [10, 14, 15, 16]
C = 6"
762,add,32,75208752366518668572883510625281,4995932828,0,2,0,"{'ok': True, 'value': 199837313135625957777042794485868, 'stdout': '199837313135625957777042794485868\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0899362564086914}",0,Compute: 49959328283906489444260698621467 + 25249424082612179128622812003814
763,mul,2,5760,8,0,64,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 90 * 64
764,sub,4,4576,3,0,2,0,"{'ok': True, 'value': 37976, 'stdout': '37976\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08914518356323242}",0,Compute: 9494 - 4918
765,rod,4,20,15,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 3, 7, 6]"
766,sub,32,9345367715314207464629947291124,1,0,5,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08988499641418457}",0,Compute: 64871880464224716587251918501057 - 55526512748910509122621971209933
767,knap,16,455,30,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 13, 7, 9, 7, 17, 19, 2, 23, 21, 19, 3, 21, 2, 1, 25]
V = [59, 23, 49, 28, 1, 26, 19, 63, 7, 47, 50, 53, 23, 62, 21, 23]
C = 109"
768,knap,32,1604,48,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [53, 57, 38, 52, 38, 41, 17, 3, 30, 62, 26, 17, 43, 22, 35, 50, 52, 41, 10, 64, 28, 59, 45, 64, 50, 24, 20, 41, 11, 4, 57, 49]
V = [15, 75, 98, 39, 95, 36, 54, 77, 113, 115, 35, 103, 85, 8, 88, 83, 59, 89, 72, 88, 76, 40, 42, 17, 120, 48, 64, 103, 41, 6, 59, 115]
C = 601"
769,sub,16,1230308303628025,1,0,-9223372036854775808,0,"{'ok': True, 'value': 16937199537003356, 'stdout': '16937199537003356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08027958869934082}",0,Compute: 4234299884250839 - 3003991580622814
770,add,16,10713272219951728,0,0,0,0,"{'ok': True, 'value': 31038582015861796, 'stdout': '31038582015861796\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07901859283447266}",0,Compute: 7759645503965449 + 2953626715986279
771,ilp_prod,32,272,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [82, 95, 83, 94, 27, 52]
consumption (rows=resources) = [[29, 25, 30, 26, 1, 16], [1, 28, 31, 28, 30, 19], [31, 21, 22, 30, 13, 30], [3, 1, 2, 16, 3, 11]]
capacity = [92, 79, 89, 82]
upper_bounds = [3, 3, 3, 3, 3, 3]"
772,mul,8,6493744596295600,1764662400000000000,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07461285591125488}",0,Compute: 65146256 * 99679475
773,mul,32,7222984587707356668159813561929744814398594644882294050715317480,82980153435126839272400099647960,0,120,0,"{'ok': True, 'value': 348178897661558221419728728730652, 'stdout': '348178897661558221419728728730652\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07992863655090332}",0,Compute: 87044724415389555354932182182663 * 82980153435126839272400099647960
774,knap,4,26,7,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 3, 8, 3]
V = [15, 4, 4, 11]
C = 11"
775,add,32,143511932640650949853961314205812,65125839128230189349500065846575,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07606744766235352}",0,Compute: 78386093512420760504461248359237 + 65125839128230189349500065846575
776,knap,32,1735,,0,1588,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 58, 23, 13, 23, 41, 24, 21, 33, 7, 48, 40, 36, 12, 56, 35, 12, 17, 41, 58, 18, 29, 14, 55, 55, 7, 37, 61, 18, 6, 39, 50]
V = [7, 128, 117, 14, 98, 83, 41, 115, 83, 109, 118, 76, 33, 1, 47, 127, 77, 44, 16, 18, 12, 100, 57, 117, 101, 75, 21, 28, 84, 96, 100, 9]
C = 498"
777,sub,16,2724585430338931,-1,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11091732978820801}",0,Compute: 4919547920281636 - 2194962489942705
778,rod,8,80,11,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 9, 11, 2, 3, 5, 5, 8]"
779,add,32,158635874984284429381173770712401,1,0,88473023441812017588187180663823,0,"{'ok': True, 'value': 353892093767248070352748722655292, 'stdout': '353892093767248070352748722655292\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0873711109161377}",0,Compute: 88473023441812017588187180663823 + 70162851542472411792986590048578
780,lcs,2,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""b"""
781,ilp_prod,4,20,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 5, 4]
consumption (rows=resources) = [[3, 4, 2], [2, 2, 1], [3, 4, 2]]
capacity = [10, 8, 15]
upper_bounds = [3, 3, 5]"
782,rod,2,6,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
783,rod,2,2,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 2]"
784,knap,16,362,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 3, 1, 27, 19, 1, 7, 9, 19, 7, 3, 18, 4, 31, 32, 4]
V = [27, 25, 7, 45, 36, 48, 29, 42, 42, 64, 5, 18, 17, 25, 31, 7]
C = 103"
785,knap,8,44,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 9, 4, 1, 1, 12, 6, 2]
V = [21, 11, 3, 3, 2, 17, 16, 2]
C = 24"
786,rod,4,22,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 11, 2, 3]"
787,sub,16,119178602003016,3,0,163842244926824963,0,"{'ok': True, 'value': 32088979707299852, 'stdout': '32088979707299852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09413838386535645}",0,Compute: 8022244926824963 - 7903066324821947
788,ilp_prod,32,343,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [37, 27, 29, 6, 27, 95]
consumption (rows=resources) = [[21, 31, 16, 4, 18, 17], [25, 2, 9, 23, 32, 27], [9, 27, 1, 14, 19, 23], [29, 18, 2, 12, 22, 10]]
capacity = [85, 107, 95, 98]
upper_bounds = [3, 3, 5, 4, 3, 3]"
789,ilp_prod,16,122,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 28, 3, 11, 38, 33]
consumption (rows=resources) = [[2, 11, 14, 12, 12, 6], [3, 12, 3, 2, 2, 5], [10, 6, 7, 7, 5, 13], [13, 11, 14, 3, 13, 12]]
capacity = [41, 41, 39, 46]
upper_bounds = [3, 3, 3, 3, 3, 3]"
790,sub,16,6434924397773364,8863787197982517,0,6,0,"{'ok': True, 'value': 3455148791930068, 'stdout': '3455148791930068\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08428168296813965}",0,Compute: 8863787197982517 - 2428862800209153
791,ilp_assign,2,3,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [2, 4]]"
792,lcs,16,9,-8,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badbbacacabadbca""
T = ""dabbbdcbddcaadac"""
793,rod,2,6,14,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
794,lcs,16,8,5,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaadcbbbddddaacb""
T = ""bccccacbdbdbbdac"""
795,ilp_prod,32,444,-8,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 48, 91, 89, 47, 80]
consumption (rows=resources) = [[24, 16, 13, 31, 18, 9], [1, 16, 13, 13, 13, 26], [5, 1, 15, 6, 28, 4], [31, 14, 5, 26, 20, 23]]
capacity = [73, 91, 68, 83]
upper_bounds = [3, 4, 4, 3, 3, 3]"
796,rod,4,44,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 2, 7, 3]"
797,mul,16,7303359789467543459737206041826,,0,0,0,"{'ok': True, 'value': 20220547783537124, 'stdout': '20220547783537124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10073566436767578}",0,Compute: 5055136945884281 * 1444740244952946
798,lcs,2,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""a"""
799,ilp_assign,2,7,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 2], [6, 6]]"
800,ilp_assign,4,15,1000,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 4, 4, 9], [11, 1, 2, 4], [5, 3, 12, 6], [4, 3, 11, 11]]"
801,ilp_assign,16,66,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 38, 18, 16, 20, 22, 25], [6, 26, 33, 38, 48, 39, 9], [39, 23, 19, 8, 15, 26, 22], [11, 11, 8, 6, 8, 35, 11], [18, 22, 17, 43, 31, 12, 25], [47, 48, 43, 1, 26, 2, 42], [43, 30, 7, 7, 20, 35, 39]]"
802,ilp_partition,4,3,22,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 9, 7, 1]"
803,rod,4,40,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 12, 12, 11]"
804,sub,32,261815794500325695286395028292,0,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08976340293884277}",0,Compute: 62461765550039857774746985578987 - 62199949755539532079460590550695
805,knap,16,417,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 21, 20, 22, 9, 1, 15, 20, 12, 6, 7, 29, 11, 27, 12, 14]
V = [40, 28, 44, 60, 60, 9, 45, 35, 21, 12, 43, 25, 41, 34, 51, 44]
C = 118"
806,ilp_prod,2,18,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 3]
consumption (rows=resources) = [[2, 3], [3, 3]]
capacity = [10, 9]
upper_bounds = [3, 3]"
807,mul,8,2671817987602080,67901,0,0,0,"{'ok': True, 'value': 271604056, 'stdout': '271604056\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07653284072875977}",0,Compute: 67901014 * 39348720
808,sub,8,47039835,8,0,0,0,"{'ok': True, 'value': 361026108, 'stdout': '361026108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2183377742767334}",0,Compute: 90256527 - 43216692
809,ilp_assign,4,21,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 12, 9, 9], [5, 12, 11, 5], [9, 7, 2, 12], [7, 8, 4, 2]]"
810,ilp_prod,16,85,14,0,-4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 35, 36, 7, 4, 36]
consumption (rows=resources) = [[13, 9, 1, 6, 10, 9], [14, 3, 12, 2, 12, 14], [4, 15, 12, 15, 12, 14], [3, 2, 11, 6, 10, 8]]
capacity = [40, 41, 32, 64]
upper_bounds = [3, 3, 3, 3, 3, 3]"
811,ilp_assign,4,22,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 4, 11, 5], [10, 5, 12, 3], [12, 11, 5, 6], [10, 12, 5, 9]]"
812,mul,2,3339,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 53 * 63
813,mul,4,32400212,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 4316 * 7507
814,sub,32,8048925463601688388935809388482,5399799,0,53997999579221591868869088037745,0,"{'ok': True, 'value': 215991998316886367475476352150980, 'stdout': '215991998316886367475476352150980\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09213781356811523}",0,Compute: 53997999579221591868869088037745 - 45949074115619903479933278649263
815,add,4,11370,6142,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 3862 + 7508
816,rod,32,1184,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [37, 8, 25, 83, 73, 6, 6, 40, 95, 56, 18, 35, 1, 19, 34, 24, 73, 81, 83, 42, 89, 65, 59, 42, 75, 71, 46, 85, 3, 79, 55, 85]"
817,ilp_prod,4,36,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 9, 4]
consumption (rows=resources) = [[3, 2, 3], [4, 3, 1], [1, 1, 2]]
capacity = [9, 16, 15]
upper_bounds = [3, 4, 3]"
818,ilp_assign,4,8,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 6, 5, 1], [8, 9, 3, 7], [8, 2, 9, 5], [2, 4, 2, 7]]"
819,mul,2,2030,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 58 * 35
820,ilp_partition,32,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [29, 35, 6, 81, 7, 49, 37, 12, 23, 80, 10, 43, 42, 73, 91, 12, 79, 46, 20, 35, 42, 34, 95, 20]"
821,add,4,10036,8124,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08476138114929199}",0,Compute: 1912 + 8124
822,sub,2,68,68,1,36,0,"{'ok': True, 'value': 312, 'stdout': '312\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07581710815429688}",0,Compute: 78 - 10
823,sub,4,5802,7155,0,0,0,"{'ok': True, 'value': 28620, 'stdout': '28620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08443379402160645}",0,Compute: 7155 - 1353
824,add,8,154186263,60258851,0,0,0,"{'ok': True, 'value': 241035404, 'stdout': '241035404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08146858215332031}",0,Compute: 60258851 + 93927412
825,knap,8,119,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 7, 12, 16, 11, 2, 2]
V = [30, 9, 30, 32, 14, 18, 17, 10]
C = 29"
826,mul,16,15850802046739981526026552253220,,0,0,0,"{'ok': True, 'value': 14210216231087984, 'stdout': '14210216231087984\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0755302906036377}",0,Compute: 3552554057771996 * 4461804602821695
827,rod,32,1824,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [57, 10, 77, 49, 89, 1, 66, 35, 12, 86, 59, 29, 43, 34, 85, 75, 11, 78, 63, 5, 48, 71, 30, 2, 66, 23, 73, 4, 7, 8, 33, 6]"
828,ilp_assign,16,65,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 1, 24, 46, 29, 27, 20], [21, 23, 11, 20, 37, 32, 11], [2, 28, 37, 36, 47, 15, 22], [7, 24, 22, 37, 16, 23, 7], [42, 1, 44, 17, 35, 30, 42], [26, 32, 1, 22, 18, 18, 8], [19, 21, 41, 22, 22, 17, 33]]"
829,rod,2,6,14,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 6]"
830,ilp_prod,2,10,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 5]
consumption (rows=resources) = [[2, 3], [3, 3]]
capacity = [10, 6]
upper_bounds = [3, 3]"
831,lcs,8,6,0,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcbcbab""
T = ""dcbacbcb"""
832,mul,2,4794,94,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 51 * 94
833,sub,16,5600471795656564,267,0,8275317612720014,0,"{'ok': True, 'value': 33101270450880100, 'stdout': '33101270450880100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07700610160827637}",0,Compute: 8275317612720025 - 2674845817063461
834,rod,32,768,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [2, 48, 68, 9, 89, 19, 1, 62, 51, 29, 85, 23, 88, 41, 2, 92, 90, 3, 33, 62, 50, 30, 93, 90, 4, 51, 10, 81, 94, 17, 19, 55]"
835,sub,2,18,1,0,4,0,"{'ok': True, 'value': 344, 'stdout': '344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11343979835510254}",0,Compute: 86 - 68
836,ilp_assign,4,20,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 3, 9, 11], [2, 10, 10, 10], [7, 5, 7, 8], [12, 1, 11, 12]]"
837,ilp_prod,4,37,4,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8, 7]
consumption (rows=resources) = [[3, 1, 1], [1, 4, 1], [2, 1, 3]]
capacity = [15, 12, 9]
upper_bounds = [4, 3, 3]"
838,sub,8,43729563,7,0,1,0,"{'ok': True, 'value': 294989460, 'stdout': '294989460\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08917856216430664}",0,Compute: 73747365 - 30017802
839,ilp_assign,8,39,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 23, 11, 2, 15, 7, 22], [4, 15, 5, 13, 13, 7, 11], [11, 8, 16, 15, 13, 24, 1], [15, 12, 21, 21, 16, 11, 2], [15, 13, 22, 20, 23, 19, 22], [16, 16, 23, 22, 10, 2, 17], [15, 8, 3, 21, 10, 21, 6]]"
840,ilp_assign,4,17,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 5, 9, 5], [10, 10, 5, 8], [7, 2, 11, 4], [5, 11, 11, 3]]"
841,sub,8,11701128,7,0,1,0,"{'ok': True, 'value': 385797408, 'stdout': '385797408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09122180938720703}",0,Compute: 96449352 - 84748224
842,lcs,2,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""a"""
843,sub,8,10394774,0,0,1,0,"{'ok': True, 'value': 226518928, 'stdout': '226518928\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07159090042114258}",0,Compute: 56629732 - 46234958
844,ilp_prod,4,36,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 3]
consumption (rows=resources) = [[1, 4, 3], [4, 4, 4], [1, 2, 2]]
capacity = [8, 14, 14]
upper_bounds = [3, 3, 3]"
845,mul,2,312,336,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08822822570800781}",0,Compute: 24 * 13
846,mul,4,9897216,4,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 4208 * 2352
847,sub,32,9997141363527051442034074092545,,0,0,0,"{'ok': True, 'value': 116239598733692317660998886009504, 'stdout': '116239598733692317660998886009504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08132123947143555}",0,Compute: 29059899683423079415249721502376 - 19062758319896027973215647409831
848,ilp_prod,8,92,0,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 12, 4, 23]
consumption (rows=resources) = [[5, 5, 1, 6], [5, 1, 8, 2], [3, 7, 8, 5], [8, 1, 7, 1]]
capacity = [25, 17, 27, 22]
upper_bounds = [3, 3, 3, 4]"
849,add,2,82,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 34 + 48
850,lcs,16,9,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbbaacddcccadba""
T = ""bbcbcabdcdbdacca"""
851,add,2,137,0,0,0,0,"{'ok': True, 'value': 360, 'stdout': '360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10140419006347656}",0,Compute: 90 + 47
852,rod,4,18,4,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 9, 3, 3]"
853,rod,2,6,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
854,rod,2,2,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
855,knap,4,19,10,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 1, 6]
V = [3, 14, 5, 4]
C = 8"
856,knap,32,1765,437,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 48, 41, 49, 47, 25, 1, 11, 55, 60, 25, 44, 57, 6, 19, 31, 1, 17, 6, 18, 26, 60, 3, 20, 50, 2, 33, 10, 14, 36, 10, 43]
V = [108, 17, 102, 118, 43, 2, 91, 107, 88, 26, 51, 110, 66, 9, 54, 38, 2, 105, 108, 89, 60, 113, 66, 55, 19, 108, 84, 45, 35, 38, 104, 101]
C = 437"
857,ilp_partition,8,0,,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 15, 23, 14, 5, 6, 19, 2]"
858,ilp_assign,4,15,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 8, 4, 11], [5, 9, 1, 5], [5, 3, 5, 11], [9, 5, 8, 3]]"
859,knap,32,1682,589,0,203,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 33, 43, 12, 19, 19, 26, 35, 52, 62, 25, 57, 32, 60, 35, 62, 41, 34, 13, 58, 41, 41, 47, 4, 9, 43, 57, 41, 61, 1, 42, 55]
V = [52, 100, 53, 94, 16, 89, 69, 88, 41, 3, 66, 102, 82, 4, 33, 101, 11, 78, 35, 100, 100, 114, 39, 84, 109, 65, 104, 17, 69, 108, 78, 1]
C = 589"
860,ilp_prod,32,230,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 8, 89, 5, 36, 11]
consumption (rows=resources) = [[15, 25, 6, 30, 21, 17], [4, 3, 7, 13, 12, 28], [8, 8, 31, 5, 32, 12], [7, 2, 28, 21, 12, 11]]
capacity = [86, 96, 101, 72]
upper_bounds = [5, 3, 3, 3, 3, 3]"
861,mul,8,4367565696425228,45661214895641211,0,0,0,"{'ok': True, 'value': 182664592, 'stdout': '182664592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10046005249023438}",0,Compute: 45666148 * 95641211
862,lcs,8,4,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcbbacd""
T = ""dcdadcab"""
863,ilp_partition,32,0,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 89, 74, 25, 36, 64, 54, 39, 26, 56, 56, 45, 32, 8, 91, 78, 49, 91, 73, 43, 77, 65, 61, 40]"
864,lcs,2,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""b"""
865,ilp_assign,8,34,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 20, 12, 12, 11, 5, 11], [11, 18, 23, 11, 21, 2, 11], [15, 6, 3, 1, 24, 1, 16], [22, 4, 7, 13, 20, 17, 14], [20, 4, 9, 17, 14, 2, 15], [7, 2, 18, 1, 23, 24, 10], [14, 3, 11, 12, 19, 13, 2]]"
866,add,8,96162909,3,0,0,0,"{'ok': True, 'value': 60209656, 'stdout': '60209656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08885884284973145}",0,Compute: 15052414 + 81110495
867,knap,32,1962,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [59, 48, 52, 51, 31, 16, 5, 42, 23, 1, 60, 22, 9, 16, 54, 50, 46, 57, 20, 43, 29, 38, 57, 53, 53, 48, 24, 36, 18, 43, 32, 12]
V = [30, 28, 60, 46, 85, 109, 115, 26, 121, 33, 69, 120, 100, 71, 112, 110, 29, 128, 11, 111, 60, 94, 51, 109, 39, 113, 59, 105, 95, 118, 117, 65]
C = 574"
868,ilp_partition,32,1,,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 54, 5, 81, 64, 95, 81, 95, 12, 60, 79, 4, 17, 14, 78, 17, 2, 78, 37, 7, 46, 5, 26, 72]"
869,rod,4,16,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 6, 12, 3]"
870,add,2,108,170,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 85 + 23
871,add,8,103375727,82578409,0,20797318,0,"{'ok': True, 'value': 330313636, 'stdout': '330313636\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0755610466003418}",0,Compute: 82578409 + 20797318
872,rod,4,32,14,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 4, 12, 4]"
873,ilp_partition,2,2,,0,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 5, 1]"
874,ilp_partition,32,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 28, 90, 16, 12, 4, 83, 69, 27, 43, 91, 50, 88, 50, 18, 30, 58, 27, 87, 73, 9, 52, 4, 28]"
875,sub,8,85231201,7,0,35,0,"{'ok': True, 'value': 382271584, 'stdout': '382271584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07715296745300293}",0,Compute: 95567896 - 10336695
876,ilp_prod,16,375,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 24, 48, 34, 35, 13]
consumption (rows=resources) = [[12, 5, 15, 5, 3, 9], [5, 2, 5, 4, 6, 9], [1, 5, 2, 2, 6, 7], [8, 9, 13, 5, 11, 8]]
capacity = [59, 61, 35, 63]
upper_bounds = [4, 7, 3, 10, 5, 5]"
877,ilp_prod,8,95,27,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 19, 15, 15]
consumption (rows=resources) = [[1, 1, 5, 6], [4, 4, 8, 8], [8, 1, 4, 2], [6, 5, 7, 4]]
capacity = [21, 24, 24, 27]
upper_bounds = [3, 5, 3, 3]"
878,ilp_prod,32,303,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [61, 44, 42, 47, 30, 67]
consumption (rows=resources) = [[30, 18, 2, 23, 14, 31], [29, 10, 10, 7, 21, 7], [23, 22, 8, 17, 21, 9], [24, 11, 23, 10, 14, 22]]
capacity = [71, 102, 110, 128]
upper_bounds = [3, 3, 5, 3, 4, 3]"
879,rod,32,496,66,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [12, 8, 34, 62, 43, 76, 16, 7, 2, 80, 2, 3, 72, 2, 45, 66, 63, 66, 48, 31, 52, 79, 95, 55, 83, 58, 20, 46, 95, 91, 84, 57]"
880,lcs,2,0,0,1,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""a"""
881,sub,4,549,7,0,0,0,"{'ok': True, 'value': 14924, 'stdout': '14924\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08470940589904785}",0,Compute: 3731 - 3182
882,ilp_assign,8,41,1628,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 4, 11, 2, 7, 24, 20], [12, 6, 18, 19, 24, 10, 16], [18, 6, 14, 12, 12, 1, 6], [6, 20, 12, 23, 23, 16, 21], [15, 22, 18, 7, 4, 11, 21], [24, 1, 14, 8, 15, 10, 14], [9, 3, 18, 7, 15, 4, 21]]"
883,add,16,11115970919018396,9003822674386723,0,0,0,"{'ok': True, 'value': 8448592978526692, 'stdout': '8448592978526692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09038162231445312}",0,Compute: 2112148244631673 + 9003822674386723
884,knap,16,404,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 14, 27, 8, 27, 9, 25, 27, 28, 30, 31, 16, 28, 16, 5, 2]
V = [42, 45, 30, 35, 54, 41, 22, 45, 31, 25, 17, 63, 21, 22, 19, 29]
C = 149"
885,sub,32,2724926831775228570181549337024,7,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09634017944335938}",0,Compute: 27929726470080432790574163469873 - 25204799638305204220392614132849
886,lcs,32,19,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbddddbcdddcaddbacbcadcababadbb""
T = ""bbdbbccdabbcdaddabadbdcdabccadbda"""
887,sub,2,3,0,0,2,0,"{'ok': True, 'value': 352, 'stdout': '352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07850813865661621}",0,Compute: 88 - 85
888,rod,32,2784,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [87, 43, 12, 67, 41, 1, 38, 18, 21, 91, 85, 37, 38, 73, 62, 67, 2, 3, 12, 83, 8, 12, 43, 60, 18, 71, 30, 21, 12, 19, 20, 33]"
889,ilp_assign,2,7,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 6], [1, 6]]"
890,mul,2,966,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 23 * 42
891,rod,8,160,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 14, 18, 13, 4, 10, 3, 20]"
892,rod,32,2496,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [78, 84, 30, 13, 69, 84, 64, 25, 9, 70, 60, 27, 1, 28, 50, 94, 31, 18, 5, 38, 69, 88, 25, 37, 44, 20, 45, 6, 87, 69, 84, 45]"
893,lcs,4,2,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabc""
T = ""cdbac"""
894,add,16,5568008211364340,4306062114876244,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08890414237976074}",0,Compute: 1261946096488096 + 4306062114876244
895,sub,32,14918618177520544690477522440220,0,0,0,0,"{'ok': True, 'value': 115412134154548809993554594117324, 'stdout': '115412134154548809993554594117324\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08846831321716309}",0,Compute: 28853033538637202498388648529331 - 13934415361116657807911126089111
896,add,16,3240493449722288,3,0,132,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08460474014282227}",0,Compute: 1049222763488403 + 2191270686233885
897,add,4,5283,7,0,1,0,"{'ok': True, 'value': 13460, 'stdout': '13460\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08648371696472168}",0,Compute: 3365 + 1918
898,ilp_prod,8,93,25,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 9, 14, 23]
consumption (rows=resources) = [[3, 4, 2, 7], [4, 5, 4, 3], [2, 6, 1, 8], [5, 1, 1, 4]]
capacity = [17, 27, 18, 21]
upper_bounds = [4, 3, 6, 3]"
899,add,2,169,155,0,7,0,"{'ok': True, 'value': 296, 'stdout': '296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08010125160217285}",0,Compute: 74 + 95
900,rod,8,60,23,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [1, 15, 8, 13, 18, 3, 14, 20]"
901,lcs,8,4,2,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacbacac""
T = ""addcccbd"""
902,sub,8,36005938,1,0,1,0,"{'ok': True, 'value': 255292568, 'stdout': '255292568\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09199404716491699}",0,Compute: 63823142 - 27817204
903,ilp_prod,4,22,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 11, 9]
consumption (rows=resources) = [[1, 4, 1], [4, 3, 3], [3, 2, 2]]
capacity = [14, 8, 14]
upper_bounds = [3, 3, 3]"
904,add,2,77,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 25 + 52
905,ilp_partition,8,0,2,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 8, 9, 8, 17, 13, 19, 2]"
906,knap,32,1648,78,0,32,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 32, 48, 11, 63, 14, 19, 19, 43, 56, 13, 12, 62, 60, 50, 13, 56, 64, 11, 32, 46, 16, 55, 60, 18, 22, 17, 32, 52, 62, 52, 51]
V = [101, 92, 46, 116, 8, 34, 1, 116, 56, 96, 112, 121, 49, 13, 35, 42, 9, 10, 111, 41, 18, 61, 28, 64, 62, 78, 62, 20, 92, 116, 75, 41]
C = 594"
907,lcs,8,4,42,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbabccba""
T = ""cbdddab"""
908,rod,32,3072,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [96, 10, 35, 17, 85, 92, 36, 14, 87, 90, 76, 48, 87, 39, 2, 43, 56, 76, 42, 66, 95, 63, 87, 77, 46, 75, 27, 90, 69, 33, 79, 87]"
909,mul,16,35500741075100915155823480591504,9,0,9000143725426352,0,"{'ok': True, 'value': 36000574901705408, 'stdout': '36000574901705408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08217787742614746}",0,Compute: 9000143725426352 * 3944463795040027
910,ilp_assign,4,20,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 10, 8, 6], [10, 1, 9, 6], [12, 7, 12, 12], [1, 10, 11, 8]]"
911,ilp_prod,32,501,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 89, 6, 41, 92, 50]
consumption (rows=resources) = [[19, 3, 16, 5, 3, 17], [20, 28, 28, 3, 14, 15], [27, 14, 20, 9, 12, 10], [6, 2, 10, 28, 32, 30]]
capacity = [82, 128, 76, 105]
upper_bounds = [3, 4, 3, 3, 3, 3]"
912,ilp_partition,32,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 81, 34, 10, 62, 43, 83, 73, 70, 67, 24, 21, 16, 85, 64, 62, 55, 12, 89, 67, 54, 28, 40, 73]"
913,knap,4,26,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 4, 1]
V = [15, 6, 7, 13]
C = 7"
914,ilp_partition,4,1,237,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 2, 2, 12]"
915,ilp_prod,2,18,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[2, 2], [2, 2]]
capacity = [9, 6]
upper_bounds = [3, 3]"
916,ilp_assign,32,145,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[66, 83, 7, 47, 91, 35, 21], [6, 29, 32, 4, 31, 54, 66], [2, 13, 50, 14, 42, 32, 5], [70, 20, 28, 60, 32, 20, 37], [86, 63, 19, 8, 70, 70, 34], [57, 87, 84, 37, 75, 68, 71], [6, 55, 89, 82, 35, 77, 25]]"
917,rod,8,46,100,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 1, 18, 23, 18, 16, 19, 20]"
918,ilp_partition,2,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 1, 3]"
919,lcs,2,0,,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dc""
T = ""b"""
920,lcs,32,21,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdccbaaaaaddcdbaaddaaacbdcdcdda""
T = ""cbcdcaaadccbbbabaaacbdbddaccdcbd"""
921,ilp_assign,4,15,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6, 7, 6], [10, 4, 5, 5], [5, 8, 10, 3], [10, 6, 3, 7]]"
922,ilp_assign,8,30,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 4, 3, 7, 7, 7, 1], [6, 14, 21, 16, 15, 11, 6], [22, 7, 14, 3, 13, 23, 12], [12, 3, 17, 22, 15, 17, 22], [18, 23, 1, 7, 9, 12, 12], [1, 7, 8, 14, 11, 12, 22], [20, 15, 15, 23, 24, 24, 4]]"
923,ilp_prod,2,15,8,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[1, 3], [2, 2]]
capacity = [7, 8]
upper_bounds = [4, 3]"
924,ilp_assign,32,69,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 83, 9, 11, 37, 40, 83], [23, 37, 7, 51, 34, 56, 35], [28, 91, 50, 20, 13, 9, 26], [35, 28, 86, 76, 2, 81, 35], [34, 50, 96, 83, 58, 9, 78], [72, 34, 74, 2, 23, 79, 16], [3, 18, 11, 36, 26, 3, 65]]"
925,knap,16,447,17,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 29, 17, 11, 13, 3, 13, 28, 17, 25, 15, 19, 24, 7, 15, 17]
V = [15, 62, 54, 51, 48, 46, 60, 35, 54, 31, 48, 24, 22, 22, 19, 11]
C = 138"
926,ilp_partition,8,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 9, 4, 2, 12, 16, 12, 18]"
927,sub,16,6163632578733924,-8,0,3,0,"{'ok': True, 'value': 32671396623129900, 'stdout': '32671396623129900\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07085156440734863}",0,Compute: 8167849155782475 - 2004216577048551
928,sub,2,29,7,0,0,0,"{'ok': True, 'value': 188, 'stdout': '188\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0757136344909668}",0,Compute: 47 - 18
929,rod,16,496,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [31, 48, 14, 25, 37, 31, 24, 2, 33, 24, 17, 35, 13, 18, 38, 42]"
930,ilp_assign,4,13,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 6, 6, 10], [7, 12, 7, 2], [7, 1, 7, 10], [4, 2, 4, 12]]"
931,add,32,83155979998209919650813798734473,4632227370350,0,46322273703502303155433615079208,0,"{'ok': True, 'value': 185289094814009212621734460316832, 'stdout': '185289094814009212621734460316832\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07650279998779297}",0,Compute: 46322273703502303155433615079208 + 36833706294707616495380183655265
932,sub,32,42401426228331881436667312895871,-44866445345746986586760894664240,0,87267871574078868023428207560102,0,"{'ok': True, 'value': 349071486296315472093712830240444, 'stdout': '349071486296315472093712830240444\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10225725173950195}",0,Compute: 87267871574078868023428207560111 - 44866445345746986586760894664240
933,add,4,11567,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 5069 + 6498
934,mul,32,3564127658894536979514734542265254098452616950186578336638252674,-3,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07067108154296875}",0,Compute: 66484261124521078244873473956458 * 53608592448957765275912916693853
935,mul,4,12819960,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 2980 * 4302
936,ilp_prod,32,452,-1,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 7, 48, 78, 70, 76]
consumption (rows=resources) = [[9, 8, 31, 14, 1, 8], [20, 22, 9, 17, 3, 30], [21, 8, 13, 4, 14, 17], [17, 17, 13, 6, 22, 31]]
capacity = [114, 75, 113, 84]
upper_bounds = [3, 3, 3, 4, 3, 3]"
937,mul,4,88544802,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 9062 * 9771
938,knap,8,93,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 4, 11, 8, 11, 11, 7, 4]
V = [27, 14, 27, 9, 6, 25, 2, 25]
C = 33"
939,knap,2,9,5,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 1]
V = [3, 9, 6]
C = 3"
940,lcs,4,1,20,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbb""
T = ""cdc"""
941,knap,4,31,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 6, 6]
V = [15, 11, 16, 13]
C = 13"
942,ilp_partition,8,1,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 8, 20, 20, 3, 21, 16, 6]"
943,rod,16,336,25,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [21, 30, 41, 32, 37, 25, 34, 47, 42, 8, 33, 2, 38, 42, 13, 41]"
944,ilp_partition,2,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 4, 3]"
945,rod,4,28,4,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 8, 10, 8]"
946,add,4,16161,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 9324 + 6837
947,ilp_prod,16,312,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 37, 34, 24, 37, 3]
consumption (rows=resources) = [[11, 14, 3, 12, 12, 5], [4, 9, 7, 13, 5, 10], [11, 5, 3, 7, 12, 16], [4, 2, 2, 13, 6, 9]]
capacity = [64, 63, 42, 56]
upper_bounds = [3, 4, 9, 4, 3, 3]"
948,ilp_partition,8,1,17,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 21, 1, 7, 17, 12, 23, 15]"
949,sub,8,34035997,,0,12,0,"{'ok': True, 'value': 181724472, 'stdout': '181724472\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07678627967834473}",0,Compute: 45431118 - 11395121
950,rod,4,36,20,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 12, 3, 6]"
951,lcs,32,19,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acddbdadcaaaadbdcdcaccdccdcbbadb""
T = ""babcbdaadaddbbabcddccaddbcdcdbb"""
952,ilp_prod,4,50,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 10, 4]
consumption (rows=resources) = [[4, 1, 1], [1, 1, 3], [1, 3, 3]]
capacity = [10, 16, 15]
upper_bounds = [3, 5, 5]"
953,rod,4,14,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 7, 7, 6]"
954,ilp_partition,2,1,,0,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 4, 1]"
955,add,32,55724052413791696757294480950750,1416529589787680,0,0,0,"{'ok': True, 'value': 56661183591507218036502168154864, 'stdout': '56661183591507218036502168154864\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07291984558105469}",0,Compute: 14165295897876804509125542038716 + 41558756515914892248168938912034
956,lcs,8,4,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbcdcac""
T = ""adccdab"""
957,ilp_assign,4,7,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1, 4, 2], [2, 2, 12, 1], [10, 11, 2, 1], [5, 7, 3, 6]]"
958,rod,8,96,1,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 19, 2, 6, 14, 8, 16, 21]"
959,ilp_prod,16,119,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 17, 3, 11, 29, 21]
consumption (rows=resources) = [[3, 12, 11, 5, 4, 2], [3, 15, 13, 7, 16, 5], [1, 6, 1, 11, 13, 11], [13, 12, 13, 9, 6, 15]]
capacity = [56, 51, 50, 55]
upper_bounds = [4, 3, 3, 4, 3, 3]"
960,ilp_assign,32,102,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[59, 72, 71, 85, 8, 50, 4], [48, 15, 58, 87, 20, 60, 94], [39, 55, 1, 16, 19, 42, 62], [83, 37, 41, 79, 51, 61, 26], [77, 29, 26, 20, 21, 60, 96], [3, 54, 40, 36, 29, 42, 60], [90, 56, 34, 32, 64, 29, 80]]"
961,ilp_partition,32,0,0,1,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [82, 10, 93, 53, 35, 59, 54, 12, 49, 91, 61, 94, 82, 60, 72, 66, 73, 49, 1, 95, 88, 4, 89, 76]"
962,knap,8,70,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 10, 9, 11, 12, 14, 12, 7]
V = [1, 32, 9, 12, 25, 1, 12, 2]
C = 38"
963,ilp_partition,8,1,6,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 9, 21, 22, 1, 5, 6, 6]"
964,mul,32,3129633263577989188807089292526796491046191011704888107030449323,0,0,120,0,"{'ok': True, 'value': 136022456939638888119032318755276, 'stdout': '136022456939638888119032318755276\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08210015296936035}",0,Compute: 34005614234909722029758079688819 * 92032840282154007291771566992617
965,lcs,4,1,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccda""
T = ""bab"""
966,ilp_prod,4,25,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4, 3]
consumption (rows=resources) = [[2, 3, 1], [3, 2, 4], [1, 3, 3]]
capacity = [12, 16, 14]
upper_bounds = [5, 4, 4]"
967,knap,16,463,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 24, 3, 14, 11, 21, 20, 30, 7, 1, 12, 24, 13, 11, 18, 11]
V = [15, 25, 49, 56, 40, 27, 9, 37, 64, 60, 30, 7, 34, 42, 51, 20]
C = 120"
968,ilp_prod,2,21,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4]
consumption (rows=resources) = [[2, 2], [3, 2]]
capacity = [10, 9]
upper_bounds = [3, 4]"
969,lcs,8,3,22,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddcdbba""
T = ""cbbbbbd"""
970,ilp_partition,16,0,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 10, 16, 41, 6, 23, 16, 10, 7, 1, 41, 2, 4, 11, 8, 4]"
971,rod,2,10,17,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 6]"
972,add,16,11052516067427131,9942062312475519,0,34,0,"{'ok': True, 'value': 4441815019806448, 'stdout': '4441815019806448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08408427238464355}",0,Compute: 1110453754951612 + 9942062312475519
973,ilp_prod,2,30,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[3, 1], [3, 1]]
capacity = [6, 7]
upper_bounds = [3, 6]"
974,ilp_assign,8,45,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 3, 17, 24, 20, 7, 14], [11, 16, 14, 21, 13, 22, 21], [1, 19, 23, 24, 17, 21, 18], [4, 6, 13, 18, 5, 9, 7], [16, 24, 5, 11, 24, 24, 18], [21, 4, 6, 20, 23, 21, 16], [1, 10, 2, 22, 18, 4, 9]]"
975,rod,4,16,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 8, 10, 9]"
976,knap,32,1723,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 10, 62, 28, 64, 64, 2, 34, 15, 7, 25, 42, 46, 8, 62, 45, 17, 34, 39, 45, 1, 6, 23, 50, 2, 59, 43, 39, 25, 45, 8, 29]
V = [77, 23, 34, 52, 10, 22, 34, 54, 40, 106, 56, 100, 9, 117, 55, 127, 47, 77, 95, 79, 85, 36, 86, 55, 118, 17, 111, 115, 11, 23, 88, 43]
C = 494"
977,knap,2,7,5,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 5]
V = [7, 2, 5]
C = 7"
978,ilp_partition,4,8,11,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 11, 1, 11]"
979,add,4,13226,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 9405 + 3821
980,ilp_prod,4,27,10000000,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 12, 3]
consumption (rows=resources) = [[3, 4, 4], [2, 3, 3], [4, 4, 1]]
capacity = [12, 16, 10]
upper_bounds = [3, 3, 3]"
981,mul,8,1219642142386080,1,0,0,0,"{'ok': True, 'value': 226248720, 'stdout': '226248720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07735085487365723}",0,Compute: 56562180 * 21562856
982,add,8,135948987,2,0,0,0,"{'ok': True, 'value': 254893796, 'stdout': '254893796\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08315563201904297}",0,Compute: 63723449 + 72225538
983,add{'ok': True, 'value': 103150527920290628756270499072760, 'stdout': '103150527920290628756270499072760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0787806510925293}",0,Compute: 25787631980072657189067624768190 + 89094671968928030170427129521872
984,mul,4,55534788,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 7641 * 7268
985,ilp_partition,2,0,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 2, 6]"
986,sub,2,82,-2,0,53,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 96 - 14
987,rod,2,8,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
988,ilp_prod,16,149,0,0,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 43, 35, 20, 22, 3]
consumption (rows=resources) = [[1, 7, 13, 4, 12, 14], [5, 7, 3, 4, 15, 15], [3, 1, 7, 4, 2, 1], [6, 16, 16, 9, 16, 10]]
capacity = [59, 51, 33, 57]
upper_bounds = [9, 3, 3, 6, 3, 3]"
989,sub,8,65970020,3,0,0,0,"{'ok': True, 'value': 366409784, 'stdout': '366409784\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08106517791748047}",0,Compute: 91602446 - 25632426
990,ilp_partition,2,4,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 6, 2]"
991,mul,4,7816648,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 1358 * 5756
992,sub,32,30943946864398784217727593197657,-47126146138380824999242044027600,0,1,0,"{'ok': True, 'value': 312280372011118436867878548901028, 'stdout': '312280372011118436867878548901028\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07676577568054199}",0,Compute: 78070093002779609216969637225257 - 47126146138380824999242044027600
993,ilp_prod,16,180,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 44, 37, 36, 3, 46]
consumption (rows=resources) = [[7, 4, 10, 5, 7, 13], [15, 2, 13, 13, 13, 15], [5, 7, 9, 11, 9, 2], [11, 13, 2, 16, 4, 8]]
capacity = [45, 41, 33, 43]
upper_bounds = [3, 3, 3, 3, 3, 3]"
994,ilp_prod,32,702,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [80, 51, 70, 54, 94, 81]
consumption (rows=resources) = [[16, 18, 2, 20, 6, 21], [21, 18, 12, 4, 7, 2], [18, 24, 15, 21, 8, 31], [15, 24, 9, 32, 22, 9]]
capacity = [127, 103, 119, 124]
upper_bounds = [4, 4, 7, 3, 5, 3]"
995,rod,8,160,22,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 13, 11, 12, 22, 13, 2, 22]"
996,add,32,116368457815496024997258228095115,-1,0,0,0,"{'ok': True, 'value': 248419330811601894840082500340948, 'stdout': '248419330811601894840082500340948\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07176804542541504}",0,Compute: 62104832702900473710020625085237 + 54263625112595551287237603009878
997,mul,4,55585122,5,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 9426 * 5897
998,sub,4,330,7,0,0,0,"{'ok': True, 'value': 15732, 'stdout': '15732\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09598565101623535}",0,Compute: 3933 - 3603
999,add,2,158,7,0,132,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09293365478515625}",0,Compute: 63 + 95
1000,rod,16,656,60,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [41, 3, 34, 4, 13, 23, 5, 38, 28, 45, 36, 35, 30, 15, 38, 42]"
1001,rod,32,2304,92,0,37,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [72, 43, 27, 65, 26, 89, 68, 61, 40, 64, 61, 47, 45, 93, 64, 19, 32, 94, 83, 26, 59, 43, 5, 82, 71, 65, 90, 53, 72, 48, 2, 30]"
1002,knap,4,25,15,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 5, 3]
V = [1, 11, 4, 14]
C = 8"
1003,ilp_assign,4,19,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 5, 12, 11], [1, 7, 9, 10], [7, 3, 6, 3], [8, 7, 10, 9]]"
1004,rod,2,8,11,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
1005,knap,16,438,0,0,122,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 4, 13, 23, 27, 11, 13, 14, 24, 16, 15, 2, 27, 21, 25]
V = [17, 44, 18, 13, 58, 37, 52, 52, 13, 27, 41, 45, 51, 50, 60, 40]
C = 122"
1006,lcs,4,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabd""
T = ""ccc"""
1007,mul,2,784,7,0,2,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08169674873352051}",0,Compute: 16 * 49
1008,ilp_prod,32,579,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [71, 81, 73, 96, 49, 72]
consumption (rows=resources) = [[13, 15, 29, 2, 29, 23], [26, 21, 14, 11, 9, 8], [1, 4, 6, 23, 26, 16], [28, 18, 20, 9, 18, 8]]
capacity = [101, 103, 90, 94]
upper_bounds = [3, 4, 3, 3, 3, 4]"
1009,ilp_assign,8,38,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 22, 9, 5, 7, 1, 6], [15, 2, 20, 19, 14, 23, 4], [18, 2, 17, 6, 23, 21, 22], [21, 15, 3, 1, 18, 1, 5], [8, 1, 18, 2, 17, 21, 19], [22, 8, 20, 23, 14, 23, 4], [16, 12, 11, 6, 24, 22, 7]]"
1010,rod,8,104,18,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 17, 21, 4, 24, 11, 16, 21]"
1011,ilp_prod,32,539,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [90, 46, 30, 49, 90, 87]
consumption (rows=resources) = [[6, 22, 12, 26, 30, 1], [22, 16, 17, 26, 5, 11], [25, 23, 6, 2, 32, 15], [5, 2, 27, 1, 6, 28]]
capacity = [118, 127, 112, 107]
upper_bounds = [4, 4, 3, 4, 3, 3]"
1012,mul,4,47450691,7,0,1,0,"{'ok': True, 'value': 39716, 'stdout': '39716\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08531665802001953}",0,Compute: 9929 * 4779
1013,ilp_prod,2,18,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[2, 1], [3, 2]]
capacity = [10, 7]
upper_bounds = [3, 3]"
1014,ilp_prod,4,44,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 4, 5]
consumption (rows=resources) = [[3, 1, 1], [4, 4, 1], [4, 1, 2]]
capacity = [15, 13, 16]
upper_bounds = [3, 3, 8]"
1015,lcs,16,8,1,0,12,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baadddccacdcddad""
T = ""bccadaddabcaaaa"""
1016,knap,2,10,4,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 5]
V = [4, 1, 10]
C = 5"
1017,ilp_prod,4,56,27,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4, 12]
consumption (rows=resources) = [[1, 2, 4], [2, 1, 1], [1, 1, 2]]
capacity = [12, 11, 15]
upper_bounds = [5, 6, 3]"
1018,sub,8,7606093,0,0,13,0,"{'ok': True, 'value': 157140168, 'stdout': '157140168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08032083511352539}",0,Compute: 39285042 - 31678949
1019,ilp_assign,2,9,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 4], [6, 3]]"
1020,lcs,16,7,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbccddbbbbddcbb""
T = ""adcbcacabdaaaadd"""
1021,ilp_prod,4,36,31,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 3, 12]
consumption (rows=resources) = [[4, 4, 4], [4, 3, 4], [3, 1, 1]]
capacity = [15, 14, 10]
upper_bounds = [3, 3, 3]"
1022,ilp_assign,8,21,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 15, 3, 23, 13, 2, 1], [23, 7, 12, 7, 4, 23, 2], [16, 7, 2, 22, 6, 11, 2], [22, 17, 9, 7, 7, 14, 17], [3, 19, 6, 9, 2, 5, 1], [23, 2, 19, 18, 7, 24, 6], [11, 5, 6, 23, 13, 19, 1]]"
1023,knap,16,342,3,0,406,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 14, 1, 29, 1, 5, 9, 2, 4, 1, 5, 30, 32, 25, 23, 27]
V = [3, 26, 22, 4, 18, 11, 27, 26, 31, 2, 61, 41, 31, 17, 53, 50]
C = 108"
1024,add,16,18349723534446338,7,0,3,0,"{'ok': True, 'value': 38352252939094168, 'stdout': '38352252939094168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0777425765991211}",0,Compute: 9588063234773542 + 8761660299672796
1025,rod,4,28,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 2, 8, 9]"
1026,add,16,12739042150839951,0,0,0,0,"{'ok': True, 'value': 27713079180625644, 'stdout': '27713079180625644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08193278312683105}",0,Compute: 6928269795156411 + 5810772355683540
1027,add,4,3651,20,0,-3,0,"{'ok': True, 'value': 5716, 'stdout': '5716\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0973212718963623}",0,Compute: 1429 + 2222
1028,mul,2,7161,,0,2,0,"{'ok': True, 'value': 308, 'stdout': '308\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08812427520751953}",0,Compute: 77 * 93
1029,rod,4,36,14,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 11, 12, 7]"
1030,mul,8,1027644029815512,,0,0,0,"{'ok': True, 'value': 115129108, 'stdout': '115129108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07657051086425781}",0,Compute: 28782277 * 35704056
1031,ilp_prod,16,178,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 48, 40, 29, 29, 24]
consumption (rows=resources) = [[2, 4, 1, 1, 9, 13], [4, 12, 7, 14, 3, 16], [5, 7, 2, 4, 12, 12], [4, 16, 10, 11, 1, 15]]
capacity = [33, 43, 32, 35]
upper_bounds = [6, 3, 3, 3, 3, 3]"
1032,sub,8,61663589,76902887,0,2,0,"{'ok': True, 'value': 307611548, 'stdout': '307611548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08231902122497559}",0,Compute: 76902887 - 15239298
1033,ilp_prod,8,85,,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 16, 10, 17]
consumption (rows=resources) = [[2, 7, 7, 4], [4, 3, 1, 3], [8, 6, 6, 2], [5, 4, 6, 5]]
capacity = [16, 24, 29, 30]
upper_bounds = [3, 3, 3, 4]"
1034,lcs,4,3,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdb""
T = ""adbbb"""
1035,rod,16,180,5,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [3, 22, 15, 45, 26, 8, 28, 21, 4, 17, 34, 8, 13, 10, 3, 26]"
1036,ilp_partition,2,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 5, 2]"
1037,knap,32,1570,53,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 16, 44, 56, 9, 53, 26, 50, 37, 13, 24, 59, 32, 18, 18, 40, 20, 49, 11, 10, 30, 33, 30, 16, 30, 54, 1, 63, 33, 48, 2, 19]
V = [11, 118, 16, 99, 75, 38, 95, 111, 28, 38, 114, 105, 27, 18, 92, 25, 78, 37, 15, 36, 33, 117, 14, 48, 13, 73, 110, 79, 112, 22, 7, 121]
C = 481"
1038,lcs,32,17,6,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdcbdccdacbccddacbdaadaccddacbb""
T = ""aabacacdabddbaddbdccccabcaccbba"""
1039,ilp_prod,16,270,4,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [45, 7, 12, 44, 13, 33]
consumption (rows=resources) = [[4, 10, 9, 13, 11, 4], [3, 4, 5, 12, 3, 4], [8, 11, 2, 7, 8, 12], [5, 3, 5, 4, 8, 5]]
capacity = [44, 62, 48, 57]
upper_bounds = [6, 4, 4, 3, 4, 4]"
1040,ilp_assign,8,18,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 15, 13, 13, 12, 22, 12], [16, 20, 20, 1, 21, 9, 24], [3, 22, 2, 13, 14, 12, 23], [13, 6, 10, 21, 7, 20, 3], [10, 1, 14, 2, 15, 1, 13], [7, 18, 20, 16, 9, 1, 20], [23, 24, 7, 8, 22, 21, 5]]"
1041,ilp_partition,4,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 12, 5]"
1042,lcs,4,2,100,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caad""
T = ""cbdb"""
1043,lcs,16,9,-1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbaacaaabbacbba""
T = ""dcddbcbdbdbacbdb"""
1044,ilp_assign,32,117,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[90, 19, 90, 52, 76, 39, 53], [6, 17, 36, 65, 8, 30, 76], [79, 25, 16, 72, 84, 68, 30], [25, 41, 89, 11, 53, 78, 45], [87, 33, 2, 48, 17, 40, 29], [77, 9, 47, 91, 69, 56, 32], [84, 17, 31, 65, 20, 88, 92]]"
1045,add,16,15109264646353908,7,0,2,0,"{'ok': True, 'value': 22620399659488732, 'stdout': '22620399659488732\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08563423156738281}",0,Compute: 5655099914872183 + 9454164731481725
1046,sub,16,2232987683117459,-1,0,0,0,"{'ok': True, 'value': 38940468700031996, 'stdout': '38940468700031996\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08469963073730469}",0,Compute: 9735117175007999 - 7502129491890540
1047,rod,16,752,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [47, 17, 43, 4, 16, 1, 35, 19, 6, 5, 39, 20, 45, 15, 30, 9]"
1048,knap,16,448,25,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 31, 6, 24, 12, 25, 16, 6, 17, 3, 27, 10, 18, 28, 15, 21]
V = [56, 28, 14, 28, 47, 64, 21, 41, 49, 15, 30, 52, 55, 60, 51, 37]
C = 141"
1049,add,2,145,3,0,0,0,"{'ok': True, 'value': 240, 'stdout': '240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07644343376159668}",0,Compute: 60 + 85
1050,ilp_prod,4,44,10000,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3, 11]
consumption (rows=resources) = [[1, 1, 3], [2, 2, 2], [4, 4, 3]]
capacity = [14, 13, 15]
upper_bounds = [3, 3, 4]"
1051,ilp_assign,32,115,3,0,27,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[93, 20, 34, 85, 17, 9, 29], [85, 23, 11, 33, 70, 76, 74], [48, 95, 96, 84, 17, 68, 57], [19, 96, 17, 93, 50, 15, 9], [83, 15, 76, 66, 31, 25, 85], [33, 41, 8, 32, 9, 59, 51], [24, 96, 41, 84, 7, 77, 50]]"
1052,rod,4,24,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 3, 4, 4]"
1053,mul,16,16616102460155344375902123258423,,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11561775207519531}",0,Compute: 2470423802385693 * 6726012939200611
1054,rod,16,320,1000,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [12, 40, 35, 47, 33, 13, 19, 40, 1, 47, 18, 15, 34, 8, 25, 28]"
1055,sub,8,9612197,3,0,1,0,"{'ok': True, 'value': 82494176, 'stdout': '82494176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07868647575378418}",0,Compute: 20623544 - 11011347
1056,mul,32,7361087749112129616908195926055060014401288223155829434507340936,1,0,4,0,"{'ok': True, 'value': 299563050336049753353582872324492, 'stdout': '299563050336049753353582872324492\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07667279243469238}",0,Compute: 74890762584012438338395718081123 * 98290997382413662300457325315032
1057,ilp_assign,2,3,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [1, 1]]"
1058,ilp_prod,4,24,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 4, 5]
consumption (rows=resources) = [[4, 3, 4], [4, 4, 1], [4, 2, 4]]
capacity = [10, 8, 12]
upper_bounds = [3, 3, 3]"
1059,lcs,2,2,6,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""bb"""
1060,ilp_partition,8,0,5,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 15, 2, 23, 6, 9, 22, 18]"
1061,sub,2,9,-9,0,3,0,"{'ok': True, 'value': 252, 'stdout': '252\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07463908195495605}",0,Compute: 63 - 54
1062,mul,8,1204094106610983,,0,0,0,"{'ok': True, 'value': 88629844, 'stdout': '88629844\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07906866073608398}",0,Compute: 22157461 * 54342603
1063,mul,32,656444129926897378839563233338603457058180240621497782257869985,7,0,56842342231333104969788538470035,0,"{'ok': True, 'value': 227369368925332419879154153880140, 'stdout': '227369368925332419879154153880140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0797891616821289}",0,Compute: 56842342231333104969788538470035 * 11548505993214453226910532328571
1064,sub,2,28,-8,0,171798,0,"{'ok': True, 'value': 256, 'stdout': '256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07924675941467285}",0,Compute: 64 - 36
1065,knap,2,10,24,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 2]
V = [5, 5, 5]
C = 4"
1066,ilp_assign,2,10,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [6, 4]]"
1067,ilp_prod,8,63,0,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 7, 20, 21]
consumption (rows=resources) = [[7, 3, 3, 3], [6, 1, 6, 1], [8, 8, 2, 1], [8, 3, 7, 5]]
capacity = [17, 17, 32, 17]
upper_bounds = [3, 4, 3, 3]"
1068,ilp_partition,2,0,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 3, 1]"
1069,knap,4,11,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 5, 3]
V = [1, 2, 3, 8]
C = 8"
1070,rod,2,2,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 2]"
1071,add,16,10489454624678901,0,0,3,0,"{'ok': True, 'value': 21888677248625556, 'stdout': '21888677248625556\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11028575897216797}",0,Compute: 5472169312156389 + 5017285312522512
1072,ilp_prod,4,16,27,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8, 3]
consumption (rows=resources) = [[3, 3, 2], [2, 4, 3], [4, 2, 4]]
capacity = [14, 8, 16]
upper_bounds = [4, 3, 3]"
1073,mul,4,79484672,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 9896 * 8032
1074,rod,16,768,,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [48, 7, 26, 47, 3, 15, 4, 29, 11, 36, 41, 37, 33, 4, 16, 3]"
1075,ilp_prod,16,211,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [47, 43, 31, 13, 30, 22]
consumption (rows=resources) = [[9, 7, 6, 8, 4, 13], [1, 16, 5, 13, 10, 8], [12, 5, 6, 14, 15, 12], [5, 16, 10, 9, 14, 15]]
capacity = [59, 53, 41, 55]
upper_bounds = [3, 3, 5, 3, 3, 3]"
1076,add,8,33737385,20,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07618117332458496}",0,Compute: 11003621 + 22733764
1077,lcs,4,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccba""
T = ""dab"""
1078,rod,4,24,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 2, 4, 11]"
1079,rod,2,12,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
1080,ilp_assign,2,6,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4], [6, 3]]"
1081,ilp_prod,2,27,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5]
consumption (rows=resources) = [[1, 2], [2, 1]]
capacity = [10, 6]
upper_bounds = [3, 5]"
1082,lcs,16,7,-1,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadadbdabccccbda""
T = ""bcddcbbbbbcaacbb"""
1083,add,4,14963,7798,0,6,0,"{'ok': True, 'value': 3192, 'stdout': '3192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08853483200073242}",0,Compute: 7798 + 7165
1084,ilp_prod,16,127,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 35, 46, 20, 32, 12]
consumption (rows=resources) = [[6, 16, 8, 4, 5, 11], [7, 10, 14, 14, 14, 6], [15, 8, 1, 13, 1, 7], [6, 5, 15, 7, 10, 15]]
capacity = [43, 44, 49, 43]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1085,ilp_assign,4,18,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1, 7, 10], [10, 4, 3, 9], [10, 8, 3, 6], [10, 7, 9, 10]]"
1086,rod,16,720,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [45, 18, 38, 31, 38, 34, 39, 18, 34, 6, 43, 23, 21, 48, 41, 26]"
1087,lcs,2,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""ac"""
1088,rod,8,112,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 13, 6, 10, 18, 23, 13, 7]"
1089,rod,32,2496,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [78, 86, 12, 15, 69, 45, 96, 71, 82, 55, 18, 48, 67, 1, 59, 56, 68, 77, 19, 34, 8, 61, 22, 9, 70, 36, 19, 28, 85, 20, 1, 80]"
1090,ilp_prod,4,40,26,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 8, 3]
consumption (rows=resources) = [[4, 3, 2], [2, 3, 1], [1, 4, 2]]
capacity = [14, 10, 10]
upper_bounds = [3, 3, 5]"
1091,sub,16,2182755371877121,35,0,1,0,"{'ok': True, 'value': 14047532774490044, 'stdout': '14047532774490044\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07781600952148438}",0,Compute: 3511883193622511 - 1329127821745390
1092,ilp_prod,2,14,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4]
consumption (rows=resources) = [[3, 3], [2, 3]]
capacity = [6, 8]
upper_bounds = [3, 3]"
1093,rod,16,160,39,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [10, 16, 24, 13, 29, 20, 37, 10, 39, 36, 42, 42, 40, 29, 26, 30]"
1094,lcs,16,7,-8,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbdbaaddddbdcabc""
T = ""cccaabcabdddbbd"""
1095,ilp_partition,8,1,12,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 17, 18, 6, 6, 21, 7, 19]"
1096,ilp_assign,4,18,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 11, 10, 4], [7, 5, 11, 3], [1, 1, 8, 7], [9, 11, 11, 2]]"
1097,lcs,32,18,0,0,35,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddbcbbdaabdcacdabaabcccdaacaabc""
T = ""cdcbadadcbbaccbdcbbdbdcdbbdabcca"""
1098,knap,4,22,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 4, 1]
V = [6, 16, 12, 6]
C = 5"
1099,ilp_partition,8,0,0,1,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 20, 20, 9, 24, 6, 2, 1]"
1100,rod,16,704,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 21, 10, 34, 21, 12, 31, 48, 3, 36, 22, 14, 8, 46, 9, 40]"
1101,ilp_assign,16,85,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 10, 14, 20, 45, 27, 20], [12, 3, 22, 14, 15, 38, 31], [42, 37, 11, 36, 4, 41, 33], [37, 30, 41, 26, 39, 26, 3], [46, 18, 6, 38, 46, 7, 22], [37, 34, 26, 44, 48, 20, 27], [35, 32, 40, 30, 21, 46, 25]]"
1102,mul,4,8528256,8454464,0,0,0,"{'ok': True, 'value': 12672, 'stdout': '12672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07683944702148438}",0,Compute: 3168 * 2692
1103,add,16,13455487937356817,0,0,6204075604553485,0,"{'ok': True, 'value': 24816302418213940, 'stdout': '24816302418213940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07782840728759766}",0,Compute: 6204075604553485 + 7251412332803332
1104,ilp_partition,4,2,2,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 7, 12, 2]"
1105,ilp_partition,8,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 7, 11, 13, 12, 6, 15, 12]"
1106,knap,8,84,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 1, 10, 14, 3, 6, 1, 13]
V = [19, 10, 19, 9, 11, 20, 15, 20]
C = 27"
1107,ilp_prod,2,49,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7]
consumption (rows=resources) = [[2, 1], [2, 1]]
capacity = [7, 10]
upper_bounds = [3, 7]"
1108,mul,16,9872100118342476331483618654620,-5,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08443307876586914}",0,Compute: 1886213672824830 * 5233818554372914
1109,sub,32,26236673554995326446585559047108,3,0,47329361388495884685091226358054,0,"{'ok': True, 'value': 189317445553983538740364905432216, 'stdout': '189317445553983538740364905432216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0973351001739502}",0,Compute: 47329361388495884685091226358054 - 21092687833500558238505667310946
1110,rod,32,2304,3,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [72, 25, 59, 6, 42, 8, 51, 24, 13, 96, 29, 60, 87, 63, 94, 30, 3, 48, 40, 26, 8, 3, 53, 3, 91, 61, 23, 50, 29, 48, 48, 72]"
1111,mul,8,2366895775475948,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 43781924 * 54061027
1112,lcs,4,2,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacd""
T = ""ccc"""
1113,knap,2,5,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 4]
V = [4, 5, 4]
C = 5"
1114,ilp_assign,4,18,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 7, 3, 11], [3, 4, 10, 2], [12, 6, 6, 9], [8, 3, 7, 11]]"
1115,rod,16,448,10,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [28, 4, 21, 9, 33, 8, 15, 33, 16, 37, 5, 23, 48, 10, 15, 17]"
1116,add,4,4509,1689,0,1,0,"{'ok': True, 'value': 6756, 'stdout': '6756\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08144140243530273}",0,Compute: 1689 + 2820
1117,lcs,2,1,100,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""bba"""
1118,ilp_partition,8,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 14, 11, 22, 1, 11, 6, 5]"
1119,ilp_prod,8,92,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 8, 23, 7]
consumption (rows=resources) = [[1, 8, 6, 3], [4, 5, 1, 7], [8, 8, 1, 3], [7, 8, 6, 5]]
capacity = [24, 21, 27, 32]
upper_bounds = [3, 3, 4, 3]"
1120,mul,8,1469733827470271,,0,20638153,0,"{'ok': True, 'value': 82552612, 'stdout': '82552612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0848238468170166}",0,Compute: 20638153 * 71214407
1121,mul,2,5110,0,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 73 * 70
1122,mul,4,27560752,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 4688 * 5879
1123,knap,32,1350,595,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [54, 30, 24, 61, 21, 59, 14, 34, 50, 16, 14, 53, 9, 45, 26, 56, 57, 33, 57, 7, 60, 43, 6, 53, 25, 45, 41, 30, 39, 51, 54, 23]
V = [1, 41, 10, 15, 49, 38, 80, 69, 10, 14, 72, 22, 15, 88, 52, 19, 126, 14, 85, 69, 30, 113, 82, 48, 57, 53, 20, 58, 52, 27, 39, 127]
C = 595"
1124,sub,8,2520853,0,0,0,0,"{'ok': True, 'value': 173249572, 'stdout': '173249572\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08225750923156738}",0,Compute: 43312393 - 40791540
1125,ilp_assign,16,61,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 42, 24, 10, 32, 21, 29], [23, 1, 12, 3, 34, 43, 7], [28, 10, 27, 21, 19, 41, 37], [11, 11, 32, 28, 4, 12, 41], [9, 23, 48, 8, 26, 27, 19], [38, 22, 12, 26, 18, 31, 27], [15, 15, 26, 38, 16, 9, 42]]"
1126,lcs,16,7,1,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acddcdabbcddacdd""
T = ""dbbbacbdaacacbb"""
1127,sub,8,23732815,7,0,4,0,"{'ok': True, 'value': 163445856, 'stdout': '163445856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08466649055480957}",0,Compute: 40861464 - 17128649
1128,add,32,125923456217675589447774743080147,4,0,4,0,"{'ok': True, 'value': 361911983944281127418571185625136, 'stdout': '361911983944281127418571185625136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07838582992553711}",0,Compute: 90477995986070281854642796406284 + 35445460231605307593131946673863
1129,ilp_prod,2,16,5,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[2, 3], [1, 3]]
capacity = [8, 7]
upper_bounds = [4, 3]"
1130,sub,4,5142,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 9258 - 4116
1131,lcs,32,20,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacbcabbabccddbbdbccddbadbadabcb""
T = ""cbcbdcccccadcbdaddacdbadacbcdbaa"""
1132,lcs,2,1,2,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""aa"""
1133,knap,16,434,0,0,119,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 29, 29, 23, 32, 19, 25, 20, 8, 1, 4, 2, 10, 2, 17, 11]
V = [6, 63, 56, 53, 41, 51, 28, 20, 4, 54, 44, 52, 30, 31, 28, 17]
C = 119"
1134,lcs,2,2,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""cd"""
1135,lcs,16,12,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbcbddbdccccbca""
T = ""bbcbcbbdbccdcbcc"""
1136,ilp_partition,32,0,3,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [29, 36, 93, 5, 12, 89, 64, 66, 94, 40, 17, 58, 75, 4, 95, 51, 63, 25, 38, 93, 69, 25, 94, 57]"
1137,rod,32,1536,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [48, 45, 5, 72, 66, 61, 3, 57, 41, 41, 32, 96, 91, 50, 16, 34, 57, 75, 27, 83, 78, 14, 30, 7, 94, 3, 47, 2, 65, 45, 80, 86]"
1138,knap,8,66,22,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 7, 8, 8, 12, 14, 4, 3]
V = [2, 15, 22, 16, 13, 11, 6, 11]
C = 28"
1139,knap,2,8,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 5]
V = [4, 4, 6]
C = 5"
1140,mul,4,8707545,86085,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 5385 * 1617
1141,lcs,32,20,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdbdaaadadbddcdbadabcddbaacdcda""
T = ""bacadcacdadbadcbcbdaacdddbdbbcdbc"""
1142,mul,4,22329230,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 6170 * 3619
1143,ilp_assign,16,64,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 41, 32, 7, 37, 32, 18], [10, 12, 2, 4, 39, 3, 32], [12, 24, 15, 36, 14, 2, 36], [35, 35, 18, 38, 45, 15, 32], [38, 35, 3, 7, 6, 21, 29], [31, 16, 28, 14, 2, 9, 46], [13, 11, 18, 2, 24, 30, 19]]"
1144,ilp_assign,32,129,-2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[38, 55, 41, 45, 68, 32, 29], [77, 46, 18, 20, 49, 74, 96], [15, 21, 26, 68, 39, 13, 94], [76, 3, 61, 62, 94, 33, 22], [61, 90, 54, 38, 60, 88, 15], [84, 36, 37, 46, 25, 65, 36], [23, 46, 83, 21, 10, 12, 25]]"
1145,sub,2,21,-6,0,185,0,"{'ok': True, 'value': 216, 'stdout': '216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834512710571289}",0,Compute: 54 - 33
1146,ilp_assign,8,29,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 18, 2, 21, 7, 11, 3], [14, 9, 23, 22, 8, 2, 10], [4, 10, 19, 5, 14, 12, 17], [3, 10, 3, 15, 16, 6, 8], [19, 1, 18, 1, 7, 7, 11], [20, 3, 19, 13, 14, 17, 21], [13, 22, 19, 11, 13, 15, 10]]"
1147,lcs,32,18,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdaacbbabaacbaddbadbaddcaccdcaa""
T = ""bcdaaadbadccdbcbbcacdbccacaddcc"""
1148,ilp_prod,4,20,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 10, 7]
consumption (rows=resources) = [[2, 3, 4], [4, 4, 4], [2, 3, 1]]
capacity = [9, 10, 15]
upper_bounds = [3, 3, 3]"
1149,rod,32,2112,729,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [66, 64, 54, 63, 5, 45, 4, 41, 59, 76, 61, 81, 54, 39, 47, 96, 62, 66, 12, 22, 84, 38, 55, 71, 31, 23, 58, 74, 15, 47, 79, 47]"
1150,rod,8,168,7,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 20, 11, 21, 23, 7, 20, 15]"
1151,ilp_assign,16,46,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 11, 41, 5, 23, 10, 46], [41, 44, 37, 38, 9, 7, 45], [32, 42, 7, 10, 32, 47, 4], [14, 15, 20, 8, 47, 9, 36], [5, 8, 16, 34, 34, 1, 12], [7, 28, 7, 20, 19, 43, 19], [6, 31, 41, 11, 30, 36, 23]]"
1152,sub,8,3237968,7,0,0,0,"{'ok': True, 'value': 371611600, 'stdout': '371611600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07605981826782227}",0,Compute: 92902900 - 89664932
1153,rod,16,608,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [38, 8, 36, 21, 16, 33, 14, 30, 30, 10, 22, 4, 28, 8, 15, 7]"
1154,knap,8,88,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 11, 8, 15, 3, 7, 2, 15]
V = [9, 6, 31, 5, 4, 10, 32, 9]
C = 32"
1155,sub,4,56,7,0,2,0,"{'ok': True, 'value': 20936, 'stdout': '20936\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08210587501525879}",0,Compute: 5234 - 5178
1156,ilp_partition,4,1,1,1,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 4, 9, 1]"
1157,lcs,4,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcda""
T = ""ccb"""
1158,ilp_assign,16,62,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 4, 17, 40, 10, 17, 21], [33, 46, 34, 26, 33, 14, 1], [26, 7, 30, 35, 32, 7, 19], [23, 7, 44, 26, 34, 23, 19], [41, 31, 40, 36, 12, 10, 16], [40, 35, 29, 10, 39, 37, 28], [34, 16, 5, 9, 28, 24, 4]]"
1159,lcs,8,4,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddddccdb""
T = ""dccddac"""
1160,sub,8,34631676,0,0,0,0,"{'ok': True, 'value': 250292948, 'stdout': '250292948\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09084677696228027}",0,Compute: 62573237 - 27941561
1161,lcs,2,0,,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""c"""
1162,add,4,12976,7,0,0,0,"{'ok': True, 'value': 13144, 'stdout': '13144\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07114982604980469}",0,Compute: 3286 + 9690
1163,lcs,4,3,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abac""
T = ""bacd"""
1164,knap,2,16,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 1]
V = [9, 6, 10]
C = 3"
1165,knap,2,10,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 2]
V = [8, 10, 9]
C = 4"
1166,sub,4,3168,-12,0,4,0,"{'ok': True, 'value': 26024, 'stdout': '26024\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08213400840759277}",0,Compute: 6506 - 3338
1167,mul,4,25482672,7,0,2,0,"{'ok': True, 'value': 31344, 'stdout': '31344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07728719711303711}",0,Compute: 7836 * 3252
1168,lcs,2,1,0,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""b"""
1169,ilp_partition,16,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 34, 33, 39, 38, 45, 16, 3, 10, 30, 10, 22, 16, 12, 40, 24]"
1170,mul,2,1890,86400,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 30 * 63
1171,ilp_prod,2,12,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[2, 3], [2, 1]]
capacity = [6, 10]
upper_bounds = [3, 3]"
1172,lcs,16,9,-8,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccddcadccbdacbdc""
T = ""bbcdcaadcacbaaa"""
1173,add,32,76174287183612070293594932639178,2,0,1,0,"{'ok': True, 'value': 204990769436859643042993658333904, 'stdout': '204990769436859643042993658333904\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07602071762084961}",0,Compute: 51247692359214910760748414583476 + 24926594824397159532846518055702
1174,lcs,32,20,0,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabbbcbcaaaabbacdcdadbddadccaaba""
T = ""caaabacbadacccdbdabcbcddddadccda"""
1175,lcs,32,21,6,0,ddcabadabdccaddcbcddbabdbccdcbbc,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcabadabdccaddcbcddbabdbccdcbbc""
T = ""ddbddbdbaaccdccdbdacdbabccabbdbdc"""
1176,rod,32,512,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [4, 32, 38, 2, 65, 11, 78, 46, 88, 51, 22, 59, 90, 85, 20, 42, 27, 93, 18, 39, 53, 62, 75, 43, 26, 19, 11, 2, 12, 93, 92, 65]"
1177,rod,32,1296,81,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [33, 81, 50, 65, 47, 71, 43, 63, 11, 53, 40, 63, 46, 31, 54, 93, 76, 30, 74, 43, 53, 93, 12, 35, 95, 85, 70, 72, 13, 22, 5, 58]"
1178,ilp_partition,4,1,,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 6, 7, 4]"
1179,ilp_partition,16,0,7,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [43, 31, 34, 28, 48, 12, 24, 7, 17, 28, 16, 15, 22, 15, 34, 34]"
1180,add,16,5950313312856840,3,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08205795288085938}",0,Compute: 2631746251545499 + 3318567061311341
1181,add,4,10441,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 8569 + 1872
1182,ilp_partition,8,0,,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 8, 22, 23, 5, 12, 11, 18]"
1183,ilp_prod,8,61,0,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 12, 20, 12]
consumption (rows=resources) = [[3, 2, 3, 2], [3, 3, 7, 3], [4, 7, 5, 6], [3, 4, 7, 6]]
capacity = [16, 23, 21, 25]
upper_bounds = [5, 3, 3, 3]"
1184,lcs,16,11,35,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacddcabdbabacdc""
T = ""adaccdaaabaccdca"""
1185,rod,2,8,215,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 3]"
1186,sub,16,2215800483457374,0,0,0,0,"{'ok': True, 'value': 13674723090421344, 'stdout': '13674723090421344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08348274230957031}",0,Compute: 3418680772605336 - 1202880289147962
1187,mul,2,3196,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 47 * 68
1188,add,32,145115945661444845600859777650809,5,0,3,0,"{'ok': True, 'value': 385297151975870734634750277095980, 'stdout': '385297151975870734634750277095980\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07913780212402344}",0,Compute: 96324287993967683658687569273995 + 48791657667477161942172208376814
1189,add,32,63228542023858772203482928576761,8188349937625596032044544,0,459,0,"{'ok': True, 'value': 153654135342035338311547586128868, 'stdout': '153654135342035338311547586128868\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07891249656677246}",0,Compute: 38413533835508834577886896532217 + 24815008188349937625596032044544
1190,mul,32,5736311184383159180171573572349464075747827652265287597304418590,9,0,4,0,"{'ok': True, 'value': 367885870967504714429634280914980, 'stdout': '367885870967504714429634280914980\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0889902114868164}",0,Compute: 91971467741876178607408570228745 * 62370551707215158609865481892782
1191,mul,2,5576,,0,68,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 82 * 68
1192,sub,8,42641094,7,0,0,0,"{'ok': True, 'value': 359942852, 'stdout': '359942852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07341361045837402}",0,Compute: 89985713 - 47344619
1193,lcs,2,1,5,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""ddc"""
1194,ilp_prod,32,501,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [68, 28, 87, 80, 86, 44]
consumption (rows=resources) = [[14, 23, 27, 8, 30, 31], [14, 15, 9, 24, 29, 15], [32, 3, 23, 4, 18, 22], [20, 32, 24, 10, 10, 19]]
capacity = [124, 106, 86, 111]
upper_bounds = [3, 3, 3, 4, 3, 3]"
1195,mul,32,1528120505684285142777817984432948553461829221771886404372786122,7,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08141016960144043}",0,Compute: 22063450438858612626719708106649 * 69260268692739336510310169407578
1196,add,8,74338390,35,0,6,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08718061447143555}",0,Compute: 47794196 + 26544194
1197,ilp_partition,4,2,4,0,17,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 10, 7, 4]"
1198,sub,16,31892568525201,-1,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08306503295898438}",0,Compute: 3694473507222362 - 3662580938697161
1199,knap,32,1467,14,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [39, 13, 52, 43, 22, 10, 15, 35, 18, 31, 14, 11, 9, 58, 2, 26, 1, 42, 37, 54, 16, 47, 18, 47, 27, 35, 7, 4, 13, 24, 45, 13]
V = [4, 33, 80, 24, 111, 6, 18, 65, 126, 59, 87, 89, 62, 13, 67, 71, 24, 105, 95, 58, 31, 98, 104, 72, 66, 96, 9, 1, 21, 82, 50, 52]
C = 414"
1200,mul,16,48729683085581776096562736172778,0,0,0,0,"{'ok': True, 'value': 31949582513874052, 'stdout': '31949582513874052\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09189677238464355}",0,Compute: 7987395628468513 * 6100822514900906
1201,knap,8,70,-8,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 12, 7, 14, 7, 8, 14, 7]
V = [27, 25, 3, 11, 1, 14, 7, 4]
C = 39"
1202,add,4,10222,6000,0,8868,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08114480972290039}",0,Compute: 1354 + 8868
1203,mul,16,61079530691906946868548698592642,-1,0,0,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0788125991821289}",0,Compute: 8878720818159334 * 6879316507731963
1204,ilp_prod,4,30,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4, 6]
consumption (rows=resources) = [[1, 2, 2], [1, 4, 1], [2, 4, 2]]
capacity = [16, 8, 11]
upper_bounds = [5, 3, 5]"
1205,add,4,11337,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 2625 + 8712
1206,ilp_partition,2,2,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 3, 3]"
1207,knap,2,8,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5]
V = [6, 8, 7]
C = 5"
1208,ilp_partition,16,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 43, 15, 18, 22, 48, 1, 10, 13, 30, 25, 26, 23, 44, 46, 17]"
1209,ilp_assign,4,17,1000,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1, 9, 12], [5, 1, 7, 2], [10, 11, 12, 6], [3, 1, 6, 4]]"
1210,mul,8,500871262515120,,0,17325090,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 17325090 * 28910168
1211,ilp_partition,2,2,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 4, 5]"
1212,ilp_partition,4,1,-1,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 9, 5, 3]"
1213,rod,16,108,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [4, 6, 4, 27, 25, 19, 3, 46, 19, 32, 28, 21, 31, 33, 31, 32]"
1214,rod,2,10,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 1]"
1215,mul,8,1433661594383880,,0,0,0,"{'ok': True, 'value': 84463556, 'stdout': '84463556\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08061885833740234}",0,Compute: 21115889 * 67894920
1216,sub,2,57,20,0,9,0,"{'ok': True, 'value': 280, 'stdout': '280\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0900871753692627}",0,Compute: 70 - 13
1217,knap,8,107,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 12, 5, 15, 13, 9, 1, 14]
V = [21, 10, 21, 5, 14, 25, 14, 26]
C = 38"
1218,rod,4,28,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 8, 1, 9]"
1219,add,16,11698423583927470,7,0,0,0,"{'ok': True, 'value': 10938013581619724, 'stdout': '10938013581619724\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07800722122192383}",0,Compute: 2734503395404931 + 8963920188522539
1220,ilp_prod,32,336,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [59, 53, 43, 34, 13, 14]
consumption (rows=resources) = [[21, 4, 30, 20, 3, 7], [7, 14, 27, 28, 13, 27], [21, 5, 3, 4, 30, 29], [7, 17, 4, 21, 7, 1]]
capacity = [100, 90, 92, 83]
upper_bounds = [4, 4, 3, 3, 3, 3]"
1221,knap,8,99,20,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 3, 14, 13, 10, 10, 16, 3]
V = [27, 15, 13, 31, 8, 23, 6, 3]
C = 39"
1222,ilp_partition,4,3,1,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 10, 11, 7]"
1223,lcs,2,1,100,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""dba"""
1224,ilp_partition,16,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 42, 41, 17, 31, 7, 35, 7, 17, 24, 10, 25, 46, 41, 18, 6]"
1225,ilp_partition,8,1,7,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 12, 3, 18, 15, 10, 16, 24]"
1226,add,8,55134050,0,0,6,0,"{'ok': True, 'value': 174167092, 'stdout': '174167092\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08379030227661133}",0,Compute: 43541773 + 11592277
1227,add,2,75,114,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 12 + 63
1228,ilp_assign,8,43,3,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 12, 7, 5, 18, 21, 10], [18, 4, 24, 16, 12, 13, 23], [6, 22, 2, 3, 16, 22, 2], [13, 5, 19, 24, 5, 6, 17], [3, 24, 13, 18, 7, 17, 13], [12, 23, 19, 14, 6, 14, 19], [9, 8, 24, 19, 12, 20, 17]]"
1229,mul,32,9217826404617931663044991843200213079027206532175224054310586354,92956008884,0,2,0,"{'ok': True, 'value': 371824035539100136147743535126584, 'stdout': '371824035539100136147743535126584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07134175300598145}",0,Compute: 92956008884775034036935883781646 * 99163319458390492780541922207999
1230,lcs,16,9,1,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcdcbccdccdbbbc""
T = ""aaacdcbaabcdccca"""
1231,rod,8,136,7,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 24, 18, 7, 18, 5, 8, 14]"
1232,add,4,12251,24301,0,6,0,"{'ok': True, 'value': 16696, 'stdout': '16696\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09322929382324219}",0,Compute: 4174 + 8077
1233,lcs,2,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""bc"""
1234,sub,4,80,20,0,9,0,"{'ok': True, 'value': 10196, 'stdout': '10196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0772256851196289}",0,Compute: 2549 - 2469
1235,ilp_partition,4,0,5,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 8, 12, 1]"
1236,ilp_prod,2,12,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[3, 2], [3, 3]]
capacity = [7, 6]
upper_bounds = [3, 3]"
1237,ilp_assign,16,127,0,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[43, 29, 20, 33, 30, 20, 15], [8, 27, 12, 47, 17, 5, 34], [45, 43, 42, 44, 44, 30, 28], [47, 31, 19, 28, 32, 47, 47], [8, 29, 41, 28, 20, 11, 22], [38, 48, 18, 40, 28, 32, 18], [38, 29, 13, 45, 11, 25, 39]]"
1238,ilp_assign,4,12,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 6, 9, 7], [12, 4, 9, 2], [1, 6, 1, 11], [8, 1, 3, 12]]"
1239,mul,32,1306806698988855375925789036884473759756611725153038271927986400,124967730017245213167304329363248,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08391046524047852}",0,Compute: 24967730017245213167304329363248 * 52339828173656310843276706213050
1240,ilp_assign,8,32,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 7, 12, 20, 22, 23, 3], [15, 15, 11, 22, 10, 11, 22], [17, 1, 17, 3, 5, 6, 1], [1, 8, 7, 23, 22, 24, 24], [14, 10, 21, 6, 4, 13, 17], [17, 1, 20, 7, 3, 7, 6], [11, 7, 24, 11, 8, 9, 12]]"
1241,ilp_prod,8,70,0,0,14,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 20, 15, 15]
consumption (rows=resources) = [[2, 6, 6, 3], [5, 5, 8, 3], [8, 4, 7, 8], [2, 8, 2, 3]]
capacity = [24, 25, 29, 25]
upper_bounds = [3, 3, 3, 3]"
1242,ilp_partition,4,2,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 2, 11, 3]"
1243,mul,8,910660707000834,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 51614463 * 17643518
1244,ilp_assign,2,5,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 5], [6, 4]]"
1245,ilp_partition,4,2,,0,16,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 4, 11, 12]"
1246,knap,16,424,9,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 18, 10, 10, 22, 22, 17, 10, 8, 23, 15, 11, 4, 17, 12, 9]
V = [27, 23, 2, 58, 6, 38, 43, 26, 44, 24, 63, 54, 27, 7, 56, 30]
C = 116"
1247,rod,32,2016,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [63, 69, 92, 46, 27, 67, 88, 23, 21, 11, 32, 9, 36, 5, 56, 86, 34, 50, 91, 61, 50, 9, 83, 72, 63, 68, 56, 48, 39, 89, 94, 39]"
1248,ilp_assign,8,31,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 21, 1, 6, 9, 12, 8], [3, 5, 20, 23, 11, 13, 18], [18, 19, 23, 10, 17, 11, 12], [16, 5, 20, 7, 14, 7, 4], [3, 6, 1, 21, 1, 3, 15], [17, 19, 3, 6, 12, 17, 18], [21, 6, 6, 24, 14, 3, 15]]"
1249,ilp_partition,16,0,6,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [32, 19, 33, 16, 9, 22, 26, 45, 7, 33, 45, 16, 31, 8, 46, 14]"
1250,ilp_prod,16,157,25,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 15, 9, 22, 5, 31]
consumption (rows=resources) = [[5, 1, 15, 3, 6, 13], [16, 10, 8, 11, 6, 13], [10, 5, 8, 11, 3, 16], [10, 4, 13, 14, 8, 8]]
capacity = [46, 61, 46, 53]
upper_bounds = [3, 6, 3, 3, 6, 3]"
1251,lcs,4,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbd""
T = ""aaca"""
1252,sub,4,5666,-23,0,1,0,"{'ok': True, 'value': 34468, 'stdout': '34468\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07651901245117188}",0,Compute: 8617 - 2951
1253,sub,2,41,5,0,1,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07897090911865234}",0,Compute: 80 - 39
1254,lcs,4,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaa""
T = ""acc"""
1255,knap,8,63,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 14, 16, 10, 1, 9, 4, 3]
V = [24, 3, 15, 10, 2, 25, 3, 9]
C = 36"
1256,ilp_assign,4,16,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 4, 2, 7], [12, 6, 12, 6], [4, 2, 1, 7], [6, 10, 6, 11]]"
1257,knap,2,11,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 5]
V = [7, 4, 5]
C = 4"
1258,rod,16,209,60,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [9, 15, 40, 35, 5, 20, 35, 43, 6, 39, 2, 48, 37, 25, 39, 41]"
1259,ilp_prod,32,260,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 66, 76, 92, 44, 48]
consumption (rows=resources) = [[4, 28, 30, 25, 23, 26], [25, 12, 23, 20, 25, 31], [12, 32, 30, 13, 20, 19], [30, 31, 9, 29, 14, 26]]
capacity = [106, 102, 86, 68]
upper_bounds = [3, 3, 3, 3, 4, 3]"
1260,rod,32,1440,,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [30, 90, 61, 82, 2, 63, 39, 38, 39, 8, 42, 88, 96, 20, 90, 89, 96, 43, 85, 41, 37, 92, 86, 85, 48, 85, 90, 2, 22, 58, 46, 94]"
1261,add,4,8357,7,0,6,0,"{'ok': True, 'value': 4780, 'stdout': '4780\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08637070655822754}",0,Compute: 1195 + 7162
1262,ilp_partition,8,0,4,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 20, 17, 5, 13, 4, 20, 13]"
1263,rod,4,40,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 9, 2, 3]"
1264,mul,8,2197264695639131,2,0,0,0,"{'ok': True, 'value': 371777044, 'stdout': '371777044\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11685395240783691}",0,Compute: 92944261 * 23640671
1265,mul,32,630970755037076247825204264946986883676291773261765902319043708,2495037372839132453495,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 25289030212765397733509104141693 * 24950373728391324534959531757356
1266,mul,32,3339514129361386413707414016391136206802487013208998091908944520,6,0,0,0,"{'ok': True, 'value': 160477652612868712957299393245840, 'stdout': '160477652612868712957299393245840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07023119926452637}",0,Compute: 40119413153217178239324848311460 * 83239356383596318075622251242962
1267,knap,2,5,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 5]
V = [2, 5, 2]
C = 5"
1268,ilp_partition,32,0,31,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [43, 30, 68, 3, 44, 41, 3, 91, 51, 88, 79, 8, 7, 13, 31, 75, 51, 70, 17, 72, 67, 18, 44, 58]"
1269,ilp_assign,16,86,-1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 24, 46, 10, 33, 26, 40], [27, 27, 29, 10, 40, 24, 31], [9, 11, 17, 14, 25, 34, 43], [10, 35, 45, 46, 19, 12, 47], [39, 8, 2, 16, 35, 12, 38], [45, 12, 39, 41, 16, 37, 30], [43, 37, 45, 31, 12, 38, 33]]"
1270,add,16,8891400507220882,3,0,0,0,"{'ok': True, 'value': 26930011877390504, 'stdout': '26930011877390504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08639311790466309}",0,Compute: 6735021969347626 + 2156378537873256
1271,ilp_partition,4,6,,0,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 9, 8, 8]"
1272,ilp_prod,4,77,10000000,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4, 11]
consumption (rows=resources) = [[2, 4, 2], [3, 2, 2], [3, 2, 2]]
capacity = [14, 14, 15]
upper_bounds = [4, 3, 7]"
1273,add,8,114796875,1,0,4,0,"{'ok': True, 'value': 75334992, 'stdout': '75334992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09370732307434082}",0,Compute: 18833748 + 95963127
1274,ilp_assign,16,41,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[44, 4, 14, 48, 24, 2, 6], [28, 19, 15, 1, 16, 47, 46], [29, 8, 21, 22, 38, 33, 34], [12, 40, 4, 43, 36, 20, 16], [35, 20, 48, 12, 18, 39, 34], [36, 47, 23, 14, 13, 2, 24], [2, 21, 34, 41, 40, 27, 14]]"
1275,sub,8,38020804,65472959,0,16,0,"{'ok': True, 'value': 261891836, 'stdout': '261891836\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07811594009399414}",0,Compute: 65472959 - 27452155
1276,ilp_assign,32,136,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 11, 36, 41, 28, 35, 41], [52, 90, 91, 27, 27, 17, 7], [21, 92, 65, 63, 8, 55, 90], [72, 48, 85, 17, 22, 72, 51], [88, 74, 85, 15, 19, 60, 83], [39, 90, 4, 5, 39, 45, 87], [87, 33, 22, 48, 94, 81, 64]]"
1277,add,2,115,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 77 + 38
1278,rod,4,32,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 12, 10, 9]"
1279,add,2,69,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 11 + 58
1280,ilp_assign,8,33,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 5, 7, 4, 24, 1, 19], [23, 6, 16, 11, 9, 10, 3], [7, 23, 20, 18, 5, 22, 9], [23, 8, 4, 19, 10, 17, 14], [11, 19, 18, 12, 5, 17, 15], [17, 8, 21, 11, 7, 18, 24], [11, 5, 18, 5, 13, 23, 10]]"
1281,sub,32,30482592322664075889639950571914,20,0,0,0,"{'ok': True, 'value': 217441584825719118179606736045336, 'stdout': '217441584825719118179606736045336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0864572525024414}",0,Compute: 54360396206429779544901684011334 - 23877803883765703655261733439420
1282,mul,32,1007584848392145518464870839610096060692236626407116639309367946,463999918148222650403680104,0,1,0,"{'ok': True, 'value': 185599967259289060161472041607124, 'stdout': '185599967259289060161472041607124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07577395439147949}",0,Compute: 46399991814822265040368010401781 * 21715194528768799259923799698466
1283,ilp_assign,8,31,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 10, 6, 15, 24, 4, 22], [1, 4, 9, 18, 10, 4, 24], [10, 7, 15, 24, 8, 24, 1], [14, 3, 11, 15, 15, 15, 18], [21, 8, 14, 9, 13, 20, 3], [19, 13, 22, 13, 4, 4, 12], [12, 12, 13, 16, 16, 7, 21]]"
1284,mul,8,4572298509295981,56659049,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 56659049 * 80698469
1285,ilp_partition,32,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 59, 78, 24, 69, 74, 75, 14, 76, 37, 54, 45, 65, 45, 20, 73, 39, 16, 11, 51, 76, 39, 12, 89]"
1286,sub,16,3190790663968143,7,0,-9689255746243067,0,"{'ok': True, 'value': 38757022984972268, 'stdout': '38757022984972268\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0778799057006836}",0,Compute: 9689255746243067 - 6498465082274924
1287,ilp_prod,32,213,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [79, 32, 39, 96, 23, 11]
consumption (rows=resources) = [[24, 5, 7, 29, 19, 32], [23, 24, 30, 10, 19, 31], [27, 12, 7, 31, 28, 8], [18, 14, 23, 20, 18, 31]]
capacity = [86, 103, 64, 120]
upper_bounds = [3, 4, 3, 3, 3, 3]"
1288,rod,2,12,6,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
1289,ilp_assign,32,90,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[49, 69, 18, 22, 10, 21, 57], [31, 43, 45, 41, 49, 28, 22], [8, 43, 62, 53, 68, 81, 29], [29, 37, 8, 13, 54, 14, 67], [90, 10, 60, 30, 41, 6, 60], [94, 62, 78, 75, 12, 13, 76], [37, 77, 64, 70, 7, 56, 16]]"
1290,ilp_prod,32,450,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 88, 49, 75, 5, 10]
consumption (rows=resources) = [[2, 1, 23, 3, 25, 27], [26, 27, 30, 11, 4, 9], [2, 22, 28, 13, 9, 31], [13, 28, 16, 13, 11, 25]]
capacity = [66, 70, 81, 82]
upper_bounds = [3, 3, 3, 6, 3, 3]"
1291,sub,2,17,-5,0,55,0,"{'ok': True, 'value': 288, 'stdout': '288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08715558052062988}",0,Compute: 72 - 55
1292,lcs,8,4,100,0,29,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdaccddc""
T = ""abddbda"""
1293,sub,2,14,-4,0,0,0,"{'ok': True, 'value': 300, 'stdout': '300\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08777117729187012}",0,Compute: 75 - 61
1294,ilp_assign,32,71,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 89, 69, 4, 2, 69, 94], [15, 70, 44, 36, 65, 81, 67], [41, 5, 70, 25, 31, 88, 4], [26, 61, 2, 41, 26, 88, 1], [7, 69, 73, 80, 31, 72, 36], [53, 16, 72, 77, 47, 18, 20], [48, 62, 10, 81, 48, 72, 1]]"
1295,mul,32,6979678386857195858553480037021834665368541723232219436424934500,84719117,0,3,0,"{'ok': True, 'value': 338876469151644809661995066466000, 'stdout': '338876469151644809661995066466000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08202576637268066}",0,Compute: 84719117287911202415498766616500 * 82386108475815586049459182502493
1296,knap,8,121,7,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 16, 16, 11, 3, 7, 6, 12]
V = [6, 24, 10, 24, 13, 30, 25, 29]
C = 40"
1297,sub,2,26,18,0,0,0,"{'ok': True, 'value': 156, 'stdout': '156\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07357525825500488}",0,Compute: 39 - 13
1298,rod,2,6,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
1299,rod,2,12,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
1300,rod,32,1040,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [12, 65, 82, 45, 31, 80, 11, 13, 32, 48, 37, 28, 43, 81, 38, 13, 33, 5, 94, 28, 49, 14, 6, 89, 59, 29, 35, 55, 24, 66, 2, 74]"
1301,rod,4,16,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 2, 3, 4]"
1302,rod,16,560,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 23, 25, 42, 40, 35, 32, 45, 6, 9, 44, 22, 5, 44, 22, 34]"
1303,sub,32,4480951680887470309966629125100,-7,0,-2015,0,"{'ok': True, 'value': 287200586770340249238109527456516, 'stdout': '287200586770340249238109527456516\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10989761352539062}",0,Compute: 71800146692585062309527381864129 - 67319195011697591999560752739029
1304,add,8,70423453,11316529,0,0,0,"{'ok': True, 'value': 236427696, 'stdout': '236427696\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0778806209564209}",0,Compute: 59106924 + 11316529
1305,mul,32,6003633935190549680110289606663949302887202494189805726198094516,,0,0,0,"{'ok': True, 'value': 382654463791543379028689488190676, 'stdout': '382654463791543379028689488190676\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08336687088012695}",0,Compute: 95663615947885844757172372047669 * 62757756705131417525897356747364
1306,ilp_partition,32,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [31, 65, 58, 65, 40, 41, 11, 21, 8, 19, 51, 63, 3, 96, 66, 88, 74, 51, 88, 54, 78, 63, 93, 75]"
1307,sub,16,1102462440853418,-1365651295,0,0,0,"{'ok': True, 'value': 32270554020699896, 'stdout': '32270554020699896\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08093595504760742}",0,Compute: 8067638505174974 - 6965176064321556
1308,ilp_prod,8,59,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 15, 7, 14]
consumption (rows=resources) = [[5, 6, 6, 1], [1, 2, 7, 6], [6, 4, 5, 5], [7, 6, 3, 3]]
capacity = [19, 20, 23, 25]
upper_bounds = [3, 3, 3, 3]"
1309,add,4,6506,7,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08678150177001953}",0,Compute: 3051 + 3455
1310,lcs,8,3,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbddacbb""
T = ""dcbadaaa"""
1311,ilp_prod,2,21,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[1, 2], [3, 2]]
capacity = [8, 10]
upper_bounds = [3, 4]"
1312,rod,16,184,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [9, 18, 35, 12, 43, 33, 38, 11, 44, 42, 47, 15, 41, 1, 48, 9]"
1313,add,32,101742303113975490545505436736864,243822706895700,0,2,0,"{'ok': True, 'value': 309440129697621911635986405253036, 'stdout': '309440129697621911635986405253036\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07594490051269531}",0,Compute: 77360032424405477908996601313259 + 24382270689570012636508835423605
1314,ilp_assign,2,4,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 2], [2, 3]]"
1315,knap,2,7,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 4]
V = [7, 3, 6]
C = 5"
1316,ilp_partition,2,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 2, 5]"
1317,add,8,93715119,2,0,2,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07192134857177734}",0,Compute: 39427271 + 54287848
1318,sub,2,45,,0,0,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0751335620880127}",0,Compute: 80 - 35
1319,knap,8,85,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 3, 8, 8, 4, 8, 3, 10]
V = [24, 6, 8, 24, 16, 19, 20, 8]
C = 28"
1320,ilp_prod,2,15,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5]
consumption (rows=resources) = [[3, 3], [2, 3]]
capacity = [10, 10]
upper_bounds = [3, 3]"
1321,rod,2,4,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 2]"
1322,sub,8,11180417,3,0,46096542,0,"{'ok': True, 'value': 184386328, 'stdout': '184386328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09284090995788574}",0,Compute: 46096582 - 34916165
1323,knap,2,9,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 2]
V = [9, 1, 5]
C = 5"
1324,rod,2,12,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 4]"
1325,add,8,126964053,3,0,4,0,"{'ok': True, 'value': 322083740, 'stdout': '322083740\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07135558128356934}",0,Compute: 80520935 + 46443118
1326,ilp_assign,8,32,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 4, 24, 16, 23, 12, 9], [4, 11, 13, 4, 6, 17, 24], [18, 15, 24, 17, 3, 16, 11], [19, 4, 11, 4, 4, 18, 8], [16, 8, 16, 11, 2, 6, 2], [1, 14, 22, 11, 10, 18, 20], [24, 8, 12, 5, 22, 24, 3]]"
1327,lcs,8,2,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaddacdd""
T = ""bbdbbbdb"""
1328,lcs,8,4,,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbdbbcac""
T = ""cbdcbbd"""
1329,mul,8,353284970395770,,0,0,0,"{'ok': True, 'value': 74043480, 'stdout': '74043480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07783865928649902}",0,Compute: 18510870 * 19085271
1330,ilp_partition,16,1,-9,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 31, 7, 37, 25, 17, 32, 31, 14, 21, 10, 25, 46, 43, 16, 32]"
1331,add,8,164996712,,0,6,0,"{'ok': True, 'value': 348394172, 'stdout': '348394172\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0739130973815918}",0,Compute: 87098543 + 77898169
1332,knap,8,95,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 13, 5, 6, 9, 4, 14, 4]
V = [31, 26, 4, 32, 6, 6, 15, 22]
C = 34"
1333,rod,4,48,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 8, 10, 8]"
1334,mul,32,5794701169179160321566991534152496847374791397066574575102440960,0,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07611703872680664}",0,Compute: 65971951096771479182788462445256 * 87835831332002853732780447700160
1335,ilp_prod,8,48,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 7, 15, 8]
consumption (rows=resources) = [[8, 2, 5, 8], [3, 6, 3, 2], [3, 2, 7, 3], [3, 4, 5, 2]]
capacity = [17, 22, 16, 22]
upper_bounds = [3, 3, 3, 3]"
1336,knap,4,29,10000,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 6, 5]
V = [13, 1, 13, 16]
C = 10"
1337,ilp_prod,8,38,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 4, 5, 14]
consumption (rows=resources) = [[6, 2, 8, 5], [1, 1, 5, 6], [6, 4, 5, 8], [5, 2, 4, 7]]
capacity = [28, 31, 21, 29]
upper_bounds = [3, 5, 3, 3]"
1338,ilp_prod,8,37,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 6, 11, 15]
consumption (rows=resources) = [[1, 2, 6, 2], [7, 8, 8, 3], [7, 1, 5, 7], [7, 7, 8, 1]]
capacity = [23, 20, 18, 31]
upper_bounds = [3, 3, 3, 3]"
1339,sub,4,2530,20,0,0,0,"{'ok': True, 'value': 34564, 'stdout': '34564\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10735821723937988}",0,Compute: 8641 - 6111
1340,add,4,15345,0,0,6,0,"{'ok': True, 'value': 30764, 'stdout': '30764\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08005380630493164}",0,Compute: 7691 + 7654
1341,ilp_assign,32,112,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[35, 59, 16, 36, 69, 19, 44], [12, 74, 7, 71, 46, 58, 6], [65, 1, 93, 60, 79, 54, 41], [66, 50, 80, 46, 25, 52, 79], [87, 7, 67, 39, 43, 60, 7], [40, 85, 41, 35, 68, 27, 85], [48, 39, 13, 38, 64, 89, 25]]"
1342,knap,32,1378,28,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 40, 7, 42, 38, 47, 28, 10, 57, 10, 2, 11, 24, 39, 33, 49, 52, 20, 9, 14, 56, 7, 41, 32, 9, 9, 38, 44, 24, 45, 33, 17]
V = [108, 56, 35, 61, 72, 28, 127, 47, 50, 39, 109, 57, 31, 51, 36, 54, 89, 60, 23, 80, 58, 34, 61, 61, 70, 23, 68, 42, 75, 10, 59, 60]
C = 454"
1343,knap,32,1363,2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 14, 62, 35, 32, 27, 38, 51, 38, 58, 57, 55, 55, 28, 19, 50, 52, 59, 11, 42, 10, 42, 56, 46, 19, 52, 41, 22, 21, 27, 47, 38]
V = [57, 89, 55, 60, 108, 27, 71, 19, 33, 120, 44, 90, 23, 28, 117, 38, 99, 64, 11, 43, 4, 128, 36, 2, 35, 2, 26, 82, 49, 73, 74, 4]
C = 611"
1344,lcs,8,4,56,0,18,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdaacbac""
T = ""bcabcdd"""
1345,rod,8,128,12,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 13, 12, 2, 2, 14, 20, 14]"
1346,ilp_assign,2,7,7,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [5, 3]]"
1347,knap,4,36,7,0,12,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 1, 4]
V = [12, 12, 12, 12]
C = 7"
1348,add,16,11631171974051161,0,0,7195194884962863,0,"{'ok': True, 'value': 28780779539851452, 'stdout': '28780779539851452\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07546043395996094}",0,Compute: 7195194884962863 + 4435977089088298
1349,knap,32,1615,124,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 40, 26, 41, 52, 39, 52, 30, 40, 22, 54, 64, 21, 64, 54, 53, 43, 47, 10, 38, 34, 10, 32, 18, 57, 19, 53, 44, 54, 43, 23, 29]
V = [50, 74, 109, 31, 96, 87, 124, 107, 81, 6, 81, 27, 92, 3, 119, 73, 68, 92, 91, 9, 24, 3, 84, 93, 97, 120, 53, 55, 88, 11, 55, 44]
C = 613"
1350,ilp_partition,8,1,4,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 2, 22, 23, 22, 22, 10, 4]"
1351,add,32,120658448554310229893415573083359,247156622294591500893678323108,0,120,0,"{'ok': True, 'value': 98862648917836600357471329243508, 'stdout': '98862648917836600357471329243508\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08163881301879883}",0,Compute: 24715662229459150089367832310877 + 95942786324851079804047740772482
1352,ilp_partition,8,0,21,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 18, 22, 19, 6, 18, 20, 3]"
1353,ilp_assign,32,113,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[81, 12, 18, 37, 77, 65, 60], [58, 47, 75, 23, 22, 48, 19], [7, 84, 10, 39, 36, 35, 61], [69, 41, 39, 57, 56, 10, 61], [72, 74, 43, 34, 69, 62, 36], [88, 10, 42, 58, 44, 23, 94], [92, 32, 57, 65, 86, 48, 12]]"
1354,rod,2,6,14,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 6]"
1355,ilp_prod,16,310,25,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 41, 32, 41, 34, 15]
consumption (rows=resources) = [[3, 5, 12, 1, 6, 7], [2, 4, 8, 2, 15, 11], [10, 7, 1, 7, 12, 11], [16, 12, 4, 2, 4, 14]]
capacity = [58, 33, 44, 56]
upper_bounds = [3, 4, 4, 6, 3, 3]"
1356,ilp_partition,16,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 41, 4, 31, 43, 29, 22, 13, 2, 37, 24, 39, 8, 21, 24, 39]"
1357,rod,4,24,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 12, 6, 2]"
1358,ilp_assign,32,177,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 95, 96, 87, 77, 29, 34], [89, 77, 94, 85, 77, 47, 95], [45, 54, 80, 85, 24, 6, 77], [3, 96, 35, 67, 67, 33, 77], [20, 78, 48, 11, 53, 27, 41], [78, 64, 74, 96, 40, 55, 37], [33, 10, 55, 26, 6, 29, 32]]"
1359,ilp_assign,32,106,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 21, 71, 63, 27, 74, 48], [73, 22, 28, 69, 72, 57, 89], [55, 4, 70, 52, 78, 4, 95], [75, 91, 19, 79, 91, 48, 25], [15, 36, 88, 54, 32, 34, 5], [85, 14, 86, 3, 81, 43, 88], [65, 89, 54, 22, 95, 11, 68]]"
1360,add,2,25,30,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07433295249938965}",0,Compute: 12 + 13
1361,ilp_partition,4,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 7, 12, 7]"
1362,ilp_prod,8,160,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 21, 12, 16]
consumption (rows=resources) = [[4, 4, 7, 2], [7, 3, 5, 1], [5, 4, 6, 2], [5, 7, 2, 3]]
capacity = [23, 31, 26, 30]
upper_bounds = [4, 4, 3, 10]"
1363,mul,8,4336939999943430,1,0,4,0,"{'ok': True, 'value': 306940964, 'stdout': '306940964\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08582448959350586}",0,Compute: 76735241 * 56518230
1364,ilp_partition,4,2,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 8, 12, 3]"
1365,sub,32,31753410615964918091554044754,-79707510348430999847910136260401,0,3,0,"{'ok': True, 'value': 318830041393723999391640545041604, 'stdout': '318830041393723999391640545041604\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08011889457702637}",0,Compute: 79707510348430999847910136260401 - 79675756937815034929818582215647
1366,lcs,8,5,3,0,18,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbccaabb""
T = ""ccdbcaca"""
1367,rod,8,104,,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 3, 6, 16, 5, 12, 10, 6]"
1368,mul,2,6240,840,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 96 * 65
1369,knap,16,413,114,0,1977,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 5, 3, 10, 13, 27, 20, 15, 19, 6, 5, 17, 20, 29, 32]
V = [35, 56, 55, 32, 4, 47, 14, 22, 20, 20, 59, 22, 1, 2, 54, 49]
C = 114"
1370,ilp_assign,4,13,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 10, 4, 7], [5, 5, 4, 11], [5, 7, 1, 1], [3, 12, 8, 7]]"
1371,mul,8,4944685305914702,1,0,0,0,"{'ok': True, 'value': 29136936, 'stdout': '29136936\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08310890197753906}",0,Compute: 72884234 * 67843003
1372,rod,4,24,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 10, 3, 1]"
1373,lcs,2,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""c"""
1374,knap,8,113,7,0,199,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 2, 8, 7, 9, 8, 14, 9]
V = [16, 24, 32, 27, 13, 30, 21, 3]
C = 32"
1375,lcs,8,3,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcbbbcb""
T = ""addbbaab"""
1376,lcs,2,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""c"""
1377,rod,16,576,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [36, 15, 24, 12, 5, 30, 25, 35, 23, 41, 33, 38, 21, 20, 35, 41]"
1378,add,4,14059,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 6139 + 7920
1379,sub,4,5548,7,0,8192,0,"{'ok': True, 'value': 29360, 'stdout': '29360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08098602294921875}",0,Compute: 7340 - 1792
1380,add,16,3973021821847261,3,0,540,0,"{'ok': True, 'value': 5840114224321008, 'stdout': '5840114224321008\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07196235656738281}",0,Compute: 1460028556080252 + 2512993265767009
1381,rod,4,36,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 8, 10, 3]"
1382,add,8,32334159,16839590,0,3,0,"{'ok': True, 'value': 61978276, 'stdout': '61978276\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08193016052246094}",0,Compute: 15494569 + 16839590
1383,ilp_assign,8,29,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1, 16, 21, 12, 13, 24], [5, 19, 12, 5, 20, 8, 13], [11, 7, 17, 21, 18, 4, 10], [15, 7, 19, 22, 15, 5, 9], [2, 6, 7, 23, 16, 18, 7], [2, 13, 21, 12, 16, 17, 14], [8, 7, 21, 3, 1, 5, 16]]"
1384,ilp_partition,4,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 2, 8, 4]"
1385,sub,8,988524,7,0,0,0,"{'ok': True, 'value': 113471844, 'stdout': '113471844\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08817458152770996}",0,Compute: 28367961 - 27379437
1386,ilp_partition,16,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 33, 45, 11, 6, 13, 10, 1, 2, 4, 28, 27, 43, 16, 26, 43]"
1387,sub,2,34,-4,0,74,0,"{'ok': True, 'value': 196, 'stdout': '196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08030962944030762}",0,Compute: 49 - 15
1388,ilp_assign,16,71,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 42, 44, 1, 6, 31, 20], [19, 22, 20, 15, 35, 32, 42], [24, 39, 34, 39, 39, 22, 9], [5, 45, 6, 5, 4, 12, 28], [37, 27, 32, 36, 25, 39, 12], [45, 41, 43, 7, 26, 35, 15], [24, 5, 25, 47, 2, 20, 33]]"
1389,lcs,8,3,35,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babddcda""
T = ""dcaadbcb"""
1390,ilp_assign,4,20,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 6, 9, 6], [4, 5, 1, 5], [9, 10, 5, 8], [5, 5, 3, 5]]"
1391,mul{'ok': True, 'value': 128614508, 'stdout': '128614508\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07716250419616699}",0,Compute: 32153627 * 34305749
1392,mul,2,3420,8100,0,70,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 38 * 90
1393,rod,4,20,13,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 1, 8, 11]"
1394,ilp_partition,8,1,12,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 11, 22, 23, 4, 19, 15, 3]"
1395,ilp_prod,16,175,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 15, 47, 35, 12, 15]
consumption (rows=resources) = [[1, 9, 3, 1, 12, 1], [1, 3, 9, 6, 4, 14], [7, 10, 13, 10, 2, 14], [14, 6, 15, 9, 5, 1]]
capacity = [48, 36, 61, 45]
upper_bounds = [3, 5, 3, 5, 4, 3]"
1396,knap,2,10,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 3]
V = [10, 8, 2]
C = 6"
1397,knap,16,467,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 4, 1, 29, 22, 22, 11, 15, 32, 1, 26, 3, 19, 28, 1, 19]
V = [19, 18, 52, 1, 55, 63, 19, 26, 16, 41, 64, 56, 9, 41, 46, 27]
C = 127"
1398,knap,2,10,5,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 4]
V = [6, 9, 10]
C = 5"
1399,ilp_assign,32,95,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 67, 89, 3, 89, 66, 30], [7, 1, 58, 78, 68, 25, 34], [86, 55, 8, 84, 80, 96, 35], [14, 29, 26, 12, 30, 28, 80], [73, 60, 49, 22, 27, 63, 35], [71, 22, 90, 89, 63, 14, 73], [67, 46, 1, 95, 50, 46, 28]]"
1400,rod,32,1632,729,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [51, 26, 3, 56, 12, 85, 91, 53, 94, 40, 23, 46, 88, 9, 10, 71, 73, 3, 83, 1, 32, 10, 38, 78, 45, 22, 75, 43, 7, 19, 29, 43]"
1401,mul,32,3397574020194140492813764547460773131514536774409648605646356638,1,0,120,0,"{'ok': True, 'value': 323187424652019372768936661676236, 'stdout': '323187424652019372768936661676236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09997749328613281}",0,Compute: 80796856163004843192234165419059 * 42050819568271978837674805698282
1402,lcs,32,19,6,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacadadbaccadcbacdbbdcbbadcaaaba""
T = ""bccdcabbcdbbdadcaccccaddbdabcca"""
1403,ilp_assign,2,10,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [4, 6]]"
1404,mul,16,9608259909504315253717218407152,90579268361059,0,0,0,"{'ok': True, 'value': 36231707344423768, 'stdout': '36231707344423768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0973970890045166}",0,Compute: 9057926836105942 * 1060757067633256
1405,sub,4,3141,20,0,0,0,"{'ok': True, 'value': 32008, 'stdout': '32008\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08298444747924805}",0,Compute: 8002 - 4861
1406,ilp_partition,16,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 7, 14, 40, 29, 29, 21, 34, 22, 14, 29, 48, 18, 26, 5, 13]"
1407,ilp_assign,8,22,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 12, 24, 6, 24, 3, 23], [9, 12, 11, 2, 17, 10, 22], [5, 24, 20, 16, 21, 2, 15], [21, 14, 20, 3, 1, 1, 2], [1, 1, 7, 12, 7, 15, 2], [23, 2, 8, 10, 7, 18, 6], [7, 19, 7, 12, 18, 7, 24]]"
1408,knap,16,389,-8,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 24, 18, 10, 4, 27, 20, 19, 18, 27, 6, 2, 18, 7, 19, 4]
V = [27, 35, 6, 15, 61, 26, 2, 30, 2, 60, 59, 26, 62, 19, 45, 6]
C = 119"
1409,lcs,2,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""ad"""
1410,knap,16,470,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 31, 4, 32, 8, 21, 12, 12, 21, 27, 10, 12, 12, 24, 26, 6]
V = [28, 20, 63, 48, 35, 23, 40, 62, 5, 50, 18, 59, 40, 44, 16, 45]
C = 131"
1411,sub,8,10661192,3,0,0,0,"{'ok': True, 'value': 229218372, 'stdout': '229218372\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07728385925292969}",0,Compute: 57304593 - 46643401
1412,ilp_prod,16,151,27,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 24, 34, 17, 31, 16]
consumption (rows=resources) = [[9, 12, 8, 5, 8, 6], [16, 5, 10, 5, 12, 6], [10, 14, 1, 14, 11, 11], [15, 10, 9, 10, 10, 3]]
capacity = [35, 64, 38, 62]
upper_bounds = [3, 3, 4, 3, 3, 3]"
1413,add,8,162741255,0,0,89017350,0,"{'ok': True, 'value': 362711400, 'stdout': '362711400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07734990119934082}",0,Compute: 90677850 + 72063405
1414,sub,8,18235666,0,0,3,0,"{'ok': True, 'value': 217264580, 'stdout': '217264580\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07812762260437012}",0,Compute: 54316145 - 36080479
1415,sub,4,7541,1,0,0,0,"{'ok': True, 'value': 39148, 'stdout': '39148\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07910585403442383}",0,Compute: 9787 - 2246
1416,rod,2,10,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 5]"
1417,ilp_partition,2,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 5, 4]"
1418,knap,4,20,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 6, 7]
V = [8, 12, 2, 8]
C = 11"
1419,mul,16,5204322517344558399167912845911,,0,0,0,"{'ok': True, 'value': 12267823731795492, 'stdout': '12267823731795492\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07793545722961426}",0,Compute: 3066955932948873 * 1696901628560607
1420,mul,8,605222190351852,739353535353535,0,6,0,"{'ok': True, 'value': 216783888, 'stdout': '216783888\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07915377616882324}",0,Compute: 54195972 * 11167291
1421,ilp_partition,16,1,2025,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 38, 6, 30, 4, 42, 27, 6, 5, 32, 45, 38, 18, 23, 46, 27]"
1422,ilp_prod,4,33,27,0,13,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 5, 11]
consumption (rows=resources) = [[2, 3, 4], [4, 3, 3], [4, 4, 4]]
capacity = [12, 11, 13]
upper_bounds = [3, 3, 3]"
1423,rod,8,112,22,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 8, 13, 6, 4, 8, 10, 10]"
1424,ilp_prod,4,30,25,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8, 11]
consumption (rows=resources) = [[4, 4, 3], [4, 2, 4], [3, 4, 3]]
capacity = [14, 11, 14]
upper_bounds = [3, 3, 3]"
1425,mul,16,1652905343106619608764137367610,16084197213492420,0,1608419721349242,0,"{'ok': True, 'value': 6433678885396968, 'stdout': '6433678885396968\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07978606224060059}",0,Compute: 1608419721349242 * 1027657968356705
1426,knap,32,1684,0,0,55,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 60, 7, 49, 38, 21, 19, 39, 48, 60, 15, 5, 22, 43, 54, 47, 54, 1, 49, 47, 58, 15, 23, 36, 47, 55, 11, 14, 21, 14, 43]
V = [16, 1, 54, 119, 13, 29, 115, 114, 70, 95, 28, 121, 5, 100, 12, 21, 122, 90, 55, 83, 29, 97, 7, 94, 72, 67, 105, 48, 67, 121, 10, 122]
C = 512"
1427,knap,2,8,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5]
V = [8, 4, 2]
C = 5"
1428,add,32,80316133612152352347806885839431,1,0,58948305530154519983119302257393,0,"{'ok': True, 'value': 235793222120618079932477209029572, 'stdout': '235793222120618079932477209029572\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10238313674926758}",0,Compute: 58948305530154519983119302257393 + 21367828081997832364687583582038
1429,rod,2,6,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
1430,sub,32,9416335271859270579921233381384,-43430657603227509237822993253496,0,8,0,"{'ok': True, 'value': 211387971500347119270976906539520, 'stdout': '211387971500347119270976906539520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08389091491699219}",0,Compute: 52846992875086779817744226634880 - 43430657603227509237822993253496
1431,lcs,32,19,6,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daacbddcadcacaadbdcbdadcdbccbdbd""
T = ""aaddadbcbcdddcacbacbdbdaddaaaad"""
1432,knap,4,33,10000,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 1, 8]
V = [16, 11, 6, 16]
C = 6"
1433,knap,8,142,7,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 9, 5, 15, 12, 9, 4, 3]
V = [23, 26, 29, 24, 27, 29, 32, 25]
C = 35"
1434,rod,4,36,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 1, 1, 7]"
1435,ilp_prod,16,172,1000000,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 25, 10, 5, 43, 6]
consumption (rows=resources) = [[5, 12, 13, 3, 11, 11], [12, 3, 2, 9, 5, 16], [9, 9, 3, 5, 11, 5], [8, 15, 14, 3, 8, 9]]
capacity = [62, 56, 47, 33]
upper_bounds = [4, 3, 3, 6, 4, 3]"
1436,ilp_assign,4,24,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5, 3, 10], [12, 4, 2, 3], [12, 11, 10, 11], [7, 9, 10, 12]]"
1437,lcs,32,18,,0,21,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccbaabccabadddadabbcdbbabbadadb""
T = ""adacccabdbdabbcacbdbacaaccabcdcac"""
1438,ilp_assign,8,44,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 20, 15, 9, 1, 15, 15], [15, 17, 14, 24, 20, 7, 20], [12, 21, 14, 6, 6, 22, 19], [15, 18, 12, 20, 17, 1, 7], [24, 4, 12, 24, 2, 21, 23], [15, 3, 11, 21, 4, 3, 17], [12, 8, 23, 3, 11, 5, 8]]"
1439,lcs,8,5,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabcbadb""
T = ""aabbdbcc"""
1440,lcs,2,1,2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""dcc"""
1441,lcs,8,3,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcaaabd""
T = ""bbabdaccc"""
1442,ilp_assign,2,7,7,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [2, 2]]"
1443,knap,4,28,7,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 6, 8, 6]
V = [4, 13, 2, 15]
C = 14"
1444,ilp_prod,2,12,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 4]
consumption (rows=resources) = [[3, 2], [3, 3]]
capacity = [10, 10]
upper_bounds = [3, 3]"
1445,ilp_partition,2,0,4,0,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 6, 2]"
1446,ilp_prod,4,48,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 12, 9]
consumption (rows=resources) = [[1, 2, 3], [4, 4, 3], [1, 3, 2]]
capacity = [16, 16, 12]
upper_bounds = [4, 4, 5]"
1447,knap,32,1713,51,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 17, 60, 32, 14, 6, 19, 42, 53, 51, 14, 54, 10, 2, 28, 56, 31, 38, 31, 35, 10, 58, 10, 19, 24, 61, 45, 56, 39, 16, 41, 5]
V = [83, 37, 66, 56, 120, 112, 36, 87, 18, 1, 80, 31, 61, 121, 110, 25, 82, 60, 3, 122, 71, 66, 47, 61, 32, 127, 6, 24, 28, 123, 39, 51]
C = 504"
1448,lcs,16,9,4,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabcbbbdabdcdcba""
T = ""ccbcadbbbbcbcac"""
1449,ilp_prod,4,25,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 7, 6]
consumption (rows=resources) = [[2, 2, 2], [2, 1, 3], [4, 3, 2]]
capacity = [12, 11, 9]
upper_bounds = [3, 3, 3]"
1450,ilp_prod,4,53,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 11, 3]
consumption (rows=resources) = [[2, 2, 4], [1, 3, 4], [2, 3, 1]]
capacity = [11, 11, 15]
upper_bounds = [5, 3, 3]"
1451,knap,2,12,10,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 5]
V = [2, 10, 7]
C = 4"
1452,knap,8,126,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 7, 9, 1, 16, 15, 5, 5]
V = [21, 26, 29, 18, 30, 24, 26, 6]
C = 31"
1453,rod,32,2240,89,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [70, 37, 96, 57, 36, 66, 92, 12, 89, 1, 94, 3, 13, 35, 85, 83, 62, 51, 75, 22, 74, 87, 61, 25, 40, 43, 53, 19, 10, 44, 45, 21]"
1454,lcs,8,4,0,0,13,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbadcacd""
T = ""ddadcdbcb"""
1455,ilp_prod,32,273,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 91, 53, 16, 85, 78]
consumption (rows=resources) = [[9, 15, 14, 26, 17, 4], [25, 24, 15, 32, 26, 27], [28, 22, 14, 29, 25, 17], [9, 3, 32, 1, 26, 23]]
capacity = [128, 73, 84, 91]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1456,lcs,2,1,100,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""adc"""
1457,mul,32,637744318364276774748683120379116891397415104494055436009747131,,0,4,0,"{'ok': True, 'value': 111506030874880503697398815221164, 'stdout': '111506030874880503697398815221164\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10024452209472656}",0,Compute: 27876507718720125924349703805291 * 22877482531142429327099184992241
1458,rod,8,36,12,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 3, 14, 12, 9, 2, 5, 23]"
1459,ilp_partition,4,2,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 2, 11, 4]"
1460,sub,16,8462842683366504,-9741671462527909,0,0,0,"{'ok': True, 'value': 38966685850111636, 'stdout': '38966685850111636\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07716608047485352}",0,Compute: 9741671462527909 - 1278828779161405
1461,rod,32,1344,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [42, 5, 89, 6, 89, 69, 49, 17, 5, 2, 45, 7, 83, 42, 26, 6, 21, 18, 55, 77, 50, 64, 81, 89, 94, 63, 85, 76, 39, 67, 37, 40]"
1462,ilp_partition,8,0,-40,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 6, 7, 1, 2, 8, 6, 14]"
1463,lcs,2,1,100,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""b"""
1464,ilp_prod,4,36,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 3, 11]
consumption (rows=resources) = [[2, 3, 1], [4, 3, 1], [3, 1, 4]]
capacity = [9, 9, 13]
upper_bounds = [3, 3, 3]"
1465,sub,32,6457575227282184087746506398811,0,0,120,0,"{'ok': True, 'value': 317922823038384482604238916615040, 'stdout': '317922823038384482604238916615040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10489726066589355}",0,Compute: 79480705759596120651059729153760 - 73023130532313936563313222754949
1466,mul,4,3620762,20,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 1954 * 1853
1467,ilp_partition,32,0,85,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 85, 38, 85, 77, 21, 85, 2, 3, 77, 57, 10, 24, 18, 66, 73, 72, 44, 77, 14, 96, 57, 93, 24]"
1468,sub,32,17903062767504362949651163277949,-1,0,120,0,"{'ok': True, 'value': 223800838947556947297036335976664, 'stdout': '223800838947556947297036335976664\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09051942825317383}",0,Compute: 55950209736889236824259083994166 - 38047146969384873874607920716217
1469,ilp_assign,16,42,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 10, 7, 32, 44, 18, 45], [40, 43, 31, 34, 32, 10, 29], [43, 36, 41, 5, 9, 46, 22], [38, 2, 6, 39, 28, 25, 37], [1, 34, 24, 47, 20, 39, 22], [41, 36, 3, 39, 12, 15, 10], [44, 29, 1, 16, 29, 24, 5]]"
1470,ilp_assign,4,23,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 12, 1, 3], [5, 9, 12, 10], [7, 11, 3, 10], [8, 12, 5, 10]]"
1471,ilp_assign,8,44,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 22, 9, 6, 24, 19, 10], [10, 16, 17, 11, 17, 21, 20], [14, 4, 2, 3, 3, 10, 20], [14, 21, 13, 12, 11, 19, 3], [23, 5, 18, 19, 24, 15, 17], [14, 8, 18, 9, 24, 14, 11], [21, 10, 6, 2, 4, 24, 4]]"
1472,rod,16,512,,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [32, 21, 2, 48, 22, 44, 21, 20, 44, 42, 25, 6, 13, 34, 48, 46]"
1473,knap,8,93,3,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 13, 3, 15, 10, 11, 7, 14]
V = [31, 5, 25, 17, 1, 7, 20, 15]
C = 42"
1474,mul,32,2838240257987645328733256680295921424109227332180165994602404056,90946258108779369834,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09118366241455078}",0,Compute: 31207883831711596002562075797686 * 90946258108779369834839940161796
1475,add,32,131687948965287340371268625041386,21,0,51758509027914366558601149751927,0,"{'ok': True, 'value': 319717759749491895250669901157836, 'stdout': '319717759749491895250669901157836\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10039710998535156}",0,Compute: 79929439937372973812667475289459 + 51758509027914366558601149751927
1476,rod,2,2,37,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 2]"
1477,sub,16,24070557123889,-1438868670316081,0,0,0,"{'ok': True, 'value': 5851756909759880, 'stdout': '5851756909759880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09824132919311523}",0,Compute: 1462939227439970 - 1438868670316081
1478,ilp_prod,8,62,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 12, 6, 12]
consumption (rows=resources) = [[2, 2, 6, 8], [5, 8, 5, 8], [8, 3, 5, 5], [2, 5, 1, 7]]
capacity = [20, 31, 26, 24]
upper_bounds = [3, 3, 3, 3]"
1479,ilp_assign,16,61,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[42, 6, 19, 13, 24, 11, 10], [47, 21, 21, 21, 11, 42, 48], [12, 20, 36, 33, 17, 2, 15], [6, 34, 31, 23, 30, 22, 24], [4, 7, 42, 26, 46, 27, 9], [8, 19, 3, 43, 35, 26, 37], [23, 17, 42, 26, 17, 28, 39]]"
1480,ilp_prod,16,156,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 12, 16, 3, 19, 39]
consumption (rows=resources) = [[13, 14, 12, 15, 13, 5], [13, 7, 15, 2, 10, 9], [9, 2, 7, 13, 15, 8], [8, 9, 5, 11, 2, 1]]
capacity = [63, 39, 41, 41]
upper_bounds = [3, 4, 3, 3, 3, 4]"
1481,ilp_assign,16,50,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 14, 28, 31, 48, 6, 14], [34, 12, 37, 48, 48, 26, 21], [9, 13, 33, 15, 42, 9, 5], [2, 48, 8, 47, 30, 31, 12], [2, 38, 42, 30, 17, 32, 48], [37, 45, 8, 44, 1, 17, 9], [15, 30, 36, 16, 45, 5, 20]]"
1482,ilp_partition,4,3,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 3, 3, 5]"
1483,rod,2,4,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 2]"
1484,knap,2,10,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 2]
V = [8, 10, 9]
C = 6"
1485,rod,32,2240,0,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [70, 73, 77, 83, 23, 58, 78, 6, 93, 37, 73, 46, 62, 6, 63, 54, 41, 28, 16, 27, 96, 64, 59, 21, 53, 75, 76, 14, 15, 11, 9, 30]"
1486,rod,32,1024,1,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [17, 64, 58, 79, 40, 2, 34, 76, 40, 53, 54, 50, 20, 30, 67, 76, 38, 30, 18, 8, 40, 25, 51, 45, 93, 57, 18, 10, 37, 64, 55, 35]"
1487,lcs,2,1,40,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""da"""
1488,ilp_partition,8,0,613,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 11, 10, 9, 19, 11, 19, 13]"
1489,ilp_partition,32,1,7,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 70, 17, 67, 65, 2, 80, 28, 32, 52, 77, 26, 20, 7, 88, 50, 44, 51, 68, 75, 37, 53, 96, 7]"
1490,sub,2,28,18,0,10,0,"{'ok': True, 'value': 156, 'stdout': '156\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09123802185058594}",0,Compute: 39 - 11
1491,ilp_assign,4,13,-1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 10, 8, 2], [5, 1, 9, 5], [12, 9, 6, 4], [4, 4, 12, 4]]"
1492,ilp_assign,16,59,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 38, 23, 16, 45, 13, 32], [34, 20, 8, 11, 31, 17, 6], [7, 25, 21, 2, 6, 22, 3], [36, 13, 36, 6, 27, 13, 7], [21, 30, 31, 7, 38, 28, 33], [22, 6, 14, 35, 44, 48, 37], [25, 12, 36, 23, 11, 4, 30]]"
1493,mul,32,1739241783789702660596243079949488569588740079480548807931480547,1,0,0,0,"{'ok': True, 'value': 79367444441985331624549227876412, 'stdout': '79367444441985331624549227876412\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0977780818939209}",0,Compute: 19841861110496332906137306969103 * 87655173781538304168448112781549
1494,ilp_partition,4,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 5, 11]"
1495,ilp_partition,4,0,0,1,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 10, 10]"
1496,lcs,4,2,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacc""
T = ""acad"""
1497,lcs,4,0,0,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccc""
T = ""ddad"""
1498,knap,4,18,5,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 1, 4]
V = [11, 16, 2, 2]
C = 7"
1499,sub,16,2732718921885823,7194078500416948,0,0,0,"{'ok': True, 'value': 28776314001667792, 'stdout': '28776314001667792\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08843994140625}",0,Compute: 7194078500416948 - 4461359578531125
1500,ilp_prod,2,30,2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[2, 1], [2, 2]]
capacity = [6, 8]
upper_bounds = [3, 4]"
1501,knap,8,91,7,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 8, 16, 9, 2, 13, 12, 13]
V = [30, 27, 14, 4, 19, 15, 10, 10]
C = 43"
1502,rod,32,2784,729,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [87, 82, 41, 24, 4, 90, 51, 10, 43, 75, 16, 90, 93, 69, 5, 37, 47, 13, 13, 15, 78, 28, 71, 32, 5, 4, 10, 1, 17, 30, 81, 93]"
1503,ilp_assign,8,21,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 19, 11, 17, 21, 1, 7], [3, 24, 16, 15, 3, 6, 9], [17, 1, 14, 10, 19, 18, 19], [7, 6, 11, 4, 24, 19, 10], [23, 10, 7, 19, 17, 4, 1], [9, 7, 7, 8, 18, 7, 16], [11, 13, 20, 16, 24, 4, 12]]"
1504,add,2,97,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 87 + 10
1505,sub,4,8827,,0,2,0,"{'ok': True, 'value': 39656, 'stdout': '39656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08894133567810059}",0,Compute: 9914 - 1087
1506,ilp_assign,16,58,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 32, 29, 28, 9, 21, 32], [26, 14, 7, 47, 3, 46, 23], [27, 6, 18, 35, 37, 21, 1], [23, 2, 7, 11, 15, 37, 3], [9, 46, 27, 35, 48, 36, 10], [28, 24, 34, 20, 47, 12, 17], [4, 21, 26, 24, 3, 42, 4]]"
1507,rod,32,2080,86,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [65, 5, 2, 67, 46, 22, 44, 36, 22, 52, 73, 49, 86, 44, 5, 5, 90, 38, 64, 51, 68, 84, 45, 96, 10, 47, 42, 77, 52, 76, 28, 27]"
1508,add,8,81719561,7,0,3,0,"{'ok': True, 'value': 115262516, 'stdout': '115262516\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08083724975585938}",0,Compute: 28815629 + 52903932
1509,ilp_partition,4,1,3,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 12, 8, 10]"
1510,sub,16,857381301596035,,0,-1,0,"{'ok': True, 'value': 14117486879635260, 'stdout': '14117486879635260\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07862734794616699}",0,Compute: 3529371719908815 - 2671990418312780
1511,ilp_assign,2,5,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3], [6, 2]]"
1512,ilp_prod,16,218,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [37, 29, 42, 19, 6, 46]
consumption (rows=resources) = [[9, 2, 6, 12, 11, 6], [16, 11, 5, 2, 3, 12], [10, 16, 10, 15, 7, 3], [5, 7, 16, 9, 10, 2]]
capacity = [64, 39, 43, 55]
upper_bounds = [3, 3, 3, 3, 5, 3]"
1513,add,32,119725383695077244072604265735465,53045230276788259,0,7,0,"{'ok': True, 'value': 266720613673155939068315657761500, 'stdout': '266720613673155939068315657761500\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08779096603393555}",0,Compute: 66680153418288984767078914440375 + 53045230276788259305525351295090
1514,knap,16,439,152,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 32, 28, 21, 8, 30, 28, 17, 1, 30, 24, 1, 19, 21, 10, 26]
V = [44, 64, 12, 43, 49, 7, 2, 59, 64, 20, 32, 14, 44, 15, 26, 17]
C = 152"
1515,rod,32,1216,44,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [38, 44, 20, 20, 87, 33, 41, 3, 8, 57, 93, 19, 7, 52, 69, 4, 78, 36, 62, 75, 16, 13, 20, 44, 80, 36, 86, 86, 34, 13, 7, 44]"
1516,ilp_partition,16,0,6,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [39, 16, 29, 37, 20, 45, 6, 13, 38, 47, 16, 48, 14, 26, 1, 47]"
1517,ilp_partition,16,0,2,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 43, 34, 32, 23, 15, 28, 17, 14, 38, 29, 24, 31, 16, 20, 13]"
1518,mul,8,3810702024830811,1,0,0,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08785724639892578}",0,Compute: 77518221 * 49158791
1519,ilp_partition,8,1,15,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 16, 19, 15, 14, 12, 10, 9]"
1520,knap,32,1463,41,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [59, 51, 25, 36, 48, 48, 41, 53, 28, 1, 2, 19, 50, 8, 13, 49, 40, 7, 1, 56, 64, 8, 52, 37, 13, 53, 11, 12, 11, 28, 40, 16]
V = [17, 11, 71, 73, 71, 73, 102, 49, 79, 18, 46, 88, 7, 97, 48, 123, 66, 26, 43, 29, 84, 37, 102, 42, 27, 27, 41, 89, 28, 38, 81, 100]
C = 490"
1521,mul,32,2738327609818864710985915915564454166064597984005848232504945332,0,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08971309661865234}",0,Compute: 86398059878415672587991819819686 * 31694318294558894998475258916862
1522,ilp_partition,32,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [92, 40, 13, 51, 63, 95, 86, 33, 29, 28, 47, 82, 93, 8, 7, 58, 91, 88, 27, 87, 77, 4, 52, 59]"
1523,knap,4,16,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 4, 7]
V = [3, 9, 7, 8]
C = 10"
1524,ilp_partition,2,3,-7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 1, 6, 1]"
1525,ilp_assign,32,103,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 86, 11, 21, 29, 8, 51], [29, 94, 58, 58, 59, 10, 41], [16, 30, 96, 1, 11, 90, 41], [68, 20, 7, 15, 84, 36, 68], [25, 65, 59, 29, 44, 42, 79], [35, 35, 93, 80, 17, 51, 34], [80, 44, 96, 32, 35, 62, 19]]"
1526,ilp_prod,8,85,0,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 5, 16, 16]
consumption (rows=resources) = [[2, 7, 6, 3], [8, 8, 7, 5], [8, 8, 4, 4], [4, 3, 1, 5]]
capacity = [16, 30, 30, 21]
upper_bounds = [3, 3, 3, 4]"
1527,ilp_partition,32,1,,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 13, 82, 93, 20, 4, 43, 22, 68, 55, 87, 65, 66, 95, 95, 49, 64, 3, 75, 89, 67, 62, 65, 28]"
1528,ilp_prod,4,33,10000000,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6, 7]
consumption (rows=resources) = [[4, 3, 1], [3, 2, 2], [2, 1, 2]]
capacity = [15, 10, 8]
upper_bounds = [3, 5, 4]"
1529,mul,16,38348510734546495112075231714778,6280223603895177,0,6,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08403396606445312}",0,Compute: 6106233337099914 * 6280223603895177
1530,ilp_assign,8,25,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 16, 15, 24, 1, 16, 9], [10, 9, 24, 13, 16, 4, 3], [10, 21, 13, 14, 7, 8, 17], [5, 3, 23, 23, 24, 10, 7], [4, 12, 9, 5, 8, 12, 12], [6, 24, 4, 4, 24, 7, 10], [8, 21, 3, 2, 11, 20, 24]]"
1531,add,16,8398416997912907,0,0,-7,0,"{'ok': True, 'value': 5799814439968048, 'stdout': '5799814439968048\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08208274841308594}",0,Compute: 1449953609992012 + 6948463387920895
1532,ilp_assign,32,132,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[53, 96, 38, 23, 36, 35, 33], [78, 22, 19, 24, 61, 22, 10], [73, 13, 66, 87, 75, 72, 1], [34, 75, 46, 87, 22, 3, 13], [89, 20, 27, 42, 59, 87, 45], [54, 9, 20, 85, 33, 10, 48], [37, 85, 72, 12, 32, 93, 68]]"
1533,knap,8,111,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 9, 16, 12, 6, 8, 2, 10]
V = [29, 30, 19, 16, 1, 20, 31, 10]
C = 34"
1534,mul,8,5015271878718375,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 86722485 * 57831275
1535,knap,32,1943,102,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 53, 34, 30, 2, 18, 3, 17, 53, 35, 15, 62, 46, 34, 17, 7, 33, 52, 8, 47, 29, 51, 59, 3, 62, 19, 27, 35, 4, 17, 5, 25]
V = [78, 114, 65, 69, 14, 108, 97, 114, 77, 84, 108, 36, 57, 16, 128, 102, 63, 22, 113, 74, 70, 100, 7, 38, 118, 57, 118, 115, 88, 51, 57, 102]
C = 469"
1536,lcs,8,3,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badddddd""
T = ""dbbdacbd"""
1537,lcs,2,0,0,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""c"""
1538,ilp_prod,2,35,3,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4]
consumption (rows=resources) = [[2, 3], [1, 2]]
capacity = [10, 6]
upper_bounds = [5, 3]"
1539,knap,32,1794,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 55, 57, 24, 9, 6, 17, 35, 23, 43, 37, 21, 33, 64, 49, 32, 61, 44, 15, 29, 10, 31, 45, 40, 8, 28, 60, 1, 9, 63, 14, 50]
V = [4, 52, 104, 86, 91, 119, 63, 75, 83, 103, 46, 61, 128, 47, 59, 106, 48, 44, 48, 108, 104, 68, 105, 83, 106, 57, 72, 35, 105, 46, 13, 22]
C = 512"
1540,add,8,68452967,-3,0,1,0,"{'ok': True, 'value': 214089776, 'stdout': '214089776\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07763338088989258}",0,Compute: 53522444 + 14930523
1541,ilp_partition,16,0,6,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 20, 1, 45, 43, 20, 32, 7, 12, 5, 30, 15, 16, 48, 20, 2]"
1542,mul,4,35916856,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 4952 * 7253
1543,knap,8,110,7,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 2, 4, 6, 2, 1, 11, 11]
V = [3, 11, 27, 29, 2, 28, 26, 8]
C = 23"
1544,ilp_partition,32,0,3,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [79, 84, 63, 56, 39, 82, 26, 4, 24, 4, 75, 37, 56, 58, 66, 90, 71, 72, 55, 32, 44, 95, 37, 71]"
1545,add,4,16125,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 7054 + 9071
1546,mul,32,1077217691239571688566571972144872033662327188494288962623650510,10,0,21230465254911170435852070196790,0,"{'ok': True, 'value': 84921861019644681743408280787160, 'stdout': '84921861019644681743408280787160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07021260261535645}",0,Compute: 21230465254911170435852070196790 * 50739240911848723082633560616869
1547,rod,8,56,5,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [6, 3, 22, 19, 17, 18, 7, 2]"
1548,ilp_partition,32,0,-1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 80, 80, 54, 27, 75, 42, 80, 39, 44, 25, 83, 72, 51, 33, 57, 2, 66, 9, 9, 80, 67, 35, 86]"
1549,add,4,11407,12235,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 6391 + 5016
1550,ilp_assign,4,10,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 10, 3, 1], [9, 4, 11, 4], [3, 2, 5, 9], [1, 1, 6, 5]]"
1551,ilp_assign,2,6,4,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [4, 2]]"
1552,rod,2,10,24,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 4]"
1553,knap,8,80,1,0,17,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 6, 15, 5, 10, 13, 5, 11]
V = [22, 17, 1, 10, 13, 17, 14, 1]
C = 33"
1554,ilp_assign,16,83,3,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[29, 35, 27, 27, 33, 31, 30], [31, 28, 3, 1, 26, 5, 2], [4, 11, 33, 8, 44, 1, 46], [34, 30, 13, 12, 18, 41, 35], [43, 36, 29, 38, 1, 31, 18], [36, 23, 35, 8, 27, 48, 2], [35, 37, 33, 44, 36, 27, 27]]"
1555,ilp_partition,32,1,75,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [58, 66, 75, 1, 66, 67, 33, 22, 20, 3, 48, 49, 82, 81, 5, 13, 12, 88, 93, 20, 62, 3, 71, 29]"
1556,mul,16,15885115509998949590211270764952,7,0,0,0,"{'ok': True, 'value': 8368718585522336, 'stdout': '8368718585522336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0843966007232666}",0,Compute: 2092179646380584 * 7592615451297303
1557,ilp_prod,4,51,10000000,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 9, 10]
consumption (rows=resources) = [[2, 1, 4], [1, 4, 1], [2, 1, 4]]
capacity = [9, 12, 8]
upper_bounds = [4, 3, 3]"
1558,add,32,107014565270178584938748130418411,1998,0,2,0,"{'ok': True, 'value': 163107598648430249167007251775156, 'stdout': '163107598648430249167007251775156\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08506631851196289}",0,Compute: 40776899662107562291751812943789 + 66237665608071022646996317474622
1559,mul,4,86293998,4,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 9261 * 9318
1560,ilp_prod,32,245,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [58, 34, 40, 27, 52, 23]
consumption (rows=resources) = [[13, 1, 8, 5, 20, 28], [12, 28, 28, 14, 11, 28], [28, 20, 23, 5, 14, 25], [29, 14, 5, 22, 14, 23]]
capacity = [68, 123, 107, 74]
upper_bounds = [3, 4, 4, 3, 3, 3]"
1561,mul,32,4338046593796395577055216075957387181280815174480953802893199542,60,0,13,0,"{'ok': True, 'value': 286058605038502726689974321835992, 'stdout': '286058605038502726689974321835992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07544589042663574}",0,Compute: 71514651259625681672493580458998 * 60659550419222747091606678205729
1562,ilp_prod,4,96,10000,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 12, 12]
consumption (rows=resources) = [[4, 1, 4], [3, 1, 2], [2, 1, 1]]
capacity = [8, 9, 16]
upper_bounds = [3, 8, 3]"
1563,ilp_assign,32,67,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 49, 26, 53, 76, 29, 8], [12, 15, 8, 8, 2, 59, 14], [48, 27, 44, 70, 21, 10, 74], [38, 7, 19, 11, 90, 53, 23], [35, 53, 3, 74, 32, 33, 20], [88, 55, 63, 63, 5, 59, 69], [71, 22, 53, 34, 91, 84, 45]]"
1564,mul,32,616589935893211799914621915165224625585968642644106451211669716,42733188624599272558000543943461,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09578061103820801}",0,Compute: 14428830511802085966072934661956 * 42733188624599272558000543943461
1565,mul,2,286,,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 26 * 11
1566,add,8,84459193,21533485,0,0,0,"{'ok': True, 'value': 86133940, 'stdout': '86133940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10097980499267578}",0,Compute: 21533485 + 62925708
1567,ilp_assign,32,240,3,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 44, 92, 31, 75, 33, 35], [55, 46, 79, 55, 91, 84, 60], [73, 16, 19, 30, 40, 84, 23], [69, 6, 88, 86, 30, 87, 16], [23, 45, 30, 78, 71, 25, 72], [16, 86, 50, 43, 72, 96, 75], [60, 85, 82, 85, 91, 68, 73]]"
1568,ilp_prod,16,208,0,0,66,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 43, 32, 36, 27, 25]
consumption (rows=resources) = [[8, 5, 6, 6, 9, 10], [8, 8, 16, 5, 6, 12], [5, 9, 15, 10, 5, 2], [9, 10, 10, 8, 4, 11]]
capacity = [41, 37, 50, 50]
upper_bounds = [4, 4, 3, 5, 4, 3]"
1569,add,8,93824542,,0,64996998,0,"{'ok': True, 'value': 259987992, 'stdout': '259987992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08338093757629395}",0,Compute: 64996998 + 28827544
1570,sub,8,24536787,7,0,6,0,"{'ok': True, 'value': 295114764, 'stdout': '295114764\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08750081062316895}",0,Compute: 73778691 - 49241904
1571,ilp_partition,2,2,,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 5, 3]"
1572,lcs,16,8,65535,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcddacaacbbadcda""
T = ""abbdccdcaaaaaba"""
1573,knap,2,9,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 3]
V = [7, 9, 3]
C = 5"
1574,sub,4,7786,991,0,-512,0,"{'ok': True, 'value': 37792, 'stdout': '37792\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07084965705871582}",0,Compute: 9448 - 1662
1575,knap,8,80,7,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 10, 15, 14, 10, 12, 11, 9]
V = [15, 30, 26, 22, 3, 14, 7, 9]
C = 46"
1576,sub,32,33999856601509678949401390556121,3,0,0,0,"{'ok': True, 'value': 322761731612018914917597133968592, 'stdout': '322761731612018914917597133968592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07781577110290527}",0,Compute: 80690432903004728729399283492148 - 46690576301495049779997892936027
1577,add,8,135370956,45693,0,6,0,"{'ok': True, 'value': 182773020, 'stdout': '182773020\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08136296272277832}",0,Compute: 45693255 + 89677701
1578,rod,16,229,64,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [9, 20, 44, 45, 1, 27, 7, 47, 38, 47, 5, 42, 39, 29, 33, 37]"
1579,rod,4,36,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 8, 3, 12]"
1580,lcs,4,2,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddca""
T = ""add"""
1581,add,16,9719180551768014,8361583131101416,0,1,0,"{'ok': True, 'value': 33446332524405664, 'stdout': '33446332524405664\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07891225814819336}",0,Compute: 8361583131101416 + 1357597420666598
1582,rod,2,8,17,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
1583,knap,32,1493,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 20, 61, 46, 11, 40, 41, 34, 16, 28, 40, 42, 50, 3, 51, 24, 20, 29, 18, 25, 60, 28, 20, 43, 1, 50, 13, 53, 26, 38, 37, 55]
V = [54, 70, 75, 72, 92, 40, 71, 9, 78, 80, 108, 71, 84, 52, 41, 21, 10, 21, 128, 98, 15, 53, 39, 27, 44, 51, 75, 96, 67, 37, 60, 127]
C = 530"
1584,mul,16,22909201245937506908602784254262,0,0,0,0,"{'ok': True, 'value': 38408887462024484, 'stdout': '38408887462024484\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06934022903442383}",0,Compute: 9602221865506121 * 2385822944607622
1585,knap,8,137,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 1, 13, 3, 3, 8, 3, 14]
V = [29, 20, 3, 10, 32, 32, 24, 10]
C = 29"
1586,sub,2,12,,0,2,0,"{'ok': True, 'value': 132, 'stdout': '132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06942915916442871}",0,Compute: 33 - 21
1587,rod,32,2208,729,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [69, 13, 74, 35, 55, 32, 55, 42, 65, 3, 74, 88, 49, 78, 34, 34, 39, 48, 14, 79, 64, 34, 64, 19, 16, 82, 53, 61, 40, 2, 69, 70]"
1588,ilp_prod,2,12,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[2, 2], [3, 3]]
capacity = [6, 6]
upper_bounds = [3, 3]"
1589,ilp_assign,8,48,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 5, 11, 11, 13, 16, 21], [22, 19, 5, 9, 8, 8, 13], [23, 19, 12, 20, 20, 18, 24], [2, 10, 15, 17, 23, 12, 21], [1, 5, 16, 16, 1, 2, 13], [21, 23, 14, 24, 4, 7, 22], [14, 24, 12, 14, 15, 13, 14]]"
1590,sub,16,1282387499578876,0,0,1,0,"{'ok': True, 'value': 27212069430572720, 'stdout': '27212069430572720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07538914680480957}",0,Compute: 6803017357643180 - 5520629858064304
1591,mul,2,962,,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 26 * 37
1592,ilp_partition,32,1,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 31, 93, 33, 68, 85, 9, 74, 73, 95, 12, 14, 84, 2, 44, 7, 11, 5, 48, 19, 85, 59, 10, 48]"
1593,ilp_partition,8,3,15,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 15, 21, 16, 15, 20, 16, 15]"
1594,ilp_partition,2,0,,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 3, 3]"
1595,rod,8,168,7,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 15, 1, 16, 23, 16, 5, 1]"
1596,ilp_partition,8,0,10,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 22, 13, 9, 13, 11, 3, 10]"
1597,add,8,97865630,113732,0,0,0,"{'ok': True, 'value': 345969664, 'stdout': '345969664\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09756183624267578}",0,Compute: 86492416 + 11373214
1598,sub,8,18514066,16,0,6,0,"{'ok': True, 'value': 118037776, 'stdout': '118037776\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13432550430297852}",0,Compute: 29509444 - 10995378
1599,ilp_prod,2,20,0,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6]
consumption (rows=resources) = [[2, 2], [3, 2]]
capacity = [8, 7]
upper_bounds = [3, 3]"
1600,lcs,16,8,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdddbadbbcacccb""
T = ""cdbcadadaccdcdc"""
1601,knap,4,17,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 2, 8, 6]
V = [14, 3, 9, 3]
C = 11"
1602,sub,16,234264872319363,0,0,-6,0,"{'ok': True, 'value': 36138770538220032, 'stdout': '36138770538220032\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07124185562133789}",0,Compute: 9034692634555008 - 8800427762235645
1603,ilp_assign,4,20,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 7, 7, 6], [10, 12, 8, 4], [12, 7, 7, 5], [2, 2, 12, 3]]"
1604,knap,4,30,400,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 4, 7]
V = [15, 15, 10, 6]
C = 9"
1605,sub,8,30156774,,0,0,0,"{'ok': True, 'value': 371112220, 'stdout': '371112220\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0831291675567627}",0,Compute: 92778055 - 62621281
1606,ilp_partition,32,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [60, 56, 89, 70, 71, 67, 13, 6, 63, 74, 37, 70, 16, 20, 85, 84, 53, 80, 12, 58, 95, 81, 7, 15]"
1607,ilp_assign,8,17,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 23, 10, 10, 17, 9, 5], [7, 15, 2, 9, 4, 24, 22], [3, 2, 21, 21, 3, 16, 5], [16, 15, 20, 13, 8, 22, 2], [14, 6, 2, 10, 15, 2, 5], [17, 21, 21, 7, 7, 21, 23], [6, 7, 5, 1, 13, 21, 1]]"
1608,sub,4,3545,1915,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08510828018188477}",0,Compute: 9760 - 6215
1609,mul,32,1282162655874875427962800652003371086025193332876641061736530680,12987765,0,12987765454764241848331872146214,0,"{'ok': True, 'value': 51951061819056967393327488584856, 'stdout': '51951061819056967393327488584856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07893490791320801}",0,Compute: 12987765454764241848331872146214 * 98720804617282770478746809177620
1610,ilp_partition,8,0,9,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 2, 13, 5, 5, 11, 16, 15]"
1611,add,16,9091006826052472,-1,0,-3,0,"{'ok': True, 'value': 8534003881496008, 'stdout': '8534003881496008\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08977460861206055}",0,Compute: 2133500970374002 + 6957505855678470
1612,sub,4,2065,,0,8192,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07718610763549805}",0,Compute: 4219 - 2154
1613,rod,16,416,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [26, 28, 17, 18, 32, 18, 38, 13, 24, 48, 21, 23, 5, 45, 12, 44]"
1614,sub,4,2842,,0,45,0,"{'ok': True, 'value': 31716, 'stdout': '31716\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08815693855285645}",0,Compute: 7929 - 5087
1615,mul,32,3852873661724903068127659278526474321172769086947593769427778600,5,0,120,0,"{'ok': True, 'value': 223869804954930396121069114429680, 'stdout': '223869804954930396121069114429680\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08156037330627441}",0,Compute: 55967451238732599030267278607420 * 68841327886993351563767278111830
1616,rod,32,2240,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [70, 53, 79, 38, 68, 55, 18, 32, 43, 51, 63, 71, 82, 16, 58, 89, 67, 25, 74, 53, 12, 58, 19, 85, 59, 56, 56, 71, 15, 13, 73, 41]"
1617,ilp_assign,2,6,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4], [2, 4]]"
1618,lcs,8,4,2025,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadbbdda""
T = ""cbabbacbb"""
1619,mul,4,26843166,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 6846 * 3921
1620,ilp_prod,8,86,6,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 23, 17, 9]
consumption (rows=resources) = [[7, 5, 3, 6], [6, 7, 2, 4], [6, 1, 7, 8], [4, 3, 1, 5]]
capacity = [30, 23, 18, 18]
upper_bounds = [3, 3, 3, 3]"
1621,knap,32,1637,65,0,512,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 2, 36, 64, 31, 24, 42, 48, 38, 22, 54, 37, 61, 37, 53, 47, 24, 37, 60, 48, 57, 1, 40, 52, 38, 9, 47, 58, 32, 63, 40, 44]
V = [102, 38, 98, 5, 113, 37, 24, 87, 92, 87, 92, 69, 65, 72, 70, 123, 102, 100, 91, 47, 11, 48, 34, 92, 20, 12, 124, 69, 68, 35, 33, 93]
C = 627"
1622,ilp_partition,32,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [86, 93, 11, 2, 75, 21, 93, 31, 35, 46, 29, 91, 21, 62, 67, 69, 61, 90, 43, 3, 41, 65, 14, 72]"
1623,knap,8,100,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 15, 7, 4, 5, 13, 4, 13]
V = [16, 30, 31, 6, 11, 1, 23, 4]
C = 32"
1624,ilp_prod,8,39,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 8, 10, 7]
consumption (rows=resources) = [[2, 1, 2, 3], [5, 6, 8, 8], [1, 7, 7, 4], [3, 2, 7, 7]]
capacity = [23, 16, 26, 29]
upper_bounds = [3, 3, 3, 3]"
1625,lcs,4,2,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccda""
T = ""dadcc"""
1626,ilp_partition,2,2,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 1, 5]"
1627,lcs,32,19,6,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdabccbcbadcdbbaadbcbbadacadbcca""
T = ""bbbdbabdaacccbdaaaabaaacabadababa"""
1628,lcs,16,10,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbdccdadcdcaccb""
T = ""aabcbacdaabbcdabb"""
1629,ilp_partition,32,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 7, 3, 2, 2, 66, 25, 8, 49, 24, 88, 70, 21, 18, 80, 69, 11, 5, 33, 30, 40, 3, 59, 10]"
1630,ilp_assign,2,8,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 4], [5, 6]]"
1631,knap,2,9,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 1]
V = [3, 5, 9]
C = 5"
1632,ilp_assign,2,6,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5], [1, 5]]"
1633,knap,4,19,51,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 4, 5]
V = [3, 15, 12, 7]
C = 11"
1634,ilp_prod,4,46,-1,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8, 11]
consumption (rows=resources) = [[2, 2, 2], [2, 1, 3], [1, 4, 3]]
capacity = [11, 11, 12]
upper_bounds = [5, 3, 3]"
1635,ilp_partition,8,0,-8,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 7, 1, 19, 1, 22, 18, 4]"
1636,ilp_assign,16,84,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 14, 28, 35, 30, 34, 22], [16, 23, 3, 47, 30, 36, 3], [19, 30, 36, 44, 13, 21, 47], [36, 18, 20, 2, 22, 23, 33], [46, 21, 32, 15, 21, 14, 19], [22, 38, 25, 31, 11, 16, 32], [37, 27, 37, 21, 32, 47, 21]]"
1637,rod,16,304,10,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [19, 30, 9, 41, 13, 33, 17, 43, 21, 21, 21, 35, 18, 6, 33, 16]"
1638,add,2,119,83,0,0,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09945011138916016}",0,Compute: 80 + 39
1639,knap,2,15,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 1]
V = [2, 9, 6]
C = 3"
1640,knap,2,9,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 5]
V = [4, 7, 9]
C = 5"
1641,mul,16,47098451678312859365577769085264,0,0,0,0,"{'ok': True, 'value': 30597534434651584, 'stdout': '30597534434651584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11579632759094238}",0,Compute: 7649383608662896 * 6157156457021459
1642,ilp_assign,4,12,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 12, 1, 2], [10, 9, 1, 3], [10, 4, 9, 8], [5, 7, 7, 10]]"
1643,lcs,8,4,36,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caabbbdb""
T = ""ddcaadccc"""
1644,rod,16,107,94,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [2, 7, 21, 13, 14, 39, 11, 29, 23, 20, 34, 28, 24, 28, 1, 40]"
1645,ilp_partition,8,0,12,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 23, 1, 14, 9, 7, 12]"
1646,add,4,12692,2,0,0,0,"{'ok': True, 'value': 27508, 'stdout': '27508\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0765695571899414}",0,Compute: 6877 + 5815
1647,rod,16,736,,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [46, 21, 9, 25, 42, 47, 46, 31, 3, 18, 5, 15, 7, 19, 12, 5]"
1648,rod,16,129,,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 2, 20, 3, 41, 47, 17, 6, 15, 48, 29, 23, 19, 37, 46, 20]"
1649,lcs,32,20,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdcaacbaabddbaddcacadcbdabdcaba""
T = ""bcccadbbbadbadcdcacabdacccaddabb"""
1650,ilp_prod,4,32,1,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3, 4]
consumption (rows=resources) = [[1, 1, 3], [3, 3, 1], [4, 3, 3]]
capacity = [10, 13, 16]
upper_bounds = [4, 4, 3]"
1651,mul,4,63319584,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 8544 * 7411
1652,ilp_partition,32,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 76, 38, 9, 82, 95, 44, 48, 78, 91, 49, 86, 1, 82, 35, 76, 13, 28, 3, 50, 49, 21, 65, 65]"
1653,ilp_prod,16,150,5,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 30, 39, 20, 20, 3]
consumption (rows=resources) = [[4, 2, 13, 6, 9, 1], [14, 16, 6, 10, 9, 6], [16, 12, 8, 9, 8, 11], [7, 15, 2, 9, 12, 16]]
capacity = [44, 45, 59, 43]
upper_bounds = [3, 3, 3, 4, 3, 3]"
1654,add,2,134,192,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 96 + 38
1655,add,32,82737963658566259629351756584358,0,0,1085,0,"{'ok': True, 'value': 221368419644712752973675531869456, 'stdout': '221368419644712752973675531869456\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08367013931274414}",0,Compute: 55342104911178188243418882967364 + 27395858747388071385932873616994
1656,rod,8,80,-1,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 19, 18, 11, 2, 10, 7, 9]"
1657,add,2,147,82,0,73,0,"{'ok': True, 'value': 292, 'stdout': '292\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08056902885437012}",0,Compute: 73 + 74
1658,mul,2,2891,7,0,2,0,"{'ok': True, 'value': 196, 'stdout': '196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07696056365966797}",0,Compute: 49 * 59
1659,add,2,102,92,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 41 + 61
1660,rod,16,352,44,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [22, 42, 18, 9, 5, 33, 9, 42, 10, 36, 27, 2, 9, 9, 44, 1]"
1661,ilp_assign,4,10,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3, 11, 5], [7, 5, 2, 5], [1, 2, 11, 2], [8, 3, 8, 4]]"
1662,ilp_partition,4,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 10, 6, 2]"
1663,rod,16,608,100,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [38, 33, 24, 4, 44, 40, 45, 23, 40, 36, 43, 47, 9, 15, 15, 20]"
1664,ilp_partition,32,0,2025,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 61, 5, 91, 88, 54, 25, 24, 38, 70, 72, 66, 80, 26, 15, 13, 93, 34, 76, 65, 57, 53, 94, 70]"
1665,rod,8,184,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 21, 17, 10, 12, 11, 13, 6]"
1666,add,8,178217431,3,0,0,0,"{'ok': True, 'value': 323639624, 'stdout': '323639624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07634115219116211}",0,Compute: 80909906 + 97307525
1667,lcs,4,2,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caab""
T = ""bab"""
1668,add,4,4571,7,0,0,0,"{'ok': True, 'value': 11628, 'stdout': '11628\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13491582870483398}",0,Compute: 2907 + 1664
1669,mul,4,16167120,7,0,0,0,"{'ok': True, 'value': 19716, 'stdout': '19716\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09444260597229004}",0,Compute: 4929 * 3280
1670,ilp_partition,4,2,645,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 10, 12, 9]"
1671,mul,4,32621088,12,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 4476 * 7288
1672,ilp_partition,32,0,24,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 8, 92, 41, 91, 36, 65, 37, 19, 53, 35, 49, 96, 93, 39, 48, 37, 33, 93, 21, 66, 52, 82, 93]"
1673,lcs,4,3,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caab""
T = ""dcaa"""
1674,ilp_partition,8,0,23,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 22, 4, 23, 21, 15, 8, 4]"
1675,sub,8,36575112,-1205,0,35,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1268160343170166}",0,Compute: 56987170 - 20412058
1676,sub,4,2462,37,0,4,0,"{'ok': True, 'value': 30092, 'stdout': '30092\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08826994895935059}",0,Compute: 7523 - 5061
1677,ilp_partition,4,3,,0,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 9, 8, 3]"
1678,ilp_prod,2,42,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[3, 1], [2, 1]]
capacity = [6, 7]
upper_bounds = [3, 6]"
1679,ilp_assign,16,85,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[38, 25, 47, 34, 40, 8, 23], [17, 29, 33, 7, 33, 30, 41], [39, 19, 14, 42, 27, 45, 43], [17, 7, 27, 32, 5, 12, 24], [35, 19, 27, 31, 34, 38, 36], [20, 25, 19, 5, 30, 34, 43], [4, 44, 35, 27, 14, 25, 17]]"
1680,ilp_partition,8,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 18, 24, 5, 8, 24, 6, 11]"
1681,ilp_assign,16,57,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 39, 2, 42, 46, 32, 17], [25, 33, 1, 19, 26, 8, 46], [19, 37, 46, 47, 39, 2, 35], [11, 19, 3, 38, 4, 20, 21], [25, 14, 22, 1, 27, 22, 40], [33, 23, 21, 39, 16, 25, 21], [33, 9, 6, 3, 23, 32, 21]]"
1682,mul,32,1089476201669244162671049212496531842748172228360069717292519656,17,0,1700856395508734705223947,0,"{'ok': True, 'value': 68034255820349388208957916788012, 'stdout': '68034255820349388208957916788012\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08722472190856934}",0,Compute: 17008563955087347052239479197003 * 64054567131364217811746983258552
1683,ilp_assign,32,100,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 24, 73, 74, 75, 6, 4], [29, 67, 34, 15, 48, 47, 22], [3, 56, 68, 88, 4, 93, 91], [19, 1, 21, 82, 80, 73, 33], [42, 54, 40, 76, 69, 24, 42], [76, 87, 26, 63, 27, 85, 56], [40, 77, 39, 82, 30, 45, 8]]"
1684,sub,32,43151866486504001981604943786219,-9,0,-1,0,"{'ok': True, 'value': 385335021460736704573212711086956, 'stdout': '385335021460736704573212711086956\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07178592681884766}",0,Compute: 96333755365184176143303177771739 - 53181888878680174161698233985520
1685,lcs,8,4,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbbabab""
T = ""aabcbccba"""
1686,lcs,16,9,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcdbdbdccadacbd""
T = ""cbcbacabccbabdc"""
1687,rod,32,1344,25,0,56,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [42, 14, 53, 50, 15, 26, 8, 43, 12, 22, 31, 48, 48, 86, 10, 13, 79, 96, 8, 91, 84, 1, 37, 50, 95, 49, 35, 24, 85, 69, 13, 56]"
1688,sub,32,49343126012160276673745197573601,3,0,0,0,"{'ok': True, 'value': 276428388541892428403786452618652, 'stdout': '276428388541892428403786452618652\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07550859451293945}",0,Compute: 69107097135473107100946613154663 - 19763971123312830427201415581062
1689,sub,16,6354779838981615,-1,0,0,0,"{'ok': True, 'value': 34886118584006440, 'stdout': '34886118584006440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08205175399780273}",0,Compute: 8721529646001610 - 2366749807019995
1690,mul,2,816,408,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 17 * 48
1691,lcs,16,9,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddadaaabcdcbbada""
T = ""bbbaacbacacdaaada"""
1692,ilp_assign,2,5,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [4, 6]]"
1693,ilp_prod,16,144,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [29, 18, 42, 16, 38, 42]
consumption (rows=resources) = [[7, 8, 1, 13, 3, 6], [7, 1, 9, 5, 15, 9], [3, 5, 8, 9, 6, 3], [10, 14, 8, 9, 8, 7]]
capacity = [37, 33, 46, 41]
upper_bounds = [4, 3, 3, 3, 3, 3]"
1694,lcs,4,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabc""
T = ""cbaa"""
1695,ilp_prod,2,24,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[3, 3], [1, 2]]
capacity = [10, 9]
upper_bounds = [3, 3]"
1696,ilp_partition,16,1,7,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [40, 18, 8, 14, 36, 45, 28, 32, 32, 45, 32, 46, 3, 39, 10, 39]"
1697,mul,2,456,210,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 12 * 38
1698,add,8,97466203,118935126,0,4,0,"{'ok': True, 'value': 236830168, 'stdout': '236830168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08333468437194824}",0,Compute: 59207542 + 38258661
1699,ilp_assign,32,53,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[71, 1, 90, 93, 22, 21, 77], [35, 20, 62, 88, 86, 86, 10], [3, 7, 76, 89, 17, 55, 75], [1, 13, 39, 70, 32, 72, 48], [60, 71, 14, 31, 60, 46, 83], [44, 60, 63, 9, 34, 83, 74], [43, 67, 87, 90, 21, 1, 81]]"
1700,knap,4,17,5,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 2, 6, 5]
V = [5, 6, 11, 5]
C = 10"
1701,mul,8,3722259661574922,,0,4,0,"{'ok': True, 'value': 250481348, 'stdout': '250481348\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08217191696166992}",0,Compute: 62620337 * 59441706
1702,add,16,11333417279975177,3,0,5865137990792497,0,"{'ok': True, 'value': 23460551963169988, 'stdout': '23460551963169988\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07844328880310059}",0,Compute: 5865137990792497 + 5468279289182680
1703,mul,8,3706509892042350,7,0,4,0,"{'ok': True, 'value': 189316584, 'stdout': '189316584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08553647994995117}",0,Compute: 47329146 * 78313475
1704,ilp_assign,4,21,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 5, 7, 1], [4, 6, 7, 10], [10, 8, 10, 4], [10, 9, 11, 2]]"
1705,mul,16,30091754733690785770191092263432,59295796251226119,0,0,0,"{'ok': True, 'value': 23718318500490436, 'stdout': '23718318500490436\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08822441101074219}",0,Compute: 5929579625122609 * 5074854650099848
1706,mul,16,13601879378463316928874406894704,424,0,0,0,"{'ok': True, 'value': 18500214542779132, 'stdout': '18500214542779132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08325505256652832}",0,Compute: 4625053635694783 * 2940912787148688
1707,rod,8,152,65,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 22, 13, 24, 23, 1, 8, 21]"
1708,rod,16,304,5,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 38, 1, 12, 3, 5, 9, 26, 29, 22, 15, 7, 15, 10, 37, 41]"
1709,ilp_prod,4,22,27,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 8, 9]
consumption (rows=resources) = [[4, 4, 3], [2, 2, 1], [3, 3, 4]]
capacity = [9, 13, 10]
upper_bounds = [3, 3, 3]"
1710,sub,16,7591202634997112,-2856643020677578,0,9876866037064690,0,"{'ok': True, 'value': 39507464148258760, 'stdout': '39507464148258760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0895237922668457}",0,Compute: 9876866037064690 - 2285663402067578
1711,lcs,32,16,6,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdddccadccadbdbcbdcbadcccdbabddd""
T = ""dbbcbdaccbcbbbcdaccccbadaacbcac"""
1712,rod,2,4,18,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
1713,ilp_partition,2,0,1,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 1, 3, 3]"
1714,rod,8,192,7,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [24, 15, 9, 22, 9, 13, 15, 19]"
1715,ilp_assign,16,42,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 33, 12, 28, 26, 4, 39], [36, 29, 12, 30, 34, 32, 4], [20, 31, 8, 39, 6, 41, 25], [46, 6, 29, 24, 15, 27, 21], [6, 43, 44, 25, 23, 45, 33], [6, 34, 47, 4, 15, 28, 5], [36, 3, 12, 14, 27, 7, 25]]"
1716,add,32,106629189170975095952591905675490,19015536986346998548384556141532,0,0,0,"{'ok': True, 'value': 76062147945387994193538224566128, 'stdout': '76062147945387994193538224566128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09367156028747559}",0,Compute: 19015536986346998548384556141532 + 87613652184628097404207349533958
1717,ilp_partition,16,0,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 24, 32, 42, 28, 26, 21, 43, 23, 41, 42, 34, 33, 22, 29, 2]"
1718,ilp_prod,2,20,5,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[1, 2], [2, 1]]
capacity = [10, 8]
upper_bounds = [4, 5]"
1719,ilp_partition,32,0,24,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 66, 93, 49, 16, 81, 94, 20, 69, 5, 83, 81, 76, 73, 73, 67, 90, 50, 20, 45, 4, 60, 94, 79]"
1720,lcs,16,9,8,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcccaadcdbcadbc""
T = ""dddbbbabcbccaaaac"""
1721,lcs,2,0,,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""d"""
1722,rod,16,448,20,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [28, 40, 18, 39, 33, 3, 1, 23, 25, 7, 13, 23, 12, 3, 7, 37]"
1723,add,2,98,102,0,94,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 25 + 73
1724,ilp_partition,8,1,7,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 23, 1, 4, 5, 7, 5, 18]"
1725,ilp_partition,2,0,,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 5, 6]"
1726,mul,16,5716543723371536883975057889786,86400,0,0,0,"{'ok': True, 'value': 4299372048131252, 'stdout': '4299372048131252\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08016705513000488}",0,Compute: 1074843012032813 * 5318491779148322
1727,sub,8,17539983,7,0,46,0,"{'ok': True, 'value': 358842476, 'stdout': '358842476\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09500336647033691}",0,Compute: 89710619 - 72170636
1728,mul,8,2044765975630536,7,0,0,0,"{'ok': True, 'value': 160941756, 'stdout': '160941756\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08164811134338379}",0,Compute: 40235439 * 50820024
1729,lcs,4,1,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcba""
T = ""bcccd"""
1730,add,32,143490129781977326926718970220666,499,0,10,0,"{'ok': True, 'value': 268965431171457020847312763052936, 'stdout': '268965431171457020847312763052936\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07703113555908203}",0,Compute: 67241357792864255211828190763234 + 76248771989113071714890779457432
1731,mul,2,3234,,0,2,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08555960655212402}",0,Compute: 42 * 77
1732,lcs,32,18,10,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdadaadcaaabaccaaadcdcccaaaddbdd""
T = ""cdbacabcbbcadaacbbacabbccabaaacbb"""
1733,add,32,100152508981050424075469941425015,81861245,0,18291263284133700426288271871018,0,"{'ok': True, 'value': 73165053136534801705153087484072, 'stdout': '73165053136534801705153087484072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07477474212646484}",0,Compute: 18291263284133700426288271871018 + 81861245696916723649181669553997
1734,sub,16,5696172684477213,7328278654271098,0,0,0,"{'ok': True, 'value': 29313114617084392, 'stdout': '29313114617084392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09498739242553711}",0,Compute: 7328278654271098 - 1632105969793885
1735,knap,2,10,2,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 1]
V = [10, 1, 9]
C = 1"
1736,lcs,2,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""aa"""
1737,lcs,4,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adca""
T = ""ccb"""
1738,lcs,32,16,4,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adddbabcaabaadcbacaabbccaabcbdaa""
T = ""baaaddccdcacccccdbcaccddcbccdcdac"""
1739,ilp_prod,32,330,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [62, 9, 90, 44, 24, 23]
consumption (rows=resources) = [[27, 30, 31, 2, 17, 14], [31, 28, 16, 21, 15, 20], [7, 18, 12, 2, 27, 2], [10, 27, 9, 26, 11, 29]]
capacity = [96, 106, 73, 118]
upper_bounds = [3, 3, 3, 4, 3, 4]"
1740,mul,8,1898523063785634,0,0,5,0,"{'ok': True, 'value': 389663516, 'stdout': '389663516\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08874869346618652}",0,Compute: 97415879 * 19488846
1741,lcs,4,1,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbb""
T = ""cca"""
1742,ilp_partition,4,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 9, 4, 11]"
1743,ilp_assign,16,62,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 41, 17, 7, 28, 21, 36], [44, 11, 14, 9, 39, 37, 1], [17, 29, 17, 39, 7, 17, 4], [11, 27, 44, 1, 17, 8, 33], [15, 14, 19, 32, 12, 24, 40], [13, 33, 20, 40, 28, 5, 14], [22, 16, 36, 43, 18, 27, 41]]"
1744,lcs,32,18,-1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaddddccbaabaacaddcdcdbcdbabacac""
T = ""bbdddbddddcacbabbbbdaaddaadcaccab"""
1745,ilp_prod,8,126,27,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 3, 10, 18]
consumption (rows=resources) = [[7, 5, 5, 2], [3, 7, 2, 1], [4, 6, 3, 3], [5, 2, 4, 1]]
capacity = [29, 25, 21, 20]
upper_bounds = [4, 3, 5, 7]"
1746,ilp_prod,4,33,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 11, 10]
consumption (rows=resources) = [[2, 3, 4], [1, 3, 3], [4, 4, 3]]
capacity = [9, 11, 15]
upper_bounds = [3, 3, 3]"
1747,ilp_prod,8,70,0,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 16, 11, 19]
consumption (rows=resources) = [[6, 5, 8, 8], [1, 8, 7, 1], [2, 5, 3, 2], [2, 4, 6, 8]]
capacity = [27, 25, 20, 24]
upper_bounds = [4, 3, 3, 3]"
1748,mul,2,7104,864,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 74 * 96
1749,ilp_partition,32,1,,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 68, 69, 85, 55, 12, 66, 77, 19, 70, 75, 1, 7, 23, 35, 51, 41, 53, 56, 22, 68, 67, 36, 57]"
1750,add,32,112635291588932839451037061786609,,0,0,0,"{'ok': True, 'value': 92583697141236490468699654605904, 'stdout': '92583697141236490468699654605904\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08614420890808105}",0,Compute: 23145924285309122617174913651476 + 89489367303623716833862148135133
1751,ilp_partition,4,0,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 11, 6, 1]"
1752,mul,16,64386734359246115358202438984869,0,0,15,0,"{'ok': True, 'value': 31104628515864228, 'stdout': '31104628515864228\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07692503929138184}",0,Compute: 7776157128966057 * 8280019718146717
1753,knap,4,25,-3,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 7, 4]
V = [9, 12, 16, 10]
C = 10"
1754,ilp_prod,8,103,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 21, 24, 3]
consumption (rows=resources) = [[5, 6, 8, 2], [6, 2, 3, 3], [1, 7, 4, 4], [3, 8, 2, 6]]
capacity = [32, 31, 19, 21]
upper_bounds = [5, 3, 4, 3]"
1755,ilp_partition,16,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 14, 47, 7, 46, 11, 17, 10, 13, 14, 32, 16, 40, 28, 37, 5]"
1756,ilp_prod,8,98,0,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 23, 22, 20]
consumption (rows=resources) = [[4, 5, 4, 2], [1, 6, 5, 3], [3, 7, 6, 5], [1, 4, 1, 6]]
capacity = [31, 17, 22, 28]
upper_bounds = [7, 3, 3, 4]"
1757,ilp_assign,32,93,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 44, 45, 32, 39, 18, 17], [28, 6, 67, 9, 38, 10, 82], [74, 48, 13, 10, 32, 87, 20], [96, 76, 18, 25, 11, 76, 86], [34, 79, 65, 94, 46, 53, 78], [91, 70, 54, 43, 26, 79, 8], [96, 3, 58, 3, 73, 4, 45]]"
1758,rod,4,28,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 6, 9, 4]"
1759,ilp_prod,8,68,0,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 10, 22, 12]
consumption (rows=resources) = [[2, 5, 3, 1], [2, 8, 3, 5], [2, 2, 6, 3], [4, 4, 6, 8]]
capacity = [27, 16, 18, 24]
upper_bounds = [6, 3, 3, 3]"
1760,rod,32,2976,2025,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [93, 77, 62, 78, 32, 46, 85, 31, 53, 42, 6, 40, 60, 15, 85, 16, 65, 51, 93, 18, 50, 39, 66, 61, 87, 12, 66, 66, 72, 65, 33, 16]"
1761,sub,4,241,-4,0,3877,0,"{'ok': True, 'value': 15508, 'stdout': '15508\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08151745796203613}",0,Compute: 3877 - 3636
1762,mul,8,1822869097235568,,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07180261611938477}",0,Compute: 26022471 * 70049808
1763,lcs,4,2,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbd""
T = ""bda"""
1764,add,4,9273,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 5726 + 3547
1765,knap,32,1598,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [56, 6, 55, 12, 20, 31, 55, 17, 19, 59, 19, 20, 29, 17, 51, 31, 25, 5, 57, 42, 2, 5, 12, 7, 60, 28, 40, 5, 2, 18, 47, 18]
V = [125, 40, 28, 4, 36, 99, 84, 58, 15, 1, 11, 97, 116, 75, 25, 62, 121, 80, 120, 122, 7, 105, 75, 62, 119, 28, 50, 52, 48, 48, 10, 9]
C = 435"
1766,ilp_assign,2,4,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [3, 6]]"
1767,ilp_assign,2,7,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [4, 6]]"
1768,knap,2,10,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 5]
V = [1, 1, 10]
C = 7"
1769,sub,4,105,7,0,1,0,"{'ok': True, 'value': 29916, 'stdout': '29916\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08555340766906738}",0,Compute: 7479 - 7374
1770,lcs,4,4,6,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccd""
T = ""cccd"""
1771,knap,32,1372,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 15, 31, 38, 41, 26, 46, 5, 59, 54, 11, 62, 50, 5, 21, 64, 24, 42, 9, 24, 21, 32, 60, 63, 22, 63, 9, 48, 35, 6, 36, 44]
V = [67, 70, 66, 95, 17, 112, 30, 53, 29, 51, 6, 25, 60, 64, 69, 122, 68, 81, 33, 28, 59, 68, 75, 38, 20, 65, 59, 39, 3, 1, 101, 75]
C = 541"
1772,sub,4,307,7,0,4,0,"{'ok': True, 'value': 25764, 'stdout': '25764\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07817792892456055}",0,Compute: 3441 - 3134
1773,mul,32,3018456555178655358092555124717475958417241887396129172795501978,10,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07030344009399414}",0,Compute: 31527033459115034440834285938674 * 95741851484157482136500174906997
1774,add,2,172,159,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 93 + 79
1775,ilp_assign,32,82,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[84, 21, 50, 81, 45, 1, 64], [35, 39, 40, 50, 16, 31, 14], [60, 27, 87, 33, 1, 73, 29], [46, 13, 30, 61, 27, 65, 48], [1, 73, 25, 35, 22, 96, 85], [10, 13, 68, 28, 31, 51, 93], [60, 63, 86, 22, 43, 91, 76]]"
1776,add,4,7365,2022,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 4732 + 2633
1777,lcs,16,9,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaadcbbdaddccbb""
T = ""dbdcbabbaadabdbda"""
1778,lcs,16,7,6,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbacdbbcdbbccddc""
T = ""cdcaaccbdddddabbd"""
1779,ilp_assign,32,72,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[73, 63, 50, 4, 83, 85, 6], [14, 78, 13, 52, 32, 49, 56], [83, 28, 61, 37, 18, 32, 47], [56, 50, 68, 86, 30, 17, 55], [6, 25, 33, 4, 50, 24, 43], [60, 72, 61, 2, 15, 38, 28], [53, 10, 27, 17, 37, 14, 53]]"
1780,knap,8,93,10000,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 12, 15, 16, 13, 7, 11]
V = [10, 18, 21, 13, 3, 26, 18, 21]
C = 41"
1781,ilp_partition,8,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 14, 18, 16, 6, 17, 4, 4]"
1782,ilp_partition,4,3,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 3, 3, 2]"
1783,ilp_partition,8,1,1,1,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 7, 7, 6, 24, 23, 4, 21]"
1784,ilp_prod,2,12,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[3, 1], [2, 3]]
capacity = [9, 6]
upper_bounds = [3, 3]"
1785,ilp_prod,8,85,0,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 5, 19, 21]
consumption (rows=resources) = [[8, 1, 7, 4], [7, 5, 3, 3], [7, 1, 1, 1], [8, 1, 6, 8]]
capacity = [26, 21, 22, 30]
upper_bounds = [3, 4, 3, 3]"
1786,add,2,179,7,0,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 80 + 99
1787,mul,8,9449465870002158,,0,0,0,"{'ok': True, 'value': 397534644, 'stdout': '397534644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0916593074798584}",0,Compute: 99383661 * 95080678
1788,ilp_partition,16,1,9,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 7, 8, 34, 41, 12, 2, 39, 39, 10, 17, 29, 46, 18, 9, 36]"
1789,knap,16,423,203,0,510,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 8, 25, 2, 14, 26, 30, 26, 17, 6, 16, 26, 7, 19, 29, 19]
V = [33, 56, 60, 31, 45, 42, 30, 45, 3, 33, 16, 62, 42, 39, 7, 5]
C = 138"
1790,sub,32,20619622669397656740621446065796,87910151702460479145721805411231,0,120,0,"{'ok': True, 'value': 351640606809841916582887221644924, 'stdout': '351640606809841916582887221644924\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07952046394348145}",0,Compute: 87910151702460479145721805411231 - 67290529033062822405100359345435
1791,add,32,115332121768168215739987550384277,0,0,2,0,"{'ok': True, 'value': 87544896987736858088789113849692, 'stdout': '87544896987736858088789113849692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09024214744567871}",0,Compute: 21886224246934214522197278462423 + 93445897521234001217790271921854
1792,ilp_assign,16,35,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 2, 41, 9, 16, 19, 10], [2, 48, 26, 32, 2, 16, 30], [12, 23, 3, 36, 7, 31, 23], [9, 24, 33, 23, 23, 14, 5], [11, 22, 35, 29, 10, 17, 1], [44, 32, 48, 8, 18, 29, 13], [39, 6, 1, 14, 37, 23, 11]]"
1793,knap,2,10,4,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 2]
V = [10, 2, 8]
C = 3"
1794,knap,4,20,5,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 7, 8, 6]
V = [4, 6, 13, 14]
C = 13"
1795,ilp_partition,8,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 16, 9, 15, 18, 23, 12, 19]"
1796,ilp_partition,16,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 25, 3, 4, 41, 45, 29, 29, 20, 10, 46, 46, 40, 20, 32, 17]"
1797,ilp_partition,2,1,,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 4, 3, 1]"
1798,ilp_assign,2,2,8,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [1, 6]]"
1799,ilp_assign,32,159,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[91, 54, 50, 33, 42, 50, 12], [3, 37, 11, 43, 27, 9, 63], [91, 86, 14, 56, 23, 43, 53], [96, 75, 64, 93, 46, 44, 72], [47, 91, 50, 80, 24, 78, 94], [45, 24, 80, 87, 73, 24, 8], [78, 96, 4, 91, 86, 2, 70]]"
1800,ilp_prod,32,417,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 68, 61, 51, 26, 67]
consumption (rows=resources) = [[26, 24, 11, 7, 32, 3], [2, 26, 19, 8, 12, 18], [6, 1, 5, 21, 26, 4], [18, 17, 10, 25, 6, 31]]
capacity = [102, 127, 82, 91]
upper_bounds = [3, 4, 6, 3, 3, 3]"
1801,mul,2,5049,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 99 * 51
1802,sub,8,40738594,,0,6,0,"{'ok': True, 'value': 207238268, 'stdout': '207238268\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09924912452697754}",0,Compute: 51809567 - 11070973
1803,mul,32,3954927505803360188020098896700578949180488465803204895300614446,23,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08598041534423828}",0,Compute: 92448312509663320513991541412833 * 42779877733192420553213349543662
1804,knap,8,97,7,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 14, 2, 11, 12, 12, 14, 8]
V = [23, 25, 5, 15, 30, 9, 23, 24]
C = 40"
1805,mul,16,10795277733731300721332420161178,1592,0,1592258968517654,0,"{'ok': True, 'value': 6369035874070616, 'stdout': '6369035874070616\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08880209922790527}",0,Compute: 1592258968517654 * 6779850481094407
1806,ilp_assign,2,2,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [1, 2]]"
1807,sub,4,5557,20,0,1,0,"{'ok': True, 'value': 39228, 'stdout': '39228\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09298253059387207}",0,Compute: 9807 - 4250
1808,ilp_partition,8,0,9,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 9, 7, 14, 24, 13, 6, 19]"
1809,ilp_assign,2,5,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [1, 5]]"
1810,mul,8,6003182761110910,0,0,0,0,"{'ok': True, 'value': 339682760, 'stdout': '339682760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06964111328125}",0,Compute: 84920690 * 70691639
1811,sub,32,18327877235507460228631376091532,5,0,41710429806302419367513429384986,0,"{'ok': True, 'value': 166841719225209677470053717539944, 'stdout': '166841719225209677470053717539944\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07665801048278809}",0,Compute: 41710429806302419367513429384986 - 23382552570794959138882053293454
1812,knap,32,1657,1915,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [54, 43, 21, 43, 29, 18, 60, 48, 60, 1, 35, 29, 15, 47, 11, 38, 29, 5, 45, 24, 53, 55, 32, 64, 59, 44, 19, 58, 6, 45, 32, 3]
V = [34, 2, 33, 27, 86, 89, 76, 102, 41, 75, 55, 70, 29, 66, 126, 122, 36, 86, 86, 80, 23, 51, 118, 17, 104, 25, 122, 18, 114, 39, 25, 11]
C = 562"
1813,rod,4,48,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 11, 8, 11]"
1814,rod,32,3008,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [94, 57, 83, 13, 83, 63, 22, 4, 91, 90, 32, 81, 16, 80, 66, 63, 74, 4, 6, 92, 96, 34, 54, 81, 11, 16, 34, 49, 21, 23, 55, 87]"
1815,add,32,84797965817887013488409914050577,673937,0,17404243703718,0,"{'ok': True, 'value': 69616974814875566389717601565668, 'stdout': '69616974814875566389717601565668\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0867457389831543}",0,Compute: 17404243703718891597429400391417 + 67393722114168121890980513659160
1816,sub,16,792107012494879,7,0,9077084388287261,0,"{'ok': True, 'value': 36308337553149044, 'stdout': '36308337553149044\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.072723388671875}",0,Compute: 9077084388287261 - 8284977375792382
1817,add,2,60,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 18 + 42
1818,add,2,173,121,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 81 + 92
1819,ilp_prod,4,66,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 10, 3]
consumption (rows=resources) = [[2, 4, 4], [1, 2, 1], [2, 3, 2]]
capacity = [16, 12, 12]
upper_bounds = [6, 4, 4]"
1820,lcs,4,1,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbad""
T = ""dccc"""
1821,ilp_partition,16,0,0,1,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 28, 46, 37, 11, 28, 5, 29, 46, 43, 34, 15, 7, 8, 13, 17]"
1822,knap,8,73,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 16, 12, 4, 13, 10, 12, 11]
V = [12, 27, 16, 13, 5, 15, 6, 17]
C = 46"
1823,ilp_assign,16,70,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[42, 2, 15, 4, 32, 32, 23], [19, 16, 40, 13, 8, 12, 46], [27, 2, 10, 34, 41, 14, 45], [32, 34, 39, 27, 12, 20, 15], [34, 29, 12, 26, 10, 27, 3], [31, 6, 14, 9, 34, 25, 16], [42, 14, 12, 30, 39, 17, 36]]"
1824,ilp_prod,2,20,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[3, 1], [1, 3]]
capacity = [8, 6]
upper_bounds = [3, 3]"
1825,lcs,8,3,2,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbabaca""
T = ""abdcddddd"""
1826,knap,4,19,5,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 6, 7]
V = [13, 6, 1, 13]
C = 11"
1827,lcs,2,1,16,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""ad"""
1828,mul,2,1462,,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 34 * 43
1829,rod,32,3040,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [95, 37, 28, 86, 54, 60, 2, 35, 17, 43, 62, 7, 20, 73, 52, 47, 51, 71, 62, 29, 32, 1, 90, 64, 72, 38, 89, 88, 92, 62, 14, 21]"
1830,mul,32,586288728960554030085107857192699702130604189260237622816751524,185804273776578234083661510630,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07547402381896973}",0,Compute: 31554103522158020066204610443558 * 18580427377657823408366151063078
1831,rod,8,72,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 10, 4, 21, 15, 5, 9, 11]"
1832,knap,32,1296,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 55, 19, 13, 23, 7, 57, 61, 20, 26, 6, 1, 14, 17, 29, 33, 5, 61, 17, 17, 13, 11, 7, 45, 14, 22, 5, 10, 60, 55, 5, 53]
V = [50, 55, 79, 15, 71, 27, 19, 128, 35, 36, 122, 81, 35, 103, 47, 35, 29, 113, 48, 14, 54, 54, 9, 38, 7, 59, 28, 45, 43, 62, 1, 120]
C = 401"
1833,sub,16,901950572930858,,0,1,0,"{'ok': True, 'value': 28260658859349668, 'stdout': '28260658859349668\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07999038696289062}",0,Compute: 7065164714837417 - 6163214141906559
1834,knap,32,1613,30,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [47, 64, 16, 22, 43, 28, 23, 37, 28, 12, 6, 4, 48, 54, 2, 41, 50, 48, 31, 59, 32, 9, 52, 46, 5, 24, 22, 58, 46, 59, 59, 43]
V = [106, 24, 31, 104, 6, 75, 124, 30, 69, 19, 11, 51, 42, 106, 58, 45, 120, 67, 37, 6, 97, 21, 106, 127, 84, 52, 125, 92, 10, 117, 63, 30]
C = 559"
1835,ilp_assign,32,152,3,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[84, 92, 68, 11, 24, 38, 70], [44, 61, 54, 9, 42, 18, 1], [60, 37, 39, 45, 48, 83, 8], [72, 16, 87, 2, 85, 85, 76], [84, 48, 39, 84, 47, 87, 93], [44, 22, 37, 83, 15, 17, 42], [92, 18, 82, 69, 82, 21, 1]]"
1836,add,8,74273115,0,0,6,0,"{'ok': True, 'value': 209320948, 'stdout': '209320948\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11164975166320801}",0,Compute: 52330237 + 21942878
1837,ilp_prod,16,136,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 40, 48, 14, 4, 33]
consumption (rows=resources) = [[2, 7, 16, 1, 16, 11], [16, 10, 15, 12, 6, 11], [11, 13, 10, 2, 1, 10], [16, 10, 7, 13, 2, 11]]
capacity = [58, 40, 41, 40]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1838,lcs,8,4,100,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccaadcca""
T = ""dcadcddbb"""
1839,ilp_assign,8,35,-2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 7, 2, 6, 23, 12, 14], [22, 9, 7, 6, 7, 13, 17], [6, 6, 8, 15, 5, 20, 20], [20, 10, 19, 11, 6, 22, 11], [18, 19, 20, 10, 8, 7, 6], [10, 2, 5, 5, 1, 14, 2], [12, 23, 15, 5, 14, 7, 6]]"
1840,rod,8,152,0,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 6, 23, 5, 11, 7, 5, 16]"
1841,mul,16,33685955924034777382336095012698,783208345,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08255529403686523}",0,Compute: 4301021066005942 * 7832083453456919
1842,rod,16,464,10,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [29, 13, 18, 33, 18, 33, 29, 13, 17, 31, 44, 6, 9, 12, 36, 16]"
1843,ilp_assign,32,59,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 60, 94, 72, 31, 1, 64], [80, 3, 79, 66, 3, 8, 19], [67, 55, 7, 52, 28, 79, 21], [76, 84, 40, 24, 76, 44, 19], [82, 67, 64, 78, 25, 31, 21], [59, 45, 59, 84, 1, 35, 31], [2, 34, 82, 41, 67, 75, 87]]"
1844,sub,16,458172055135873,-1,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1359403133392334}",0,Compute: 4401048241169744 - 3942876186033871
1845,rod,2,6,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
1846,rod,4,14,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 7, 6, 2]"
1847,mul,2,1188,,0,28,0,"{'ok': True, 'value': 216, 'stdout': '216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08906674385070801}",0,Compute: 54 * 22
1848,add,16,8177576670010442,0,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0893251895904541}",0,Compute: 5194319933896749 + 2983256736113693
1849,lcs,4,3,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abac""
T = ""abc"""
1850,mul,4,22148340,204120,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 5028 * 4405
1851,sub,4,7529,-121,0,3,0,"{'ok': True, 'value': 39176, 'stdout': '39176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0710299015045166}",0,Compute: 9794 - 2265
1852,lcs,32,18,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adadbbcbbddadabbcbccbdcccdbaddbd""
T = ""cdaccdddbccccbbccaacaccdccdcabcac"""
1853,add,16,16660076620650089,0,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07660079002380371}",0,Compute: 9714592390654944 + 6945484229995145
1854,lcs,8,5,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddcbaba""
T = ""bdccdbadd"""
1855,mul,32,5078307683825169596253501530915594277294725271713300407661002380,12,0,409,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0720968246459961}",0,Compute: 62825566389330396316468939173732 * 80831864727726729382882874762715
1856,ilp_prod,32,252,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [93, 79, 40, 92, 37, 35]
consumption (rows=resources) = [[25, 6, 12, 17, 19, 21], [17, 25, 16, 11, 4, 22], [30, 30, 9, 29, 12, 7], [22, 4, 13, 3, 6, 9]]
capacity = [90, 76, 70, 78]
upper_bounds = [3, 3, 4, 3, 4, 3]"
1857,add,32,37049571332791181768464054194283,11340924476,0,0,0,"{'ok': True, 'value': 102834587425699010352252140465420, 'stdout': '102834587425699010352252140465420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09319472312927246}",0,Compute: 25708646856424752588063035116355 + 11340924476366429180401019077928
1858,ilp_assign,2,3,77,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 1], [3, 2]]"
1859,ilp_partition,8,1,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 13, 4, 8, 13, 6, 23, 10]"
1860,add,8,106233975,1,0,3,0,"{'ok': True, 'value': 282661656, 'stdout': '282661656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08857321739196777}",0,Compute: 70665414 + 35568561
1861,mul,4,30605352,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 3116 * 9822
1862,add,2,124,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 59 + 65
1863,ilp_partition,4,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 2, 4]"
1864,sub,16,1246732491995065,8885165128603607,0,373762194,0,"{'ok': True, 'value': 35540660514414428, 'stdout': '35540660514414428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07426667213439941}",0,Compute: 8885165128603607 - 7638432636608542
1865,lcs,4,1,3,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddb""
T = ""bccac"""
1866,mul,8,4608236373664350,,0,35,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11105847358703613}",0,Compute: 54098282 * 85182675
1867,rod,4,36,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 11, 12, 9]"
1868,ilp_prod,16,349,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 43, 36, 9, 24, 48]
consumption (rows=resources) = [[1, 7, 7, 9, 6, 3], [16, 4, 1, 5, 13, 10], [9, 2, 4, 8, 10, 1], [11, 1, 16, 6, 7, 6]]
capacity = [58, 41, 61, 60]
upper_bounds = [3, 8, 3, 6, 3, 4]"
1869,knap,8,98,-8,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 14, 7, 15, 5, 7, 3, 14]
V = [5, 25, 10, 16, 20, 17, 31, 25]
C = 35"
1870,rod,8,128,10,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 11, 12, 15, 10, 3, 2, 17]"
1871,ilp_assign,16,64,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 7, 13, 45, 21, 23, 43], [33, 23, 20, 30, 31, 42, 24], [44, 40, 10, 10, 29, 1, 24], [22, 13, 38, 3, 18, 8, 25], [9, 45, 36, 21, 2, 30, 10], [37, 42, 34, 9, 12, 45, 24], [11, 12, 23, 12, 46, 48, 43]]"
1872,ilp_partition,8,2,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 9, 9, 17, 17, 13, 8, 17]"
1873,add,32,166601005128233951742565667644594,74014283140639899402517176436456,0,2,0,"{'ok': True, 'value': 296057132562559597610068705745824, 'stdout': '296057132562559597610068705745824\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07968616485595703}",0,Compute: 74014283140639899402517176436456 + 92586721987594052340048491208138
1874,ilp_prod,32,316,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 79, 50, 7, 75, 40]
consumption (rows=resources) = [[17, 16, 24, 15, 26, 14], [11, 7, 4, 29, 12, 2], [9, 2, 31, 1, 3, 29], [16, 16, 17, 21, 27, 15]]
capacity = [66, 105, 122, 101]
upper_bounds = [3, 4, 3, 3, 3, 4]"
1875,lcs,4,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccb""
T = ""dca"""
1876,sub,16,3096080100583203,-4890255783634820,0,7986335884218023,0,"{'ok': True, 'value': 31945343536872092, 'stdout': '31945343536872092\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08501672744750977}",0,Compute: 7986335884218023 - 4890255783634820
1877,ilp_partition,4,1,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 3, 8]"
1878,rod,2,2,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
1879,ilp_prod,8,53,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 4, 21, 22]
consumption (rows=resources) = [[7, 2, 7, 1], [3, 4, 7, 6], [4, 2, 7, 6], [1, 2, 4, 6]]
capacity = [27, 17, 29, 25]
upper_bounds = [3, 4, 3, 3]"
1880,knap,4,13,2025,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 4, 4]
V = [8, 2, 11, 2]
C = 7"
1881,ilp_prod,4,36,4,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 11, 11]
consumption (rows=resources) = [[4, 3, 1], [2, 4, 4], [2, 2, 1]]
capacity = [16, 8, 13]
upper_bounds = [4, 3, 3]"
1882,sub,32,58676654566412802605992205697355,3,0,93941409238233539514734050679421,0,"{'ok': True, 'value': 375765636952934158058936202717684, 'stdout': '375765636952934158058936202717684\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09541177749633789}",0,Compute: 93941409238233539514734050679421 - 35264754671820736908741844982066
1883,sub,16,688856055881072,7,0,0,0,"{'ok': True, 'value': 25746522191166400, 'stdout': '25746522191166400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08392047882080078}",0,Compute: 6436630547791600 - 5747774491910528
1884,lcs,16,10,35,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdbcabaadaccbdb""
T = ""accaabacaacbabd"""
1885,sub,2,36,1,0,2,0,"{'ok': True, 'value': 352, 'stdout': '352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0827796459197998}",0,Compute: 88 - 52
1886,knap,32,1849,7,0,97,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 31, 11, 58, 7, 15, 14, 64, 59, 42, 39, 8, 1, 8, 27, 60, 5, 27, 46, 38, 19, 62, 49, 24, 13, 64, 49, 44, 23, 16, 34, 15]
V = [65, 29, 66, 123, 18, 49, 100, 14, 14, 113, 92, 72, 20, 78, 79, 53, 84, 94, 70, 100, 87, 85, 122, 90, 119, 97, 48, 49, 61, 72, 75, 119]
C = 492"
1887,knap,8,99,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 7, 6, 10, 3, 9, 6, 13]
V = [20, 12, 30, 26, 6, 23, 23, 15]
C = 30"
1888,mul,4,10630620,,0,7,0,"{'ok': True, 'value': 5040, 'stdout': '5040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07754182815551758}",0,Compute: 1260 * 8437
1889,ilp_prod,16,217,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 28, 19, 9, 15, 14]
consumption (rows=resources) = [[11, 3, 1, 6, 3, 8], [4, 10, 12, 4, 3, 11], [1, 7, 7, 12, 1, 13], [10, 9, 16, 5, 2, 13]]
capacity = [62, 62, 32, 44]
upper_bounds = [4, 4, 3, 3, 10, 3]"
1890,ilp_prod,2,10,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[1, 3], [3, 3]]
capacity = [6, 6]
upper_bounds = [3, 3]"
1891,ilp_partition,32,1,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [29, 83, 14, 95, 22, 63, 4, 15, 77, 62, 44, 92, 39, 96, 34, 56, 51, 95, 44, 13, 75, 18, 45, 89]"
1892,ilp_assign,16,51,3,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 39, 23, 40, 27, 32, 13], [36, 20, 43, 37, 44, 15, 34], [34, 23, 6, 13, 3, 9, 28], [11, 37, 38, 32, 30, 40, 7], [29, 12, 15, 36, 21, 40, 35], [44, 34, 13, 8, 44, 19, 32], [43, 16, 1, 19, 21, 42, 20]]"
1893,ilp_assign,16,59,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 12, 31, 23, 15, 29, 12], [31, 27, 28, 47, 5, 28, 3], [37, 40, 9, 48, 32, 8, 20], [20, 24, 28, 27, 19, 26, 46], [32, 32, 46, 10, 17, 40, 42], [23, 26, 3, 20, 10, 20, 20], [11, 3, 43, 25, 6, 36, 38]]"
1894,rod,32,760,,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [10, 17, 74, 12, 37, 35, 94, 45, 38, 61, 41, 17, 60, 69, 55, 56, 82, 78, 1, 58, 55, 2, 85, 36, 34, 72, 69, 93, 12, 52, 36, 22]"
1895,sub,4,7110,7,0,0,0,"{'ok': True, 'value': 3384, 'stdout': '3384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08569192886352539}",0,Compute: 8846 - 1736
1896,lcs,8,4,1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdbdbdb""
T = ""cacbddc"""
1897,add,2,153,192,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 96 + 57
1898,ilp_prod,2,28,9,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[2, 3], [1, 1]]
capacity = [8, 9]
upper_bounds = [4, 3]"
1899,add,16,18764727908699130,,0,9679905850137342,0,"{'ok': True, 'value': 38719623400549368, 'stdout': '38719623400549368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08460426330566406}",0,Compute: 9679905850137342 + 9084822058561788
1900,sub,32,67768734189524354266799240093994,998199,0,0,0,"{'ok': True, 'value': 367284067964966616346953280679568, 'stdout': '367284067964966616346953280679568\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09158015251159668}",0,Compute: 91821016991241654086738320169892 - 24052282801717299819939080075898
1901,ilp_partition,32,1,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [35, 57, 71, 24, 60, 95, 10, 16, 95, 13, 28, 78, 78, 48, 23, 53, 57, 38, 78, 32, 37, 1, 25, 1]"
1902,rod,8,120,,0,-2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 17, 24, 17, 8, 1, 11, 15]"
1903,add,16,14171215756437147,7,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834798812866211}",0,Compute: 5548319444193124 + 8622896312244023
1904,rod,4,40,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 2, 1, 3]"
1905,add,4,11705,8,0,12,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08022022247314453}",0,Compute: 4427 + 7278
1906,sub,2,4,-4,0,84,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08116888999938965}",0,Compute: 84 - 80
1907,ilp_prod,32,192,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [47, 18, 5, 79, 96, 23]
consumption (rows=resources) = [[31, 9, 23, 30, 11, 22], [31, 31, 30, 27, 29, 20], [12, 27, 12, 28, 21, 23], [10, 22, 9, 2, 7, 28]]
capacity = [105, 66, 126, 123]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1908,rod,2,5,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 5]"
1909,ilp_assign,32,154,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[43, 85, 36, 55, 4, 35, 14], [34, 53, 56, 67, 52, 83, 65], [71, 35, 27, 78, 86, 48, 93], [63, 87, 41, 40, 27, 42, 8], [4, 55, 19, 70, 27, 51, 63], [85, 45, 51, 74, 4, 94, 71], [77, 9, 41, 44, 48, 95, 51]]"
1910,mul,4,19098240,38240000000000,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 2688 * 7105
1911,sub,32,44113081491256616741294780018584,7,0,0,0,"{'ok': True, 'value': 333920753763346780755130385352728, 'stdout': '333920753763346780755130385352728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08962082862854004}",0,Compute: 83480188440836695188782596338182 - 39367106949580078447487816319598
1912,rod,4,48,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 5, 1, 5]"
1913,knap,8,112,-3,0,10000,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 15, 1, 5, 8, 4, 8, 9]
V = [24, 15, 12, 29, 23, 24, 3, 12]
C = 30"
1914,rod,2,8,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 3]"
1915,lcs,4,2,20,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacb""
T = ""bcbb"""
1916,mul,32,5301248159229873561234682463041822255640243369291075091885553656,5,0,-3,0,"{'ok': True, 'value': 245354915287000917455827124684856, 'stdout': '245354915287000917455827124684856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0963602066040039}",0,Compute: 61338728821750229363956781171214 * 86425791030577940235341387559204
1917,ilp_partition,32,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 57, 16, 76, 87, 82, 42, 42, 30, 78, 45, 93, 74, 45, 31, 53, 49, 46, 63, 14, 51, 20, 35, 83]"
1918,ilp_assign,32,72,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 17, 65, 16, 39, 2, 34], [80, 70, 76, 68, 56, 28, 12], [83, 76, 6, 57, 54, 11, 83], [50, 34, 78, 6, 43, 86, 63], [30, 52, 11, 25, 70, 27, 53], [72, 5, 31, 93, 51, 87, 62], [80, 88, 21, 33, 11, 40, 28]]"
1919,lcs,32,17,2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdcacccbdcbccbabadacbdcacbbcbbb""
T = ""ddcaabcdacddaababddcaabbbcddcacca"""
1920,ilp_prod,32,294,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 41, 17, 29, 61, 64]
consumption (rows=resources) = [[3, 5, 13, 18, 27, 18], [15, 4, 32, 13, 8, 5], [29, 27, 20, 6, 6, 29], [23, 1, 23, 15, 21, 22]]
capacity = [115, 77, 92, 100]
upper_bounds = [3, 3, 3, 5, 4, 3]"
1921,ilp_assign,16,32,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 24, 8, 40, 28, 23, 2], [9, 14, 9, 47, 47, 18, 12], [23, 42, 1, 43, 28, 41, 38], [26, 22, 44, 18, 5, 5, 14], [26, 18, 24, 13, 9, 36, 5], [3, 5, 18, 25, 26, 40, 40], [45, 13, 8, 1, 47, 1, 25]]"
1922,add,32,171130258772044764100454346376944,95816056872932533580,0,0,0,"{'ok': True, 'value': 383227224227491730134322026292932, 'stdout': '383227224227491730134322026292932\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08102917671203613}",0,Compute: 95806806056872932533580506573233 + 75323452715171831566873839803711
1923,lcs,32,21,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbaadacdabdbdcccccaccbdcbacccbd""
T = ""dbbadcdaddabdcdbadbdcbaaacdcbdcdd"""
1924,add,2,77,64,0,0,0,"{'ok': True, 'value': 256, 'stdout': '256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09329962730407715}",0,Compute: 64 + 13
1925,rod,4,36,6,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 4, 2, 2]"
1926,mul,32,2416351470144338043938555530339194409489536444441710499584680800,3060,0,409,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0801544189453125}",0,Compute: 24326333969502495753023750011100 * 99330687195763903370990244106728
1927,add,4,12277,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 5438 + 6839
1928,ilp_prod,32,556,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [79, 49, 90, 57, 16, 68]
consumption (rows=resources) = [[30, 8, 9, 11, 1, 27], [25, 31, 10, 30, 7, 22], [15, 8, 3, 17, 7, 28], [32, 10, 4, 19, 31, 14]]
capacity = [120, 67, 96, 70]
upper_bounds = [3, 3, 6, 3, 3, 3]"
1929,ilp_assign,16,78,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[28, 27, 7, 41, 48, 19, 3], [44, 14, 4, 38, 3, 40, 12], [36, 26, 21, 16, 32, 33, 16], [24, 30, 22, 48, 42, 38, 14], [46, 45, 12, 38, 9, 36, 8], [28, 21, 4, 7, 31, 11, 25], [18, 23, 26, 1, 27, 32, 31]]"
1930,knap,2,11,2,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 1]
V = [8, 1, 3]
C = 2"
1931,mul,32,1803900120886580245274562108645513648139927183321587455846389764,,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08509254455566406}",0,Compute: 45084374045414668970797184099474 * 40011648361125397459840797977586
1932,ilp_prod,2,24,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7]
consumption (rows=resources) = [[2, 3], [3, 2]]
capacity = [10, 10]
upper_bounds = [3, 3]"
1933,add,16,12429271037140352,20,0,0,0,"{'ok': True, 'value': 36710138430652296, 'stdout': '36710138430652296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08252620697021484}",0,Compute: 9177534607663074 + 3251736429477278
1934,mul,4,18653120,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 3284 * 5680
1935,ilp_prod,4,22,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 11, 4]
consumption (rows=resources) = [[3, 4, 3], [1, 3, 2], [1, 4, 4]]
capacity = [8, 15, 10]
upper_bounds = [3, 3, 3]"
1936,add,8,74432821,81285332,0,0,0,"{'ok': True, 'value': 130644120, 'stdout': '130644120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08335590362548828}",0,Compute: 32661030 + 41771791
1937,add,8,157725538,9,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 99581637 + 58143901
1938,mul,16,45401431214912225411789638546280,99999999999999999,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08419322967529297}",0,Compute: 9992477827016710 * 4543560866571068
1939,knap,16,336,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 10, 29, 1, 12, 13, 14, 14, 11, 1, 24, 2, 15, 3, 10, 11]
V = [15, 31, 53, 19, 27, 45, 7, 10, 48, 37, 40, 7, 28, 61, 4, 11]
C = 91"
1940,knap,8,88,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 16, 11, 8, 4, 1, 12]
V = [5, 12, 31, 8, 15, 10, 30, 5]
C = 27"
1941,rod,32,2912,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [91, 85, 87, 60, 73, 14, 71, 26, 8, 72, 11, 57, 9, 75, 12, 55, 85, 55, 43, 67, 72, 54, 8, 12, 26, 77, 39, 25, 38, 92, 70, 31]"
1942,knap,16,453,165,0,11111,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [20, 20, 29, 31, 30, 20, 17, 31, 16, 22, 14, 28, 20, 8, 3, 22]
V = [50, 61, 14, 10, 16, 60, 43, 37, 50, 9, 48, 26, 63, 9, 11, 58]
C = 165"
1943,ilp_prod,8,76,33,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 19, 13, 9]
consumption (rows=resources) = [[8, 3, 4, 1], [7, 8, 1, 8], [8, 6, 7, 2], [3, 8, 3, 1]]
capacity = [24, 32, 32, 26]
upper_bounds = [3, 3, 4, 4]"
1944,lcs,8,4,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daddacac""
T = ""cababcab"""
1945,sub,16,1766749768307267,-5,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0781104564666748}",0,Compute: 6778831109929630 - 5012081341622363
1946,ilp_assign,16,49,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[44, 1, 21, 28, 44, 8, 45], [12, 31, 48, 2, 22, 39, 7], [23, 37, 22, 10, 11, 4, 11], [20, 32, 30, 10, 32, 40, 3], [23, 23, 48, 22, 22, 3, 7], [26, 27, 32, 30, 46, 41, 14], [13, 7, 3, 35, 4, 31, 17]]"
1947,lcs,16,11,1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbbddabbbddbcaa""
T = ""bbbbdacdbbadcaacb"""
1948,ilp_prod,4,64,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 4]
consumption (rows=resources) = [[1, 1, 4], [2, 1, 3], [4, 1, 4]]
capacity = [16, 12, 14]
upper_bounds = [3, 10, 3]"
1949,ilp_partition,8,0,4,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 20, 22, 15, 14, 8, 24, 12]"
1950,sub,4,1693,1,0,4,0,"{'ok': True, 'value': 26444, 'stdout': '26444\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09285736083984375}",0,Compute: 6611 - 4918
1951,add,8,93047268,8,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 54616040 + 38431228
1952,add,4,7658,7,0,0,0,"{'ok': True, 'value': 19716, 'stdout': '19716\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0960226058959961}",0,Compute: 4929 + 2729
1953,mul,4,22041465,7,0,6,0,"{'ok': True, 'value': 39804, 'stdout': '39804\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08095049858093262}",0,Compute: 9951 * 2215
1954,knap,32,1760,0,0,125,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 35, 28, 15, 11, 62, 5, 47, 40, 29, 63, 20, 58, 8, 33, 7, 12, 40, 60, 21, 49, 49, 2, 18, 44, 16, 33, 23, 21, 23, 9, 56]
V = [20, 122, 81, 34, 85, 10, 77, 53, 40, 46, 96, 107, 48, 50, 1, 116, 99, 97, 68, 113, 35, 125, 32, 19, 112, 74, 19, 111, 73, 2, 90, 66]
C = 474"
1955,sub,4,1590,6723,0,0,0,"{'ok': True, 'value': 26892, 'stdout': '26892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09670615196228027}",0,Compute: 6723 - 5133
1956,knap,4,15,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 3, 6, 3]
V = [12, 5, 7, 8]
C = 10"
1957,ilp_prod,8,97,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 18, 14, 23]
consumption (rows=resources) = [[3, 7, 1, 6], [5, 1, 1, 7], [3, 8, 4, 7], [8, 3, 4, 1]]
capacity = [21, 29, 30, 16]
upper_bounds = [3, 3, 4, 3]"
1958,knap,16,362,165,0,44,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 21, 25, 18, 26, 14, 27, 23, 5, 29, 20, 20, 26, 23, 2, 19]
V = [17, 15, 42, 31, 32, 44, 18, 6, 45, 22, 33, 52, 8, 29, 39, 44]
C = 165"
1959,lcs,16,8,1,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbcdbbaacddcbbcc""
T = ""aaacbadccabcdcb"""
1960,ilp_prod,32,165,0,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 4, 39, 55, 75, 24]
consumption (rows=resources) = [[9, 4, 13, 6, 11, 12], [10, 22, 32, 23, 30, 30], [15, 21, 32, 25, 17, 10], [29, 18, 24, 17, 23, 28]]
capacity = [82, 69, 102, 121]
upper_bounds = [4, 3, 3, 3, 3, 3]"
1961,mul,32,6948820112446278159975296041927053055564495769501302737151583016,0,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08885669708251953}",0,Compute: 78125490628916627048190305178396 * 88944338864405260899384748335846
1962,knap,32,1514,125,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 22, 22, 28, 62, 64, 61, 27, 52, 24, 18, 33, 4, 58, 56, 19, 42, 1, 23, 52, 51, 64, 34, 16, 27, 2, 9, 50, 16, 33, 51, 52]
V = [55, 79, 45, 69, 49, 33, 124, 16, 75, 44, 30, 68, 14, 114, 121, 15, 30, 93, 40, 118, 19, 66, 101, 74, 1, 95, 37, 112, 12, 84, 32, 125]
C = 541"
1963,sub,8,17588748,861,0,1,0,"{'ok': True, 'value': 344417568, 'stdout': '344417568\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08132004737854004}",0,Compute: 86104392 - 68515644
1964,ilp_partition,32,0,,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 90, 29, 7, 58, 15, 34, 35, 49, 33, 83, 49, 16, 92, 94, 30, 7, 21, 31, 35, 15, 63, 27, 81]"
1965,ilp_partition,8,0,0,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 17, 9, 10, 5, 19, 24]"
1966,sub,32,7424786479029339390199536387560,-1,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 75282227500045736638536011229546 - 67857441021016397248336474841986
1967,mul,4,23116433,1,0,0,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09269285202026367}",0,Compute: 2843 * 8131
1968,ilp_partition,2,1,,0,485,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 1, 3]"
1969,sub,8,12585686,8,0,0,0,"{'ok': True, 'value': 108289376, 'stdout': '108289376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11583352088928223}",0,Compute: 27072344 - 14486658
1970,lcs,32,21,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcdabaacbbacdcacbbdabcdaadbaada""
T = ""daabcddaabbbadbbacdacaadadacdcccd"""
1971,lcs,16,7,6,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdaadacddccaccd""
T = ""bbbabccbbcacbaa"""
1972,ilp_partition,16,1,20,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 12, 7, 3, 43, 20, 39, 25, 16, 1, 5, 3, 2, 12, 20, 31]"
1973,knap,8,107,7,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 15, 12, 10, 5, 2, 8, 4]
V = [29, 32, 15, 21, 8, 20, 10, 18]
C = 29"
1974,mul,4,5476089,521750,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 5171 * 1059
1975,ilp_prod,16,166,27,0,-8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 32, 45, 22, 7, 38]
consumption (rows=resources) = [[13, 9, 9, 7, 15, 15], [8, 15, 1, 14, 10, 9], [2, 2, 7, 14, 9, 8], [15, 12, 11, 14, 10, 1]]
capacity = [49, 43, 49, 32]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1976,mul,16,40896728219586924683203278938648,973,0,0,0,"{'ok': True, 'value': 16810763012167724, 'stdout': '16810763012167724\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09492683410644531}",0,Compute: 4202690753041931 * 9731081971707208
1977,lcs,32,18,0,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcacddcdcabcbdddcccbbdcbdbdaaab""
T = ""bdcdcbaaababbbcaaacccbbcbcdbccb"""
1978,mul,8,2232710851420686,,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,Compute: 26374166 * 84655221
1979,ilp_assign,2,5,7,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 5], [4, 2]]"
1980,knap,2,9,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 4]
V = [3, 8, 9]
C = 5"
1981,ilp_partition,16,1,32,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 32, 5, 38, 21, 9, 9, 36, 5, 44, 32, 10, 17, 44, 18, 32]"
1982,ilp_prod,32,197,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 68, 69, 54, 20, 64]
consumption (rows=resources) = [[24, 31, 31, 30, 27, 22], [21, 19, 7, 8, 19, 12], [2, 22, 20, 19, 30, 1], [18, 2, 23, 20, 6, 8]]
capacity = [79, 66, 100, 82]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1983,knap,32,1930,31,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [61, 10, 24, 17, 34, 57, 31, 52, 30, 64, 4, 4, 41, 32, 34, 10, 50, 13, 42, 27, 13, 12, 11, 31, 16, 60, 24, 50, 17, 13, 32, 64]
V = [96, 125, 116, 87, 95, 80, 31, 88, 102, 41, 41, 98, 95, 100, 74, 109, 52, 78, 2, 68, 55, 76, 101, 1, 106, 32, 98, 72, 35, 74, 101, 6]
C = 490"
1984,ilp_assign,32,126,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 1, 62, 66, 6, 20, 71], [52, 46, 91, 88, 6, 96, 25], [56, 39, 30, 70, 23, 89, 78], [1, 87, 74, 30, 66, 16, 3], [77, 72, 3, 25, 45, 37, 95], [37, 51, 77, 93, 25, 96, 74], [70, 5, 80, 93, 69, 72, 12]]"
1985,add,4,16402,,0,6,0,"{'ok': True, 'value': 28708, 'stdout': '28708\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10056376457214355}",0,Compute: 7177 + 9225
1986,sub,32,9168415720842225428510674783886,,0,0,0,"{'ok': True, 'value': 166291677251722549685625784969612, 'stdout': '166291677251722549685625784969612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08407473564147949}",0,Compute: 41572919312930637421406446242403 - 32404503592088411992895771458517
1987,sub,16,227085627244771,-8839615236283655,0,-8839615236283655,0,"{'ok': True, 'value': 36266803454113704, 'stdout': '36266803454113704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08151006698608398}",0,Compute: 9066700863528426 - 8839615236283655
1988,lcs,2,1,0,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""ccd"""
1989,ilp_assign,4,16,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 12, 11, 2], [7, 7, 12, 2], [10, 1, 1, 9], [10, 7, 6, 3]]"
1990,lcs,16,9,2,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbabaaacbcddaca""
T = ""accabdbacdbabdd"""
1991,mul,16,13227731338138900785465594360812,,0,15,0,"{'ok': True, 'value': 20950632876362996, 'stdout': '20950632876362996\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07662320137023926}",0,Compute: 5237658219090749 * 2525504869700188
1992,sub,32,29045612914873252041963382545151,-67259497056691394706212925863552,0,2,0,"{'ok': True, 'value': 385220439886258586992705233634812, 'stdout': '385220439886258586992705233634812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0922553539276123}",0,Compute: 96305109971564646748176308408703 - 67259497056691394706212925863552
1993,ilp_prod,8,53,0,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 9, 24, 9]
consumption (rows=resources) = [[7, 6, 8, 5], [5, 3, 5, 2], [2, 8, 4, 2], [8, 2, 8, 3]]
capacity = [19, 26, 32, 28]
upper_bounds = [3, 3, 3, 3]"
1994,ilp_assign,16,54,0,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 12, 43, 15, 13, 17, 1], [29, 33, 42, 34, 15, 22, 23], [31, 25, 4, 15, 12, 18, 6], [46, 46, 48, 19, 27, 36, 26], [15, 1, 41, 34, 13, 38, 11], [8, 2, 30, 47, 20, 36, 5], [19, 4, 15, 38, 1, 6, 8]]"
1995,knap,2,15,0,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 2, 3]
V = [5, 10, 5]
C = 5"
1996,add,8,98834852,3,0,1,0,"{'ok': True, 'value': 332064608, 'stdout': '332064608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07655787467956543}",0,Compute: 83016152 + 15818700
1997,sub,2,5,-1,0,0,0,"{'ok': True, 'value': 324, 'stdout': '324\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08171868324279785}",0,Compute: 81 - 76
1998,rod,4,24,20,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 10, 12, 1]"
1999,rod,32,1392,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [18, 87, 71, 59, 85, 57, 15, 9, 55, 86, 23, 41, 48, 76, 69, 57, 15, 32, 20, 29, 25, 11, 12, 64, 41, 30, 50, 92, 50, 75, 95, 91]"
