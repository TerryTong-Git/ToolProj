idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,knap,2,10,10,1,2,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1450645923614502}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 2]
V = [1, 10, 5]
C = 3"
1,knap,16,362,15,0,129,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 25, 12, 23, 6, 6, 12, 17, 13, 17, 21, 17, 17, 30, 10, 29]
V = [20, 5, 23, 5, 41, 10, 25, 59, 31, 59, 21, 43, 18, 61, 8, 11]
C = 129"
2,ilp_prod,2,16,16,1,1,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08148598670959473}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6]
consumption (rows=resources) = [[3, 3], [2, 3]]
capacity = [7, 7]
upper_bounds = [3, 3]"
3,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09489750862121582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbdc""
T = ""ccbcd"""
4,lcs,4,1,,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdd""
T = ""aadcc"""
5,knap,16,391,21,0,124,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 1, 6, 7, 28, 23, 29, 22, 25, 24, 8, 9, 21, 2, 12, 9]
V = [3, 44, 25, 6, 53, 8, 40, 50, 7, 22, 46, 10, 53, 7, 57, 46]
C = 124"
6,add,8,85016539,85016539,1,85016539,1,"{'ok': True, 'value': 85016539, 'stdout': '85016539\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09723830223083496}",1,Compute: 34423455 + 50593084
7,lcs,32,18,,0,29,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbadbabdaadbcddadbbbbadcccbdaaaa""
T = ""cbbbacacbcaacbcdcddaacdddddabbdcb"""
8,ilp_assign,4,17,17,1,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 12, 12, 6], [6, 1, 9, 3], [5, 10, 3, 7], [10, 5, 12, 12]]"
9,mul{'ok': True, 'value': 8450792395772439948816441057342259902716010535647377074813808220, 'stdout': '8450792395772439948816441057342259902716010535647377074813808220\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09541583061218262}",1,Compute: 98814762467843050782023019496885 * 85521557555962878848044945534572
10,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08397698402404785}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 9, 10, 7]"
11,mul,32,1688046443228300663997360758665357264583990882219111281845188736,47392671830082774702620,0,1685897988978750986278440066340329360963073393292077737770777728,0,"{'ok': True, 'value': 1688046443228300663997360758665357264583990882219111281845188736, 'stdout': '1688046443228300663997360758665357264583990882219111281845188736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07996726036071777}",1,Compute: 47392671830082774702620572731792 * 35618300847870816692396389803208
12,ilp_prod,4,28,8,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 3, 7]
consumption (rows=resources) = [[3, 2, 2], [4, 1, 1], [1, 2, 2]]
capacity = [8, 14, 8]
upper_bounds = [3, 4, 4]"
13,mul,16,21147671350532803657490627997378,99,0,211322328522370745736774056367438,0,"{'ok': True, 'value': 21147671350532803657490627997378, 'stdout': '21147671350532803657490627997378\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08289742469787598}",1,Compute: 4683347299723927 * 4515503548451214
14,sub,32,27524559079399730197336105175549,1,0,27521558979400730197329044775549,0,"{'ok': True, 'value': 27524559079399730197336105175549, 'stdout': '27524559079399730197336105175549\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08618640899658203}",1,Compute: 88718215409712019084773041340231 - 61193656330312288887436936164682
15,add,32,129567263466988663698723560524856,1,0,129567263466988663698723560524856,1,"{'ok': True, 'value': 129567263466988663698723560524856, 'stdout': '129567263466988663698723560524856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08292055130004883}",1,Compute: 82540791985024106329389262047812 + 47026471481964557369334298477044
16,sub,8,30355863,30355863,1,30355863,1,"{'ok': True, 'value': 30355863, 'stdout': '30355863\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0926055908203125}",1,Compute: 57881834 - 27525971
17,mul,16,7382780567115135551069544670140,,0,7373423353592623092297391233164,0,"{'ok': True, 'value': 7382780567115135551069544670140, 'stdout': '7382780567115135551069544670140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11092734336853027}",1,Compute: 2219403763461510 * 3326470238835914
18,knap,8,93,4,0,101,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08639121055603027}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 16, 12, 9, 5, 1, 7, 12]
V = [22, 31, 19, 19, 21, 12, 6, 7]
C = 33"
19,rod,16,224,224,1,102,0,"{'ok': True, 'value': 224, 'stdout': '224\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09630703926086426}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [7, 28, 28, 16, 31, 25, 15, 26, 16, 42, 31, 26, 38, 5, 17, 18]"
20,rod,4,36,36,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 6, 6, 10]"
21,knap,32,1554,1,0,1324,0,"{'ok': True, 'value': 1554, 'stdout': '1554\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08906674385070801}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 3, 6, 13, 40, 12, 51, 17, 26, 36, 38, 21, 24, 29, 18, 17, 30, 34, 64, 39, 19, 35, 27, 11, 18, 53, 24, 26, 3, 45, 62, 17]
V = [70, 21, 72, 57, 2, 37, 54, 1, 108, 33, 38, 125, 11, 82, 57, 45, 117, 82, 114, 60, 71, 49, 26, 90, 126, 70, 91, 73, 56, 74, 101, 17]
C = 444"
22,sub,8,8771288,8771288,1,8771288,1,"{'ok': True, 'value': 8771288, 'stdout': '8771288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08071780204772949}",1,Compute: 36753798 - 27982510
23,ilp_assign,32,71,,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[62, 21, 14, 85, 15, 61, 94], [37, 94, 40, 39, 51, 5, 76], [35, 43, 60, 9, 8, 84, 92], [38, 29, 59, 82, 40, 71, 27], [49, 9, 55, 6, 6, 12, 48], [1, 38, 40, 8, 1, 5, 80], [6, 20, 77, 22, 61, 84, 11]]"
24,ilp_partition,4,6,6,1,10,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11660575866699219}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 4, 10, 10]"
25,add,8,180231588,180231588,1,180231588,1,"{'ok': True, 'value': 180231588, 'stdout': '180231588\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08545136451721191}",1,Compute: 91527862 + 88703726
26,ilp_prod,8,48,48,1,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 24, 16, 7]
consumption (rows=resources) = [[8, 3, 6, 3], [4, 3, 8, 6], [7, 7, 8, 7], [4, 4, 8, 4]]
capacity = [17, 28, 17, 23]
upper_bounds = [3, 3, 3, 3]"
27,ilp_partition,32,1,64,0,64,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09062075614929199}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [64, 26, 73, 79, 76, 10, 53, 37, 89, 87, 6, 34, 1, 4, 78, 21, 43, 23, 52, 30, 75, 71, 26, 5]"
28,knap,8,100,100,1,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 3, 3, 5, 14, 10, 14, 5]
V = [28, 20, 23, 6, 16, 29, 24, 4]
C = 33"
29,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10242629051208496}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcba""
T = ""acac"""
30,ilp_partition,4,6,6,1,2,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08471155166625977}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 11, 9, 10]"
31,add,8,54098399,54098399,1,54098399,1,"{'ok': True, 'value': 54098399, 'stdout': '54098399\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09232234954833984}",1,Compute: 41349381 + 12749018
32,ilp_prod,8,50,2,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 19, 10, 8]
consumption (rows=resources) = [[2, 7, 5, 5], [3, 4, 2, 7], [7, 5, 5, 8], [6, 3, 3, 2]]
capacity = [19, 28, 28, 30]
upper_bounds = [4, 3, 3, 3]"
33,mul,8,3071496399355219,3071496400355219,0,3074272723333739,0,"{'ok': True, 'value': 3071496399355219, 'stdout': '3071496399355219\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08386802673339844}",1,Compute: 31984249 * 96031531
34,sub,16,4231365152001630,4231365152001630,1,4231365152001630,1,"{'ok': True, 'value': 4231365152001630, 'stdout': '4231365152001630\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09520411491394043}",1,Compute: 9038285281008900 - 4806920129007270
35,ilp_assign,32,165,5,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[61, 71, 48, 39, 54, 75, 83], [22, 45, 5, 55, 57, 57, 40], [9, 88, 30, 43, 30, 49, 4], [80, 44, 20, 24, 64, 9, 13], [23, 78, 5, 30, 84, 23, 2], [84, 67, 87, 56, 87, 56, 23], [38, 51, 57, 40, 69, 5, 21]]"
36,mul,2,3640,3640,1,3640,1,"{'ok': True, 'value': 3640, 'stdout': '3640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09279727935791016}",1,Compute: 52 * 70
37,add,16,7876243483070444,8,0,7876243483070444,1,"{'ok': True, 'value': 7876243483070444, 'stdout': '7876243483070444\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09607887268066406}",1,Compute: 6654987979436494 + 1221255503633950
38,lcs,16,8,5,0,9,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10543131828308105}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccddaccdacaddadc""
T = ""aacaccbcdcbacbcb"""
39,sub,4,1612,1612,1,1612,1,"{'ok': True, 'value': 1612, 'stdout': '1612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09124541282653809}",1,Compute: 6874 - 5262
40,lcs,8,4,4,1,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09435653686523438}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddadcca""
T = ""aacaccba"""
41,ilp_partition,16,0,0,1,45,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.085540771484375}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 40, 32, 43, 37, 14, 39, 29, 3, 16, 32, 39, 21, 36, 47, 13]"
42,ilp_prod,32,348,24,0,32,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 38, 94, 6, 6, 66]
consumption (rows=resources) = [[25, 23, 31, 29, 31, 12], [2, 23, 14, 20, 28, 5], [15, 7, 11, 30, 9, 32], [21, 29, 10, 32, 17, 32]]
capacity = [107, 92, 69, 110]
upper_bounds = [4, 3, 3, 3, 3, 3]"
43,rod,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0896310806274414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
44,ilp_assign,8,44,,0,19,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 1, 4, 20, 23, 4, 6], [24, 14, 8, 7, 10, 24, 22], [1, 24, 18, 17, 14, 2, 4], [13, 21, 9, 4, 24, 19, 12], [8, 22, 23, 23, 18, 22, 10], [8, 24, 8, 3, 17, 10, 22], [11, 8, 12, 21, 16, 10, 19]]"
45,add,16,8488988083752320,8489088083752320,0,8488988083752320,1,"{'ok': True, 'value': 8488988083752320, 'stdout': '8488988083752320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0822756290435791}",1,Compute: 6889602519731162 + 1599385564021158
46,ilp_prod,8,100,16,0,11,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10520792007446289}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 20, 15, 11]
consumption (rows=resources) = [[1, 2, 5, 1], [1, 5, 7, 7], [8, 2, 5, 6], [5, 4, 2, 1]]
capacity = [18, 24, 25, 26]
upper_bounds = [3, 4, 3, 3]"
47,ilp_prod,2,10,10,1,1,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08142518997192383}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[3, 2], [1, 3]]
capacity = [7, 8]
upper_bounds = [3, 3]"
48,ilp_assign,16,86,4,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 30, 36, 22, 9, 27, 17], [25, 6, 37, 33, 22, 15, 30], [16, 23, 31, 27, 2, 29, 47], [1, 36, 26, 29, 15, 28, 16], [17, 31, 31, 10, 15, 29, 19], [24, 42, 32, 39, 10, 34, 44], [6, 13, 20, 34, 41, 44, 8]]"
49,rod,16,336,336,1,120,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08256959915161133}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [21, 33, 1, 3, 4, 8, 37, 40, 10, 10, 44, 25, 2, 27, 28, 37]"
50,sub,2,67,67,1,67,1,"{'ok': True, 'value': 67, 'stdout': '67\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09415030479431152}",1,Compute: 89 - 22
51,ilp_assign,16,82,5,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 26, 23, 33, 31, 15, 42], [46, 24, 41, 23, 28, 18, 23], [26, 46, 19, 7, 31, 19, 8], [29, 10, 23, 16, 48, 12, 22], [32, 15, 8, 44, 25, 25, 30], [33, 30, 37, 40, 15, 44, 26], [33, 20, 32, 15, 21, 34, 44]]"
52,ilp_prod,16,145,1,0,4096,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 9, 20, 35, 34, 38]
consumption (rows=resources) = [[13, 16, 9, 6, 8, 12], [6, 10, 5, 15, 3, 3], [16, 13, 14, 3, 9, 16], [8, 4, 10, 5, 12, 4]]
capacity = [40, 35, 40, 44]
upper_bounds = [3, 3, 3, 3, 3, 3]"
53,ilp_partition,16,0,0,1,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 22, 44, 34, 13, 47, 21, 12, 34, 35, 46, 39, 38, 28, 10, 41]"
54,ilp_partition,8,0,0,1,18,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 18, 21, 20, 4, 10, 5, 17]"
55,ilp_assign,8,26,5,0,5040,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5, 1, 18, 17, 11, 12], [19, 21, 1, 5, 13, 5, 6], [17, 3, 5, 7, 16, 19, 23], [7, 8, 24, 5, 8, 13, 12], [20, 19, 5, 21, 16, 4, 20], [1, 17, 20, 12, 16, 15, 10], [1, 8, 18, 21, 6, 22, 16]]"
56,knap,32,1675,,0,64,0,"{'ok': True, 'value': 1675, 'stdout': '1675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10413885116577148}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 28, 1, 19, 31, 59, 61, 12, 36, 38, 51, 43, 39, 12, 16, 64, 48, 12, 30, 18, 53, 31, 3, 63, 37, 19, 48, 19, 15, 42, 41, 10]
V = [93, 50, 52, 76, 109, 97, 102, 10, 37, 113, 20, 74, 40, 49, 126, 90, 40, 39, 110, 68, 55, 30, 41, 36, 114, 109, 46, 10, 77, 121, 22, 94]
C = 513"
57,ilp_assign,32,115,25,0,5040,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[81, 33, 42, 25, 82, 15, 80], [86, 89, 32, 46, 52, 14, 36], [50, 72, 46, 5, 82, 43, 30], [51, 5, 54, 69, 35, 21, 34], [6, 96, 35, 93, 11, 43, 84], [54, 1, 87, 35, 30, 84, 91], [23, 33, 48, 68, 82, 15, 22]]"
58,ilp_prod,2,30,30,1,1,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10834908485412598}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[2, 1], [1, 1]]
capacity = [7, 6]
upper_bounds = [3, 6]"
59,knap,4,18,18,1,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10462832450866699}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 5, 8]
V = [4, 9, 5, 12]
C = 8"
60,knap,4,11,11,1,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10966849327087402}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 5, 1]
V = [2, 2, 7, 9]
C = 5"
61,ilp_assign,8,47,14,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 3, 6, 12, 2, 24, 21], [22, 6, 8, 20, 10, 20, 3], [23, 17, 10, 12, 14, 15, 2], [21, 23, 17, 22, 21, 18, 24], [14, 19, 15, 16, 9, 23, 16], [7, 11, 9, 2, 2, 2, 6], [12, 1, 10, 21, 1, 5, 3]]"
62,ilp_assign,32,103,103,1,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[83, 18, 54, 44, 17, 89, 72], [47, 76, 22, 11, 12, 32, 15], [26, 62, 92, 84, 25, 4, 49], [43, 34, 46, 76, 33, 57, 67], [96, 5, 40, 58, 56, 29, 95], [96, 61, 2, 67, 77, 94, 51], [92, 44, 28, 73, 45, 38, 21]]"
63,lcs,4,1,4,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daab""
T = ""cbbbd"""
64,sub,32,23029536167217223085430362583688,2230953618702423862641832652388,0,23029536167217223085434262583688,0,"{'ok': True, 'value': 23029536167217223085430362583688, 'stdout': '23029536167217223085430362583688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08890867233276367}",1,Compute: 95565864813316844754589384462739 - 72536328646099621669159021879051
65,ilp_partition,16,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08632349967956543}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 44, 22, 32, 44, 13, 11, 24, 36, 23, 46, 29, 26, 29, 43, 21]"
66,rod,2,12,12,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
67,knap,4,22,22,1,1,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10291743278503418}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 5, 5]
V = [6, 4, 16, 13]
C = 8"
68,sub,2,47,47,1,47,1,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09432339668273926}",1,Compute: 84 - 37
69,add,4,5954,5954,1,5954,1,"{'ok': True, 'value': 5954, 'stdout': '5954\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09989786148071289}",1,Compute: 3954 + 2000
70,ilp_partition,8,2,2,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 2, 11, 24, 24, 8, 11, 15]"
71,rod,16,704,13,0,44,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 22, 46, 16, 9, 24, 33, 14, 35, 26, 5, 9, 27, 37, 43, 23]"
72,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09726691246032715}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dc""
T = ""a"""
73,add,4,11676,11676,1,11676,1,"{'ok': True, 'value': 11676, 'stdout': '11676\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09196901321411133}",1,Compute: 7410 + 4266
74,sub,4,2381,2381,1,2381,1,"{'ok': True, 'value': 2381, 'stdout': '2381\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10815119743347168}",1,Compute: 4332 - 1951
75,rod,2,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09611797332763672}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
76,ilp_assign,4,11,11,1,0,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09412431716918945}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 10, 3, 2], [4, 8, 7, 6], [9, 3, 2, 10], [8, 3, 10, 7]]"
77,mul,4,13440174,13440174,1,13440174,1,"{'ok': True, 'value': 13440174, 'stdout': '13440174\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09742379188537598}",1,Compute: 2046 * 6569
78,lcs,8,7,7,1,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09541869163513184}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabcacbd""
T = ""aadcacbd"""
79,sub,8,57430313,57430313,1,57430313,1,"{'ok': True, 'value': 57430313, 'stdout': '57430313\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08239269256591797}",1,Compute: 76237793 - 18807480
80,mul,2,1782,1782,1,1782,1,"{'ok': True, 'value': 1782, 'stdout': '1782\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10590004920959473}",1,Compute: 81 * 22
81,ilp_prod,8,84,3,0,4,0,"{'ok': True, 'value': 84, 'stdout': '84\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10500693321228027}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 20, 24, 12]
consumption (rows=resources) = [[6, 8, 7, 4], [8, 8, 6, 8], [1, 8, 5, 3], [8, 1, 4, 1]]
capacity = [27, 31, 28, 16]
upper_bounds = [3, 3, 3, 3]"
82,ilp_partition,8,1,1,1,41,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 16, 18, 11, 23, 3, 9, 5]"
83,ilp_assign,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09860992431640625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [5, 5]]"
84,ilp_prod,8,91,4,0,76,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 5, 24, 5]
consumption (rows=resources) = [[7, 1, 6, 1], [2, 1, 5, 5], [4, 3, 5, 4], [2, 7, 8, 6]]
capacity = [28, 21, 26, 29]
upper_bounds = [4, 4, 3, 4]"
85,rod,4,32,32,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 11, 7, 6]"
86,ilp_partition,8,0,0,1,19,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09225821495056152}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 10, 1, 12, 19, 18, 2, 24]"
87,rod,16,544,544,1,223,0,"{'ok': True, 'value': 544, 'stdout': '544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08205866813659668}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [34, 24, 35, 2, 39, 40, 31, 16, 18, 3, 40, 21, 26, 41, 7, 35]"
88,rod,4,28,28,1,1,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10085105895996094}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 1, 5, 3]"
89,ilp_partition,2,5,5,1,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09838056564331055}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 1, 6]"
90,ilp_partition,2,1,1,1,6,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08617305755615234}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 2, 6, 1]"
91,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08101367950439453}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [5, 5]]"
92,sub,32,17841923654524303792813220481147,,0,17841923654524303792813220481147,1,"{'ok': True, 'value': 17841923654524303792813220481147, 'stdout': '17841923654524303792813220481147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08887624740600586}",1,Compute: 44033482725673359105364100438118 - 26191559071149055312550879956971
93,mul,2,4725,4725,1,4725,1,"{'ok': True, 'value': 4725, 'stdout': '4725\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09718751907348633}",1,Compute: 63 * 75
94,lcs,8,4,0,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09366154670715332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badcabdd""
T = ""adaadba"""
95,ilp_partition,8,1,1,1,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 13, 23, 7, 11, 10, 13, 2]"
96,lcs,16,9,,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1026604175567627}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcccadccccbdbabd""
T = ""dadbacbbcdabbcbd"""
97,rod,4,44,44,1,0,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1121222972869873}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 8, 12, 11]"
98,sub,16,1969773049569501,1969773049569501,1,1969773050429501,0,"{'ok': True, 'value': 1969773049569501, 'stdout': '1969773049569501\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09122562408447266}",1,Compute: 4920052939095502 - 2950279889526001
99,add,8,108211278,108211278,1,108211278,1,"{'ok': True, 'value': 108211278, 'stdout': '108211278\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08315896987915039}",1,Compute: 98178973 + 10032305
100,mul,4,71996380,71996380,1,71996380,1,"{'ok': True, 'value': 71996380, 'stdout': '71996380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0928797721862793}",1,Compute: 7715 * 9332
101,sub,32,39638700561981230188979261192964,,0,39638700562081229988979291192964,0,"{'ok': True, 'value': 39638700561981230188979261192964, 'stdout': '39638700561981230188979261192964\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08130455017089844}",1,Compute: 51900841737503638447358522342190 - 12262141175522408258379261149226
102,ilp_assign,32,104,77,0,5040,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[75, 18, 3, 96, 72, 18, 14], [10, 91, 9, 78, 85, 15, 26], [13, 63, 56, 11, 15, 61, 92], [58, 65, 94, 22, 70, 14, 18], [48, 94, 55, 66, 17, 11, 81], [65, 5, 94, 71, 32, 13, 94], [49, 48, 68, 42, 72, 90, 74]]"
103,sub,2,47,47,1,47,1,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08885359764099121}",1,Compute: 74 - 27
104,rod,8,120,120,1,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 1, 7, 10, 4, 21, 10, 18]"
105,knap,8,74,,0,85,0,"{'ok': True, 'value': 74, 'stdout': '74\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11768150329589844}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 14, 1, 14, 11, 15, 7, 12]
V = [19, 31, 6, 12, 7, 18, 8, 10]
C = 43"
106,ilp_partition,32,1,1,1,5,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0925436019897461}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 90, 21, 73, 1, 39, 96, 24, 13, 20, 33, 23, 51, 33, 67, 83, 54, 42, 69, 94, 55, 63, 60, 16]"
107,rod,8,64,64,1,1,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09444189071655273}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 16, 7, 10, 1, 23, 15, 20]"
108,mul{'ok': True, 'value': 1932935498122884129276301212303383457765586591338915566327393480, 'stdout': '1932935498122884129276301212303383457765586591338915566327393480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09305191040039062}",1,Compute: 30914937711314582856339181415630 * 62524321290010153101622114611196
109,ilp_partition,4,7,7,1,9,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0960390567779541}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 9, 1, 10]"
110,ilp_prod,2,32,32,1,2,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0853266716003418}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[2, 3], [2, 2]]
capacity = [9, 8]
upper_bounds = [4, 3]"
111,sub,16,4033845513728054,673,0,4033845513728054,1,"{'ok': True, 'value': 4033845513728054, 'stdout': '4033845513728054\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08413481712341309}",1,Compute: 6165275140677673 - 2131429626949619
112,add,4,14883,14883,1,14883,1,"{'ok': True, 'value': 14883, 'stdout': '14883\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08457493782043457}",1,Compute: 6739 + 8144
113,ilp_assign,8,38,2,0,5040,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 16, 24, 15, 2, 14, 16], [15, 15, 4, 3, 3, 8, 4], [5, 14, 7, 15, 20, 3, 14], [18, 13, 2, 6, 8, 16, 8], [5, 9, 12, 11, 14, 4, 18], [10, 20, 18, 7, 23, 10, 15], [17, 20, 15, 18, 21, 9, 9]]"
114,ilp_assign,32,127,,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 13, 18, 54, 13, 96, 25], [92, 17, 23, 89, 35, 36, 87], [42, 22, 58, 91, 44, 70, 13], [12, 51, 2, 8, 25, 44, 56], [32, 43, 55, 76, 16, 43, 9], [62, 78, 64, 39, 32, 50, 92], [8, 45, 43, 22, 12, 72, 36]]"
115,rod,16,384,384,1,0,0,"{'ok': True, 'value': 384, 'stdout': '384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09368276596069336}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [24, 37, 9, 25, 37, 1, 11, 38, 1, 44, 25, 46, 12, 10, 2, 2]"
116,knap,32,1878,4,0,505,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 19, 20, 5, 50, 15, 9, 35, 39, 46, 62, 52, 41, 60, 45, 30, 5, 50, 47, 44, 1, 32, 10, 61, 15, 48, 56, 32, 4, 15, 6, 46]
V = [11, 94, 47, 88, 69, 125, 124, 108, 1, 61, 123, 89, 42, 12, 123, 43, 99, 74, 124, 55, 7, 117, 45, 114, 81, 84, 111, 37, 110, 101, 61, 95]
C = 505"
117,sub,4,61,61,1,61,1,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10439443588256836}",1,Compute: 3653 - 3592
118,ilp_assign,4,6,6,1,0,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0915226936340332}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2, 2, 12], [1, 9, 8, 11], [4, 2, 8, 7], [5, 4, 11, 1]]"
119,rod,32,832,10,0,35,0,"{'ok': True, 'value': 832, 'stdout': '832\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10524821281433105}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [26, 39, 13, 57, 84, 82, 35, 31, 83, 34, 40, 11, 48, 19, 58, 4, 50, 83, 58, 7, 81, 37, 66, 80, 55, 60, 79, 73, 96, 67, 25, 21]"
120,ilp_partition,16,1,1,1,333,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10580325126647949}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 10, 22, 3, 22, 40, 11, 30, 25, 44, 13, 27, 32, 13, 11, 26]"
121,ilp_assign,16,35,2,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 6, 31, 21, 26, 15, 28], [4, 37, 3, 27, 6, 17, 13], [47, 21, 12, 8, 12, 45, 24], [2, 15, 3, 1, 25, 35, 1], [9, 8, 39, 39, 13, 6, 48], [30, 13, 1, 34, 40, 27, 5], [35, 12, 15, 15, 27, 25, 31]]"
122,ilp_assign,32,109,2,0,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[70, 51, 40, 31, 73, 89, 12], [20, 78, 52, 47, 95, 37, 46], [65, 48, 3, 2, 1, 19, 33], [95, 88, 89, 27, 84, 18, 24], [15, 63, 95, 62, 86, 17, 36], [34, 18, 6, 23, 85, 45, 96], [42, 26, 81, 13, 65, 64, 19]]"
123,lcs,8,6,,0,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08144688606262207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabaddcb""
T = ""caaadcab"""
124,knap,2,15,15,1,1,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0936894416809082}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 5]
V = [6, 9, 4]
C = 4"
125,ilp_assign,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08804154396057129}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [1, 1]]"
126,mul,8,258700814332341,0,0,25874300383301,0,"{'ok': True, 'value': 258700814332341, 'stdout': '258700814332341\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08694100379943848}",1,Compute: 17452713 * 14822957
127,rod,8,136,136,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 10, 15, 18, 11, 13, 22, 11]"
128,add,16,3560078081463234,3560078081463234,1,3560078081463234,1,"{'ok': True, 'value': 3560078081463234, 'stdout': '3560078081463234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09146618843078613}",1,Compute: 2362035621519192 + 1198042459944042
129,mul,2,2436,2436,1,2436,1,"{'ok': True, 'value': 2436, 'stdout': '2436\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08810830116271973}",1,Compute: 87 * 28
130,lcs,32,17,,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcdccabcbacdbaadddccbcdbadbaaab""
T = ""accbaabbcdcdbdabadadbbabcccdcdd"""
131,rod,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09584522247314453}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 2]"
132,mul,4,31862544,31862544,1,31862544,1,"{'ok': True, 'value': 31862544, 'stdout': '31862544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08177614212036133}",1,Compute: 8246 * 3864
133,sub,16,5926578466363324,5926578466363324,1,5926578466363324,1,"{'ok': True, 'value': 5926578466363324, 'stdout': '5926578466363324\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08951330184936523}",1,Compute: 9888266147392238 - 3961687681028914
134,sub,8,5475727,5475727,1,5475727,1,"{'ok': True, 'value': 5475727, 'stdout': '5475727\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11093902587890625}",1,Compute: 50641782 - 45166055
135,mul,8,1128845323553049,6,0,112724631674347,0,"{'ok': True, 'value': 1128845323553049, 'stdout': '1128845323553049\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08564424514770508}",1,Compute: 61496581 * 18356229
136,ilp_prod,2,11,11,1,1,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1059868335723877}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5]
consumption (rows=resources) = [[3, 1], [2, 3]]
capacity = [8, 7]
upper_bounds = [3, 3]"
137,knap,2,10,10,1,4,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09920120239257812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 3]
V = [10, 4, 5]
C = 6"
138,mul,2,1078,1078,1,1078,1,"{'ok': True, 'value': 1078, 'stdout': '1078\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0964665412902832}",1,Compute: 49 * 22
139,lcs,16,10,9,0,272,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbdabbdaddccdcc""
T = ""cadacbddddadcbc"""
140,ilp_prod,8,54,7,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 9, 17, 12]
consumption (rows=resources) = [[7, 7, 3, 3], [8, 4, 3, 4], [2, 5, 3, 3], [8, 2, 8, 4]]
capacity = [29, 21, 19, 17]
upper_bounds = [3, 3, 3, 4]"
141,knap,32,1522,3,0,53,0,"{'ok': True, 'value': 1522, 'stdout': '1522\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09347271919250488}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [49, 38, 31, 28, 33, 31, 48, 59, 31, 44, 19, 42, 32, 19, 33, 23, 15, 58, 62, 27, 24, 46, 32, 12, 64, 27, 38, 50, 35, 26, 46, 53]
V = [81, 6, 12, 50, 51, 42, 118, 21, 65, 74, 125, 108, 81, 99, 14, 30, 16, 86, 41, 69, 113, 80, 107, 124, 96, 57, 23, 21, 24, 5, 85, 25]
C = 587"
142,rod,8,120,120,1,0,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0999600887298584}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 11, 17, 5, 12, 15, 21, 21]"
143,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09093141555786133}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 6, 3]"
144,add,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0824737548828125}",1,Compute: 15 + 43
145,ilp_prod,4,48,48,1,3,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10364246368408203}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 3]
consumption (rows=resources) = [[2, 2, 3], [3, 3, 3], [1, 3, 1]]
capacity = [8, 12, 10]
upper_bounds = [4, 3, 3]"
146,rod,8,160,160,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 5, 14, 23, 16, 3, 22, 16]"
147,add,32,175147285098321338876417365027261,175147285098321339221415382027261,0,175147285098321339876415365027261,0,"{'ok': True, 'value': 175147285098321338876417365027261, 'stdout': '175147285098321338876417365027261\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10629582405090332}",1,Compute: 76936221681987110927013202041228 + 98211063416334227949404162986033
148,rod,32,2656,13,0,0,0,"{'ok': True, 'value': 2656, 'stdout': '2656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09713482856750488}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [83, 13, 13, 64, 32, 67, 6, 4, 91, 88, 76, 12, 60, 34, 95, 75, 33, 90, 72, 49, 21, 31, 81, 16, 87, 75, 94, 67, 21, 64, 84, 81]"
149,mul,4,41804802,41804802,1,41748022,0,"{'ok': True, 'value': 41804802, 'stdout': '41804802\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09047794342041016}",1,Compute: 6102 * 6851
150,knap,8,91,7,0,0,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09788751602172852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 12, 3, 5, 7, 1, 7, 4]
V = [1, 19, 24, 2, 15, 10, 12, 30]
C = 23"
151,add,2,147,147,1,147,1,"{'ok': True, 'value': 147, 'stdout': '147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08457040786743164}",1,Compute: 75 + 72
152,mul,8,1139664125555340,1139664125555340,1,1140319287870880,0,"{'ok': True, 'value': 1139664125555340, 'stdout': '1139664125555340\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08110833168029785}",1,Compute: 27088710 * 42071554
153,mul,32,1793370428340456923934270764538857845589070602611345488309107301,513,0,1788200333283767562089324787938329389384372084739776963572100710170303734303,0,"{'ok': True, 'value': 1793370428340456923934270764538857845589070602611345488309107301, 'stdout': '1793370428340456923934270764538857845589070602611345488309107301\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09772276878356934}",1,Compute: 46269218556285963892764495938949 * 38759470859851301500024746641249
154,sub,32,4178283012918234006385057868874,288582272778749702914315330,0,4178282812918227178683108638872,0,"{'ok': True, 'value': 4178283012918234006385057868874, 'stdout': '4178283012918234006385057868874\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09398937225341797}",1,Compute: 33036510290793204297816590946122 - 28858227277874970291431533077248
155,sub,2,36,36,1,36,1,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08407068252563477}",1,Compute: 78 - 42
156,ilp_prod,16,96,2,0,12,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1136314868927002}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 12, 48, 28, 4, 29]
consumption (rows=resources) = [[13, 14, 4, 15, 15, 6], [6, 11, 16, 14, 6, 10], [4, 12, 12, 5, 12, 16], [2, 7, 9, 6, 11, 10]]
capacity = [56, 34, 50, 59]
upper_bounds = [4, 3, 3, 3, 3, 3]"
157,add,32,49332066311783208837578946627170,30,0,49332066311783208837578916627170,0,"{'ok': True, 'value': 49332066311783208837578946627170, 'stdout': '49332066311783208837578946627170\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0967092514038086}",1,Compute: 20891382350995716839781247955372 + 28440683960787491997797698671798
158,sub,16,3284393173733028,16,0,3284393173733028,1,"{'ok': True, 'value': 3284393173733028, 'stdout': '3284393173733028\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09660124778747559}",1,Compute: 7731162018403325 - 4446768844670297
159,ilp_prod,4,31,0,0,3,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08234405517578125}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 7]
consumption (rows=resources) = [[3, 4, 2], [3, 1, 4], [2, 1, 3]]
capacity = [10, 16, 9]
upper_bounds = [3, 3, 3]"
160,ilp_prod,32,320,1,0,4,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11336588859558105}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [90, 24, 59, 24, 24, 62]
consumption (rows=resources) = [[17, 11, 29, 2, 25, 2], [8, 7, 20, 6, 25, 14], [17, 25, 15, 30, 24, 12], [28, 1, 27, 15, 19, 23]]
capacity = [104, 124, 123, 96]
upper_bounds = [3, 4, 3, 4, 4, 4]"
161,ilp_partition,4,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08385896682739258}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 12, 7, 4]"
162,rod,4,24,24,1,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09537267684936523}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 12, 12, 10]"
163,ilp_assign,4,9,14,0,8,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09142208099365234}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 2, 2, 9], [1, 2, 4, 3], [1, 5, 1, 8], [6, 3, 3, 11]]"
164,lcs,32,20,16,0,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09523606300354004}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaacabcbcdaddaadcbcbdcaaacacccab""
T = ""bcaddcbccddadcbabddabacabbdacdabd"""
165,mul,8,954764083636896,9,0,95551112313156,0,"{'ok': True, 'value': 954764083636896, 'stdout': '954764083636896\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08568191528320312}",1,Compute: 36803819 * 25941984
166,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09755611419677734}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""aa"""
167,mul{'ok': True, 'value': 44123097730704121188130183049456, 'stdout': '44123097730704121188130183049456\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10196566581726074}",1,Compute: 5785854285409742 * 7626029891898568
168,add,2,109,109,1,109,1,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09090709686279297}",1,Compute: 61 + 48
169,ilp_partition,32,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09216022491455078}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 88, 96, 59, 89, 9, 50, 35, 60, 37, 4, 52, 4, 59, 15, 17, 39, 43, 39, 78, 20, 63, 57, 1]"
170,mul,16,12813393716245734847347139437816,36,0,1284744744002807152595330032237124,0,"{'ok': True, 'value': 12813393716245734847347139437816, 'stdout': '12813393716245734847347139437816\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09503459930419922}",1,Compute: 1377754223867448 * 9300202818669417
171,mul,4,10612032,10612032,1,10622952,0,"{'ok': True, 'value': 10612032, 'stdout': '10612032\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08311653137207031}",1,Compute: 1216 * 8727
172,ilp_partition,16,0,0,1,29,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08542060852050781}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 3, 4, 9, 16, 29, 44, 40, 15, 43, 44, 7, 34, 28, 42, 41]"
173,ilp_prod,4,22,22,1,2,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08414053916931152}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 9, 11]
consumption (rows=resources) = [[3, 4, 4], [2, 4, 1], [3, 2, 3]]
capacity = [10, 14, 11]
upper_bounds = [3, 3, 3]"
174,ilp_prod,16,164,1,0,4,0,"{'ok': True, 'value': 164, 'stdout': '164\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15213608741760254}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 24, 43, 35, 24, 37]
consumption (rows=resources) = [[5, 13, 10, 8, 13, 12], [13, 16, 10, 14, 14, 4], [5, 5, 1, 4, 7, 4], [9, 6, 13, 3, 2, 1]]
capacity = [39, 55, 62, 52]
upper_bounds = [4, 3, 3, 3, 3, 3]"
175,ilp_partition,4,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08346796035766602}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 6, 9, 7]"
176,knap,16,397,8,0,2,0,"{'ok': True, 'value': 397, 'stdout': '397\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0945124626159668}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 20, 30, 27, 12, 2, 30, 17, 13, 25, 5, 23, 7, 8, 2, 23]
V = [3, 23, 52, 2, 42, 59, 64, 61, 11, 7, 52, 34, 4, 13, 11, 43]
C = 130"
177,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1098635196685791}",1,Compute: 59 + 63
178,add,16,11317940851078756,11317940851078756,1,11317940851078756,1,"{'ok': True, 'value': 11317940851078756, 'stdout': '11317940851078756\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09109139442443848}",1,Compute: 1562103075879522 + 9755837775199234
179,sub,8,8510592,8510592,1,8510592,1,"{'ok': True, 'value': 8510592, 'stdout': '8510592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10342001914978027}",1,Compute: 86539892 - 78029300
180,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09319615364074707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [1, 3]]"
181,knap,2,8,8,1,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09296798706054688}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 5]
V = [5, 8, 2]
C = 7"
182,ilp_partition,32,0,9,0,12,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0907893180847168}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [33, 78, 41, 33, 33, 93, 37, 49, 78, 66, 3, 64, 83, 66, 65, 26, 55, 35, 94, 84, 53, 93, 5, 3]"
183,mul,16,37124993202150766977759899631952,1,0,370371188629900275384458302070552,0,"{'ok': True, 'value': 37124993202150766977759899631952, 'stdout': '37124993202150766977759899631952\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08493590354919434}",1,Compute: 7184765707938448 * 5167182161713549
184,rod,4,36,36,1,,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 3, 4, 7]"
185,ilp_partition,8,5,7,0,8,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09652161598205566}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 24, 22, 22, 8, 9, 12, 22]"
186,sub,4,4929,4929,1,4929,1,"{'ok': True, 'value': 4929, 'stdout': '4929\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10493707656860352}",1,Compute: 8704 - 3775
187,ilp_prod,16,232,1,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'terminate called without an active exception\n', 'retcode': -6, 'timeout': False, 'duration_s': 1.6911900043487549}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 46, 31, 26, 40, 47]
consumption (rows=resources) = [[9, 16, 8, 6, 3, 6], [1, 6, 14, 7, 15, 13], [9, 1, 5, 13, 6, 15], [2, 13, 3, 13, 11, 8]]
capacity = [64, 61, 34, 62]
upper_bounds = [3, 4, 4, 3, 4, 3]"
188,rod,32,581,5,0,32,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [1, 35, 14, 50, 91, 33, 26, 63, 61, 34, 66, 52, 17, 78, 64, 35, 23, 89, 2, 27, 44, 34, 91, 91, 14, 85, 4, 56, 40, 42, 80, 93]"
189,ilp_assign,8,36,4,0,5040,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 11, 4, 4, 20, 22, 4], [10, 22, 10, 19, 12, 6, 1], [22, 16, 13, 13, 21, 7, 3], [14, 9, 16, 14, 22, 16, 13], [5, 14, 7, 14, 21, 7, 9], [3, 5, 15, 11, 12, 10, 15], [11, 8, 6, 15, 5, 23, 11]]"
190,add,4,4298,4298,1,4300,0,"{'ok': True, 'value': 4298, 'stdout': '4298\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0917212963104248}",1,Compute: 1645 + 2653
191,lcs,16,8,8,1,9,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10323715209960938}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcaabcccccdddbab""
T = ""adbcadcbadcbbabad"""
192,ilp_prod,32,214,8,0,21,0,"{'ok': True, 'value': 214, 'stdout': '214\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10569596290588379}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [47, 37, 23, 26, 31, 62]
consumption (rows=resources) = [[21, 2, 24, 31, 19, 16], [2, 7, 30, 12, 13, 25], [22, 9, 3, 32, 27, 30], [29, 24, 1, 13, 14, 5]]
capacity = [126, 80, 75, 115]
upper_bounds = [3, 4, 3, 3, 3, 3]"
193,ilp_prod,16,173,14,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 46, 29, 20, 27, 16]
consumption (rows=resources) = [[12, 5, 5, 4, 12, 6], [1, 14, 13, 15, 3, 3], [14, 5, 6, 5, 7, 6], [8, 1, 5, 16, 12, 10]]
capacity = [53, 39, 58, 48]
upper_bounds = [4, 3, 3, 3, 4, 4]"
194,add,2,126,126,1,126,1,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0841064453125}",1,Compute: 71 + 55
195,lcs,2,1,1,1,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1281895637512207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""abb"""
196,ilp_assign,8,37,1,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 22, 8, 20, 13, 18, 8], [15, 7, 11, 20, 4, 20, 3], [11, 11, 18, 15, 11, 9, 1], [17, 2, 7, 12, 3, 7, 17], [12, 7, 7, 9, 22, 24, 24], [10, 10, 17, 13, 9, 16, 12], [23, 8, 2, 10, 18, 3, 1]]"
197,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08213520050048828}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""bd"""
198,ilp_partition,32,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10042166709899902}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [93, 81, 50, 77, 2, 86, 25, 79, 96, 64, 53, 51, 21, 20, 87, 55, 49, 57, 95, 93, 83, 96, 28, 33]"
199,sub,4,3066,3066,1,3066,1,"{'ok': True, 'value': 3066, 'stdout': '3066\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10787820816040039}",1,Compute: 9674 - 6608
200,knap,4,11,11,1,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 6, 1, 4]
V = [1, 1, 4, 7]
C = 9"
201,lcs,32,20,17,0,15,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08751463890075684}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baccbdbcbbdbdbaadabadccbacbccddc""
T = ""adbacdddbdbaabdcadccacaaaabaddda"""
202,knap,8,86,2,0,72,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08751988410949707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 6, 13, 5, 5, 8, 11, 8]
V = [16, 12, 19, 24, 27, 3, 9, 2]
C = 33"
203,mul,2,1843,1843,1,1843,1,"{'ok': True, 'value': 1843, 'stdout': '1843\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08547520637512207}",1,Compute: 19 * 97
204,rod,32,1024,1024,1,1024,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [32, 2, 29, 19, 91, 77, 87, 19, 82, 20, 76, 80, 23, 9, 14, 36, 13, 35, 80, 60, 74, 34, 75, 54, 6, 91, 10, 19, 58, 8, 45, 43]"
205,lcs,16,8,11,0,9,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09540891647338867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babbacbbbabbadad""
T = ""baccdaadaccbdbcbd"""
206,ilp_prod,32,281,0,0,680,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [81, 38, 29, 13, 57, 5]
consumption (rows=resources) = [[31, 22, 1, 13, 19, 27], [29, 19, 5, 3, 6, 23], [25, 27, 25, 15, 19, 32], [26, 1, 28, 19, 32, 10]]
capacity = [115, 119, 114, 102]
upper_bounds = [3, 4, 3, 5, 3, 3]"
207,lcs,32,17,27,0,625,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdddabcbbbbcbbcabbdbbbbbcadbadb""
T = ""dbddabaaaabddcdcdcabbbaaadbdbcab"""
208,ilp_partition,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09367656707763672}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 6, 1]"
209,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09966254234313965}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [2, 2]]"
210,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07590889930725098}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 3, 1]"
211,lcs,32,15,10,0,15,1,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08349418640136719}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccccbadbdcdcdbdcccdddcbbdbcbbdc""
T = ""dcdabcdaabacabbbccaaabcbddccadaa"""
212,rod,2,8,8,1,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 1]"
213,knap,32,1637,102,0,2947,0,"{'ok': True, 'value': 1637, 'stdout': '1637\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0900106430053711}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 49, 15, 13, 18, 59, 19, 55, 34, 25, 23, 9, 34, 57, 42, 49, 7, 45, 50, 50, 17, 20, 5, 40, 57, 54, 27, 60, 27, 51, 12, 13]
V = [103, 32, 120, 43, 9, 52, 60, 62, 25, 97, 105, 18, 55, 51, 56, 126, 24, 50, 26, 34, 50, 111, 102, 68, 121, 8, 90, 89, 53, 9, 51, 113]
C = 529"
214,knap,16,400,4,0,1,0,"{'ok': True, 'value': 400, 'stdout': '400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09042572975158691}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 2, 26, 31, 9, 3, 6, 23, 24, 1, 5, 13, 8, 31, 3, 21]
V = [4, 41, 51, 17, 36, 53, 19, 19, 52, 40, 8, 21, 17, 18, 62, 6]
C = 113"
215,add,32,109089332457416700819301857555704,109089332457416700519616858555704,0,109093331961436700819291877555706,0,"{'ok': True, 'value': 109089332457416700819301857555704, 'stdout': '109089332457416700819301857555704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08595442771911621}",1,Compute: 23572741605979344965604992351209 + 85516590851437355853696865204495
216,sub,16,1631202079515513,0,0,1631202079515513,1,"{'ok': True, 'value': 1631202079515513, 'stdout': '1631202079515513\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0947122573852539}",1,Compute: 4224893984192202 - 2593691904676689
217,rod,8,184,184,1,8,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10155367851257324}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 15, 13, 6, 14, 14, 6, 8]"
218,mul,32,419544995160476560821909971810374084342973511512843618455603938,269207986155463150203,0,4185331328407209177407733744441058820000734117513932579777020790712807060210734,0,"{'ok': True, 'value': 419544995160476560821909971810374084342973511512843618455603938, 'stdout': '419544995160476560821909971810374084342973511512843618455603938\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0947415828704834}",1,Compute: 26920798615546315020383334594942 * 15584418618183053439362273458639
219,ilp_assign,4,26,7,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 11, 7, 9], [8, 11, 6, 8], [8, 11, 11, 4], [9, 10, 4, 1]]"
220,mul,4,14912440,14912440,1,14912440,1,"{'ok': True, 'value': 14912440, 'stdout': '14912440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08831501007080078}",1,Compute: 5107 * 2920
221,lcs,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09629344940185547}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""adc"""
222,add,16,4438593326883251,4438593326883251,1,4438593326893251,0,"{'ok': True, 'value': 4438593326883251, 'stdout': '4438593326883251\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09436225891113281}",1,Compute: 1404990683301990 + 3033602643581261
223,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10148930549621582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddad""
T = ""dabda"""
224,mul,16,15819608907828431777982900232386,4,0,15811029155392584777414005699799034,0,"{'ok': True, 'value': 15819608907828431777982900232386, 'stdout': '15819608907828431777982900232386\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08735322952270508}",1,Compute: 4686503615517438 * 3375567417775647
225,ilp_assign,16,51,,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 28, 14, 25, 3, 40, 18], [2, 38, 23, 46, 24, 22, 44], [30, 42, 9, 39, 34, 6, 17], [7, 46, 7, 18, 2, 45, 10], [40, 43, 9, 25, 14, 37, 43], [21, 13, 27, 33, 33, 8, 36], [7, 45, 31, 8, 33, 29, 31]]"
226,knap,16,383,1,0,393,0,"{'ok': True, 'value': 383, 'stdout': '383\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09569621086120605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 29, 18, 22, 12, 26, 17, 12, 11, 6, 14, 23, 30, 6, 22, 28]
V = [39, 59, 8, 18, 45, 23, 64, 29, 30, 9, 17, 57, 56, 13, 47, 29]
C = 144"
227,knap,2,9,9,1,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09444403648376465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 4]
V = [2, 5, 9]
C = 6"
228,lcs,8,5,6,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08900833129882812}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbdabcd""
T = ""dddaadb"""
229,sub,8,3209608,3209608,1,3209608,1,"{'ok': True, 'value': 3209608, 'stdout': '3209608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09169220924377441}",1,Compute: 64770653 - 61561045
230,add,4,17904,17904,1,17904,1,"{'ok': True, 'value': 17904, 'stdout': '17904\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09395146369934082}",1,Compute: 9251 + 8653
231,ilp_assign,4,9,8,0,16,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10114097595214844}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 3, 1, 2], [3, 11, 2, 7], [10, 2, 5, 2], [10, 10, 2, 4]]"
232,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08363819122314453}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""daa"""
233,ilp_prod,32,345,36,0,350,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 45, 55, 19, 85, 18]
consumption (rows=resources) = [[16, 23, 31, 29, 12, 23], [28, 28, 27, 24, 7, 6], [29, 9, 7, 1, 25, 31], [16, 26, 7, 27, 4, 19]]
capacity = [85, 102, 99, 79]
upper_bounds = [3, 3, 3, 3, 3, 3]"
234,lcs,16,8,,0,9,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08231186866760254}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badcbacbccaadccc""
T = ""abcbbbdbacaadadd"""
235,ilp_assign,16,69,66,0,5040,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3, 26, 36, 45, 39, 32], [46, 45, 7, 31, 36, 23, 22], [7, 44, 1, 16, 15, 32, 20], [18, 15, 1, 32, 23, 33, 22], [6, 5, 20, 37, 28, 15, 48], [24, 25, 10, 15, 19, 13, 48], [31, 43, 23, 19, 25, 40, 9]]"
236,sub,2,19,19,1,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08598852157592773}",1,Compute: 46 - 27
237,mul,8,2661126893645976,2661126893645976,1,265737354435636,0,"{'ok': True, 'value': 2661126893645976, 'stdout': '2661126893645976\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08786606788635254}",1,Compute: 48532344 * 54832029
238,ilp_partition,32,1,1,1,25,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09098434448242188}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [83, 70, 25, 59, 70, 85, 58, 76, 80, 43, 45, 47, 15, 3, 54, 47, 24, 62, 30, 93, 88, 94, 82, 96]"
239,ilp_partition,2,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09450793266296387}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 5, 4]"
240,ilp_prod,32,268,,0,354,0,"{'ok': True, 'value': 268, 'stdout': '268\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0975790023803711}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [74, 88, 89, 46, 3, 21]
consumption (rows=resources) = [[1, 6, 22, 22, 29, 13], [16, 24, 30, 17, 11, 29], [26, 1, 7, 1, 7, 22], [14, 20, 8, 20, 6, 7]]
capacity = [100, 71, 95, 78]
upper_bounds = [3, 3, 3, 3, 3, 3]"
241,knap,16,407,12,0,303,0,"{'ok': True, 'value': 407, 'stdout': '407\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09818840026855469}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 7, 31, 3, 10, 19, 3, 1, 25, 22, 11, 10, 11, 12, 11, 16]
V = [43, 4, 62, 51, 6, 29, 31, 37, 43, 22, 31, 46, 29, 21, 54, 60]
C = 107"
242,add,32,145569776546731036406197990982748,33,0,145570776546731036406199991982748,0,"{'ok': True, 'value': 145569776546731036406197990982748, 'stdout': '145569776546731036406197990982748\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09209513664245605}",1,Compute: 69729487670594031326614455090079 + 75840288876137005079583535892669
243,knap,4,18,18,1,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10151195526123047}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 7, 4]
V = [3, 5, 1, 13]
C = 10"
244,rod,32,1312,2,0,32,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [33, 82, 53, 50, 3, 38, 84, 31, 28, 12, 76, 93, 19, 32, 67, 28, 58, 41, 2, 33, 54, 75, 67, 71, 17, 91, 43, 92, 73, 84, 69, 50]"
245,ilp_prod,4,36,25,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 9, 8]
consumption (rows=resources) = [[3, 4, 1], [1, 4, 4], [3, 3, 1]]
capacity = [15, 9, 15]
upper_bounds = [5, 3, 3]"
246,ilp_assign,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0961008071899414}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 1], [5, 1]]"
247,sub,8,10499372,10,0,10499372,1,"{'ok': True, 'value': 10499372, 'stdout': '10499372\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10412454605102539}",1,Compute: 54652334 - 44152962
248,sub,32,9019522249191206111968381322384,8,0,9019522249191206101975339322384,0,"{'ok': True, 'value': 9019522249191206111968381322384, 'stdout': '9019522249191206111968381322384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09715485572814941}",1,Compute: 28728293488082602540492757494128 - 19708771238891396428524376171744
249,add,8,136874441,136874441,1,136874441,1,"{'ok': True, 'value': 136874441, 'stdout': '136874441\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09803295135498047}",1,Compute: 74721608 + 62152833
