idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 7, 14, 11, 14, 15, 15, 15]"
1,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 15, 14, 1, 5, 10, 17, 5, 5, 14, 2, 15, 17, 16]"
2,ilp_prod,0,27,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8, 19]
consumption (rows=resources) = [[7, 5, 3], [5, 4, 6], [6, 4, 1]]
capacity = [11, 10, 15]
upper_bounds = [3, 3, 3]"
3,mul,10,61930285245677270730,6219999999999999970,0,6209999999999999,0,61930285245677270730,1,Compute: 6828079170 * 9069942469
4,ilp_assign,0,27,42,0,0,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[3, 11, 2, 9, 19], [17, 20, 11, 5, 19], [6, 14, 10, 15, 8], [16, 13, 1, 17, 9], [4, 10, 9, 1, 19]]"
5,add,8,84721663,84721663,1,84721663,1,84721663,1,Compute: 67188922 + 17532741
6,ilp_prod,0,60,0,0,60,1,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 20]
consumption (rows=resources) = [[6, 7], [1, 7]]
capacity = [22, 17]
upper_bounds = [3, 3]"
7,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbcbabb""
T = ""abdbababdda"""
8,mul,8,1542363261731472,1540999999974472,0,15309999999675552,0,1542363261731472,1,Compute: 19603464 * 78678098
9,add,12,483980042184,483980042184,1,483980042184,1,483980042184,1,Compute: 352551921205 + 131428120979
10,knap,0,125,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 8, 7, 3, 15, 7, 11, 6]
V = [37, 2, 14, 21, 31, 36, 3, 4]
C = 30"
11,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbacbaacdcca""
T = ""ddcccdbbaca"""
12,sub,8,3347736,3347736,1,3347736,1,3347736,1,Compute: 42896497 - 39548761
13,ilp_prod,0,41,42,0,3,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 6, 13, 13]
consumption (rows=resources) = [[2, 4, 1, 3], [7, 6, 5, 8], [1, 7, 2, 5]]
capacity = [23, 17, 17]
upper_bounds = [3, 3, 3, 3]"
14,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccdbab""
T = ""aabdcdaba"""
15,sub,10,3031829110,3031829110,1,3031829110,1,3031829110,1,Compute: 5875402673 - 2843573563
16,ilp_assign,0,32,42,0,0,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[18, 17, 17], [17, 20, 6], [9, 14, 16]]"
17,knap,0,63,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 8, 2, 10, 12, 2, 3, 15, 7]
V = [15, 12, 8, 4, 13, 4, 8, 6, 15]
C = 32"
18,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 5, 10, 19, 19, 16, 11, 5, 20, 3, 20, 13, 3]"
19,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdddabc""
T = ""aabdadadd"""
20,rod,0,91,42,0,42,0,91,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 7
P = [13, 20, 14, 21, 4, 7, 20]"
21,mul,12,294449100136457454117020,29460897678467264620,0,294609797987646262,0,294449100136457454117020,1,Compute: 397213657820 * 741286444561
22,mul,10,33013671264174419355,3308987654275475555,0,3310999999999999995,0,33013671264174419355,1,Compute: 4340524785 * 7605917003
23,mul,12,208542175792223384243440,2089999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,2089999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,,0,Compute: 406211735704 * 513382941610
24,ilp_prod,0,44,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 15, 17]
consumption (rows=resources) = [[3, 4, 8], [2, 7, 7]]
capacity = [16, 18]
upper_bounds = [5, 3, 3]"
25,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 20, 15, 12, 2, 7, 9, 5, 17, 4, 14, 7, 11]"
26,ilp_assign,0,19,42,0,6,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[14, 20, 11, 16], [11, 3, 19, 20], [2, 5, 18, 16], [6, 3, 1, 3]]"
27,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 17, 5, 1, 3, 7, 20, 20, 12, 16, 17, 5]"
28,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaaddbbb""
T = ""cbbcacadabb"""
29,sub,10,246113766,246113766,1,246113766,1,246113766,1,Compute: 2957895163 - 2711781397
30,ilp_prod,0,134,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 18, 14]
consumption (rows=resources) = [[5, 7, 1], [3, 2, 3]]
capacity = [26, 25]
upper_bounds = [5, 3, 8]"
31,lcs,0,3,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabbda""
T = ""dcbbdbddcb"""
32,mul,12,117570314434628326116840,1176999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,1174999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,,0,Compute: 609969032670 * 192748005452
33,rod,0,80,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 10
P = [1, 16, 3, 25, 19, 14, 3, 16, 18, 20]"
34,knap,0,114,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 17, 6, 5, 10, 2, 3, 7, 1, 2]
V = [28, 2, 5, 4, 1, 3, 35, 22, 22, 2]
C = 35"
35,ilp_prod,0,26,39,0,1,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 8]
consumption (rows=resources) = [[3, 8], [4, 8]]
capacity = [23, 11]
upper_bounds = [3, 3]"
36,ilp_assign,0,28,42,0,0,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[13, 3, 19, 11], [19, 6, 5, 4], [18, 7, 16, 8], [12, 20, 17, 6]]"
37,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 15, 11, 1, 15, 8, 5, 11]"
38,ilp_assign,0,35,42,0,0,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[18, 9, 12], [9, 18, 13], [13, 17, 17]]"
39,add,12,1639723795326,1639723795326,1,1639723895326,0,1639723795326,1,Compute: 946161392205 + 693562403121
40,sub,8,43198152,43298152,0,43298152,0,43198152,1,Compute: 65503652 - 22305500
41,mul,12,110746391559078920466184,110000000000000000000,0,1109099999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,,0,Compute: 294893580146 * 375546973604
42,knap,0,145,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 18, 1, 6, 11, 12, 7, 5]
V = [38, 10, 38, 7, 26, 21, 33, 27]
C = 38"
43,mul,10,45379378685561735640,45499999999999880,0,4529999999999999960,0,45379378685561735640,1,Compute: 5518877784 * 8222573585
44,ilp_assign,0,23,42,0,13,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[6, 18, 1, 8], [5, 3, 1, 5], [11, 19, 3, 17], [18, 9, 7, 13]]"
45,lcs,0,6,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addbacbddcbd""
T = ""cadddcad"""
46,sub,8,37794123,37794123,1,37794123,1,37794123,1,Compute: 53047109 - 15252986
47,ilp_prod,0,64,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 18, 11, 7]
consumption (rows=resources) = [[2, 5, 6, 7], [6, 6, 7, 2]]
capacity = [16, 23]
upper_bounds = [3, 3, 3, 3]"
48,rod,0,75,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 5
P = [15, 23, 19, 17, 23]"
49,ilp_assign,0,20,42,0,2,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[10, 6, 5], [13, 14, 16], [12, 2, 18]]"
50,ilp_prod,0,27,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 9]
consumption (rows=resources) = [[2, 3], [7, 5], [3, 2]]
capacity = [16, 15, 29]
upper_bounds = [3, 3]"
51,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 11, 20, 14, 5, 5, 16, 9, 9, 14, 19]"
52,add,8,110595891,110595891,1,110595891,1,110595891,1,Compute: 13415285 + 97180606
53,ilp_assign,0,24,42,0,42,0,48,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[20, 8, 18], [15, 10, 14], [13, 20, 1]]"
54,rod,0,107,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 9
P = [7, 25, 9, 20, 3, 15, 10, 1, 21]"
55,lcs,0,1,3,0,1,1,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdddaadaa""
T = ""abccc"""
56,sub,10,113195480,1131954780,0,113195480,1,113195480,1,Compute: 8250720004 - 8137524524
57,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 4, 6, 10, 14, 17, 5, 3, 17]"
58,sub,12,18022438480,18022443820,0,180224938480,0,18022438480,1,Compute: 756303505850 - 738281067370
59,mul,8,1442791233474192,1444999999999992,0,1445499999999992,0,1442791233474192,1,Compute: 48222741 * 29919312
60,lcs,0,6,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddadcbdbabc""
T = ""bcdccdcdcd"""
61,lcs,0,6,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdccbcbadc""
T = ""bcbabdbcdbb"""
62,add,12,1023833416613,1023832916613,0,1023833416613,1,1023833416613,1,Compute: 196098617743 + 827734798870
63,ilp_prod,0,48,42,0,3,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 14, 20, 9]
consumption (rows=resources) = [[1, 8, 7, 6], [7, 6, 4, 5], [4, 8, 8, 5]]
capacity = [29, 23, 19]
upper_bounds = [3, 3, 3, 3]"
64,sub,8,19850608,19850608,1,19850608,1,19850608,1,Compute: 35222476 - 15371868
65,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddaabbb""
T = ""aacbdadb"""
66,sub,8,38002533,38002533,1,38002533,1,38002533,1,Compute: 83981449 - 45978916
67,rod,0,45,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 5
P = [7, 19, 20, 23, 12]"
68,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 12, 4, 19, 20, 11, 4, 7]"
69,ilp_assign,0,20,42,0,42,0,42,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[11, 2, 17], [10, 2, 14], [4, 20, 11]]"
70,knap,0,123,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 11, 9, 13, 1, 13, 16, 15]
V = [20, 20, 38, 25, 21, 19, 12, 7]
C = 48"
71,add,12,1627095782329,1627095782329,1,1627095782329,1,1627095782329,1,Compute: 955162053141 + 671933729188
72,mul,8,1534537417347624,1528999999999956,0,15409999999996776,0,1534537417347624,1,Compute: 28996932 * 52920682
73,add,10,16494357663,16494357663,1,16494357663,1,16494357663,1,Compute: 9031632460 + 7462725203
74,rod,0,210,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 10
P = [21, 19, 3, 1, 17, 14, 8, 3, 10, 16]"
75,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 14, 14, 19, 9, 20, 5, 3, 9, 8, 9, 19]"
76,sub,12,301161710450,291161715450,0,291161710450,0,301161710450,1,Compute: 516460188712 - 215298478262
77,sub,12,80974194773,-91225823625,0,81074194873,0,80974194773,1,Compute: 531428797172 - 450454602399
78,lcs,0,3,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdbdddadcbb""
T = ""ddaaa"""
79,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 11, 9, 12, 7, 6, 14, 3, 12]"
80,knap,0,96,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 13, 14, 11, 18, 17, 9, 7]
V = [13, 11, 11, 35, 11, 10, 8, 29]
C = 47"
81,mul,10,12322704848027746844,1228499999999862,0,1230000000000000000,0,12322704848027746844,1,Compute: 7413507353 * 1662196348
82,lcs,0,7,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aababbcd""
T = ""aacbabcccd"""
83,ilp_prod,0,38,42,0,3,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 6, 17, 11]
consumption (rows=resources) = [[1, 5, 5, 4], [7, 1, 8, 6], [7, 4, 2, 3]]
capacity = [26, 11, 22]
upper_bounds = [3, 5, 3, 3]"
84,ilp_prod,0,40,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 18, 18]
consumption (rows=resources) = [[7, 6, 8], [4, 7, 7]]
capacity = [19, 13]
upper_bounds = [3, 3, 3]"
85,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdbcdaac""
T = ""adcabccbd"""
86,mul,12,245275755171537563046396,2467089478547624678636,0,2469097979767627376,0,245275755171537563046396,1,Compute: 834221343324 * 294017597529
87,rod,0,75,42,0,42,0,75,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 5
P = [15, 11, 7, 8, 9]"
88,ilp_prod,0,71,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 20, 10]
consumption (rows=resources) = [[2, 8, 4], [4, 2, 3]]
capacity = [17, 16]
upper_bounds = [4, 3, 4]"
89,mul,10,10937936245979227380,10929876542786278220,0,10929999999999999,0,10937936245979227380,1,Compute: 2260527780 * 4838664821
90,add,12,1377326049245,1377326049245,1,1377326049245,1,1377326049245,1,Compute: 773392651075 + 603933398170
91,add,8,131869788,131869788,1,131869788,1,131869788,1,Compute: 54653591 + 77216197
92,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 13, 16, 1, 10, 16, 16, 12, 6, 7, 16, 18]"
93,mul,12,334455049089108952205292,335929768784678266264,0,3369097879289742262,0,334455049089108952205292,1,Compute: 507495433562 * 659030657166
94,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 16, 12, 3, 9, 16, 13, 15, 2, 14, 9, 16]"
95,knap,0,98,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 17, 5, 11, 5, 12, 5, 7, 8]
V = [14, 30, 10, 7, 7, 28, 4, 30, 10]
C = 43"
96,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 5, 13, 13, 19, 12, 3, 2, 18]"
97,mul,12,56845882524448140956807,5699999999999999999,0,5709999999999999999,0,56845882524448140956807,1,Compute: 152217769769 * 373451027503
98,ilp_prod,0,44,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 6, 11, 11]
consumption (rows=resources) = [[1, 6, 4, 4], [7, 7, 3, 4], [1, 4, 1, 3]]
capacity = [27, 12, 10]
upper_bounds = [3, 3, 4, 3]"
99,rod,0,168,42,0,42,0,168,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 7
P = [24, 17, 23, 1, 19, 13, 4]"
100,ilp_prod,0,60,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 11, 15, 6]
consumption (rows=resources) = [[3, 8, 3, 8], [3, 3, 5, 7]]
capacity = [12, 26]
upper_bounds = [4, 3, 4, 3]"
101,rod,0,161,42,0,42,0,161,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 7
P = [23, 21, 20, 21, 20, 14, 13]"
102,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 17, 18, 8, 5, 14, 7, 12, 16, 8, 2, 8, 4, 12]"
103,rod,0,51,42,0,42,0,51,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [4, 17, 5, 15, 2, 15]"
104,mul,8,1284183600901893,12785999999777733,0,1279089478777633,0,1284183600901893,1,Compute: 83044359 * 15463827
105,knap,0,126,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 6, 3, 9, 8, 12, 11, 6]
V = [18, 31, 20, 5, 28, 10, 36, 23, 29]
C = 32"
106,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 9, 19, 16, 16, 7, 3, 5]"
107,sub,12,158778395058,158778395058,1,158778395058,1,158778395058,1,Compute: 367588528528 - 208810133470
108,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abadd""
T = ""cababdbddd"""
109,add,12,1544036890602,1544036890502,0,1544036887502,0,1544036890602,1,Compute: 845203924135 + 698832966467
110,ilp_prod,0,50,45,0,1,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 5]
consumption (rows=resources) = [[8, 1], [3, 5]]
capacity = [29, 16]
upper_bounds = [3, 3]"
111,add,8,164959997,164959997,1,164959997,1,164959997,1,Compute: 79615820 + 85344177
112,ilp_prod,0,40,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 9, 16]
consumption (rows=resources) = [[3, 7, 1], [2, 5, 2], [8, 4, 8]]
capacity = [19, 11, 18]
upper_bounds = [3, 3, 3]"
113,ilp_prod,0,60,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 12, 20]
consumption (rows=resources) = [[1, 5, 5], [8, 8, 6], [2, 2, 4]]
capacity = [24, 22, 16]
upper_bounds = [3, 3, 3]"
114,knap,0,131,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 16, 6, 9, 17, 10, 13, 18, 9]
V = [17, 20, 1, 39, 3, 30, 30, 23, 15]
C = 56"
115,ilp_prod,0,35,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8, 12]
consumption (rows=resources) = [[4, 6, 8], [2, 7, 6], [3, 3, 2]]
capacity = [21, 15, 25]
upper_bounds = [5, 3, 3]"
116,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaadcacabad""
T = ""ddacacc"""
117,sub,10,3360568436,3360568436,1,3360568436,1,3360568436,1,Compute: 9146519667 - 5785951231
118,mul,8,4256892609010846,4242899999999946,0,4249999999999999,0,4256892609010846,1,Compute: 80961146 * 52579451
119,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 9, 1, 18, 20, 19, 1, 14, 18, 15]"
120,sub,10,4996103517,4996103517,1,4996103517,1,4996103517,1,Compute: 8892866006 - 3896762489
121,add,10,3966041206,3966041206,1,3966041206,1,3966041206,1,Compute: 2246761692 + 1719279514
122,sub,10,717755673,717755673,1,717756673,0,717755673,1,Compute: 2923725476 - 2205969803
123,mul,12,443792033500393525045296,4439999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,4439999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,,0,Compute: 510394080173 * 869508583152
124,add,12,1777359295342,1777359295342,1,1777359290342,0,1777359295342,1,Compute: 980588447298 + 796770848044
125,add,8,106252410,106252410,1,106252410,1,106252410,1,Compute: 22294532 + 83957878
126,add,8,89283745,87283745,0,89283745,1,89283745,1,Compute: 75479012 + 13804733
127,ilp_prod,0,30,42,0,1,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 15]
consumption (rows=resources) = [[5, 5], [7, 5], [7, 8]]
capacity = [19, 13, 28]
upper_bounds = [3, 3]"
128,rod,0,28,42,0,42,0,28,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 5
P = [4, 12, 4, 7, 4]"
129,lcs,0,6,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acaabdcba""
T = ""cacacbcdad"""
130,sub,8,11069678,11069678,1,11069678,1,11069678,1,Compute: 42402882 - 31333204
131,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbcbaabbbd""
T = ""acccdbdac"""
132,knap,0,104,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 8, 8, 3, 11, 13, 7, 10, 4]
V = [28, 1, 23, 6, 27, 10, 8, 35, 12]
C = 38"
133,knap,0,130,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 12, 14, 18, 11, 17]
V = [32, 21, 39, 8, 38, 19, 36]
C = 39"
134,sub,10,626036989,62603689,0,626036889,0,626036989,1,Compute: 6097322386 - 5471285397
135,lcs,0,2,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacdbb""
T = ""bbdccc"""
136,add,10,16806870739,17086870739,0,16806870739,1,16806870739,1,Compute: 9598980006 + 7207890733
137,mul,12,652527872630416832716377,6529999999999,0,6529399999999999,0,652527872630416832716377,1,Compute: 697057216407 * 936118093711
138,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 4, 14, 15, 18, 17, 10, 3, 2, 14, 5, 12, 7]"
139,mul,8,1186871995624275,11859999999977225,0,118499999999977225,0,1186871995624275,1,Compute: 83214825 * 14262747
140,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 6, 6, 11, 3, 7, 10, 18, 19, 3, 16, 19]"
141,ilp_prod,0,72,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 17, 18, 11]
consumption (rows=resources) = [[3, 4, 2, 8], [6, 5, 4, 5]]
capacity = [22, 17]
upper_bounds = [3, 3, 4, 3]"
142,ilp_prod,0,124,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 17, 15]
consumption (rows=resources) = [[3, 1, 1], [6, 8, 3]]
capacity = [24, 28]
upper_bounds = [4, 3, 8]"
143,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 19, 11, 13, 10, 8, 10, 14, 12]"
144,sub,8,22250519,22250519,1,22250519,1,22250519,1,Compute: 88758006 - 66507487
145,rod,0,138,42,0,42,0,138,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [23, 23, 17, 13, 4, 16]"
146,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 13, 15, 10, 18, 9, 12, 5, 16, 2]"
147,rod,0,138,42,0,42,0,138,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [23, 21, 13, 22, 2, 25]"
148,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 3, 14, 12, 5, 15, 13, 20, 11, 10, 16]"
149,ilp_prod,0,73,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 8, 19]
consumption (rows=resources) = [[6, 1, 4], [5, 7, 3], [4, 5, 1]]
capacity = [15, 28, 19]
upper_bounds = [3, 3, 3]"
150,knap,0,153,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 13, 1, 13, 18, 18, 15, 6, 12, 2]
V = [24, 23, 29, 16, 35, 20, 6, 29, 23, 13]
C = 57"
151,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbabcdac""
T = ""bdacacbabab"""
152,mul,12,77675971188876582588000,77699999999998000000,0,7769999999998000000,0,77675971188876582588000,1,Compute: 202998560160 * 382642966175
153,ilp_assign,0,25,42,0,4,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[13, 7, 5, 6], [18, 20, 3, 11], [13, 7, 6, 2], [15, 7, 13, 4]]"
154,ilp_prod,0,158,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 16, 15]
consumption (rows=resources) = [[5, 1, 5], [8, 1, 6]]
capacity = [19, 27]
upper_bounds = [3, 8, 3]"
155,mul,8,2233498180741476,2228999999999978,0,2229999999999999,0,2233498180741476,1,Compute: 25847292 * 86411303
156,sub,12,445221646322,445221646322,1,445221646322,1,445221646322,1,Compute: 961516357013 - 516294710691
157,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 12, 10, 12, 11, 12, 1, 4, 13, 10, 9]"
158,rod,0,108,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 9
P = [12, 23, 19, 14, 9, 20, 5, 10, 19]"
159,ilp_assign,0,38,42,0,11,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[16, 7, 12, 20, 15], [4, 11, 11, 13, 13], [10, 3, 8, 15, 18], [12, 14, 14, 14, 19], [9, 6, 5, 2, 11]]"
160,mul,12,80528500236135317504016,80899999999999999999,0,8099999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,,0,Compute: 164505731464 * 489517900194
161,rod,0,126,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 9
P = [14, 25, 1, 21, 13, 5, 14, 5, 2]"
162,ilp_assign,0,24,42,0,11,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[12, 11, 12, 9], [19, 5, 1, 8], [9, 16, 20, 18], [1, 11, 1, 6]]"
163,mul,8,3355758139937625,3354999999976250,0,33549999999997225,0,3355758139937625,1,Compute: 44624025 * 75200705
164,knap,0,69,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 11, 3, 6, 16, 18]
V = [3, 3, 13, 23, 24, 33]
C = 29"
165,add,10,11864685183,11864685183,1,11864685183,1,11864685183,1,Compute: 6102589964 + 5762095219
166,ilp_prod,0,175,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 17, 18]
consumption (rows=resources) = [[6, 3, 2], [3, 1, 4]]
capacity = [26, 27]
upper_bounds = [4, 8, 6]"
167,add,12,859568325330,859568325330,1,859568325330,1,859568325330,1,Compute: 520396698329 + 339171627001
168,add,8,173997575,173997575,1,173997575,1,173997575,1,Compute: 94660762 + 79336813
169,ilp_prod,0,56,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 14]
consumption (rows=resources) = [[7, 2], [7, 3], [4, 7]]
capacity = [25, 12, 28]
upper_bounds = [3, 4]"
170,ilp_assign,0,26,42,0,0,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[19, 14, 16], [6, 7, 19], [15, 4, 13]]"
171,ilp_assign,0,16,42,0,18,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[15, 16, 4, 19], [16, 19, 3, 2], [2, 1, 9, 2], [9, 10, 6, 18]]"
172,add,10,7213388026,7213388026,1,7213388026,1,7213388026,1,Compute: 5481743788 + 1731644238
173,ilp_partition,0,1,42,0,0,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 9, 11, 17, 1, 5, 18, 2]"
174,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccddabda""
T = ""bbcdcadcb"""
175,mul,12,99893346259087835054644,999999999999,0,9999999999999,0,99893346259087835054644,1,Compute: 392491767277 * 254510679172
176,sub,12,113937584435,-486062415565,0,1139375844335,0,113937584435,1,Compute: 641999612542 - 528062028107
177,rod,0,112,42,0,42,0,112,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 7
P = [16, 20, 14, 9, 17, 25, 4]"
178,mul,8,2026444463288960,20299999999680,0,2021476121920,0,2026444463288960,1,Compute: 92200966 * 21978560
179,add,10,12703172729,12703172729,1,12703172729,1,12703172729,1,Compute: 9328658927 + 3374513802
180,rod,0,60,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 9
P = [1, 9, 20, 16, 15, 8, 9, 11, 25]"
181,rod,0,200,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [25, 22, 23, 14, 22, 18, 20, 13]"
182,ilp_prod,0,119,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 19, 17]
consumption (rows=resources) = [[2, 1, 2], [5, 8, 4], [5, 7, 3]]
capacity = [30, 29, 22]
upper_bounds = [4, 3, 7]"
183,ilp_assign,0,8,42,0,1,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[2, 1, 19], [10, 4, 15], [3, 1, 2]]"
184,ilp_prod,0,93,42,0,22,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 9, 13, 16]
consumption (rows=resources) = [[5, 4, 4, 1], [2, 4, 5, 3], [6, 4, 3, 1]]
capacity = [29, 17, 22]
upper_bounds = [3, 4, 3, 5]"
185,ilp_prod,0,79,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 19, 11]
consumption (rows=resources) = [[8, 5, 4], [3, 4, 5], [2, 2, 4]]
capacity = [23, 26, 16]
upper_bounds = [3, 4, 4]"
186,ilp_prod,0,45,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8, 15]
consumption (rows=resources) = [[8, 5, 4], [6, 4, 3], [3, 5, 4]]
capacity = [23, 10, 23]
upper_bounds = [3, 3, 3]"
187,add,8,128637475,1316510475,0,128637475,1,128637475,1,Compute: 93859516 + 34777959
188,ilp_prod,0,18,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 7, 7]
consumption (rows=resources) = [[3, 8, 7], [4, 5, 7]]
capacity = [18, 10]
upper_bounds = [3, 3, 3]"
189,sub,8,4922721,4922721,1,4922721,1,4922721,1,Compute: 32775962 - 27853241
190,sub,8,38257919,38257919,1,38257919,1,38257919,1,Compute: 49668030 - 11410111
191,sub,10,12698501,11696573,0,112994701,0,12698501,1,Compute: 2363292806 - 2350594305
192,knap,0,115,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 9, 3, 11, 1, 6, 11, 8, 11]
V = [17, 17, 20, 32, 27, 1, 19, 11, 19]
C = 31"
193,sub,8,21208328,21208328,1,21208328,1,21208328,1,Compute: 63925147 - 42716819
194,rod,0,98,42,0,42,0,98,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 7
P = [14, 5, 8, 23, 25, 22, 12]"
195,add,8,172366264,172366264,1,172366264,1,172366264,1,Compute: 83921254 + 88445010
196,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbdbbaadb""
T = ""dcbad"""
197,ilp_partition,0,0,42,0,0,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 1, 3, 3, 5, 18, 9, 2]"
198,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 18, 4, 10, 17, 4, 7, 15, 13]"
199,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcddbd""
T = ""cdabaaaad"""
200,mul,8,1764747354869488,1759079867640088,0,1760897976960888,0,1764747354869488,1,Compute: 25996972 * 67882804
201,ilp_assign,0,16,42,0,8,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[15, 9, 4, 10], [5, 3, 14, 13], [1, 16, 19, 5], [18, 13, 16, 8]]"
202,knap,0,63,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 12, 12, 14, 7, 10]
V = [15, 21, 26, 25, 12, 1]
C = 33"
203,ilp_assign,0,14,42,0,42,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[9, 13, 9], [4, 9, 1], [4, 4, 15]]"
204,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbccaacd""
T = ""bcccb"""
205,rod,0,54,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 9
P = [4, 5, 18, 22, 23, 13, 21, 20, 18]"
206,knap,0,119,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 9, 12, 2, 3, 8, 9, 13]
V = [36, 19, 37, 40, 6, 5, 11, 18]
C = 33"
207,add,12,1671048257261,1671048257261,1,1671048257261,1,1671048257261,1,Compute: 768073557096 + 902974700165
208,lcs,0,3,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadcdd""
T = ""dabdbb"""
209,ilp_assign,0,21,42,0,8,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[2, 5, 18, 14, 18], [13, 18, 9, 19, 2], [7, 7, 10, 13, 10], [17, 1, 19, 9, 7], [18, 17, 18, 6, 8]]"
210,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 11, 5, 7, 13, 4, 4, 11, 5, 16, 17, 15]"
211,rod,0,110,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 5
P = [22, 11, 20, 20, 21]"
212,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 17, 8, 6, 17, 2, 13, 9, 7, 11, 7, 4]"
213,lcs,0,3,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daada""
T = ""aacdcdbb"""
214,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 5, 15, 2, 2, 10, 6, 1, 20, 11, 1, 5, 9]"
215,knap,0,140,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 7, 16, 11, 5, 13, 14, 2, 4, 12]
V = [1, 17, 35, 4, 20, 25, 1, 21, 22, 20]
C = 49"
216,knap,0,86,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 15, 10, 8, 16, 17, 12]
V = [21, 26, 5, 13, 39, 12, 13]
C = 42"
217,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""accdcca""
T = ""ddccdc"""
218,ilp_prod,0,51,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 13, 17]
consumption (rows=resources) = [[1, 1, 3], [8, 7, 5], [6, 7, 6]]
capacity = [29, 16, 19]
upper_bounds = [3, 3, 3]"
219,knap,0,116,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 8, 4, 5, 17, 4, 9]
V = [30, 13, 4, 24, 30, 22, 40]
C = 27"
220,rod,0,112,42,0,42,0,112,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 12, 18, 7, 7, 3, 5, 8]"
221,mul,8,258830733987500,258599962500,0,258699962750,0,258830733987500,1,Compute: 20083750 * 12887570
222,add,8,101321998,100957,0,101321998,1,101321998,1,Compute: 31505383 + 69816615
223,ilp_assign,0,29,42,0,9,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[12, 15, 13, 18], [13, 10, 8, 12], [18, 18, 17, 8], [9, 1, 3, 9]]"
224,ilp_prod,0,24,42,0,1,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12]
consumption (rows=resources) = [[3, 7], [7, 4], [5, 3]]
capacity = [16, 15, 12]
upper_bounds = [3, 3]"
225,sub,8,7614805,761695,0,7614705,0,7614805,1,Compute: 99981127 - 92366322
226,rod,0,90,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 9
P = [10, 16, 14, 14, 3, 6, 7, 25, 22]"
227,knap,0,134,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 18, 12, 5, 16, 3, 17, 11]
V = [37, 20, 39, 21, 37, 6, 31, 22]
C = 49"
228,sub,10,2110907761,2110907761,1,2110907761,1,2110907761,1,Compute: 4194777577 - 2083869816
229,rod,0,60,42,0,42,0,60,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 5
P = [12, 9, 10, 18, 10]"
230,mul,12,477819562339048058224417,4789764289767847727677,0,47897999999999999999,0,477819562339048058224417,1,Compute: 816800128699 * 584989577683
231,sub,8,33552581,33552581,1,33552581,1,33552581,1,Compute: 49693274 - 16140693
232,ilp_assign,0,26,42,0,13,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[13, 5, 19], [7, 16, 13], [16, 4, 14]]"
233,rod,0,192,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [24, 19, 11, 18, 12, 5, 23, 1]"
234,knap,0,148,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 3, 11, 4, 3, 5, 10, 14, 11]
V = [15, 2, 12, 33, 37, 24, 20, 19, 25, 27]
C = 35"
235,ilp_assign,0,29,42,0,16,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[8, 15, 9, 13, 12], [13, 19, 8, 13, 20], [4, 6, 20, 12, 3], [1, 14, 19, 16, 2], [15, 4, 8, 15, 12]]"
236,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadbdcba""
T = ""ccdcb"""
237,mul,10,50043519872814220927,5020999999999999,0,5020997679777777777,0,50043519872814220927,1,Compute: 6484305301 * 7717637827
238,rod,0,120,42,0,42,0,120,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 18, 2, 9, 17, 6, 24, 23]"
239,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 11, 9, 4, 12, 2, 10, 7, 19, 4, 20, 9, 1, 9]"
240,mul,12,127775271991673854183455,12785999999999999999,0,1279089779787760605,0,127775271991673854183455,1,Compute: 548970345579 * 232754415645
241,mul,8,6379269054321376,6360999999999536,0,636099999999936,0,6379269054321376,1,Compute: 96763552 * 65926363
242,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 2, 13, 4, 10, 14, 15, 4, 18, 14, 14, 1, 9, 20]"
243,rod,0,200,42,0,42,0,200,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [25, 11, 19, 24, 2, 17, 15, 5]"
244,add,8,144251161,144251161,1,144251161,1,144251161,1,Compute: 94470316 + 49780845
245,sub,8,5890509,589079,0,5890509,1,5890509,1,Compute: 36958034 - 31067525
246,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 20, 17, 13, 4, 4, 19, 19, 1, 13, 3, 16, 7, 12]"
247,sub,12,280662927230,280662927230,1,280662927230,1,280662927230,1,Compute: 806841477767 - 526178550537
248,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbdbacb""
T = ""cddcabbc"""
249,knap,0,110,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 5, 12, 4, 13, 12, 17]
V = [37, 13, 26, 29, 10, 31, 16]
C = 37"
250,ilp_prod,0,94,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 11, 12]
consumption (rows=resources) = [[3, 2, 5], [1, 1, 6]]
capacity = [19, 16]
upper_bounds = [6, 8, 3]"
251,lcs,0,3,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadddbb""
T = ""bdbcbd"""
252,ilp_assign,0,29,42,0,4,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[20, 5, 18, 8], [20, 1, 8, 16], [12, 5, 14, 11], [14, 20, 15, 4]]"
253,ilp_assign,0,27,42,0,1,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[13, 6, 9, 19, 9], [16, 1, 6, 16, 4], [8, 5, 4, 13, 2], [6, 3, 4, 15, 18], [15, 1, 2, 9, 2]]"
254,add,8,92984528,92984528,1,92984528,1,92984528,1,Compute: 63326766 + 29657762
255,ilp_prod,0,34,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 11]
consumption (rows=resources) = [[6, 5], [8, 4]]
capacity = [16, 19]
upper_bounds = [3, 3]"
256,knap,0,108,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 7, 13, 15, 4, 11, 9]
V = [9, 11, 22, 9, 12, 40, 34]
C = 38"
257,ilp_prod,0,48,42,0,2,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 11, 9]
consumption (rows=resources) = [[1, 7, 1], [5, 1, 7]]
capacity = [20, 13]
upper_bounds = [3, 3, 3]"
258,ilp_assign,0,10,42,0,15,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[15, 10, 4, 8], [4, 7, 1, 7], [5, 20, 20, 1], [15, 1, 18, 8]]"
259,ilp_assign,0,38,42,0,0,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[4, 2, 9, 14, 5], [12, 4, 2, 13, 20], [20, 8, 6, 18, 19], [16, 6, 12, 20, 13], [17, 19, 6, 11, 17]]"
260,knap,0,199,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 15, 5, 15, 4, 18, 4, 18, 11]
V = [21, 32, 36, 22, 38, 21, 36, 38, 30]
C = 48"
261,sub,10,4331994225,4331994225,1,4331994225,1,4331994225,1,Compute: 6187620014 - 1855625789
262,add,10,8125463385,8125463385,1,8125463385,1,8125463385,1,Compute: 1490445119 + 6635018266
263,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 13, 20, 14, 18, 17, 14, 16, 9, 16, 5, 7]"
264,add,10,9145898184,9145908184,0,9145898184,1,9145898184,1,Compute: 5387264885 + 3758633299
265,sub,12,265217951958,-279242048082,0,-279282508042,0,265217951958,1,Compute: 604960510044 - 339742558086
266,mul,8,827791596632237,827688292777777,0,827627702777777,0,827791596632237,1,Compute: 75229373 * 11003569
267,rod,0,48,42,0,42,0,48,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [8, 16, 19, 4, 6, 16]"
268,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 19, 12, 6, 9, 4, 3, 10, 8, 13, 10, 18, 5, 10]"
269,add,8,140284526,140284526,1,140284526,1,140284526,1,Compute: 61497950 + 78786576
270,ilp_prod,0,40,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 5, 5, 9]
consumption (rows=resources) = [[8, 3, 6, 2], [4, 3, 3, 7], [3, 6, 4, 3]]
capacity = [14, 29, 13]
upper_bounds = [3, 3, 3, 4]"
271,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdabbcbba""
T = ""dbbddbaa"""
272,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 19, 13, 16, 15, 4, 8, 20, 12, 2, 3, 8, 6]"
273,ilp_assign,0,26,42,0,5,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[2, 17, 10, 17], [11, 7, 7, 8], [8, 13, 12, 9], [1, 16, 17, 5]]"
274,rod,0,40,42,0,42,0,40,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 1, 12, 5, 5, 10, 1, 16]"
275,rod,0,90,42,0,42,0,90,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 5
P = [18, 22, 24, 4, 25]"
276,ilp_assign,0,27,42,0,1,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[10, 8, 10, 17, 15], [11, 3, 3, 3, 8], [4, 17, 15, 18, 15], [1, 20, 6, 15, 14], [18, 4, 7, 1, 8]]"
277,knap,0,72,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 3, 9, 7, 8, 5, 5]
V = [14, 2, 11, 32, 24, 12, 4]
C = 25"
278,knap,0,210,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 14, 16, 12, 1, 16, 1, 4, 14, 11]
V = [22, 5, 27, 13, 33, 32, 39, 37, 36, 33]
C = 49"
279,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""accba""
T = ""bacaaaccb"""
280,add,10,11790181605,1179218163,0,11790181605,1,11790181605,1,Compute: 3785313879 + 8004867726
281,ilp_assign,0,31,42,0,2,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[9, 2, 13, 18, 19], [14, 5, 11, 6, 15], [13, 19, 18, 5, 17], [3, 20, 19, 20, 13], [9, 13, 16, 2, 10]]"
282,mul,8,7214952547719344,721999999999964,0,7199999999999999,0,7214952547719344,1,Compute: 91350058 * 78981368
283,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcbbac""
T = ""ddbda"""
284,rod,0,40,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 5
P = [4, 18, 17, 10, 25]"
285,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 8, 6, 6, 8, 19, 20, 15, 4, 1]"
286,rod,0,78,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 9
P = [2, 19, 14, 18, 10, 13, 21, 2, 22]"
287,sub,10,352256075,352256075,1,3523558075,0,352256075,1,Compute: 8907602560 - 8555346485
288,mul,12,322172533554016413468402,32189999999999999999,0,32145678901234567890,0,322172533554016413468402,1,Compute: 484987867209 * 664289882978
289,ilp_assign,0,30,42,0,17,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[12, 11, 6, 12, 17], [8, 11, 20, 8, 8], [7, 10, 10, 18, 11], [10, 19, 1, 16, 9], [8, 5, 8, 6, 3]]"
290,mul,8,2597302693573200,259590497882020,0,259590827322020,0,2597302693573200,1,Compute: 51849360 * 50093245
291,rod,0,68,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [8, 17, 13, 16, 24, 11, 15, 4]"
292,sub,10,7720377152,7720377152,1,7720377152,1,7720377152,1,Compute: 9145687855 - 1425310703
293,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""accdcc""
T = ""ccaabcccad"""
294,rod,0,120,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 10, 19, 19, 6, 11, 17, 22]"
295,add,10,10775209533,1077520933,0,10775209533,1,10775209533,1,Compute: 6110365685 + 4664843848
296,mul,10,82117501393451997605,8199999999999999995,0,8209999999999999995,0,82117501393451997605,1,Compute: 8949988015 * 9175152107
297,lcs,0,7,42,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcbcdcacb""
T = ""acacdcaacbba"""
298,ilp_assign,0,27,42,0,42,0,40,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[1, 12, 8], [5, 7, 13], [15, 17, 19]]"
299,ilp_assign,0,18,42,0,7,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[16, 3, 17, 9], [4, 8, 4, 14], [13, 5, 4, 15], [17, 7, 6, 7]]"
300,add,8,104867304,104867304,1,104867304,1,104867304,1,Compute: 86397250 + 18470054
301,rod,0,200,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [25, 21, 8, 10, 1, 3, 5, 16]"
302,knap,0,108,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 11, 6, 4, 8, 3, 14]
V = [18, 35, 20, 22, 24, 27, 30]
C = 31"
303,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 8, 11, 3, 18, 19, 19, 12, 6, 14, 14, 10, 9, 8]"
304,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 2, 10, 17, 16, 12, 16, 5, 15, 5, 16]"
305,ilp_prod,0,16,42,0,42,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 16]
consumption (rows=resources) = [[7, 7], [2, 7]]
capacity = [11, 23]
upper_bounds = [3, 3]"
306,ilp_prod,0,104,42,0,104,1,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 13]
consumption (rows=resources) = [[6, 1], [3, 1]]
capacity = [12, 24]
upper_bounds = [3, 8]"
307,rod,0,50,42,0,42,0,50,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [3, 4, 25, 4, 13, 11]"
308,mul,10,12383579424765742328,124099999999999998,0,1240999999999999999,0,12383579424765742328,1,Compute: 1882332988 * 6578846306
309,add,12,1714657023407,1714657023407,1,1714657023407,1,1714657023407,1,Compute: 872590451159 + 842066572248
310,mul,12,405671602027992233581308,4100784267826782658,0,4101999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,,0,Compute: 417870172934 * 970807749162
311,mul,12,328809133693987242543890,3299999999999,0,3299999999999,0,328809133693987242543890,1,Compute: 905903844530 * 362962510513
312,ilp_assign,0,22,42,0,1,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[1, 13, 2, 14, 20], [3, 8, 2, 15, 3], [10, 20, 2, 12, 2], [3, 3, 2, 19, 10], [12, 10, 3, 18, 16]]"
313,ilp_prod,0,53,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 13, 10, 14]
consumption (rows=resources) = [[6, 2, 1, 3], [3, 7, 6, 6]]
capacity = [25, 15]
upper_bounds = [4, 3, 3, 3]"
314,ilp_prod,0,26,42,0,1,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 13]
consumption (rows=resources) = [[2, 3], [5, 8], [7, 5]]
capacity = [13, 19, 11]
upper_bounds = [3, 3]"
315,rod,0,60,42,0,42,0,60,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [3, 20, 9, 2, 1, 14]"
316,ilp_assign,0,22,42,0,42,0,42,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[3, 13, 2], [6, 11, 1], [15, 18, 20]]"
317,ilp_assign,0,12,42,0,42,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[15, 8, 8], [2, 8, 3], [4, 4, 2]]"
318,rod,0,120,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 18, 1, 5, 8, 16, 21, 4]"
319,sub,10,1224396252,1224396252,1,1224396252,1,1224396252,1,Compute: 5609330635 - 4384934383
320,ilp_assign,0,31,42,0,0,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[3, 5, 11], [17, 16, 16], [17, 12, 14]]"
321,mul,8,1179726216419996,11769999999799996,0,11779999999999998,0,1179726216419996,1,Compute: 48124202 * 24514198
322,sub,8,43653047,43653047,1,43653047,1,43653047,1,Compute: 82237154 - 38584107
323,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaabacada""
T = ""adbcbddc"""
324,lcs,0,2,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddaaaaaccc""
T = ""cadad"""
325,knap,0,161,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 5, 14, 5, 11, 11, 5, 1, 12, 6]
V = [15, 16, 32, 38, 32, 3, 6, 9, 35, 31]
C = 43"
326,rod,0,170,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 10
P = [17, 12, 19, 2, 12, 4, 8, 21, 21, 4]"
327,mul,10,26681866383765694464,267908979846464,0,26790897984608,0,26681866383765694464,1,Compute: 7065550952 * 3776332032
328,sub,8,3863670,38636670,0,38636670,0,3863670,1,Compute: 87840518 - 83976848
329,add,10,14757820912,14757820912,1,14757820912,1,14757820912,1,Compute: 8719792472 + 6038028440
330,add,8,164765677,164765677,1,164765677,1,164765677,1,Compute: 82273400 + 82492277
331,ilp_prod,0,105,42,0,69,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 15]
consumption (rows=resources) = [[2, 3], [8, 2]]
capacity = [23, 14]
upper_bounds = [3, 7]"
332,sub,12,256827828161,256827828161,1,256827828161,1,256827828161,1,Compute: 943894496183 - 687066668022
333,knap,0,96,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 1, 16, 2, 6, 9, 18]
V = [3, 1, 15, 6, 34, 12, 3, 34]
C = 30"
334,rod,0,240,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 10
P = [24, 20, 1, 16, 10, 9, 25, 23, 10, 7]"
335,rod,0,54,42,0,42,0,54,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [6, 18, 5, 8, 7, 3]"
336,knap,0,113,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 11, 13, 16, 17, 1, 12, 5]
V = [20, 11, 20, 37, 9, 36, 10, 11]
C = 43"
337,add,10,7383664284,7383664284,1,7383664284,1,7383664284,1,Compute: 4117513184 + 3266151100
338,ilp_prod,0,52,42,0,1,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 16]
consumption (rows=resources) = [[6, 3], [2, 5], [7, 6]]
capacity = [29, 11, 27]
upper_bounds = [3, 3]"
339,knap,0,90,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 2, 8, 10, 1, 7, 4]
V = [9, 15, 24, 33, 18, 10, 11]
C = 22"
340,knap,0,132,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 18, 7, 16, 7, 9, 10, 18, 17, 9]
V = [15, 12, 14, 26, 4, 16, 36, 29, 3, 22]
C = 56"
341,sub,8,45009974,45009974,1,45010074,0,45009974,1,Compute: 70519930 - 25509956
342,add,12,1023542574896,1023542574896,1,1023542574896,1,1023542574896,1,Compute: 543378820359 + 480163754537
343,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adabd""
T = ""aadaccbdab"""
344,lcs,0,2,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbba""
T = ""daacabc"""
345,add,10,12481078833,12481078913,0,12481078833,1,12481078833,1,Compute: 8093537819 + 4387541014
346,add,10,11033555227,11033555227,1,11033555227,1,11033555227,1,Compute: 6886350040 + 4147205187
347,ilp_prod,0,32,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 6, 6]
consumption (rows=resources) = [[8, 7, 2], [7, 5, 7], [1, 4, 6]]
capacity = [23, 28, 28]
upper_bounds = [3, 3, 4]"
348,sub,12,180214193015,-620785807085,0,180214192915,0,180214193015,1,Compute: 882772436122 - 702558243107
349,add,8,67489828,67489828,1,67489828,1,67489828,1,Compute: 16367312 + 51122516
350,add,12,999993618779,1000000000779,0,1000000010779,0,999993618779,1,Compute: 604028474618 + 395965144161
351,ilp_assign,0,22,42,0,7,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[9, 18, 10, 19, 20], [9, 15, 13, 4, 8], [10, 5, 17, 17, 1], [12, 15, 4, 14, 5], [9, 4, 12, 9, 7]]"
352,mul,12,161412594782115227443984,16189999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,1618999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,,0,Compute: 854452741268 * 188907574388
353,ilp_partition,0,0,42,0,0,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 8, 7, 13, 7, 10, 10, 12]"
354,ilp_assign,0,21,42,0,0,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[6, 2, 14, 8, 9], [17, 15, 7, 2, 20], [13, 14, 13, 17, 14], [9, 15, 11, 19, 1], [3, 16, 14, 6, 14]]"
355,mul,12,95994560813774885392536,96229878924676567676,0,96208877924963636,0,95994560813774885392536,1,Compute: 737539675803 * 130155114312
356,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbbcadac""
T = ""dcaaaadcdcc"""
357,sub,8,23831885,23831885,1,23831885,1,23831885,1,Compute: 60730118 - 36898233
358,lcs,0,7,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daadadcdc""
T = ""dadadccbca"""
359,knap,0,131,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 13, 18, 7, 6, 8, 18, 7]
V = [39, 16, 4, 21, 40, 4, 22, 27]
C = 46"
360,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 16, 6, 10, 12, 8, 7, 20, 2]"
361,knap,0,123,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 15, 2, 12, 11, 6, 16]
V = [31, 1, 37, 15, 40, 4, 29]
C = 33"
362,sub,8,15460500,15460500,1,15460500,1,15460500,1,Compute: 91065162 - 75604662
363,ilp_assign,0,13,42,0,42,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[7, 16, 6], [2, 13, 10], [1, 5, 4]]"
364,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 7, 7, 3, 6, 15, 17, 1, 11, 20, 10]"
365,ilp_assign,0,17,42,0,6,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[20, 11, 1, 15], [11, 8, 8, 12], [2, 1, 15, 17], [7, 13, 5, 6]]"
366,knap,0,168,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 17, 5, 2, 15, 12, 2, 1]
V = [21, 27, 11, 36, 3, 38, 34, 28]
C = 32"
367,knap,0,133,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 10, 17, 17, 18, 18, 14]
V = [29, 38, 33, 31, 12, 33, 23]
C = 48"
368,knap,0,123,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 12, 11, 4, 6, 13, 2, 9]
V = [40, 14, 4, 16, 20, 21, 37, 26]
C = 37"
369,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbdacadacad""
T = ""bbadc"""
370,knap,0,113,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 14, 14, 7, 9, 12]
V = [37, 32, 37, 19, 39, 17]
C = 30"
371,ilp_assign,0,22,42,0,19,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[15, 4, 14, 13, 4], [19, 1, 1, 18, 20], [14, 12, 6, 13, 2], [5, 10, 17, 20, 14], [6, 19, 16, 10, 19]]"
372,knap,0,159,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 3, 7, 14, 8, 2, 8, 8, 8, 13]
V = [25, 14, 40, 10, 20, 24, 1, 20, 29, 32]
C = 43"
373,add,10,15029177121,14029177121,0,15029177121,1,15029177121,1,Compute: 8351222782 + 6677954339
374,knap,0,156,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 10, 18, 9, 8, 7, 4, 9]
V = [31, 4, 33, 20, 14, 35, 5, 36, 21]
C = 36"
375,ilp_assign,0,26,42,0,42,0,42,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[1, 12, 8], [20, 12, 17], [14, 8, 17]]"
376,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 14, 16, 18, 11, 7, 1, 5, 16, 16, 9, 14]"
377,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbddbdccb""
T = ""cbaccbccc"""
378,ilp_assign,0,28,42,0,0,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[6, 9, 7], [15, 13, 18], [17, 9, 9]]"
379,ilp_prod,0,80,42,0,3,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 18, 7, 11]
consumption (rows=resources) = [[2, 1, 4, 8], [2, 4, 6, 4]]
capacity = [19, 19]
upper_bounds = [8, 4, 3, 3]"
380,rod,0,59,42,0,42,0,59,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 7
P = [5, 18, 23, 18, 9, 22, 22]"
381,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 5, 16, 5, 2, 7, 13, 11, 9, 16, 10, 2, 14, 3]"
382,sub,12,23661727508,236617274408,0,236617275008,0,23661727508,1,Compute: 169727249737 - 146065522229
383,ilp_partition,0,1,42,0,0,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 8, 20, 9, 10, 6, 4, 1, 12]"
384,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 7, 5, 8, 15, 5, 3, 16, 17]"
385,ilp_partition,0,1,42,0,0,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 15, 11, 17, 4, 1, 2, 5]"
386,sub,8,70169134,70169134,1,70169134,1,70169134,1,Compute: 85258204 - 15089070
387,sub,10,2091250363,2091250363,1,2091240363,0,2091250363,1,Compute: 7460091952 - 5368841589
388,ilp_assign,0,22,42,0,42,0,42,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[11, 17, 6], [8, 10, 3], [6, 15, 12]]"
389,ilp_assign,0,23,42,0,19,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[10, 9, 6, 10], [9, 11, 5, 9], [13, 15, 16, 6], [13, 2, 3, 19]]"
390,rod,0,119,42,0,42,0,119,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 7
P = [17, 5, 6, 8, 8, 2, 12]"
391,add,10,14364700365,14364690365,0,14364690365,0,14364700365,1,Compute: 5801424265 + 8563276100
392,sub,8,64991346,64991346,1,64991346,1,64991346,1,Compute: 85962740 - 20971394
393,mul,8,3499865680856468,350999999999998,0,350999999999999,0,3499865680856468,1,Compute: 63111356 * 55455403
394,rod,0,105,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 5
P = [21, 25, 14, 14, 12]"
395,ilp_prod,0,95,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 15, 16, 19]
consumption (rows=resources) = [[4, 7, 8, 2], [7, 6, 1, 5]]
capacity = [16, 28]
upper_bounds = [4, 3, 3, 5]"
396,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 14, 2, 3, 12, 10, 9, 12, 12, 10, 14, 13, 16]"
397,add,8,71916729,71916729,1,71916729,1,71916729,1,Compute: 20260429 + 51656300
398,lcs,0,5,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbdab""
T = ""bcaabddbcab"""
399,sub,8,2752372,2752372,1,2752372,1,2752372,1,Compute: 86608999 - 83856627
400,ilp_prod,0,35,6,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 14, 9, 17]
consumption (rows=resources) = [[7, 6, 8, 6], [5, 8, 3, 5], [1, 5, 4, 1]]
capacity = [25, 11, 10]
upper_bounds = [3, 3, 3, 3]"
401,add,8,76947141,76947141,1,76947141,1,76947141,1,Compute: 50078212 + 26868929
402,knap,0,147,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 1, 10, 3, 16, 4, 17, 8]
V = [39, 17, 28, 24, 15, 4, 7, 39]
C = 36"
403,sub,10,966104241,966101841,0,966104241,1,966104241,1,Compute: 6750323769 - 5784219528
404,rod,0,161,42,0,42,0,161,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 7
P = [23, 20, 14, 7, 17, 11, 4]"
405,ilp_prod,0,148,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 12, 20, 17]
consumption (rows=resources) = [[3, 3, 4, 2], [6, 6, 8, 3]]
capacity = [22, 30]
upper_bounds = [5, 5, 3, 8]"
406,sub,12,128728515995,-391271484605,0,128728515995,1,128728515995,1,Compute: 541830250064 - 413101734069
407,ilp_assign,0,20,42,0,13,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[13, 4, 13, 15, 8], [3, 11, 5, 20, 1], [13, 2, 10, 12, 1], [20, 15, 11, 19, 1], [18, 11, 13, 2, 19]]"
408,ilp_partition,0,0,42,0,1,0,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 16, 9, 2, 16, 11, 14, 15]"
409,ilp_prod,0,60,42,0,67,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 20]
consumption (rows=resources) = [[6, 4], [1, 7]]
capacity = [17, 25]
upper_bounds = [3, 3]"
410,mul,12,249798991183984571643489,2519999999999,0,2529999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,,0,Compute: 769899326973 * 324456695093
411,ilp_assign,0,19,42,0,3,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[7, 17, 20, 10], [10, 9, 12, 9], [10, 2, 1, 1], [15, 2, 7, 3]]"
412,rod,0,160,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 10
P = [16, 22, 9, 5, 14, 12, 21, 12, 25, 13]"
413,add,12,919950192638,919940192638,0,919940192638,0,919950192638,1,Compute: 575047643670 + 344902548968
414,rod,0,230,42,0,42,0,,0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 10
P = [23, 19, 15, 3, 20, 16, 17, 11, 19, 22]"
415,knap,0,101,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 4, 18, 13, 5]
V = [29, 26, 12, 31, 29, 34]
C = 23"
416,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadacc""
T = ""cdacadb"""
417,knap,0,152,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 15, 16, 13, 10, 12, 6, 9, 6]
V = [2, 36, 4, 5, 36, 15, 29, 21, 29, 22]
C = 48"
418,knap,0,152,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 7, 12, 5, 9, 12, 3, 13, 16, 1]
V = [34, 30, 13, 16, 14, 1, 20, 3, 18, 34]
C = 41"
419,rod,0,44,42,0,42,0,44,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 6
P = [1, 8, 22, 13, 15, 20]"
420,mul,10,61564729226235173183,61189876542797797923,0,6118889797877933963,0,61564729226235173183,1,Compute: 6692838593 * 9198597631
421,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 9, 20, 5, 15, 7, 5, 13, 15, 2, 12]"
422,add,10,14907003783,14906993803,0,14906903783,0,14907003783,1,Compute: 8540187780 + 6366816003
423,mul,12,178478226481328586937404,17829999999999999999,0,179097979767242444,0,178478226481328586937404,1,Compute: 975218754321 * 183013529724
424,sub,8,30361138,30361138,1,30361138,1,30361138,1,Compute: 55754483 - 25393345
425,lcs,0,7,7,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdbaddaddac""
T = ""abcaacccddcd"""
426,rod,0,152,42,0,42,0,152,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 4, 2, 6, 17, 1, 2, 14]"
427,ilp_prod,0,96,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 7, 10]
consumption (rows=resources) = [[7, 1, 4], [7, 1, 1]]
capacity = [26, 23]
upper_bounds = [3, 8, 6]"
428,ilp_prod,0,112,42,0,0,0,,0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 7, 16, 7]
consumption (rows=resources) = [[6, 5, 3, 8], [7, 4, 3, 2]]
capacity = [23, 23]
upper_bounds = [3, 4, 7, 3]"
429,rod,0,35,42,0,42,0,35,1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 5
P = [7, 6, 2, 20, 4]"
430,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcddcdab""
T = ""adadbdc"""
431,ilp_assign,0,31,42,0,20,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[7, 9, 8, 3, 14], [12, 12, 7, 4, 1], [13, 11, 19, 11, 14], [11, 19, 9, 13, 20], [9, 12, 20, 3, 14]]"
432,sub,8,15312775,15312775,1,15312775,1,15312775,1,Compute: 93612653 - 78299878
433,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcdaabad""
T = ""bcccdcdcb"""
434,add,10,15863192494,15863192544,0,15863192494,1,15863192494,1,Compute: 8788285439 + 7074907055
435,lcs,0,4,4,1,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbdabd""
T = ""cdccdbdcd"""
436,mul,12,187928711287105023770522,1878929769987976262242,0,187899999999999999999,0,187928711287105023770522,1,Compute: 749133987446 * 250861280407
437,add,10,6030962395,6030962395,1,6030962395,1,6030962395,1,Compute: 1302595366 + 4728367029
438,knap,0,78,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 4, 1, 6, 17, 3, 6, 7]
V = [15, 12, 20, 7, 4, 21, 10, 5]
C = 29"
439,knap,0,124,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 17, 14, 8, 2, 9, 7, 11]
V = [23, 23, 30, 40, 25, 25, 6, 28]
C = 38"
440,lcs,0,3,4,0,1,0,,0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcaadbd""
T = ""dbabccb"""
441,knap,0,94,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 2, 15, 9, 14, 15]
V = [22, 33, 7, 11, 26, 35]
C = 34"
442,knap,0,130,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 18, 14, 15, 15, 17, 18, 10]
V = [11, 34, 40, 33, 20, 38, 14, 19]
C = 57"
443,knap,0,133,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 11, 4, 14, 13, 17, 6]
V = [40, 29, 29, 35, 29, 24, 14]
C = 33"
444,ilp_assign,0,33,42,0,17,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[6, 16, 7, 10, 18], [2, 10, 10, 5, 9], [17, 10, 16, 5, 14], [11, 17, 11, 7, 9], [2, 10, 17, 19, 10]]"
445,ilp_assign,0,23,42,0,42,0,50,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[20, 16, 12], [10, 1, 4], [20, 17, 2]]"
446,mul,12,33106168987114424561052,33099999999999999999,0,3300000000000000000,0,33106168987114424561052,1,Compute: 106697460867 * 310280757556
447,ilp_partition,0,1,42,0,1,1,,0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 15, 13, 12, 17, 17, 16, 6, 5, 1, 6]"
448,knap,0,123,42,0,1,0,,0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 3, 3, 2, 17, 17]
V = [31, 37, 31, 21, 34, 11]
C = 25"
449,ilp_assign,0,20,42,0,0,0,,0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer.
C = [[15, 9, 3, 6, 16], [19, 13, 5, 20, 7], [17, 1, 17, 2, 11], [5, 8, 11, 13, 2], [14, 19, 16, 17, 3]]"
