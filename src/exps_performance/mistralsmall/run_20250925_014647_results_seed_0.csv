idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,rod,16,352,100,0,46,0,"{'ok': True, 'value': 352, 'stdout': '352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15203285217285156}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [22, 37, 4, 6, 33, 34, 17, 9, 17, 22, 28, 8, 48, 26, 45, 1]"
1,sub,4,2175,2175,1,2175,1,"{'ok': True, 'value': 2175, 'stdout': '2175\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08115959167480469}",1,Compute: 9905 - 7730
2,ilp_partition,4,6,14,0,1,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07933259010314941}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 11, 5, 11]"
3,ilp_assign,16,105,56,0,105,1,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.7777855396270752}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 30, 2, 21, 25, 8, 44], [26, 12, 25, 40, 47, 35, 48], [28, 20, 12, 27, 36, 18, 42], [34, 8, 27, 48, 47, 6, 23], [41, 1, 35, 31, 19, 47, 25], [37, 29, 41, 32, 23, 31, 33], [33, 16, 2, 24, 15, 16, 20]]"
4,add,16,7710349994693310,7710349995092310,0,7710349995093310,0,"{'ok': True, 'value': 7710349994693310, 'stdout': '7710349994693310\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08742880821228027}",1,Compute: 1550168928425851 + 6160181066267459
5,sub,4,553,553,1,553,1,"{'ok': True, 'value': 553, 'stdout': '553\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09284162521362305}",1,Compute: 3573 - 3020
6,sub,16,2793905415068721,2793905415068721,1,2793905415068721,1,"{'ok': True, 'value': 2793905415068721, 'stdout': '2793905415068721\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07904958724975586}",1,Compute: 8928991557295045 - 6135086142226324
7,knap,16,420,254,0,325,0,"{'ok': True, 'value': 420, 'stdout': '420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08362650871276855}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 23, 15, 8, 27, 32, 6, 30, 20, 2, 22, 31, 8, 20, 7, 24]
V = [6, 24, 40, 24, 44, 62, 29, 49, 44, 2, 48, 44, 58, 27, 59, 54]
C = 151"
8,lcs,4,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07839179039001465}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbd""
T = ""bbbbd"""
9,add,16,17731907340954129,1773200954954689,0,17731907340954129,1,"{'ok': True, 'value': 17731907340954129, 'stdout': '17731907340954129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07809805870056152}",1,Compute: 9444754194954687 + 8287153145999442
10,ilp_prod,16,132,204,0,165,0,"{'ok': True, 'value': 132, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9dc35f4f69c846e4bd134794f31a5063-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9dc35f4f69c846e4bd134794f31a5063-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 141 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -126 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -132 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 3\nCbc0013I At root node, 1 cuts changed objective from -141 to -132 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 2.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -132, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -141 to -132\nProbing was tried 3 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                132.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22455525398254395}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 30, 42, 3, 34, 16]
consumption (rows=resources) = [[10, 7, 1, 10, 4, 14], [12, 13, 12, 13, 7, 11], [1, 2, 4, 14, 4, 14], [11, 8, 11, 11, 12, 12]]
capacity = [41, 52, 53, 37]
upper_bounds = [3, 4, 3, 3, 3, 3]"
11,rod,2,12,12,1,12,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08145785331726074}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 6]"
12,ilp_prod,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4ab00b4cd0774ab49f37b8bd2344fe19-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4ab00b4cd0774ab49f37b8bd2344fe19-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 1 rows, 2 columns (2 integer (0 of which binary)) and 2 elements\nCutoff increment increased from 1e-05 to 2.9999\nCbc0012I Integer solution of -21 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -21, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -21 to -21\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15331268310546875}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[1, 1], [1, 3]]
capacity = [10, 7]
upper_bounds = [7, 3]"
13,lcs,32,19,19,1,13,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09667468070983887}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badcccbdabaadabbdccdccbaccbabccd""
T = ""baabdddadcdabbcdbccddccadacddbb"""
14,sub,8,5338410,5338410,1,5343410,0,"{'ok': True, 'value': 5338410, 'stdout': '5338410\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08005547523498535}",1,Compute: 39120586 - 33782176
15,mul,2,406,406,1,406,1,"{'ok': True, 'value': 406, 'stdout': '406\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07985472679138184}",1,Compute: 29 * 14
16,knap,8,58,41,0,41,0,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08638191223144531}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 9, 13, 6, 8, 4, 6, 16]
V = [16, 1, 15, 10, 10, 10, 12, 5]
C = 35"
17,lcs,8,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08489632606506348}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbadcccb""
T = ""aaaacbbb"""
18,mul,8,3969565102442620,39499999999990,0,396933869957660,0,"{'ok': True, 'value': 3969565102442620, 'stdout': '3969565102442620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08998322486877441}",1,Compute: 56485532 * 70275785
19,add,4,8809,8809,1,8809,1,"{'ok': True, 'value': 8809, 'stdout': '8809\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09522390365600586}",1,Compute: 2875 + 5934
20,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10355281829833984}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbacddd""
T = ""bdbaabdca"""
21,ilp_assign,4,18,18,1,17,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3919651508331299}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 8, 10, 2], [5, 9, 8, 9], [11, 7, 8, 5], [3, 4, 9, 6]]"
22,mul,32,489609894588175025430912293831244786193479704576686284778774185,-inf,0,48949563575456934228552957456349389876,0,"{'ok': True, 'value': 489609894588175025430912293831244786193479704576686284778774185, 'stdout': '489609894588175025430912293831244786193479704576686284778774185\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09220027923583984}",1,Compute: 27494161593985543586135614534485 * 17807776858897895005337297430021
23,mul,8,1863959050052255,1860000000000000,0,1864787495393555,0,"{'ok': True, 'value': 1863959050052255, 'stdout': '1863959050052255\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08968281745910645}",1,Compute: 20787409 * 89667695
24,add,8,152864519,152864519,1,152864519,1,"{'ok': True, 'value': 152864519, 'stdout': '152864519\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0830380916595459}",1,Compute: 60162640 + 92701879
25,sub,8,22789722,22789722,1,22789722,1,"{'ok': True, 'value': 22789722, 'stdout': '22789722\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08527731895446777}",1,Compute: 91709201 - 68919479
26,sub,32,7062792981060630128918080327802,7062792948060678535948070337802,0,7062792978460379528948079577782,0,"{'ok': True, 'value': 7062792981060630128918080327802, 'stdout': '7062792981060630128918080327802\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09482383728027344}",1,Compute: 48306587277238128358914468337774 - 41243794296177498229996388009972
27,ilp_prod,32,374,696,0,597,0,"{'ok': True, 'value': 374, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/59018782dbc44f8c8bffbebf956e4662-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/59018782dbc44f8c8bffbebf956e4662-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 421.377 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -261 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -283 found by DiveCoefficient after 259 iterations and 0 nodes (0.02 seconds)\nCbc0031I 1 added rows had average density of 6\nCbc0013I At root node, 1 cuts changed objective from -421.37673 to -393.80051 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 207 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 64 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -283 best solution, best possible -393.80051 (0.02 seconds)\nCbc0012I Integer solution of -357 found by rounding after 260 iterations and 1 nodes (0.02 seconds)\nCbc0012I Integer solution of -374 found by rounding after 302 iterations and 4 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -374, took 307 iterations and 4 nodes (0.02 seconds)\nCbc0032I Strong branching done 10 times (17 iterations), fathomed 0 nodes and fixed 1 variables\nCbc0035I Maximum depth 1, 3 variables fixed on reduced cost\nCuts at root node changed objective from -421.377 to -393.801\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nGomory was tried 116 times and created 246 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 116 times and created 113 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 100 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\n\nResult - Optimal solution found\n\nObjective value:                374.00000000\nEnumerated nodes:               4\nTotal iterations:               307\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18286728858947754}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [74, 91, 34, 35, 96, 20]
consumption (rows=resources) = [[22, 20, 15, 29, 1, 1], [17, 29, 22, 25, 27, 21], [17, 3, 7, 2, 22, 31], [29, 12, 16, 7, 5, 9]]
capacity = [96, 118, 65, 78]
upper_bounds = [3, 4, 4, 3, 3, 3]"
28,ilp_partition,8,1,9,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10371756553649902}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 8, 10, 19, 1, 16, 23, 5]"
29,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0888218879699707}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 4, 2, 3]"
30,sub,8,46974726,46974726,1,46974726,1,"{'ok': True, 'value': 46974726, 'stdout': '46974726\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09958767890930176}",1,Compute: 66056529 - 19081803
31,lcs,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09098219871520996}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""ac"""
32,add,8,46681780,46681780,1,46681780,1,"{'ok': True, 'value': 46681780, 'stdout': '46681780\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08263587951660156}",1,Compute: 15906864 + 30774916
33,mul,8,185747110482570,185621787893570,0,18519939757770,0,"{'ok': True, 'value': 185747110482570, 'stdout': '185747110482570\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08884501457214355}",1,Compute: 14207046 * 13074295
34,ilp_assign,8,25,29,0,49,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3790409564971924}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 10, 20, 5, 16, 15, 1], [20, 11, 5, 14, 1, 10, 6], [19, 6, 3, 14, 17, 15, 18], [21, 5, 14, 11, 5, 23, 18], [12, 19, 6, 3, 3, 8, 4], [7, 16, 23, 21, 7, 1, 13], [11, 9, 12, 19, 9, 15, 17]]"
35,add,32,58224111217826764239805231127258,58224111217834784239805461127258,0,58224111217826764239805215127258,0,"{'ok': True, 'value': 58224111217826764239805231127258, 'stdout': '58224111217826764239805231127258\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07854294776916504}",1,Compute: 32627128502612862462141768948860 + 25596982715213901777663462178398
36,sub,2,33,33,1,33,1,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07832670211791992}",1,Compute: 83 - 50
37,rod,2,10,5,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0811777114868164}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
38,rod,32,2080,243,0,307,0,"{'ok': True, 'value': 2080, 'stdout': '2080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08209037780761719}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [65, 13, 85, 9, 70, 76, 31, 21, 43, 91, 78, 48, 75, 75, 77, 90, 1, 56, 59, 94, 15, 86, 21, 59, 6, 30, 83, 69, 31, 65, 21, 94]"
39,ilp_partition,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08000445365905762}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 4, 6, 6]"
40,ilp_assign,16,63,10,0,73,0,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3771078586578369}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 22, 23, 41, 3, 9, 29], [6, 35, 22, 9, 27, 22, 3], [29, 27, 40, 12, 23, 30, 30], [16, 23, 38, 40, 1, 44, 37], [15, 35, 5, 16, 6, 39, 12], [27, 29, 16, 44, 20, 40, 43], [40, 7, 1, 32, 41, 4, 2]]"
41,ilp_assign,8,35,23,0,42,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39206385612487793}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 11, 9, 20, 21, 11, 3], [12, 1, 15, 20, 6, 12, 20], [10, 23, 9, 16, 1, 15, 6], [8, 12, 8, 4, 21, 2, 13], [15, 13, 21, 20, 2, 11, 1], [22, 1, 15, 9, 7, 23, 6], [15, 4, 23, 24, 13, 18, 2]]"
42,rod,8,56,36,0,46,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0980842113494873}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 14, 2, 22, 10, 20, 6, 10]"
43,ilp_assign,32,104,120,0,208,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3910505771636963}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[58, 17, 78, 66, 34, 66, 17], [89, 76, 25, 95, 10, 6, 81], [5, 40, 36, 94, 62, 31, 59], [67, 80, 26, 47, 95, 49, 28], [55, 66, 77, 18, 10, 75, 30], [82, 55, 39, 27, 38, 19, 21], [36, 46, 14, 19, 48, 88, 89]]"
44,knap,32,1653,1000,0,1007,0,"{'ok': True, 'value': 1653, 'stdout': '1653\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09964728355407715}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [47, 36, 13, 29, 3, 33, 24, 40, 23, 26, 46, 37, 5, 11, 59, 8, 2, 12, 2, 29, 17, 4, 46, 22, 1, 16, 48, 16, 17, 43, 30, 6]
V = [8, 77, 126, 122, 15, 11, 109, 93, 105, 45, 22, 52, 56, 127, 45, 29, 26, 113, 37, 6, 40, 51, 65, 80, 57, 122, 83, 73, 40, 19, 100, 3]
C = 375"
45,lcs,16,7,5,0,5,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08578801155090332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbabaddcddacdaa""
T = ""bbbcdbcdbacbbbb"""
46,knap,32,1362,1032,0,1055,0,"{'ok': True, 'value': 1362, 'stdout': '1362\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09258341789245605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [53, 48, 46, 48, 61, 59, 39, 48, 5, 54, 4, 6, 42, 28, 17, 53, 51, 20, 51, 39, 20, 18, 25, 20, 25, 52, 2, 14, 36, 61, 53, 37]
V = [62, 41, 37, 11, 96, 96, 80, 66, 17, 4, 81, 29, 9, 15, 55, 33, 58, 103, 22, 70, 38, 105, 10, 55, 44, 123, 1, 37, 88, 86, 112, 85]
C = 567"
47,add,2,147,147,1,147,1,"{'ok': True, 'value': 147, 'stdout': '147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0858457088470459}",1,Compute: 75 + 72
48,knap,8,68,45,0,59,0,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10800814628601074}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 8, 3, 3, 3, 1, 11, 4]
V = [16, 2, 3, 7, 20, 6, 26, 9]
C = 22"
49,ilp_assign,4,17,17,1,20,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41829586029052734}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 1, 6], [11, 9, 4, 12], [6, 3, 9, 9], [12, 10, 10, 7]]"
50,ilp_prod,32,284,343,0,345,0,"{'ok': True, 'value': 284, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2059ca1703cc46c981dc9f0665b2a0a9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2059ca1703cc46c981dc9f0665b2a0a9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 311.197 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -284 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0031I 2 added rows had average density of 3.5\nCbc0013I At root node, 2 cuts changed objective from -311.19652 to -291.94118 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 3 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -284, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -311.197 to -291.941\nProbing was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                284.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n284\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1947319507598877}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 29, 49, 58, 20, 85]
consumption (rows=resources) = [[12, 8, 6, 31, 4, 22], [5, 32, 6, 26, 7, 15], [7, 23, 19, 27, 20, 17], [9, 3, 27, 21, 8, 21]]
capacity = [106, 115, 89, 74]
upper_bounds = [8, 3, 3, 3, 4, 3]"
51,ilp_partition,2,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08264708518981934}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 6, 1]"
52,ilp_prod,8,46,60,0,66,0,"{'ok': True, 'value': 46, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d62b65f6132246f6a6960593b0e8bb58-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d62b65f6132246f6a6960593b0e8bb58-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 50.0238 - 0.00 seconds\nCgl0004I processed model has 3 rows, 4 columns (4 integer (0 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -46 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -46, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -48 to -46\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                46.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n46\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16145825386047363}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 17, 8, 6]
consumption (rows=resources) = [[1, 8, 7, 7], [6, 6, 4, 6], [8, 3, 1, 8], [3, 1, 2, 1]]
capacity = [20, 19, 17, 26]
upper_bounds = [3, 3, 3, 3]"
53,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08178830146789551}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 2, 5]"
54,knap,4,16,16,1,20,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08125519752502441}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 7, 7]
V = [1, 14, 9, 15]
C = 11"
55,mul,16,9514771375237662064820859284484,31,0,951912648494395615286864,0,"{'ok': True, 'value': 9514771375237662064820859284484, 'stdout': '9514771375237662064820859284484\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0936734676361084}",1,Compute: 3026482928792246 * 3143837781049254
56,sub,32,8168451361527005159785252402331,81684451361526979125736311,0,81684513615269788281592424023331,0,"{'ok': True, 'value': 8168451361527005159785252402331, 'stdout': '8168451361527005159785252402331\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10901165008544922}",1,Compute: 62516919082316242569089684765497 - 54348467720789237409304432363166
57,lcs,16,9,7,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0822916030883789}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdcbacbaddccbba""
T = ""bbcbbdbaabdddabc"""
58,knap,8,108,77,0,79,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08842778205871582}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 1, 10, 8, 7, 3, 5, 8]
V = [14, 29, 21, 1, 17, 27, 9, 22]
C = 27"
59,add,8,73465728,73465728,1,73465728,1,"{'ok': True, 'value': 73465728, 'stdout': '73465728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08069396018981934}",1,Compute: 18000127 + 55465601
60,mul,2,1100,1100,1,1100,1,"{'ok': True, 'value': 1100, 'stdout': '1100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08617639541625977}",1,Compute: 55 * 20
61,knap,4,20,17,0,17,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08714485168457031}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 7, 7, 3]
V = [1, 5, 2, 15]
C = 12"
62,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09162306785583496}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 5, 2]"
63,rod,8,88,48,0,22,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08915448188781738}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [6, 22, 12, 14, 14, 14, 12, 19]"
64,rod,8,88,87,0,88,1,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08380722999572754}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 21, 1, 12, 16, 20, 23, 10]"
65,sub,16,4499466285623176,4499466285623176,1,4499466285623176,1,"{'ok': True, 'value': 4499466285623176, 'stdout': '4499466285623176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08288860321044922}",1,Compute: 7437719688167025 - 2938253402543849
66,lcs,16,10,8,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08998918533325195}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadcbacdbddabccc""
T = ""dadadcdcdacbddcdb"""
67,ilp_assign,8,35,25,0,47,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3924434185028076}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 11, 24, 15, 18, 23], [20, 4, 6, 6, 20, 19, 20], [2, 15, 9, 7, 18, 2, 16], [3, 1, 21, 2, 20, 7, 6], [16, 22, 7, 17, 10, 19, 24], [19, 3, 5, 12, 18, 1, 20], [11, 21, 10, 18, 8, 19, 10]]"
68,mul,32,1640356241120061941031384497370405072047354709210546715153934763,not computable manually,0,16374828292957456339389866693489796289,0,"{'ok': True, 'value': 1640356241120061941031384497370405072047354709210546715153934763, 'stdout': '1640356241120061941031384497370405072047354709210546715153934763\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09130716323852539}",1,Compute: 76303788176467233543193332826173 * 21497703853528498669926631245831
69,mul,2,378,378,1,378,1,"{'ok': True, 'value': 378, 'stdout': '378\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0863656997680664}",1,Compute: 18 * 21
70,sub,32,26258427375640274383334844736913,26258427375640274332034844736913,0,26258427375640274383334844736913,1,"{'ok': True, 'value': 26258427375640274383334844736913, 'stdout': '26258427375640274383334844736913\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07684564590454102}",1,Compute: 84616647653938860794364507119887 - 58358220278298586411029662382974
71,add,32,141802453514639949632791856419449,1,0,141802453514639953072891856419449,0,"{'ok': True, 'value': 141802453514639949632791856419449, 'stdout': '141802453514639949632791856419449\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08278965950012207}",1,Compute: 43973149901225464806169472766927 + 97829303613414484826622383652522
72,ilp_partition,32,0,2,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0269782543182373}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 54, 48, 1, 91, 83, 22, 60, 25, 6, 83, 40, 91, 85, 23, 22, 19, 2, 29, 27, 71, 9, 11, 90]"
73,ilp_prod,4,57,54,0,48,0,"{'ok': True, 'value': 57, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/58c828ec49c949c9a3dbd0fe7f58a3a7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/58c828ec49c949c9a3dbd0fe7f58a3a7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 59.4286 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -52 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 3 rows 3 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -57 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -59.428571 to -57 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 4 column cuts (4 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -57, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -59.4286 to -57\nProbing was tried 3 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                57.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15158939361572266}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 12, 5]
consumption (rows=resources) = [[4, 1, 2], [1, 4, 2], [2, 1, 1]]
capacity = [13, 16, 8]
upper_bounds = [3, 4, 6]"
74,rod,4,40,40,1,25,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08458089828491211}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 6, 2, 5]"
75,lcs,16,10,7,0,8,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07959818840026855}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbaccaadbaddaba""
T = ""bbccaccacacbdad"""
76,ilp_prod,2,14,14,1,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/28d9e154d1b04473850413ca7dcdb022-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/28d9e154d1b04473850413ca7dcdb022-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16747307777404785}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[3, 3], [1, 3]]
capacity = [6, 10]
upper_bounds = [3, 3]"
77,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39583373069763184}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [1, 2]]"
78,add,8,105288746,105288746,1,105288746,1,"{'ok': True, 'value': 105288746, 'stdout': '105288746\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07550454139709473}",1,Compute: 56146884 + 49141862
79,knap,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07335233688354492}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 1]
V = [5, 8, 2]
C = 3"
80,mul,32,428483229011412947799843655282652129188026984166013526453173376,not computable without computational tools,0,42819593565486734828552957456349389824,0,"{'ok': True, 'value': 428483229011412947799843655282652129188026984166013526453173376, 'stdout': '428483229011412947799843655282652129188026984166013526453173376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07010579109191895}",1,Compute: 10895982125618928736390278347712 * 39324883619618974666082074532398
81,knap,8,97,66,0,79,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07101297378540039}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 5, 12, 5, 4, 11, 11, 3]
V = [24, 13, 13, 19, 28, 25, 26, 3]
C = 30"
82,add,2,120,120,1,120,1,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07058095932006836}",1,Compute: 42 + 78
83,ilp_assign,4,14,10,0,16,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3654177188873291}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 8, 7, 1], [8, 12, 1, 9], [7, 8, 4, 7], [4, 5, 8, 8]]"
84,ilp_prod,16,102,126,0,225,0,"{'ok': True, 'value': 102, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0727391e4da1402c8ea1d27df355e6a8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0727391e4da1402c8ea1d27df355e6a8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 108.357 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -102 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -107.71429 to -107.71429 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -102, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -107.714 to -107.714\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                102.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.160109281539917}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 20, 27, 41, 20, 27]
consumption (rows=resources) = [[5, 5, 1, 3, 6, 2], [11, 12, 15, 14, 7, 13], [2, 12, 13, 15, 13, 9], [4, 6, 10, 6, 13, 9]]
capacity = [40, 37, 51, 59]
upper_bounds = [3, 3, 3, 3, 3, 3]"
85,rod,4,48,48,1,18,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07743215560913086}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 5, 6, 1]"
86,rod,16,344,175,0,179,0,"{'ok': True, 'value': 344, 'stdout': '344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07268357276916504}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [8, 43, 3, 14, 17, 15, 8, 41, 34, 15, 46, 13, 33, 19, 28, 19]"
87,lcs,4,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07828783988952637}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""accd""
T = ""caab"""
88,ilp_assign,32,148,120,0,208,0,"{'ok': True, 'value': 148, 'stdout': '148\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3836545944213867}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[88, 2, 15, 27, 12, 51, 4], [19, 48, 88, 38, 32, 5, 16], [42, 30, 27, 34, 75, 51, 80], [89, 45, 90, 69, 29, 29, 16], [77, 76, 79, 72, 20, 38, 80], [77, 58, 46, 48, 95, 83, 58], [30, 47, 88, 95, 91, 44, 49]]"
89,knap,16,422,276,0,346,0,"{'ok': True, 'value': 422, 'stdout': '422\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09366488456726074}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 7, 16, 14, 20, 17, 4, 7, 10, 32, 17, 9, 6, 8, 13, 16]
V = [29, 17, 58, 26, 64, 64, 14, 47, 55, 23, 1, 53, 17, 17, 50, 48]
C = 102"
90,ilp_prod,8,108,-1,0,105,0,"{'ok': True, 'value': 108, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9c654fbe07464d988cffd344b5d3efd3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9c654fbe07464d988cffd344b5d3efd3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 108 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -108 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -108, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -108 to -108\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                108.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16292452812194824}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 19, 7]
consumption (rows=resources) = [[3, 2, 6, 4], [1, 1, 8, 8], [2, 1, 3, 8], [3, 5, 2, 5]]
capacity = [27, 20, 30, 27]
upper_bounds = [9, 5, 3, 3]"
91,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39653778076171875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3], [2, 1]]"
92,knap,32,1777,1059,0,1337,0,"{'ok': True, 'value': 1777, 'stdout': '1777\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09931778907775879}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 33, 22, 5, 16, 49, 23, 22, 63, 15, 37, 25, 35, 18, 46, 27, 17, 30, 8, 29, 49, 8, 34, 58, 62, 41, 48, 62, 61, 14, 40, 13]
V = [65, 12, 30, 16, 13, 17, 119, 84, 123, 88, 121, 75, 114, 84, 5, 107, 102, 13, 35, 123, 53, 75, 66, 49, 124, 92, 90, 126, 107, 48, 26, 105]
C = 505"
93,knap,4,19,15,0,21,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10238838195800781}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 8, 4, 8]
V = [4, 7, 6, 15]
C = 11"
94,ilp_assign,4,9,10,0,12,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39489126205444336}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 10, 9, 2], [5, 2, 12, 2], [5, 1, 12, 3], [10, 11, 3, 7]]"
95,rod,8,84,30,0,57,0,"{'ok': True, 'value': 84, 'stdout': '84\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08313322067260742}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 21, 4, 8, 12, 24, 16, 15]"
96,lcs,32,19,14,0,14,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07842707633972168}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbacabdcbddabdbadcdacdaccabcbcd""
T = ""dcadabbaabdabdbabcbdbaadbcaaddcd"""
97,rod,16,168,175,0,150,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08001947402954102}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [10, 15, 15, 42, 40, 27, 39, 33, 12, 10, 43, 4, 48, 16, 7, 38]"
98,ilp_assign,2,4,4,1,7,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39722299575805664}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 3], [1, 5]]"
99,ilp_assign,8,44,23,0,57,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36449289321899414}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5, 4, 2, 20, 18, 3], [19, 24, 20, 14, 15, 21, 15], [13, 1, 24, 20, 21, 17, 21], [11, 23, 17, 7, 5, 20, 10], [18, 10, 22, 13, 20, 17, 2], [15, 19, 19, 8, 13, 9, 18], [22, 10, 24, 4, 11, 19, 23]]"
100,knap,16,478,309,0,329,0,"{'ok': True, 'value': 478, 'stdout': '478\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08124160766601562}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 4, 20, 31, 24, 31, 9, 15, 4, 29, 16, 16, 15, 3, 19, 8]
V = [50, 44, 54, 45, 19, 50, 59, 17, 54, 21, 30, 5, 48, 60, 59, 15]
C = 137"
101,mul,2,7650,7650,1,7650,1,"{'ok': True, 'value': 7650, 'stdout': '7650\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09139108657836914}",1,Compute: 85 * 90
102,ilp_assign,8,36,29,0,47,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3992588520050049}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 5, 5, 19, 7, 21, 12], [12, 4, 4, 13, 16, 5, 11], [19, 17, 7, 20, 8, 20, 19], [15, 20, 10, 4, 5, 14, 4], [24, 7, 23, 5, 6, 23, 9], [9, 22, 11, 6, 15, 23, 11], [18, 4, 3, 13, 1, 2, 7]]"
103,add,16,6243867234091392,6243867234091392,1,6243867234091392,1,"{'ok': True, 'value': 6243867234091392, 'stdout': '6243867234091392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08567070960998535}",1,Compute: 3768167450808919 + 2475699783282473
104,ilp_assign,16,73,42,0,102,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3997523784637451}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 6, 33, 38, 18, 2, 9], [4, 5, 36, 22, 5, 38, 47], [18, 10, 23, 41, 38, 42, 16], [39, 1, 28, 35, 22, 28, 48], [26, 44, 25, 30, 44, 8, 34], [1, 29, 17, 44, 8, 23, 5], [32, 22, 34, 26, 25, 7, 35]]"
105,sub,8,50908484,50908484,1,50908484,1,"{'ok': True, 'value': 50908484, 'stdout': '50908484\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08005404472351074}",1,Compute: 95517595 - 44609111
106,ilp_assign,4,7,7,1,9,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38683056831359863}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5, 3, 6], [2, 3, 11, 1], [11, 3, 10, 9], [4, 1, 1, 7]]"
107,mul,4,3080083,3079083,0,3079463,0,"{'ok': True, 'value': 3080083, 'stdout': '3080083\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0919947624206543}",1,Compute: 2903 * 1061
108,lcs,32,18,15,0,12,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0808858871459961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caddcbaccacdadabbbbcdbddccbcccba""
T = ""ddbbcabcbcbdbbdadacacacaacddbac"""
109,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07989335060119629}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacccabb""
T = ""addcbccd"""
110,ilp_prod,16,363,297,0,297,0,"{'ok': True, 'value': 363, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3973a18dba24434b80ba045ef42ea5c0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3973a18dba24434b80ba045ef42ea5c0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 393.295 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -351 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -363 found by DiveCoefficient after 290 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 5\nCbc0013I At root node, 3 cuts changed objective from -393.29474 to -372.75494 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 239 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 56 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0010I After 0 nodes, 1 on tree, -363 best solution, best possible -372.75494 (0.01 seconds)\nCbc0001I Search completed - best objective -363, took 337 iterations and 6 nodes (0.02 seconds)\nCbc0032I Strong branching done 14 times (28 iterations), fathomed 0 nodes and fixed 0 variables\nCbc0035I Maximum depth 1, 0 variables fixed on reduced cost\nCuts at root node changed objective from -393.295 to -372.755\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 113 times and created 257 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 113 times and created 75 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                363.00000000\nEnumerated nodes:               6\nTotal iterations:               337\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1786353588104248}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [43, 48, 39, 21, 39, 36]
consumption (rows=resources) = [[3, 2, 3, 10, 6, 9], [8, 3, 4, 7, 2, 10], [14, 9, 3, 2, 1, 5], [8, 3, 14, 5, 12, 3]]
capacity = [45, 46, 62, 37]
upper_bounds = [4, 6, 3, 4, 3, 4]"
111,add,32,41633636576856997500898443832254,2,0,41633636576856997490898443832254,0,"{'ok': True, 'value': 41633636576856997500898443832254, 'stdout': '41633636576856997500898443832254\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08107948303222656}",1,Compute: 12842473472303414570776368778170 + 28791163104553582930122075054084
112,add,2,60,60,1,60,1,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09178304672241211}",1,Compute: 43 + 17
113,add,8,155124327,155124327,1,155124327,1,"{'ok': True, 'value': 155124327, 'stdout': '155124327\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08490991592407227}",1,Compute: 80774895 + 74349432
114,rod,2,4,2,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10642194747924805}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 1]"
115,add,32,94627045315906235114510329471178,94627045315896235114510333471178,0,94627045315906235114510329471178,1,"{'ok': True, 'value': 94627045315906235114510329471178, 'stdout': '94627045315906235114510329471178\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08632946014404297}",1,Compute: 68030648039426894416215489087323 + 26596397276479340698294840383855
116,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08635449409484863}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbabdaa""
T = ""dbcddadbb"""
117,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10025858879089355}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 2, 3]"
118,ilp_assign,16,78,45,0,104,0,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37407445907592773}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 28, 28, 18, 19, 9, 2], [16, 9, 40, 32, 14, 36, 36], [43, 32, 32, 4, 40, 43, 36], [31, 3, 2, 45, 47, 40, 7], [44, 15, 37, 5, 35, 16, 10], [28, 37, 43, 42, 47, 20, 10], [41, 42, 14, 17, 40, 37, 30]]"
119,rod,32,1408,320,0,322,0,"{'ok': True, 'value': 1408, 'stdout': '1408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07092070579528809}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [44, 40, 45, 81, 20, 56, 35, 53, 71, 22, 24, 53, 79, 87, 8, 60, 87, 30, 88, 40, 80, 86, 39, 17, 27, 15, 52, 26, 10, 55, 82, 36]"
120,add,16,7892037659053040,7893526593052990,0,7892037659053040,1,"{'ok': True, 'value': 7892037659053040, 'stdout': '7892037659053040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06936168670654297}",1,Compute: 3061712297550381 + 4830325361502659
121,ilp_partition,32,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09204888343811035}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [52, 24, 42, 73, 92, 50, 26, 46, 82, 48, 6, 61, 25, 67, 35, 8, 13, 8, 34, 11, 37, 68, 54, 51]"
122,ilp_prod,8,88,86,0,102,0,"{'ok': True, 'value': 88, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/165513ae12204e9fa9bc3d2d9de8fc84-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/165513ae12204e9fa9bc3d2d9de8fc84-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 91.3846 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 1.9999\nCbc0012I Integer solution of -88 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 2 cuts changed objective from -91.384615 to -88 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -88, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -91.3846 to -88\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                88.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15882110595703125}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6, 18, 18]
consumption (rows=resources) = [[3, 5, 5, 3], [1, 3, 6, 6], [4, 2, 8, 3], [5, 6, 4, 2]]
capacity = [23, 27, 28, 19]
upper_bounds = [3, 3, 3, 4]"
123,mul,2,2496,2496,1,2496,1,"{'ok': True, 'value': 2496, 'stdout': '2496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07917118072509766}",1,Compute: 96 * 26
124,ilp_partition,32,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08635449409484863}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [87, 86, 45, 34, 16, 21, 22, 39, 31, 65, 80, 6, 93, 52, 69, 16, 91, 48, 82, 19, 23, 45, 76, 67]"
125,sub,32,33139416617258066350162831128645,33139416617258066390161831138645,0,33139416617258066350162831128645,1,"{'ok': True, 'value': 33139416617258066350162831128645, 'stdout': '33139416617258066350162831128645\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07201385498046875}",1,Compute: 73754487146973364916414052101116 - 40615070529715298566251220972471
126,sub,2,32,32,1,32,1,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07115769386291504}",1,Compute: 80 - 48
127,knap,8,99,79,0,88,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07125091552734375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 10, 13, 11, 10, 3, 4, 16]
V = [24, 6, 15, 9, 27, 16, 2, 32]
C = 38"
128,sub,16,38828317808646,388283296546,0,38828317908646,0,"{'ok': True, 'value': 38828317808646, 'stdout': '38828317808646\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08000397682189941}",1,Compute: 2831072795134495 - 2792244477325849
129,sub,2,45,45,1,45,1,"{'ok': True, 'value': 45, 'stdout': '45\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0783529281616211}",1,Compute: 66 - 21
130,ilp_assign,8,27,16,0,49,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37931299209594727}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 23, 17, 9, 15, 15, 4], [19, 10, 11, 23, 3, 23, 14], [11, 24, 1, 4, 23, 11, 19], [4, 18, 7, 19, 22, 22, 1], [1, 1, 10, 24, 15, 4, 17], [22, 1, 16, 24, 8, 9, 17], [10, 9, 7, 24, 13, 20, 15]]"
131,knap,16,476,357,0,413,0,"{'ok': True, 'value': 476, 'stdout': '476\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07145285606384277}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 23, 2, 31, 28, 15, 4, 20, 13, 14, 8, 26, 8, 4, 17, 21]
V = [44, 7, 58, 20, 3, 53, 33, 62, 35, 29, 38, 21, 32, 26, 63, 32]
C = 117"
132,sub,8,55903071,55903071,1,55903071,1,"{'ok': True, 'value': 55903071, 'stdout': '55903071\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08406805992126465}",1,Compute: 79887300 - 23984229
133,mul,2,5292,5292,1,5292,1,"{'ok': True, 'value': 5292, 'stdout': '5292\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07507538795471191}",1,Compute: 63 * 84
134,ilp_partition,32,0,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0424041748046875}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 68, 72, 48, 45, 42, 47, 50, 71, 88, 28, 89, 19, 86, 96, 56, 59, 63, 60, 64, 65, 82, 43, 78]"
135,sub,16,2944799055948094,2944800055948094,0,2944798055948094,0,"{'ok': True, 'value': 2944799055948094, 'stdout': '2944799055948094\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11065053939819336}",1,Compute: 9281341088614123 - 6336542032666029
136,ilp_partition,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07443809509277344}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 10, 6, 5]"
137,add,4,7809,7809,1,7809,1,"{'ok': True, 'value': 7809, 'stdout': '7809\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07875847816467285}",1,Compute: 2671 + 5138
138,mul,8,1419558719762050,141999999999900,0,1419885566833570,0,"{'ok': True, 'value': 1419558719762050, 'stdout': '1419558719762050\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08365583419799805}",1,Compute: 52108825 * 27242194
139,ilp_partition,16,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10421037673950195}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 44, 48, 1, 2, 1, 16, 24, 13, 5, 14, 3, 14, 42, 39, 38]"
140,ilp_assign,2,7,7,1,6,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4015848636627197}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [6, 3]]"
141,ilp_prod,2,18,16,0,20,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9bacdd1f3e6741bca9cac813aa296e63-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9bacdd1f3e6741bca9cac813aa296e63-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 1.9999\nCbc0012I Integer solution of -16 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -18 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -20 to -18 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -18, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -20 to -18\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1457991600036621}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6]
consumption (rows=resources) = [[2, 3], [3, 1]]
capacity = [10, 7]
upper_bounds = [3, 3]"
142,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08139705657958984}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""bd"""
143,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08279013633728027}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbda""
T = ""acddc"""
144,add,32,74168401231896843584343261022800,74168398331906843584343360982700,0,74168391231902843584343260992799,0,"{'ok': True, 'value': 74168401231896843584343261022800, 'stdout': '74168401231896843584343261022800\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0854191780090332}",1,Compute: 50100575797921377219785391253456 + 24067825433975466364557869769344
145,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0789785385131836}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daba""
T = ""cab"""
146,ilp_assign,2,8,8,1,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41550230979919434}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [6, 4]]"
147,knap,32,1689,1000,0,1026,0,"{'ok': True, 'value': 1689, 'stdout': '1689\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09872198104858398}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [59, 42, 43, 2, 25, 31, 50, 22, 17, 51, 5, 7, 52, 33, 60, 31, 7, 53, 53, 57, 8, 50, 28, 53, 54, 3, 63, 29, 17, 11, 10, 9]
V = [92, 18, 11, 21, 48, 80, 37, 122, 62, 53, 59, 83, 93, 20, 65, 128, 29, 32, 32, 101, 64, 80, 48, 72, 122, 110, 54, 127, 113, 98, 1, 38]
C = 517"
148,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0950918197631836}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""bcb"""
149,ilp_prod,32,391,0,0,497,0,"{'ok': True, 'value': 391, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ba647c1719a44792a0081f90e917caab-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ba647c1719a44792a0081f90e917caab-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 410.337 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -344 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 1 rows 2 columns\nCbc0031I 4 added rows had average density of 4.75\nCbc0013I At root node, 4 cuts changed objective from -410.33684 to -391.00004 in 12 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 32 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 22 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -344 best solution, best possible -391.00004 (0.00 seconds)\nCbc0012I Integer solution of -365 found by rounding after 32 iterations and 2 nodes (0.00 seconds)\nCbc0012I Integer solution of -385 found by DiveCoefficient after 32 iterations and 2 nodes (0.00 seconds)\nCbc0016I Integer solution of -391 found by strong branching after 34 iterations and 2 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -391, took 34 iterations and 2 nodes (0.00 seconds)\nCbc0032I Strong branching done 18 times (30 iterations), fathomed 1 nodes and fixed 0 variables\nCbc0035I Maximum depth 1, 1 variables fixed on reduced cost\nCuts at root node changed objective from -410.337 to -391\nProbing was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 14 times and created 32 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 14 times and created 22 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                391.00000000\nEnumerated nodes:               2\nTotal iterations:               34\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n391\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1831986904144287}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [65, 6, 83, 67, 93, 18]
consumption (rows=resources) = [[27, 2, 24, 20, 22, 27], [4, 4, 20, 10, 18, 32], [22, 14, 15, 3, 1, 23], [10, 29, 27, 14, 10, 26]]
capacity = [118, 64, 93, 117]
upper_bounds = [4, 4, 3, 5, 3, 3]"
150,ilp_assign,32,108,100,0,192,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3949153423309326}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[42, 52, 40, 24, 14, 44, 60], [25, 17, 60, 61, 69, 32, 83], [37, 9, 85, 8, 41, 90, 41], [80, 30, 4, 24, 90, 61, 93], [83, 42, 87, 70, 58, 32, 45], [12, 38, 14, 80, 38, 14, 20], [68, 78, 94, 75, 2, 63, 21]]"
151,knap,32,1601,1059,0,1451,0,"{'ok': True, 'value': 1601, 'stdout': '1601\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08901691436767578}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 61, 11, 40, 64, 22, 22, 41, 38, 43, 40, 25, 30, 52, 20, 30, 15, 1, 9, 11, 11, 23, 64, 34, 6, 17, 54, 17, 11, 39, 34, 62]
V = [52, 22, 30, 97, 25, 69, 38, 52, 105, 63, 54, 28, 119, 53, 54, 19, 102, 108, 23, 94, 17, 101, 7, 42, 33, 21, 6, 97, 128, 107, 82, 39]
C = 478"
152,mul,4,15575056,54,0,15579856,0,"{'ok': True, 'value': 15575056, 'stdout': '15575056\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08067488670349121}",1,Compute: 4714 * 3304
153,rod,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06843256950378418}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
154,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08629965782165527}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 2, 2]"
155,sub,2,16,16,1,16,1,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08544611930847168}",1,Compute: 34 - 18
156,ilp_assign,32,125,101,0,139,0,"{'ok': True, 'value': 125, 'stdout': '125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3822062015533447}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 39, 48, 80, 44, 25, 32], [19, 35, 73, 75, 54, 9, 9], [52, 24, 91, 57, 34, 91, 92], [5, 71, 41, 2, 60, 8, 2], [45, 48, 7, 33, 17, 34, 13], [35, 34, 42, 86, 49, 57, 19], [43, 30, 19, 84, 76, 67, 39]]"
157,ilp_assign,16,63,0,0,77,0,"{'ok': True, 'value': 63, 'stdout': '63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3931746482849121}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 45, 42, 48, 4, 46, 31], [9, 13, 28, 10, 41, 3, 14], [11, 36, 46, 2, 14, 5, 10], [35, 1, 13, 26, 41, 48, 46], [36, 43, 47, 47, 31, 45, 40], [1, 46, 30, 34, 26, 18, 2], [29, 46, 47, 12, 32, 13, 5]]"
158,add,16,12960286218828775,12960286213828775,0,12959286218828775,0,"{'ok': True, 'value': 12960286218828775, 'stdout': '12960286218828775\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07304048538208008}",1,Compute: 5743620449442913 + 7216665769385862
159,add,2,127,127,1,127,1,"{'ok': True, 'value': 127, 'stdout': '127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06997489929199219}",1,Compute: 91 + 36
160,ilp_assign,4,13,7,0,10,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36258792877197266}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 8, 6, 7], [4, 7, 1, 10], [1, 7, 2, 5], [4, 12, 6, 3]]"
161,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0925145149230957}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 10, 8, 5]"
162,ilp_prod,2,18,18,1,36,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ecbdb0c80801473a8e04fb26a84f0b2d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ecbdb0c80801473a8e04fb26a84f0b2d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1621406078338623}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[1, 1], [3, 3]]
capacity = [9, 10]
upper_bounds = [3, 3]"
163,ilp_partition,16,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09477877616882324}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 28, 44, 23, 6, 1, 41, 31, 45, 48, 2, 16, 5, 42, 19, 44]"
164,lcs,16,10,8,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08065366744995117}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbddabbabdddcba""
T = ""dbdbacddddcbacbcc"""
165,ilp_partition,16,0,4,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10075855255126953}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [27, 21, 46, 19, 42, 21, 37, 36, 8, 44, 16, 13, 26, 27, 10, 39]"
166,lcs,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0798482894897461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcd""
T = ""cca"""
167,ilp_prod,16,141,0,0,228,0,"{'ok': True, 'value': 141, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2298d9b292774cac9d2c5b8ab43a5dce-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2298d9b292774cac9d2c5b8ab43a5dce-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 156 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 2.9999\nCbc0012I Integer solution of -126 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -141 found by DiveCoefficient after 7 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3.3333333\nCbc0013I At root node, 3 cuts changed objective from -156 to -141 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 3.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 5.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 10 row cuts average 4.6 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -141, took 7 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -156 to -141\nProbing was tried 4 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 10 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                141.00000000\nEnumerated nodes:               0\nTotal iterations:               7\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n141\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19109606742858887}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [27, 15, 6, 36, 42, 42]
consumption (rows=resources) = [[14, 16, 5, 14, 3, 6], [6, 11, 6, 14, 12, 14], [14, 10, 7, 13, 14, 14], [8, 15, 3, 1, 16, 2]]
capacity = [52, 53, 52, 62]
upper_bounds = [3, 3, 7, 3, 3, 3]"
168,lcs,8,4,3,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07929754257202148}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaccbdb""
T = ""bbdbdbaa"""
169,lcs,32,19,19,1,15,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07553219795227051}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbcccdbcbdabbbccadbccdbbaadacca""
T = ""dddbdcbdcccacbacbdaabbdbbadbbdb"""
170,rod,16,624,225,0,195,0,"{'ok': True, 'value': 624, 'stdout': '624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07179617881774902}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [39, 39, 16, 30, 41, 27, 36, 21, 36, 15, 3, 2, 18, 40, 26, 45]"
171,add,4,15775,15775,1,15775,1,"{'ok': True, 'value': 15775, 'stdout': '15775\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0710134506225586}",1,Compute: 7491 + 8284
172,ilp_prod,16,192,300,0,288,0,"{'ok': True, 'value': 192, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cc7a1acba8b842beb6a54c50a295ba85-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cc7a1acba8b842beb6a54c50a295ba85-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 200 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -192 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -200 to -200 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -192, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -200 to -200\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                192.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16492462158203125}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 48, 12, 48, 17, 33]
consumption (rows=resources) = [[14, 10, 12, 6, 9, 10], [13, 12, 8, 8, 7, 14], [5, 13, 10, 7, 6, 2], [11, 11, 2, 10, 7, 16]]
capacity = [40, 34, 42, 45]
upper_bounds = [3, 3, 3, 4, 4, 3]"
173,ilp_prod,8,69,70,0,107,0,"{'ok': True, 'value': 69, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f355cb4911314754aaa928250b323402-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f355cb4911314754aaa928250b323402-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 78.2 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -69 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -78.2 to -69 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -69, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -78.2 to -69\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                69.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16097092628479004}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 16, 15, 23]
consumption (rows=resources) = [[4, 5, 8, 7], [1, 7, 5, 8], [3, 7, 7, 7], [5, 8, 6, 5]]
capacity = [29, 21, 27, 17]
upper_bounds = [3, 3, 3, 3]"
174,sub,8,42812889,42812889,1,42812889,1,"{'ok': True, 'value': 42812889, 'stdout': '42812889\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08584904670715332}",1,Compute: 86571778 - 43758889
175,mul,4,33600560,33600560,1,33592560,0,"{'ok': True, 'value': 33600560, 'stdout': '33600560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09079551696777344}",1,Compute: 4060 * 8276
176,ilp_assign,8,53,28,0,59,0,"{'ok': True, 'value': 53, 'stdout': '53\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40041232109069824}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 23, 7, 17, 10, 24, 3], [4, 17, 14, 22, 18, 12, 6], [5, 4, 10, 24, 24, 10, 6], [16, 10, 8, 18, 19, 23, 8], [3, 16, 7, 12, 14, 9, 11], [4, 5, 15, 21, 12, 17, 5], [3, 15, 13, 16, 11, 20, 10]]"
177,ilp_partition,32,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09301114082336426}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [87, 40, 32, 9, 61, 64, 2, 93, 38, 21, 3, 64, 69, 14, 20, 52, 39, 78, 30, 90, 62, 48, 73, 52]"
178,ilp_partition,4,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08855199813842773}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 3, 8, 5]"
179,mul,4,23622644,23622644,1,23549744,0,"{'ok': True, 'value': 23622644, 'stdout': '23622644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08385634422302246}",1,Compute: 5717 * 4132
180,ilp_prod,2,21,22,0,21,1,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/765853136fc440e4b1e64d39cec20325-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/765853136fc440e4b1e64d39cec20325-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 1 rows, 2 columns (2 integer (0 of which binary)) and 2 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -21 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -21, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -21 to -21\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1490933895111084}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7]
consumption (rows=resources) = [[1, 2], [3, 2]]
capacity = [9, 6]
upper_bounds = [3, 3]"
181,ilp_partition,8,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07309722900390625}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 13, 10, 20, 23, 7, 14, 1]"
182,ilp_assign,32,71,110,0,126,0,"{'ok': True, 'value': 71, 'stdout': '71\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3677675724029541}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[85, 7, 26, 35, 53, 34, 94], [5, 43, 29, 59, 12, 81, 58], [16, 71, 43, 74, 27, 19, 9], [44, 6, 36, 76, 5, 89, 9], [1, 81, 26, 26, 14, 17, 93], [11, 79, 8, 74, 73, 61, 2], [69, 14, 54, 60, 57, 11, 52]]"
183,lcs,32,21,15,0,15,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.071533203125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbabacabbddcadaddaabddcbdcbaadac""
T = ""bbdbbadbbbdcaadadcccabcacabdaaaca"""
184,rod,2,6,3,0,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07070207595825195}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 1]"
185,sub,32,12835601013190631365395630825916,12835600992214631365395631821916,0,12835600913180631365415630921916,0,"{'ok': True, 'value': 12835601013190631365395630825916, 'stdout': '12835601013190631365395630825916\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08926844596862793}",1,Compute: 88224498181327731976047656786206 - 75388897168137100610652025960290
186,rod,2,8,4,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08676505088806152}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
187,knap,16,364,293,0,375,0,"{'ok': True, 'value': 364, 'stdout': '364\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0819246768951416}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [20, 26, 7, 25, 27, 22, 14, 16, 11, 29, 25, 21, 29, 10, 7, 19]
V = [58, 15, 18, 39, 32, 44, 53, 43, 9, 47, 64, 2, 15, 19, 18, 33]
C = 154"
188,ilp_assign,32,91,101,0,108,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39902520179748535}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[86, 5, 31, 15, 15, 12, 18], [12, 25, 70, 40, 80, 73, 86], [64, 74, 23, 79, 76, 35, 24], [26, 3, 90, 43, 90, 73, 86], [26, 60, 46, 9, 61, 59, 47], [5, 68, 25, 10, 28, 95, 62], [95, 21, 15, 91, 58, 66, 4]]"
189,ilp_partition,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08836746215820312}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 7, 7, 12]"
190,ilp_partition,16,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11693525314331055}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 40, 38, 27, 46, 2, 21, 12, 26, 47, 45, 34, 46, 20, 3, 45]"
191,knap,2,8,9,0,9,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09202957153320312}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 3]
V = [8, 1, 7]
C = 5"
192,ilp_partition,32,1,9,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09496641159057617}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 36, 38, 89, 65, 5, 60, 23, 48, 12, 96, 25, 78, 65, 21, 47, 16, 64, 87, 63, 13, 65, 83, 9]"
193,add,8,56952892,56928922,0,56952892,1,"{'ok': True, 'value': 56952892, 'stdout': '56952892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09614968299865723}",1,Compute: 27928755 + 29024137
194,add,32,143460581671707206919222194465984,143460581671711206916422694465984,0,143460581661697206918672194465984,0,"{'ok': True, 'value': 143460581671707206919222194465984, 'stdout': '143460581671707206919222194465984\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07343196868896484}",1,Compute: 70360507656466400176425046319352 + 73100074015240806742797148146632
195,add,4,14715,14715,1,14715,1,"{'ok': True, 'value': 14715, 'stdout': '14715\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09075093269348145}",1,Compute: 4807 + 9908
196,sub,32,15209145105557164237839535479698,15209145105557164243839535534798,0,15209145105557164222839535479698,0,"{'ok': True, 'value': 15209145105557164237839535479698, 'stdout': '15209145105557164237839535479698\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10320138931274414}",1,Compute: 96299465898166092554739735652451 - 81090320792608928316900200172753
197,ilp_partition,2,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09048080444335938}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 4, 5]"
198,lcs,16,9,6,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07823562622070312}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbacdacbdbdadbc""
T = ""ccadacddcbbcddcbb"""
199,ilp_prod,16,168,228,0,209,0,"{'ok': True, 'value': 168, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2a7e00e401874b7d99b947ab06a4ba2a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2a7e00e401874b7d99b947ab06a4ba2a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 171.967 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -141 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -168 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 4.5\nCbc0013I At root node, 2 cuts changed objective from -171.96667 to -168 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 3.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -168, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -171.967 to -168\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                168.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17481207847595215}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 7, 9, 34, 41]
consumption (rows=resources) = [[4, 3, 7, 13, 11, 9], [2, 16, 11, 4, 11, 9], [1, 9, 2, 2, 13, 12], [1, 16, 12, 6, 8, 6]]
capacity = [64, 42, 49, 60]
upper_bounds = [10, 3, 3, 4, 3, 4]"
200,ilp_assign,8,33,24,0,39,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4025280475616455}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 13, 13, 10, 6, 13, 1], [22, 11, 21, 14, 17, 7, 17], [12, 20, 8, 22, 2, 14, 16], [17, 21, 2, 7, 11, 15, 24], [6, 19, 7, 7, 2, 7, 4], [10, 11, 11, 24, 10, 5, 6], [19, 24, 14, 9, 2, 13, 4]]"
201,rod,16,256,175,0,46,0,"{'ok': True, 'value': 256, 'stdout': '256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08223104476928711}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [11, 32, 38, 34, 30, 35, 45, 34, 12, 1, 46, 7, 2, 31, 10, 14]"
202,ilp_assign,8,47,20,0,43,0,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37134528160095215}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 16, 6, 13, 8, 14, 13], [5, 18, 21, 15, 20, 23, 12], [2, 21, 20, 17, 8, 7, 17], [13, 16, 8, 19, 24, 3, 18], [4, 5, 6, 10, 1, 11, 4], [5, 20, 21, 17, 20, 6, 18], [14, 9, 1, 12, 5, 2, 17]]"
203,sub,4,2356,2356,1,2356,1,"{'ok': True, 'value': 2356, 'stdout': '2356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08293771743774414}",1,Compute: 8274 - 5918
204,ilp_assign,16,96,65,0,105,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3780808448791504}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 44, 37, 46, 33, 25, 11], [25, 30, 3, 17, 30, 24, 41], [20, 25, 40, 28, 34, 5, 27], [31, 48, 20, 16, 2, 27, 19], [39, 29, 37, 38, 31, 25, 44], [22, 47, 23, 39, 9, 23, 20], [37, 30, 10, 34, 14, 20, 6]]"
205,ilp_partition,16,0,8,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13816046714782715}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 48, 47, 47, 14, 20, 1, 8, 24, 34, 15, 37, 2, 25, 3, 9]"
206,rod,16,384,135,0,119,0,"{'ok': True, 'value': 384, 'stdout': '384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08991646766662598}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [24, 38, 6, 21, 42, 25, 8, 33, 21, 4, 5, 4, 19, 20, 46, 3]"
207,ilp_prod,2,18,17,0,18,1,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0fa88595a3614c93aad3da053a6eede9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0fa88595a3614c93aad3da053a6eede9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -18 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -18, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -18 to -18\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15621590614318848}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[1, 3], [2, 2]]
capacity = [9, 6]
upper_bounds = [3, 3]"
208,ilp_assign,8,35,24,0,53,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39952874183654785}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 21, 21, 23, 21, 10, 1], [3, 15, 9, 21, 13, 7, 6], [24, 15, 1, 6, 1, 6, 19], [22, 2, 3, 12, 2, 22, 8], [8, 16, 9, 10, 19, 12, 24], [21, 18, 11, 21, 23, 16, 20], [17, 2, 8, 5, 24, 7, 8]]"
209,sub,2,44,44,1,44,1,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08169913291931152}",1,Compute: 82 - 38
210,ilp_assign,16,74,39,0,100,0,"{'ok': True, 'value': 74, 'stdout': '74\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4133338928222656}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 47, 1, 24, 46, 8, 25], [23, 39, 32, 31, 46, 24, 36], [10, 11, 2, 26, 38, 16, 7], [9, 13, 20, 18, 30, 39, 47], [17, 15, 20, 4, 34, 10, 15], [39, 23, 22, 43, 37, 13, 31], [8, 41, 32, 17, 13, 26, 27]]"
211,ilp_partition,8,0,5,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07903480529785156}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 12, 19, 9, 5, 7, 17, 6]"
212,lcs,32,18,12,0,10,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08330035209655762}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbcccadadbcbbbbabccaadccaadabad""
T = ""bbddcdddabcaaddcdcbcbdadabbaddccd"""
213,sub,4,2676,2676,1,2676,1,"{'ok': True, 'value': 2676, 'stdout': '2676\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08353924751281738}",1,Compute: 4534 - 1858
214,knap,2,9,5,0,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0777130126953125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 1]
V = [1, 4, 5]
C = 2"
215,add,4,7088,6088,0,7088,1,"{'ok': True, 'value': 7088, 'stdout': '7088\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07252717018127441}",1,Compute: 5424 + 1664
216,lcs,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07714104652404785}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcac""
T = ""ddad"""
217,add,2,120,120,1,120,1,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08906888961791992}",1,Compute: 55 + 65
218,sub,4,5779,5779,1,5779,1,"{'ok': True, 'value': 5779, 'stdout': '5779\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08952999114990234}",1,Compute: 9118 - 3339
219,lcs,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09328460693359375}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdcd""
T = ""baca"""
220,mul,2,4620,4620,1,4620,1,"{'ok': True, 'value': 4620, 'stdout': '4620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07992815971374512}",1,Compute: 60 * 77
221,mul,4,49533120,49603600,0,49354720,0,"{'ok': True, 'value': 49533120, 'stdout': '49533120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06980538368225098}",1,Compute: 6720 * 7371
222,add,4,12440,12440,1,12440,1,"{'ok': True, 'value': 12440, 'stdout': '12440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07726597785949707}",1,Compute: 6797 + 5643
223,ilp_prod,2,16,14,0,22,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/88104e6f450e4bd3a7552bfbc33cee7f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/88104e6f450e4bd3a7552bfbc33cee7f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 1.9999\nCbc0012I Integer solution of -16 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -16, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -16 to -16\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.156036376953125}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[3, 1], [3, 3]]
capacity = [7, 6]
upper_bounds = [3, 3]"
224,mul,4,7887990,7887990,1,7879490,0,"{'ok': True, 'value': 7887990, 'stdout': '7887990\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08227872848510742}",1,Compute: 4346 * 1815
225,mul,4,34542158,34515158,0,34509758,0,"{'ok': True, 'value': 34542158, 'stdout': '34542158\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08199191093444824}",1,Compute: 4214 * 8197
226,knap,4,14,14,1,14,1,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08023548126220703}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 6, 4, 3]
V = [8, 1, 6, 6]
C = 7"
227,ilp_prod,2,16,16,1,20,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/09409f7ec62e464ab25d91dc5d2f89eb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/09409f7ec62e464ab25d91dc5d2f89eb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 3.9999\nCbc0012I Integer solution of -16 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -16, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -16 to -16\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16220974922180176}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4]
consumption (rows=resources) = [[2, 3], [3, 2]]
capacity = [8, 6]
upper_bounds = [3, 3]"
228,sub,16,2119438012622778,2119438012620778,0,2119438012622778,1,"{'ok': True, 'value': 2119438012622778, 'stdout': '2119438012622778\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07465100288391113}",1,Compute: 4047963086170812 - 1928525073548034
229,mul,2,4270,4270,1,4270,1,"{'ok': True, 'value': 4270, 'stdout': '4270\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07225227355957031}",1,Compute: 61 * 70
230,ilp_prod,2,12,12,1,18,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6cc2645a8d6d4b17870071266a85ae23-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6cc2645a8d6d4b17870071266a85ae23-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15.4286 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 5.9999\nCbc0012I Integer solution of -6 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -12 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -15.428571 to -12 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -12, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -15.4286 to -12\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15600013732910156}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[2, 3], [3, 1]]
capacity = [6, 6]
upper_bounds = [3, 3]"
231,ilp_partition,2,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09897184371948242}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 4, 2]"
232,ilp_partition,4,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08194589614868164}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 10, 10, 7]"
233,ilp_partition,8,0,2,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07271885871887207}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 15, 20, 14, 22, 19, 23, 8]"
234,lcs,16,11,7,0,7,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0740964412689209}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddcacaaddabaada""
T = ""bdcdaabbbdbdbaad"""
235,lcs,32,20,12,0,12,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0855715274810791}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adaaadbdabcdcbcdaaadcbaadddccbba""
T = ""bbcacddbabdacdcbbadbbacbdcbabcbba"""
236,add,2,109,109,1,109,1,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08208346366882324}",1,Compute: 61 + 48
237,knap,32,1585,1019,0,1029,0,"{'ok': True, 'value': 1585, 'stdout': '1585\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09091401100158691}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [51, 49, 13, 15, 55, 12, 30, 19, 49, 28, 3, 35, 10, 18, 37, 35, 21, 5, 10, 49, 32, 9, 27, 50, 57, 3, 4, 49, 34, 28, 9, 14]
V = [66, 26, 119, 111, 84, 54, 98, 85, 9, 111, 2, 109, 3, 14, 3, 59, 74, 55, 5, 80, 29, 58, 109, 63, 78, 95, 127, 102, 93, 4, 8, 19]
C = 430"
238,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08280754089355469}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 4, 6]"
239,rod,16,148,105,0,193,0,"{'ok': True, 'value': 148, 'stdout': '148\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08561992645263672}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 3, 21, 37, 9, 48, 4, 20, 38, 17, 39, 47, 15, 42, 34, 21]"
240,mul,32,690690362341860718174526583432138090399470015953741350777287238,not computable without computational tools,0,68918866569462338878959465935796867340282229574400,0,"{'ok': True, 'value': 690690362341860718174526583432138090399470015953741350777287238, 'stdout': '690690362341860718174526583432138090399470015953741350777287238\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.090667724609375}",1,Compute: 11210773322109667575301150627947 * 61609519923098856454524645302354
241,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07734847068786621}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 12, 1]"
242,mul,2,9108,9108,1,9108,1,"{'ok': True, 'value': 9108, 'stdout': '9108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08618712425231934}",1,Compute: 92 * 99
243,rod,8,80,57,0,78,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07322049140930176}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 18, 4, 17, 10, 3, 4, 18]"
244,sub,4,1320,1320,1,1320,1,"{'ok': True, 'value': 1320, 'stdout': '1320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07252764701843262}",1,Compute: 8725 - 7405
245,ilp_prod,16,144,2,0,192,0,"{'ok': True, 'value': 144, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3775ffc9d245443ba1fcf339d59e4136-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3775ffc9d245443ba1fcf339d59e4136-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 144 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -144 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -144, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -144 to -144\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                144.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n144\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.155564546585083}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 32, 9, 48, 12, 24]
consumption (rows=resources) = [[2, 4, 10, 10, 9, 6], [7, 13, 16, 1, 9, 13], [4, 10, 12, 13, 10, 10], [3, 15, 8, 10, 16, 1]]
capacity = [47, 33, 39, 33]
upper_bounds = [4, 3, 3, 3, 3, 3]"
246,ilp_prod,16,178,227,0,276,0,"{'ok': True, 'value': 178, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/890771cb095b4846aafcbf0a73144cdc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/890771cb095b4846aafcbf0a73144cdc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 198.181 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -131 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -160 found by DiveCoefficient after 424 iterations and 0 nodes (0.02 seconds)\nCbc0031I 4 added rows had average density of 6\nCbc0013I At root node, 4 cuts changed objective from -198.18077 to -187.9963 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 244 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 76 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -160 best solution, best possible -187.99625 (0.02 seconds)\nCbc0012I Integer solution of -172 found by rounding after 470 iterations and 1 nodes (0.02 seconds)\nCbc0016I Integer solution of -174 found by strong branching after 549 iterations and 4 nodes (0.02 seconds)\nCbc0016I Integer solution of -175 found by strong branching after 648 iterations and 9 nodes (0.02 seconds)\nCbc0004I Integer solution of -178 found after 654 iterations and 10 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -178, took 654 iterations and 10 nodes (0.02 seconds)\nCbc0032I Strong branching done 52 times (91 iterations), fathomed 3 nodes and fixed 2 variables\nCbc0035I Maximum depth 3, 3 variables fixed on reduced cost\nCuts at root node changed objective from -198.181 to -187.996\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 169 times and created 373 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 169 times and created 191 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                178.00000000\nEnumerated nodes:               10\nTotal iterations:               654\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n178\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18080735206604004}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [44, 25, 47, 29, 37, 22]
consumption (rows=resources) = [[16, 16, 15, 11, 10, 3], [4, 4, 3, 8, 14, 15], [3, 15, 1, 6, 5, 14], [11, 6, 11, 6, 8, 16]]
capacity = [57, 42, 38, 55]
upper_bounds = [3, 3, 3, 5, 3, 3]"
247,ilp_partition,8,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08229684829711914}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 22, 12, 5, 14, 7, 7, 6]"
248,ilp_partition,32,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09433460235595703}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 35, 90, 50, 7, 21, 73, 96, 49, 36, 11, 73, 34, 10, 60, 22, 31, 62, 34, 63, 86, 82, 60, 15]"
249,ilp_prod,32,434,3,0,477,0,"{'ok': True, 'value': 434, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7d04702d7939498bba251eb9b7f2e2c3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7d04702d7939498bba251eb9b7f2e2c3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 470.323 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -213 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 4 columns\nCbc0012I Integer solution of -351 found by DiveCoefficient after 164 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 6\nCbc0013I At root node, 3 cuts changed objective from -470.32314 to -454.21359 in 58 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 137 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -351 best solution, best possible -454.21359 (0.01 seconds)\nCbc0012I Integer solution of -424 found by rounding after 165 iterations and 1 nodes (0.01 seconds)\nCbc0012I Integer solution of -425 found by rounding after 184 iterations and 2 nodes (0.01 seconds)\nCbc0012I Integer solution of -426 found by rounding after 209 iterations and 4 nodes (0.01 seconds)\nCbc0012I Integer solution of -434 found by DiveCoefficient after 214 iterations and 5 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -434, took 302 iterations and 12 nodes (0.01 seconds)\nCbc0032I Strong branching done 34 times (73 iterations), fathomed 1 nodes and fixed 1 variables\nCbc0035I Maximum depth 5, 8 variables fixed on reduced cost\nCuts at root node changed objective from -470.323 to -454.214\nProbing was tried 58 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 95 times and created 203 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 58 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 58 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 58 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 58 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                434.00000000\nEnumerated nodes:               12\nTotal iterations:               302\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n434\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1897740364074707}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [67, 66, 38, 73, 78, 81]
consumption (rows=resources) = [[20, 15, 8, 11, 9, 1], [11, 7, 6, 19, 30, 26], [1, 9, 15, 14, 31, 28], [28, 17, 16, 2, 26, 25]]
capacity = [82, 107, 78, 95]
upper_bounds = [3, 5, 5, 5, 3, 3]"
250,ilp_partition,32,1,2,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0267510414123535}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [76, 59, 47, 4, 12, 9, 58, 84, 36, 26, 94, 68, 62, 79, 71, 63, 65, 83, 38, 67, 93, 27, 56, 10]"
251,add,4,15314,15314,1,15314,1,"{'ok': True, 'value': 15314, 'stdout': '15314\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0953977108001709}",1,Compute: 6833 + 8481
252,add,8,75005548,74995548,0,74995548,0,"{'ok': True, 'value': 75005548, 'stdout': '75005548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0816805362701416}",1,Compute: 61745150 + 13260398
253,ilp_prod,2,42,42,1,42,1,"{'ok': True, 'value': 42, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/cd6544d8baf143ecb339aa952e176d84-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/cd6544d8baf143ecb339aa952e176d84-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 42 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -42 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                42.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14931297302246094}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[1, 1], [1, 1]]
capacity = [6, 8]
upper_bounds = [6, 6]"
254,knap,16,415,345,0,346,0,"{'ok': True, 'value': 415, 'stdout': '415\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09641408920288086}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 7, 7, 6, 6, 1, 12, 17, 30, 10, 20, 19, 15, 21, 18, 9]
V = [64, 22, 43, 26, 31, 17, 51, 61, 49, 8, 24, 3, 37, 13, 7, 55]
C = 105"
255,add,16,10261087934064473,10261085934064433,0,10261087934064473,1,"{'ok': True, 'value': 10261087934064473, 'stdout': '10261087934064473\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08879661560058594}",1,Compute: 2468918630842112 + 7792169303222361
256,ilp_partition,32,0,2,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0397565364837646}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [80, 37, 78, 32, 85, 61, 90, 78, 78, 21, 29, 78, 79, 47, 72, 24, 12, 95, 42, 71, 69, 44, 50, 54]"
257,rod,32,1136,289,0,314,0,"{'ok': True, 'value': 1136, 'stdout': '1136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0780940055847168}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [20, 71, 18, 78, 77, 44, 87, 37, 71, 50, 65, 62, 41, 58, 70, 74, 58, 23, 58, 54, 76, 14, 53, 80, 18, 78, 82, 3, 26, 83, 27, 19]"
258,add,4,16673,16673,1,16673,1,"{'ok': True, 'value': 16673, 'stdout': '16673\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0785531997680664}",1,Compute: 7950 + 8723
259,add,4,3734,3734,1,3734,1,"{'ok': True, 'value': 3734, 'stdout': '3734\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08756160736083984}",1,Compute: 1580 + 2154
260,rod,32,992,327,0,297,0,"{'ok': True, 'value': 992, 'stdout': '992\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08938717842102051}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [31, 16, 2, 77, 61, 64, 30, 31, 79, 17, 90, 73, 85, 25, 85, 37, 91, 93, 90, 72, 7, 50, 7, 93, 71, 84, 68, 83, 59, 90, 53, 31]"
261,mul{'ok': True, 'value': 15282014865865836765380674788832, 'stdout': '15282014865865836765380674788832\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07964634895324707}",1,Compute: 8043175570520104 * 1899997672794508
262,knap,16,379,296,0,359,0,"{'ok': True, 'value': 379, 'stdout': '379\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09888052940368652}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 27, 12, 30, 14, 17, 27, 28, 32, 4, 22, 32, 22, 4, 21, 32]
V = [47, 57, 9, 12, 37, 38, 56, 44, 59, 15, 45, 58, 53, 5, 51, 45]
C = 177"
263,ilp_partition,32,1,2,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0425186157226562}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [74, 59, 59, 49, 46, 85, 80, 50, 12, 25, 69, 8, 41, 11, 13, 42, 82, 46, 33, 23, 9, 87, 83, 47]"
264,sub,32,25640359478087914131698979732908,25640360478087914131700000000000,0,25639359478087914131698979732908,0,"{'ok': True, 'value': 25640359478087914131698979732908, 'stdout': '25640359478087914131698979732908\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11530876159667969}",1,Compute: 42465496285487950334261175102524 - 16825136807400036202562195369616
265,knap,8,78,69,0,77,0,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10247278213500977}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 15, 3, 10, 5, 7, 16, 12]
V = [10, 10, 28, 17, 14, 8, 11, 9]
C = 36"
266,rod,16,176,125,0,100,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08951544761657715}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [11, 7, 24, 23, 19, 11, 30, 43, 28, 13, 42, 48, 16, 6, 8, 27]"
267,mul,32,1269475949903148881558870239847752346182005248790343836018946775,12,0,1267650600228229401496703205329215,0,"{'ok': True, 'value': 1269475949903148881558870239847752346182005248790343836018946775, 'stdout': '1269475949903148881558870239847752346182005248790343836018946775\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09147810935974121}",1,Compute: 62898089589566050470794553566435 * 20183060537879006051019996631165
268,knap,8,113,100,0,93,0,"{'ok': True, 'value': 113, 'stdout': '113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0885312557220459}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 10, 16, 14, 11, 13, 2, 4]
V = [4, 22, 11, 18, 29, 20, 27, 31]
C = 39"
269,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0854635238647461}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""cdd"""
270,ilp_prod,8,85,103,0,105,0,"{'ok': True, 'value': 85, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/860f64c9a08d4ed7acb26ce9ddad5a40-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/860f64c9a08d4ed7acb26ce9ddad5a40-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 89 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -85 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -89 to -89 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -85, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -89 to -89\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                85.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3520698547363281}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7, 17, 16]
consumption (rows=resources) = [[2, 6, 4, 2], [6, 3, 4, 4], [6, 8, 6, 8], [5, 5, 1, 3]]
capacity = [24, 22, 32, 19]
upper_bounds = [3, 3, 5, 4]"
271,ilp_prod,4,36,27,0,31,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/049c4408694a4057a53c3288cb645312-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/049c4408694a4057a53c3288cb645312-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 36 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -36 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -36, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -36 to -36\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21165990829467773}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 3, 9]
consumption (rows=resources) = [[4, 4, 1], [1, 4, 2], [2, 2, 2]]
capacity = [10, 11, 8]
upper_bounds = [3, 3, 4]"
272,add,16,13183771212111376,13183771212111376,1,13183771212111376,1,"{'ok': True, 'value': 13183771212111376, 'stdout': '13183771212111376\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07799768447875977}",1,Compute: 8490422567957501 + 4693348644153875
273,ilp_partition,8,0,4,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08086919784545898}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 17, 20, 15, 6, 19, 13, 8]"
274,mul{'ok': True, 'value': 1241009425288246666318032560111876456976942201975329430884195140, 'stdout': '1241009425288246666318032560111876456976942201975329430884195140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09796524047851562}",1,Compute: 62225038682525119924449400409786 * 19943891583899710455085066900490
275,knap,2,5,8,0,6,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10338902473449707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 5]
V = [5, 1, 3]
C = 5"
276,ilp_partition,2,2,0,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09226584434509277}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 4, 6]"
277,sub,8,10651389,10651389,1,10651389,1,"{'ok': True, 'value': 10651389, 'stdout': '10651389\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08335328102111816}",1,Compute: 56779437 - 46128048
278,rod,4,24,5,0,24,1,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07974433898925781}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 1, 2, 4]"
279,mul,16,27521161068747982140689840388824,not feasible to compute manually,0,27529769439569523286950656,0,"{'ok': True, 'value': 27521161068747982140689840388824, 'stdout': '27521161068747982140689840388824\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10248088836669922}",1,Compute: 3117850743493954 * 8826965539058156
280,rod,32,1072,243,0,243,0,"{'ok': True, 'value': 1072, 'stdout': '1072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09858560562133789}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [32, 67, 77, 1, 87, 16, 84, 8, 21, 2, 63, 77, 23, 18, 38, 39, 25, 45, 65, 13, 80, 45, 6, 44, 78, 12, 3, 43, 38, 33, 62, 23]"
281,knap,2,10,14,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08348417282104492}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 1]
V = [4, 2, 10]
C = 5"
282,ilp_prod,8,121,145,0,108,0,"{'ok': True, 'value': 121, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/35c976f802c043b7a54bb6665584754b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/35c976f802c043b7a54bb6665584754b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 121 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -121 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -121, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -121 to -121\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                121.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15992474555969238}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 23, 6, 8]
consumption (rows=resources) = [[8, 4, 2, 7], [5, 1, 5, 1], [1, 3, 6, 3], [7, 4, 4, 1]]
capacity = [22, 30, 30, 26]
upper_bounds = [3, 5, 5, 3]"
283,mul,8,1439887157673510,I cannot compute the exact product without using code or a calculator.,0,14399999999910,0,"{'ok': True, 'value': 1439887157673510, 'stdout': '1439887157673510\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09563946723937988}",1,Compute: 21933093 * 65649070
284,ilp_partition,16,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09751462936401367}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [42, 40, 17, 17, 28, 29, 29, 27, 27, 46, 27, 17, 7, 10, 35, 34]"
285,mul,8,1718371373696110,171919567466510,0,171919497596610,0,"{'ok': True, 'value': 1718371373696110, 'stdout': '1718371373696110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08219075202941895}",1,Compute: 64918651 * 26469610
286,rod,32,2944,289,0,327,0,"{'ok': True, 'value': 2944, 'stdout': '2944\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08193230628967285}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [92, 12, 94, 45, 79, 41, 32, 78, 25, 71, 59, 11, 14, 8, 22, 72, 71, 41, 67, 62, 56, 60, 92, 85, 19, 9, 39, 93, 80, 36, 92, 57]"
287,ilp_assign,4,14,13,0,19,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.768345832824707}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 12, 10, 8], [12, 12, 2, 8], [9, 6, 6, 2], [11, 1, 4, 4]]"
288,lcs,2,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07450652122497559}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""dab"""
289,add,4,8759,8759,1,8759,1,"{'ok': True, 'value': 8759, 'stdout': '8759\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0718679428100586}",1,Compute: 5080 + 3679
290,knap,4,18,31,0,20,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0829019546508789}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 7, 2, 7]
V = [12, 16, 2, 1]
C = 12"
291,ilp_prod,8,92,129,0,103,0,"{'ok': True, 'value': 92, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/22875288cad741c181a97650da8dc690-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/22875288cad741c181a97650da8dc690-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 99.1667 - 0.00 seconds\nCgl0004I processed model has 3 rows, 4 columns (4 integer (0 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -75 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 3 rows 4 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -92 found by DiveCoefficient after 4 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 4\nCbc0013I At root node, 3 cuts changed objective from -99.166667 to -92 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 4 row cuts average 3.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -92, took 4 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -99.1667 to -92\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                92.00000000\nEnumerated nodes:               0\nTotal iterations:               4\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16628670692443848}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 23, 12, 20]
consumption (rows=resources) = [[4, 7, 2, 7], [1, 1, 2, 6], [1, 5, 5, 1], [1, 1, 1, 3]]
capacity = [21, 31, 18, 20]
upper_bounds = [5, 3, 3, 3]"
292,sub,4,3230,3230,1,3230,1,"{'ok': True, 'value': 3230, 'stdout': '3230\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08449864387512207}",1,Compute: 7801 - 4571
293,ilp_partition,2,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1072390079498291}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 6, 3]"
294,sub,8,25562352,25562352,1,25562352,1,"{'ok': True, 'value': 25562352, 'stdout': '25562352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08039426803588867}",1,Compute: 56763597 - 31201245
295,ilp_prod,2,12,12,1,18,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/75e1a69856414b0baa593df004e5a0a6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/75e1a69856414b0baa593df004e5a0a6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16994094848632812}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[1, 2], [3, 3]]
capacity = [6, 7]
upper_bounds = [3, 3]"
296,sub,32,33377053252336174684687828817262,33377053238338174684687828823262,0,33377053252336174684687828833262,0,"{'ok': True, 'value': 33377053252336174684687828817262, 'stdout': '33377053252336174684687828817262\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08448481559753418}",1,Compute: 91094381014671506109280156001779 - 57717327762335331424592327184517
297,ilp_partition,16,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08070802688598633}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 9, 45, 5, 29, 24, 14, 40, 11, 45, 46, 44, 18, 6, 42, 44]"
298,ilp_prod,32,285,558,0,399,0,"{'ok': True, 'value': 285, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/47d2153922d14323a96765cec6818451-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/47d2153922d14323a96765cec6818451-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 287.96 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -285 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -285, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -287.96 to -285\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                285.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n285\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17133593559265137}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [74, 34, 9, 56, 91, 95]
consumption (rows=resources) = [[4, 9, 19, 31, 1, 20], [5, 8, 16, 32, 4, 4], [25, 13, 21, 27, 32, 25], [8, 29, 10, 7, 2, 18]]
capacity = [67, 126, 76, 109]
upper_bounds = [3, 3, 3, 3, 3, 3]"
299,lcs,16,9,7,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07509922981262207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbabddbabcbcacc""
T = ""babcbdcaaddabacd"""
300,ilp_prod,4,66,66,1,63,0,"{'ok': True, 'value': 66, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/84ab9ee9d8e648d692c139faeefd0b87-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/84ab9ee9d8e648d692c139faeefd0b87-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 68.5 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -66 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -68.5 to -68.5 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -66, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -68.5 to -68.5\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                66.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19658493995666504}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 11, 5]
consumption (rows=resources) = [[1, 2, 1], [3, 1, 2], [4, 2, 4]]
capacity = [16, 10, 13]
upper_bounds = [3, 6, 3]"
301,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08448624610900879}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 4, 1]"
302,mul,2,8160,8160,1,8160,1,"{'ok': True, 'value': 8160, 'stdout': '8160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08531665802001953}",1,Compute: 96 * 85
303,ilp_prod,2,32,32,1,28,0,"{'ok': True, 'value': 32, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/237f5479c43147d995704540348bb0e5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/237f5479c43147d995704540348bb0e5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 32.6 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -29 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -32 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -32.6 to -32 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -32, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -32.6 to -32\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                32.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15798544883728027}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4]
consumption (rows=resources) = [[1, 3], [2, 1]]
capacity = [10, 9]
upper_bounds = [4, 3]"
304,rod,4,16,16,1,13,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08498215675354004}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 8, 12, 11]"
305,ilp_partition,4,5,1,0,1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09310793876647949}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 12, 1, 4]"
306,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08762907981872559}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcdb""
T = ""cbca"""
307,knap,16,428,365,0,437,0,"{'ok': True, 'value': 428, 'stdout': '428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08082056045532227}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 10, 14, 20, 5, 13, 2, 29, 25, 28, 31, 14, 18, 5, 23, 32]
V = [55, 43, 3, 5, 15, 61, 57, 26, 58, 1, 33, 32, 6, 30, 41, 36]
C = 136"
308,mul,32,4096170051259187385677995529522926867882562209162868551920947552,0,0,409934965754867840265529574563493898624,0,"{'ok': True, 'value': 4096170051259187385677995529522926867882562209162868551920947552, 'stdout': '4096170051259187385677995529522926867882562209162868551920947552\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08532547950744629}",1,Compute: 53676834235894005617380545717872 * 76311692177256889676919912019066
309,knap,2,9,9,1,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07325172424316406}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 5]
V = [7, 2, 2]
C = 4"
310,knap,16,460,306,0,326,0,"{'ok': True, 'value': 460, 'stdout': '460\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08671283721923828}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 6, 4, 1, 9, 15, 1, 9, 19, 12, 11, 32, 3, 32, 20, 16]
V = [46, 16, 27, 29, 20, 20, 36, 62, 40, 58, 38, 25, 44, 27, 18, 60]
C = 104"
311,mul,8,997893356876519,99783478379699,0,99793949759999,0,"{'ok': True, 'value': 997893356876519, 'stdout': '997893356876519\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09305667877197266}",1,Compute: 99181561 * 10061279
312,ilp_assign,16,59,42,0,102,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3774120807647705}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[25, 30, 7, 9, 32, 31, 29], [12, 14, 48, 12, 46, 8, 41], [46, 41, 23, 9, 37, 34, 12], [38, 42, 36, 29, 15, 15, 36], [27, 31, 41, 12, 3, 40, 34], [18, 19, 33, 7, 2, 32, 18], [28, 3, 46, 17, 31, 3, 35]]"
313,mul,4,54803359,54783359,0,54704559,0,"{'ok': True, 'value': 54803359, 'stdout': '54803359\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09444785118103027}",1,Compute: 8551 * 6409
314,ilp_partition,16,0,2,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10895228385925293}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 33, 38, 19, 18, 7, 25, 34, 42, 23, 6, 47, 17, 24, 14, 38]"
315,knap,32,1530,1016,0,1062,0,"{'ok': True, 'value': 1530, 'stdout': '1530\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09421086311340332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [32, 47, 23, 50, 23, 57, 44, 47, 47, 47, 47, 42, 20, 9, 1, 51, 4, 57, 30, 56, 50, 38, 51, 32, 42, 60, 3, 60, 39, 13, 2, 57]
V = [101, 82, 69, 6, 103, 31, 101, 92, 1, 114, 85, 21, 2, 70, 21, 125, 7, 57, 60, 93, 113, 14, 4, 13, 68, 97, 106, 104, 54, 79, 5, 57]
C = 590"
316,rod,4,11,11,1,11,1,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10825896263122559}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 2, 10, 6]"
317,lcs,4,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09000730514526367}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddc""
T = ""baaa"""
318,mul,2,7663,7663,1,7663,1,"{'ok': True, 'value': 7663, 'stdout': '7663\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08452320098876953}",1,Compute: 79 * 97
319,ilp_partition,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09582376480102539}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 3, 1]"
320,mul{'ok': True, 'value': 9708817804940804360665227229350, 'stdout': '9708817804940804360665227229350\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08126044273376465}",1,Compute: 1918849392016890 * 5059708096598415
321,add,16,13135452036387774,13135452027387774,0,13135452036387774,1,"{'ok': True, 'value': 13135452036387774, 'stdout': '13135452036387774\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09670138359069824}",1,Compute: 9882776597345170 + 3252675439042604
322,lcs,32,20,10,0,10,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08512425422668457}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabaabccbabcbabcaaaaccddcbcabbbb""
T = ""cbbcabbbdccbabbbdadadaacdbaadbbdd"""
323,lcs,16,8,6,0,7,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10252070426940918}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabcddacadcbaacd""
T = ""ccaaadbdbdddbba"""
324,knap,8,91,82,0,84,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0910491943359375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 14, 6, 2, 10, 16, 3, 12]
V = [7, 7, 32, 16, 3, 2, 6, 30]
C = 39"
325,ilp_assign,8,30,-inf,0,55,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39488911628723145}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 22, 7, 3, 22, 2, 8], [24, 6, 12, 13, 21, 17, 20], [22, 12, 14, 7, 13, 24, 2], [20, 24, 8, 19, 1, 15, 24], [1, 14, 5, 7, 3, 19, 21], [5, 11, 9, 10, 15, 11, 17], [14, 16, 11, 9, 17, 10, 15]]"
326,mul,4,13783374,13783174,0,13794794,0,"{'ok': True, 'value': 13783374, 'stdout': '13783374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07599973678588867}",1,Compute: 3117 * 4422
327,ilp_partition,4,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09060430526733398}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 7, 4, 2]"
328,mul,16,29757038943931996778487667695954,-inf,0,29742699968866892309296884960000,0,"{'ok': True, 'value': 29757038943931996778487667695954, 'stdout': '29757038943931996778487667695954\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0847463607788086}",1,Compute: 3994301292830017 * 7449873397719762
329,rod,32,2080,243,0,247,0,"{'ok': True, 'value': 2080, 'stdout': '2080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10515189170837402}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [65, 28, 48, 60, 29, 64, 10, 25, 48, 81, 47, 50, 57, 31, 67, 20, 66, 13, 87, 50, 55, 40, 79, 46, 57, 65, 71, 30, 35, 86, 47, 47]"
330,sub,4,2459,2459,1,2459,1,"{'ok': True, 'value': 2459, 'stdout': '2459\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08975601196289062}",1,Compute: 8247 - 5788
331,add,2,121,121,1,121,1,"{'ok': True, 'value': 121, 'stdout': '121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08237934112548828}",1,Compute: 84 + 37
332,rod,32,3040,243,0,307,0,"{'ok': True, 'value': 3040, 'stdout': '3040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08721375465393066}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [95, 29, 39, 70, 79, 66, 49, 24, 3, 61, 65, 74, 55, 12, 58, 21, 87, 69, 66, 19, 56, 53, 1, 69, 87, 87, 2, 37, 43, 41, 84, 95]"
333,mul{'ok': True, 'value': 2061422047450862697609900830171999678622444725249685568505219109, 'stdout': '2061422047450862697609900830171999678622444725249685568505219109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08701157569885254}",1,Compute: 27079324569947202745439517993837 * 76125312584001496205593676719257
334,ilp_assign,4,11,11,1,15,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3804664611816406}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 5, 5, 4], [1, 8, 6, 9], [6, 2, 2, 5], [10, 7, 4, 12]]"
335,sub,8,46504399,46504399,1,46504399,1,"{'ok': True, 'value': 46504399, 'stdout': '46504399\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0880441665649414}",1,Compute: 83454345 - 36949946
336,add,8,163294569,163294569,1,163294569,1,"{'ok': True, 'value': 163294569, 'stdout': '163294569\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07775330543518066}",1,Compute: 79174739 + 84119830
337,add,8,130957985,13395805,0,130957985,1,"{'ok': True, 'value': 130957985, 'stdout': '130957985\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07361292839050293}",1,Compute: 95517870 + 35440115
338,knap,8,114,101,0,93,0,"{'ok': True, 'value': 114, 'stdout': '114\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07336854934692383}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 10, 14, 15, 7, 6, 1, 9]
V = [7, 25, 17, 13, 32, 31, 17, 26]
C = 32"
339,lcs,8,4,4,1,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07254481315612793}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdabdcc""
T = ""ddabcbbb"""
340,sub,2,39,39,1,39,1,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08100366592407227}",1,Compute: 85 - 46
341,sub,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08213591575622559}",1,Compute: 87 - 80
342,sub,16,2898307141365729,2898307141365729,1,2898307141365729,1,"{'ok': True, 'value': 2898307141365729, 'stdout': '2898307141365729\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09628748893737793}",1,Compute: 4192632314447824 - 1294325173082095
343,knap,4,18,18,1,12,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08770012855529785}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 1, 5, 5]
V = [16, 2, 9, 2]
C = 9"
344,rod,32,2624,224,0,294,0,"{'ok': True, 'value': 2624, 'stdout': '2624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08021354675292969}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [82, 27, 22, 60, 32, 41, 54, 7, 1, 30, 53, 61, 32, 44, 84, 32, 43, 92, 34, 73, 39, 49, 40, 20, 15, 72, 90, 81, 55, 3, 51, 40]"
345,add,32,105586935961077934799337866132976,105692375149902250737021390815338,0,105586935961077934799337866133076,0,"{'ok': True, 'value': 105586935961077934799337866132976, 'stdout': '105586935961077934799337866132976\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10464644432067871}",1,Compute: 81694375149902250737021390815338 + 23892560811175684062316475317638
346,ilp_assign,32,131,100,0,172,0,"{'ok': True, 'value': 131, 'stdout': '131\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.394059419631958}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[60, 25, 2, 30, 83, 24, 2], [49, 21, 7, 72, 46, 56, 9], [47, 55, 86, 2, 53, 53, 45], [42, 43, 93, 55, 48, 46, 56], [89, 44, 16, 87, 65, 72, 70], [16, 79, 93, 70, 54, 82, 11], [31, 16, 40, 10, 33, 36, 25]]"
347,knap,16,363,324,0,327,0,"{'ok': True, 'value': 363, 'stdout': '363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07431650161743164}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 14, 23, 15, 32, 4, 27, 30, 3, 21, 13, 21, 11, 2, 21, 32]
V = [10, 52, 40, 23, 29, 3, 61, 15, 27, 58, 38, 39, 38, 1, 45, 35]
C = 141"
348,knap,8,82,59,0,65,0,"{'ok': True, 'value': 82, 'stdout': '82\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07303524017333984}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 13, 14, 3, 7, 7, 7, 16]
V = [6, 13, 7, 9, 13, 28, 26, 17]
C = 35"
349,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09824204444885254}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 23, 36, 35, 18, 27, 7, 45, 32, 45, 10, 28, 39, 1, 23, 12]"
350,ilp_assign,16,97,100,0,104,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3936889171600342}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[30, 12, 38, 27, 19, 13, 36], [43, 18, 23, 41, 39, 21, 25], [39, 39, 45, 46, 38, 27, 47], [8, 25, 14, 3, 45, 14, 32], [43, 48, 22, 33, 15, 36, 48], [16, 32, 46, 48, 31, 16, 8], [9, 10, 47, 18, 21, 9, 3]]"
351,knap,16,403,309,0,392,0,"{'ok': True, 'value': 403, 'stdout': '403\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09292483329772949}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 32, 8, 5, 27, 13, 12, 14, 18, 24, 29, 29, 27, 14, 29, 22]
V = [13, 28, 62, 40, 14, 3, 5, 10, 30, 55, 42, 13, 12, 62, 38, 64]
C = 164"
352,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08849811553955078}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""da"""
353,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07257843017578125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""b"""
354,ilp_prod,32,192,468,0,378,0,"{'ok': True, 'value': 192, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/19c5eb41a9d34f388965ec0b28c8909c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/19c5eb41a9d34f388965ec0b28c8909c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 205.333 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -192 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -205.33333 to -205.33333 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -192, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -205.333 to -205.333\nProbing was tried 1 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                192.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16215109825134277}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 5, 48, 51, 73, 22]
consumption (rows=resources) = [[14, 26, 13, 1, 7, 7], [13, 8, 4, 27, 17, 9], [9, 9, 15, 23, 31, 29], [23, 29, 24, 9, 19, 16]]
capacity = [111, 128, 65, 124]
upper_bounds = [5, 4, 4, 3, 3, 3]"
355,add,2,73,73,1,73,1,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09067010879516602}",1,Compute: 46 + 27
356,ilp_assign,4,14,16,0,14,1,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36934638023376465}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 5, 10, 3], [8, 2, 2, 8], [7, 10, 7, 9], [2, 5, 8, 4]]"
357,sub,8,7008232,7007822,0,7008232,1,"{'ok': True, 'value': 7008232, 'stdout': '7008232\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08769583702087402}",1,Compute: 92336634 - 85328402
358,rod,8,64,31,0,39,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08404254913330078}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [8, 15, 21, 20, 17, 18, 12, 6]"
359,sub,32,46670814042830996955558628916052,46670814042831047955558628826352,0,46670814042831000000000000000000,0,"{'ok': True, 'value': 46670814042830996955558628916052, 'stdout': '46670814042830996955558628916052\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08511710166931152}",1,Compute: 93915417137184494811403299845366 - 47244603094353497855844670929314
360,add,4,11307,6307,0,11307,1,"{'ok': True, 'value': 11307, 'stdout': '11307\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10871529579162598}",1,Compute: 5300 + 6007
361,knap,2,6,8,0,12,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08185505867004395}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 3]
V = [6, 6, 2]
C = 4"
362,sub,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07646298408508301}",1,Compute: 51 - 41
363,mul,16,46476853288980757508045746092541,-inf,0,4646996376943956957867699,0,"{'ok': True, 'value': 46476853288980757508045746092541, 'stdout': '46476853288980757508045746092541\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07596135139465332}",1,Compute: 5590125871702067 * 8314097813835023
364,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37694430351257324}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [3, 2]]"
365,sub,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0917057991027832}",1,Compute: 95 - 90
366,knap,32,1588,1049,0,1239,0,"{'ok': True, 'value': 1588, 'stdout': '1588\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09458112716674805}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 6, 2, 47, 16, 24, 35, 1, 34, 5, 54, 54, 1, 9, 55, 36, 26, 32, 40, 15, 10, 48, 52, 7, 45, 30, 37, 49, 1, 60, 41, 17]
V = [25, 7, 97, 33, 75, 1, 95, 78, 117, 48, 32, 71, 37, 124, 77, 7, 29, 61, 111, 105, 14, 99, 90, 17, 91, 55, 91, 40, 104, 123, 55, 6]
C = 447"
367,sub,2,27,27,1,27,1,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10187649726867676}",1,Compute: 86 - 59
368,add,8,165443610,165443610,1,165443610,1,"{'ok': True, 'value': 165443610, 'stdout': '165443610\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08737635612487793}",1,Compute: 82708193 + 82735417
369,ilp_partition,32,0,2,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0942697525024414}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 79, 87, 74, 55, 91, 31, 55, 23, 93, 45, 33, 71, 90, 74, 74, 79, 74, 23, 66, 21, 32, 4, 29]"
370,add,32,112245885721498653611933052946548,112245886721498753610570489426548,0,112245885721498953611873049416548,0,"{'ok': True, 'value': 112245885721498653611933052946548, 'stdout': '112245885721498653611933052946548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0881357192993164}",1,Compute: 77540706461267409687828316671597 + 34705179260231243924104736274951
371,ilp_partition,8,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08230137825012207}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 12, 5, 1, 15, 14, 19, 4]"
372,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07858085632324219}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 3, 4, 2]"
373,ilp_prod,16,210,-1,0,239,0,"{'ok': True, 'value': 210, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8fbb638bf6044189a4b7ccc67de67984-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8fbb638bf6044189a4b7ccc67de67984-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 223.957 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -174 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 4 columns\nCbc0012I Integer solution of -210 found by DiveCoefficient after 14 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 5.25\nCbc0013I At root node, 4 cuts changed objective from -223.95732 to -210 in 6 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 19 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 30 row cuts average 5.4 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -210, took 14 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -223.957 to -210\nProbing was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 6 times and created 19 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 6 times and created 30 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                210.00000000\nEnumerated nodes:               0\nTotal iterations:               14\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n210\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1584320068359375}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [32, 11, 16, 20, 14, 47]
consumption (rows=resources) = [[4, 8, 5, 3, 9, 15], [16, 12, 1, 5, 7, 12], [8, 2, 1, 9, 6, 2], [15, 9, 12, 4, 13, 9]]
capacity = [52, 57, 53, 56]
upper_bounds = [3, 4, 4, 5, 4, 3]"
374,lcs,8,6,4,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08155703544616699}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddabdcba""
T = ""dbdcdbadb"""
375,ilp_prod,32,395,6,0,496,0,"{'ok': True, 'value': 395, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a4916b92cb284bffb7a6b384084aaaf3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a4916b92cb284bffb7a6b384084aaaf3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 426.359 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -316 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -356 found by DiveCoefficient after 269 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 6\nCbc0013I At root node, 3 cuts changed objective from -426.3592 to -404.36721 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 230 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 25 row cuts average 5.6 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -356 best solution, best possible -404.36721 (0.01 seconds)\nCbc0012I Integer solution of -395 found by DiveCoefficient after 293 iterations and 2 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -395, took 293 iterations and 2 nodes (0.02 seconds)\nCbc0032I Strong branching done 8 times (12 iterations), fathomed 1 nodes and fixed 0 variables\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -426.359 to -404.367\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nGomory was tried 112 times and created 243 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 112 times and created 39 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                395.00000000\nEnumerated nodes:               2\nTotal iterations:               293\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n395\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16241741180419922}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [79, 21, 79, 40, 32, 72]
consumption (rows=resources) = [[12, 17, 13, 1, 1, 28], [7, 22, 14, 14, 4, 2], [19, 8, 21, 23, 6, 13], [21, 16, 17, 18, 21, 30]]
capacity = [65, 101, 111, 108]
upper_bounds = [5, 3, 5, 4, 5, 3]"
376,sub,4,1944,1944,1,1944,1,"{'ok': True, 'value': 1944, 'stdout': '1944\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08372211456298828}",1,Compute: 8744 - 6800
377,rod,4,24,24,1,22,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08552956581115723}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 10, 3, 10]"
378,ilp_prod,4,36,61,0,49,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6a61394b29944b07b07d07fea7842aa9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6a61394b29944b07b07d07fea7842aa9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 39 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -36 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 1\nCbc0013I At root node, 3 cuts changed objective from -39 to -36 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 1.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 1.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -36, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -39 to -36\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1706395149230957}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 5, 12]
consumption (rows=resources) = [[3, 1, 3], [3, 2, 3], [4, 1, 2]]
capacity = [12, 10, 13]
upper_bounds = [3, 5, 3]"
379,lcs,16,10,7,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0922694206237793}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbddacdccdcdcab""
T = ""cbacaddbdbdcaabc"""
380,rod,2,8,8,1,6,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09028935432434082}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
381,sub,32,59862236526963095582627896327757,59862236526963095582627898977757,0,59862236426963095582627896318757,0,"{'ok': True, 'value': 59862236526963095582627896327757, 'stdout': '59862236526963095582627896327757\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09447717666625977}",1,Compute: 79174581543471396754472351699026 - 19312345016508301171844455371269
382,knap,4,23,21,0,17,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08655667304992676}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 6, 4]
V = [12, 6, 5, 11]
C = 8"
383,add,2,126,126,1,126,1,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07922792434692383}",1,Compute: 71 + 55
384,add,8,110952744,110952744,1,110952744,1,"{'ok': True, 'value': 110952744, 'stdout': '110952744\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07933735847473145}",1,Compute: 67682834 + 43269910
385,ilp_assign,4,14,10,0,18,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3619801998138428}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 5, 2, 8], [3, 6, 4, 12], [3, 6, 8, 4], [2, 11, 7, 7]]"
386,ilp_prod,2,32,32,1,24,0,"{'ok': True, 'value': 32, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6bb589a04f0942cc873e71ded05498fe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6bb589a04f0942cc873e71ded05498fe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 32 - 0.00 seconds\nCgl0004I processed model has 1 rows, 2 columns (2 integer (0 of which binary)) and 2 elements\nCutoff increment increased from 1e-05 to 7.9999\nCbc0012I Integer solution of -32 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -32, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -32 to -32\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                32.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1534738540649414}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8]
consumption (rows=resources) = [[2, 3], [2, 3]]
capacity = [8, 9]
upper_bounds = [4, 3]"
387,mul,16,24696998611004016696117162059413,31,0,246913581994795697286769769,0,"{'ok': True, 'value': 24696998611004016696117162059413, 'stdout': '24696998611004016696117162059413\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08506417274475098}",1,Compute: 2958845452418093 * 8346836294143241
388,mul,8,785462441660454,78499999999944,0,78514874953954,0,"{'ok': True, 'value': 785462441660454, 'stdout': '785462441660454\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08809757232666016}",1,Compute: 53388318 * 14712253
389,rod,16,320,225,0,100,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07860279083251953}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 14, 3, 36, 28, 27, 35, 22, 14, 9, 19, 6, 9, 4, 22, 4]"
390,ilp_prod,4,48,48,1,43,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6377008649574eb888756ffc4d68bcdf-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6377008649574eb888756ffc4d68bcdf-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 48 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -36 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 3 rows 3 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -48 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -48 to -48 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 2.5 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 2.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -48, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -48 to -48\nProbing was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16205477714538574}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3, 12]
consumption (rows=resources) = [[2, 4, 2], [4, 1, 4], [1, 4, 3]]
capacity = [11, 16, 15]
upper_bounds = [4, 3, 4]"
391,lcs,8,5,4,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07754325866699219}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbbcabb""
T = ""dbbbbbcad"""
392,ilp_assign,16,34,10,0,67,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37471532821655273}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 28, 4, 25, 5, 30, 14], [42, 43, 21, 2, 10, 29, 33], [47, 30, 44, 27, 33, 3, 9], [10, 15, 32, 5, 3, 5, 35], [2, 1, 35, 21, 43, 5, 24], [3, 14, 31, 36, 5, 38, 13], [48, 20, 20, 2, 15, 32, 41]]"
393,ilp_prod,16,231,566,0,206,0,"{'ok': True, 'value': 231, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/67bade8c99d24679b8d7f402ca0ebe84-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/67bade8c99d24679b8d7f402ca0ebe84-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 235.375 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -231 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -235.375 to -235.375 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -231, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -235.375 to -235.375\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                231.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n231\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1523265838623047}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 35, 3, 12, 26, 33]
consumption (rows=resources) = [[4, 8, 13, 8, 9, 2], [1, 12, 9, 11, 1, 1], [13, 8, 15, 16, 10, 5], [13, 1, 7, 8, 14, 3]]
capacity = [37, 51, 36, 53]
upper_bounds = [3, 4, 3, 3, 3, 7]"
394,ilp_partition,16,0,3,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09967994689941406}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 48, 16, 15, 19, 46, 48, 28, 19, 27, 4, 41, 4, 26, 26, 18]"
395,add,4,4333,4333,1,4333,1,"{'ok': True, 'value': 4333, 'stdout': '4333\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07083845138549805}",1,Compute: 1354 + 2979
396,mul,8,3328333097349520,not computable manually,0,3324729999992720,0,"{'ok': True, 'value': 3328333097349520, 'stdout': '3328333097349520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07592511177062988}",1,Compute: 68647280 * 48484559
397,lcs,8,5,4,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0724186897277832}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabadccb""
T = ""acbccddcc"""
398,mul,4,27848675,27848675,1,27869275,0,"{'ok': True, 'value': 27848675, 'stdout': '27848675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07271981239318848}",1,Compute: 8131 * 3425
399,knap,32,1672,1009,0,1306,0,"{'ok': True, 'value': 1672, 'stdout': '1672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0794370174407959}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 51, 10, 55, 42, 54, 19, 41, 29, 50, 52, 26, 13, 25, 41, 1, 63, 49, 54, 51, 63, 56, 17, 58, 42, 35, 21, 30, 23, 10, 49, 24]
V = [122, 45, 53, 79, 100, 40, 42, 13, 42, 52, 29, 18, 76, 89, 120, 45, 21, 113, 53, 109, 104, 97, 33, 98, 27, 48, 59, 126, 112, 100, 8, 65]
C = 589"
400,knap,2,10,11,0,11,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07262206077575684}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 3]
V = [10, 1, 10]
C = 5"
401,rod,32,2176,249,0,327,0,"{'ok': True, 'value': 2176, 'stdout': '2176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08211970329284668}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [68, 19, 96, 83, 49, 5, 58, 16, 73, 59, 77, 42, 8, 22, 93, 37, 22, 68, 25, 32, 80, 52, 19, 26, 44, 78, 60, 6, 22, 48, 53, 15]"
402,mul,32,468627243581675566493029950566530523053872700070295621412844425,,0,468195935694867242285529574563493898669920000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 468627243581675566493029950566530523053872700070295621412844425, 'stdout': '468627243581675566493029950566530523053872700070295621412844425\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0699613094329834}",1,Compute: 10738603728698200720540645025825 * 43639494986606180468730641022569
403,lcs,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0708475112915039}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaa""
T = ""abd"""
404,rod,8,120,46,0,105,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07375431060791016}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 6, 6, 15, 9, 23, 6, 15]"
405,sub,16,521296591403590,521297218834900,0,521296593335890,0,"{'ok': True, 'value': 521296591403590, 'stdout': '521296591403590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07199740409851074}",1,Compute: 8056943747323441 - 7535647155919851
406,ilp_partition,16,1,12,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10789036750793457}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 5, 35, 25, 48, 8, 33, 12, 34, 8, 29, 14, 12, 47, 48, 21]"
407,add,8,40136423,40136423,1,40136423,1,"{'ok': True, 'value': 40136423, 'stdout': '40136423\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10087013244628906}",1,Compute: 14177143 + 25959280
408,ilp_assign,4,18,17,0,18,1,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.386627197265625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 11, 12, 10], [8, 11, 10, 4], [10, 8, 1, 4], [8, 10, 6, 9]]"
409,rod,8,112,94,0,51,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08101963996887207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 21, 1, 19, 14, 20, 8, 10]"
410,ilp_assign,8,21,16,0,38,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3700244426727295}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 19, 14, 12, 3, 11, 9], [12, 4, 10, 19, 5, 12, 2], [24, 1, 21, 20, 13, 1, 14], [8, 14, 19, 15, 10, 1, 6], [23, 19, 15, 18, 3, 21, 1], [22, 2, 3, 5, 13, 13, 20], [6, 24, 8, 21, 18, 4, 1]]"
411,mul,32,3878620706815417934376497837293442785092082073995071216818577640,41,0,387904935798867342285529574563493898640,0,"{'ok': True, 'value': 3878620706815417934376497837293442785092082073995071216818577640, 'stdout': '3878620706815417934376497837293442785092082073995071216818577640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0889124870300293}",1,Compute: 47104367644760913426094993329460 * 82340999375390395643832110745634
412,lcs,32,21,14,0,16,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08207249641418457}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdaadbabdbcaacacbacddcaadcbaadb""
T = ""cddccddadcbbbbcdcdccadccbcabbacdb"""
413,sub,32,54228809234862329309995974463541,54228809234862329310000000000000,0,37242727965753107919846384498798,0,"{'ok': True, 'value': 54228809234862329309995974463541, 'stdout': '54228809234862329309995974463541\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0698397159576416}",1,Compute: 91471537200615437229842358962339 - 37242727965753107919846384498798
414,ilp_assign,4,15,19,0,16,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3924143314361572}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 12, 8, 4], [1, 9, 10, 7], [2, 9, 3, 4], [4, 7, 7, 8]]"
415,ilp_assign,32,157,120,0,197,0,"{'ok': True, 'value': 157, 'stdout': '157\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.399059534072876}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 65, 29, 32, 93, 43, 94], [63, 16, 71, 77, 66, 21, 69], [34, 81, 62, 63, 42, 38, 56], [88, 85, 45, 17, 89, 73, 82], [60, 42, 43, 15, 64, 94, 17], [19, 38, 77, 90, 39, 52, 22], [95, 26, 27, 54, 43, 93, 20]]"
416,ilp_assign,8,34,27,0,51,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4127497673034668}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 10, 11, 1, 19, 20, 20], [10, 4, 11, 23, 3, 5, 13], [15, 9, 12, 9, 20, 22, 24], [8, 23, 6, 18, 15, 15, 9], [16, 4, 3, 22, 6, 18, 2], [9, 12, 11, 12, 2, 13, 22], [11, 6, 10, 16, 2, 18, 17]]"
417,lcs,32,20,12,0,12,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08220934867858887}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbaacadccdbcdadcccabdbbadbabcac""
T = ""bacdacaacaadddccabcbadaaaabcdda"""
418,ilp_assign,8,39,32,0,57,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36986589431762695}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 8, 10, 10, 6, 2, 6], [6, 19, 6, 11, 20, 23, 8], [10, 2, 15, 19, 5, 21, 11], [19, 2, 24, 18, 17, 24, 5], [14, 18, 7, 15, 23, 20, 14], [7, 12, 11, 20, 10, 19, 13], [18, 20, 8, 14, 11, 2, 5]]"
419,lcs,16,8,7,0,7,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0875391960144043}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbdcdcdbbdabcca""
T = ""dbdbccacadaaaadc"""
420,lcs,8,5,4,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09853792190551758}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccdbddb""
T = ""dcbbcbcd"""
421,knap,8,105,76,0,76,0,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08233356475830078}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 1, 12, 12, 7, 2, 7, 15]
V = [14, 14, 1, 10, 16, 30, 31, 6]
C = 36"
422,ilp_prod,16,96,84,0,195,0,"{'ok': True, 'value': 96, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/09974ade47ac41efb712b892685fe66d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/09974ade47ac41efb712b892685fe66d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 102.4 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -65 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -96 found by DiveCoefficient after 6 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 5.6666667\nCbc0013I At root node, 3 cuts changed objective from -102.4 to -96 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 10 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -96, took 6 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -102.4 to -96\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 10 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                96.00000000\nEnumerated nodes:               0\nTotal iterations:               6\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16884088516235352}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 10, 19, 19, 31, 34]
consumption (rows=resources) = [[8, 9, 14, 15, 10, 15], [8, 14, 4, 14, 13, 7], [4, 12, 8, 1, 3, 1], [14, 12, 7, 7, 11, 14]]
capacity = [38, 34, 63, 59]
upper_bounds = [4, 3, 3, 3, 3, 3]"
423,ilp_assign,4,20,23,0,14,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3741908073425293}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 3, 8, 9], [6, 3, 7, 5], [7, 2, 10, 9], [6, 4, 8, 4]]"
424,ilp_prod,8,98,64,0,105,0,"{'ok': True, 'value': 98, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9cfa40fc6fa84e7e8758e39ec222b5b1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9cfa40fc6fa84e7e8758e39ec222b5b1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 98 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -98 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -98, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -98 to -98\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                98.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18087315559387207}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 17, 17, 12]
consumption (rows=resources) = [[2, 4, 6, 4], [7, 1, 6, 3], [3, 8, 2, 2], [3, 1, 4, 3]]
capacity = [16, 32, 29, 29]
upper_bounds = [4, 3, 3, 4]"
425,sub,32,2804810652542738837717078853390,28048106650427386877746000000000,0,2804810652542766586357079853390,0,"{'ok': True, 'value': 2804810652542738837717078853390, 'stdout': '2804810652542738837717078853390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08826708793640137}",1,Compute: 76200530991042858559514035245375 - 73395720338500119721796956391985
426,rod,32,1216,322,0,322,0,"{'ok': True, 'value': 1216, 'stdout': '1216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08954644203186035}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [38, 22, 87, 70, 91, 45, 95, 83, 96, 21, 30, 83, 63, 4, 58, 22, 93, 33, 52, 4, 73, 66, 89, 53, 10, 22, 86, 51, 12, 15, 26, 84]"
427,ilp_prod,2,16,29,0,26,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/16db1b3001774370aa855922b954c1eb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/16db1b3001774370aa855922b954c1eb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21.3333 - 0.00 seconds\nCgl0004I processed model has 1 rows, 2 columns (2 integer (0 of which binary)) and 2 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -16 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -19.333333 to -19.333333 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -16, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -19.3333 to -19.3333\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17318201065063477}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 5]
consumption (rows=resources) = [[3, 1], [3, 3]]
capacity = [10, 8]
upper_bounds = [3, 3]"
428,rod,4,48,12,0,36,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09281659126281738}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 1, 10, 8]"
429,knap,2,9,9,1,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07876157760620117}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 1]
V = [8, 4, 1]
C = 3"
430,ilp_partition,16,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10803532600402832}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [38, 31, 22, 1, 1, 18, 14, 34, 37, 36, 12, 46, 26, 39, 31, 37]"
431,ilp_assign,4,8,8,1,12,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3832550048828125}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 4, 1, 1], [1, 3, 4, 8], [11, 10, 4, 11], [11, 2, 9, 7]]"
432,sub,2,25,25,1,25,1,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09568190574645996}",1,Compute: 75 - 50
433,mul,8,1662074253081872,166159720377552,0,16617528996752,0,"{'ok': True, 'value': 1662074253081872, 'stdout': '1662074253081872\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08651494979858398}",1,Compute: 33371944 * 49804538
434,lcs,16,10,8,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09044122695922852}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcdcabadddcdbaa""
T = ""cddbabcbbcbdacdba"""
435,knap,8,101,78,0,77,0,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09560298919677734}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 9, 4, 9, 15, 9, 14, 2]
V = [5, 10, 29, 4, 23, 22, 17, 27]
C = 33"
436,sub,32,379432001808739259111085136407,379433196018673392910163331234,0,379433596018773309910938548307,0,"{'ok': True, 'value': 379432001808739259111085136407, 'stdout': '379432001808739259111085136407\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08731508255004883}",1,Compute: 49260301715766295748910163331234 - 48880869713957556489799078194827
437,mul{'ok': True, 'value': 48801434796248569179938513843810, 'stdout': '48801434796248569179938513843810\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08401632308959961}",1,Compute: 5325068108564410 * 9164471477418341
438,sub,4,5124,5124,1,5124,1,"{'ok': True, 'value': 5124, 'stdout': '5124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07327628135681152}",1,Compute: 9569 - 4445
439,ilp_prod,8,80,68,0,79,0,"{'ok': True, 'value': 80, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ab80deb1ae754dada19ed195b57cc8ce-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ab80deb1ae754dada19ed195b57cc8ce-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 83.6047 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -57 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -80 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 3\nCbc0013I At root node, 1 cuts changed objective from -83.604651 to -80 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 3 row cuts average 2.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -80, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -83.6047 to -80\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                80.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1722714900970459}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 13, 23, 8]
consumption (rows=resources) = [[7, 5, 3, 3], [2, 4, 6, 8], [2, 6, 7, 5], [8, 1, 3, 6]]
capacity = [21, 31, 23, 23]
upper_bounds = [3, 3, 3, 3]"
440,ilp_prod,8,43,2,0,105,0,"{'ok': True, 'value': 43, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1fa9720761ce4969b9b941bacd849e67-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1fa9720761ce4969b9b941bacd849e67-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 45 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -40 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -43 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -44 to -43 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -43, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -44 to -43\nProbing was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                43.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.179612398147583}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 20, 7, 6]
consumption (rows=resources) = [[2, 2, 2, 4], [2, 8, 7, 2], [2, 8, 8, 3], [2, 3, 6, 7]]
capacity = [32, 20, 18, 32]
upper_bounds = [9, 3, 3, 4]"
441,mul,2,6862,6862,1,6862,1,"{'ok': True, 'value': 6862, 'stdout': '6862\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08219337463378906}",1,Compute: 73 * 94
442,add,8,93933447,93933447,1,93933447,1,"{'ok': True, 'value': 93933447, 'stdout': '93933447\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07588458061218262}",1,Compute: 25649514 + 68283933
443,lcs,8,4,2,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07732224464416504}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badbddbd""
T = ""dabaaaabd"""
444,ilp_prod,32,310,324,0,396,0,"{'ok': True, 'value': 310, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/35c5ddc7157d4938b8c71680594c2e87-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/35c5ddc7157d4938b8c71680594c2e87-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 338.78 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -270 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -310 found by DiveCoefficient after 6 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 5\nCbc0013I At root node, 3 cuts changed objective from -327.00887 to -310 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 9 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 11 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -310, took 6 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -327.009 to -310\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 9 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 11 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                310.00000000\nEnumerated nodes:               0\nTotal iterations:               6\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n310\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16003179550170898}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [40, 75, 66, 64, 5, 13]
consumption (rows=resources) = [[19, 4, 18, 32, 29, 11], [16, 1, 32, 4, 22, 29], [10, 8, 7, 12, 27, 9], [4, 27, 27, 16, 11, 24]]
capacity = [87, 74, 71, 80]
upper_bounds = [4, 3, 3, 3, 3, 3]"
445,ilp_partition,4,1,3,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0718691349029541}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 6, 8, 2]"
446,mul,8,4022689654487309,4020987567689889,0,4020957894959789,0,"{'ok': True, 'value': 4022689654487309, 'stdout': '4022689654487309\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08158183097839355}",1,Compute: 47154181 * 85309289
447,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08221101760864258}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 6, 4, 10]"
448,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07668805122375488}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabc""
T = ""bcc"""
449,lcs,8,3,4,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08078265190124512}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdddddab""
T = ""dcbabba"""
450,rod,8,40,37,0,36,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07734394073486328}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 1, 3, 11, 11, 15, 7, 8]"
451,mul,16,26247758573390687232654404752528,26246795882656996492846795882656996,0,2619996376943956922828640,0,"{'ok': True, 'value': 26247758573390687232654404752528, 'stdout': '26247758573390687232654404752528\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08752870559692383}",1,Compute: 3978050126675336 * 6598146764763698
452,lcs,4,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09056377410888672}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acca""
T = ""dbb"""
453,sub,4,2045,2045,1,2045,1,"{'ok': True, 'value': 2045, 'stdout': '2045\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09481215476989746}",1,Compute: 7609 - 5564
454,sub,4,199,199,1,199,1,"{'ok': True, 'value': 199, 'stdout': '199\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07687234878540039}",1,Compute: 9009 - 8810
455,ilp_assign,32,110,-1,0,152,0,"{'ok': True, 'value': 110, 'stdout': '110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37224602699279785}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[95, 89, 62, 4, 3, 94, 73], [5, 31, 48, 43, 32, 87, 20], [60, 61, 96, 1, 72, 36, 7], [4, 39, 71, 18, 11, 56, 83], [72, 54, 43, 52, 26, 32, 34], [11, 83, 36, 56, 21, 82, 17], [23, 76, 22, 33, 87, 35, 93]]"
456,knap,4,11,12,0,12,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09073781967163086}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 7, 7]
V = [6, 1, 5, 5]
C = 8"
457,ilp_prod,8,85,104,0,104,0,"{'ok': True, 'value': 85, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3899f1951d9e4b8fa577298ac859070f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3899f1951d9e4b8fa577298ac859070f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 94.129 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -85 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 3 columns\nCbc0031I 4 added rows had average density of 3.5\nCbc0013I At root node, 12 cuts changed objective from -94.129032 to -85.429744 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 14 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 12 row cuts average 3.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -85, took 8 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -94.129 to -85.4297\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 14 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 12 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                85.00000000\nEnumerated nodes:               0\nTotal iterations:               8\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1745004653930664}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 15, 20, 14]
consumption (rows=resources) = [[1, 6, 4, 7], [1, 7, 5, 3], [5, 1, 5, 2], [6, 7, 1, 5]]
capacity = [23, 21, 24, 27]
upper_bounds = [4, 3, 4, 3]"
458,mul,4,59228486,59228486,1,58209596,0,"{'ok': True, 'value': 59228486, 'stdout': '59228486\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09085798263549805}",1,Compute: 9587 * 6178
459,ilp_assign,32,158,199,0,155,0,"{'ok': True, 'value': 158, 'stdout': '158\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3926715850830078}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[30, 57, 88, 6, 81, 65, 60], [42, 39, 57, 65, 7, 75, 47], [80, 61, 62, 30, 79, 81, 28], [93, 11, 39, 35, 6, 44, 12], [43, 63, 67, 21, 21, 82, 30], [69, 6, 51, 88, 24, 34, 46], [65, 25, 29, 91, 68, 69, 11]]"
460,ilp_assign,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41132473945617676}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [1, 1]]"
461,add,32,69427519221367702546490830358939,70437519221376662946490830358939,0,69427519221367692546490830458939,0,"{'ok': True, 'value': 69427519221367702546490830358939, 'stdout': '69427519221367702546490830358939\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08167529106140137}",1,Compute: 25375998895577647457033888319100 + 44051520325790055089456942039839
462,sub,32,47161659588755788203363195038935,47161659588755788203363195038935,1,47161659588755788137363195038935,0,"{'ok': True, 'value': 47161659588755788203363195038935, 'stdout': '47161659588755788203363195038935\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07790827751159668}",1,Compute: 71220463469086731921802945696749 - 24058803880330943718439750657814
463,add,2,91,91,1,91,1,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08001303672790527}",1,Compute: 80 + 11
464,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08052444458007812}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""accb""
T = ""dcbb"""
465,sub,32,60294627598833819870345492825519,60294627598833817870345492825519,0,82235627598833819870345492825519,0,"{'ok': True, 'value': 60294627598833819870345492825519, 'stdout': '60294627598833819870345492825519\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0771934986114502}",1,Compute: 84673215012462337595477245001374 - 24378587413628517725131752175855
466,knap,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08795428276062012}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 1]
V = [3, 1, 7]
C = 4"
467,mul,4,28448448,28448048,0,28410752,0,"{'ok': True, 'value': 28448448, 'stdout': '28448448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09307861328125}",1,Compute: 8328 * 3416
468,ilp_assign,2,6,6,1,8,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39853382110595703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [5, 2]]"
469,rod,2,8,8,1,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08421850204467773}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
470,sub,16,3698577758109634,3698577758109634,1,3698577758109634,1,"{'ok': True, 'value': 3698577758109634, 'stdout': '3698577758109634\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08647346496582031}",1,Compute: 5998434158839146 - 2299856400729512
471,rod,4,16,15,0,16,1,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08377552032470703}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 7, 7, 7]"
472,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08253359794616699}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabc""
T = ""cab"""
473,ilp_partition,32,0,2,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0308001041412354}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 9, 73, 27, 11, 5, 8, 14, 6, 30, 6, 59, 82, 10, 57, 33, 96, 14, 36, 21, 18, 48, 89, 50]"
474,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07399392127990723}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 4, 3, 5]"
475,add,32,93609394972052552377051788870961,936093975186391972791929198709621,0,93609394972052552377051888870961,0,"{'ok': True, 'value': 93609394972052552377051788870961, 'stdout': '93609394972052552377051788870961\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07738137245178223}",1,Compute: 61629991553492842567428379159141 + 31979403418559709809623409711820
476,rod,32,864,254,0,274,0,"{'ok': True, 'value': 864, 'stdout': '864\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08812856674194336}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [27, 11, 46, 80, 17, 10, 33, 26, 14, 7, 54, 68, 45, 93, 78, 54, 23, 67, 22, 35, 3, 32, 65, 61, 2, 52, 12, 72, 31, 29, 94, 50]"
477,knap,4,25,17,0,18,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07836127281188965}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 4, 7, 3]
V = [1, 5, 13, 12]
C = 10"
478,sub,8,61870820,61870820,1,61870820,1,"{'ok': True, 'value': 61870820, 'stdout': '61870820\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0884697437286377}",1,Compute: 84865227 - 22994407
479,add,2,116,116,1,116,1,"{'ok': True, 'value': 116, 'stdout': '116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09494280815124512}",1,Compute: 19 + 97
480,ilp_prod,2,21,23,0,24,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9625df5e74c24e839a7881ee7bda182a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9625df5e74c24e839a7881ee7bda182a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 22.5 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -21 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -21, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -22.5 to -21\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16547775268554688}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[3, 2], [1, 2]]
capacity = [10, 10]
upper_bounds = [3, 5]"
481,sub,8,19793031,19793031,1,19793031,1,"{'ok': True, 'value': 19793031, 'stdout': '19793031\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07924246788024902}",1,Compute: 31665872 - 11872841
482,rod,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09738898277282715}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 5]"
483,sub,4,2612,2612,1,2612,1,"{'ok': True, 'value': 2612, 'stdout': '2612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07588529586791992}",1,Compute: 5898 - 3286
484,sub,8,68601129,68601129,1,68601129,1,"{'ok': True, 'value': 68601129, 'stdout': '68601129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07195234298706055}",1,Compute: 88678478 - 20077349
485,mul,32,5426229554265516627366122134337752500518063525306691881382539244,not computable without computational tools,0,5420482855295745633938986699348992628896,0,"{'ok': True, 'value': 5426229554265516627366122134337752500518063525306691881382539244, 'stdout': '5426229554265516627366122134337752500518063525306691881382539244\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07148861885070801}",1,Compute: 77101560009372419926248951170438 * 70377688254373937175946778262738
486,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07026362419128418}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""cd"""
487,ilp_partition,32,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1064150333404541}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [90, 41, 44, 64, 33, 25, 74, 29, 88, 23, 54, 72, 40, 6, 12, 88, 68, 3, 29, 47, 54, 26, 10, 49]"
488,knap,8,93,72,0,72,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08147096633911133}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 7, 6, 3, 9, 15, 11, 13]
V = [4, 23, 25, 25, 9, 10, 3, 20]
C = 36"
489,mul,16,11487324550235069012545827639544,not feasible to compute manually{'ok': True, 'value': 11487324550235069012545827639544, 'stdout': '11487324550235069012545827639544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0797114372253418}",1,Compute: 6139099261826504 * 1871174265199511
490,rod,16,336,175,0,125,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08962368965148926}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [9, 42, 5, 34, 8, 8, 47, 4, 8, 10, 25, 40, 20, 2, 29, 7]"
491,lcs,16,8,7,0,7,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07572746276855469}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abacccdcbdbabbdb""
T = ""bdabbdabccababa"""
492,rod,4,48,36,0,36,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07172226905822754}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 12, 11, 7]"
493,ilp_assign,8,26,25,0,41,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3701763153076172}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 14, 8, 11, 14, 19, 4], [11, 3, 16, 20, 16, 10, 8], [13, 23, 2, 12, 11, 6, 3], [18, 9, 15, 1, 20, 21, 6], [5, 24, 18, 19, 11, 22, 24], [15, 23, 3, 13, 9, 15, 10], [1, 13, 1, 15, 4, 5, 10]]"
494,rod,4,24,24,1,18,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08292508125305176}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 7, 3, 11]"
495,mul{'ok': True, 'value': 6655668900731876, 'stdout': '6655668900731876\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07887887954711914}",1,Compute: 78814838 * 84446902
496,mul,8,1738713507180702,0,0,1738939667975122,0,"{'ok': True, 'value': 1738713507180702, 'stdout': '1738713507180702\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08779191970825195}",1,Compute: 46950878 * 37032609
497,add,4,9911,9911,1,9911,1,"{'ok': True, 'value': 9911, 'stdout': '9911\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0817255973815918}",1,Compute: 2115 + 7796
498,knap,4,24,24,1,24,1,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07918930053710938}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 5, 5]
V = [7, 11, 13, 9]
C = 8"
499,add,4,6207,6207,1,6207,1,"{'ok': True, 'value': 6207, 'stdout': '6207\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10201621055603027}",1,Compute: 1004 + 5203
500,sub,32,36266642324715381722073065840218,36266634524715381721073065840218,0,36266642324715381722073066148218,0,"{'ok': True, 'value': 36266642324715381722073065840218, 'stdout': '36266642324715381722073065840218\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09765934944152832}",1,Compute: 76231290968983448276220373478643 - 39964648644268066554147307638425
501,mul,8,2776688555475744,2777777777777776,0,277538223359024,0,"{'ok': True, 'value': 2776688555475744, 'stdout': '2776688555475744\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07876157760620117}",1,Compute: 54034344 * 51387476
502,sub,32,31232326505906304312329506333822,31232326505906304312329506333822,1,31232326505906298312329506333822,0,"{'ok': True, 'value': 31232326505906304312329506333822, 'stdout': '31232326505906304312329506333822\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08505082130432129}",1,Compute: 59525917903680137268337403725103 - 28293591397773832956007897391281
503,mul,16,56729778541842019130387777425728,567123456789012345678901234567890,0,56713727822889664578688,0,"{'ok': True, 'value': 56729778541842019130387777425728, 'stdout': '56729778541842019130387777425728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08838438987731934}",1,Compute: 6548224808248931 * 8663382856125888
504,ilp_prod,4,32,21,0,36,0,"{'ok': True, 'value': 32, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/dd49feb188b34f56a376d3d711dcf97c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/dd49feb188b34f56a376d3d711dcf97c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 32 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -32 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -32, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -32 to -32\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                32.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16497373580932617}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4, 5]
consumption (rows=resources) = [[3, 1, 2], [2, 1, 3], [2, 1, 4]]
capacity = [8, 12, 14]
upper_bounds = [3, 8, 3]"
505,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08571887016296387}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""baa"""
506,ilp_prod,32,252,378,0,340,0,"{'ok': True, 'value': 252, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/63471a473b754c539437a59be1f8f600-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/63471a473b754c539437a59be1f8f600-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 293.828 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -252 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -269 to -269 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -252, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -270.703 to -269\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                252.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n252\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16052913665771484}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [92, 4, 6, 29, 21, 34]
consumption (rows=resources) = [[21, 15, 13, 29, 19, 31], [27, 16, 20, 16, 25, 6], [11, 5, 25, 22, 6, 1], [2, 9, 25, 19, 27, 13]]
capacity = [121, 77, 75, 84]
upper_bounds = [3, 4, 3, 3, 3, 3]"
507,ilp_assign,32,116,100,0,144,0,"{'ok': True, 'value': 116, 'stdout': '116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39151668548583984}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[43, 42, 18, 11, 41, 14, 40], [6, 86, 12, 68, 84, 63, 4], [47, 73, 75, 13, 36, 52, 47], [76, 73, 90, 21, 14, 82, 20], [90, 38, 35, 3, 83, 47, 92], [43, 63, 72, 88, 44, 66, 23], [29, 59, 25, 48, 78, 4, 10]]"
508,sub,2,49,49,1,49,1,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08898639678955078}",1,Compute: 72 - 23
509,add,4,10474,10474,1,10474,1,"{'ok': True, 'value': 10474, 'stdout': '10474\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08388376235961914}",1,Compute: 4583 + 5891
510,rod,4,36,12,0,36,1,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08218955993652344}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 1, 9, 12]"
511,ilp_prod,4,55,43,0,43,0,"{'ok': True, 'value': 55, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/beab98d3974c4eccbc59841daeee21b8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/beab98d3974c4eccbc59841daeee21b8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 56.6667 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -55 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -55, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -56.6667 to -55\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                55.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n55\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1683332920074463}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5, 11]
consumption (rows=resources) = [[3, 1, 1], [4, 3, 2], [2, 2, 2]]
capacity = [10, 11, 13]
upper_bounds = [3, 3, 5]"
512,lcs,32,18,10,0,10,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08684349060058594}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccdabaadbacbcaddcaabcaacbbbbcaa""
T = ""daadbcddcdbabdbacacddbdbadaaccc"""
513,mul,8,2088613591272000,2090926800000000,0,2089694976440000,0,"{'ok': True, 'value': 2088613591272000, 'stdout': '2088613591272000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08564591407775879}",1,Compute: 21177920 * 98622225
514,mul{'ok': True, 'value': 21947464445775339272309214115454, 'stdout': '21947464445775339272309214115454\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08233284950256348}",1,Compute: 8078158768089262 * 2716889464029017
515,ilp_assign,8,19,20,0,46,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42829227447509766}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 6, 15, 9, 6, 2, 12], [22, 10, 24, 11, 21, 9, 8], [13, 1, 2, 22, 4, 5, 20], [11, 19, 6, 1, 2, 18, 6], [19, 5, 3, 5, 5, 18, 6], [14, 13, 1, 12, 10, 12, 19], [1, 8, 19, 1, 12, 12, 11]]"
516,knap,32,1629,1225,0,1024,0,"{'ok': True, 'value': 1629, 'stdout': '1629\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09160089492797852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [63, 30, 8, 6, 51, 12, 64, 44, 60, 48, 41, 27, 6, 3, 27, 43, 41, 30, 60, 44, 43, 21, 20, 20, 43, 28, 49, 45, 55, 47, 48, 43]
V = [1, 3, 11, 97, 99, 42, 62, 61, 76, 53, 31, 3, 122, 119, 68, 102, 68, 105, 112, 110, 90, 24, 12, 68, 68, 24, 109, 117, 90, 76, 111, 64]
C = 585"
517,add,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07796502113342285}",1,Compute: 15 + 43
518,knap,8,121,72,0,78,0,"{'ok': True, 'value': 121, 'stdout': '121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07898497581481934}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 5, 5, 16, 2, 11, 8, 6]
V = [30, 21, 29, 15, 18, 13, 7, 23]
C = 33"
519,add,32,121159019639525074677115845348310,0,0,121159019639525074676645845170310,0,"{'ok': True, 'value': 121159019639525074677115845348310, 'stdout': '121159019639525074677115845348310\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07898449897766113}",1,Compute: 70912182501578528487148746920320 + 50246837137946546189967098427990
520,sub,2,78,78,1,78,1,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07844376564025879}",1,Compute: 88 - 10
521,rod,8,160,140,0,140,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07961249351501465}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 10, 24, 2, 8, 4, 22, 6]"
522,sub,4,6314,6314,1,6314,1,"{'ok': True, 'value': 6314, 'stdout': '6314\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08471870422363281}",1,Compute: 9516 - 3202
523,mul,16,42416786593112765373419822097580,42409999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,424287267694399999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,"{'ok': True, 'value': 42416786593112765373419822097580, 'stdout': '42416786593112765373419822097580\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07796478271484375}",1,Compute: 6099608163780290 * 6954018267105302
524,rod,8,96,96,1,95,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08193445205688477}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 17, 11, 16, 21, 24, 15, 24]"
525,knap,8,90,76,0,79,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0786125659942627}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 14, 7, 15, 7, 13, 3, 4]
V = [26, 8, 30, 11, 3, 13, 15, 16]
C = 39"
526,sub,16,772088485332852,772088485332852,1,772088485332852,1,"{'ok': True, 'value': 772088485332852, 'stdout': '772088485332852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08049130439758301}",1,Compute: 2135370349478251 - 1363281864145399
527,rod,2,8,6,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07113432884216309}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 3]"
528,rod,4,14,14,1,13,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0802469253540039}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 7, 11, 7]"
529,ilp_prod,16,153,621,0,218,0,"{'ok': True, 'value': 153, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bf640a17638744e68718c5641d78857f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bf640a17638744e68718c5641d78857f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 164.426 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -129 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 5.5\nCbc0013I At root node, 4 cuts changed objective from -164.42593 to -153.0001 in 65 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 200 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 64 row cuts average 4.6 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0010I After 0 nodes, 1 on tree, -129 best solution, best possible -153.0001 (0.01 seconds)\nCbc0012I Integer solution of -131 found by rounding after 251 iterations and 1 nodes (0.01 seconds)\nCbc0012I Integer solution of -153 found by DiveCoefficient after 251 iterations and 1 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -153, took 251 iterations and 1 nodes (0.01 seconds)\nCbc0032I Strong branching done 8 times (15 iterations), fathomed 0 nodes and fixed 0 variables\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -164.426 to -153\nProbing was tried 65 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 66 times and created 200 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 65 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 65 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 65 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 65 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 66 times and created 64 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                153.00000000\nEnumerated nodes:               1\nTotal iterations:               251\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.02\n\n153\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16968750953674316}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 24, 43, 20, 43, 21]
consumption (rows=resources) = [[5, 14, 13, 8, 4, 8], [9, 15, 5, 10, 5, 9], [2, 1, 8, 12, 11, 4], [15, 2, 9, 5, 16, 7]]
capacity = [46, 53, 37, 38]
upper_bounds = [3, 3, 3, 3, 3, 5]"
530,rod,4,44,44,1,40,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0765070915222168}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 11, 11, 7]"
531,sub,2,28,28,1,28,1,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0801546573638916}",1,Compute: 80 - 52
532,add,2,101,101,1,101,1,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0900726318359375}",1,Compute: 74 + 27
533,lcs,16,7,6,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07032060623168945}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcadadcacaacaaaa""
T = ""dcaababbbdcdbad"""
534,lcs,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08658576011657715}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcac""
T = ""cbb"""
535,ilp_partition,8,0,4,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10647845268249512}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 24, 20, 13, 22, 14, 12, 10]"
536,knap,8,62,50,0,53,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0730123519897461}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 14, 6, 7, 1, 12, 16, 5]
V = [18, 6, 18, 15, 1, 10, 14, 1]
C = 33"
537,sub,8,32845797,32845797,1,32845797,1,"{'ok': True, 'value': 32845797, 'stdout': '32845797\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07595396041870117}",1,Compute: 56176662 - 23330865
538,rod,8,184,161,0,161,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07814979553222656}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 13, 21, 16, 8, 13, 21, 24]"
539,rod,16,264,192,0,159,0,"{'ok': True, 'value': 264, 'stdout': '264\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07053828239440918}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [12, 33, 39, 26, 21, 7, 11, 8, 36, 10, 31, 10, 1, 39, 3, 20]"
540,ilp_partition,8,1,3,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07245779037475586}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 9, 6, 11, 15, 3, 12, 12]"
541,ilp_partition,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07063126564025879}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 2, 2]"
542,ilp_partition,8,1,3,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08010029792785645}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 7, 12, 1, 10, 20, 14, 24]"
543,sub,8,65171668,65171668,1,65171668,1,"{'ok': True, 'value': 65171668, 'stdout': '65171668\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0780951976776123}",1,Compute: 79823532 - 14651864
544,ilp_assign,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36322450637817383}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5], [4, 1]]"
545,rod,16,272,185,0,147,0,"{'ok': True, 'value': 272, 'stdout': '272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07181525230407715}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [15, 34, 9, 31, 20, 38, 3, 29, 46, 29, 35, 10, 42, 33, 25, 6]"
546,ilp_partition,2,3,3,1,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06951689720153809}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 1, 4]"
547,sub,4,1093,1093,1,1093,1,"{'ok': True, 'value': 1093, 'stdout': '1093\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08956742286682129}",1,Compute: 8666 - 7573
548,add,32,70142496387448969673838437217611,171794346765714999999999999999999,0,171765007246178823967787672727621,0,"{'ok': True, 'value': 70142496387448969673838437217611, 'stdout': '70142496387448969673838437217611\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08749699592590332}",1,Compute: 11291390095414872699327693945557 + 58851106292034096974510743272054
549,lcs,4,3,2,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07349181175231934}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdad""
T = ""dabbd"""
550,add,16,10499277778271646,10499277778371646,0,28242213449910846,0,"{'ok': True, 'value': 10499277778271646, 'stdout': '10499277778271646\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08115935325622559}",1,Compute: 8527840481422844 + 1971437296848802
551,ilp_assign,32,115,198,0,152,0,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39914488792419434}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[70, 61, 61, 7, 73, 82, 52], [19, 69, 55, 16, 7, 2, 10], [88, 26, 95, 17, 74, 65, 89], [43, 36, 58, 94, 85, 19, 86], [38, 43, 89, 89, 44, 28, 36], [45, 12, 5, 51, 65, 70, 61], [59, 74, 26, 77, 10, 62, 16]]"
552,knap,32,1638,1267,0,1493,0,"{'ok': True, 'value': 1638, 'stdout': '1638\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09180545806884766}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [35, 37, 56, 21, 58, 53, 52, 39, 34, 3, 34, 47, 24, 43, 43, 60, 46, 58, 56, 24, 63, 45, 38, 24, 25, 62, 23, 54, 3, 1, 61, 21]
V = [63, 62, 116, 121, 102, 34, 105, 17, 5, 93, 66, 85, 42, 109, 85, 64, 22, 113, 8, 25, 95, 12, 82, 104, 27, 43, 24, 108, 110, 29, 109, 98]
C = 621"
553,rod,16,312,197,0,197,0,"{'ok': True, 'value': 312, 'stdout': '312\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10647082328796387}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [13, 39, 47, 39, 33, 36, 1, 15, 11, 1, 37, 29, 17, 19, 39, 39]"
554,ilp_prod,16,180,171,0,234,0,"{'ok': True, 'value': 180, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ba621b8886eb4783bc1f3ee8bc5848da-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ba621b8886eb4783bc1f3ee8bc5848da-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 192.047 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -150 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -180 found by DiveCoefficient after 60 iterations and 0 nodes (0.01 seconds)\nCbc0031I 4 added rows had average density of 6\nCbc0013I At root node, 4 cuts changed objective from -192.04724 to -180.00003 in 20 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 58 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 44 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 3 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -180, took 60 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -192.047 to -180\nProbing was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 20 times and created 58 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 20 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 20 times and created 44 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 20 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                180.00000000\nEnumerated nodes:               0\nTotal iterations:               60\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n180\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15643692016601562}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 23, 15, 36, 22, 45]
consumption (rows=resources) = [[16, 7, 2, 2, 9, 12], [6, 16, 10, 13, 8, 1], [5, 9, 6, 13, 10, 9], [1, 12, 4, 12, 11, 11]]
capacity = [46, 64, 47, 48]
upper_bounds = [3, 4, 6, 3, 4, 3]"
555,ilp_assign,4,9,9,1,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3612070083618164}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 2, 1, 3], [6, 1, 6, 10], [3, 8, 7, 11], [4, 7, 8, 4]]"
556,ilp_assign,8,30,23,0,47,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37149524688720703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 11, 6, 22, 1, 11, 5], [4, 17, 11, 20, 8, 4, 24], [24, 18, 4, 24, 22, 16, 17], [20, 23, 16, 10, 11, 20, 3], [7, 2, 21, 13, 9, 17, 23], [11, 8, 19, 11, 9, 24, 24], [23, 3, 15, 5, 2, 22, 4]]"
557,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08294010162353516}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbd""
T = ""bdbca"""
558,knap,16,391,299,0,299,0,"{'ok': True, 'value': 391, 'stdout': '391\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08112311363220215}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 20, 14, 32, 30, 12, 19, 31, 24, 7, 1, 22, 23, 30, 10, 18]
V = [7, 9, 58, 24, 64, 39, 20, 21, 10, 31, 21, 59, 5, 16, 46, 43]
C = 160"
559,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07912135124206543}",1,Compute: 21 - 20
560,ilp_assign,32,97,103,0,109,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4398922920227051}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[79, 5, 2, 71, 77, 96, 4], [90, 1, 50, 70, 56, 31, 58], [68, 12, 4, 54, 22, 57, 48], [66, 65, 37, 59, 87, 33, 55], [80, 2, 93, 12, 41, 61, 20], [53, 63, 96, 16, 16, 88, 89], [27, 16, 3, 66, 15, 20, 14]]"
561,add,16,14629106125867674,1462910992167714,0,14629106125867674,1,"{'ok': True, 'value': 14629106125867674, 'stdout': '14629106125867674\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09007859230041504}",1,Compute: 6471064307351005 + 8158041818516669
562,ilp_partition,4,2,2,1,1,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08977651596069336}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 8, 12, 9]"
563,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08835434913635254}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 19, 22, 22, 12, 12, 3, 14]"
564,ilp_assign,16,61,100,0,109,0,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39072513580322266}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 1, 12, 27, 42, 26, 23], [3, 4, 48, 40, 11, 23, 12], [30, 19, 40, 31, 42, 46, 21], [20, 42, 7, 24, 12, 32, 3], [45, 30, 28, 18, 24, 13, 1], [24, 16, 40, 34, 8, 14, 25], [20, 11, 2, 27, 40, 24, 40]]"
565,ilp_partition,16,0,4,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12104630470275879}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 34, 43, 2, 44, 44, 21, 32, 16, 24, 35, 22, 42, 38, 40, 4]"
566,lcs,16,9,7,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08034968376159668}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcacbbcabaddcbad""
T = ""cdaaabdaaddbacab"""
567,add,8,108732811,108732811,1,108732811,1,"{'ok': True, 'value': 108732811, 'stdout': '108732811\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08309197425842285}",1,Compute: 14266838 + 94465973
568,add,32,123267493193544257470276728410428,123267493193544261470312728450328,0,123267493193544261470116728449428,0,"{'ok': True, 'value': 123267493193544257470276728410428, 'stdout': '123267493193544257470276728410428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09318375587463379}",1,Compute: 61557229027054155794738807013545 + 61710264166490101675537921396883
569,mul,4,22115970,22115970,1,22094970,0,"{'ok': True, 'value': 22115970, 'stdout': '22115970\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09827923774719238}",1,Compute: 2727 * 8110
570,add,16,11306331226305740,1130633122632640,0,2708484621812644,0,"{'ok': True, 'value': 11306331226305740, 'stdout': '11306331226305740\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07892990112304688}",1,Compute: 9553162893881245 + 1753168332424495
571,lcs,16,8,7,0,7,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0887448787689209}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdaadbccabacccc""
T = ""adcccabdcbbadca"""
572,lcs,8,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08909153938293457}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdcdcab""
T = ""bbaaadbdb"""
573,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08992576599121094}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""aad"""
574,knap,32,1794,1029,0,1025,0,"{'ok': True, 'value': 1794, 'stdout': '1794\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12880468368530273}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 11, 49, 53, 64, 48, 36, 14, 21, 40, 2, 21, 51, 31, 55, 22, 54, 20, 16, 57, 46, 39, 22, 2, 8, 52, 53, 42, 34, 57, 46, 15]
V = [88, 99, 52, 51, 95, 2, 96, 89, 51, 64, 89, 39, 98, 23, 103, 125, 49, 102, 128, 105, 71, 11, 46, 106, 29, 107, 57, 46, 102, 94, 128, 8]
C = 545"
575,mul{'ok': True, 'value': 1295443579502725039544137065209756004868170640373117602172762160, 'stdout': '1295443579502725039544137065209756004868170640373117602172762160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08916211128234863}",1,Compute: 13571879305889620843645731887537 * 95450567331567514651440104101680
576,ilp_assign,32,136,100,0,191,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.8176300525665283}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[52, 2, 31, 57, 75, 11, 8], [74, 27, 76, 22, 80, 69, 70], [48, 22, 93, 25, 4, 61, 72], [80, 60, 69, 48, 76, 45, 86], [61, 9, 56, 64, 58, 78, 60], [52, 80, 18, 51, 88, 56, 5], [50, 35, 5, 38, 27, 8, 77]]"
577,ilp_assign,32,105,113,0,194,0,"{'ok': True, 'value': 105, 'stdout': '105\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38271307945251465}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[78, 2, 93, 20, 92, 49, 83], [89, 60, 47, 61, 37, 12, 70], [14, 81, 46, 96, 23, 69, 94], [78, 83, 96, 8, 46, 54, 45], [18, 92, 32, 91, 3, 76, 69], [62, 82, 17, 92, 79, 56, 31], [67, 73, 35, 20, 7, 86, 79]]"
578,lcs,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0923159122467041}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcc""
T = ""dacb"""
579,add,16,8615284584052797,8615284583652797,0,8615284584052797,1,"{'ok': True, 'value': 8615284584052797, 'stdout': '8615284584052797\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07985591888427734}",1,Compute: 4831101653605709 + 3784182930447088
580,ilp_prod,8,115,0,0,109,0,"{'ok': True, 'value': 115, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c023eef655cf4a0ab7e58fe30afe85c7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c023eef655cf4a0ab7e58fe30afe85c7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 118.667 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -115 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -118.66667 to -118.66667 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -115, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -118.667 to -118.667\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                115.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.23087048530578613}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 23, 9, 11]
consumption (rows=resources) = [[2, 3, 8, 6], [6, 5, 8, 6], [4, 3, 8, 3], [6, 4, 8, 3]]
capacity = [19, 30, 26, 21]
upper_bounds = [3, 5, 3, 3]"
581,ilp_partition,16,0,6,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11015796661376953}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 26, 7, 1, 8, 37, 2, 19, 3, 2, 25, 36, 40, 36, 10, 32]"
582,ilp_prod,8,63,90,0,69,0,"{'ok': True, 'value': 63, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ab6d457e653540e2bcb39e837565fa99-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ab6d457e653540e2bcb39e837565fa99-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 65.16 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -54 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -63 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -65.16 to -63 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 2.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -63, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -65.16 to -63\nProbing was tried 2 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                63.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1452343463897705}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 5, 18, 7]
consumption (rows=resources) = [[2, 7, 5, 4], [2, 7, 1, 8], [6, 1, 4, 5], [7, 8, 5, 2]]
capacity = [17, 18, 27, 28]
upper_bounds = [4, 3, 3, 3]"
583,rod,32,1728,249,0,294,0,"{'ok': True, 'value': 1728, 'stdout': '1728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08513426780700684}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [54, 34, 19, 88, 36, 91, 96, 94, 95, 64, 95, 93, 23, 52, 26, 38, 52, 82, 65, 26, 4, 9, 60, 47, 27, 51, 56, 5, 12, 48, 69, 26]"
584,ilp_assign,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39336061477661133}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 2], [6, 1]]"
585,add,8,146497742,146497742,1,146497742,1,"{'ok': True, 'value': 146497742, 'stdout': '146497742\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08802652359008789}",1,Compute: 52350548 + 94147194
586,mul,4,11582406,11782394,0,11589466,0,"{'ok': True, 'value': 11582406, 'stdout': '11582406\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07593250274658203}",1,Compute: 6919 * 1674
587,rod,4,48,48,1,36,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07114458084106445}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 2, 11, 9]"
588,lcs,32,18,12,0,12,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09744834899902344}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccbbbaadbdbaccdbacbbdaddcadcacb""
T = ""abbddaadccdddbbdaacbadadbdbabba"""
589,ilp_prod,8,72,87,0,100,0,"{'ok': True, 'value': 72, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b70582de11ce4c528f5c154b50e5196d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b70582de11ce4c528f5c154b50e5196d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 72 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -72 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -72, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -72 to -72\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                72.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1654360294342041}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 24, 13, 8]
consumption (rows=resources) = [[5, 6, 2, 2], [7, 6, 6, 5], [6, 1, 4, 5], [3, 3, 3, 8]]
capacity = [23, 18, 32, 24]
upper_bounds = [3, 3, 3, 3]"
590,rod,4,36,13,0,27,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07312417030334473}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 1, 3, 3]"
591,mul,2,1980,1980,1,1980,1,"{'ok': True, 'value': 1980, 'stdout': '1980\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0738077163696289}",1,Compute: 20 * 99
592,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07416844367980957}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""dcb"""
593,knap,32,1525,1099,0,1093,0,"{'ok': True, 'value': 1525, 'stdout': '1525\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07968449592590332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [42, 14, 12, 18, 33, 61, 35, 12, 10, 24, 26, 43, 23, 28, 33, 49, 25, 12, 34, 60, 5, 42, 23, 19, 59, 26, 32, 53, 3, 24, 21, 33]
V = [29, 5, 72, 97, 7, 3, 9, 48, 58, 51, 16, 66, 125, 106, 5, 29, 92, 64, 41, 61, 20, 17, 115, 95, 12, 96, 41, 109, 40, 52, 49, 124]
C = 467"
594,rod,32,1392,243,0,277,0,"{'ok': True, 'value': 1392, 'stdout': '1392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07480669021606445}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [32, 87, 88, 82, 72, 59, 66, 48, 24, 30, 76, 53, 87, 50, 42, 25, 66, 53, 77, 13, 25, 48, 33, 74, 82, 70, 50, 92, 1, 27, 7, 61]"
595,ilp_prod,16,196,270,0,183,0,"{'ok': True, 'value': 196, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d716178142054d6081e14f1ff03af45c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d716178142054d6081e14f1ff03af45c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 207.097 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -165 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -173 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -196 found by DiveCoefficient after 4 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 4\nCbc0013I At root node, 4 cuts changed objective from -207.09709 to -196 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 4 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 6 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -196, took 4 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -207.097 to -196\nProbing was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                196.00000000\nEnumerated nodes:               0\nTotal iterations:               4\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1510915756225586}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 15, 40, 45, 3, 8]
consumption (rows=resources) = [[14, 9, 7, 4, 11, 8], [11, 16, 13, 7, 8, 13], [3, 16, 16, 1, 15, 7], [1, 7, 8, 10, 6, 3]]
capacity = [63, 57, 57, 43]
upper_bounds = [4, 3, 3, 4, 3, 4]"
596,ilp_assign,32,106,100,0,117,0,"{'ok': True, 'value': 106, 'stdout': '106\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3703446388244629}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 74, 27, 96, 79, 19, 17], [20, 17, 65, 27, 50, 68, 55], [68, 39, 32, 8, 63, 18, 45], [88, 13, 54, 14, 70, 78, 10], [74, 81, 78, 42, 91, 32, 67], [30, 87, 13, 5, 5, 88, 92], [40, 53, 45, 13, 3, 3, 16]]"
597,ilp_partition,32,1,1,1,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.028391122817993}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 47, 28, 72, 63, 68, 60, 36, 88, 89, 26, 14, 20, 81, 12, 40, 39, 67, 56, 60, 73, 63, 25]"
598,ilp_prod,32,288,-1,0,408,0,"{'ok': True, 'value': 288, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/770098efd92b44c9a957f2b01d95f53c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/770098efd92b44c9a957f2b01d95f53c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 326.657 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -209 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 4 columns\nCbc0012I Integer solution of -285 found by DiveCoefficient after 289 iterations and 0 nodes (0.01 seconds)\nCbc0031I 4 added rows had average density of 6\nCbc0013I At root node, 4 cuts changed objective from -326.65695 to -310.9935 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 189 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -285 best solution, best possible -310.9935 (0.01 seconds)\nCbc0012I Integer solution of -288 found by rounding after 369 iterations and 6 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -288, took 381 iterations and 8 nodes (0.02 seconds)\nCbc0032I Strong branching done 22 times (45 iterations), fathomed 0 nodes and fixed 4 variables\nCbc0035I Maximum depth 2, 2 variables fixed on reduced cost\nCuts at root node changed objective from -326.657 to -310.994\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nGomory was tried 129 times and created 249 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                288.00000000\nEnumerated nodes:               8\nTotal iterations:               381\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.02\n\n288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1754148006439209}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [65, 50, 13, 91, 38, 79]
consumption (rows=resources) = [[12, 31, 7, 8, 29, 10], [24, 21, 25, 8, 9, 23], [31, 16, 27, 29, 3, 3], [12, 27, 11, 27, 11, 26]]
capacity = [72, 99, 93, 82]
upper_bounds = [3, 3, 3, 3, 3, 3]"
599,add,8,91962201,0,0,91962201,1,"{'ok': True, 'value': 91962201, 'stdout': '91962201\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08850717544555664}",1,Compute: 46506443 + 45455758
600,mul,2,3420,3420,1,3420,1,"{'ok': True, 'value': 3420, 'stdout': '3420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07953572273254395}",1,Compute: 45 * 76
601,ilp_prod,4,18,60,0,30,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/09e6757a7b024c00bc8a4f657d4c7111-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/09e6757a7b024c00bc8a4f657d4c7111-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 22.8462 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -18 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 10 cuts changed objective from -22.75 to -22.75 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 4 row cuts average 2.5 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 1.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 1.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -18, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -22.75 to -22.75\nProbing was tried 1 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1540374755859375}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 9, 3]
consumption (rows=resources) = [[3, 4, 1], [4, 3, 4], [2, 3, 2]]
capacity = [10, 9, 13]
upper_bounds = [3, 3, 3]"
602,knap,8,75,67,0,69,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08821606636047363}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 7, 10, 13, 9, 7, 12, 14]
V = [21, 2, 3, 13, 13, 11, 30, 6]
C = 44"
603,add,32,77510340023375471541048541869824,775103859333754745409885418700264,0,77410340023375471541048542879824,0,"{'ok': True, 'value': 77510340023375471541048541869824, 'stdout': '77510340023375471541048541869824\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08028578758239746}",1,Compute: 54687837303176941468267609650182 + 22822502720198530072780932219642
604,add,2,111,111,1,111,1,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08654594421386719}",1,Compute: 22 + 89
605,ilp_partition,32,1,14,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.040043592453003}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [30, 71, 26, 57, 18, 45, 51, 53, 3, 75, 15, 69, 10, 66, 33, 36, 4, 20, 60, 38, 96, 58, 2, 13]"
606,sub,32,2073501057509462988546865836787,210735429867498674986749867498674,0,20735110558113552988528566977887,0,"{'ok': True, 'value': 2073501057509462988546865836787, 'stdout': '2073501057509462988546865836787\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10256147384643555}",1,Compute: 54393652335986786133204236798674 - 52320151278477323144657370961887
607,knap,16,417,322,0,393,0,"{'ok': True, 'value': 417, 'stdout': '417\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08217120170593262}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 18, 14, 20, 10, 1, 26, 17, 16, 2, 3, 12, 29, 10, 15, 22]
V = [39, 51, 10, 61, 29, 35, 34, 5, 47, 39, 33, 30, 40, 43, 38, 36]
C = 108"
608,lcs,16,11,7,0,7,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08071112632751465}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adaabbcdbccccaad""
T = ""addaadbdbdacdccba"""
609,mul,4,72480000,72480000,1,72480000,1,"{'ok': True, 'value': 72480000, 'stdout': '72480000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0850365161895752}",1,Compute: 8000 * 9060
610,add,16,15307088527543793,1530709352543793,0,15307088527543793,1,"{'ok': True, 'value': 15307088527543793, 'stdout': '15307088527543793\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07917904853820801}",1,Compute: 9016596476847407 + 6290492050696386
611,mul,8,1062473512323944,-inf,0,1062194975946224,0,"{'ok': True, 'value': 1062473512323944, 'stdout': '1062473512323944\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08033347129821777}",1,Compute: 11103394 * 95689076
612,sub,16,2108560845280986,2108560845280986,1,2108560845280986,1,"{'ok': True, 'value': 2108560845280986, 'stdout': '2108560845280986\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08091950416564941}",1,Compute: 6815749479533315 - 4707188634252329
613,add,32,110014074139098790687633433527634,10,0,110014074140098790687396433911134,0,"{'ok': True, 'value': 110014074139098790687633433527634, 'stdout': '110014074139098790687633433527634\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08195304870605469}",1,Compute: 52239224965433536555818087153820 + 57774849173665254131815346373814
614,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43873000144958496}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6], [6, 1]]"
615,sub,16,6122959017497639,6122959017497619,0,6122959017497539,0,"{'ok': True, 'value': 6122959017497639, 'stdout': '6122959017497639\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07325124740600586}",1,Compute: 9649716290783764 - 3526757273286125
616,ilp_partition,8,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07795047760009766}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 1, 8, 20, 13, 5, 9, 24]"
617,add,32,101114658647774027444456791462691,101114658647773027444451010160811,0,101114658647773027444481414108291,0,"{'ok': True, 'value': 101114658647774027444456791462691, 'stdout': '101114658647774027444456791462691\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0735781192779541}",1,Compute: 24803205613361105999134964193934 + 76311453034412921445321827268757
618,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07403039932250977}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbd""
T = ""dcacb"""
619,rod,2,8,8,1,5,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08655476570129395}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 5]"
620,ilp_assign,8,34,24,0,48,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3776090145111084}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 11, 13, 22, 11, 13, 9], [23, 1, 7, 23, 15, 10, 13], [14, 24, 24, 22, 5, 6, 16], [7, 6, 20, 7, 3, 9, 17], [17, 6, 19, 6, 22, 16, 4], [16, 8, 14, 6, 4, 2, 17], [2, 23, 24, 3, 24, 24, 4]]"
621,ilp_assign,2,9,9,1,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3743269443511963}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [5, 4]]"
622,ilp_prod,4,49,49,1,57,0,"{'ok': True, 'value': 49, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0ea8b9e413bc4f26b8c36675031a7ca0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0ea8b9e413bc4f26b8c36675031a7ca0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 49 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -49 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -49, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -49 to -49\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                49.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14635729789733887}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 10, 9]
consumption (rows=resources) = [[1, 2, 2], [3, 3, 2], [2, 3, 2]]
capacity = [10, 14, 15]
upper_bounds = [4, 4, 5]"
623,lcs,8,4,3,0,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07190847396850586}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabccccc""
T = ""adbdcdc"""
624,ilp_assign,32,73,100,0,127,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36605095863342285}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[63, 58, 32, 22, 82, 77, 93], [94, 31, 80, 23, 52, 3, 73], [83, 18, 85, 90, 32, 59, 50], [48, 78, 88, 64, 9, 66, 74], [65, 43, 14, 27, 60, 15, 3], [96, 59, 1, 19, 64, 27, 10], [17, 55, 80, 76, 66, 3, 23]]"
625,knap,4,32,32,1,22,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07213187217712402}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 3, 6]
V = [12, 10, 10, 11]
C = 5"
626,sub,8,26525107,26525107,1,26525107,1,"{'ok': True, 'value': 26525107, 'stdout': '26525107\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07408523559570312}",1,Compute: 63557257 - 37032150
627,ilp_partition,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09277534484863281}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 2, 4]"
628,ilp_partition,32,1,4,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0346083641052246}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 13, 34, 15, 5, 18, 33, 73, 95, 72, 19, 88, 8, 4, 95, 24, 5, 90, 14, 6, 57, 48, 6, 2]"
629,mul,4,50759962,51179862,0,50619502,0,"{'ok': True, 'value': 50759962, 'stdout': '50759962\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0878763198852539}",1,Compute: 6418 * 7909
630,ilp_assign,32,136,132,0,208,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4096686840057373}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[59, 75, 18, 36, 2, 73, 62], [40, 82, 71, 93, 13, 14, 85], [39, 12, 25, 34, 32, 94, 42], [76, 82, 38, 85, 27, 73, 89], [14, 68, 83, 70, 58, 61, 47], [17, 54, 14, 50, 53, 86, 14], [8, 31, 57, 42, 70, 37, 52]]"
631,mul,16,8324994187396642450020481414200,0,0,83209871201926268060800000,0,"{'ok': True, 'value': 8324994187396642450020481414200, 'stdout': '8324994187396642450020481414200\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09212732315063477}",1,Compute: 1356611726935550 * 6136607860675044
632,ilp_prod,32,531,6,0,597,0,"{'ok': True, 'value': 531, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/00f12f803c1f471d8e9fb701336b6bc4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/00f12f803c1f471d8e9fb701336b6bc4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 575.228 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -505 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 5\nCbc0013I At root node, 4 cuts changed objective from -575.22798 to -557.48252 in 72 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 116 row cuts average 5.1 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 22 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0010I After 0 nodes, 1 on tree, -505 best solution, best possible -557.48252 (0.01 seconds)\nCbc0012I Integer solution of -511 found by rounding after 196 iterations and 1 nodes (0.01 seconds)\nCbc0004I Integer solution of -518 found after 278 iterations and 3 nodes (0.02 seconds)\nCbc0012I Integer solution of -524 found by DiveCoefficient after 282 iterations and 4 nodes (0.02 seconds)\nCbc0004I Integer solution of -531 found after 293 iterations and 4 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -531, took 293 iterations and 4 nodes (0.02 seconds)\nCbc0032I Strong branching done 16 times (34 iterations), fathomed 0 nodes and fixed 0 variables\nCbc0035I Maximum depth 1, 5 variables fixed on reduced cost\nCuts at root node changed objective from -575.228 to -557.483\nProbing was tried 72 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 98 times and created 184 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 72 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 72 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 72 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 72 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 98 times and created 94 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                531.00000000\nEnumerated nodes:               4\nTotal iterations:               293\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.02\n\n531\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18854308128356934}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [75, 82, 33, 68, 95, 45]
consumption (rows=resources) = [[21, 18, 24, 10, 7, 2], [29, 4, 22, 8, 14, 9], [12, 7, 8, 23, 19, 9], [18, 17, 3, 23, 25, 30]]
capacity = [104, 83, 86, 128]
upper_bounds = [3, 5, 3, 3, 4, 4]"
633,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09097504615783691}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 8, 11, 4]"
634,sub,8,26026548,26026548,1,26026548,1,"{'ok': True, 'value': 26026548, 'stdout': '26026548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09343862533569336}",1,Compute: 54504053 - 28477505
635,sub,16,500005848910306,500000000000006,0,500000000000006,0,"{'ok': True, 'value': 500005848910306, 'stdout': '500005848910306\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08162546157836914}",1,Compute: 4704994886308672 - 4204989037398366
636,knap,16,407,299,0,286,0,"{'ok': True, 'value': 407, 'stdout': '407\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10319757461547852}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 26, 24, 8, 10, 31, 25, 23, 18, 10, 9, 5, 10, 6, 17, 3]
V = [29, 46, 50, 45, 14, 61, 4, 26, 53, 3, 53, 55, 32, 14, 11, 44]
C = 123"
637,knap,4,27,27,1,17,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08854937553405762}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 3, 2]
V = [6, 4, 13, 14]
C = 6"
638,knap,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09041190147399902}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 4, 4]
V = [1, 5, 6]
C = 4"
639,knap,4,14,14,1,14,1,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0966806411743164}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 2, 8]
V = [5, 2, 9, 11]
C = 9"
640,mul,32,4647394059996771667484828612560727454228691735820981520727106677,not computable manually,0,4661959356943673472655295745633939987699328979628897724678403348327936,0,"{'ok': True, 'value': 4647394059996771667484828612560727454228691735820981520727106677, 'stdout': '4647394059996771667484828612560727454228691735820981520727106677\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07599139213562012}",1,Compute: 61120158326352069040367315309471 * 76037009511361804558977330343787
641,sub,8,58144257,58144257,1,58144257,1,"{'ok': True, 'value': 58144257, 'stdout': '58144257\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08008766174316406}",1,Compute: 99034975 - 40890718
642,ilp_prod,32,729,276,0,543,0,"{'ok': True, 'value': 729, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7f26e190e20d47709101081f3c2d95ab-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7f26e190e20d47709101081f3c2d95ab-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 744.333 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -729 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -744.33333 to -729 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -729, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -744.333 to -729\nProbing was tried 1 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                729.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n729\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16738176345825195}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 25, 81, 54, 15, 92]
consumption (rows=resources) = [[3, 5, 7, 19, 22, 23], [6, 27, 7, 11, 32, 18], [14, 24, 8, 28, 3, 8], [29, 32, 11, 27, 6, 18]]
capacity = [101, 66, 85, 106]
upper_bounds = [3, 3, 9, 3, 3, 3]"
643,add,32,53919060261758057530191361525779,53919059261758057529927361525779,0,53919060261758057530191361525779,1,"{'ok': True, 'value': 53919060261758057530191361525779, 'stdout': '53919060261758057530191361525779\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09565520286560059}",1,Compute: 31968065975515623236897443486581 + 21950994286242434293293918039198
644,knap,32,1777,1059,0,1200,0,"{'ok': True, 'value': 1777, 'stdout': '1777\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08306407928466797}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [26, 12, 50, 61, 43, 49, 16, 39, 47, 3, 21, 16, 3, 34, 42, 16, 31, 13, 60, 61, 63, 30, 1, 32, 37, 44, 29, 43, 52, 16, 26, 22]
V = [105, 17, 105, 117, 8, 36, 2, 48, 30, 117, 82, 114, 66, 6, 58, 106, 86, 75, 65, 120, 63, 112, 112, 68, 98, 85, 50, 27, 60, 120, 39, 11]
C = 519"
645,rod,8,184,161,0,118,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07896137237548828}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 9, 12, 9, 6, 6, 8, 15]"
646,add,32,168989528298833728991939670361127,,0,168989528308831729001339166361127,0,"{'ok': True, 'value': 168989528298833728991939670361127, 'stdout': '168989528298833728991939670361127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09475350379943848}",1,Compute: 92628739660253910124905664336201 + 76360788638579818867034006024926
647,mul,32,1145141577466809767771104374669738322395387086448731936538585813,not computable manually,0,11456493165486734228552957456339,0,"{'ok': True, 'value': 1145141577466809767771104374669738322395387086448731936538585813, 'stdout': '1145141577466809767771104374669738322395387086448731936538585813\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07958316802978516}",1,Compute: 36657629684414364306225821283109 * 31238833152206969911641544745457
648,sub,4,3834,3834,1,3834,1,"{'ok': True, 'value': 3834, 'stdout': '3834\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08356785774230957}",1,Compute: 7091 - 3257
649,add,8,174047442,174047442,1,174047442,1,"{'ok': True, 'value': 174047442, 'stdout': '174047442\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09651470184326172}",1,Compute: 88407344 + 85640098
650,sub,2,22,22,1,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0768733024597168}",1,Compute: 47 - 25
651,ilp_partition,4,3,1,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09037303924560547}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 8, 7, 8]"
652,lcs,8,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08759069442749023}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccacaaa""
T = ""abadddacb"""
653,rod,8,96,96,1,68,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08317136764526367}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 22, 19, 15, 9, 18, 6, 15]"
654,ilp_partition,16,0,4,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10729742050170898}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [32, 13, 15, 24, 31, 38, 24, 35, 28, 34, 19, 28, 17, 19, 32, 39]"
655,rod,4,20,13,0,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08897161483764648}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 5, 7, 6]"
656,add,4,16311,16311,1,16311,1,"{'ok': True, 'value': 16311, 'stdout': '16311\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0911557674407959}",1,Compute: 9743 + 6568
657,ilp_prod,32,361,396,0,345,0,"{'ok': True, 'value': 361, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6e62c4e2037f4544a1e0ecba1a6f8aa6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6e62c4e2037f4544a1e0ecba1a6f8aa6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 369.57 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -327 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 1 rows 2 columns\nCbc0012I Integer solution of -361 found by DiveCoefficient after 5 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 4\nCbc0013I At root node, 2 cuts changed objective from -369.56977 to -361 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 8 row cuts average 3.6 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -361, took 5 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -369.57 to -361\nProbing was tried 4 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 8 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                361.00000000\nEnumerated nodes:               0\nTotal iterations:               5\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n361\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1553192138671875}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [55, 33, 5, 87, 34, 33]
consumption (rows=resources) = [[32, 31, 22, 12, 21, 16], [31, 4, 22, 4, 2, 22], [2, 32, 28, 19, 2, 5], [6, 28, 2, 18, 2, 1]]
capacity = [92, 69, 106, 67]
upper_bounds = [3, 3, 3, 3, 4, 3]"
658,ilp_assign,32,108,125,0,148,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3673090934753418}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[53, 46, 48, 78, 88, 78, 44], [95, 8, 93, 32, 96, 35, 20], [40, 21, 38, 38, 57, 66, 4], [4, 44, 53, 86, 76, 8, 80], [25, 44, 29, 42, 94, 66, 71], [35, 10, 74, 12, 19, 42, 67], [22, 45, 74, 18, 3, 35, 79]]"
659,ilp_prod,16,203,117,0,239,0,"{'ok': True, 'value': 203, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e1ab904f2dad43e28f4bf49341145e81-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e1ab904f2dad43e28f4bf49341145e81-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 211.066 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -187 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -203 found by DiveCoefficient after 10 iterations and 0 nodes (0.00 seconds)\nCbc0031I 4 added rows had average density of 5.25\nCbc0013I At root node, 4 cuts changed objective from -210.5 to -203 in 6 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 11 row cuts average 5.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 21 row cuts average 5.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -203, took 10 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -210.5 to -203\nProbing was tried 6 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 6 times and created 11 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 6 times and created 21 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                203.00000000\nEnumerated nodes:               0\nTotal iterations:               10\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n203\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17528319358825684}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 15, 7, 39, 47, 23]
consumption (rows=resources) = [[2, 9, 16, 14, 4, 6], [9, 7, 8, 11, 6, 2], [2, 1, 7, 4, 2, 16], [3, 10, 7, 12, 14, 6]]
capacity = [47, 64, 42, 61]
upper_bounds = [7, 5, 3, 3, 4, 3]"
660,lcs,16,8,7,0,7,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09543991088867188}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaacbdbbbbaaddc""
T = ""aaaabdcadcabacc"""
661,ilp_partition,16,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09122729301452637}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 37, 17, 28, 4, 17, 7, 45, 46, 37, 25, 14, 35, 24, 14, 10]"
662,knap,8,99,75,0,72,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08433413505554199}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 11, 5, 11, 8, 5, 9, 6]
V = [8, 29, 31, 14, 12, 23, 16, 6]
C = 31"
663,ilp_partition,4,8,2,0,1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09703326225280762}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 1, 10, 9]"
664,mul,32,3908650383660901472787691118377770538632865665951568910954120842,not computable manually,0,390249285529574563393898669934899962899376468897344,0,"{'ok': True, 'value': 3908650383660901472787691118377770538632865665951568910954120842, 'stdout': '3908650383660901472787691118377770538632865665951568910954120842\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08179521560668945}",1,Compute: 72202116658689451468627836061499 * 54134844856940899192345297596158
665,knap,8,81,67,0,79,0,"{'ok': True, 'value': 81, 'stdout': '81\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0817253589630127}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 9, 10, 6, 6, 8, 5, 5]
V = [15, 17, 32, 20, 10, 18, 14, 6]
C = 28"
666,ilp_assign,4,21,27,0,19,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41015100479125977}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 9, 8, 10], [10, 4, 11, 7], [9, 5, 8, 4], [6, 9, 11, 1]]"
667,knap,2,8,8,1,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08098840713500977}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 3]
V = [6, 2, 8]
C = 5"
668,ilp_partition,4,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07679867744445801}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 9, 6]"
669,sub,8,47917174,47917174,1,47917174,1,"{'ok': True, 'value': 47917174, 'stdout': '47917174\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07417154312133789}",1,Compute: 75132161 - 27214987
670,rod,16,704,243,0,144,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08706808090209961}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 22, 19, 41, 28, 22, 42, 13, 41, 2, 42, 28, 10, 21, 5, 9]"
671,rod,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07436490058898926}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 4]"
672,rod,32,726,249,0,309,0,"{'ok': True, 'value': 726, 'stdout': '726\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08272910118103027}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [12, 36, 69, 6, 2, 60, 10, 8, 45, 82, 70, 5, 53, 91, 70, 68, 35, 4, 61, 30, 88, 11, 81, 69, 85, 2, 25, 44, 48, 96, 21, 91]"
673,lcs,32,20,16,0,12,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0897986888885498}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdbcdbadaddaadaabdbaaadccacddaa""
T = ""abdaddbabdaabbaaaacbcacbcbadabc"""
674,mul,2,1480,1480,1,1480,1,"{'ok': True, 'value': 1480, 'stdout': '1480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08765292167663574}",1,Compute: 40 * 37
675,sub,4,5404,5404,1,5404,1,"{'ok': True, 'value': 5404, 'stdout': '5404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09266281127929688}",1,Compute: 6822 - 1418
676,rod,2,4,4,1,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08133435249328613}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 3]"
677,ilp_assign,8,38,27,0,48,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.376025915145874}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 5, 10, 2, 14, 23, 3], [15, 19, 6, 3, 4, 13, 8], [10, 21, 4, 14, 21, 19, 10], [18, 1, 19, 2, 13, 24, 14], [17, 12, 8, 8, 6, 21, 21], [4, 4, 18, 20, 5, 10, 12], [16, 17, 8, 14, 5, 20, 20]]"
678,ilp_prod,2,18,18,1,18,1,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4b5df71ddf15480aa0667af55b55c67b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4b5df71ddf15480aa0667af55b55c67b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17257046699523926}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 5]
consumption (rows=resources) = [[2, 2], [2, 2]]
capacity = [6, 7]
upper_bounds = [3, 3]"
679,rod,32,2624,249,0,297,0,"{'ok': True, 'value': 2624, 'stdout': '2624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08184194564819336}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [82, 66, 28, 42, 40, 5, 32, 67, 32, 96, 86, 79, 64, 15, 72, 60, 36, 95, 81, 69, 84, 42, 33, 73, 77, 32, 5, 59, 43, 54, 60, 22]"
680,lcs,32,21,14,0,15,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08782005310058594}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabccadbcacabbdccaabccdacaccbdad""
T = ""dddcdbdcaddbccbabbdadcccdaaaccd"""
681,add,8,67359983,6730093,0,67359983,1,"{'ok': True, 'value': 67359983, 'stdout': '67359983\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08234095573425293}",1,Compute: 45417669 + 21942314
682,lcs,8,5,5,1,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10878419876098633}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadcbabd""
T = ""abacabbd"""
683,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08511638641357422}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccdcdab""
T = ""daabacab"""
684,ilp_prod,16,250,304,0,290,0,"{'ok': True, 'value': 250, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b79ab48eedb745259525a3d75f185b4e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b79ab48eedb745259525a3d75f185b4e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 260.286 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -250 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 3 cuts changed objective from -260.28571 to -250 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -250, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -260.286 to -250\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                250.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n250\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15917682647705078}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [48, 11, 30, 10, 10, 16]
consumption (rows=resources) = [[4, 6, 7, 7, 12, 3], [8, 9, 7, 7, 9, 3], [7, 16, 8, 3, 12, 1], [10, 6, 7, 1, 15, 12]]
capacity = [46, 57, 40, 55]
upper_bounds = [5, 3, 5, 6, 3, 4]"
685,knap,4,25,14,0,23,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08807826042175293}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 5, 1]
V = [14, 9, 9, 11]
C = 8"
686,ilp_prod,16,272,522,0,204,0,"{'ok': True, 'value': 272, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/126285c2639846beb68a5179b6e9865f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/126285c2639846beb68a5179b6e9865f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 286.26 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -210 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 4 columns\nCbc0012I Integer solution of -246 found by DiveCoefficient after 338 iterations and 0 nodes (0.02 seconds)\nCbc0031I 3 added rows had average density of 6\nCbc0013I At root node, 3 cuts changed objective from -286.26007 to -272.00612 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 207 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 99 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -246 best solution, best possible -272.00612 (0.02 seconds)\nCbc0012I Integer solution of -272 found by rounding after 339 iterations and 1 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -272, took 339 iterations and 1 nodes (0.02 seconds)\nCbc0032I Strong branching done 8 times (18 iterations), fathomed 0 nodes and fixed 0 variables\nCbc0035I Maximum depth 0, 2 variables fixed on reduced cost\nCuts at root node changed objective from -286.26 to -272.006\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nGomory was tried 101 times and created 207 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 101 times and created 102 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                272.00000000\nEnumerated nodes:               1\nTotal iterations:               339\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18666863441467285}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 32, 30, 17, 36, 11]
consumption (rows=resources) = [[6, 16, 5, 1, 2, 13], [5, 2, 7, 13, 7, 16], [1, 13, 4, 9, 15, 2], [11, 16, 2, 16, 5, 5]]
capacity = [54, 61, 52, 35]
upper_bounds = [3, 3, 8, 3, 3, 3]"
687,mul,8,585788309717932,584724969746752,0,58546389995552,0,"{'ok': True, 'value': 585788309717932, 'stdout': '585788309717932\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08840727806091309}",1,Compute: 11895173 * 49245884
688,ilp_assign,16,54,-1,0,100,0,"{'ok': True, 'value': 54, 'stdout': '54\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37048768997192383}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 16, 23, 41, 4, 4, 42], [29, 21, 35, 25, 3, 3, 34], [2, 12, 36, 5, 16, 32, 44], [36, 36, 33, 16, 4, 15, 29], [1, 9, 3, 11, 29, 16, 31], [7, 43, 46, 47, 21, 44, 35], [28, 42, 37, 29, 37, 16, 16]]"
689,sub,2,12,12,1,12,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0880732536315918}",1,Compute: 79 - 67
690,add,4,11669,11669,1,11669,1,"{'ok': True, 'value': 11669, 'stdout': '11669\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10230827331542969}",1,Compute: 2516 + 9153
691,rod,16,480,243,0,177,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07216024398803711}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 47, 31, 40, 48, 37, 27, 14, 14, 44, 1, 46, 14, 24, 48, 11]"
692,knap,32,1909,1007,0,1019,0,"{'ok': True, 'value': 1909, 'stdout': '1909\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09431958198547363}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [61, 9, 26, 33, 53, 27, 16, 56, 29, 59, 29, 33, 3, 39, 53, 50, 45, 40, 1, 30, 34, 52, 28, 9, 46, 1, 18, 57, 42, 1, 11, 8]
V = [70, 99, 113, 98, 113, 40, 30, 4, 107, 87, 54, 69, 93, 83, 114, 47, 13, 117, 77, 58, 83, 54, 123, 83, 124, 11, 88, 126, 91, 65, 78, 114]
C = 499"
693,mul{'ok': True, 'value': 18276489170606059196198822064768, 'stdout': '18276489170606059196198822064768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0979151725769043}",1,Compute: 9715099744491531 * 1881245653804928
694,ilp_assign,4,17,18,0,18,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4147830009460449}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 7, 3, 4], [5, 4, 12, 8], [11, 6, 5, 7], [10, 3, 2, 7]]"
695,ilp_assign,8,36,30,0,58,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39096546173095703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 2, 10, 15, 14, 8, 24], [24, 16, 1, 17, 20, 24, 13], [23, 11, 7, 19, 12, 10, 6], [6, 24, 23, 9, 7, 4, 12], [24, 13, 5, 10, 9, 23, 20], [6, 13, 1, 22, 3, 6, 13], [14, 3, 3, 22, 19, 8, 18]]"
696,knap,4,17,19,0,14,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0935049057006836}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 1, 8]
V = [9, 7, 3, 14]
C = 9"
697,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0829925537109375}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 5, 1]"
698,ilp_prod,2,15,24,0,18,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/665508bc67634b2ca1ddde0fbac4ca6f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/665508bc67634b2ca1ddde0fbac4ca6f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 2.9999\nCbc0012I Integer solution of -12 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -15 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -15 to -15 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -15, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -15 to -15\nProbing was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1663212776184082}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3]
consumption (rows=resources) = [[2, 2], [1, 3]]
capacity = [10, 10]
upper_bounds = [5, 3]"
699,mul,4,27392508,27917594,0,27394708,0,"{'ok': True, 'value': 27392508, 'stdout': '27392508\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08778214454650879}",1,Compute: 7293 * 3756
700,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11156749725341797}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""db"""
701,ilp_assign,8,39,37,0,50,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4199497699737549}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 23, 15, 22, 20, 9, 14], [2, 8, 19, 9, 7, 11, 22], [4, 23, 9, 16, 12, 10, 2], [9, 23, 4, 12, 10, 7, 11], [8, 8, 7, 7, 22, 13, 4], [18, 9, 22, 6, 12, 13, 1], [18, 22, 2, 18, 14, 22, 4]]"
702,add,16,18316131367908334,18316131367908334,1,18316131367908334,1,"{'ok': True, 'value': 18316131367908334, 'stdout': '18316131367908334\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0860605239868164}",1,Compute: 8661604300299705 + 9654527067608629
703,ilp_assign,16,48,10,0,75,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41602253913879395}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[42, 48, 34, 27, 42, 11, 28], [41, 2, 18, 17, 6, 1, 29], [19, 18, 24, 3, 27, 3, 40], [3, 13, 39, 1, 10, 6, 13], [33, 42, 26, 27, 45, 21, 7], [7, 42, 16, 21, 6, 41, 12], [12, 35, 16, 46, 32, 34, 40]]"
704,rod,32,1040,320,0,273,0,"{'ok': True, 'value': 1040, 'stdout': '1040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07625842094421387}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [24, 65, 89, 34, 58, 96, 14, 10, 60, 46, 38, 18, 39, 44, 11, 39, 46, 44, 50, 7, 22, 21, 73, 49, 6, 37, 8, 54, 43, 27, 56, 34]"
705,ilp_assign,16,83,100,0,101,0,"{'ok': True, 'value': 83, 'stdout': '83\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3920161724090576}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 18, 23, 26, 7, 21, 38], [10, 25, 33, 19, 17, 23, 11], [37, 4, 8, 13, 31, 6, 21], [15, 17, 29, 11, 28, 41, 14], [36, 34, 36, 30, 12, 32, 45], [9, 31, 31, 36, 47, 24, 44], [40, 44, 33, 45, 3, 14, 11]]"
706,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07525515556335449}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""bad"""
707,ilp_prod,32,581,,0,498,0,"{'ok': True, 'value': 581, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8ed226bf96524cdfb889c150e49e15fa-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8ed226bf96524cdfb889c150e49e15fa-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 634.358 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -581 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0031I 2 added rows had average density of 2.5\nCbc0013I At root node, 2 cuts changed objective from -634.35849 to -604.54717 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 1.0 elements, 5 column cuts (5 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -581, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -634.358 to -604.547\nProbing was tried 2 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                581.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n581\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15599274635314941}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 48, 34, 75, 83, 42]
consumption (rows=resources) = [[23, 13, 3, 25, 11, 19], [30, 11, 27, 17, 6, 19], [9, 9, 11, 25, 3, 27], [20, 7, 26, 21, 2, 19]]
capacity = [87, 68, 65, 108]
upper_bounds = [3, 6, 3, 3, 7, 3]"
708,rod,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08115553855895996}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
709,rod,16,752,192,0,243,0,"{'ok': True, 'value': 752, 'stdout': '752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08020615577697754}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [47, 19, 36, 45, 20, 27, 39, 21, 32, 46, 20, 4, 2, 32, 47, 9]"
710,ilp_partition,32,1,2,0,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0277373790740967}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 75, 83, 17, 65, 26, 36, 67, 54, 86, 63, 56, 91, 26, 11, 7, 72, 41, 76, 42, 2, 90, 61, 51]"
711,ilp_assign,32,142,100,0,209,0,"{'ok': True, 'value': 142, 'stdout': '142\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3715078830718994}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[85, 34, 60, 77, 32, 79, 55], [72, 47, 52, 74, 85, 71, 36], [6, 16, 43, 17, 67, 87, 23], [8, 10, 31, 30, 70, 89, 70], [96, 70, 61, 63, 66, 13, 46], [13, 43, 26, 58, 12, 12, 16], [82, 62, 86, 19, 61, 38, 12]]"
712,rod,2,4,2,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07306694984436035}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 1]"
713,rod,2,6,4,0,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08009743690490723}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 2]"
714,sub,16,5081554837446238,5081556837448,0,5081554837447238,0,"{'ok': True, 'value': 5081554837446238, 'stdout': '5081554837446238\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07301974296569824}",1,Compute: 7623151631030158 - 2541596793583920
715,add,4,13228,13228,1,13228,1,"{'ok': True, 'value': 13228, 'stdout': '13228\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07855820655822754}",1,Compute: 7640 + 5588
716,mul,32,2896241033413983276197977268621269470880189330358301310995208950,not feasible to compute manually{'ok': True, 'value': 2896241033413983276197977268621269470880189330358301310995208950, 'stdout': '2896241033413983276197977268621269470880189330358301310995208950\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07312893867492676}",1,Compute: 31510381252446534271900088488550 * 91913868328365999928030631287449
717,sub,4,6981,6981,1,6981,1,"{'ok': True, 'value': 6981, 'stdout': '6981\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07123279571533203}",1,Compute: 9706 - 2725
718,knap,4,19,20,0,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0726783275604248}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 7, 4]
V = [1, 12, 6, 7]
C = 10"
719,sub,16,7154514179942130,7154514180042130,0,7154514389312130,0,"{'ok': True, 'value': 7154514179942130, 'stdout': '7154514179942130\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07533931732177734}",1,Compute: 8902237489708006 - 1747723309765876
720,ilp_partition,32,0,2,0,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.03943133354187}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 71, 68, 1, 3, 84, 96, 80, 82, 63, 4, 51, 96, 70, 21, 80, 28, 6, 11, 80, 91, 61, 30, 51]"
721,rod,32,2848,243,0,243,0,"{'ok': True, 'value': 2848, 'stdout': '2848\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09219694137573242}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [89, 26, 24, 81, 32, 76, 53, 39, 40, 93, 1, 59, 8, 26, 59, 60, 4, 12, 18, 65, 48, 74, 54, 36, 21, 78, 65, 8, 41, 42, 39, 20]"
722,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08049392700195312}",1,Compute: 73 - 52
723,rod,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10319375991821289}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 5]"
724,add,16,8830030502432476,18836017534062876,0,8829929502432876,0,"{'ok': True, 'value': 8830030502432476, 'stdout': '8830030502432476\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09659647941589355}",1,Compute: 1267331892403372 + 7562698610029104
725,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07388544082641602}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 20, 4, 20, 6, 12, 9, 15]"
726,rod,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09505915641784668}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 5]"
727,ilp_assign,16,64,35,0,77,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39144229888916016}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[30, 9, 17, 8, 11, 24, 33], [46, 31, 38, 3, 36, 39, 12], [44, 46, 27, 41, 13, 18, 1], [41, 38, 23, 1, 43, 41, 21], [22, 7, 42, 13, 6, 35, 25], [3, 25, 46, 37, 19, 16, 9], [36, 7, 23, 36, 14, 45, 13]]"
728,mul,16,22960608095384222471090316488448,,0,229178379963769676864224,0,"{'ok': True, 'value': 22960608095384222471090316488448, 'stdout': '22960608095384222471090316488448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09650945663452148}",1,Compute: 3390669455891104 * 6771703462716312
729,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38802480697631836}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1], [3, 1]]"
730,rod,32,2016,225,0,225,0,"{'ok': True, 'value': 2016, 'stdout': '2016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09573936462402344}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [63, 71, 14, 31, 43, 81, 67, 43, 48, 92, 76, 54, 44, 90, 70, 69, 9, 68, 69, 39, 18, 47, 93, 31, 64, 82, 18, 84, 36, 11, 19, 42]"
731,ilp_partition,32,0,2,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0373802185058594}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 24, 17, 19, 67, 8, 71, 89, 57, 47, 76, 54, 28, 84, 31, 40, 41, 39, 82, 19, 63, 65, 37, 42]"
732,add,4,17146,17146,1,17146,1,"{'ok': True, 'value': 17146, 'stdout': '17146\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07296609878540039}",1,Compute: 7527 + 9619
733,mul,2,1768,1768,1,1768,1,"{'ok': True, 'value': 1768, 'stdout': '1768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07788777351379395}",1,Compute: 52 * 34
734,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08710384368896484}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 5, 1]"
735,sub,2,43,43,1,43,1,"{'ok': True, 'value': 43, 'stdout': '43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07866287231445312}",1,Compute: 79 - 36
736,ilp_prod,32,720,110,0,675,0,"{'ok': True, 'value': 720, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4709340a1d6c4dbd9c75300e2592fee6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4709340a1d6c4dbd9c75300e2592fee6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 737.643 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -720 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -737.64286 to -720 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -720, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -737.643 to -720\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                720.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17824840545654297}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 90, 19, 10, 29, 7]
consumption (rows=resources) = [[12, 5, 31, 26, 30, 12], [21, 14, 14, 29, 29, 14], [1, 1, 2, 16, 25, 2], [9, 3, 12, 19, 24, 15]]
capacity = [71, 125, 107, 123]
upper_bounds = [5, 8, 3, 3, 3, 5]"
737,mul,2,3015,3015,1,3015,1,"{'ok': True, 'value': 3015, 'stdout': '3015\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08311986923217773}",1,Compute: 45 * 67
738,sub,32,44283696323850401930937897831847,44283706323850401930937907831847,0,44283696323850401930937897831847,1,"{'ok': True, 'value': 44283696323850401930937897831847, 'stdout': '44283696323850401930937897831847\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08749246597290039}",1,Compute: 65390284752719029381515395890888 - 21106588428868627450577498059041
739,sub,4,7086,7086,1,7086,1,"{'ok': True, 'value': 7086, 'stdout': '7086\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08803963661193848}",1,Compute: 9072 - 1986
740,sub,32,32823395787203048006652357265044,32823395787203047978819757265044,0,53941795787203047986152357269044,0,"{'ok': True, 'value': 32823395787203048006652357265044, 'stdout': '32823395787203048006652357265044\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08713006973266602}",1,Compute: 56288287250404443531798507584830 - 23464891463201395525146150319786
741,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08443546295166016}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""a"""
742,ilp_prod,32,550,1000,0,597,0,"{'ok': True, 'value': 550, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a0f3dfe5c38a4c4184130ded08215278-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a0f3dfe5c38a4c4184130ded08215278-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 578.91 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -462 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -550 found by DiveCoefficient after 3 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 4\nCbc0013I At root node, 2 cuts changed objective from -578.91026 to -550 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -550, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -578.91 to -550\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                550.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n550\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15072178840637207}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [88, 29, 93, 61, 26, 66]
consumption (rows=resources) = [[15, 3, 14, 3, 18, 3], [4, 24, 13, 29, 14, 8], [23, 19, 13, 16, 11, 7], [27, 23, 30, 20, 19, 10]]
capacity = [71, 65, 72, 118]
upper_bounds = [3, 3, 3, 3, 3, 8]"
743,ilp_prod,4,45,60,0,42,0,"{'ok': True, 'value': 45, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/bce4a07d86f9444c9c86763001e2d0ff-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/bce4a07d86f9444c9c86763001e2d0ff-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 52.48 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -33 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -45 found by DiveCoefficient after 4 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 2.5\nCbc0013I At root node, 2 cuts changed objective from -52.48 to -45 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 6 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 6 row cuts average 2.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -45, took 4 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -52.48 to -45\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                45.00000000\nEnumerated nodes:               0\nTotal iterations:               4\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n45\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15926361083984375}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 9, 12]
consumption (rows=resources) = [[1, 3, 3], [3, 1, 4], [2, 3, 1]]
capacity = [13, 14, 9]
upper_bounds = [4, 3, 3]"
744,add,16,9080357612535050,90665459170744050,0,9080357611535050,0,"{'ok': True, 'value': 9080357612535050, 'stdout': '9080357612535050\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08403563499450684}",1,Compute: 2883778441790991 + 6196579170744059
745,rod,2,12,6,0,12,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07563614845275879}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 1]"
746,ilp_prod,32,437,-1,0,497,0,"{'ok': True, 'value': 437, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a4a1d36a7c1d48e4844c6f068077d43d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a4a1d36a7c1d48e4844c6f068077d43d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 465.141 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -310 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 3 columns\nCbc0012I Integer solution of -344 found by DiveCoefficient after 245 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 6\nCbc0013I At root node, 3 cuts changed objective from -465.14078 to -445.44822 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 174 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -344 best solution, best possible -445.44822 (0.01 seconds)\nCbc0012I Integer solution of -437 found by rounding after 247 iterations and 1 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -437, took 284 iterations and 2 nodes (0.01 seconds)\nCbc0032I Strong branching done 8 times (14 iterations), fathomed 1 nodes and fixed 0 variables\nCbc0035I Maximum depth 0, 3 variables fixed on reduced cost\nCuts at root node changed objective from -465.141 to -445.448\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 113 times and created 204 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                437.00000000\nEnumerated nodes:               2\nTotal iterations:               284\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n437\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16502046585083008}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [93, 72, 45, 37, 76, 65]
consumption (rows=resources) = [[13, 29, 13, 32, 5, 5], [18, 16, 31, 23, 16, 6], [21, 31, 9, 22, 13, 32], [9, 22, 14, 8, 14, 25]]
capacity = [122, 82, 124, 97]
upper_bounds = [4, 4, 3, 3, 5, 3]"
747,rod,8,44,34,0,39,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0846562385559082}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 3, 18, 15, 5, 4, 1, 17]"
748,knap,32,1690,1277,0,1050,0,"{'ok': True, 'value': 1690, 'stdout': '1690\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09310770034790039}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 31, 54, 28, 54, 9, 2, 54, 52, 61, 22, 56, 19, 24, 23, 11, 14, 7, 35, 25, 8, 38, 6, 35, 3, 38, 24, 40, 56, 34, 1, 37]
V = [60, 119, 43, 119, 10, 98, 125, 29, 72, 85, 9, 121, 78, 8, 48, 29, 53, 118, 50, 33, 80, 105, 14, 45, 71, 127, 12, 126, 109, 77, 7, 66]
C = 465"
749,ilp_prod,16,134,4,0,217,0,"{'ok': True, 'value': 134, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1637ec8995d9416ebea17d9ffedae9ca-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1637ec8995d9416ebea17d9ffedae9ca-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 138.5 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -93 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 3 columns\nCbc0012I Integer solution of -134 found by DiveCoefficient after 9 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 6\nCbc0013I At root node, 1 cuts changed objective from -138.5 to -134 in 7 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 12 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 16 row cuts average 5.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -134, took 9 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -138.5 to -134\nProbing was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 7 times and created 12 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 7 times and created 16 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                134.00000000\nEnumerated nodes:               0\nTotal iterations:               9\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n134\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16659808158874512}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 34, 32, 22, 29, 26]
consumption (rows=resources) = [[6, 3, 4, 5, 13, 9], [3, 10, 6, 16, 14, 8], [12, 9, 9, 11, 6, 9], [7, 4, 10, 13, 13, 11]]
capacity = [61, 38, 36, 47]
upper_bounds = [3, 3, 4, 3, 3, 4]"
750,ilp_prod,2,16,20,0,20,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/dd26923d0521464b8e80d7ff9466de85-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/dd26923d0521464b8e80d7ff9466de85-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 3.9999\nCbc0012I Integer solution of -16 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -16, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -16 to -16\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16706609725952148}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4]
consumption (rows=resources) = [[1, 2], [3, 2]]
capacity = [6, 6]
upper_bounds = [3, 3]"
751,add,16,11557561100251715,11557560990657215,0,11557561100251715,1,"{'ok': True, 'value': 11557561100251715, 'stdout': '11557561100251715\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07178139686584473}",1,Compute: 2139360784240622 + 9418200316011093
752,add,2,142,142,1,142,1,"{'ok': True, 'value': 142, 'stdout': '142\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08658504486083984}",1,Compute: 66 + 76
753,ilp_partition,8,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08705830574035645}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 10, 16, 9, 13, 23, 20, 8]"
754,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08560585975646973}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badacdba""
T = ""aacacbccd"""
755,knap,32,1743,1097,0,1047,0,"{'ok': True, 'value': 1743, 'stdout': '1743\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09581136703491211}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 62, 8, 28, 49, 36, 24, 55, 62, 5, 60, 64, 12, 4, 45, 21, 43, 43, 60, 48, 17, 52, 54, 19, 8, 53, 41, 8, 62, 58, 19, 14]
V = [40, 104, 30, 90, 57, 4, 96, 7, 27, 94, 91, 12, 109, 70, 94, 111, 26, 25, 41, 89, 89, 108, 30, 111, 30, 19, 78, 44, 100, 39, 106, 59]
C = 576"
756,ilp_partition,16,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08319616317749023}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 3, 15, 29, 27, 32, 47, 18, 19, 39, 6, 2, 17, 6, 7, 16]"
757,add,2,115,115,1,115,1,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09650206565856934}",1,Compute: 87 + 28
758,sub,32,46025238201622092048799832756006,46025219901622146962321427,0,46025238201622092048809832756006,0,"{'ok': True, 'value': 46025238201622092048799832756006, 'stdout': '46025238201622092048799832756006\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08680057525634766}",1,Compute: 66766875952478989509410770973427 - 20741637750856897460610938217421
759,ilp_assign,32,90,100,0,126,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39906835556030273}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 9, 49, 72, 30, 81, 64], [12, 52, 63, 30, 1, 94, 78], [51, 23, 68, 74, 48, 43, 83], [25, 91, 39, 5, 84, 78, 83], [11, 41, 62, 6, 22, 33, 9], [50, 61, 20, 75, 35, 50, 19], [69, 7, 24, 36, 89, 17, 96]]"
760,ilp_partition,8,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09275245666503906}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 5, 9, 1, 15, 11, 16, 12]"
761,lcs,32,17,13,0,12,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08411240577697754}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadccdacaccbbcbabbddaabbabdbddbb""
T = ""cbadcccddccdaadabccadcdbccacbdb"""
762,ilp_prod,16,176,232,0,228,0,"{'ok': True, 'value': 176, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f1fb776ca2334202ae1154fc8f2647d4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f1fb776ca2334202ae1154fc8f2647d4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 200.447 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -162 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -176 found by DiveCoefficient after 82 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 4.6666667\nCbc0013I At root node, 3 cuts changed objective from -200.44677 to -176.00007 in 31 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 67 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 26 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -176, took 82 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -200.447 to -176\nProbing was tried 31 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 31 times and created 67 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 31 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 31 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 31 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 31 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 31 times and created 26 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                176.00000000\nEnumerated nodes:               0\nTotal iterations:               82\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16521477699279785}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 32, 15, 40, 26, 20]
consumption (rows=resources) = [[2, 5, 1, 12, 15, 10], [10, 11, 6, 1, 10, 6], [1, 15, 15, 4, 14, 16], [3, 2, 15, 14, 8, 9]]
capacity = [40, 62, 60, 37]
upper_bounds = [6, 4, 3, 3, 3, 3]"
763,rod,2,6,6,1,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0837244987487793}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
764,ilp_prod,8,60,90,0,60,1,"{'ok': True, 'value': 60, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f4f6af542fff4320b28758530e8b8e2e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f4f6af542fff4320b28758530e8b8e2e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 63.3333 - 0.00 seconds\nCgl0004I processed model has 3 rows, 4 columns (4 integer (0 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 1.9999\nCbc0012I Integer solution of -60 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -60, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -63.3333 to -60\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                60.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1690216064453125}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 20, 10, 6]
consumption (rows=resources) = [[7, 6, 6, 7], [5, 4, 2, 3], [7, 6, 5, 6], [6, 1, 1, 1]]
capacity = [20, 24, 22, 20]
upper_bounds = [3, 3, 3, 3]"
765,mul,4,4871304,545188,0,4867464,0,"{'ok': True, 'value': 4871304, 'stdout': '4871304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08692622184753418}",1,Compute: 2088 * 2333
766,knap,32,1974,1377,0,1227,0,"{'ok': True, 'value': 1974, 'stdout': '1974\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11010503768920898}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 63, 46, 10, 42, 29, 5, 38, 6, 56, 34, 47, 9, 42, 12, 5, 50, 12, 52, 58, 28, 47, 4, 51, 58, 50, 26, 5, 31, 8, 38, 37]
V = [98, 119, 86, 106, 98, 30, 106, 117, 75, 121, 54, 2, 71, 104, 54, 110, 17, 81, 104, 123, 3, 101, 116, 60, 3, 43, 62, 54, 126, 76, 121, 63]
C = 510"
767,sub,4,4275,4275,1,4275,1,"{'ok': True, 'value': 4275, 'stdout': '4275\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08309817314147949}",1,Compute: 7249 - 2974
768,rod,4,48,48,1,48,1,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08757734298706055}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 12, 1, 12]"
769,knap,16,374,245,0,263,0,"{'ok': True, 'value': 374, 'stdout': '374\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09691452980041504}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 14, 20, 6, 14, 11, 16, 28, 21, 19, 11, 16, 32, 1, 9, 32]
V = [9, 1, 40, 57, 35, 26, 18, 44, 40, 18, 24, 42, 52, 38, 45, 58]
C = 127"
770,mul,4,8257665,8257665,1,8247365,0,"{'ok': True, 'value': 8257665, 'stdout': '8257665\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07253766059875488}",1,Compute: 7473 * 1105
771,ilp_partition,2,2,0,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08515524864196777}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 5, 6, 2]"
772,knap,2,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0793912410736084}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 1]
V = [4, 1, 1]
C = 4"
773,rod,4,28,28,1,10,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10808873176574707}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 8, 9, 3]"
774,ilp_partition,8,0,2,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07905268669128418}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 16, 12, 22, 16, 20, 23, 5]"
775,ilp_assign,32,99,100,0,195,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36399245262145996}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[71, 54, 15, 27, 47, 49, 24], [24, 52, 33, 80, 94, 20, 6], [47, 94, 87, 4, 34, 61, 42], [77, 22, 92, 79, 28, 86, 9], [90, 8, 25, 4, 64, 77, 46], [51, 62, 9, 12, 14, 90, 93], [31, 13, 31, 53, 28, 25, 95]]"
776,ilp_assign,8,31,-inf,0,50,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.391493558883667}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 23, 9, 11, 9, 15, 1], [11, 24, 11, 21, 8, 12, 24], [12, 12, 23, 13, 7, 1, 13], [21, 19, 18, 10, 13, 20, 1], [18, 4, 11, 1, 14, 5, 3], [5, 2, 22, 18, 10, 7, 21], [12, 8, 19, 3, 8, 22, 14]]"
777,ilp_prod,16,144,147,0,196,0,"{'ok': True, 'value': 144, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/214f02ea877a47a3b132fa48eec4657d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/214f02ea877a47a3b132fa48eec4657d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 145.903 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -131 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -144 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -145.90345 to -144 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 2.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -144, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -145.903 to -144\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                144.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n144\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18085026741027832}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 35, 13, 23, 48, 36]
consumption (rows=resources) = [[7, 9, 12, 8, 13, 12], [13, 11, 11, 14, 13, 10], [8, 4, 9, 3, 11, 15], [5, 16, 3, 9, 7, 6]]
capacity = [39, 49, 52, 33]
upper_bounds = [3, 3, 3, 3, 3, 3]"
778,ilp_assign,16,69,10,0,105,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3930180072784424}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 27, 43, 32, 31, 21, 47], [37, 11, 16, 23, 21, 40, 11], [37, 27, 48, 25, 22, 21, 48], [35, 27, 10, 29, 6, 42, 45], [20, 25, 13, 2, 45, 34, 29], [15, 20, 1, 43, 1, 19, 40], [1, 4, 39, 16, 33, 22, 24]]"
779,sub,16,2431711349330824,2431711349330824,1,2431711349330824,1,"{'ok': True, 'value': 2431711349330824, 'stdout': '2431711349330824\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09040141105651855}",1,Compute: 9956741148044098 - 7525029798713274
780,ilp_prod,4,52,43,0,44,0,"{'ok': True, 'value': 52, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1a817ca4ccce49abafdf0428faa28ad1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1a817ca4ccce49abafdf0428faa28ad1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 61.5 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -51 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 3 rows 3 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -52 found by DiveCoefficient after 3 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -61.5 to -52 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 4 column cuts (4 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -52, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -61.5 to -52\nProbing was tried 3 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                52.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16022920608520508}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 11, 10]
consumption (rows=resources) = [[4, 1, 1], [4, 3, 1], [1, 1, 3]]
capacity = [13, 9, 15]
upper_bounds = [3, 3, 5]"
781,ilp_assign,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3609890937805176}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4], [3, 3]]"
782,knap,16,305,276,0,357,0,"{'ok': True, 'value': 305, 'stdout': '305\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08194875717163086}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [31, 11, 15, 28, 25, 18, 14, 23, 20, 30, 9, 28, 25, 29, 27, 14]
V = [7, 33, 7, 62, 7, 53, 23, 4, 2, 33, 23, 9, 5, 35, 43, 3]
C = 173"
783,add,4,6607,6607,1,6607,1,"{'ok': True, 'value': 6607, 'stdout': '6607\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07090544700622559}",1,Compute: 4211 + 2396
784,add,8,93596716,93596716,1,93596716,1,"{'ok': True, 'value': 93596716, 'stdout': '93596716\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10183286666870117}",1,Compute: 75100960 + 18495756
785,knap,8,109,73,0,77,0,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07368159294128418}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 16, 9, 6, 1, 7, 11, 9]
V = [7, 2, 28, 20, 21, 13, 22, 27]
C = 32"
786,mul,32,6978346787846746158452723146097710190122315227762546150723501390,not computable manually,0,70004228552957456339389866693489496784,0,"{'ok': True, 'value': 6978346787846746158452723146097710190122315227762546150723501390, 'stdout': '6978346787846746158452723146097710190122315227762546150723501390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07228732109069824}",1,Compute: 86087794136580527762861636405485 * 81060815390105329119993949810374
787,ilp_prod,32,558,282,0,558,1,"{'ok': True, 'value': 558, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c2d1551e0524434d87478c5522b43cd8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c2d1551e0524434d87478c5522b43cd8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 604.47 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -467 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 3 columns\nCbc0012I Integer solution of -558 found by DiveCoefficient after 188 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 6\nCbc0013I At root node, 3 cuts changed objective from -604.46975 to -558.0002 in 57 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 167 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 47 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -558, took 188 iterations and 0 nodes (0.01 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -604.47 to -558\nProbing was tried 57 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 57 times and created 167 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nKnapsack was tried 57 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 57 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 57 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 57 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 57 times and created 47 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                558.00000000\nEnumerated nodes:               0\nTotal iterations:               188\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n558\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16619300842285156}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [61, 94, 91, 46, 24, 60]
consumption (rows=resources) = [[18, 5, 21, 31, 16, 6], [18, 13, 6, 31, 2, 3], [20, 13, 8, 25, 19, 32], [8, 19, 12, 21, 4, 7]]
capacity = [66, 127, 91, 106]
upper_bounds = [3, 5, 3, 3, 4, 3]"
788,rod,8,80,47,0,48,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11408090591430664}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 3, 21, 13, 7, 9, 24, 13]"
789,ilp_partition,4,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08903169631958008}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 4, 2, 3]"
790,mul,4,14404860,14404860,1,14391460,0,"{'ok': True, 'value': 14404860, 'stdout': '14404860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08343505859375}",1,Compute: 5065 * 2844
791,ilp_partition,16,0,102,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11021947860717773}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 48, 45, 4, 1, 18, 25, 34, 42, 42, 26, 13, 42, 46, 4, 25]"
792,ilp_assign,2,4,4,1,7,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4180119037628174}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [1, 2]]"
793,ilp_partition,4,6,6,1,2,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07350945472717285}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 3, 9, 11]"
794,lcs,8,5,4,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07159733772277832}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbccaaab""
T = ""bddccada"""
795,ilp_assign,16,39,100,0,87,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37624263763427734}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 6, 28, 37, 33, 15, 33], [46, 22, 18, 33, 25, 29, 7], [37, 1, 42, 27, 6, 23, 19], [35, 48, 4, 4, 24, 12, 7], [16, 23, 34, 3, 22, 36, 16], [37, 15, 21, 6, 44, 6, 4], [7, 21, 32, 25, 41, 45, 26]]"
796,knap,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07138609886169434}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 5]
V = [2, 5, 7]
C = 5"
797,rod,4,20,22,0,18,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0924689769744873}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 7, 11, 3]"
798,sub,8,16633491,16633491,1,16633491,1,"{'ok': True, 'value': 16633491, 'stdout': '16633491\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09048104286193848}",1,Compute: 56616608 - 39983117
799,add,32,48994902148688164256776131167091,490048999999999999999999999999999,0,48994902148688164256776131167091,1,"{'ok': True, 'value': 48994902148688164256776131167091, 'stdout': '48994902148688164256776131167091\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10091280937194824}",1,Compute: 25286530183183406584938268342771 + 23708371965504757671837862824320
800,rod,4,32,17,0,25,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08570241928100586}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 1, 6, 1]"
801,ilp_prod,32,317,447,0,558,0,"{'ok': True, 'value': 317, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/148d942c192d4a5982a047dd5dedd225-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/148d942c192d4a5982a047dd5dedd225-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 353.442 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -228 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 3 rows 3 columns\nCbc0012I Integer solution of -253 found by DiveCoefficient after 248 iterations and 0 nodes (0.02 seconds)\nCbc0031I 3 added rows had average density of 6\nCbc0013I At root node, 3 cuts changed objective from -353.44164 to -323.00609 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 185 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 26 row cuts average 5.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0016I Integer solution of -267 found by strong branching after 248 iterations and 0 nodes (0.02 seconds)\nCbc0010I After 0 nodes, 1 on tree, -267 best solution, best possible -323.00608 (0.02 seconds)\nCbc0012I Integer solution of -308 found by rounding after 252 iterations and 1 nodes (0.02 seconds)\nCbc0016I Integer solution of -317 found by strong branching after 275 iterations and 1 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -317, took 301 iterations and 2 nodes (0.03 seconds)\nCbc0032I Strong branching done 8 times (13 iterations), fathomed 1 nodes and fixed 1 variables\nCbc0035I Maximum depth 0, 3 variables fixed on reduced cost\nCuts at root node changed objective from -353.442 to -323.006\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nGomory was tried 118 times and created 216 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 118 times and created 74 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                317.00000000\nEnumerated nodes:               2\nTotal iterations:               301\nTime (CPU seconds):             0.03\nTime (Wallclock seconds):       0.03\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.03   (Wallclock seconds):       0.03\n\n317\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2376255989074707}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 48, 23, 73, 80, 89]
consumption (rows=resources) = [[3, 21, 5, 27, 1, 26], [9, 7, 32, 14, 24, 19], [1, 31, 25, 3, 2, 25], [4, 16, 18, 17, 30, 19]]
capacity = [78, 90, 116, 79]
upper_bounds = [10, 3, 3, 3, 3, 3]"
802,rod,16,240,165,0,177,0,"{'ok': True, 'value': 240, 'stdout': '240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0849008560180664}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [4, 30, 12, 34, 48, 31, 9, 2, 16, 12, 13, 39, 3, 22, 23, 31]"
803,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40535831451416016}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [1, 6]]"
804,ilp_prod,2,40,40,1,31,0,"{'ok': True, 'value': 40, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/82decb72fc1b4b90bb8681ec90012d4c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/82decb72fc1b4b90bb8681ec90012d4c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 40 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -40 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -40, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -40 to -40\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                40.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16587376594543457}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[3, 2], [2, 1]]
capacity = [10, 7]
upper_bounds = [3, 5]"
805,sub,16,5862201284164277,5862201283462577,0,5862201283364277,0,"{'ok': True, 'value': 5862201284164277, 'stdout': '5862201284164277\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08603715896606445}",1,Compute: 9324107193244256 - 3461905909079979
806,knap,2,10,11,0,12,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08681464195251465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 5]
V = [10, 1, 1]
C = 7"
807,ilp_prod,4,22,40,0,38,0,"{'ok': True, 'value': 22, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5cbc0fc6e0734b888a3f171f87323a70-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5cbc0fc6e0734b888a3f171f87323a70-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 22 - 0.00 seconds\nCgl0004I processed model has 1 rows, 2 columns (2 integer (0 of which binary)) and 2 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -22 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -22, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -22 to -22\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                22.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16826581954956055}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 7, 6]
consumption (rows=resources) = [[4, 3, 4], [4, 3, 4], [4, 1, 2]]
capacity = [10, 8, 16]
upper_bounds = [3, 3, 3]"
808,ilp_prod,4,62,62,1,56,0,"{'ok': True, 'value': 62, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a6ddbddc38104c768bfcb4bd816a302f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a6ddbddc38104c768bfcb4bd816a302f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 62 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -62 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -62, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -62 to -62\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                62.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16116070747375488}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 7, 6]
consumption (rows=resources) = [[4, 1, 3], [1, 1, 1], [3, 1, 2]]
capacity = [14, 8, 13]
upper_bounds = [3, 8, 4]"
809,rod,8,104,94,0,60,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0878305435180664}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 1, 4, 1, 4, 11, 24, 7]"
810,ilp_prod,4,55,55,1,49,0,"{'ok': True, 'value': 55, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ae32872993cc4926bcbb77f7d083f0cf-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ae32872993cc4926bcbb77f7d083f0cf-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 57.25 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -55 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -55, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -57.25 to -55\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                55.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n55\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16223812103271484}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 9, 4]
consumption (rows=resources) = [[2, 4, 3], [1, 4, 4], [2, 4, 4]]
capacity = [11, 14, 11]
upper_bounds = [5, 3, 3]"
811,add,16,10773109569860720,10773109023610790,0,10773109569860720,1,"{'ok': True, 'value': 10773109569860720, 'stdout': '10773109569860720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08248162269592285}",1,Compute: 3346930820983675 + 7426178748877045
812,ilp_assign,16,50,31,0,76,0,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4006624221801758}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[33, 33, 11, 32, 5, 14, 32], [24, 31, 48, 39, 27, 17, 12], [48, 1, 42, 32, 17, 3, 5], [39, 42, 47, 3, 23, 36, 31], [28, 37, 41, 32, 8, 13, 43], [4, 24, 25, 17, 23, 34, 39], [22, 9, 22, 10, 8, 47, 23]]"
813,mul,4,34008874,33998874,0,33999614,0,"{'ok': True, 'value': 34008874, 'stdout': '34008874\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12327122688293457}",1,Compute: 7382 * 4607
814,ilp_assign,8,33,15,0,39,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38612818717956543}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 4, 5, 2, 1, 9, 14], [17, 22, 19, 10, 3, 11, 16], [19, 11, 9, 11, 8, 2, 24], [17, 8, 15, 17, 23, 1, 22], [13, 11, 2, 17, 7, 23, 24], [4, 18, 8, 1, 24, 18, 11], [5, 23, 8, 19, 16, 18, 16]]"
815,sub,2,40,40,1,40,1,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08829832077026367}",1,Compute: 61 - 21
816,knap,16,464,310,0,298,0,"{'ok': True, 'value': 464, 'stdout': '464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0813446044921875}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 1, 2, 30, 4, 10, 6, 4, 17, 20, 5, 5, 6, 15, 3, 21]
V = [43, 60, 4, 63, 52, 38, 4, 31, 46, 45, 42, 22, 54, 25, 51, 7]
C = 77"
817,lcs,8,4,2,0,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08869314193725586}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acacbcaa""
T = ""bcdcddaa"""
818,ilp_prod,4,14,12,0,20,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6d6e7461178f4b36a282ef902605dbda-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6d6e7461178f4b36a282ef902605dbda-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16.3 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -13 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -14 found by DiveCoefficient after 4 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3\nCbc0013I At root node, 3 cuts changed objective from -16.3 to -14 in 5 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 7 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -14, took 4 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -16.3 to -14\nProbing was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 5 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               4\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16065526008605957}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 3, 4]
consumption (rows=resources) = [[2, 2, 4], [1, 4, 4], [3, 2, 2]]
capacity = [13, 16, 11]
upper_bounds = [3, 4, 3]"
819,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09104061126708984}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcc""
T = ""abac"""
820,ilp_prod,4,55,55,1,55,1,"{'ok': True, 'value': 55, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f5d33c1eac9c4012b1447061f40f0e0c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f5d33c1eac9c4012b1447061f40f0e0c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 58.3333 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -55 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -58.333333 to -58.333333 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -55, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -58.3333 to -58.3333\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                55.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n55\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15848851203918457}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 5, 10]
consumption (rows=resources) = [[3, 3, 3], [1, 4, 3], [2, 3, 3]]
capacity = [16, 10, 14]
upper_bounds = [5, 3, 3]"
821,lcs,32,19,12,0,14,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08388185501098633}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daddacbdbaabbcdbbddaccdadcaabcbd""
T = ""bbdbbbcdcbcdbdbacaddbdaadbbbdabdb"""
822,ilp_prod,4,25,25,1,34,0,"{'ok': True, 'value': 25, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0ce79e77b18c4efebaeef4d8bd95f35a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0ce79e77b18c4efebaeef4d8bd95f35a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 27.75 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -25 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -25, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -26.6 to -25\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                25.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1837749481201172}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 3, 5]
consumption (rows=resources) = [[4, 1, 4], [4, 4, 1], [4, 4, 2]]
capacity = [10, 13, 15]
upper_bounds = [3, 3, 3]"
823,mul,2,1728,1728,1,1728,1,"{'ok': True, 'value': 1728, 'stdout': '1728\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11474823951721191}",1,Compute: 24 * 72
824,sub,8,33509044,33509044,1,33509044,1,"{'ok': True, 'value': 33509044, 'stdout': '33509044\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09155511856079102}",1,Compute: 72509215 - 39000171
825,knap,2,15,9,0,13,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08561086654663086}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 3]
V = [6, 7, 9]
C = 5"
826,rod,8,128,112,0,112,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08920860290527344}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 14, 15, 15, 12, 1, 7, 19]"
827,add,16,9738464851029639,9738464851039639,0,9738464851039639,0,"{'ok': True, 'value': 9738464851029639, 'stdout': '9738464851029639\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09067559242248535}",1,Compute: 8198127216730284 + 1540337634299355
828,mul,32,2140064715206032763756498195327322303271654267119415173679812792,0,0,2141985856545672422855295745633939986669344,0,"{'ok': True, 'value': 2140064715206032763756498195327322303271654267119415173679812792, 'stdout': '2140064715206032763756498195327322303271654267119415173679812792\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08771920204162598}",1,Compute: 40849843944103939974751427287674 * 52388565257050850720537989556108
829,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09403824806213379}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""dc"""
830,add,2,138,138,1,138,1,"{'ok': True, 'value': 138, 'stdout': '138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0763697624206543}",1,Compute: 50 + 88
831,mul,2,8272,8272,1,8272,1,"{'ok': True, 'value': 8272, 'stdout': '8272\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08110213279724121}",1,Compute: 88 * 94
832,rod,16,576,148,0,148,0,"{'ok': True, 'value': 576, 'stdout': '576\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07572388648986816}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [36, 14, 14, 9, 40, 29, 25, 46, 10, 6, 17, 48, 47, 47, 25, 21]"
833,rod,4,16,10,0,10,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08951401710510254}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 8, 1, 5]"
834,knap,4,27,25,0,27,1,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0868072509765625}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 4, 6, 3]
V = [13, 11, 9, 16]
C = 10"
835,ilp_prod,4,36,0,0,48,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/76cdcb84c48b411bb3065bc84c19147c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/76cdcb84c48b411bb3065bc84c19147c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 38.6667 - 0.00 seconds\nCgl0004I processed model has 2 rows, 3 columns (3 integer (0 of which binary)) and 6 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -36 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -38.666667 to -38.666667 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -36, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -38.6667 to -38.6667\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20866608619689941}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8, 12]
consumption (rows=resources) = [[1, 1, 2], [3, 2, 3], [3, 3, 3]]
capacity = [16, 15, 10]
upper_bounds = [3, 3, 3]"
836,ilp_partition,8,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07462143898010254}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 19, 18, 7, 5, 13, 19, 22]"
837,knap,32,1598,1283,0,1012,0,"{'ok': True, 'value': 1598, 'stdout': '1598\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0950624942779541}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [40, 64, 3, 64, 50, 38, 54, 26, 38, 11, 50, 39, 3, 7, 14, 3, 13, 19, 3, 38, 23, 7, 29, 19, 59, 8, 47, 40, 60, 32, 46, 50]
V = [84, 123, 19, 62, 20, 117, 11, 49, 67, 26, 101, 90, 104, 75, 96, 27, 9, 23, 57, 128, 2, 108, 53, 59, 71, 92, 12, 84, 31, 8, 92, 43]
C = 498"
838,mul{'ok': True, 'value': 10124408248081506014734868356440, 'stdout': '10124408248081506014734868356440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09778261184692383}",1,Compute: 3262867933223653 * 3102916959951480
839,ilp_prod,2,18,18,1,18,1,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ea4addab75af40319ceb01d21819cf9d-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ea4addab75af40319ceb01d21819cf9d-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 2.9999\nCbc0012I Integer solution of -18 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -18, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -18 to -18\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1657092571258545}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[2, 2], [1, 2]]
capacity = [8, 6]
upper_bounds = [4, 3]"
840,ilp_partition,32,0,2,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0368316173553467}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 85, 16, 83, 30, 83, 73, 18, 8, 57, 9, 44, 16, 45, 89, 41, 8, 54, 10, 36, 72, 50, 34, 56]"
841,knap,16,365,299,0,346,0,"{'ok': True, 'value': 365, 'stdout': '365\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08245110511779785}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 17, 9, 20, 3, 13, 19, 17, 16, 6, 30, 8, 32, 21, 12, 20]
V = [14, 1, 27, 29, 47, 23, 48, 43, 30, 40, 25, 8, 49, 33, 38, 50]
C = 132"
842,sub,4,114,114,1,114,1,"{'ok': True, 'value': 114, 'stdout': '114\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08831429481506348}",1,Compute: 5746 - 5632
843,sub,16,4758069426576989,4758070426576989,0,4758069426576989,1,"{'ok': True, 'value': 4758069426576989, 'stdout': '4758069426576989\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08423805236816406}",1,Compute: 9223029345870895 - 4464959919293906
844,ilp_prod,32,305,-1,0,451,0,"{'ok': True, 'value': 305, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3c7e18074f314253961eaca862666bb9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3c7e18074f314253961eaca862666bb9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 349.295 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -305 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0031I 2 added rows had average density of 4\nCbc0013I At root node, 3 cuts changed objective from -349.29542 to -305 in 5 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 2.0 elements, 4 column cuts (4 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 9 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 19 row cuts average 3.9 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -305, took 12 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -349.295 to -305\nProbing was tried 5 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 9 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 19 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                305.00000000\nEnumerated nodes:               0\nTotal iterations:               12\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n305\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.175337553024292}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [50, 61, 90, 10, 56, 40]
consumption (rows=resources) = [[26, 11, 13, 29, 3, 7], [9, 19, 32, 23, 29, 20], [5, 15, 25, 25, 22, 18], [26, 9, 27, 30, 26, 19]]
capacity = [95, 103, 89, 68]
upper_bounds = [3, 5, 3, 3, 3, 3]"
845,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.5532498359680176}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [39, 50, 68, 77, 47, 88, 69, 66, 16, 30, 59, 55, 54, 65, 78, 38, 35, 67, 36, 84, 30, 1, 40, 25]"
846,add,2,151,151,1,151,1,"{'ok': True, 'value': 151, 'stdout': '151\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09204912185668945}",1,Compute: 80 + 71
847,mul,2,3010,3010,1,3010,1,"{'ok': True, 'value': 3010, 'stdout': '3010\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08931326866149902}",1,Compute: 43 * 70
848,sub,16,4563932715563078,4563932715563078,1,4563932715563078,1,"{'ok': True, 'value': 4563932715563078, 'stdout': '4563932715563078\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08832597732543945}",1,Compute: 6564796303029816 - 2000863587466738
849,rod,8,176,154,0,154,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08923912048339844}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 8, 1, 4, 15, 24, 17, 6]"
850,lcs,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08556890487670898}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbb""
T = ""adaa"""
851,ilp_prod,16,247,143,0,204,0,"{'ok': True, 'value': 247, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7df9d133fac64dd7a010018248ad00f7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7df9d133fac64dd7a010018248ad00f7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 281.216 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -247 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 0 rows 0 columns\nCbc0013I At root node, 12 cuts changed objective from -277.96552 to -277.96552 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 5 row cuts average 2.6 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 1.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -247, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -277.966 to -277.966\nProbing was tried 1 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                247.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n247\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1634368896484375}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 17, 35, 32, 13, 32]
consumption (rows=resources) = [[12, 8, 5, 4, 10, 16], [2, 13, 7, 14, 15, 5], [13, 2, 1, 8, 12, 1], [5, 3, 4, 8, 6, 13]]
capacity = [55, 45, 36, 58]
upper_bounds = [3, 3, 6, 3, 3, 3]"
852,sub,16,1168298352604683,1168300352604683,0,1168298352604683,1,"{'ok': True, 'value': 1168298352604683, 'stdout': '1168298352604683\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09045100212097168}",1,Compute: 3907165485675603 - 2738867133070920
853,rod,32,2752,243,0,294,0,"{'ok': True, 'value': 2752, 'stdout': '2752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08789324760437012}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [86, 16, 75, 54, 48, 60, 71, 77, 42, 13, 46, 83, 5, 59, 48, 38, 83, 65, 18, 37, 87, 16, 53, 14, 93, 66, 12, 74, 23, 14, 88, 90]"
854,mul,8,1966455276086701,196699999999991,0,1966378999573911,0,"{'ok': True, 'value': 1966455276086701, 'stdout': '1966455276086701\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09534263610839844}",1,Compute: 21350677 * 92102713
855,sub,4,3003,3003,1,3003,1,"{'ok': True, 'value': 3003, 'stdout': '3003\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08188629150390625}",1,Compute: 9217 - 6214
856,ilp_prod,32,416,408,0,567,0,"{'ok': True, 'value': 416, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1fb0dbfed5f046f3971795dd7c1b20a1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1fb0dbfed5f046f3971795dd7c1b20a1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 449.412 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -326 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -335 found by DiveCoefficient after 109 iterations and 0 nodes (0.01 seconds)\nCbc0031I 4 added rows had average density of 5.75\nCbc0013I At root node, 4 cuts changed objective from -449.41206 to -416.10534 in 39 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 88 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 40 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0010I After 0 nodes, 1 on tree, -335 best solution, best possible -416.10534 (0.01 seconds)\nCbc0012I Integer solution of -416 found by rounding after 110 iterations and 1 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -416, took 110 iterations and 1 nodes (0.01 seconds)\nCbc0032I Strong branching done 8 times (17 iterations), fathomed 0 nodes and fixed 0 variables\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -449.412 to -416.105\nProbing was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 40 times and created 88 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nKnapsack was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 40 times and created 42 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                416.00000000\nEnumerated nodes:               1\nTotal iterations:               110\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1887221336364746}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [85, 83, 36, 66, 81, 88]
consumption (rows=resources) = [[27, 17, 2, 32, 18, 28], [32, 32, 26, 27, 14, 20], [31, 23, 23, 12, 23, 15], [4, 8, 2, 23, 10, 24]]
capacity = [101, 113, 122, 121]
upper_bounds = [3, 3, 4, 3, 5, 3]"
857,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08162426948547363}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""cc"""
858,ilp_partition,16,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.12431025505065918}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 30, 45, 47, 30, 1, 26, 8, 17, 14, 38, 25, 13, 6, 7, 8]"
859,rod,16,368,177,0,144,0,"{'ok': True, 'value': 368, 'stdout': '368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09751057624816895}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [23, 28, 7, 48, 8, 44, 2, 10, 35, 37, 24, 16, 2, 6, 36, 7]"
860,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08013296127319336}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdcccdd""
T = ""dcbbdbcbb"""
861,lcs,32,19,14,0,16,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08214163780212402}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdbcdbccbbcbaccdcddcaabcaabcdda""
T = ""dacadcbcdddaccadccbbabccabdddcbdb"""
862,sub,16,339440790605791,3394440790581,0,339440790605791,1,"{'ok': True, 'value': 339440790605791, 'stdout': '339440790605791\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08487319946289062}",1,Compute: 4355868522809974 - 4016427732204183
863,ilp_prod,8,92,100,0,109,0,"{'ok': True, 'value': 92, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a0aca30c01a44c5a89bb496629fdf441-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a0aca30c01a44c5a89bb496629fdf441-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 99.7143 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -92 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 3\nCbc0013I At root node, 2 cuts changed objective from -99.714286 to -92 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -92, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -99.7143 to -92\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                92.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16393208503723145}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 23, 19, 19]
consumption (rows=resources) = [[4, 7, 5, 7], [1, 1, 7, 2], [5, 1, 1, 8], [7, 6, 8, 8]]
capacity = [31, 21, 16, 27]
upper_bounds = [3, 4, 3, 3]"
864,rod,32,1312,243,0,322,0,"{'ok': True, 'value': 1312, 'stdout': '1312\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08560943603515625}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [41, 12, 32, 34, 45, 33, 21, 22, 82, 75, 30, 19, 38, 82, 86, 64, 53, 58, 20, 7, 91, 48, 7, 43, 13, 27, 80, 4, 20, 39, 90, 8]"
865,rod,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08530068397521973}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
866,rod,32,3040,243,0,295,0,"{'ok': True, 'value': 3040, 'stdout': '3040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0818784236907959}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [95, 94, 60, 32, 22, 46, 20, 19, 43, 22, 50, 92, 71, 45, 45, 41, 51, 21, 57, 50, 17, 89, 96, 59, 44, 81, 24, 77, 7, 5, 58, 34]"
867,mul{'ok': True, 'value': 1428852596277303145762897938295145994653915998175091602653880060, 'stdout': '1428852596277303145762897938295145994653915998175091602653880060\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08840489387512207}",1,Compute: 16245644418890404414136045616370 * 87952965080033148206708641043438
868,ilp_prod,8,30,55,0,52,0,"{'ok': True, 'value': 30, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/955bfbcdbf554753a1fac07cbb39de02-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/955bfbcdbf554753a1fac07cbb39de02-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 35.75 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -26 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -30 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -31.142857 to -30 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -30, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -31.1429 to -30\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                30.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16086244583129883}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 13, 6, 6]
consumption (rows=resources) = [[2, 5, 5, 6], [3, 1, 8, 7], [7, 4, 2, 7], [5, 8, 7, 8]]
capacity = [28, 20, 29, 22]
upper_bounds = [4, 3, 3, 3]"
869,ilp_partition,8,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07638907432556152}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 7, 23, 6, 16, 15, 2, 24]"
870,ilp_partition,32,1,2,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08098959922790527}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 34, 45, 67, 78, 86, 48, 33, 14, 10, 29, 39, 34, 73, 83, 68, 7, 51, 81, 68, 18, 14, 40, 92]"
871,rod,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11433601379394531}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 3]"
872,knap,2,4,4,1,6,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07340145111083984}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 1]
V = [1, 5, 3]
C = 4"
873,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07812166213989258}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 2, 2, 10]"
874,rod,16,320,225,0,175,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0730600357055664}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 22, 37, 22, 21, 6, 20, 41, 26, 5, 45, 32, 40, 41, 21, 38]"
875,ilp_assign,16,73,36,0,72,0,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.7594883441925049}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 31, 38, 34, 22, 42, 44], [31, 28, 35, 18, 40, 3, 5], [6, 15, 13, 14, 18, 42, 42], [21, 42, 35, 12, 35, 26, 15], [16, 33, 6, 2, 24, 1, 12], [20, 26, 31, 4, 10, 43, 45], [24, 39, 8, 20, 10, 25, 43]]"
876,lcs,16,8,7,0,6,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07200145721435547}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcbbbcaacddcbac""
T = ""abadaccbaaaabcaa"""
877,add,8,87072141,87072141,1,87072141,1,"{'ok': True, 'value': 87072141, 'stdout': '87072141\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08228850364685059}",1,Compute: 61579452 + 25492689
878,ilp_assign,16,65,100,0,100,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38345813751220703}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 18, 10, 44, 17, 15, 36], [46, 27, 14, 16, 44, 3, 33], [9, 18, 38, 24, 15, 17, 15], [48, 2, 34, 39, 46, 5, 32], [18, 35, 14, 2, 23, 25, 27], [29, 36, 24, 28, 46, 47, 17], [18, 35, 19, 44, 22, 37, 19]]"
879,ilp_partition,8,1,3,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07818984985351562}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 13, 13, 2, 10, 6, 6, 11]"
880,sub,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08098864555358887}",1,Compute: 47 - 40
881,mul,4,31444768,31498412,0,31419448,0,"{'ok': True, 'value': 31444768, 'stdout': '31444768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08010172843933105}",1,Compute: 5429 * 5792
882,ilp_assign,4,21,28,0,19,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3693537712097168}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 9, 8, 4], [11, 12, 6, 11], [6, 7, 5, 6], [7, 12, 5, 2]]"
883,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3962433338165283}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [2, 3]]"
884,ilp_prod,4,24,36,0,42,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1166ca07f55c4215a07c6064276742b1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1166ca07f55c4215a07c6064276742b1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 30 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -24 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -24, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -26.5 to -24\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16548395156860352}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 12, 5]
consumption (rows=resources) = [[3, 1, 4], [1, 4, 3], [3, 3, 4]]
capacity = [14, 10, 8]
upper_bounds = [3, 3, 3]"
885,knap,16,383,309,0,322,0,"{'ok': True, 'value': 383, 'stdout': '383\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08011507987976074}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 18, 23, 13, 21, 10, 5, 25, 13, 14, 14, 25, 11, 32, 20, 6]
V = [13, 40, 28, 4, 7, 45, 12, 58, 38, 40, 64, 49, 36, 29, 48, 14]
C = 133"
886,knap,2,9,9,1,15,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08245158195495605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 4]
V = [6, 9, 3]
C = 6"
887,knap,4,20,20,1,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08160972595214844}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 1, 4]
V = [8, 9, 6, 14]
C = 9"
888,add,4,12622,12622,1,12622,1,"{'ok': True, 'value': 12622, 'stdout': '12622\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08146142959594727}",1,Compute: 2936 + 9686
889,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07929635047912598}",1,Compute: 59 + 63
890,lcs,16,10,8,0,7,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10351133346557617}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdccdccbaccbabdb""
T = ""bddbccdaddabacca"""
891,knap,32,1676,1225,0,1022,0,"{'ok': True, 'value': 1676, 'stdout': '1676\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09685540199279785}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 53, 62, 23, 15, 33, 57, 55, 39, 18, 38, 52, 50, 4, 37, 5, 33, 30, 8, 60, 12, 47, 6, 21, 29, 31, 56, 41, 34, 5, 32, 40]
V = [17, 63, 82, 48, 104, 81, 19, 67, 77, 83, 23, 84, 8, 75, 120, 120, 25, 116, 122, 13, 5, 36, 106, 46, 29, 1, 62, 102, 106, 2, 89, 98]
C = 523"
892,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3936786651611328}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [4, 1]]"
893,knap,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08425354957580566}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 2]
V = [1, 7, 1]
C = 2"
894,sub,16,118700103186604,1187000000000004,0,1187000000000014,0,"{'ok': True, 'value': 118700103186604, 'stdout': '118700103186604\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0833888053894043}",1,Compute: 8420966413003583 - 8302266309816979
895,ilp_prod,8,63,99,0,102,0,"{'ok': True, 'value': 63, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e43549c3c4884291a3bd01a625cc9935-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e43549c3c4884291a3bd01a625cc9935-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 65.4 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -63 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -63, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -65.4 to -63\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                63.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n63\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16416621208190918}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 3, 12, 8]
consumption (rows=resources) = [[2, 3, 5, 3], [7, 5, 7, 6], [7, 8, 8, 2], [5, 6, 5, 5]]
capacity = [25, 28, 32, 16]
upper_bounds = [3, 3, 3, 3]"
896,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08133721351623535}",1,Compute: 52 + 70
897,mul,8,821212823625946,827216473886626,0,820173379966566,0,"{'ok': True, 'value': 821212823625946, 'stdout': '821212823625946\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08582639694213867}",1,Compute: 25389242 * 32344913
898,ilp_partition,8,1,7,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08692336082458496}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 5, 17, 4, 11, 19, 19, 18]"
899,sub,16,3367278173107920,3367278173107920,1,3367278173107920,1,"{'ok': True, 'value': 3367278173107920, 'stdout': '3367278173107920\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08270072937011719}",1,Compute: 9222809134480766 - 5855530961372846
900,knap,4,22,25,0,17,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08114814758300781}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 1, 1, 8]
V = [3, 12, 10, 5]
C = 8"
901,mul,32,544430102304096825154606234830045344225997199031268580226236320,41,0,54349593565086784028552957456320,0,"{'ok': True, 'value': 544430102304096825154606234830045344225997199031268580226236320, 'stdout': '544430102304096825154606234830045344225997199031268580226236320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08276677131652832}",1,Compute: 42576375867997776773780023829130 * 12787140549304332674272838104464
902,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08932924270629883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""ddd"""
903,ilp_assign,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3747985363006592}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3], [6, 1]]"
904,add,16,12017351579542721,12017351581342721,0,12017351579542721,1,"{'ok': True, 'value': 12017351579542721, 'stdout': '12017351579542721\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08090448379516602}",1,Compute: 7920347103759780 + 4097004475782941
905,lcs,32,21,19,0,14,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09008955955505371}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daccdabbddccbabccadbdababacdbaca""
T = ""abbabbbcbbabccdbccbddabcbcdcbadda"""
906,lcs,32,16,18,0,13,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09099555015563965}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbabcbbcacbaaaabdbcaaccddbdaaaad""
T = ""cacaabbbadabbdbbbbbbbabbdacdcbbbc"""
907,add,16,9731214030696438,9731214829996438,0,9731214030696438,1,"{'ok': True, 'value': 9731214030696438, 'stdout': '9731214030696438\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0818030834197998}",1,Compute: 6177116007873265 + 3554098022823173
908,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08520388603210449}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""cba"""
909,ilp_assign,4,18,20,0,19,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3977181911468506}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4, 8, 5], [6, 11, 8, 10], [3, 9, 11, 2], [4, 5, 9, 11]]"
910,mul,2,1122,1122,1,1122,1,"{'ok': True, 'value': 1122, 'stdout': '1122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09737491607666016}",1,Compute: 33 * 34
911,add,32,114972507876736682911507834485582,114972507876736672911500834485582,0,114972507876738672911483834485582,0,"{'ok': True, 'value': 114972507876736682911507834485582, 'stdout': '114972507876736682911507834485582\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07314157485961914}",1,Compute: 91058914207675897908147204743891 + 23913593669060785003360629741691
912,ilp_prod,8,62,60,0,103,0,"{'ok': True, 'value': 62, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a6d0d432932e4f24af0b1e825f91b58f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a6d0d432932e4f24af0b1e825f91b58f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 64 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -53 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 1 rows 2 columns\nCbc0012I Integer solution of -62 found by DiveCoefficient after 5 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 4\nCbc0013I At root node, 3 cuts changed objective from -64 to -62 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 6 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 6 row cuts average 3.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -62, took 5 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -64 to -62\nProbing was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                62.00000000\nEnumerated nodes:               0\nTotal iterations:               5\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15086984634399414}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 12, 15, 17]
consumption (rows=resources) = [[5, 1, 3, 8], [3, 2, 2, 8], [5, 5, 5, 7], [1, 5, 6, 8]]
capacity = [18, 17, 25, 23]
upper_bounds = [3, 4, 3, 3]"
913,mul{'ok': True, 'value': 30898791521507738221283728969000, 'stdout': '30898791521507738221283728969000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0723564624786377}",1,Compute: 5212418257303622 * 5927918673489500
914,add,8,190667088,180657088,0,190667088,1,"{'ok': True, 'value': 190667088, 'stdout': '190667088\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08259987831115723}",1,Compute: 91490973 + 99176115
915,rod,16,688,175,0,127,0,"{'ok': True, 'value': 688, 'stdout': '688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10058093070983887}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [43, 20, 28, 25, 19, 21, 31, 4, 16, 18, 45, 22, 27, 21, 4, 6]"
916,knap,2,8,9,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06962776184082031}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 5]
V = [6, 2, 3]
C = 5"
917,ilp_partition,16,1,98,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07382035255432129}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [32, 25, 12, 21, 32, 2, 35, 46, 13, 20, 22, 44, 38, 42, 16, 11]"
918,ilp_assign,16,72,100,0,108,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3650662899017334}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 46, 21, 25, 32, 26, 40], [34, 26, 3, 38, 21, 10, 11], [17, 41, 45, 11, 38, 11, 30], [7, 39, 48, 23, 40, 40, 15], [35, 41, 40, 26, 21, 9, 38], [34, 39, 29, 34, 7, 26, 25], [19, 22, 29, 37, 43, 41, 21]]"
919,mul,2,4488,4488,1,4488,1,"{'ok': True, 'value': 4488, 'stdout': '4488\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09560894966125488}",1,Compute: 51 * 88
920,rod,16,191,104,0,110,0,"{'ok': True, 'value': 191, 'stdout': '191\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08627867698669434}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [1, 16, 38, 8, 5, 42, 3, 13, 16, 10, 14, 22, 27, 34, 27, 6]"
921,ilp_assign,2,4,4,1,9,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41779518127441406}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [3, 3]]"
922,ilp_prod,4,51,43,0,55,0,"{'ok': True, 'value': 51, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c773245368bc47c2a2bc26b94cabe61f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c773245368bc47c2a2bc26b94cabe61f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 52.75 - 0.00 seconds\nCgl0004I processed model has 2 rows, 3 columns (3 integer (0 of which binary)) and 6 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -50 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -51 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -52.75 to -51 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -51, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -52.75 to -51\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                51.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15003681182861328}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 10, 11]
consumption (rows=resources) = [[1, 1, 3], [1, 1, 1], [4, 3, 4]]
capacity = [13, 14, 16]
upper_bounds = [4, 5, 4]"
923,add,4,9696,9696,1,9696,1,"{'ok': True, 'value': 9696, 'stdout': '9696\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07351160049438477}",1,Compute: 8569 + 1127
924,add,2,103,103,1,103,1,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08226823806762695}",1,Compute: 81 + 22
925,ilp_prod,8,50,108,0,63,0,"{'ok': True, 'value': 50, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/313de8b3d9ed4dc68bda13c80c9bbcde-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/313de8b3d9ed4dc68bda13c80c9bbcde-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 51.6667 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -50 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -51.666667 to -51.666667 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -50, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -51.6667 to -51.6667\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                50.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.17447733879089355}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4, 15, 5]
consumption (rows=resources) = [[7, 8, 8, 3], [3, 1, 2, 3], [2, 7, 2, 5], [2, 2, 4, 5]]
capacity = [28, 21, 32, 30]
upper_bounds = [4, 3, 3, 6]"
926,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09791874885559082}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 8, 1, 4]"
927,sub,16,2263258896659069,2263259996662969,0,2263258896659069,1,"{'ok': True, 'value': 2263258896659069, 'stdout': '2263258896659069\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07732272148132324}",1,Compute: 8599046266962764 - 6335787370303695
928,lcs,32,18,12,0,14,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07826375961303711}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbadbdcccbdaacdcbadbbbccaddbabb""
T = ""bdadbbadaabdccdaaabcabdaccccccdb"""
929,lcs,16,10,6,0,6,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07391977310180664}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadccaddbabadcac""
T = ""dbcdadddbbaabdc"""
930,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07189702987670898}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""cad"""
931,sub,8,63552289,63552289,1,63552289,1,"{'ok': True, 'value': 63552289, 'stdout': '63552289\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0717005729675293}",1,Compute: 76498810 - 12946521
932,knap,16,451,324,0,397,0,"{'ok': True, 'value': 451, 'stdout': '451\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07609319686889648}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 9, 16, 11, 23, 22, 15, 16, 3, 13, 32, 24, 12, 26, 31, 32]
V = [27, 58, 50, 39, 30, 16, 60, 54, 35, 41, 12, 13, 20, 29, 64, 24]
C = 151"
933,knap,16,411,275,0,299,0,"{'ok': True, 'value': 411, 'stdout': '411\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0730443000793457}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 26, 24, 14, 16, 13, 21, 2, 7, 4, 6, 15, 23, 7, 26, 18]
V = [26, 24, 57, 58, 59, 29, 12, 24, 16, 44, 24, 10, 34, 56, 39, 27]
C = 112"
934,knap,32,1448,1052,0,1497,0,"{'ok': True, 'value': 1448, 'stdout': '1448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07772397994995117}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 60, 46, 62, 27, 52, 44, 13, 27, 8, 8, 58, 30, 13, 43, 22, 19, 63, 33, 47, 2, 15, 31, 60, 56, 60, 57, 6, 50, 16, 58, 9]
V = [84, 105, 35, 46, 44, 89, 112, 53, 25, 105, 78, 108, 54, 8, 62, 25, 7, 91, 119, 49, 84, 3, 68, 34, 38, 74, 16, 53, 72, 14, 73, 67]
C = 558"
935,ilp_prod,16,90,144,0,165,0,"{'ok': True, 'value': 90, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3fd764566d6342d4957f1e1136a29ef2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3fd764566d6342d4957f1e1136a29ef2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 97.0909 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -84 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -90 found by DiveCoefficient after 3 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3\nCbc0013I At root node, 2 cuts changed objective from -97.090909 to -90 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 2.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 3 row cuts average 3.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -90, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -97.0909 to -90\nProbing was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                90.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14931011199951172}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 30, 12, 22, 5, 9]
consumption (rows=resources) = [[4, 10, 15, 10, 5, 14], [9, 12, 9, 14, 14, 10], [16, 14, 8, 6, 15, 10], [5, 4, 6, 5, 9, 10]]
capacity = [49, 38, 52, 39]
upper_bounds = [3, 3, 3, 3, 3, 3]"
936,lcs,16,9,8,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08147192001342773}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbaccabadadccdba""
T = ""bbdbcaabaccdccccb"""
937,add,4,13491,13491,1,13491,1,"{'ok': True, 'value': 13491, 'stdout': '13491\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09090805053710938}",1,Compute: 9932 + 3559
938,ilp_partition,8,0,6,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07248640060424805}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 15, 6, 13, 14, 12, 4, 11]"
939,ilp_assign,2,2,2,1,6,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3676798343658447}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [1, 5]]"
940,knap,32,1737,1000,0,1000,0,"{'ok': True, 'value': 1737, 'stdout': '1737\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0972292423248291}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 25, 30, 48, 28, 59, 47, 40, 17, 12, 39, 34, 37, 52, 15, 62, 60, 55, 47, 10, 52, 34, 16, 34, 6, 36, 13, 9, 29, 58, 17, 50]
V = [52, 96, 120, 67, 89, 35, 125, 43, 74, 39, 6, 72, 97, 34, 10, 100, 101, 5, 50, 86, 90, 100, 99, 83, 70, 58, 126, 83, 77, 81, 47, 4]
C = 542"
941,knap,4,18,20,0,18,1,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07137942314147949}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 1, 3, 6]
V = [1, 16, 2, 1]
C = 8"
942,ilp_prod,32,407,1121,0,499,0,"{'ok': True, 'value': 407, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6bc1ba27d99e4a3888d3968091c6e8ad-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6bc1ba27d99e4a3888d3968091c6e8ad-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 435.367 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -378 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -386 found by DiveCoefficient after 316 iterations and 0 nodes (0.01 seconds)\nCbc0031I 3 added rows had average density of 5\nCbc0013I At root node, 3 cuts changed objective from -432.93916 to -414.86304 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 211 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -386 best solution, best possible -414.86304 (0.01 seconds)\nCbc0012I Integer solution of -407 found by DiveCoefficient after 317 iterations and 1 nodes (0.01 seconds)\nCbc0001I Search completed - best objective -407, took 362 iterations and 4 nodes (0.01 seconds)\nCbc0032I Strong branching done 14 times (30 iterations), fathomed 0 nodes and fixed 1 variables\nCbc0035I Maximum depth 1, 3 variables fixed on reduced cost\nCuts at root node changed objective from -432.939 to -414.863\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 115 times and created 236 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                407.00000000\nEnumerated nodes:               4\nTotal iterations:               362\nTime (CPU seconds):             0.01\nTime (Wallclock seconds):       0.01\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.01   (Wallclock seconds):       0.01\n\n407\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16759157180786133}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [67, 21, 57, 94, 28, 34]
consumption (rows=resources) = [[6, 9, 31, 18, 6, 12], [2, 10, 20, 32, 16, 12], [24, 4, 16, 28, 32, 2], [1, 7, 15, 4, 2, 24]]
capacity = [91, 70, 124, 70]
upper_bounds = [5, 7, 3, 3, 3, 3]"
943,ilp_assign,16,29,10,0,100,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3676609992980957}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 18, 47, 25, 31, 26, 43], [12, 19, 46, 19, 39, 17, 1], [14, 15, 15, 30, 1, 6, 26], [21, 5, 32, 1, 46, 24, 29], [43, 32, 4, 18, 37, 44, 18], [13, 12, 39, 36, 17, 17, 33], [6, 7, 27, 25, 34, 5, 23]]"
944,ilp_assign,4,16,9,0,14,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36148953437805176}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 7, 4, 7], [1, 10, 5, 1], [10, 6, 12, 6], [6, 11, 8, 11]]"
945,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07734394073486328}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""a"""
946,mul,16,37921216593650006713681882012584,32,0,3789219175789292,0,"{'ok': True, 'value': 37921216593650006713681882012584, 'stdout': '37921216593650006713681882012584\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09108877182006836}",1,Compute: 6217219175789292 * 6099385516489502
947,mul,4,11220115,11199115,0,11210915,0,"{'ok': True, 'value': 11220115, 'stdout': '11220115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07724690437316895}",1,Compute: 1165 * 9631
948,ilp_partition,32,0,2,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08636331558227539}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [59, 61, 68, 83, 14, 74, 84, 11, 73, 49, 55, 74, 94, 24, 84, 19, 25, 75, 93, 50, 71, 27, 2, 79]"
949,mul{'ok': True, 'value': 50138072129103174321490924158594, 'stdout': '50138072129103174321490924158594\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08116817474365234}",1,Compute: 9482591341410018 * 5287380877646033
950,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08287191390991211}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""cab"""
951,knap,8,99,93,0,101,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0811915397644043}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 9, 12, 10, 7, 10, 13, 3]
V = [12, 25, 8, 7, 9, 30, 10, 28]
C = 40"
952,rod,4,40,30,0,25,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08313727378845215}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 3, 7, 5]"
953,knap,32,1761,1135,0,1257,0,"{'ok': True, 'value': 1761, 'stdout': '1761\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09643268585205078}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 23, 16, 39, 5, 52, 55, 15, 30, 21, 45, 11, 19, 31, 64, 43, 57, 37, 58, 37, 58, 3, 2, 12, 63, 35, 37, 56, 12, 47, 31, 29]
V = [103, 74, 111, 89, 87, 16, 115, 114, 47, 83, 64, 68, 84, 102, 91, 65, 68, 121, 123, 87, 108, 28, 5, 5, 80, 59, 56, 38, 46, 25, 125, 88]
C = 540"
954,ilp_partition,16,0,2,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07896280288696289}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [48, 11, 39, 1, 45, 46, 20, 28, 27, 3, 13, 36, 5, 32, 12, 48]"
955,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0986936092376709}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [35, 48, 37, 21, 15, 11, 32, 27, 8, 23, 4, 6, 10, 8, 7, 25]"
956,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07248950004577637}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daacccdd""
T = ""cdcbadcca"""
957,ilp_prod,16,122,494,0,209,0,"{'ok': True, 'value': 122, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/64602f10f0f743a58b37fee71a138c1f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/64602f10f0f743a58b37fee71a138c1f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 126.921 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -88 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -122 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3\nCbc0013I At root node, 3 cuts changed objective from -126.92105 to -122.92157 in 5 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 9 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -122, took 5 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -126.921 to -122.922\nProbing was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 5 times and created 9 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                122.00000000\nEnumerated nodes:               0\nTotal iterations:               5\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15419507026672363}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 14, 22, 33, 31, 34]
consumption (rows=resources) = [[7, 10, 6, 7, 6, 9], [4, 14, 12, 16, 14, 4], [14, 9, 6, 13, 2, 1], [9, 11, 6, 10, 15, 12]]
capacity = [53, 58, 57, 37]
upper_bounds = [4, 3, 4, 3, 3, 3]"
958,lcs,16,8,5,0,6,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07224607467651367}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbbbacdaaacbbcd""
T = ""ccccdbdbdbdccaab"""
959,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07477211952209473}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""b"""
960,add,8,121218489,121218489,1,121218489,1,"{'ok': True, 'value': 121218489, 'stdout': '121218489\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0719907283782959}",1,Compute: 68344354 + 52874135
961,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36869025230407715}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [3, 6]]"
962,rod,8,60,43,0,36,0,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0829932689666748}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 13, 23, 20, 11, 18, 5, 2]"
963,ilp_assign,4,7,16,0,10,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4076874256134033}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 3, 12, 6], [1, 4, 1, 1], [7, 9, 1, 3], [2, 10, 10, 4]]"
964,ilp_prod,4,42,34,0,54,0,"{'ok': True, 'value': 42, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/976317e2502d4450bb0146a3864613f1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/976317e2502d4450bb0146a3864613f1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 43.7143 - 0.00 seconds\nCgl0004I processed model has 3 rows, 3 columns (3 integer (0 of which binary)) and 9 elements\nCutoff increment increased from 1e-05 to 1.9999\nCbc0012I Integer solution of -30 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 3 rows 3 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -42 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 2.5\nCbc0013I At root node, 2 cuts changed objective from -43.714286 to -42 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -42, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -43.7143 to -42\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                42.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15858221054077148}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 12]
consumption (rows=resources) = [[1, 3, 2], [4, 1, 1], [1, 1, 3]]
capacity = [15, 13, 9]
upper_bounds = [3, 5, 3]"
965,ilp_partition,8,0,2,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08679485321044922}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 20, 8, 13, 20, 16, 16, 20]"
966,ilp_assign,4,14,14,1,17,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3928389549255371}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 10, 11, 6], [4, 7, 9, 9], [2, 9, 2, 12], [8, 2, 9, 8]]"
967,sub,32,8246193549949779819980378903075,0,0,8246193553894879820132977903075,0,"{'ok': True, 'value': 8246193549949779819980378903075, 'stdout': '8246193549949779819980378903075\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08985209465026855}",1,Compute: 40156300776555950493485711113798 - 31910107226606170673505332210723
968,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09274649620056152}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 4, 11, 1]"
969,mul,8,6305754793381400,63223962865800,0,6299694975944000,0,"{'ok': True, 'value': 6305754793381400, 'stdout': '6305754793381400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0829770565032959}",1,Compute: 77475160 * 81390665
970,lcs,32,18,15,0,13,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0988471508026123}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacdcbccddbdcddbbdbbbcaaddacacbb""
T = ""acaaabcdadbdabcbcbacdaaacacdddc"""
971,knap,8,93,79,0,78,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08133697509765625}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 7, 10, 4, 15, 9, 8, 9]
V = [20, 6, 24, 10, 29, 2, 25, 29]
C = 37"
972,rod,8,72,22,0,66,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0870974063873291}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [9, 17, 4, 18, 22, 22, 11, 1]"
973,knap,4,15,13,0,14,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10578680038452148}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 1, 4]
V = [11, 3, 2, 12]
C = 5"
974,ilp_prod,2,16,16,1,24,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/52428f744ba242ca9f2aa3cf4c680fe6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/52428f744ba242ca9f2aa3cf4c680fe6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18.6667 - 0.00 seconds\nCgl0004I processed model has 1 rows, 2 columns (2 integer (0 of which binary)) and 2 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -16 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -16, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -17.6667 to -16\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1679520606994629}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 5]
consumption (rows=resources) = [[1, 3], [3, 3]]
capacity = [8, 7]
upper_bounds = [3, 3]"
975,knap,4,26,24,0,17,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07591128349304199}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 3, 4, 8]
V = [14, 5, 12, 10]
C = 11"
976,add,32,105644311618440656237414590391497,105644311618440656237444087391497,0,105644311618441656237414587931597,0,"{'ok': True, 'value': 105644311618440656237414590391497, 'stdout': '105644311618440656237414590391497\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07993721961975098}",1,Compute: 72051133410661423150078310630018 + 33593178207779233087336279761479
977,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08650445938110352}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addd""
T = ""ddd"""
978,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08803319931030273}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 5, 7, 9]"
979,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0799875259399414}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""a"""
980,add,16,12688773957492775,12688777957487175,0,12688773957492775,1,"{'ok': True, 'value': 12688773957492775, 'stdout': '12688773957492775\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09035134315490723}",1,Compute: 6053830446487104 + 6634943511005671
981,lcs,32,17,19,0,12,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0911712646484375}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbdcbabcccbcdccadcbcbadcdaacbbd""
T = ""dabcacbbddddbaadccdddcdddbaacca"""
982,knap,16,339,239,0,263,0,"{'ok': True, 'value': 339, 'stdout': '339\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08052515983581543}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 28, 28, 31, 13, 11, 31, 4, 13, 3, 32, 1, 11, 7, 11, 14]
V = [15, 16, 55, 25, 3, 21, 49, 21, 16, 54, 43, 29, 59, 8, 15, 15]
C = 129"
983,add,32,85090874343960722123374031120288,85090874343960722123374031120288,1,85090874343960722123374031120288,1,"{'ok': True, 'value': 85090874343960722123374031120288, 'stdout': '85090874343960722123374031120288\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09097456932067871}",1,Compute: 68761598340404626558905127787419 + 16329276003556095564468903332869
984,mul,32,3284988205592670026568634543672321479955645967980422266208543166,-inf,0,3282493565886734228552957456349399866624,0,"{'ok': True, 'value': 3284988205592670026568634543672321479955645967980422266208543166, 'stdout': '3284988205592670026568634543672321479955645967980422266208543166\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09814763069152832}",1,Compute: 40921523051977069280218530706123 * 80275316278433584959021141682042
985,ilp_prod,2,18,18,1,21,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ce5f74404e804c13803fa6e94271fd14-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ce5f74404e804c13803fa6e94271fd14-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 19.8 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 2.9999\nCbc0012I Integer solution of -15 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -18 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -19.8 to -18 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 2.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -18, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -19.8 to -18\nProbing was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14895915985107422}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[2, 1], [1, 3]]
capacity = [9, 8]
upper_bounds = [4, 3]"
986,add,2,71,71,1,71,1,"{'ok': True, 'value': 71, 'stdout': '71\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07260942459106445}",1,Compute: 49 + 22
987,knap,2,8,8,1,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07842373847961426}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 3]
V = [3, 2, 8]
C = 4"
988,mul,2,462,462,1,462,1,"{'ok': True, 'value': 462, 'stdout': '462\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07366085052490234}",1,Compute: 33 * 14
989,mul,32,5941591638852638884052159028592269722583400544770833848524300236,46,0,595465935658867342285529574563393898669932897962889376,0,"{'ok': True, 'value': 5941591638852638884052159028592269722583400544770833848524300236, 'stdout': '5941591638852638884052159028592269722583400544770833848524300236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0780034065246582}",1,Compute: 78145962710958062625478258341173 * 76031971873314394202552685499932
990,mul,8,3859636368994812,3854346765729952,0,385399497994752,0,"{'ok': True, 'value': 3859636368994812, 'stdout': '3859636368994812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08338761329650879}",1,Compute: 72137244 * 53504073
991,mul,8,3995143642696312,39899999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,3991999999955232,0,"{'ok': True, 'value': 3995143642696312, 'stdout': '3995143642696312\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08135437965393066}",1,Compute: 42351836 * 94332242
992,rod,8,184,161,0,161,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0768582820892334}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 19, 1, 18, 13, 1, 4, 4]"
993,ilp_prod,8,66,48,0,72,0,"{'ok': True, 'value': 66, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8eba12f3e0494166be7d64ad1e4efab1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8eba12f3e0494166be7d64ad1e4efab1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 66.7273 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -50 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -66 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -66.727273 to -66 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 2.5 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -66, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -66.7273 to -66\nProbing was tried 2 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                66.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16175150871276855}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 12, 16, 5]
consumption (rows=resources) = [[4, 2, 3, 8], [3, 8, 6, 8], [3, 8, 5, 8], [6, 4, 1, 6]]
capacity = [32, 24, 28, 19]
upper_bounds = [3, 3, 4, 3]"
994,ilp_prod,8,31,60,0,54,0,"{'ok': True, 'value': 31, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/79b0ebecf6b7454dbd920ff4479759c8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/79b0ebecf6b7454dbd920ff4479759c8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 36 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -28 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -31 found by DiveCoefficient after 3 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -35 to -31 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -31, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -35 to -31\nProbing was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                31.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1497666835784912}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 14, 6, 3]
consumption (rows=resources) = [[7, 6, 3, 8], [4, 7, 1, 4], [8, 7, 7, 3], [3, 7, 7, 8]]
capacity = [22, 24, 18, 21]
upper_bounds = [3, 3, 3, 3]"
995,sub,2,12,12,1,12,1,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08872056007385254}",1,Compute: 40 - 28
996,mul{'ok': True, 'value': 26859939845696761361775143248487, 'stdout': '26859939845696761361775143248487\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07584333419799805}",1,Compute: 6716420573663239 * 3999145013494433
997,knap,2,9,9,1,11,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07112503051757812}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 4]
V = [2, 2, 9]
C = 5"
998,ilp_prod,4,46,42,0,44,0,"{'ok': True, 'value': 46, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9bfd728139c148e29433fcb827dd943a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9bfd728139c148e29433fcb827dd943a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 33 RHS\nAt line 40 BOUNDS\nAt line 44 ENDATA\nProblem MODEL has 6 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 52.6667 - 0.00 seconds\nCgl0004I processed model has 2 rows, 3 columns (3 integer (0 of which binary)) and 6 elements\nCutoff increment increased from 1e-05 to 1.9999\nCbc0012I Integer solution of -46 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -52.666667 to -52.666667 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -46, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -52.6667 to -52.6667\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                46.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n46\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16674304008483887}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 8, 12]
consumption (rows=resources) = [[3, 4, 2], [2, 1, 2], [1, 2, 4]]
capacity = [11, 15, 14]
upper_bounds = [3, 3, 3]"
999,mul,16,33110953036925319949160854441239,not computable manually{'ok': True, 'value': 33110953036925319949160854441239, 'stdout': '33110953036925319949160854441239\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09431147575378418}",1,Compute: 8878585961646673 * 3729304776679143
