idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,ilp_prod,8,39,110,0,25,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fe8bc03f1fc347549e1b94472f50f7e6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fe8bc03f1fc347549e1b94472f50f7e6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 30 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.40720677375793457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 11, 9, 6]
consumption (rows=resources) = [[5, 7, 7, 6], [8, 2, 2, 4], [3, 8, 4, 6], [5, 1, 3, 1]]
capacity = [27, 30, 25, 25]
upper_bounds = [3, 3, 3, 4]"
1,mul,8,3906014270326125,0,0,39333333564525,0,"{'ok': True, 'value': 3906014270326125, 'stdout': '3906014270326125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07499575614929199}",1,Compute: 58089775 * 67240995
2,lcs,8,4,4,1,-1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07518744468688965}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbbbaad""
T = ""bdbbacbc"""
3,ilp_prod,4,63,33,0,39,0,"{'ok': True, 'value': 45, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/502e976ffb0b44dc8e256795ce292f11-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/502e976ffb0b44dc8e256795ce292f11-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 45 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -45 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                45.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n45.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15605878829956055}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 3, 9]
consumption (rows=resources) = [[2, 3, 2], [1, 3, 4], [1, 2, 4]]
capacity = [14, 15, 15]
upper_bounds = [7, 4, 3]"
4,rod,8,176,22,0,1,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07983732223510742}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 10, 19, 19, 20, 8, 11, 9]"
5,mul,4,31513860,4,0,31076740,0,"{'ok': True, 'value': 31513860, 'stdout': '31513860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08284997940063477}",1,Compute: 7146 * 4410
6,rod,2,10,5,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8nfxrq99/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08138298988342285}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 1]"
7,ilp_prod,16,79,195,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_4tjjlv5n/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.5587015151977539}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 6, 24, 7, 34, 8]
consumption (rows=resources) = [[13, 4, 8, 4, 12, 10], [14, 10, 9, 5, 2, 14], [11, 4, 11, 11, 13, 7], [3, 6, 12, 6, 2, 11]]
capacity = [36, 58, 32, 57]
upper_bounds = [3, 5, 3, 3, 3, 3]"
8,ilp_partition,4,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1883835792541504}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 10, 3]"
9,ilp_prod,8,89,105,0,17,0,"{'ok': True, 'value': 45, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b3222ec2f2574a4dbe319badf0fdc3ac-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b3222ec2f2574a4dbe319badf0fdc3ac-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 51 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -45 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                45.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n45.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1491096019744873}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 12, 22, 3]
consumption (rows=resources) = [[4, 6, 6, 6], [3, 7, 4, 7], [1, 1, 5, 4], [5, 3, 1, 7]]
capacity = [24, 23, 16, 17]
upper_bounds = [3, 3, 3, 3]"
10,add,16,9390698459264450,6666666666666666,0,9390698459264450,1,"{'ok': True, 'value': 9390698459264450, 'stdout': '9390698459264450\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07697463035583496}",1,Compute: 3778805958221640 + 5611892501042810
11,ilp_assign,4,17,8,0,7,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.1367313861846924}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 1, 7, 3], [4, 2, 10, 11], [3, 6, 5, 5], [8, 6, 9, 7]]"
12,ilp_prod,16,220,The final answer will be the maximum profit.,0,3,0,"{'ok': True, 'value': 124, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3bf68d01f7a344cab160329a88fb8bd6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3bf68d01f7a344cab160329a88fb8bd6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 94 RHS\nAt line 105 BOUNDS\nAt line 112 ENDATA\nProblem MODEL has 10 rows, 6 columns and 60 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 125.8 - 0.00 seconds\nCgl0004I processed model has 5 rows, 6 columns (6 integer (0 of which binary)) and 30 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -124 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -124, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -124 to -124\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                124.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n124.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14911651611328125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 40, 20, 14, 15, 4]
consumption (rows=resources) = [[11, 7, 15, 12, 3, 16], [15, 12, 2, 7, 3, 7], [16, 6, 4, 15, 1, 1], [4, 7, 3, 13, 1, 5]]
capacity = [55, 50, 47, 34]
upper_bounds = [3, 4, 3, 3, 10, 3]"
13,ilp_prod,16,355,106,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__kttjikn/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23831653594970703}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 29, 19, 5, 24, 17]
consumption (rows=resources) = [[15, 3, 15, 4, 11, 7], [5, 3, 11, 2, 9, 2], [3, 1, 7, 7, 4, 5], [3, 2, 16, 1, 4, 14]]
capacity = [61, 60, 37, 57]
upper_bounds = [4, 10, 3, 5, 5, 4]"
14,ilp_prod,16,283,239,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0ak9k161/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_0ak9k161/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1413283348083496}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 34, 45, 43, 32, 10]
consumption (rows=resources) = [[13, 6, 11, 13, 7, 12], [12, 2, 16, 7, 9, 2], [4, 2, 9, 3, 10, 14], [13, 4, 1, 1, 16, 1]]
capacity = [57, 42, 45, 34]
upper_bounds = [3, 8, 3, 4, 3, 3]"
15,sub,32,63917151006736327109218660374200,2,0,63917151006736327109218659674190,0,"{'ok': True, 'value': 63917151006736327109218660374200, 'stdout': '63917151006736327109218660374200\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0762338638305664}",1,Compute: 89862074012826272524083907496869 - 25944923006089945414865247122669
16,add,8,92245620,9013482,0,92245620,1,"{'ok': True, 'value': 92245620, 'stdout': '92245620\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0742025375366211}",1,Compute: 36840588 + 55405032
17,lcs,16,7,6,0,10,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07222294807434082}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dabaadabbdccdccb""
T = ""ccbabccdbbaabdd"""
18,ilp_assign,32,140,105,0,39,0,"{'ok': True, 'value': 140, 'stdout': '140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3666696548461914}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[33, 64, 91, 46, 25, 81, 39], [40, 90, 20, 14, 55, 40, 96], [64, 89, 96, 63, 91, 6, 46], [28, 21, 60, 43, 83, 40, 86], [87, 88, 85, 16, 37, 17, 87], [90, 50, 85, 11, 88, 54, 53], [40, 27, 12, 51, 83, 8, 12]]"
19,mul{'ok': True, 'value': 67417206793969410672280167559430, 'stdout': '67417206793969410672280167559430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07302021980285645}",1,Compute: 9400698895052305 * 7171510070325926
20,ilp_assign,8,27,21,0,52,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3954174518585205}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 20, 20, 3, 14, 19, 17], [8, 17, 23, 11, 9, 17, 13], [15, 4, 19, 1, 21, 14, 3], [12, 10, 18, 24, 2, 2, 12], [6, 4, 8, 12, 17, 2, 11], [18, 8, 19, 8, 11, 3, 22], [3, 2, 4, 11, 16, 13, 21]]"
21,ilp_assign,2,3,7,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39690685272216797}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5], [5, 1]]"
22,ilp_assign,16,80,66,0,110,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43758225440979004}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 28, 35, 38, 43, 31, 21], [35, 31, 21, 32, 36, 42, 3], [24, 42, 34, 24, 29, 8, 35], [44, 47, 10, 40, 26, 33, 7], [15, 34, 26, 34, 17, 37, 30], [40, 42, 21, 7, 48, 14, 32], [7, 34, 17, 14, 19, 11, 8]]"
23,mul,2,5115,5085,0,5085,0,"{'ok': True, 'value': 5115, 'stdout': '5115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08015322685241699}",1,Compute: 93 * 55
24,knap,16,445,1085,0,1080,0,"{'ok': True, 'value': 597, 'stdout': '597.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3961827754974365}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 23, 1, 9, 29, 21, 1, 6, 4, 18, 25, 29, 25, 29, 10, 8]
V = [2, 54, 44, 27, 35, 47, 42, 57, 24, 7, 59, 39, 29, 42, 27, 62]
C = 121"
25,ilp_partition,8,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19971513748168945}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 8, 24, 17, 19, 22, 13, 22]"
26,lcs,16,8,10,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08476114273071289}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babbbdadadaacdba""
T = ""dbbddcacdcbccdd"""
27,ilp_assign,32,69,185,0,145,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4287261962890625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[54, 9, 23, 67, 29, 43, 42], [53, 66, 70, 13, 69, 22, 70], [21, 64, 84, 77, 27, 43, 65], [19, 7, 30, 55, 70, 23, 6], [47, 21, 4, 93, 83, 55, 96], [41, 41, 64, 79, 86, 13, 95], [87, 22, 33, 4, 3, 37, 33]]"
28,lcs,4,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07262277603149414}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aacd""
T = ""cdb"""
29,add,8,49293892,26296650,0,49293892,1,"{'ok': True, 'value': 49293892, 'stdout': '49293892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07300400733947754}",1,Compute: 22199414 + 27094478
30,rod,8,160,22,0,22,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08361554145812988}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 1, 22, 2, 4, 19, 20, 16]"
31,add,32,120115601992462422312138668162452,150117501993458422312138668242452,0,120115592002462422312748668162452,0,"{'ok': True, 'value': 120115601992462422312138668162452, 'stdout': '120115601992462422312138668162452\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08743500709533691}",1,Compute: 48986831406196261102788635840186 + 71128770586266161209350032322266
32,ilp_partition,16,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20501184463500977}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 17, 23, 17, 4, 23, 23, 32, 20, 33, 18, 43, 16, 31, 10, 5]"
33,mul,2,352,352,1,352,1,"{'ok': True, 'value': 352, 'stdout': '352\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08162331581115723}",1,Compute: 32 * 11
34,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19035124778747559}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 6, 4]"
35,ilp_assign,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4133739471435547}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [4, 3]]"
36,add,4,9421,9421,1,9421,1,"{'ok': True, 'value': 9421, 'stdout': '9421\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09264945983886719}",1,Compute: 3230 + 6191
37,rod,8,176,46,0,28,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08476901054382324}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 18, 24, 10, 4, 20, 12, 2]"
38,lcs,16,9,7,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08183789253234863}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdaacdcbadbbbcca""
T = ""dbabbdbdadbbadaa"""
39,ilp_partition,8,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21277880668640137}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 7, 10, 1, 8, 19, 22, 21]"
40,ilp_prod,8,112,100,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_o0e5pmkz/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_o0e5pmkz/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15425801277160645}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 22, 14, 11]
consumption (rows=resources) = [[2, 1, 1, 8], [1, 3, 2, 1], [5, 5, 2, 2], [2, 4, 1, 6]]
capacity = [26, 30, 16, 31]
upper_bounds = [3, 3, 8, 3]"
41,ilp_prod,16,147,168,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_5xd4cbvw/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2479572296142578}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 47, 23, 24, 34, 19]
consumption (rows=resources) = [[7, 8, 6, 14, 10, 2], [3, 1, 8, 12, 14, 7], [3, 13, 6, 5, 7, 9], [14, 16, 14, 7, 3, 2]]
capacity = [52, 52, 32, 62]
upper_bounds = [4, 3, 4, 3, 3, 3]"
42,add,32,157423467356419809565503155294947,157408566356430889565502765495247,0,157423467356419809565503155294947,1,"{'ok': True, 'value': 157423467356419809565503155294947, 'stdout': '157423467356419809565503155294947\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08222508430480957}",1,Compute: 91926278763816914185120696799727 + 65497188592602895380382458495220
43,ilp_partition,32,1,10,0,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21541404724121094}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 14, 25, 38, 84, 80, 91, 18, 76, 24, 87, 1, 89, 9, 40, 4, 47, 96, 29, 79, 66, 44, 91, 59]"
44,ilp_assign,4,18,11,0,17,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37797093391418457}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 11, 12, 4], [11, 3, 3, 2], [8, 12, 8, 11], [3, 5, 5, 3]]"
45,mul,8,1918376639935830,669077692,0,1934343433334,0,"{'ok': True, 'value': 1918376639935830, 'stdout': '1918376639935830\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07537698745727539}",1,Compute: 55856466 * 34344755
46,ilp_prod,8,51,32,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_apospn39/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_apospn39/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14478659629821777}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 8, 11]
consumption (rows=resources) = [[4, 2, 2, 4], [1, 5, 7, 5], [2, 1, 1, 3], [4, 2, 7, 3]]
capacity = [27, 18, 22, 23]
upper_bounds = [5, 3, 3, 3]"
47,rod,16,512,48,0,37,0,"{'ok': True, 'value': 512, 'stdout': '512\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10227775573730469}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [32, 38, 23, 29, 20, 5, 44, 15, 37, 45, 37, 35, 25, 25, 48, 22]"
48,ilp_assign,16,52,105,0,117,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40883612632751465}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 19, 44, 21, 41, 9, 30], [40, 16, 34, 12, 46, 36, 13], [5, 35, 11, 4, 25, 32, 20], [15, 44, 9, 18, 26, 6, 36], [41, 17, 25, 31, 7, 6, 2], [6, 37, 23, 36, 22, 4, 28], [43, 39, 36, 13, 33, 13, 1]]"
49,rod,4,32,13,0,1,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07115006446838379}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 7, 1, 11]"
50,lcs,32,18,16,0,26,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07964920997619629}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddaadaaaacdcbccdbcabbbcdbbbacaa""
T = ""dbbdabacdbcdaacaaabcadacaaadbbc"""
51,ilp_assign,32,82,185,0,143,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_hcqm5ids/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.4009280204772949}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[35, 44, 45, 18, 11, 66, 4], [40, 66, 89, 27, 48, 68, 7], [50, 88, 78, 9, 50, 17, 58], [85, 71, 20, 19, 83, 31, 18], [16, 31, 28, 40, 65, 5, 73], [96, 12, 4, 61, 34, 85, 16], [76, 23, 5, 58, 48, 7, 9]]"
52,ilp_partition,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21800947189331055}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 6, 6]"
53,sub,8,29838337,33431111,0,29838337,1,"{'ok': True, 'value': 29838337, 'stdout': '29838337\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07093429565429688}",1,Compute: 99531453 - 69693116
54,rod,8,120,24,0,15,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07239151000976562}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 7, 23, 15, 17, 1, 9, 8]"
55,ilp_partition,8,2,1,0,1,0,"{'ok': True, 'value': 132, 'stdout': '132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1954941749572754}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 20, 19, 24, 19, 2, 13, 11]"
56,ilp_assign,8,27,36,0,46,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39380383491516113}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 12, 5, 9, 17, 16, 21], [23, 9, 8, 23, 18, 1, 10], [7, 12, 7, 13, 16, 11, 9], [1, 20, 5, 9, 8, 10, 10], [5, 8, 11, 5, 18, 3, 4], [16, 11, 20, 3, 8, 22, 22], [10, 6, 2, 9, 1, 1, 3]]"
57,sub,32,45652230854219928209487313752318,,0,45652230854219928209487313752318,1,"{'ok': True, 'value': 45652230854219928209487313752318, 'stdout': '45652230854219928209487313752318\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08322668075561523}",1,Compute: 88882251511483399564446026816074 - 43230020657263471354958713063756
58,ilp_assign,32,111,187,0,186,0,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39945077896118164}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 96, 77, 50, 39, 52, 87], [68, 44, 3, 83, 14, 34, 84], [25, 96, 31, 93, 12, 6, 69], [74, 55, 45, 87, 42, 1, 46], [1, 2, 30, 77, 33, 4, 74], [40, 79, 85, 11, 68, 13, 35], [34, 55, 92, 49, 89, 44, 60]]"
59,knap,32,1406,605,0,-1,0,"{'ok': True, 'value': 1406, 'stdout': '1406\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07616710662841797}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 48, 46, 19, 47, 60, 56, 46, 21, 52, 35, 55, 32, 62, 49, 9, 13, 44, 9, 31, 2, 29, 44, 49, 57, 56, 47, 62, 33, 51, 13, 8]
V = [70, 128, 46, 74, 53, 39, 97, 46, 45, 32, 124, 64, 94, 34, 83, 55, 119, 2, 28, 101, 32, 66, 16, 7, 26, 44, 54, 34, 48, 9, 58, 13]
C = 605"
60,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07463216781616211}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""dc"""
61,ilp_partition,2,2,0,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1902761459350586}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 2, 4]"
62,sub,2,18,18,1,18,1,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08984065055847168}",1,Compute: 97 - 79
63,knap,32,1872,2449,0,1,0,"{'ok': True, 'value': 1872, 'stdout': '1872.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4029653072357178}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [57, 40, 8, 51, 58, 51, 38, 10, 25, 23, 51, 60, 19, 17, 6, 22, 6, 64, 16, 47, 11, 31, 47, 17, 11, 63, 54, 7, 47, 24, 17, 49]
V = [19, 108, 69, 27, 90, 19, 40, 102, 128, 80, 45, 78, 26, 101, 10, 125, 107, 57, 97, 70, 34, 10, 99, 71, 35, 77, 86, 108, 118, 89, 117, 92]
C = 523"
64,sub,8,47887058,47887058,1,47887058,1,"{'ok': True, 'value': 47887058, 'stdout': '47887058\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09235548973083496}",1,Compute: 65936204 - 18049146
65,lcs,32,21,10,0,26,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07589340209960938}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacdccacacbccdddaabdabdaadacbddc""
T = ""baacdcaccccbdddaccdcbddcaaddbcd"""
66,mul,2,4675,4675,1,4675,1,"{'ok': True, 'value': 4675, 'stdout': '4675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07179975509643555}",1,Compute: 55 * 85
67,add,8,122691015,10597967,0,122690995,0,"{'ok': True, 'value': 122691015, 'stdout': '122691015\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07631230354309082}",1,Compute: 86223261 + 36467754
68,rod,16,192,36,0,64,0,"{'ok': True, 'value': 192, 'stdout': '192\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09189772605895996}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [12, 17, 13, 1, 1, 28, 7, 37, 35, 22, 14, 14, 4, 36, 2, 19]"
69,rod,32,1408,1084,0,1074,0,"{'ok': True, 'value': 1408, 'stdout': '1408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08308100700378418}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [44, 1, 39, 17, 16, 73, 22, 50, 83, 81, 73, 9, 47, 17, 22, 32, 35, 69, 72, 5, 16, 10, 58, 62, 56, 24, 40, 31, 40, 88, 53, 75]"
70,lcs,4,3,3,1,-1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07421565055847168}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaa""
T = ""abab"""
71,ilp_assign,16,78,116,0,105,0,"{'ok': True, 'value': 78, 'stdout': '78\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39110565185546875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 38, 21, 10, 38, 33, 22], [12, 45, 43, 4, 47, 23, 38], [31, 19, 7, 46, 10, 26, 15], [21, 46, 34, 9, 43, 1, 11], [33, 22, 4, 18, 35, 48, 25], [26, 43, 37, 35, 45, 20, 48], [31, 11, 47, 30, 21, 31, 15]]"
72,knap,2,20,14,0,-1,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08208608627319336}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 5]
V = [10, 10, 4]
C = 4"
73,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07401871681213379}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbd""
T = ""ccdba"""
74,knap,16,395,104,0,100,0,"{'ok': True, 'value': 500, 'stdout': '500\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3806297779083252}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 8, 27, 15, 12, 26, 24, 32, 2, 11, 32, 23, 5, 21, 15, 3]
V = [38, 6, 56, 34, 47, 9, 42, 12, 5, 50, 12, 52, 58, 28, 47, 4]
C = 141"
75,sub,32,4019232818967856515683719284196,16019233631137855515658240269400,0,40192328189678566507837292844196,0,"{'ok': True, 'value': 4019232818967856515683719284196, 'stdout': '4019232818967856515683719284196\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08229374885559082}",1,Compute: 26019498633788671566324390269400 - 22000265814820815050640670985204
76,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08062410354614258}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""ba"""
77,mul,16,24340198532604030522102699754600,246464446444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,2448888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888,0,"{'ok': True, 'value': 24340198532604030522102699754600, 'stdout': '24340198532604030522102699754600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0927734375}",1,Compute: 3865727284759657 * 6296408602997800
78,knap,16,246,157,0,157,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19933462142944336}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [24, 3, 24, 11, 28, 10, 13, 13, 31, 20, 32, 2, 32, 25, 19, 27]
V = [26, 38, 11, 50, 39, 3, 7, 14, 3, 13, 19, 3, 38, 23, 7, 29]
C = 157"
79,knap,4,38,26,0,7,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08543992042541504}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 8, 3, 2]
V = [9, 13, 15, 14]
C = 7"
80,ilp_prod,16,174,The solution to this problem would be the maximum profit that can be obtained while satisfying the resource constraints.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_n2skmm02/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23768138885498047}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 34, 34, 28, 29, 35]
consumption (rows=resources) = [[7, 10, 16, 12, 12, 6], [12, 8, 2, 4, 1, 12], [5, 12, 10, 13, 15, 15], [16, 1, 4, 14, 1, 12]]
capacity = [51, 53, 58, 35]
upper_bounds = [3, 4, 3, 3, 3, 3]"
81,mul,4,29231160,57,0,29089960,0,"{'ok': True, 'value': 29231160, 'stdout': '29231160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08241009712219238}",1,Compute: 3220 * 9078
82,add,8,104825580,41313108,0,104825580,1,"{'ok': True, 'value': 104825580, 'stdout': '104825580\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08300065994262695}",1,Compute: 39792878 + 65032702
83,ilp_partition,4,5,1,0,0,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19630837440490723}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 10, 7, 1]"
84,add,2,145,145,1,145,1,"{'ok': True, 'value': 145, 'stdout': '145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08850955963134766}",1,Compute: 86 + 59
85,ilp_prod,32,357,408,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_63o9qp3m/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22811508178710938}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [89, 10, 26, 51, 28, 83]
consumption (rows=resources) = [[9, 1, 28, 3, 18, 19], [13, 21, 15, 27, 25, 5], [32, 28, 5, 8, 28, 27], [9, 9, 7, 27, 15, 25]]
capacity = [103, 128, 101, 120]
upper_bounds = [3, 3, 3, 4, 3, 3]"
86,sub,2,67,67,1,67,1,"{'ok': True, 'value': 67, 'stdout': '67\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371520042419434}",1,Compute: 79 - 12
87,add,8,152779215,152727625,0,152779215,1,"{'ok': True, 'value': 152779215, 'stdout': '152779215\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08920526504516602}",1,Compute: 99984293 + 52794922
88,ilp_prod,2,49,21,0,21,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/365b723b99654585850c4f4b0866eb07-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/365b723b99654585850c4f4b0866eb07-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14867568016052246}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[1, 1], [1, 2]]
capacity = [7, 7]
upper_bounds = [7, 3]"
89,sub,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0844268798828125}",1,Compute: 34 - 33
90,ilp_prod,16,366,The solution would involve setting up the problem in a linear programming solver and solving it.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_jl3_i638/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.25725293159484863}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [44, 43, 11, 38, 9, 34]
consumption (rows=resources) = [[7, 12, 10, 1, 16, 13], [2, 1, 13, 2, 8, 9], [9, 15, 10, 4, 7, 14], [4, 15, 11, 6, 15, 9]]
capacity = [36, 52, 62, 47]
upper_bounds = [5, 3, 3, 7, 3, 3]"
91,rod,32,2848,69,0,191,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0383505821228027}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [89, 60, 40, 8, 3, 32, 23, 16, 53, 56, 4, 11, 74, 87, 86, 4, 12, 72, 17, 86, 87, 20, 42, 67, 36, 40, 51, 39, 69, 79, 42, 45]"
92,sub,4,256,256,1,256,1,"{'ok': True, 'value': 256, 'stdout': '256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08704972267150879}",1,Compute: 3860 - 3604
93,mul,4,73239243,508,0,72388223,0,"{'ok': True, 'value': 73239243, 'stdout': '73239243\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10377240180969238}",1,Compute: 8547 * 8569
94,ilp_assign,2,10,11,0,11,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4049251079559326}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [6, 5]]"
95,lcs,8,5,5,1,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08727192878723145}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddacccab""
T = ""acccaccad"""
96,rod,4,12,10,0,10,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07247424125671387}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 6, 5, 8]"
97,ilp_assign,8,33,16,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_uzxgjquy/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3936636447906494}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 10, 12, 7, 5, 5, 21], [16, 7, 16, 6, 5, 11, 9], [22, 1, 5, 9, 21, 3, 21], [15, 17, 18, 8, 14, 24, 8], [15, 21, 18, 2, 22, 12, 4], [14, 9, 19, 19, 3, 21, 16], [12, 7, 3, 6, 3, 1, 14]]"
98,knap,4,26,26,1,16,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0923006534576416}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 8, 5, 8]
V = [5, 16, 10, 11]
C = 13"
99,knap,16,413,1045,0,The total weight exceeds the capacity.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [20, 15, 31, 21, 19, 10, 5, 25, 1, 32, 15, 4, 3, 26, 6, 32]
V = [44, 60, 48, 41, 27, 6, 3, 27, 43, 41, 30, 60, 44, 43, 21, 20]
C = 132"
100,ilp_partition,8,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22401070594787598}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 24, 13, 7, 5, 12, 3, 1]"
101,ilp_partition,32,1,1,1,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1r1mcshg/main.py"", line 22, in <module>\n    res = min_diff(weights)\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08488941192626953}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 73, 25, 45, 33, 41, 84, 46, 21, 55, 21, 18, 65, 39, 85, 67, 20, 21, 37, 21, 40, 43, 16, 68]"
102,mul,2,1892,22,0,1902,0,"{'ok': True, 'value': 1892, 'stdout': '1892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08449983596801758}",1,Compute: 86 * 22
103,mul,2,1520,1520,1,1520,1,"{'ok': True, 'value': 1520, 'stdout': '1520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08565664291381836}",1,Compute: 40 * 38
104,mul,32,5007621967102985464882232380498427915448382439810297995082007936,500663105418149054580785537599405577297507855472385647435877,0,5006684431590458473687503301643075656513951463078875115456,0,"{'ok': True, 'value': 5007621967102985464882232380498427915448382439810297995082007936, 'stdout': '5007621967102985464882232380498427915448382439810297995082007936\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08283638954162598}",1,Compute: 62537068349081325526119791560128 * 80074459825178994453669022697562
105,lcs,8,4,5,0,7,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08346128463745117}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbacdba""
T = ""cccbdbaac"""
106,mul,2,3850,3850,1,3850,1,"{'ok': True, 'value': 3850, 'stdout': '3850\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08271980285644531}",1,Compute: 55 * 70
107,add,2,115,115,1,115,1,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07594513893127441}",1,Compute: 87 + 28
108,knap,2,6,10,0,-1,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08434724807739258}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 4]
V = [6, 5, 3]
C = 4"
109,add,2,52,52,1,52,1,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07871079444885254}",1,Compute: 18 + 34
110,rod,16,344,48,0,84,0,"{'ok': True, 'value': 344, 'stdout': '344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09349679946899414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [18, 43, 26, 9, 27, 30, 26, 44, 19, 16, 43, 20, 48, 13, 46, 3]"
111,add,16,11142722613622978,11142622613622988,0,11142722613622978,1,"{'ok': True, 'value': 11142722613622978, 'stdout': '11142722613622978\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07903742790222168}",1,Compute: 4678531439802976 + 6464191173820002
112,ilp_assign,4,18,15,0,18,1,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4216957092285156}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 10, 2, 4], [12, 5, 7, 3], [9, 8, 12, 5], [6, 11, 3, 11]]"
113,sub,4,1117,1117,1,1117,1,"{'ok': True, 'value': 1117, 'stdout': '1117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09204959869384766}",1,Compute: 4902 - 3785
114,ilp_partition,4,3,1,0,8,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2040560245513916}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 5, 1, 7]"
115,mul,8,1425568979003280,0,0,1418386399328880,0,"{'ok': True, 'value': 1425568979003280, 'stdout': '1425568979003280\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07358050346374512}",1,Compute: 85971804 * 16581820
116,sub,2,79,79,1,79,1,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08111810684204102}",1,Compute: 99 - 20
117,sub,32,24311118786045221254327131894276,24311098786045221054327131895376,0,24311118786045221254327131894276,1,"{'ok': True, 'value': 24311118786045221254327131894276, 'stdout': '24311118786045221254327131894276\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0814809799194336}",1,Compute: 71719866154130818657093156541736 - 47408747368085597402766024647460
118,mul,4,17505866,47,0,17486686,0,"{'ok': True, 'value': 17505866, 'stdout': '17505866\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07826375961303711}",1,Compute: 3694 * 4739
119,knap,2,17,18,0,7,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08328533172607422}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 2]
V = [7, 10, 7]
C = 3"
120,knap,8,91,105,0,103,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08593320846557617}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 1, 6, 4, 12, 14, 8, 9]
V = [26, 23, 10, 6, 21, 14, 3, 26]
C = 34"
121,lcs,8,5,4,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08509397506713867}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdaaabc""
T = ""baabbabbb"""
122,mul{'ok': True, 'value': 3942868522282296999742064789126431723460032110790460344984653813, 'stdout': '3942868522282296999742064789126431723460032110790460344984653813\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08354902267456055}",1,Compute: 82541913939247601774318893004941 * 47768077260533627218156171632393
123,knap,16,457,138,0,1043,0,"{'ok': True, 'value': 457, 'stdout': '457\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14952468872070312}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 12, 29, 27, 7, 27, 9, 2, 13, 14, 10, 16, 30, 24, 12, 15]
V = [53, 50, 42, 25, 53, 13, 25, 48, 33, 50, 1, 27, 7, 61, 44, 40]
C = 138"
124,sub,4,1404,1404,1,1404,1,"{'ok': True, 'value': 1404, 'stdout': '1404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07523083686828613}",1,Compute: 6378 - 4974
125,rod,8,152,22,0,8,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08124327659606934}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 15, 13, 14, 22, 16, 7, 9]"
126,rod,16,320,36,0,7,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11893963813781738}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 38, 7, 26, 21, 35, 34, 2, 19, 12, 3, 33, 1, 36, 23, 19]"
127,ilp_partition,16,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1972484588623047}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 32, 31, 20, 30, 18, 35, 13, 33, 33, 12, 14, 22, 4, 14, 41]"
128,knap,2,14,13,0,4,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08441925048828125}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 4, 3]
V = [8, 4, 6]
C = 4"
129,mul,8,6474732381118234,1324444,0,6446968633863334,0,"{'ok': True, 'value': 6474732381118234, 'stdout': '6474732381118234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0843040943145752}",1,Compute: 72221509 * 89651026
130,ilp_assign,8,52,56,0,73,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39032816886901855}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 9, 22, 11, 14, 14, 5], [21, 22, 20, 23, 17, 21, 4], [20, 14, 15, 12, 10, 19, 16], [4, 15, 23, 14, 4, 14, 4], [10, 15, 9, 6, 13, 20, 5], [19, 14, 7, 5, 6, 17, 3], [8, 7, 12, 10, 10, 15, 16]]"
131,sub,16,2126227705246807,2126226705246800,0,2126227705246807,1,"{'ok': True, 'value': 2126227705246807, 'stdout': '2126227705246807\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09077715873718262}",1,Compute: 8296700900266109 - 6170473195019302
132,knap,8,62,103,0,60,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08205509185791016}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 8, 8, 1, 2, 15, 16]
V = [22, 10, 5, 4, 4, 4, 15, 26]
C = 31"
133,ilp_partition,16,0,1,0,0,1,"{'ok': True, 'value': 430, 'stdout': '430\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21247482299804688}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 38, 42, 5, 29, 2, 15, 45, 30, 10, 45, 11, 24, 36, 48, 30]"
134,add,2,71,71,1,71,1,"{'ok': True, 'value': 71, 'stdout': '71\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0816810131072998}",1,Compute: 49 + 22
135,add,2,120,120,1,120,1,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08332133293151855}",1,Compute: 42 + 78
136,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': 'Length of LCS is  1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0763697624206543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cb""
T = ""c"""
137,mul,2,748,748,1,748,1,"{'ok': True, 'value': 748, 'stdout': '748\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07548332214355469}",1,Compute: 11 * 68
138,rod,32,1600,1050,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_g__7t95s/main.py"", line 9, in <module>\n    res = cut_rod(P, N)\nNameError: name \'P\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07787227630615234}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [50, 52, 45, 71, 76, 64, 61, 48, 2, 94, 6, 84, 77, 60, 2, 63, 56, 4, 21, 61, 80, 81, 96, 90, 13, 34, 78, 17, 92, 22, 17, 48]"
139,rod,32,2560,720,0,32,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0368893146514893}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [80, 65, 27, 50, 4, 67, 64, 90, 34, 83, 12, 24, 36, 70, 93, 72, 15, 72, 75, 62, 66, 27, 42, 25, 50, 72, 81, 20, 42, 72, 60, 7]"
140,ilp_assign,16,34,105,0,4,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4265406131744385}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 21, 2, 32, 30, 45, 23], [33, 14, 11, 21, 35, 32, 33], [38, 47, 32, 22, 13, 2, 4], [15, 30, 25, 42, 26, 8, 7], [12, 22, 17, 7, 11, 5, 38], [1, 25, 28, 36, 13, 8, 3], [24, 35, 1, 5, 1, 14, 8]]"
141,knap,4,18,14,0,2,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07518386840820312}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 3, 4, 3]
V = [6, 8, 10, 1]
C = 8"
142,mul,16,77545967120285951480887788370400,678979365,0,77947790527208260296368356570,0,"{'ok': True, 'value': 77545967120285951480887788370400, 'stdout': '77545967120285951480887788370400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07598352432250977}",1,Compute: 9387794779052720 * 8260296368356570
143,ilp_prod,4,36,45,0,The answer will be printed out when the code is executed.,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8b9c00c46f404d798b1ccc59db3e2084-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8b9c00c46f404d798b1ccc59db3e2084-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16478991508483887}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 7]
consumption (rows=resources) = [[2, 1, 2], [4, 2, 2], [1, 3, 4]]
capacity = [10, 12, 9]
upper_bounds = [3, 3, 3]"
144,add,4,9878,9878,1,9878,1,"{'ok': True, 'value': 9878, 'stdout': '9878\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09841394424438477}",1,Compute: 6931 + 2947
145,ilp_assign,4,13,26,0,11,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40189385414123535}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3, 11, 6], [12, 6, 4, 11], [2, 9, 8, 3], [11, 5, 6, 4]]"
146,lcs,32,16,10,0,26,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0857691764831543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaabccbbbdbcdacdcbabbbbbcbbcabc""
T = ""dacdddddcdabdbaaaadbbccbcadddcdd"""
147,ilp_partition,32,1,10,0,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20320343971252441}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 32, 27, 10, 69, 92, 3, 88, 93, 80, 38, 29, 36, 4, 82, 13, 88, 96, 51, 42, 9, 57, 77, 21]"
148,ilp_assign,16,47,110,0,113,0,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4018514156341553}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 24, 7, 35, 7, 14, 22], [32, 22, 1, 10, 14, 20, 35], [36, 24, 33, 44, 17, 8, 24], [1, 47, 30, 36, 17, 42, 5], [19, 46, 8, 24, 30, 1, 5], [28, 47, 11, 1, 45, 44, 22], [30, 31, 36, 43, 43, 17, 12]]"
149,mul,4,24631462,200001442,0,24749222,0,"{'ok': True, 'value': 24631462, 'stdout': '24631462\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07224440574645996}",1,Compute: 3898 * 6319
150,mul,4,13767032,1422,0,13639992,0,"{'ok': True, 'value': 13767032, 'stdout': '13767032\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08542227745056152}",1,Compute: 3644 * 3778
151,sub,16,1293225406077872,9,0,1293225406077872,1,"{'ok': True, 'value': 1293225406077872, 'stdout': '1293225406077872\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07710385322570801}",1,Compute: 3748919686330189 - 2455694280252317
152,mul,2,1560,1560,1,1560,1,"{'ok': True, 'value': 1560, 'stdout': '1560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07689094543457031}",1,Compute: 52 * 30
153,lcs,16,11,7,0,10,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10987567901611328}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddaccadccbbabcca""
T = ""dddcbdbacbcccad"""
154,add,16,16555786581617571,10000000000000000,0,16555786581617571,1,"{'ok': True, 'value': 16555786581617571, 'stdout': '16555786581617571\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08156204223632812}",1,Compute: 8493082811625480 + 8062703769992091
155,lcs,8,5,4,0,3,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08444356918334961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbccbdc""
T = ""dccbaccb"""
156,rod,8,80,22,0,36,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08634614944458008}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [10, 5, 9, 18, 19, 22, 24, 2]"
157,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20209145545959473}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 5, 6, 13, 6, 7, 14, 24]"
158,add,4,7705,7705,1,7705,1,"{'ok': True, 'value': 7705, 'stdout': '7705\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07602882385253906}",1,Compute: 4668 + 3037
159,ilp_prod,32,274,258,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_a0b95pii/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23668813705444336}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [81, 53, 70, 22, 3, 39]
consumption (rows=resources) = [[21, 5, 2, 5, 12, 23], [30, 25, 1, 12, 16, 29], [24, 7, 30, 26, 28, 31], [15, 12, 16, 26, 19, 5]]
capacity = [104, 64, 103, 110]
upper_bounds = [3, 3, 3, 3, 3, 3]"
160,ilp_assign,16,68,105,0,110,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_7to3hh99/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.40615296363830566}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 18, 32, 16, 5, 12, 8], [28, 31, 43, 25, 31, 45, 8], [38, 27, 19, 17, 4, 13, 44], [15, 19, 37, 38, 38, 21, 29], [18, 29, 8, 27, 19, 6, 18], [4, 33, 16, 24, 40, 1, 25], [47, 48, 29, 14, 24, 17, 45]]"
161,knap,16,340,1047,0,1093,0,"{'ok': True, 'value': 340, 'stdout': '340\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14646196365356445}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 10, 10, 22, 11, 25, 23, 23, 21, 26, 11, 29, 25, 9, 30, 22]
V = [24, 7, 5, 58, 34, 31, 16, 2, 61, 64, 30, 31, 17, 25, 37, 7]
C = 160"
162,ilp_partition,32,0,100,0,1,0,"{'ok': True, 'value': 1032, 'stdout': '1032\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20221209526062012}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 48, 31, 68, 37, 19, 95, 40, 36, 91, 76, 6, 64, 68, 14, 29, 62, 27, 20, 16, 1, 74, 22, 79]"
163,sub,2,15,15,1,15,1,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08890557289123535}",1,Compute: 29 - 14
164,knap,16,454,139,0,139,0,"{'ok': True, 'value': 602, 'stdout': '602.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39203953742980957}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 4, 26, 27, 21, 17, 29, 23, 8, 22, 25, 13, 13, 24, 1, 24]
V = [45, 26, 32, 45, 20, 49, 12, 52, 63, 25, 51, 64, 53, 36, 6, 23]
C = 139"
165,ilp_prod,8,36,105,0,105,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/82ec771a402c4df286cdab2632438ade-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/82ec771a402c4df286cdab2632438ade-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 48 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -33 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -36 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -48 to -36 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -36, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -48 to -36\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15391898155212402}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 18, 6, 5]
consumption (rows=resources) = [[7, 4, 3, 4], [5, 6, 8, 8], [7, 4, 8, 6], [2, 4, 8, 5]]
capacity = [19, 16, 17, 18]
upper_bounds = [3, 3, 3, 3]"
166,rod,16,688,64,0,1,0,"{'ok': True, 'value': 688, 'stdout': '688\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1027224063873291}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [43, 5, 35, 38, 16, 11, 22, 46, 39, 24, 38, 38, 39, 45, 1, 28]"
167,ilp_assign,8,51,76,0,70,0,"{'ok': True, 'value': 51, 'stdout': '51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3920576572418213}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 20, 15, 6, 19, 14, 10], [7, 18, 22, 9, 12, 21, 20], [11, 13, 20, 20, 23, 23, 19], [14, 24, 4, 13, 7, 2, 23], [7, 16, 22, 24, 11, 17, 8], [18, 24, 8, 16, 23, 24, 16], [8, 4, 5, 5, 24, 9, 11]]"
168,mul,8,2657970766157694,173,0,265435255533324,0,"{'ok': True, 'value': 2657970766157694, 'stdout': '2657970766157694\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07410001754760742}",1,Compute: 74102489 * 35868846
169,knap,32,1612,1046,0,0,0,"{'ok': True, 'value': 1612, 'stdout': '1612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0926966667175293}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 9, 20, 4, 39, 36, 16, 47, 17, 6, 29, 56, 6, 37, 57, 60, 15, 63, 49, 12, 56, 44, 4, 1, 62, 56, 57, 38, 47, 36, 60, 21]
V = [99, 57, 28, 36, 104, 3, 98, 101, 44, 29, 24, 29, 59, 26, 55, 77, 99, 11, 88, 83, 21, 82, 100, 92, 52, 35, 37, 112, 97, 85, 38, 40]
C = 541"
170,knap,32,1531,1047,0,-1,0,"{'ok': True, 'value': 1531, 'stdout': '1531\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08803534507751465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [40, 11, 55, 51, 45, 5, 18, 28, 34, 20, 25, 12, 10, 7, 7, 27, 16, 25, 27, 19, 6, 33, 12, 36, 25, 43, 53, 22, 37, 20, 10, 54]
V = [62, 6, 70, 128, 45, 35, 124, 29, 25, 14, 86, 84, 77, 25, 33, 2, 92, 101, 123, 41, 114, 62, 97, 45, 59, 49, 73, 91, 61, 2, 19, 97]
C = 416"
171,rod,16,528,64,0,64,0,"{'ok': True, 'value': 528, 'stdout': '528\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09331512451171875}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [33, 37, 27, 11, 45, 26, 5, 18, 15, 10, 43, 14, 46, 30, 12, 32]"
172,mul,2,2840,40,0,2840,1,"{'ok': True, 'value': 2840, 'stdout': '2840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08100342750549316}",1,Compute: 40 * 71
173,ilp_prod,4,38,33,0,The maximum profit will be printed by the program.,0,"{'ok': True, 'value': 11, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e66ae81ebe3c4ac7b1a34dadf03ade85-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e66ae81ebe3c4ac7b1a34dadf03ade85-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12.2222 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -11 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                11.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n11.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16912341117858887}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 6, 5]
consumption (rows=resources) = [[1, 3, 4], [3, 4, 1], [3, 4, 4]]
capacity = [16, 10, 16]
upper_bounds = [3, 3, 4]"
174,ilp_assign,32,75,110,0,114,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4138503074645996}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[60, 28, 61, 30, 7, 44, 20], [12, 85, 14, 96, 77, 1, 30], [21, 65, 44, 85, 9, 18, 27], [8, 35, 37, 78, 61, 52, 4], [72, 27, 14, 55, 64, 72, 29], [26, 33, 55, 22, 7, 36, 64], [89, 6, 54, 24, 57, 53, 4]]"
175,add,16,14030943188302836,18115041116111111,0,14031043188302836,0,"{'ok': True, 'value': 14030943188302836, 'stdout': '14030943188302836\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08699488639831543}",1,Compute: 9949915780126618 + 4081027408176218
176,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07900023460388184}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdabdddd""
T = ""dacbbcad"""
177,sub,4,385,485,0,385,1,"{'ok': True, 'value': 385, 'stdout': '385\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08308649063110352}",1,Compute: 5519 - 5134
178,ilp_prod,8,48,60,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_3s9j75f9/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_3s9j75f9/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17072391510009766}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3, 22, 4]
consumption (rows=resources) = [[5, 4, 2, 5], [5, 8, 8, 4], [5, 7, 8, 5], [8, 4, 7, 2]]
capacity = [29, 28, 22, 19]
upper_bounds = [3, 3, 3, 4]"
179,rod,2,12,6,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__p4ynsfg/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09036779403686523}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 1]"
180,mul,8,1270876625043701,12432968554644111,0,127488284554411,0,"{'ok': True, 'value': 1270876625043701, 'stdout': '1270876625043701\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08354640007019043}",1,Compute: 98356667 * 12921103
181,add,32,84569279980692977104748347429124,80028911034197392790644190712470,0,84569280000000000000000000000000,0,"{'ok': True, 'value': 84569279980692977104748347429124, 'stdout': '84569279980692977104748347429124\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09318161010742188}",1,Compute: 18002891103419739279064419071247 + 66566388877273237825683928357877
182,knap,16,431,1080,0,1035,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43363070487976074}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [19, 26, 13, 2, 5, 30, 24, 14, 26, 28, 3, 6, 24, 13, 14, 24]
V = [60, 29, 64, 10, 25, 48, 47, 50, 57, 31, 20, 13, 50, 55, 40, 46]
C = 135"
183,mul,8,2709566490363900,1202971800,0,27186463885790,0,"{'ok': True, 'value': 2709566490363900, 'stdout': '2709566490363900\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07248044013977051}",1,Compute: 30010790 * 90286410
184,knap,8,111,110,0,103,0,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08543109893798828}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 10, 15, 9, 7, 5, 11, 10]
V = [9, 12, 21, 26, 19, 23, 29, 31]
C = 34"
185,mul,2,3366,3396,0,3366,1,"{'ok': True, 'value': 3366, 'stdout': '3366\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07774829864501953}",1,Compute: 34 * 99
186,ilp_partition,4,3,1,0,1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21877193450927734}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 8, 12, 11]"
187,ilp_partition,32,0,10,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20713281631469727}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [80, 52, 73, 82, 52, 5, 5, 1, 75, 50, 77, 93, 19, 27, 67, 39, 15, 73, 94, 31, 47, 93, 8, 90]"
188,rod,2,4,2,0,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07604384422302246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 1]"
189,lcs,2,0,0,1,30,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07675433158874512}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""cc"""
190,ilp_partition,4,6,4,0,12,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21122980117797852}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 12, 10, 2]"
191,rod,8,168,23,0,53,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07691717147827148}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 19, 20, 5, 19, 23, 5, 23]"
192,sub,8,46044869,46044869,1,46044869,1,"{'ok': True, 'value': 46044869, 'stdout': '46044869\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09654569625854492}",1,Compute: 92290984 - 46246115
193,mul,16,52012832996071203055152938191737,2,0,518302482932293859939855566667,0,"{'ok': True, 'value': 52012832996071203055152938191737, 'stdout': '52012832996071203055152938191737\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08370828628540039}",1,Compute: 5571581027665419 * 9335381238790923
194,ilp_partition,2,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20263409614562988}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 6, 2]"
195,ilp_partition,8,1,1,1,6,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19292616844177246}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 1, 10, 7, 18, 17, 22, 1]"
196,rod,16,640,46,0,7,0,"{'ok': True, 'value': 640, 'stdout': '640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13314509391784668}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [40, 26, 7, 45, 35, 3, 39, 5, 7, 19, 22, 36, 23, 35, 6, 27]"
197,sub,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07173824310302734}",1,Compute: 83 - 25
198,sub,16,392892436267970,4392892436278970,0,392892436277970,0,"{'ok': True, 'value': 392892436267970, 'stdout': '392892436267970\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08435797691345215}",1,Compute: 6545818454573975 - 6152926018306005
199,ilp_partition,8,0,1,0,30,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08125758171081543}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 10, 17, 4, 3, 24, 15, 14]"
200,ilp_assign,4,8,13,0,18,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3910839557647705}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 9, 3, 8], [4, 2, 12, 9], [5, 12, 2, 1], [7, 12, 2, 7]]"
201,add,4,4880,4880,1,4880,1,"{'ok': True, 'value': 4880, 'stdout': '4880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0788869857788086}",1,Compute: 2568 + 2312
202,knap,16,441,1045,0,The total weight exceeds the capacity.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_bji74_2u/main.py"", line 12, in <module>\n    cost = np.outer(V, W)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/numpy/core/numeric.py"", line 925, in outer\n    return multiply(a.ravel()[:, newaxis], b.ravel()[newaxis, :], out)\nTypeError: unsupported operand type(s) for *: \'ellipsis\' and \'ellipsis\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.378828763961792}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 31, 23, 23, 32, 27, 12, 7, 27, 31, 5, 13, 17, 27, 14, 8]
V = [56, 29, 59, 29, 33, 3, 39, 53, 50, 45, 40, 1, 30, 34, 52, 28]
C = 155"
203,ilp_prod,32,338,559,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_peleynty/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24672436714172363}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [71, 73, 40, 14, 53, 89]
consumption (rows=resources) = [[9, 22, 27, 16, 23, 25], [5, 1, 7, 28, 9, 31], [17, 26, 30, 11, 16, 21], [21, 9, 23, 6, 31, 4]]
capacity = [126, 128, 80, 102]
upper_bounds = [4, 3, 3, 4, 3, 3]"
204,rod,8,112,22,0,0,0,"{'ok': True, 'value': 112, 'stdout': '112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08058571815490723}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [14, 12, 8, 4, 14, 24, 16, 24]"
205,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2169790267944336}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 23, 1, 5, 2, 6, 18, 9]"
206,add,16,7321289507199393,1290758218171243,0,7321296507209393,0,"{'ok': True, 'value': 7321289507199393, 'stdout': '7321289507199393\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09230923652648926}",1,Compute: 3290758218171243 + 4030531289028150
207,lcs,2,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07691407203674316}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""dad"""
208,mul,32,726237110538312364186337377990738010104134688639947412006938766,743874565783476871080197577647866945645554444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,749974832841416713664935753426498526996,0,"{'ok': True, 'value': 726237110538312364186337377990738010104134688639947412006938766, 'stdout': '726237110538312364186337377990738010104134688639947412006938766\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07540392875671387}",1,Compute: 20899029464049227788497855813857 * 34749800788002837007857474114638
209,ilp_prod,8,60,41,0,The answer will be printed when the code is run.,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/01d18fcaa2454a309c2115f08e1d952f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/01d18fcaa2454a309c2115f08e1d952f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 1.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1504662036895752}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 7, 15]
consumption (rows=resources) = [[5, 1, 8, 2], [4, 1, 4, 3], [1, 8, 5, 5], [3, 7, 6, 2]]
capacity = [21, 19, 20, 31]
upper_bounds = [4, 3, 3, 4]"
210,add,2,73,73,1,73,1,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07559823989868164}",1,Compute: 46 + 27
211,ilp_assign,16,35,105,0,105,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39046168327331543}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 26, 20, 33, 3, 3, 1], [24, 8, 12, 47, 43, 43, 18], [1, 17, 3, 27, 27, 1, 5], [28, 34, 18, 13, 43, 16, 20], [8, 5, 24, 26, 34, 4, 23], [15, 19, 43, 25, 1, 30, 38], [21, 47, 9, 7, 46, 2, 25]]"
212,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07655787467956543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdabcbcbacdaaac""
T = ""cdddccdbadbdccc"""
213,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 346, 'stdout': '346\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2305619716644287}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [35, 32, 6, 47, 45, 6, 18, 9, 20, 35, 8, 4, 18, 47, 5, 11]"
214,mul,16,8342505389407417632086808769336,"The actual product of the two numbers is a very large number that can't be computed directly using code. However, we can describe the process of computing it.",0,83468809653659955938644466666,0,"{'ok': True, 'value': 8342505389407417632086808769336, 'stdout': '8342505389407417632086808769336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0895538330078125}",1,Compute: 4471530914820443 * 1865693327034152
215,sub,32,37190255450403561340467520919428,37180255449406551340467520919427,0,37190255450403561340467520919428,1,"{'ok': True, 'value': 37190255450403561340467520919428, 'stdout': '37190255450403561340467520919428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08429527282714844}",1,Compute: 76130707580873471522506019378056 - 38940452130469910182038498458628
216,knap,2,14,13,0,8,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07415556907653809}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 3]
V = [6, 8, 5]
C = 3"
217,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19194245338439941}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 12, 7]"
218,add,8,86182490,776713,0,86182488,0,"{'ok': True, 'value': 86182490, 'stdout': '86182490\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08388471603393555}",1,Compute: 61349906 + 24832584
219,knap,2,10,5,0,13,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08429479598999023}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 3]
V = [3, 10, 2]
C = 5"
220,ilp_assign,8,22,56,0,56,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u2ac2yoc/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.4148406982421875}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 14, 24, 15, 6, 12, 3], [8, 12, 22, 12, 7, 2, 11], [17, 23, 21, 4, 12, 9, 19], [21, 1, 3, 9, 5, 15, 9], [10, 3, 18, 3, 20, 5, 19], [4, 3, 18, 8, 20, 2, 5], [18, 11, 23, 4, 3, 5, 19]]"
221,rod,16,672,44,0,2,0,"{'ok': True, 'value': 672, 'stdout': '672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09954690933227539}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [42, 35, 11, 8, 23, 16, 37, 41, 20, 23, 13, 44, 3, 25, 11, 19]"
222,knap,16,380,141,0,100,0,"{'ok': True, 'value': 470, 'stdout': '470\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39626455307006836}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 2, 19, 12, 20, 28, 17, 1, 19, 15, 30, 11, 30, 3, 25, 32]
V = [15, 36, 43, 5, 61, 39, 4, 24, 15, 27, 59, 25, 17, 40, 53, 7]
C = 141"
223,mul,16,61888131442807739304364148880978,"The actual multiplication result is too large to fit into a standard integer data type, so it can't be represented directly.",0,6098338236336464458455665646819578,0,"{'ok': True, 'value': 61888131442807739304364148880978, 'stdout': '61888131442807739304364148880978\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07483410835266113}",1,Compute: 6520663580409789 * 9491078734492602
224,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2144482135772705}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 15, 16, 7, 8, 3, 10, 5]"
225,sub,4,2065,2065,1,2065,1,"{'ok': True, 'value': 2065, 'stdout': '2065\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09386444091796875}",1,Compute: 6768 - 4703
226,ilp_prod,2,20,30,0,10,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/64d4321882fa4e07b7239246fe96c10a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/64d4321882fa4e07b7239246fe96c10a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1828749179840088}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 5]
consumption (rows=resources) = [[2, 2], [1, 3]]
capacity = [8, 10]
upper_bounds = [4, 3]"
227,mul{'ok': True, 'value': 3959376507379182493737622299480, 'stdout': '3959376507379182493737622299480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06962847709655762}",1,Compute: 3233235722850110 * 1224586404077268
228,rod,16,240,46,0,16,0,"{'ok': True, 'value': 240, 'stdout': '240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10199618339538574}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [11, 30, 16, 21, 27, 4, 1, 15, 27, 31, 16, 22, 42, 16, 22, 46]"
229,sub,2,35,35,1,35,1,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08800959587097168}",1,Compute: 71 - 36
230,knap,8,94,69,0,60,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07384848594665527}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 9, 2, 12, 10, 13, 5, 2]
V = [13, 20, 14, 29, 19, 1, 3, 28]
C = 30"
231,ilp_prod,2,30,The total profit,0,15,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/417393fd3d964e58b2502f31dd590aaf-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/417393fd3d964e58b2502f31dd590aaf-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16288971900939941}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 3]
consumption (rows=resources) = [[1, 1], [1, 2]]
capacity = [6, 8]
upper_bounds = [6, 4]"
232,sub,8,16236791,16236791,1,16236791,1,"{'ok': True, 'value': 16236791, 'stdout': '16236791\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08261537551879883}",1,Compute: 76045375 - 59808584
233,knap,2,7,10,0,12,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08359885215759277}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 2]
V = [5, 2, 5]
C = 3"
234,ilp_partition,4,2,1,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20963358879089355}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 6, 3, 12]"
235,mul,16,10717831027518384025533852848068,10936633333333333,0,10824896183869668845544444444,0,"{'ok': True, 'value': 10717831027518384025533852848068, 'stdout': '10717831027518384025533852848068\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08120107650756836}",1,Compute: 1146693012843284 * 9346730910082877
236,ilp_partition,4,3,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21163034439086914}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 5, 6]"
237,add,4,16589,23,0,16589,1,"{'ok': True, 'value': 16589, 'stdout': '16589\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08086967468261719}",1,Compute: 7194 + 9395
238,ilp_partition,4,2,1,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19617938995361328}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 1, 8, 5]"
239,lcs,32,21,20,0,30,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0889594554901123}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacdbdaadbbabcaacadbdcaaabbbddac""
T = ""cdcadbaaabbdadbbdadbcdaadbddacdd"""
240,knap,8,98,103,0,22,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08542966842651367}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 8, 1, 2, 2, 1, 8, 11]
V = [8, 6, 19, 17, 30, 4, 7, 28]
C = 22"
241,ilp_assign,8,30,36,0,36,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.392714262008667}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 14, 2, 14, 2, 13, 3], [15, 7, 21, 22, 11, 1, 5], [15, 17, 24, 15, 22, 14, 17], [2, 5, 5, 8, 16, 3, 2], [3, 18, 1, 1, 18, 11, 22], [3, 12, 2, 7, 16, 18, 3], [19, 7, 24, 10, 10, 1, 8]]"
242,rod,4,40,14,0,36,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_4bh9i2dy/main.py"", line 28, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_4bh9i2dy/main.py"", line 16, in rod_cutting\n    rev = P[j] + revenue[i - j - 1]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07610440254211426}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 8, 9, 6]"
243,rod,32,640,1084,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.037755012512207}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [20, 34, 59, 9, 31, 16, 67, 3, 78, 21, 77, 77, 36, 17, 61, 89, 41, 2, 30, 89, 55, 77, 58, 59, 10, 75, 72, 28, 13, 19, 45, 88]"
244,ilp_prod,4,38,33,0,The answer will be printed when the code is executed.,0,"{'ok': True, 'value': 33, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/451b912b331045feb6366474970f54fc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/451b912b331045feb6366474970f54fc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 33 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -33 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                33.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n33.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15617895126342773}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 6, 10]
consumption (rows=resources) = [[3, 1, 3], [4, 2, 3], [4, 2, 3]]
capacity = [9, 15, 12]
upper_bounds = [3, 6, 3]"
245,add,8,53291380,9,0,53291380,1,"{'ok': True, 'value': 53291380, 'stdout': '53291380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07697820663452148}",1,Compute: 38502519 + 14788861
246,ilp_assign,32,99,75,0,110,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42388916015625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 14, 66, 60, 23, 13, 78], [23, 5, 30, 33, 70, 85, 13], [33, 9, 84, 5, 65, 96, 85], [2, 81, 20, 95, 96, 65, 16], [44, 40, 23, 81, 12, 2, 58], [79, 27, 53, 75, 24, 63, 70], [87, 46, 78, 23, 20, 79, 34]]"
247,ilp_prod,32,198,238,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_bs3vxmkw/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_bs3vxmkw/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15327072143554688}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 5, 81, 51, 26, 6]
consumption (rows=resources) = [[9, 14, 3, 15, 4, 29], [28, 3, 32, 25, 1, 15], [11, 13, 23, 5, 32, 17], [24, 4, 12, 1, 21, 4]]
capacity = [78, 72, 105, 66]
upper_bounds = [3, 5, 3, 3, 3, 3]"
248,knap,8,94,103,0,103,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06994414329528809}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 1, 15, 9, 16, 8, 16, 4]
V = [15, 31, 8, 21, 8, 17, 22, 3]
C = 39"
249,sub,16,606902353891330,64,0,6069023539913330,0,"{'ok': True, 'value': 606902353891330, 'stdout': '606902353891330\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07211709022521973}",1,Compute: 7602282401535993 - 6995380047644663
250,ilp_prod,16,216,139,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_vm4wqdcb/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24791574478149414}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 31, 46, 5, 43, 35]
consumption (rows=resources) = [[15, 11, 10, 15, 2, 12], [16, 16, 8, 7, 3, 10], [9, 2, 11, 3, 11, 16], [6, 6, 8, 2, 13, 6]]
capacity = [48, 54, 64, 44]
upper_bounds = [3, 3, 4, 3, 3, 4]"
251,add,4,8115,8115,1,8115,1,"{'ok': True, 'value': 8115, 'stdout': '8115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07594180107116699}",1,Compute: 2016 + 6099
252,mul,2,3675,3675,1,3675,1,"{'ok': True, 'value': 3675, 'stdout': '3675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08804726600646973}",1,Compute: 75 * 49
253,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08326387405395508}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daad""
T = ""ddb"""
254,ilp_assign,16,55,105,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[34, 43, 9, 41, 46, 46, 19], [1, 24, 20, 39, 41, 39, 30], [12, 8, 18, 39, 45, 34, 10], [35, 31, 20, 2, 8, 36, 16], [28, 38, 41, 27, 37, 4, 25], [41, 23, 5, 23, 36, 14, 36], [34, 46, 23, 10, 26, 31, 14]]"
255,add,32,38623865020157681191453871746784,48623865019857681191453871746784,0,38623865020157681191453871746784,1,"{'ok': True, 'value': 38623865020157681191453871746784, 'stdout': '38623865020157681191453871746784\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0811460018157959}",1,Compute: 10076970936638733615176647769295 + 28546894083518947576277223977489
256,lcs,4,1,3,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07802295684814453}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abca""
T = ""bddb"""
257,mul,4,42979162,433222,0,43000922,0,"{'ok': True, 'value': 42979162, 'stdout': '42979162\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09014010429382324}",1,Compute: 7162 * 6001
258,lcs,16,10,7,0,13,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08214068412780762}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbaabbcdbbddacc""
T = ""dadcaabcbdbbdbbbc"""
259,ilp_prod,8,56,100,0,The answer will be printed after running the code.,0,"{'ok': True, 'value': 61, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/14a6f3ec90704a5f8b07593411d204e1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/14a6f3ec90704a5f8b07593411d204e1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 62.5091 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -46 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -61 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -62.509091 to -61 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -61, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -62.5091 to -61\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                61.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n61.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2615242004394531}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 16, 13, 9]
consumption (rows=resources) = [[4, 3, 8, 7], [6, 8, 3, 2], [5, 8, 2, 3], [5, 4, 6, 7]]
capacity = [26, 18, 27, 31]
upper_bounds = [3, 3, 3, 3]"
260,lcs,16,9,7,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08222341537475586}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbbdaacbadadbdb""
T = ""abbadbbcccdbcbdab"""
261,knap,4,20,15,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06867432594299316}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 4, 4, 8]
V = [11, 5, 9, 1]
C = 11"
262,add,2,41,41,1,41,1,"{'ok': True, 'value': 41, 'stdout': '41\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07158327102661133}",1,Compute: 21 + 20
263,lcs,8,4,4,1,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08392119407653809}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdaaabb""
T = ""cdbcdba"""
264,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 357, 'stdout': '357\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.324735164642334}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 40, 48, 22, 4, 41, 16, 6, 47, 12, 25, 25, 31, 12, 3, 7]"
265,ilp_assign,8,39,76,0,73,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6186366081237793}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 10, 9, 14, 14, 9, 10], [5, 1, 8, 5, 20, 16, 7], [18, 18, 22, 16, 16, 2, 20], [22, 18, 16, 2, 1, 23, 24], [20, 4, 22, 8, 19, 3, 18], [8, 5, 14, 19, 22, 21, 24], [10, 5, 21, 21, 7, 9, 20]]"
266,knap,2,7,7,1,-1,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07719683647155762}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5]
V = [7, 5, 1]
C = 5"
267,knap,16,315,153,0,11,0,"{'ok': True, 'value': 315, 'stdout': '315\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14113974571228027}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 31, 3, 22, 32, 23, 17, 20, 29, 21, 7, 6, 9, 17, 31, 18]
V = [12, 10, 24, 26, 43, 23, 28, 33, 49, 25, 12, 34, 60, 5, 42, 23]
C = 153"
268,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07854342460632324}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baba""
T = ""bdbdd"""
269,add,4,11713,7,0,11713,1,"{'ok': True, 'value': 11713, 'stdout': '11713\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09096550941467285}",1,Compute: 7753 + 3960
270,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09195256233215332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acaaaabd""
T = ""aababbbd"""
271,ilp_assign,32,118,0,0,205,0,"{'ok': True, 'value': 118, 'stdout': '118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.44469237327575684}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[72, 31, 67, 41, 62, 62, 69], [62, 32, 11, 16, 68, 42, 26], [78, 91, 47, 2, 21, 31, 11], [69, 81, 35, 52, 12, 31, 77], [87, 66, 4, 82, 4, 50, 65], [38, 35, 62, 83, 57, 21, 57], [49, 71, 67, 17, 81, 6, 90]]"
272,mul,4,23753323,2389033,0,23854623,0,"{'ok': True, 'value': 23753323, 'stdout': '23753323\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08110189437866211}",1,Compute: 3593 * 6611
273,ilp_prod,8,93,100,0,26,0,"{'ok': True, 'value': 51, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a141fd7ceb514faebeef8b66812c6bb4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a141fd7ceb514faebeef8b66812c6bb4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 55.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -51 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                51.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n51.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17509055137634277}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 16, 10, 19]
consumption (rows=resources) = [[3, 3, 8, 3], [1, 1, 7, 3], [1, 4, 7, 4], [8, 1, 7, 2]]
capacity = [24, 30, 17, 26]
upper_bounds = [3, 4, 3, 4]"
274,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07873296737670898}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""cc"""
275,rod,2,12,6,0,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dax0v_tz/main.py"", line 17, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_dax0v_tz/main.py"", line 13, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08124876022338867}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
276,rod,16,624,46,0,7,0,"{'ok': True, 'value': 624, 'stdout': '624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11703205108642578}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [39, 1, 44, 8, 42, 4, 11, 1, 32, 39, 12, 9, 19, 20, 13, 23]"
277,ilp_prod,8,77,85,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_lu1hjz95/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_lu1hjz95/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1523573398590088}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 12, 11, 10]
consumption (rows=resources) = [[2, 8, 2, 8], [6, 3, 5, 2], [1, 4, 4, 6], [3, 6, 6, 4]]
capacity = [25, 22, 32, 17]
upper_bounds = [3, 3, 3, 3]"
278,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4074974060058594}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [5, 6]]"
279,knap,4,27,27,1,12,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07628798484802246}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 6, 2, 2]
V = [12, 7, 9, 15]
C = 6"
280,ilp_assign,4,14,15,0,15,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38788819313049316}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 2, 12], [4, 12, 3, 3], [12, 5, 5, 11], [6, 3, 8, 12]]"
281,knap,8,106,103,0,66,0,"{'ok': True, 'value': 106, 'stdout': '106\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0821223258972168}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 1, 2, 7, 6, 6, 15, 6]
V = [29, 13, 1, 3, 31, 32, 25, 18]
C = 28"
282,mul,8,5903209436675400,3,0,4000000000000,0,"{'ok': True, 'value': 5903209436675400, 'stdout': '5903209436675400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08188295364379883}",1,Compute: 75148950 * 78553452
283,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07561707496643066}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbadcdaa""
T = ""adbabacb"""
284,ilp_assign,32,97,207,0,185,0,"{'ok': True, 'value': 97, 'stdout': '97\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40220046043395996}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 40, 52, 58, 42, 54, 91], [38, 9, 5, 96, 89, 65, 3], [5, 90, 28, 87, 17, 59, 76], [10, 59, 71, 17, 11, 28, 72], [30, 85, 93, 87, 25, 18, 86], [70, 3, 71, 6, 43, 27, 4], [62, 77, 14, 23, 74, 9, 34]]"
285,ilp_assign,2,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43062901496887207}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2], [1, 5]]"
286,sub,2,66,66,1,66,1,"{'ok': True, 'value': 66, 'stdout': '66\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08278918266296387}",1,Compute: 91 - 25
287,sub,16,3667956939422535,3667956939422535,1,3667956939422535,1,"{'ok': True, 'value': 3667956939422535, 'stdout': '3667956939422535\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0818030834197998}",1,Compute: 7173184072895549 - 3505227133473014
288,knap,32,1553,1074,0,-1,0,"{'ok': True, 'value': 1553, 'stdout': '1553\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08669567108154297}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 2, 16, 4, 50, 30, 40, 14, 13, 47, 6, 34, 43, 41, 3, 24, 9, 61, 21, 16, 42, 35, 44, 26, 63, 2, 58, 13, 36, 63, 26, 14]
V = [107, 75, 46, 27, 92, 31, 29, 48, 40, 88, 128, 124, 44, 106, 75, 62, 6, 109, 74, 38, 52, 21, 81, 13, 27, 43, 11, 35, 61, 58, 98, 95]
C = 460"
289,mul{'ok': True, 'value': 5537558449788751575131780799951106347653979375513592781913029328, 'stdout': '5537558449788751575131780799951106347653979375513592781913029328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2105257511138916}",1,Compute: 89931088998476022969120166121816 * 61575574269789964802741085516558
290,sub,32,15885895896811907296870398466341,108285710828571872585,0,158859058967119073069603986754441,0,"{'ok': True, 'value': 15885895896811907296870398466341, 'stdout': '15885895896811907296870398466341\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07657599449157715}",1,Compute: 87491144989157985710828571872585 - 71605249092346078413958173406244
291,ilp_assign,4,7,2,0,18,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39246296882629395}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 10, 2, 7], [5, 12, 11, 1], [5, 1, 1, 10], [3, 6, 3, 7]]"
292,ilp_partition,2,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20238351821899414}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 3, 3, 1]"
293,mul{'ok': True, 'value': 2623107793048735425984531744944591800110272958462469993903074699, 'stdout': '2623107793048735425984531744944591800110272958462469993903074699\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08238673210144043}",1,Compute: 66187908898390661124745815964021 * 39631223235585789812003516312319
294,sub,16,176065515313453,6173162710,0,1760655153134553,0,"{'ok': True, 'value': 176065515313453, 'stdout': '176065515313453\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07949519157409668}",1,Compute: 6427856732874287 - 6251791217560834
295,add,4,9503,207,0,9503,1,"{'ok': True, 'value': 9503, 'stdout': '9503\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0835866928100586}",1,Compute: 1723 + 7780
296,ilp_prod,32,220,207,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6t6iw1ze/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23902463912963867}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [66, 36, 60, 33, 24, 58]
consumption (rows=resources) = [[4, 6, 14, 13, 8, 30], [24, 31, 23, 19, 6, 15], [31, 20, 28, 24, 22, 27], [16, 5, 17, 3, 3, 4]]
capacity = [121, 94, 107, 119]
upper_bounds = [3, 3, 3, 4, 4, 3]"
297,knap,4,25,26,0,19,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0835580825805664}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 2, 4]
V = [16, 10, 9, 13]
C = 9"
298,knap,16,351,1045,0,1008,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.390399694442749}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 10, 19, 4, 14, 18, 4, 19, 17, 5, 6, 25, 27, 32, 24, 18]
V = [14, 21, 40, 2, 21, 51, 31, 55, 22, 54, 20, 16, 57, 46, 39, 22]
C = 125"
299,sub,16,4567593293634296,7000000000000000,0,4567583293634306,0,"{'ok': True, 'value': 4567593293634296, 'stdout': '4567593293634296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08294367790222168}",1,Compute: 9893773899922493 - 5326180606288197
300,add,32,104890374290180212631542100496847,105490368280205673831542000576876,0,104890374290180212631542100496847,1,"{'ok': True, 'value': 104890374290180212631542100496847, 'stdout': '104890374290180212631542100496847\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08547496795654297}",1,Compute: 50262527099870594436306521807331 + 54627847190309618195235578689516
301,sub,16,529062003673817,5289061946738217,0,5290619936683817,0,"{'ok': True, 'value': 529062003673817, 'stdout': '529062003673817\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08282065391540527}",1,Compute: 7622497427856106 - 7093435424182289
302,mul,8,4383403648636572,,0,392345366994532,0,"{'ok': True, 'value': 4383403648636572, 'stdout': '4383403648636572\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07491660118103027}",1,Compute: 88312644 * 49635063
303,ilp_prod,4,29,41,0,The answer will be the maximum profit that can be obtained under the given constraints.,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/727d168bdc7f42049aae19b1a31f6e96-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/727d168bdc7f42049aae19b1a31f6e96-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 27 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1597757339477539}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 5, 3]
consumption (rows=resources) = [[3, 4, 4], [2, 4, 2], [4, 1, 1]]
capacity = [16, 14, 9]
upper_bounds = [3, 3, 4]"
304,knap,32,1572,1004,0,1000,0,"{'ok': True, 'value': 1976, 'stdout': '1976.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4121525287628174}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 57, 39, 15, 4, 44, 35, 51, 31, 61, 29, 31, 50, 33, 64, 50, 28, 14, 55, 31, 33, 4, 38, 52, 53, 43, 13, 49, 42, 43, 60, 44]
V = [120, 51, 47, 3, 122, 102, 72, 77, 18, 26, 53, 67, 67, 92, 14, 78, 5, 13, 96, 103, 50, 124, 47, 42, 95, 20, 77, 32, 42, 115, 7, 99]
C = 608"
305,rod,32,816,1055,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0362513065338135}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [22, 51, 12, 42, 61, 17, 31, 41, 89, 2, 61, 15, 29, 96, 96, 23, 31, 94, 15, 80, 74, 31, 76, 28, 5, 40, 72, 78, 85, 88, 17, 89]"
306,rod,4,14,12,0,14,1,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0940089225769043}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 7, 11, 10]"
307,rod,4,24,13,0,13,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07921552658081055}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 10, 6, 7]"
308,rod,4,48,22,0,20,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08368563652038574}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 12, 6, 11]"
309,lcs,16,9,8,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07889199256896973}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcddcdbabdbacac""
T = ""dbdbadaacccbbaba"""
310,ilp_assign,16,40,9,0,110,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3932805061340332}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 46, 22, 25, 13, 6, 27], [47, 23, 1, 12, 39, 27, 12], [4, 48, 14, 41, 3, 16, 29], [12, 4, 38, 34, 23, 24, 3], [35, 38, 9, 48, 33, 18, 1], [31, 21, 16, 42, 23, 48, 2], [33, 44, 31, 1, 23, 19, 14]]"
311,rod,16,432,46,0,64,0,"{'ok': True, 'value': 432, 'stdout': '432\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10250520706176758}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [27, 16, 42, 11, 24, 12, 6, 41, 4, 9, 39, 10, 39, 19, 15, 35]"
312,add,4,11336,18,0,11336,1,"{'ok': True, 'value': 11336, 'stdout': '11336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08266973495483398}",1,Compute: 2613 + 8723
313,add,2,147,147,1,147,1,"{'ok': True, 'value': 147, 'stdout': '147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0728907585144043}",1,Compute: 75 + 72
314,sub,16,261291207632007,-5,0,261291208643006,0,"{'ok': True, 'value': 261291207632007, 'stdout': '261291207632007\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08361577987670898}",1,Compute: 3441159060540906 - 3179867852908899
315,ilp_partition,16,0,1,0,2,0,"{'ok': True, 'value': 386, 'stdout': '386\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20657944679260254}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 4, 11, 27, 27, 35, 21, 48, 47, 26, 32, 31, 46, 15, 7, 1]"
316,ilp_assign,16,69,105,0,105,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4002034664154053}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 12, 7, 36, 28, 36, 18], [23, 4, 34, 33, 30, 15, 35], [34, 41, 34, 29, 22, 45, 10], [15, 46, 1, 48, 46, 39, 1], [43, 41, 27, 32, 43, 11, 30], [21, 14, 37, 44, 11, 5, 41], [6, 29, 22, 24, 25, 16, 48]]"
317,rod,2,12,6,0,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_hh7aoshv/main.py"", line 18, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_hh7aoshv/main.py"", line 14, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08360123634338379}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
318,sub,32,43288609340566966438184332425648,0,0,43288609340566966438184332425648,1,"{'ok': True, 'value': 43288609340566966438184332425648, 'stdout': '43288609340566966438184332425648\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08490371704101562}",1,Compute: 53844458575888648390886458491404 - 10555849235321681952702126065756
319,rod,8,136,22,0,0,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08309292793273926}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 8, 8, 5, 15, 7, 16, 20]"
320,sub,8,31634483,31634483,1,31634483,1,"{'ok': True, 'value': 31634483, 'stdout': '31634483\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07488727569580078}",1,Compute: 49436964 - 17802481
321,rod,32,1728,468,0,1055,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0320494174957275}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [54, 28, 82, 17, 53, 85, 74, 15, 78, 36, 48, 30, 46, 26, 70, 25, 27, 53, 90, 57, 77, 61, 33, 84, 30, 76, 69, 46, 50, 5, 25, 5]"
322,add,16,13592556241541092,17595758247546182,0,13592556241541192,0,"{'ok': True, 'value': 13592556241541092, 'stdout': '13592556241541092\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0690145492553711}",1,Compute: 4825166833995107 + 8767389407545985
323,sub,8,68010157,67990127,0,68010157,1,"{'ok': True, 'value': 68010157, 'stdout': '68010157\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07131695747375488}",1,Compute: 81615796 - 13605639
324,ilp_partition,2,2,1,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20042848587036133}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 5, 4]"
325,rod,32,992,1053,0,1045,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0268807411193848}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [31, 43, 2, 38, 65, 53, 18, 96, 20, 13, 71, 82, 4, 33, 41, 39, 79, 3, 64, 27, 68, 23, 96, 63, 10, 85, 62, 6, 41, 24, 10, 27]"
326,lcs,8,4,4,1,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07256245613098145}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baabcccb""
T = ""ccadccc"""
327,ilp_prod,8,78,75,0,105,0,"{'ok': True, 'value': 78, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c61c137911994579ada27ed0ad897563-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c61c137911994579ada27ed0ad897563-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 86 - 0.00 seconds\nCgl0004I processed model has 3 rows, 4 columns (4 integer (0 of which binary)) and 12 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -66 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 3 rows 4 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -78 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3.3333333\nCbc0013I At root node, 10 cuts changed objective from -86 to -78 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 3.4 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 6 row cuts average 2.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -78, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -86 to -78\nProbing was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                78.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n78.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17332100868225098}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 15, 11, 12]
consumption (rows=resources) = [[7, 5, 2, 1], [1, 3, 4, 1], [3, 5, 3, 3], [8, 1, 8, 5]]
capacity = [23, 27, 19, 22]
upper_bounds = [3, 3, 3, 4]"
328,sub,32,75268957641539118686081666311690,64,0,75269057641539118686081666311690,0,"{'ok': True, 'value': 75268957641539118686081666311690, 'stdout': '75268957641539118686081666311690\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07314872741699219}",1,Compute: 88061156057203582414316867907956 - 12792198415664463728235201596266
329,ilp_assign,16,57,105,0,105,0,"{'ok': True, 'value': 57, 'stdout': '57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40282440185546875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 40, 14, 30, 46, 3, 15], [8, 45, 24, 21, 18, 38, 41], [26, 21, 13, 30, 10, 6, 13], [48, 35, 14, 30, 15, 16, 11], [35, 28, 6, 15, 12, 30, 6], [16, 41, 22, 41, 18, 34, 2], [43, 9, 48, 2, 12, 5, 39]]"
330,ilp_assign,4,14,10,0,18,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39568090438842773}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 8, 10, 8], [5, 4, 7, 12], [1, 6, 6, 3], [2, 9, 5, 8]]"
331,mul,8,2485770972850482,246445845302462,0,246525798444182,0,"{'ok': True, 'value': 2485770972850482, 'stdout': '2485770972850482\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08224248886108398}",1,Compute: 46046127 * 53984366
332,rod,4,36,12,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9c1iyi49/main.py"", line 28, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_9c1iyi49/main.py"", line 16, in rod_cutting\n    rev = P[j] + revenue[i - j - 1]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09936666488647461}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 8, 9, 7]"
333,sub,4,3706,3706,1,3706,1,"{'ok': True, 'value': 3706, 'stdout': '3706\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0979468822479248}",1,Compute: 6964 - 3258
334,ilp_assign,16,67,105,0,110,0,"{'ok': True, 'value': 67, 'stdout': '67\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40494441986083984}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 40, 14, 25, 8, 37, 40], [44, 38, 36, 20, 31, 5, 31], [21, 16, 37, 24, 15, 2, 16], [6, 2, 12, 21, 40, 35, 10], [33, 12, 32, 11, 24, 34, 16], [23, 10, 45, 45, 40, 42, 6], [24, 37, 37, 22, 9, 34, 17]]"
335,ilp_prod,16,316,237,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_8dqaybnb/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24999237060546875}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [38, 8, 20, 48, 15, 8]
consumption (rows=resources) = [[16, 1, 2, 10, 7, 4], [13, 10, 16, 4, 10, 6], [11, 2, 4, 1, 16, 7], [11, 14, 8, 1, 8, 8]]
capacity = [63, 62, 53, 43]
upper_bounds = [3, 3, 3, 6, 3, 5]"
336,ilp_assign,2,5,4,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37578582763671875}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 3], [2, 2]]"
337,ilp_prod,16,344,168,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_m_x49nkj/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2525825500488281}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 35, 46, 20, 8, 14]
consumption (rows=resources) = [[1, 5, 10, 16, 8, 6], [12, 2, 8, 14, 16, 1], [1, 4, 8, 2, 1, 12], [7, 2, 16, 2, 8, 9]]
capacity = [40, 53, 51, 46]
upper_bounds = [4, 8, 3, 3, 3, 4]"
338,mul,2,8099,8099,1,8319,0,"{'ok': True, 'value': 8099, 'stdout': '8099\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10503411293029785}",1,Compute: 91 * 89
339,ilp_partition,4,1,2,0,9,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20559191703796387}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 4, 9, 5]"
340,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08198690414428711}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adba""
T = ""dabbb"""
341,ilp_partition,16,0,1,0,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20412349700927734}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 46, 5, 40, 30, 3, 26, 37, 24, 40, 4, 26, 17, 13, 10, 15]"
342,lcs,32,21,10,0,20,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0832211971282959}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccacccdadbbdadcbabcdbccddccdaaad""
T = ""adcbbbbacbbcddbbdcbacdcbacdbbddad"""
343,rod,32,960,1050,0,-1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.031968355178833}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [21, 60, 44, 95, 7, 45, 56, 27, 79, 78, 94, 84, 76, 22, 18, 78, 40, 18, 96, 37, 9, 57, 25, 38, 52, 95, 91, 52, 66, 58, 66, 38]"
344,knap,16,455,1074,0,1043,0,"{'ok': True, 'value': 455, 'stdout': '455\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15317106246948242}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 19, 22, 15, 22, 26, 8, 13, 11, 27, 5, 27, 30, 2, 9, 1]
V = [24, 15, 59, 41, 57, 33, 3, 29, 53, 43, 38, 33, 60, 32, 56, 56]
C = 126"
345,ilp_partition,2,2,0,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.23996257781982422}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 5, 5]"
346,knap,2,14,9,0,13,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08215928077697754}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 4]
V = [7, 7, 1]
C = 3"
347,ilp_prod,16,312,169,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_rgg3wymj/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2794303894042969}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 38, 33, 40, 46, 48]
consumption (rows=resources) = [[13, 15, 6, 11, 7, 7], [15, 15, 7, 1, 1, 1], [8, 13, 1, 5, 2, 6], [10, 12, 8, 2, 16, 11]]
capacity = [61, 47, 64, 53]
upper_bounds = [3, 3, 6, 5, 3, 4]"
348,ilp_assign,4,20,18,0,18,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38384008407592773}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 10, 11, 3], [3, 12, 9, 10], [6, 11, 12, 8], [12, 2, 7, 5]]"
349,knap,4,21,18,0,3,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07399725914001465}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 2, 2, 8]
V = [11, 6, 10, 8]
C = 9"
350,knap,2,10,14,0,-1,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08702373504638672}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 3]
V = [1, 8, 10]
C = 4"
351,ilp_prod,8,60,103,0,105,0,"{'ok': True, 'value': 60, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2f29a27c51f348aea95c34ad875fdb65-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2f29a27c51f348aea95c34ad875fdb65-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 70 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -40 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -60 found by DiveCoefficient after 5 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -70 to -60 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -60, took 5 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -70 to -60\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                60.00000000\nEnumerated nodes:               0\nTotal iterations:               5\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n60.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1531214714050293}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 20, 9, 9]
consumption (rows=resources) = [[3, 8, 7, 3], [2, 5, 7, 6], [6, 5, 7, 6], [4, 1, 7, 3]]
capacity = [26, 18, 20, 23]
upper_bounds = [3, 3, 3, 3]"
352,ilp_prod,4,48,44,0,15,0,"{'ok': True, 'value': 33, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8a19862c9bf846399ddd7ec48c77f875-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8a19862c9bf846399ddd7ec48c77f875-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 36.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -33 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                33.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n33.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14988970756530762}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 4, 11]
consumption (rows=resources) = [[3, 1, 1], [3, 1, 2], [1, 2, 4]]
capacity = [10, 10, 15]
upper_bounds = [3, 7, 3]"
353,sub,4,1465,1465,1,1465,1,"{'ok': True, 'value': 1465, 'stdout': '1465\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08136534690856934}",1,Compute: 8719 - 7254
354,ilp_partition,4,2,1,0,13,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2170729637145996}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 8, 2, 3]"
355,ilp_assign,4,9,11,0,18,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38405466079711914}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 8, 11, 3], [12, 3, 1, 2], [3, 11, 2, 7], [10, 2, 5, 2]]"
356,add,16,15921433763383785,18021433863383285,0,15921433763383785,1,"{'ok': True, 'value': 15921433763383785, 'stdout': '15921433763383785\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07684445381164551}",1,Compute: 7888344864288389 + 8033088899095396
357,mul,8,2888600710935360,34848336000000000,0,2470843334448640,0,"{'ok': True, 'value': 2888600710935360, 'stdout': '2888600710935360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07626032829284668}",1,Compute: 49722122 * 58094880
358,add,4,13339,9,0,13339,1,"{'ok': True, 'value': 13339, 'stdout': '13339\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07261919975280762}",1,Compute: 6465 + 6874
359,add,2,82,82,1,82,1,"{'ok': True, 'value': 82, 'stdout': '82\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08365869522094727}",1,Compute: 21 + 61
360,add,4,8096,8096,1,8096,1,"{'ok': True, 'value': 8096, 'stdout': '8096\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08468198776245117}",1,Compute: 6747 + 1349
361,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07332444190979004}",1,Compute: 59 + 63
362,sub,4,5489,5489,1,5489,1,"{'ok': True, 'value': 5489, 'stdout': '5489\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08871722221374512}",1,Compute: 8070 - 2581
363,ilp_partition,16,0,1,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_z5uzy87g/main.py"", line 16, in <module>\n    sum_can_form = np.where(dp)[0][-1]\nIndexError: index -1 is out of bounds for axis 0 with size 0\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.21100354194641113}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 48, 31, 6, 48, 25, 4, 26, 3, 30, 36, 5, 28, 43, 3, 2]"
364,add,32,93145670098400106846259645201052,93245669108400106846259645200952,0,93145670098400106846259645201052,1,"{'ok': True, 'value': 93145670098400106846259645201052, 'stdout': '93145670098400106846259645201052\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08592104911804199}",1,Compute: 70366541210050397985954794990885 + 22779128888349708860304850210167
365,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.47052741050720215}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [3, 6]]"
366,add,16,14762593205546333,15062543205505540,0,14762593205546333,1,"{'ok': True, 'value': 14762593205546333, 'stdout': '14762593205546333\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08340620994567871}",1,Compute: 6026097354156460 + 8736495851389873
367,ilp_prod,8,92,92,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_wzqrmdyp/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_wzqrmdyp/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.169602632522583}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 23, 23, 23]
consumption (rows=resources) = [[4, 1, 2, 1], [7, 6, 4, 4], [6, 7, 2, 1], [8, 7, 5, 5]]
capacity = [28, 24, 28, 20]
upper_bounds = [3, 3, 4, 4]"
368,rod,8,184,24,0,30,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08578205108642578}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 4, 11, 19, 6, 3, 23, 9]"
369,sub,4,1632,1632,1,1632,1,"{'ok': True, 'value': 1632, 'stdout': '1632\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08584260940551758}",1,Compute: 8584 - 6952
370,ilp_assign,8,49,36,0,11,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2, 19, 22, 19, 23, 17], [13, 6, 13, 15, 2, 9, 15], [12, 21, 10, 13, 20, 14, 17], [3, 14, 16, 24, 10, 8, 1], [14, 10, 20, 15, 19, 19, 16], [13, 22, 11, 24, 12, 20, 5], [12, 10, 19, 15, 5, 17, 7]]"
371,add,2,120,120,1,120,1,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07500529289245605}",1,Compute: 55 + 65
372,ilp_assign,8,41,18,0,46,0,"{'ok': True, 'value': 41, 'stdout': '41\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39392995834350586}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 24, 23, 2, 1, 9, 13], [17, 21, 21, 13, 7, 21, 23], [2, 13, 19, 17, 22, 1, 22], [22, 11, 16, 8, 12, 18, 11], [21, 19, 20, 2, 23, 2, 8], [15, 14, 16, 24, 9, 10, 20], [3, 1, 9, 3, 4, 8, 18]]"
373,mul{'ok': True, 'value': 85501188585978818195871761152299, 'stdout': '85501188585978818195871761152299\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08634567260742188}",1,Compute: 9613176151713839 * 8894166427059141
374,rod,16,368,46,0,64,0,"{'ok': True, 'value': 368, 'stdout': '368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10391855239868164}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [23, 31, 16, 27, 29, 44, 34, 3, 46, 48, 40, 3, 12, 42, 27, 11]"
375,add,16,12312112175057937,5,0,12312112175057937,1,"{'ok': True, 'value': 12312112175057937, 'stdout': '12312112175057937\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09657454490661621}",1,Compute: 7590765299981586 + 4721346875076351
376,rod,2,8,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dt4p7va2/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08370661735534668}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 1]"
377,rod,32,1216,544,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.036587715148926}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [38, 19, 6, 91, 48, 35, 46, 53, 55, 39, 35, 55, 10, 90, 56, 71, 65, 32, 36, 14, 21, 25, 2, 73, 78, 34, 33, 50, 72, 40, 94, 4]"
378,ilp_prod,2,32,23,0,8,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/65cf4a7420594b6cb39ae52c6ef146dd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/65cf4a7420594b6cb39ae52c6ef146dd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17059707641601562}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3]
consumption (rows=resources) = [[1, 3], [2, 1]]
capacity = [7, 8]
upper_bounds = [4, 3]"
379,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08033919334411621}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbb""
T = ""acbc"""
380,add,2,109,109,1,109,1,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07315516471862793}",1,Compute: 61 + 48
381,ilp_prod,8,48,70,0,60,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c049eabd94b1487ca1b89b2def51557f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c049eabd94b1487ca1b89b2def51557f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 56.3077 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -48 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -55.157895 to -48 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -48, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -55.1579 to -48\nProbing was tried 1 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.153076171875}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 14, 18, 12]
consumption (rows=resources) = [[6, 6, 6, 2], [5, 7, 2, 8], [6, 6, 7, 2], [2, 1, 3, 6]]
capacity = [23, 16, 18, 19]
upper_bounds = [3, 3, 3, 3]"
382,ilp_partition,2,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19739866256713867}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 6, 5, 1]"
383,sub,4,4072,4902,0,4072,1,"{'ok': True, 'value': 4072, 'stdout': '4072\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07930970191955566}",1,Compute: 7332 - 3260
384,knap,16,470,141,0,141,0,"{'ok': True, 'value': 757, 'stdout': '757.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39278674125671387}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 1, 11, 16, 14, 32, 19, 31, 16, 7, 13, 15, 24, 14, 30, 24]
V = [40, 17, 12, 39, 34, 37, 52, 15, 62, 60, 55, 47, 10, 52, 34, 16]
C = 141"
385,ilp_prod,16,76,105,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_eqrepfbi/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24715828895568848}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 15, 31, 8, 8, 10]
consumption (rows=resources) = [[16, 5, 16, 10, 3, 15], [5, 9, 5, 7, 3, 2], [2, 10, 9, 16, 8, 15], [7, 12, 13, 7, 14, 5]]
capacity = [36, 46, 59, 51]
upper_bounds = [3, 4, 3, 3, 3, 3]"
386,ilp_prod,32,476,209,0,3,0,"{'ok': True, 'value': 204, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2821d3d36a0e4e8497bd9cd327442d50-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2821d3d36a0e4e8497bd9cd327442d50-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 12 COLUMNS\nAt line 66 RHS\nAt line 74 BOUNDS\nAt line 81 ENDATA\nProblem MODEL has 7 rows, 6 columns and 35 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 204 - 0.00 seconds\nCgl0004I processed model has 6 rows, 6 columns (6 integer (0 of which binary)) and 33 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -204 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -204, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -204 to -204\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                204.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n204.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14903974533081055}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [68, 11, 68, 58, 40, 59]
consumption (rows=resources) = [[24, 6, 10, 6, 19, 2], [23, 20, 25, 29, 2, 18], [3, 29, 17, 8, 7, 14], [25, 28, 25, 3, 2, 9]]
capacity = [127, 84, 121, 81]
upper_bounds = [3, 3, 3, 3, 6, 4]"
387,knap,4,17,22,0,2,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07236886024475098}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 6, 3, 1]
V = [8, 16, 13, 1]
C = 8"
388,mul,16,12576754518188355248176550478708,184,0,12388003883291036866454933368901888,0,"{'ok': True, 'value': 12576754518188355248176550478708, 'stdout': '12576754518188355248176550478708\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0818336009979248}",1,Compute: 8994248978245902 * 1398310692600054
389,sub,4,2436,3656,0,2436,1,"{'ok': True, 'value': 2436, 'stdout': '2436\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07552456855773926}",1,Compute: 3656 - 1220
390,mul,4,27884675,277585,0,27901375,0,"{'ok': True, 'value': 27884675, 'stdout': '27884675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08185076713562012}",1,Compute: 7735 * 3605
391,ilp_partition,32,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20349335670471191}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 28, 85, 80, 47, 35, 47, 40, 31, 23, 8, 17, 79, 87, 44, 34, 35, 82, 81, 80, 27, 52, 10, 89]"
392,add,8,157868311,99990,0,157868311,1,"{'ok': True, 'value': 157868311, 'stdout': '157868311\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07459521293640137}",1,Compute: 86892286 + 70976025
393,sub,16,1035231043331137,2463030454848692,0,1035231043333127,0,"{'ok': True, 'value': 1035231043331137, 'stdout': '1035231043331137\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07560420036315918}",1,Compute: 7329010454848692 - 6293779411517555
394,mul,16,24342118235047427514092622991665,1,0,24499873798424756098427027984204281,0,"{'ok': True, 'value': 24342118235047427514092622991665, 'stdout': '24342118235047427514092622991665\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0815432071685791}",1,Compute: 7549968449606185 * 3224135093745609
395,lcs,16,9,7,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07079744338989258}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbabccadbdababac""
T = ""bacaabbabbbcbbab"""
396,ilp_partition,2,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19957423210144043}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 3, 2, 4]"
397,add,2,146,146,1,146,1,"{'ok': True, 'value': 146, 'stdout': '146\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09061861038208008}",1,Compute: 79 + 67
398,sub,16,8588342781949475,8588342782047655,0,8588342782049475,0,"{'ok': True, 'value': 8588342781949475, 'stdout': '8588342781949475\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08552074432373047}",1,Compute: 9606042797625227 - 1017700015675752
399,lcs,32,17,10,0,26,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08939814567565918}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaaabcbcdaccbbbbbadcdccadbbdaad""
T = ""cddbddbddbcacbdcbcbaacbbacacadca"""
400,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08460044860839844}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""dbc"""
401,ilp_prod,32,405,415,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_he56npdw/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_he56npdw/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18245339393615723}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [58, 54, 45, 81, 45, 22]
consumption (rows=resources) = [[2, 3, 20, 18, 20, 17], [17, 32, 2, 13, 3, 3], [19, 13, 30, 13, 26, 7], [17, 26, 19, 12, 25, 22]]
capacity = [93, 121, 75, 110]
upper_bounds = [3, 3, 3, 5, 3, 5]"
402,add,2,142,142,1,142,1,"{'ok': True, 'value': 142, 'stdout': '142\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09373044967651367}",1,Compute: 66 + 76
403,ilp_prod,8,122,108,0,105,0,"{'ok': True, 'value': 122, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fd4fdd8b0be34c1eb140f817d950063f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fd4fdd8b0be34c1eb140f817d950063f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 125 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -109 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 2 columns\nCbc0012I Integer solution of -122 found by DiveCoefficient after 3 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 2\nCbc0013I At root node, 2 cuts changed objective from -125 to -122 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 3 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -122, took 3 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -125 to -122\nProbing was tried 4 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                122.00000000\nEnumerated nodes:               0\nTotal iterations:               3\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n122.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16889381408691406}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 13, 4, 5]
consumption (rows=resources) = [[1, 5, 5, 1], [3, 2, 6, 6], [5, 3, 8, 7], [4, 4, 2, 2]]
capacity = [29, 21, 31, 32]
upper_bounds = [6, 5, 3, 3]"
404,mul,4,26799732,261886932,0,26789232,0,"{'ok': True, 'value': 26799732, 'stdout': '26799732\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0847320556640625}",1,Compute: 2747 * 9756
405,add,32,86109381422315022781162812339736,16,0,86109381422315022781162812339736,1,"{'ok': True, 'value': 86109381422315022781162812339736, 'stdout': '86109381422315022781162812339736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0835273265838623}",1,Compute: 72026027508761734051066191687181 + 14083353913553288730096620652555
406,sub,4,224,224,1,224,1,"{'ok': True, 'value': 224, 'stdout': '224\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08357548713684082}",1,Compute: 3630 - 3406
407,ilp_assign,16,58,113,0,113,0,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3937249183654785}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 30, 41, 17, 31, 16, 20], [19, 12, 4, 11, 11, 37, 11], [22, 39, 45, 15, 20, 3, 29], [38, 10, 41, 22, 37, 4, 47], [35, 33, 47, 10, 28, 36, 13], [30, 45, 40, 27, 13, 24, 21], [40, 19, 38, 26, 36, 39, 16]]"
408,add,4,14779,28,0,14779,1,"{'ok': True, 'value': 14779, 'stdout': '14779\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0866706371307373}",1,Compute: 8007 + 6772
409,ilp_partition,8,1,1,1,84,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08330512046813965}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 6, 16, 24, 18, 4, 23, 18]"
410,ilp_prod,32,569,300,0,255,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d99992dcc4f84b19943b9e347e28b33b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d99992dcc4f84b19943b9e347e28b33b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 54 RHS\nAt line 61 BOUNDS\nAt line 68 ENDATA\nProblem MODEL has 6 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nProblem is unbounded - 0.00 seconds\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1745014190673828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 32, 96, 89, 78, 3]
consumption (rows=resources) = [[18, 9, 11, 25, 5, 25], [27, 3, 16, 14, 12, 24], [26, 26, 5, 18, 5, 2], [26, 24, 17, 3, 28, 7]]
capacity = [125, 103, 65, 96]
upper_bounds = [3, 3, 5, 3, 3, 4]"
411,lcs,8,5,4,0,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08298373222351074}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcccbddd""
T = ""cacacabd"""
412,ilp_assign,32,153,11,0,105,0,"{'ok': True, 'value': 153, 'stdout': '153\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40801024436950684}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 72, 88, 5, 76, 92, 25], [11, 43, 33, 40, 50, 35, 41], [69, 46, 43, 64, 57, 46, 46], [61, 67, 73, 13, 61, 60, 91], [31, 91, 1, 89, 78, 11, 47], [62, 86, 55, 42, 51, 44, 85], [12, 6, 47, 7, 33, 17, 26]]"
413,ilp_assign,16,40,105,0,4,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41178321838378906}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 7, 40, 30, 27, 14, 14], [29, 35, 21, 4, 36, 12, 18], [3, 3, 48, 2, 30, 47, 37], [22, 32, 34, 19, 4, 47, 37], [39, 18, 29, 24, 45, 47, 14], [30, 32, 3, 45, 6, 43, 48], [33, 44, 12, 1, 6, 5, 38]]"
414,knap,4,20,15,0,3,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07351469993591309}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 6, 6, 2]
V = [14, 4, 1, 6]
C = 11"
415,ilp_prod,32,550,339,0,The answer will be printed after running the code.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_lp2p2iw2/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_lp2p2iw2/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18152499198913574}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [72, 37, 55, 90, 95, 29]
consumption (rows=resources) = [[25, 23, 21, 10, 24, 29], [5, 21, 12, 18, 2, 28], [11, 10, 26, 15, 6, 30], [16, 25, 30, 22, 3, 29]]
capacity = [92, 113, 94, 97]
upper_bounds = [3, 3, 3, 4, 3, 3]"
416,ilp_assign,2,11,11,1,11,1,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39892053604125977}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [6, 6]]"
417,mul,32,1323355615902574859291470798676672537703730261642133395548897940,,0,13004386395694456945649696565555946666466660,0,"{'ok': True, 'value': 1323355615902574859291470798676672537703730261642133395548897940, 'stdout': '1323355615902574859291470798676672537703730261642133395548897940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0963735580444336}",1,Compute: 30362685682063808034093338973223 * 43584932827082637860957468008780
418,add,32,130002339564309285810840706542740,130002319564309285810840706542740,0,130002340564309285810840706542740,0,"{'ok': True, 'value': 130002339564309285810840706542740, 'stdout': '130002339564309285810840706542740\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0874183177947998}",1,Compute: 60295471057584646151996901173488 + 69706868506724639658843805369252
419,add,32,150533225413345050497956300364236,,0,150533225413345050538956300364236,0,"{'ok': True, 'value': 150533225413345050497956300364236, 'stdout': '150533225413345050497956300364236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08174538612365723}",1,Compute: 87681472717251800129873972165762 + 62851752696093250368082328198474
420,ilp_prod,4,20,34,0,3,0,"{'ok': True, 'value': 2, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0b10808ead4c4b36ba2ff70a282dc23e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0b10808ead4c4b36ba2ff70a282dc23e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 20.0\nx_0 = 0.0\nx_1 = 0.0\nx_2 = 2.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1525585651397705}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 4, 6]
consumption (rows=resources) = [[1, 2, 2], [4, 4, 3], [4, 1, 3]]
capacity = [13, 11, 8]
upper_bounds = [3, 3, 3]"
421,sub,8,19566729,19566729,1,19566729,1,"{'ok': True, 'value': 19566729, 'stdout': '19566729\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07339119911193848}",1,Compute: 55707031 - 36140302
422,sub,4,93,93,1,93,1,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0766592025756836}",1,Compute: 1412 - 1319
423,rod,32,2496,715,0,78,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.031702756881714}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [78, 3, 27, 10, 72, 41, 27, 82, 46, 54, 48, 1, 75, 72, 58, 1, 93, 38, 48, 82, 35, 78, 64, 81, 89, 10, 29, 72, 45, 69, 65, 66]"
424,knap,32,1825,1045,0,1086,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_h5_0oz4_/main.py"", line 14, in <module>\n    res = knapsack(weights, values, capacity)\n  File ""/tmp/cot_exec_h5_0oz4_/main.py"", line 10, in knapsack\n    for w in range(C, W[i]-1, -1):\nTypeError: unsupported operand type(s) for -: \'ellipsis\' and \'int\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08436322212219238}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 43, 19, 53, 10, 25, 36, 5, 22, 35, 17, 53, 27, 23, 54, 42, 13, 28, 35, 16, 33, 28, 25, 2, 5, 26, 54, 36, 24, 34, 20, 55]
V = [89, 52, 90, 99, 69, 85, 97, 58, 102, 64, 34, 119, 76, 51, 87, 58, 67, 58, 88, 118, 85, 99, 12, 68, 86, 116, 18, 108, 76, 124, 90, 90]
C = 460"
425,ilp_prod,2,35,23,0,3,0,"{'ok': True, 'value': 5, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/388dcad710784f41af1189acfc23e311-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/388dcad710784f41af1189acfc23e311-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -5 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                5.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n5.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17125606536865234}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 3]
consumption (rows=resources) = [[1, 3], [1, 2]]
capacity = [8, 7]
upper_bounds = [7, 3]"
426,mul,32,3441841312118777216516295817771282727154869854118471470672197888,84310283573209914532023417198148,0,3408832543535999653766695839522156493364886488884888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888,0,"{'ok': True, 'value': 3441841312118777216516295817771282727154869854118471470672197888, 'stdout': '3441841312118777216516295817771282727154869854118471470672197888\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07497811317443848}",1,Compute: 81785250294173609783952467767488 * 42083887983943412467849157177676
427,rod,2,10,5,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_oad__my7/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07819390296936035}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 1]"
428,add,16,7787211342698698,62711072952269105881111,0,7787211342698708,0,"{'ok': True, 'value': 7787211342698698, 'stdout': '7787211342698698\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07391571998596191}",1,Compute: 6271107295226910 + 1516104047471788
429,ilp_partition,32,0,10,0,1,0,"{'ok': True, 'value': 1360, 'stdout': '1360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21915173530578613}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 2, 81, 68, 9, 33, 64, 86, 83, 61, 21, 57, 93, 77, 6, 48, 82, 91, 57, 24, 57, 80, 86, 48]"
430,ilp_prod,4,73,35,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_b5b_hgov/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_b5b_hgov/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17269253730773926}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5, 10]
consumption (rows=resources) = [[1, 4, 1], [1, 1, 3], [1, 4, 2]]
capacity = [12, 14, 11]
upper_bounds = [10, 3, 4]"
431,knap,16,348,109,0,109,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3990194797515869}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 25, 22, 13, 7, 15, 30, 10, 3, 15, 16, 27, 14, 27, 5, 1]
V = [54, 52, 61, 22, 56, 19, 24, 23, 11, 14, 7, 35, 25, 8, 38, 6]
C = 123"
432,sub,2,19,14,0,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07481598854064941}",1,Compute: 33 - 14
433,add,2,185,185,1,185,1,"{'ok': True, 'value': 185, 'stdout': '185\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08293676376342773}",1,Compute: 95 + 90
434,mul,2,4840,4940,0,4960,0,"{'ok': True, 'value': 4840, 'stdout': '4840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07465195655822754}",1,Compute: 55 * 88
435,ilp_prod,2,42,20,0,21,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5bcc7ff2d9db4b8db07ca93b1bbe0475-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5bcc7ff2d9db4b8db07ca93b1bbe0475-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15198826789855957}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[1, 3], [1, 1]]
capacity = [7, 9]
upper_bounds = [7, 3]"
436,knap,32,1804,1043,0,0,0,"{'ok': True, 'value': 2290, 'stdout': '2290.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42606186866760254}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [51, 47, 32, 21, 32, 64, 10, 35, 55, 11, 4, 41, 54, 42, 2, 13, 58, 32, 23, 40, 14, 49, 46, 62, 31, 31, 34, 61, 9, 17, 16, 1]
V = [63, 33, 73, 1, 71, 83, 109, 108, 118, 44, 64, 29, 95, 16, 11, 112, 127, 27, 116, 77, 107, 74, 107, 122, 80, 12, 6, 47, 118, 92, 61, 87]
C = 519"
437,ilp_partition,2,2,0,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20139169692993164}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 3, 2]"
438,sub,4,591,591,1,591,1,"{'ok': True, 'value': 591, 'stdout': '591\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07988572120666504}",1,Compute: 1602 - 1011
439,ilp_assign,32,118,186,0,117,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_95d56duz/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.399259090423584}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 59, 39, 29, 80, 77, 62], [45, 26, 26, 30, 17, 46, 1], [48, 95, 5, 74, 28, 34, 37], [2, 85, 21, 42, 60, 66, 87], [82, 22, 17, 96, 52, 86, 59], [71, 87, 81, 87, 25, 74, 69], [53, 70, 69, 39, 5, 34, 36]]"
440,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0849003791809082}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baccdbacbbdaddca""
T = ""cacbbabbddaadccd"""
441,rod,2,10,5,0,6,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08211660385131836}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 3]"
442,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08437466621398926}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcb""
T = ""dcbc"""
443,mul{'ok': True, 'value': 3146999036699187672269133084172653085952257196249784856957546524, 'stdout': '3146999036699187672269133084172653085952257196249784856957546524\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08548712730407715}",1,Compute: 76955842335551101085549561143956 * 40893568846629026792599269291579
444,mul,2,6270,6330,0,6270,1,"{'ok': True, 'value': 6270, 'stdout': '6270\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07426023483276367}",1,Compute: 66 * 95
445,ilp_partition,8,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371734619140625}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 13, 19, 4, 8, 14, 16, 10]"
446,rod,4,44,16,0,15,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ssvz_6jt/main.py"", line 2, in <module>\n    dp = [0] * (N + 1)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07944917678833008}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 12, 8, 7]"
447,mul,2,1505,1555,0,1455,0,"{'ok': True, 'value': 1505, 'stdout': '1505\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08158135414123535}",1,Compute: 35 * 43
448,rod,8,136,22,0,1,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09217429161071777}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 1, 6, 13, 6, 4, 14, 11]"
449,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2211930751800537}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 6, 15, 7, 23, 16, 5, 14]"
450,ilp_assign,8,28,66,0,76,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4032144546508789}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 12, 3, 1, 21, 16, 23], [24, 1, 8, 3, 21, 10, 22], [4, 19, 9, 14, 2, 9, 4], [23, 23, 19, 13, 7, 18, 12], [7, 5, 15, 3, 18, 13, 24], [4, 17, 6, 17, 4, 15, 7], [6, 24, 24, 11, 24, 6, 20]]"
451,ilp_assign,8,28,105,0,68,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40795469284057617}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 11, 13, 15, 4, 5, 16], [16, 15, 6, 7, 24, 6, 23], [4, 21, 23, 21, 12, 5, 19], [17, 6, 19, 21, 18, 15, 8], [8, 18, 14, 16, 21, 6, 2], [20, 17, 9, 10, 17, 4, 1], [16, 9, 14, 2, 23, 9, 16]]"
452,mul,8,2392986297523926,23248125406,0,24000000000000,0,"{'ok': True, 'value': 2392986297523926, 'stdout': '2392986297523926\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08030128479003906}",1,Compute: 97481254 * 24548169
453,sub,8,18537036,18537036,1,18537036,1,"{'ok': True, 'value': 18537036, 'stdout': '18537036\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07459902763366699}",1,Compute: 50712565 - 32175529
454,rod,4,32,12,0,16,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08537673950195312}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 4, 12, 3]"
455,knap,16,366,159,0,448,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.385113000869751}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 28, 30, 29, 3, 25, 8, 29, 5, 21, 27, 9, 12, 11, 23, 28]
V = [27, 13, 53, 39, 54, 27, 4, 31, 13, 4, 46, 60, 25, 42, 2, 34]
C = 159"
456,lcs,32,21,16,0,28,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371853828430176}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addccccbabdcacddccddbadbccccbbbd""
T = ""addcabacbdbddaccadbbbbdccbbbadc"""
457,knap,4,18,18,1,9,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0780787467956543}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 6, 2]
V = [14, 3, 9, 4]
C = 8"
458,ilp_prod,2,21,22,0,9,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/57f415b0ac1f45bba232e57ac165f326-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/57f415b0ac1f45bba232e57ac165f326-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 23.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16561055183410645}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 4]
consumption (rows=resources) = [[3, 2], [2, 3]]
capacity = [10, 9]
upper_bounds = [3, 3]"
459,sub,8,1151647,42370783,0,1151647,1,"{'ok': True, 'value': 1151647, 'stdout': '1151647\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07349944114685059}",1,Compute: 42370783 - 41219136
460,ilp_prod,2,35,25,0,20,0,"{'ok': True, 'value': 4, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0c4792e48aa14140b285afaae1e8c73b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0c4792e48aa14140b285afaae1e8c73b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6.66667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -4 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                4.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n4.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16402697563171387}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 7]
consumption (rows=resources) = [[3, 1], [3, 2]]
capacity = [9, 10]
upper_bounds = [3, 5]"
461,ilp_partition,32,1,100,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20400071144104004}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 28, 21, 42, 49, 56, 80, 16, 47, 78, 5, 28, 2, 94, 82, 96, 56, 31, 51, 35, 42, 40, 41, 31]"
462,ilp_assign,4,9,7,0,7,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3966860771179199}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3, 2, 1], [6, 5, 11, 4], [2, 11, 1, 4], [12, 3, 6, 7]]"
463,ilp_assign,32,100,0,0,105,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3667104244232178}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[57, 80, 65, 36, 53, 35, 25], [29, 61, 24, 29, 91, 96, 1], [78, 90, 75, 80, 4, 41, 65], [35, 12, 41, 80, 14, 14, 24], [16, 45, 87, 48, 45, 27, 24], [65, 57, 31, 69, 30, 17, 9], [34, 26, 51, 2, 8, 40, 1]]"
464,lcs,8,4,4,1,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08596396446228027}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaaadcd""
T = ""adadcaca"""
465,ilp_assign,16,82,105,0,110,0,"{'ok': True, 'value': 82, 'stdout': '82\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.412445068359375}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 37, 12, 8, 33, 1, 24], [15, 18, 36, 40, 12, 18, 3], [25, 11, 10, 43, 42, 44, 27], [24, 31, 47, 5, 28, 13, 12], [19, 39, 25, 31, 38, 35, 29], [12, 22, 25, 30, 48, 24, 1], [37, 36, 42, 35, 29, 22, 36]]"
466,add,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07492899894714355}",1,Compute: 15 + 43
467,sub,8,12512462,12512462,1,12512462,1,"{'ok': True, 'value': 12512462, 'stdout': '12512462\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07270455360412598}",1,Compute: 28483599 - 15971137
468,ilp_assign,4,15,0,0,4,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4054086208343506}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 2, 3, 8], [6, 6, 5, 8], [6, 4, 3, 8], [3, 12, 6, 4]]"
469,ilp_partition,2,1,0,0,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20404362678527832}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 3, 5]"
470,ilp_assign,8,37,37,1,62,0,"{'ok': True, 'value': 37, 'stdout': '37\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40999603271484375}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 11, 19, 11, 4, 22, 6], [11, 10, 17, 4, 18, 5, 11], [14, 21, 6, 23, 5, 2, 11], [10, 7, 8, 10, 15, 1, 17], [9, 18, 4, 20, 21, 1, 7], [6, 23, 19, 14, 1, 5, 15], [13, 15, 17, 15, 11, 24, 17]]"
471,sub,16,1879588820988482,1,0,1879588820988482,1,"{'ok': True, 'value': 1879588820988482, 'stdout': '1879588820988482\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1020510196685791}",1,Compute: 3910011543643301 - 2030422722654819
472,ilp_assign,8,35,46,0,46,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39913082122802734}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1, 5, 23, 21, 24, 2], [23, 16, 5, 7, 14, 5, 21], [2, 7, 6, 18, 23, 1, 7], [3, 5, 18, 1, 7, 13, 21], [24, 23, 18, 22, 24, 24, 16], [23, 20, 1, 23, 15, 17, 13], [9, 1, 15, 23, 24, 6, 16]]"
473,rod,8,152,22,0,30,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0740962028503418}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 18, 6, 8, 22, 1, 16, 4]"
474,rod,32,1200,1084,0,34,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.038696050643921}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [34, 75, 48, 42, 6, 52, 52, 34, 93, 93, 9, 16, 6, 1, 95, 86, 85, 65, 8, 93, 22, 51, 23, 7, 95, 62, 64, 56, 32, 43, 52, 76]"
475,ilp_prod,2,20,23,0,4,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b2e87c5be7a542929225aed53309394f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b2e87c5be7a542929225aed53309394f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.2673780918121338}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[2, 1], [3, 2]]
capacity = [9, 9]
upper_bounds = [3, 4]"
476,ilp_assign,16,65,105,0,105,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.7809879779815674}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 16, 23, 30, 47, 27, 44], [32, 18, 12, 47, 20, 31, 29], [32, 40, 13, 20, 36, 34, 37], [35, 42, 41, 11, 40, 14, 12], [18, 8, 28, 23, 38, 31, 28], [38, 44, 37, 36, 7, 27, 18], [40, 12, 26, 4, 46, 2, 17]]"
477,ilp_partition,4,4,1,0,0,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19957184791564941}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 5, 10]"
478,sub,4,3892,3892,1,3892,1,"{'ok': True, 'value': 3892, 'stdout': '3892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07959222793579102}",1,Compute: 8775 - 4883
479,add,2,87,87,1,87,1,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09177923202514648}",1,Compute: 66 + 21
480,rod,32,832,1055,0,322,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.029827833175659}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [6, 52, 60, 60, 6, 38, 78, 51, 85, 5, 27, 20, 29, 29, 95, 11, 30, 74, 33, 3, 67, 16, 16, 68, 10, 41, 59, 17, 74, 34, 43, 94]"
481,sub,16,3416166498011892,3416166498012902,0,3416166498011892,1,"{'ok': True, 'value': 3416166498011892, 'stdout': '3416166498011892\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09710168838500977}",1,Compute: 4568129258742381 - 1151962760730489
482,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07999086380004883}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbdadbc""
T = ""abcbbbd"""
483,sub,8,47410009,47410009,1,47409999,0,"{'ok': True, 'value': 47410009, 'stdout': '47410009\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09093523025512695}",1,Compute: 59181731 - 11771722
484,knap,4,27,33,0,-1,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07618522644042969}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 7, 8, 5]
V = [14, 12, 13, 9]
C = 12"
485,sub,32,10609236726447331221947497458912,123079377324441371219440884423512,0,10609236726447331221947889745891,0,"{'ok': True, 'value': 10609236726447331221947497458912, 'stdout': '10609236726447331221947497458912\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08109402656555176}",1,Compute: 56951333521986082229959109584844 - 46342096795538751008011612125932
486,sub,8,38050059,38050059,1,38050059,1,"{'ok': True, 'value': 38050059, 'stdout': '38050059\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09440231323242188}",1,Compute: 81797420 - 43747361
487,ilp_prod,8,50,60,0,4,0,"{'ok': True, 'value': 50, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/57e89627e94c4c93adee3c956d42daab-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/57e89627e94c4c93adee3c956d42daab-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 57.7941 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -48 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -50 found by DiveCoefficient after 6 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -53.875 to -50 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 1.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -50, took 6 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -53.875 to -50\nProbing was tried 3 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                50.00000000\nEnumerated nodes:               0\nTotal iterations:               6\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n50.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16124320030212402}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 10, 6, 19]
consumption (rows=resources) = [[8, 7, 5, 6], [2, 2, 3, 4], [8, 3, 1, 8], [3, 8, 3, 1]]
capacity = [23, 21, 22, 17]
upper_bounds = [3, 3, 4, 3]"
488,ilp_partition,8,5,1,0,24,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18956255912780762}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 18, 3, 15, 16, 16, 18, 19]"
489,ilp_prod,16,232,168,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_b20qevx5/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23557257652282715}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [36, 39, 26, 24, 44, 15]
consumption (rows=resources) = [[10, 2, 3, 11, 16, 2], [6, 9, 3, 13, 16, 5], [9, 13, 5, 2, 6, 9], [5, 13, 1, 8, 15, 3]]
capacity = [35, 45, 42, 55]
upper_bounds = [3, 3, 8, 3, 3, 4]"
490,ilp_partition,4,1,0,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19689512252807617}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 2, 7, 9]"
491,sub,4,287,287,1,287,1,"{'ok': True, 'value': 287, 'stdout': '287\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07906866073608398}",1,Compute: 8147 - 7860
492,lcs,2,2,2,1,-1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08416104316711426}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""bdc"""
493,sub,16,1975376945361403,2000000000000000,0,1975377045361403,0,"{'ok': True, 'value': 1975376945361403, 'stdout': '1975376945361403\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08365678787231445}",1,Compute: 7969959231759519 - 5994582286398116
494,knap,16,450,1646,0,The total weight exceeds the capacity.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ebrwf4do/main.py"", line 12, in <module>\n    cost = -np.outer(V, W)\n  File ""/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/numpy/core/numeric.py"", line 925, in outer\n    return multiply(a.ravel()[:, newaxis], b.ravel()[newaxis, :], out)\nTypeError: unsupported operand type(s) for *: \'ellipsis\' and \'ellipsis\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.46511149406433105}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [26, 29, 25, 13, 3, 16, 4, 19, 19, 25, 30, 22, 27, 25, 8, 27]
V = [59, 38, 61, 27, 1, 36, 52, 27, 55, 9, 41, 52, 62, 2, 51, 58]
C = 159"
495,ilp_partition,2,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20349597930908203}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 5, 2, 1]"
496,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08107209205627441}",1,Compute: 94 - 73
497,add,32,156169471455455311109721163750256,55169231445455275024124163750956,0,156169471455455311109721163750256,1,"{'ok': True, 'value': 156169471455455311109721163750256, 'stdout': '156169471455455311109721163750256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07405328750610352}",1,Compute: 89115627046534271912091058684440 + 67053844408921039197630105065816
498,add,8,163148667,6152112,0,163148667,1,"{'ok': True, 'value': 163148667, 'stdout': '163148667\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07470273971557617}",1,Compute: 86349774 + 76798893
499,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19385147094726562}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 3, 1, 4]"
500,ilp_partition,32,0,10,0,8,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08761262893676758}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 59, 15, 94, 89, 10, 38, 93, 36, 32, 44, 71, 48, 84, 80, 86, 87, 49, 94, 85, 10, 52, 85, 38]"
501,lcs,8,3,5,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08171391487121582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcacadbc""
T = ""adddbbaa"""
502,ilp_assign,8,27,68,0,46,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4053385257720947}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 12, 7, 20, 6, 23, 23], [22, 9, 3, 21, 22, 14, 11], [23, 10, 21, 11, 19, 18, 4], [22, 8, 7, 13, 14, 5, 20], [3, 24, 8, 8, 10, 23, 24], [14, 10, 14, 2, 21, 2, 13], [13, 9, 1, 13, 4, 1, 4]]"
503,sub,8,12187600,12187600,1,1208760,0,"{'ok': True, 'value': 12187600, 'stdout': '12187600\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07274866104125977}",1,Compute: 93090236 - 80902636
504,ilp_assign,4,16,34,0,18,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3893580436706543}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 2, 10, 11], [12, 4, 6, 7], [2, 5, 7, 9], [6, 1, 11, 6]]"
505,knap,16,364,136,0,100,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37695860862731934}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 9, 6, 2, 25, 32, 27, 21, 10, 13, 6, 25, 31, 22, 25, 8]
V = [39, 47, 3, 21, 16, 3, 34, 42, 16, 31, 13, 60, 61, 63, 30, 1]
C = 136"
506,sub,16,3762770163988869,,0,3762770163988869,1,"{'ok': True, 'value': 3762770163988869, 'stdout': '3762770163988869\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09437966346740723}",1,Compute: 8923239987202063 - 5160469823213194
507,ilp_prod,4,24,33,0,39,0,"{'ok': True, 'value': 5, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c0329801e71e4889b4018b9d7c1e5427-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c0329801e71e4889b4018b9d7c1e5427-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 15.0\nProduct_0: 0.0\nProduct_1: 0.0\nProduct_2: 5.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1499464511871338}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 12, 5]
consumption (rows=resources) = [[1, 2, 2], [3, 4, 4], [4, 1, 2]]
capacity = [12, 10, 12]
upper_bounds = [3, 3, 3]"
508,knap,4,17,16,0,4,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08478379249572754}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 4, 4]
V = [2, 2, 3, 15]
C = 6"
509,lcs,32,20,10,0,26,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08031725883483887}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdabddabcccbacaacbbacbddcdccbdcd""
T = ""acdcdacadababbacabadbcddbdbadddbc"""
510,ilp_prod,2,18,12,0,18,1,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e8dd162f9922460f9f2e8b8dc4425ab6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e8dd162f9922460f9f2e8b8dc4425ab6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16159987449645996}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[1, 3], [3, 3]]
capacity = [10, 9]
upper_bounds = [3, 3]"
511,ilp_partition,4,1,1,1,7,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21416163444519043}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 2, 3, 7]"
512,lcs,2,2,1,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08274555206298828}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""dda"""
513,ilp_assign,4,21,1,0,18,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3766939640045166}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 5, 8, 6], [12, 9, 12, 4], [1, 6, 9, 5], [7, 9, 11, 10]]"
514,knap,4,27,14,0,2,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08469486236572266}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 8, 1]
V = [8, 12, 4, 7]
C = 7"
515,rod,2,6,4,0,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dxg9_bv3/main.py"", line 14, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07267260551452637}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
516,mul,32,6556311951058257364722474557381227515817177808700465039189832544,64396333333333333333333333333333,0,664919828844569646488339854447844464644644444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 6556311951058257364722474557381227515817177808700465039189832544, 'stdout': '6556311951058257364722474557381227515817177808700465039189832544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0763099193572998}",1,Compute: 75814208145165555100548841817966 * 86478670838380757180913720619984
517,ilp_assign,16,64,105,0,105,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3799757957458496}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 47, 23, 18, 6, 6, 9], [39, 23, 7, 42, 45, 18, 22], [9, 26, 45, 12, 3, 30, 18], [16, 45, 25, 40, 13, 34, 11], [35, 20, 41, 11, 30, 16, 42], [6, 44, 23, 13, 35, 48, 13], [31, 25, 4, 48, 2, 5, 16]]"
518,mul,16,10051508103210626945233600082628,32,0,1014683734535881735786534666253572,0,"{'ok': True, 'value': 10051508103210626945233600082628, 'stdout': '10051508103210626945233600082628\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08511996269226074}",1,Compute: 5279414150135534 * 1903905967095342
519,lcs,32,15,10,0,16,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08203721046447754}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccaaacabbbcccdcbcaabacbdcaadbca""
T = ""dcbcabaaaadddddadddbdddcacacacd"""
520,add,16,3423096232055683,3357331232055683,0,3423096232055683,1,"{'ok': True, 'value': 3423096232055683, 'stdout': '3423096232055683\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08275604248046875}",1,Compute: 1094430586889224 + 2328665645166459
521,sub,32,38938275248067743694708928937849,,0,38938275248067743694708928937849,1,"{'ok': True, 'value': 38938275248067743694708928937849, 'stdout': '38938275248067743694708928937849\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07840490341186523}",1,Compute: 88000774710173846238162297515523 - 49062499462106102543453368577674
522,mul,16,20059716575924303145194818227978,20349787808004988199894796540912582,0,2018015809836955555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555,0,"{'ok': True, 'value': 20059716575924303145194818227978, 'stdout': '20059716575924303145194818227978\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07204103469848633}",1,Compute: 3203697637927107 * 6261426277700654
523,rod,32,1424,1055,0,94,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0368728637695312}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [44, 89, 57, 79, 70, 82, 45, 69, 80, 64, 64, 41, 95, 38, 26, 11, 74, 62, 33, 12, 35, 65, 10, 4, 49, 60, 25, 46, 95, 90, 51, 94]"
524,knap,8,85,110,0,113,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0854330062866211}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 12, 8, 2, 4, 12, 15, 7]
V = [20, 19, 7, 1, 5, 28, 13, 32]
C = 37"
525,ilp_prod,4,27,37,0,30,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e030ef9aebcf4caeb6c986e2bc0014dc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e030ef9aebcf4caeb6c986e2bc0014dc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1726701259613037}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 4, 7]
consumption (rows=resources) = [[2, 2, 4], [3, 2, 2], [4, 3, 2]]
capacity = [9, 10, 10]
upper_bounds = [3, 3, 3]"
526,ilp_prod,4,16,24,0,24,0,"{'ok': True, 'value': 4, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/397611806a104d0c847073370f677855-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/397611806a104d0c847073370f677855-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 4.44444 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -4 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                4.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n4.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17047810554504395}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 4, 4]
consumption (rows=resources) = [[1, 2, 1], [4, 4, 1], [1, 4, 4]]
capacity = [16, 10, 16]
upper_bounds = [3, 3, 4]"
527,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07589316368103027}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""c"""
528,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07677149772644043}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcd""
T = ""add"""
529,mul,16,31101577078844313498003242950860,313842837672098097778528553328,0,313917453675077000000000000000000,0,"{'ok': True, 'value': 31101577078844313498003242950860, 'stdout': '31101577078844313498003242950860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0830380916595459}",1,Compute: 4504728703583788 * 6904206473988345
530,mul,2,6790,6790,1,6790,1,"{'ok': True, 'value': 6790, 'stdout': '6790\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08396530151367188}",1,Compute: 70 * 97
531,lcs,32,16,10,0,26,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0829465389251709}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddadbbdcadaadddcbccddaddbadaddca""
T = ""bacbadcaccdddcaadaacccbcabdcccbb"""
532,ilp_partition,16,1,1,1,198,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u4eqzqjf/main.py"", line 13, in <module>\n    sum_can = np.where(dp)[0][-1]\nIndexError: index -1 is out of bounds for axis 0 with size 0\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19568443298339844}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 26, 43, 1, 38, 39, 37, 11, 42, 35, 4, 11, 20, 9, 47, 38]"
533,knap,8,99,164,0,103,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08529329299926758}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 9, 10, 5, 3, 15, 11, 7]
V = [3, 15, 29, 27, 9, 3, 13, 19]
C = 37"
534,ilp_prod,2,12,21,0,15,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5b3af8ea79fe4eb8b9d4c80a75f9ddb1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5b3af8ea79fe4eb8b9d4c80a75f9ddb1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16852569580078125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6]
consumption (rows=resources) = [[3, 3], [3, 3]]
capacity = [7, 8]
upper_bounds = [3, 3]"
535,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1929776668548584}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 8, 25, 28, 26, 47, 47, 39, 44, 27, 3, 7, 46, 43, 11, 28]"
536,ilp_partition,4,1,The answer will be the minimum difference between the two groups of weights.,0,14,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19358038902282715}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 4, 9, 2]"
537,ilp_assign,32,161,0,0,186,0,"{'ok': True, 'value': 161, 'stdout': '161\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3936934471130371}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[46, 7, 82, 90, 81, 89, 75], [56, 46, 20, 69, 76, 1, 96], [1, 44, 93, 40, 1, 4, 26], [65, 85, 12, 17, 91, 96, 34], [41, 48, 65, 61, 71, 56, 62], [55, 72, 80, 26, 96, 60, 52], [70, 69, 51, 72, 71, 57, 89]]"
538,sub,32,70184808965044433289801733512019,1,0,70184768965044433289801733512019,0,"{'ok': True, 'value': 70184808965044433289801733512019, 'stdout': '70184808965044433289801733512019\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08605360984802246}",1,Compute: 86080138189109543417979759443802 - 15895329224065110128178025931783
539,rod,4,24,12,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_b7uhk2p1/main.py"", line 28, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_b7uhk2p1/main.py"", line 16, in rod_cutting\n    rev = P[j] + revenue[i - j - 1]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07643914222717285}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 8, 7, 7]"
540,rod,4,48,14,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8m3gsdht/main.py"", line 28, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_8m3gsdht/main.py"", line 16, in rod_cutting\n    rev = P[j] + revenue[i - j]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07253766059875488}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 10, 2, 8]"
541,lcs,32,18,15,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_nalzkg7m/main.py"", line 20, in <module>\n    res = lcs(S, T)\nNameError: name \'S\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08294892311096191}",0,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbaddbcaabdbdbaacbccbcacccbbbdc""
T = ""dccbcdccbcabbdddccdbdbbbdaaccdbc"""
542,knap,32,1294,1084,0,-1,0,"{'ok': True, 'value': 1294, 'stdout': '1294\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09017181396484375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [38, 22, 64, 10, 54, 29, 52, 35, 29, 28, 39, 30, 64, 64, 40, 13, 40, 24, 35, 23, 7, 59, 36, 2, 15, 61, 62, 2, 24, 49, 47, 2]
V = [102, 8, 4, 23, 95, 43, 42, 109, 15, 24, 8, 10, 48, 19, 10, 115, 108, 72, 13, 34, 14, 42, 24, 106, 72, 99, 72, 15, 27, 24, 39, 107]
C = 549"
543,lcs,16,9,7,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08370113372802734}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcbbbbcdcdccadc""
T = ""bcabbacdbbadcccb"""
544,ilp_prod,4,81,The total profit of the selected products.,0,3,0,"{'ok': True, 'value': 2, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/26fffc303bcd4cc8ac34425002cd8b39-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/26fffc303bcd4cc8ac34425002cd8b39-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 30.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -22 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                22.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 22.0\nx_0 = 0.0\nx_1 = 0.0\nx_2 = 2.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16152691841125488}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 10, 5]
consumption (rows=resources) = [[1, 2, 2], [2, 1, 4], [4, 1, 2]]
capacity = [16, 11, 11]
upper_bounds = [3, 8, 3]"
545,ilp_prod,32,236,166,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ygsdxl9e/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ygsdxl9e/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15569496154785156}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [48, 16, 55, 27, 41, 23]
consumption (rows=resources) = [[14, 24, 22, 27, 30, 2], [11, 31, 11, 20, 12, 29], [25, 10, 18, 16, 1, 1], [26, 18, 13, 23, 31, 27]]
capacity = [83, 120, 94, 126]
upper_bounds = [3, 3, 3, 3, 3, 4]"
546,rod,16,464,46,0,11,0,"{'ok': True, 'value': 464, 'stdout': '464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11498570442199707}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [29, 45, 46, 39, 32, 41, 11, 27, 6, 18, 39, 19, 2, 11, 22, 46]"
547,rod,32,2912,450,0,250,0,"{'ok': True, 'value': 2912, 'stdout': '2912\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08379602432250977}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [91, 17, 42, 43, 15, 44, 37, 85, 7, 62, 73, 67, 41, 35, 63, 83, 19, 92, 93, 17, 71, 3, 79, 24, 8, 45, 70, 44, 4, 26, 42, 9]"
548,ilp_assign,16,93,105,0,105,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4054226875305176}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[33, 22, 12, 43, 20, 38, 42], [30, 39, 48, 23, 22, 36, 35], [27, 40, 26, 6, 12, 46, 10], [46, 16, 8, 47, 36, 34, 44], [20, 16, 5, 31, 32, 1, 47], [19, 11, 2, 32, 35, 7, 10], [26, 20, 39, 15, 45, 31, 24]]"
549,add,16,14286058258530423,14286056838540423,0,14286058258529423,0,"{'ok': True, 'value': 14286058258530423, 'stdout': '14286058258530423\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08527970314025879}",1,Compute: 5745983064423624 + 8540075194106799
550,lcs,8,5,5,1,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08243870735168457}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbabdcca""
T = ""dcdbbda"""
551,ilp_assign,8,40,36,0,2,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.417865514755249}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 12, 3, 9, 12, 13, 4], [11, 19, 5, 13, 17, 10, 9], [12, 6, 19, 2, 4, 7, 16], [3, 11, 8, 9, 15, 6, 14], [21, 7, 18, 17, 18, 15, 6], [16, 23, 5, 16, 16, 18, 24], [12, 22, 20, 22, 17, 23, 2]]"
552,rod,8,120,22,0,15,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07456588745117188}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 15, 8, 19, 3, 17, 18, 6]"
553,add,16,6395233915366644,6495233915366644,0,6395233915366644,1,"{'ok': True, 'value': 6395233915366644, 'stdout': '6395233915366644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08287382125854492}",1,Compute: 3902698172577940 + 2492535742788704
554,add,8,102839896,9577138,0,102839896,1,"{'ok': True, 'value': 102839896, 'stdout': '102839896\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08421897888183594}",1,Compute: 49414672 + 53425224
555,add,2,120,120,1,120,1,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08304882049560547}",1,Compute: 82 + 38
556,rod,32,1520,1084,0,500,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_kp01c7yr/main.py"", line 12, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_kp01c7yr/main.py"", line 9, in max_revenue\n    max_rev = max(max_rev, P[i] + max_revenue(N-i-1, P))\n  File ""/tmp/cot_exec_kp01c7yr/main.py"", line 9, in max_revenue\n    max_rev = max(max_rev, P[i] + max_revenue(N-i-1, P))\n  File ""/tmp/cot_exec_kp01c7yr/main.py"", line 9, in max_revenue\n    max_rev = max(max_rev, P[i] + max_revenue(N-i-1, P))\n  [Previous line repeated 29 more times]\nTypeError: unsupported operand type(s) for +: \'ellipsis\' and \'int\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08243703842163086}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [43, 95, 18, 59, 77, 54, 81, 21, 75, 10, 3, 47, 12, 22, 15, 33, 32, 29, 68, 89, 73, 68, 55, 5, 44, 96, 66, 67, 61, 40, 18, 48]"
557,ilp_prod,2,50,80,0,50,1,"{'ok': True, 'value': 25, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5e51e898bd88414992297b6498f34b7b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5e51e898bd88414992297b6498f34b7b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -25 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                25.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n25.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16331124305725098}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[1, 2], [1, 2]]
capacity = [10, 10]
upper_bounds = [10, 5]"
558,ilp_partition,2,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20155882835388184}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 2, 1, 1]"
559,mul,16,20725416173060168411968183049692,9753044003831212,0,20883345008552526434346686541,0,"{'ok': True, 'value': 20725416173060168411968183049692, 'stdout': '20725416173060168411968183049692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0822441577911377}",1,Compute: 2125020266997541 * 9753044003831212
560,ilp_partition,32,1,10,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20397663116455078}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 7, 87, 52, 41, 71, 37, 79, 59, 22, 17, 20, 14, 91, 90, 51, 15, 96, 17, 34, 34, 79, 87, 81]"
561,knap,32,1342,1045,0,11,0,"{'ok': True, 'value': 1342, 'stdout': '1342\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0865015983581543}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 34, 44, 42, 54, 38, 15, 33, 19, 27, 27, 42, 38, 55, 49, 63, 26, 4, 15, 48, 50, 61, 52, 54, 46, 7, 25, 1, 38, 18, 19, 5]
V = [101, 128, 59, 63, 14, 90, 68, 76, 21, 4, 82, 13, 62, 55, 73, 56, 26, 7, 101, 27, 95, 59, 39, 76, 2, 84, 8, 31, 27, 14, 51, 60]
C = 535"
562,ilp_assign,2,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37810325622558594}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [5, 1]]"
563,sub,16,1506410221568515,1506431221568514,0,1496410221568515,0,"{'ok': True, 'value': 1506410221568515, 'stdout': '1506410221568515\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07369637489318848}",1,Compute: 6964262087713624 - 5457851866145109
564,knap,32,1708,1004,0,518,0,"{'ok': True, 'value': 1708, 'stdout': '1708.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4516305923461914}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [55, 20, 57, 19, 25, 39, 44, 21, 5, 19, 42, 52, 44, 26, 19, 22, 2, 49, 54, 28, 25, 21, 28, 51, 25, 59, 42, 51, 7, 36, 34, 16]
V = [28, 127, 118, 43, 12, 55, 55, 54, 72, 84, 79, 57, 11, 108, 123, 44, 53, 3, 67, 49, 30, 89, 26, 99, 118, 79, 57, 93, 84, 27, 115, 126]
C = 518"
565,lcs,32,16,10,0,26,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08609318733215332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcadacabbdabdcbdccbbbcddabaaaac""
T = ""dbdabddbcaabaaaaddcddcaaddaccbd"""
566,mul,8,4771783396040208,939716321,0,4764639553861376,0,"{'ok': True, 'value': 4771783396040208, 'stdout': '4771783396040208\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0867149829864502}",1,Compute: 52212019 * 91392432
567,ilp_assign,8,42,46,0,46,0,"{'ok': True, 'value': 42, 'stdout': '42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3947641849517822}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 12, 12, 3, 17, 19, 9], [1, 5, 2, 3, 18, 11, 3], [19, 24, 9, 5, 12, 21, 19], [21, 8, 20, 1, 14, 18, 11], [14, 24, 13, 22, 13, 15, 22], [4, 17, 1, 15, 9, 22, 4], [12, 3, 16, 11, 17, 13, 13]]"
568,ilp_prod,4,42,48,0,3,0,"{'ok': True, 'value': 3, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7f3e57ad902b4487b7d4865a7477c0f4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7f3e57ad902b4487b7d4865a7477c0f4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 42 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -36 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 36.0\nx[0] = 0.0\nx[1] = 0.0\nx[2] = 3.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17066216468811035}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 6, 8]
consumption (rows=resources) = [[4, 2, 1], [2, 3, 4], [4, 2, 3]]
capacity = [14, 14, 14]
upper_bounds = [3, 4, 3]"
569,add,8,163009002,1111111111,0,162908992,0,"{'ok': True, 'value': 163009002, 'stdout': '163009002\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11124658584594727}",1,Compute: 69399626 + 93609376
570,sub,16,184164009339789,184164010339809,0,-1841639999339789,0,"{'ok': True, 'value': 184164009339789, 'stdout': '184164009339789\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08299732208251953}",1,Compute: 8648958529284629 - 8464794519944840
571,mul,32,905833300496605876056039708474768332189169437377704224550562123,9223372036854775810,0,9223372036854775807,0,"{'ok': True, 'value': 905833300496605876056039708474768332189169437377704224550562123, 'stdout': '905833300496605876056039708474768332189169437377704224550562123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08290839195251465}",1,Compute: 10510559620880074853377349429881 * 86183165613474560093420150522083
572,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08109784126281738}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""c"""
573,add,8,63537847,42280000,0,63537847,1,"{'ok': True, 'value': 63537847, 'stdout': '63537847\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09277844429016113}",1,Compute: 29311767 + 34226080
574,add,4,11831,8,0,11831,1,"{'ok': True, 'value': 11831, 'stdout': '11831\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07330751419067383}",1,Compute: 2350 + 9481
575,ilp_prod,16,381,156,0,2,0,"{'ok': True, 'value': 93, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8a33be40db8b4545afb50053692f72dc-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8a33be40db8b4545afb50053692f72dc-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 21 COLUMNS\nAt line 136 RHS\nAt line 153 BOUNDS\nAt line 160 ENDATA\nProblem MODEL has 16 rows, 6 columns and 96 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 97.4286 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -93 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                93.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n93.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.181227445602417}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [31, 26, 35, 35, 21, 32]
consumption (rows=resources) = [[9, 14, 1, 3, 11, 16], [5, 14, 16, 4, 4, 7], [4, 1, 4, 5, 4, 2], [8, 4, 4, 3, 5, 3]]
capacity = [44, 51, 63, 43]
upper_bounds = [4, 3, 3, 10, 4, 3]"
576,rod,2,8,6,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gh14jin8/main.py"", line 16, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_gh14jin8/main.py"", line 12, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07439279556274414}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
577,ilp_partition,4,2,0,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21947050094604492}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 4, 2]"
578,rod,32,1232,1054,0,1040,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_khajz1et/main.py"", line 9, in <module>\n    res = cut_rod(P, N)\nNameError: name \'P\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07438969612121582}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [31, 77, 11, 48, 55, 96, 14, 37, 18, 18, 21, 26, 74, 80, 93, 1, 94, 35, 10, 6, 80, 24, 59, 37, 93, 35, 51, 48, 9, 86, 18, 26]"
579,rod,2,6,6,1,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9_9ryj2y/main.py"", line 16, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_9_9ryj2y/main.py"", line 12, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07636356353759766}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 6]"
580,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_2cbg8ynz/main.py"", line 18, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_2cbg8ynz/main.py"", line 14, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0741426944732666}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
581,ilp_prod,4,23,30,0,15,0,"{'ok': True, 'value': 5, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/79b27a1758d5401588940befa5fcce47-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/79b27a1758d5401588940befa5fcce47-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 31 RHS\nAt line 36 BOUNDS\nAt line 40 ENDATA\nProblem MODEL has 4 rows, 3 columns and 12 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -5 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                5.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n5.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1541755199432373}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 10, 3]
consumption (rows=resources) = [[3, 3, 3], [4, 4, 1], [3, 2, 2]]
capacity = [9, 10, 11]
upper_bounds = [3, 3, 3]"
582,add,4,10906,8,0,10906,1,"{'ok': True, 'value': 10906, 'stdout': '10906\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08308553695678711}",1,Compute: 1455 + 9451
583,rod,16,360,47,0,64,0,"{'ok': True, 'value': 360, 'stdout': '360\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10125160217285156}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [6, 45, 18, 39, 43, 12, 31, 44, 7, 37, 42, 37, 8, 47, 35, 35]"
584,ilp_partition,16,0,14,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19803690910339355}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 23, 48, 23, 43, 23, 25, 42, 41, 27, 2, 30, 31, 36, 23, 34]"
585,lcs,16,8,6,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07564115524291992}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbcdbddccbcccba""
T = ""ddbbcabcbcbdbbd"""
586,rod,16,528,48,0,6,0,"{'ok': True, 'value': 528, 'stdout': '528\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10322332382202148}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [33, 10, 28, 27, 1, 35, 44, 44, 1, 19, 22, 21, 42, 48, 21, 6]"
587,sub,32,50228025124758038363805703243404,50228025124758038363805703243400,0,49999999999999999999999999999994,0,"{'ok': True, 'value': 50228025124758038363805703243404, 'stdout': '50228025124758038363805703243404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08360505104064941}",1,Compute: 84769212987675315399663601432782 - 34541187862917277035857898189378
588,sub,8,5670135,5740145,0,5670135,1,"{'ok': True, 'value': 5670135, 'stdout': '5670135\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08361434936523438}",1,Compute: 30573544 - 24903409
589,ilp_assign,32,143,187,0,114,0,"{'ok': True, 'value': 143, 'stdout': '143\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4159202575683594}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[50, 63, 12, 32, 46, 63, 89], [79, 88, 24, 67, 54, 20, 27], [30, 33, 37, 33, 38, 45, 62], [91, 54, 47, 87, 51, 41, 12], [10, 79, 67, 3, 65, 51, 22], [26, 44, 86, 56, 69, 33, 95], [14, 60, 4, 76, 77, 89, 62]]"
590,sub,16,1201932922062158,1234567890123457,0,1201932922062158,1,"{'ok': True, 'value': 1201932922062158, 'stdout': '1201932922062158\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0865931510925293}",1,Compute: 5457228844536400 - 4255295922474242
591,add,8,74848303,74848303,1,74848303,1,"{'ok': True, 'value': 74848303, 'stdout': '74848303\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07834863662719727}",1,Compute: 58673442 + 16174861
592,lcs,32,19,10,0,26,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07298660278320312}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aababaddadacdbddcbaddbdcbcacddad""
T = ""adbcccccbbddccbdcdcbcdbaacdcacdbd"""
593,add,2,126,126,1,126,1,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07277655601501465}",1,Compute: 71 + 55
594,mul,16,33671118805950354699780579876660,121,0,34039978886992070648436458886059810,0,"{'ok': True, 'value': 33671118805950354699780579876660, 'stdout': '33671118805950354699780579876660\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08788633346557617}",1,Compute: 5413781309937419 * 6219519570202140
595,add,32,113381792807499721939251868834193,113382792807519721328248878834193,0,113381792807499721939251868834193,1,"{'ok': True, 'value': 113381792807499721939251868834193, 'stdout': '113381792807499721939251868834193\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08127450942993164}",1,Compute: 62050264056641996120717300686126 + 51331528750857725818534568148067
596,add,16,14837476377302598,14837476577329600,0,14837476377302638,0,"{'ok': True, 'value': 14837476377302598, 'stdout': '14837476377302598\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08134222030639648}",1,Compute: 5950144242791866 + 8887332134510732
597,rod,8,64,22,0,37,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07378005981445312}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [8, 5, 24, 20, 13, 16, 13, 2]"
598,rod,8,48,22,0,1,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08140206336975098}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 8, 11, 24, 17, 9, 2, 13]"
599,ilp_assign,32,177,201,0,265,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__yt3kym9/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3998301029205322}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[90, 65, 10, 80, 33, 65, 9], [60, 60, 70, 10, 24, 88, 85], [39, 90, 27, 52, 76, 63, 90], [29, 68, 63, 16, 88, 65, 79], [95, 83, 5, 70, 58, 39, 73], [18, 60, 41, 84, 96, 7, 79], [75, 90, 22, 83, 41, 27, 48]]"
600,ilp_assign,2,7,1,0,4,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40264058113098145}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 6], [1, 5]]"
601,lcs,4,2,3,0,-1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08380460739135742}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdca""
T = ""dccdb"""
602,ilp_assign,8,36,36,1,42,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4032285213470459}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 1, 17, 6, 11, 23, 17], [24, 7, 20, 9, 12, 8, 13], [12, 18, 13, 11, 11, 22, 14], [13, 10, 8, 21, 18, 23, 4], [9, 3, 11, 15, 5, 18, 16], [18, 3, 9, 7, 6, 4, 9], [11, 18, 1, 11, 17, 1, 5]]"
603,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08061432838439941}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 38, 4, 2, 4, 28, 12, 26, 40, 29, 18, 34, 1, 25, 12, 41]"
604,ilp_prod,16,168,The solution to this problem would be the values of x_j that maximize the total profit while satisfying the resource constraints and the non-negativity constraint.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_b75n9byn/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.26761698722839355}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 21, 42, 33, 3, 22]
consumption (rows=resources) = [[3, 4, 8, 16, 2, 2], [13, 7, 11, 14, 16, 13], [4, 15, 5, 4, 1, 9], [1, 16, 4, 12, 4, 5]]
capacity = [35, 45, 34, 43]
upper_bounds = [3, 3, 4, 3, 3, 3]"
605,ilp_partition,2,2,0,0,15,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2122814655303955}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 6, 4]"
606,add,4,11622,48,0,11622,1,"{'ok': True, 'value': 11622, 'stdout': '11622\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08180809020996094}",1,Compute: 1847 + 9775
607,knap,16,416,1047,0,106,0,"{'ok': True, 'value': 520, 'stdout': '520.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38032078742980957}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 15, 18, 24, 24, 14, 6, 23, 9, 5, 17, 13, 7, 4, 27, 23]
V = [54, 23, 22, 35, 3, 32, 61, 2, 52, 12, 31, 29, 50, 60, 32, 22]
C = 129"
608,ilp_assign,2,8,10,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3886384963989258}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5], [5, 3]]"
609,knap,8,113,147,0,26,0,"{'ok': False, 'value': None, 'stdout': 'The total weight exceeds the capacity.\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41602635383605957}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 11, 13, 3, 4, 2, 12, 5]
V = [11, 23, 30, 27, 22, 20, 19, 21]
C = 26"
610,add,32,148601863558467199895004532759930,149601865558467200594974532758930,0,148601863558467199894994532759930,0,"{'ok': True, 'value': 148601863558467199895004532759930, 'stdout': '148601863558467199895004532759930\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0848240852355957}",1,Compute: 86221605719125368599643569625044 + 62380257839341831295360963134886
611,ilp_partition,32,1,10,0,1,1,"{'ok': True, 'value': 1071, 'stdout': '1071\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22592449188232422}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [82, 76, 2, 33, 54, 7, 12, 86, 43, 54, 70, 33, 7, 7, 48, 8, 21, 96, 45, 65, 63, 45, 72, 42]"
612,ilp_assign,8,21,36,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_qpk9av2h/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.4149818420410156}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 23, 23, 10, 14, 14, 2], [7, 18, 3, 16, 6, 24, 8], [15, 23, 24, 15, 1, 13, 4], [9, 7, 19, 13, 7, 3, 4], [4, 13, 24, 24, 24, 7, 10], [1, 4, 12, 17, 8, 19, 1], [13, 2, 5, 4, 5, 23, 3]]"
613,mul,4,17884734,884314,0,17726934,0,"{'ok': True, 'value': 17884734, 'stdout': '17884734\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08523106575012207}",1,Compute: 9498 * 1883
614,lcs,4,2,3,0,-1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09447288513183594}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""accc""
T = ""dbaca"""
615,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19571185111999512}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 3, 27, 32, 46, 40, 40, 19, 35, 12, 48, 18, 12, 21, 46, 44]"
616,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_zyu1cnw9/main.py"", line 17, in <module>\n    print(rod_cutting(N, P))\n  File ""/tmp/cot_exec_zyu1cnw9/main.py"", line 10, in rod_cutting\n    max_revenue[i] = max(max_revenue[i], P[j] + max_revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08041930198669434}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 4]"
617,lcs,32,16,15,0,26,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08422541618347168}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccababadcdbbdaaaaaaadcdacbbabcdb""
T = ""ccbccaccabcddcadaabdbbdcbdccccc"""
618,mul,8,647612185019028,996,0,6666666666666,0,"{'ok': True, 'value': 647612185019028, 'stdout': '647612185019028\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08319616317749023}",1,Compute: 33825153 * 19145876
619,ilp_prod,16,146,105,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6x_7kyv_/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2339015007019043}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 40, 29, 7, 7, 28]
consumption (rows=resources) = [[6, 15, 9, 2, 11, 1], [15, 2, 1, 12, 12, 2], [9, 5, 9, 4, 9, 9], [11, 13, 15, 5, 11, 8]]
capacity = [41, 51, 35, 44]
upper_bounds = [3, 3, 3, 4, 3, 3]"
620,ilp_prod,16,146,163,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_3kzwd9z4/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.27767062187194824}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 47, 27, 5, 3, 26]
consumption (rows=resources) = [[7, 16, 15, 9, 7, 4], [5, 3, 10, 10, 14, 15], [16, 7, 10, 13, 12, 4], [8, 15, 14, 14, 10, 9]]
capacity = [49, 46, 32, 51]
upper_bounds = [3, 3, 3, 3, 3, 3]"
621,lcs,16,11,8,0,10,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07982969284057617}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcaaddcdcbcbdada""
T = ""bbaddccdccbacabdc"""
622,ilp_prod,4,30,60,0,3,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ed5aff402064479f815678ccf9dcdeab-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ed5aff402064479f815678ccf9dcdeab-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 60 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -60 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                60.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 60.0\nx_0 = 0.0\nx_1 = 0.0\nx_2 = 6.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15287280082702637}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 4, 4]
consumption (rows=resources) = [[2, 1, 2], [2, 1, 4], [4, 2, 3]]
capacity = [14, 15, 12]
upper_bounds = [3, 6, 3]"
623,sub,2,70,70,1,70,1,"{'ok': True, 'value': 70, 'stdout': '70\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0780332088470459}",1,Compute: 96 - 26
624,knap,4,31,16,0,4,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07739400863647461}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 6, 1]
V = [6, 16, 1, 9]
C = 6"
625,add,8,116607443,116607443,1,116607443,1,"{'ok': True, 'value': 116607443, 'stdout': '116607443\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0758662223815918}",1,Compute: 79630882 + 36976561
626,ilp_partition,16,0,1,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_6aahx25n/main.py"", line 12, in <module>\n    subset_sum[:total_sum//2 + 1] = subset_sum[:total_sum//2 + 1] | np.append(subset_sum[weight - 1:], False)\nValueError: operands could not be broadcast together with shapes (200,) (197,) \n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19661259651184082}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 27, 38, 42, 36, 28, 34, 25, 11, 5, 32, 15, 47, 10, 4, 39]"
627,ilp_prod,4,56,40,0,3,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7c15af69efc24a118eb714baf3f0d234-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7c15af69efc24a118eb714baf3f0d234-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 96 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -96 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                96.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 96.0\nx_0 = 0.0\nx_1 = 0.0\nx_2 = 8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14960741996765137}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 12]
consumption (rows=resources) = [[2, 1, 2], [2, 1, 4], [2, 2, 4]]
capacity = [16, 8, 16]
upper_bounds = [4, 8, 3]"
628,sub,32,26828243208380174144008007789345,26828243208770174143028907809345,0,26828243209379874144008007789345,0,"{'ok': True, 'value': 26828243208380174144008007789345, 'stdout': '26828243208380174144008007789345\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07619929313659668}",1,Compute: 65756257111567467009642360471488 - 38928013903187292865634352682143
629,lcs,32,14,10,0,26,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08526873588562012}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdadabbabadacacdddbbcdbbdadabcdd""
T = ""dcdcbaccccccabadbaaadacccccaccb"""
630,rod,32,1920,1055,0,1080,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_2h9ulg0m/main.py"", line 9, in <module>\n    res = cut_rod(P, N)\nNameError: name \'P\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07247018814086914}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [60, 81, 32, 80, 21, 83, 70, 20, 66, 29, 74, 29, 44, 74, 57, 20, 52, 94, 91, 3, 55, 35, 33, 12, 96, 77, 1, 19, 1, 53, 47, 51]"
631,knap,8,101,110,0,0,0,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07302522659301758}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 13, 16, 7, 4, 9, 1]
V = [12, 31, 4, 5, 2, 17, 10, 29]
C = 27"
632,knap,4,22,29,0,4,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07698464393615723}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 8, 3, 7]
V = [8, 1, 2, 14]
C = 10"
633,ilp_assign,16,77,105,0,105,0,"{'ok': True, 'value': 77, 'stdout': '77\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40680742263793945}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[18, 32, 32, 29, 25, 23, 37], [22, 23, 33, 11, 26, 5, 43], [33, 31, 21, 31, 5, 42, 5], [16, 41, 5, 23, 18, 11, 37], [13, 42, 46, 44, 44, 27, 5], [42, 39, 25, 35, 1, 13, 21], [11, 45, 4, 47, 6, 45, 26]]"
634,lcs,4,1,2,0,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09747171401977539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcc""
T = ""abb"""
635,ilp_assign,8,31,36,0,46,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.394395112991333}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 8, 3, 9, 24, 13, 16], [13, 22, 6, 10, 23, 10, 20], [9, 1, 7, 8, 8, 15, 1], [3, 13, 11, 3, 16, 1, 23], [12, 15, 22, 16, 2, 9, 19], [22, 9, 7, 6, 20, 18, 9], [9, 17, 3, 4, 14, 13, 17]]"
636,ilp_partition,32,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2042248249053955}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [56, 49, 93, 56, 62, 24, 93, 44, 18, 54, 36, 22, 81, 85, 47, 11, 85, 20, 60, 74, 51, 87, 10, 54]"
637,ilp_assign,32,106,185,0,110,0,"{'ok': True, 'value': 106, 'stdout': '106\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3651158809661865}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 62, 30, 68, 93, 3, 31], [1, 89, 52, 80, 86, 85, 60], [6, 68, 53, 30, 48, 80, 23], [26, 18, 16, 77, 77, 34, 61], [48, 48, 92, 38, 22, 75, 18], [18, 90, 31, 20, 41, 59, 11], [79, 28, 43, 95, 53, 26, 1]]"
638,mul,32,814985905282445440617461763248564183039219608225652674753657917,2,0,The result is too large to be represented as a number in this format.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_th9m0j3e/main.py"", line 6, in <module>\n    res = math.pow(num1, num2)\nOverflowError: math range error\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08693957328796387}",0,Compute: 12153616080367435003820553528323 * 67057071730194584623581641394879
639,ilp_prod,32,487,368,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_wkka4xrw/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23770833015441895}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 96, 11, 7, 89, 42]
consumption (rows=resources) = [[17, 26, 30, 23, 21, 1], [29, 13, 16, 7, 12, 5], [3, 10, 14, 7, 7, 19], [16, 30, 29, 24, 18, 18]]
capacity = [109, 110, 67, 116]
upper_bounds = [3, 3, 3, 4, 5, 3]"
640,ilp_assign,2,5,2,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41949987411499023}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4], [3, 2]]"
641,ilp_partition,2,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22140812873840332}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 2, 5, 2]"
642,mul,8,2292747044061320,1219819208401200,0,22893333302400,0,"{'ok': True, 'value': 2292747044061320, 'stdout': '2292747044061320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07733941078186035}",1,Compute: 93989665 * 24393608
643,ilp_assign,8,28,20,0,36,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3918282985687256}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 2, 16, 5, 23, 5, 23], [20, 12, 15, 11, 22, 2, 3], [7, 19, 22, 24, 24, 1, 3], [14, 9, 7, 4, 11, 8, 11], [16, 18, 13, 18, 7, 8, 13], [3, 16, 16, 1, 15, 7, 1], [7, 8, 10, 20, 17, 6, 3]]"
644,ilp_prod,32,436,The solution to this problem would be the maximum profit that can be obtained while satisfying the resource constraints.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_s9j78vkg/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24041247367858887}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [61, 56, 93, 20, 94, 64]
consumption (rows=resources) = [[4, 6, 8, 6, 2, 28], [21, 6, 1, 14, 8, 7], [28, 19, 17, 11, 31, 11], [28, 24, 16, 13, 28, 6]]
capacity = [73, 87, 103, 79]
upper_bounds = [3, 3, 4, 6, 3, 3]"
645,lcs,2,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08241963386535645}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""db""
T = ""ddd"""
646,mul,4,42277950,1535,0,41539350,0,"{'ok': True, 'value': 42277950, 'stdout': '42277950\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08511519432067871}",1,Compute: 5850 * 7227
647,rod,16,560,46,0,18,0,"{'ok': True, 'value': 560, 'stdout': '560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10629630088806152}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 22, 18, 37, 32, 13, 39, 29, 37, 13, 32, 5, 5, 18, 16, 46]"
648,knap,32,1871,1045,0,0,0,"{'ok': True, 'value': 2334, 'stdout': '2334\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4052307605743408}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [51, 20, 24, 27, 53, 62, 13, 20, 18, 8, 22, 5, 19, 41, 32, 38, 29, 49, 18, 19, 17, 5, 62, 35, 60, 46, 10, 18, 61, 61, 13, 22]
V = [125, 50, 110, 45, 31, 63, 22, 66, 115, 96, 10, 104, 111, 69, 126, 106, 16, 39, 83, 32, 87, 75, 82, 116, 37, 58, 90, 96, 76, 120, 72, 6]
C = 489"
649,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09541463851928711}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdd""
T = ""bcaad"""
650,mul,8,1653823131853480,30108428,0,1650000000000,0,"{'ok': True, 'value': 1653823131853480, 'stdout': '1653823131853480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07202267646789551}",1,Compute: 54928910 * 30108428
651,sub,32,11871581500226522215281870073737,11879163674022652221388176267873,0,118715815002265222153281850674737,0,"{'ok': True, 'value': 11871581500226522215281870073737, 'stdout': '11871581500226522215281870073737\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08403420448303223}",1,Compute: 78380651695710267048106987511678 - 66509070195483744832825117437941
652,sub,32,18028230993054031418424432820212,18028230993054031418424432921052,0,18028230993054031418424432820212,1,"{'ok': True, 'value': 18028230993054031418424432820212, 'stdout': '18028230993054031418424432820212\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0843057632446289}",1,Compute: 42204700996028862572816499738808 - 24176470002974831154392066918596
653,knap,2,6,10,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u02qi2np/main.py"", line 10, in <module>\n    prob += lpSum([V[i]*x[i] for i in range(3)])\n  File ""/tmp/cot_exec_u02qi2np/main.py"", line 10, in <listcomp>\n    prob += lpSum([V[i]*x[i] for i in range(3)])\nNameError: name \'V\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14375662803649902}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 3]
V = [6, 2, 4]
C = 6"
654,ilp_assign,32,80,185,0,4,0,"{'ok': True, 'value': 80, 'stdout': '80\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39809346199035645}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 41, 54, 13, 69, 86, 13], [48, 34, 36, 16, 53, 5, 1], [54, 47, 9, 79, 22, 7, 38], [12, 42, 14, 20, 23, 92, 7], [13, 36, 76, 36, 62, 8, 51], [28, 30, 63, 11, 9, 73, 75], [88, 28, 26, 46, 31, 55, 94]]"
655,ilp_prod,32,320,351,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_56vyupsh/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2346789836883545}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 62, 33, 9, 39, 88]
consumption (rows=resources) = [[23, 8, 18, 12, 9, 7], [26, 29, 4, 7, 12, 29], [31, 30, 26, 21, 11, 16], [4, 9, 8, 24, 11, 3]]
capacity = [78, 92, 106, 114]
upper_bounds = [3, 3, 4, 4, 7, 3]"
656,ilp_prod,32,304,1065,0,64,0,"{'ok': True, 'value': 130, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9eeb643b13a44604bf785bcc8d795563-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9eeb643b13a44604bf785bcc8d795563-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 143.448 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -130 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                130.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n130.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16279911994934082}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [65, 59, 76, 29, 74, 16]
consumption (rows=resources) = [[18, 21, 11, 11, 2, 19], [28, 13, 2, 10, 2, 22], [15, 25, 30, 24, 28, 9], [29, 14, 12, 8, 4, 18]]
capacity = [115, 122, 120, 64]
upper_bounds = [3, 4, 4, 5, 4, 3]"
657,sub,16,4409111978523318,4409111978523318,1,4409112978523318,0,"{'ok': True, 'value': 4409111978523318, 'stdout': '4409111978523318\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0840296745300293}",1,Compute: 7079655073254161 - 2670543094730843
658,ilp_assign,16,79,105,0,110,0,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39801645278930664}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[27, 24, 7, 23, 31, 39, 25], [43, 31, 14, 45, 34, 3, 46], [47, 26, 29, 14, 20, 32, 42], [33, 30, 24, 3, 25, 15, 2], [18, 47, 33, 11, 40, 25, 28], [23, 19, 7, 19, 18, 15, 27], [24, 23, 30, 31, 16, 32, 12]]"
659,mul,4,6044876,404,0,5985916,0,"{'ok': True, 'value': 6044876, 'stdout': '6044876\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08412551879882812}",1,Compute: 1798 * 3362
660,ilp_assign,16,48,105,0,114,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4158594608306885}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 1, 48, 21, 31, 38, 2], [38, 10, 46, 11, 32, 48, 42], [8, 38, 22, 35, 5, 18, 15], [33, 4, 46, 3, 48, 12, 5], [14, 32, 11, 11, 41, 7, 9], [36, 39, 7, 2, 38, 19, 40], [20, 14, 40, 13, 40, 8, 9]]"
661,rod,4,48,15,0,25,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07384347915649414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 3, 1, 12]"
662,knap,2,8,10,0,-1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07321763038635254}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 3, 1]
V = [1, 8, 7]
C = 3"
663,rod,32,960,1074,0,30,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xvqng62k/main.py"", line 9, in <module>\n    res = cut_rod(P, N)\nNameError: name \'P\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07179379463195801}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [30, 57, 69, 87, 71, 30, 45, 6, 73, 35, 56, 5, 21, 83, 6, 89, 9, 31, 53, 71, 50, 30, 10, 8, 28, 4, 20, 67, 3, 23, 38, 39]"
664,lcs,4,1,2,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07404804229736328}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daad""
T = ""bdc"""
665,sub,2,27,27,1,27,1,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07436299324035645}",1,Compute: 70 - 43
666,ilp_partition,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18375897407531738}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 3, 5]"
667,mul,8,2100088151813126,128293910,0,21186855559494166,0,"{'ok': True, 'value': 2100088151813126, 'stdout': '2100088151813126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09327864646911621}",1,Compute: 25658762 * 81846823
668,ilp_partition,32,0,10,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20166420936584473}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [57, 40, 87, 94, 16, 68, 62, 37, 43, 39, 23, 4, 83, 92, 3, 56, 57, 3, 6, 22, 59, 77, 88, 58]"
669,rod,32,1696,1084,0,659,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0622379779815674}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [53, 55, 69, 48, 9, 39, 56, 25, 11, 66, 59, 42, 37, 61, 37, 95, 34, 56, 34, 25, 62, 9, 13, 93, 62, 87, 59, 91, 54, 1, 49, 71]"
670,knap,16,312,141,0,100,0,"{'ok': True, 'value': -8011, 'stdout': '-8011.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4125995635986328}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [18, 31, 28, 14, 32, 29, 25, 1, 10, 24, 18, 7, 15, 2, 17, 12]
V = [40, 23, 26, 46, 37, 5, 11, 59, 8, 2, 12, 2, 29, 17, 4, 46]
C = 141"
671,rod,32,1344,1050,0,42,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.036130666732788}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [42, 62, 20, 43, 73, 2, 91, 25, 41, 83, 22, 57, 70, 9, 95, 28, 7, 60, 92, 9, 34, 53, 15, 89, 23, 58, 65, 78, 42, 45, 58, 86]"
672,sub,4,3866,3866,1,3866,1,"{'ok': True, 'value': 3866, 'stdout': '3866\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0907135009765625}",1,Compute: 5526 - 1660
673,knap,2,5,4,0,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0760657787322998}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 2]
V = [2, 1, 5]
C = 2"
674,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08362388610839844}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbd""
T = ""dacb"""
675,ilp_partition,2,2,1,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21706438064575195}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 2, 6]"
676,sub,32,18828436111485949721229179391560,18828436118385969721225129379286,0,18828436111485949721229179391560,1,"{'ok': True, 'value': 18828436111485949721229179391560, 'stdout': '18828436111485949721229179391560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08510947227478027}",1,Compute: 59851976296893640170402702701255 - 41023540185407690449173523309695
677,sub,32,75776116218864948590530289616793,75876116228865048388530292518693,0,75776116218864948589530289616793,0,"{'ok': True, 'value': 75776116218864948590530289616793, 'stdout': '75776116218864948590530289616793\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08059167861938477}",1,Compute: 98742274478609131657359252509331 - 22966158259744183066828962892538
678,mul,8,1581371786234008,15784365545444,0,157803833494888,0,"{'ok': True, 'value': 1581371786234008, 'stdout': '1581371786234008\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08163332939147949}",1,Compute: 25154014 * 62867572
679,ilp_assign,4,19,15,0,18,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4084315299987793}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 5, 12, 5], [7, 10, 9, 1], [8, 11, 9, 9], [4, 7, 5, 12]]"
680,sub,16,6626247628183973,6626247628183973,1,7873756954386973,0,"{'ok': True, 'value': 6626247628183973, 'stdout': '6626247628183973\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07700300216674805}",1,Compute: 7875005712471200 - 1248758084287227
681,add,8,101265381,1,0,101265381,1,"{'ok': True, 'value': 101265381, 'stdout': '101265381\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08115029335021973}",1,Compute: 82199273 + 19066108
682,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08059573173522949}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacdbabd""
T = ""cbbddcd"""
683,mul,32,2790348582876532690476087175924769543036434416950052299635299660,2800898773040098449167824151182242404147,0,27966080506852998686858446666444456644444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 2790348582876532690476087175924769543036434416950052299635299660, 'stdout': '2790348582876532690476087175924769543036434416950052299635299660\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0810098648071289}",1,Compute: 67008987730400984491678241498292 * 41641407778058299161616600905855
684,mul,8,6803672436767250,8,0,6801588394547500,0,"{'ok': True, 'value': 6803672436767250, 'stdout': '6803672436767250\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08628034591674805}",1,Compute: 72220647 * 94206750
685,ilp_assign,4,9,11,0,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41501665115356445}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 9, 9, 3], [10, 3, 11, 8], [2, 8, 4, 7], [3, 2, 1, 9]]"
686,ilp_prod,4,54,34,0,36,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/23f98b9dcaa7427e8351460b59039888-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/23f98b9dcaa7427e8351460b59039888-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1668236255645752}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6, 4]
consumption (rows=resources) = [[1, 1, 1], [3, 1, 2], [1, 1, 1]]
capacity = [12, 9, 14]
upper_bounds = [3, 9, 4]"
687,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08190464973449707}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""aa"""
688,knap,2,10,11,0,19,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0727074146270752}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 4]
V = [5, 5, 7]
C = 4"
689,ilp_partition,32,1,100,0,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21487760543823242}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [48, 67, 86, 5, 95, 89, 96, 20, 91, 3, 15, 16, 8, 54, 91, 29, 68, 57, 58, 92, 71, 62, 9, 19]"
690,sub,2,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08376765251159668}",1,Compute: 97 - 87
691,mul,16,27928749560039575725512029104940,204,0,275624942358309353386493421053660,0,"{'ok': True, 'value': 27928749560039575725512029104940, 'stdout': '27928749560039575725512029104940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08122920989990234}",1,Compute: 5124999021150860 * 5449513150105529
692,mul,32,2333967711787161856717446283794479209412302947513320027499478267,235945355454835789345945355454835789345945355454835789345945355454835789345945355454835789345945355454835789345945355454835789345945355454835789345945355454835789345945355454,0,235849892564354832115215556864666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 2333967711787161856717446283794479209412302947513320027499478267, 'stdout': '2333967711787161856717446283794479209412302947513320027499478267\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19593167304992676}",1,Compute: 54354778153901531227185248602049 * 42939513158874552507909837181883
693,ilp_prod,32,344,The solution to the problem is not provided in the question.,0,The answer will be the maximum profit that can be obtained subject to the resource constraints.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_fqj51_2n/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_fqj51_2n/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14301395416259766}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 57, 86, 45, 33, 90]
consumption (rows=resources) = [[24, 26, 1, 13, 29, 23], [10, 24, 29, 29, 23, 31], [10, 22, 23, 29, 12, 30], [31, 15, 1, 4, 28, 2]]
capacity = [80, 127, 92, 108]
upper_bounds = [3, 3, 4, 3, 3, 3]"
694,ilp_assign,16,59,10,0,105,0,"{'ok': True, 'value': 59, 'stdout': '59\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3944079875946045}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 36, 1, 16, 45, 3, 38], [43, 44, 28, 44, 36, 5, 22], [42, 25, 5, 21, 10, 9, 42], [37, 44, 3, 27, 38, 28, 41], [33, 42, 14, 42, 2, 10, 35], [29, 16, 18, 2, 39, 43, 22], [23, 20, 34, 40, 38, 16, 22]]"
695,ilp_partition,8,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18948650360107422}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 17, 2, 15, 6, 7, 16, 3]"
696,lcs,16,9,6,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07596349716186523}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbcdbdbacaddbda""
T = ""dbbbdabdbdcdaad"""
697,ilp_prod,32,268,1002,0,68,0,"{'ok': True, 'value': 170, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/505f8e068c7d47de91efc27427d603b2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/505f8e068c7d47de91efc27427d603b2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 25 COLUMNS\nAt line 164 RHS\nAt line 185 BOUNDS\nAt line 192 ENDATA\nProblem MODEL has 20 rows, 6 columns and 120 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 180.625 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -170 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                170.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n170.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15253663063049316}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [85, 88, 85, 14, 10, 49]
consumption (rows=resources) = [[16, 7, 29, 23, 1, 9], [12, 31, 11, 19, 1, 11], [10, 5, 18, 25, 17, 32], [19, 25, 31, 13, 23, 11]]
capacity = [81, 68, 89, 65]
upper_bounds = [3, 3, 3, 3, 3, 3]"
698,lcs,8,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08051609992980957}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbcdacc""
T = ""bbcbbcb"""
699,knap,4,29,24,0,86,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07449650764465332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 5, 5, 3]
V = [1, 16, 7, 13]
C = 9"
700,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07730841636657715}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""b"""
701,mul,32,4953518854300957742536116034490750927193505399160108441289802548,4987348498734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973489734897348973,0,49844688650837096485443218489526666446666446666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 4953518854300957742536116034490750927193505399160108441289802548, 'stdout': '4953518854300957742536116034490750927193505399160108441289802548\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08859133720397949}",1,Compute: 64094475188903392201877120992332 * 77284646448880747727784434823839
702,ilp_assign,16,100,105,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_13g7op7r/main.py"", line 4, in <module>\n    C = np.array([[26, 40, 19, 39, 16, 43, 31], ...])\nValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.40946125984191895}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 40, 19, 39, 16, 43, 31], [45, 39, 39, 11, 15, 39, 40], [24, 36, 12, 6, 48, 21, 36], [35, 22, 25, 27, 38, 30, 24], [2, 6, 5, 29, 42, 18, 13], [47, 34, 31, 40, 36, 32, 33], [42, 19, 34, 47, 14, 28, 5]]"
703,ilp_partition,4,2,1,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20313382148742676}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 6, 10, 3]"
704,ilp_assign,2,9,3,0,6,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3879051208496094}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3], [6, 6]]"
705,mul,8,1230973667309160,201948000,0,123354515635320,0,"{'ok': True, 'value': 1230973667309160, 'stdout': '1230973667309160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07277703285217285}",1,Compute: 65119374 * 18903340
706,mul,32,9122226024386732822500427067097112027950125800484069565829354545,The final answer will be the sum of all the results from the above steps.,0,9132160620196863647785629628646266264664444555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555,0,"{'ok': True, 'value': 9122226024386732822500427067097112027950125800484069565829354545, 'stdout': '9122226024386732822500427067097112027950125800484069565829354545\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08698773384094238}",1,Compute: 93282845237531598296210927270899 * 97791035438062291902182952954955
707,mul,2,684,684,1,702,0,"{'ok': True, 'value': 684, 'stdout': '684\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07308340072631836}",1,Compute: 18 * 38
708,ilp_prod,4,48,40,0,24,0,"{'ok': True, 'value': 4, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/822fb21b6a684d8aa286832050bc1004-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/822fb21b6a684d8aa286832050bc1004-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 4 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -4 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                4.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n4.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14877772331237793}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 12, 4]
consumption (rows=resources) = [[4, 3, 1], [2, 2, 4], [2, 1, 4]]
capacity = [12, 10, 16]
upper_bounds = [3, 4, 3]"
709,ilp_partition,4,3,1,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19624066352844238}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 9, 11, 3]"
710,rod,32,2304,1052,0,659,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.029290199279785}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [72, 37, 42, 80, 76, 30, 19, 56, 6, 61, 31, 16, 94, 62, 95, 35, 68, 34, 45, 56, 41, 19, 79, 79, 54, 22, 7, 71, 15, 69, 64, 46]"
711,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1147, 'stdout': '1147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.35333251953125}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [85, 26, 87, 83, 4, 22, 68, 71, 10, 54, 40, 88, 18, 4, 62, 70, 47, 75, 11, 69, 34, 21, 57, 41]"
712,ilp_partition,32,0,10,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21897459030151367}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [60, 25, 53, 38, 96, 40, 52, 50, 55, 17, 66, 55, 61, 14, 87, 2, 86, 50, 46, 4, 50, 76, 69, 58]"
713,ilp_partition,8,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19810152053833008}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 16, 17, 12, 16, 21, 1, 6]"
714,ilp_prod,16,111,The solution to this problem would be the maximum profit that can be obtained while satisfying all the resource constraints.,0,40,0,"{'ok': True, 'value': 111, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/dd1dfebfb428482ca365f69c54ea7416-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/dd1dfebfb428482ca365f69c54ea7416-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 133.976 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -111 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3.6666667\nCbc0013I At root node, 14 cuts changed objective from -130.29508 to -111.01003 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 15 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 25 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -111, took 13 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -130.295 to -111.01\nProbing was tried 4 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 15 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 25 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                111.00000000\nEnumerated nodes:               0\nTotal iterations:               13\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n111.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19625091552734375}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [31, 3, 3, 39, 40, 19]
consumption (rows=resources) = [[15, 11, 13, 14, 11, 9], [2, 4, 1, 11, 16, 15], [6, 8, 4, 3, 5, 9], [14, 1, 4, 16, 9, 10]]
capacity = [46, 39, 42, 40]
upper_bounds = [3, 4, 3, 3, 3, 3]"
715,lcs,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0757598876953125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""ccc"""
716,knap,8,87,110,0,103,0,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08012104034423828}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 16, 11, 8, 7, 3, 14]
V = [23, 5, 11, 12, 15, 6, 19, 25]
C = 32"
717,rod,4,32,15,0,1,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0750885009765625}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 9, 11, 3]"
718,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08640933036804199}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""bc"""
719,rod,32,1600,1055,0,200,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0298564434051514}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [50, 30, 22, 11, 5, 57, 54, 41, 67, 10, 63, 42, 11, 70, 9, 23, 53, 67, 16, 81, 16, 89, 61, 31, 71, 7, 39, 16, 60, 27, 20, 64]"
720,lcs,16,10,8,0,12,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08708810806274414}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdabbdddacbddba""
T = ""cddcbcddacacbadac"""
721,knap,16,413,103,0,100,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3790254592895508}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [27, 27, 2, 32, 15, 9, 6, 5, 5, 23, 5, 3, 6, 12, 20, 10]
V = [61, 31, 27, 30, 42, 47, 10, 33, 64, 15, 16, 16, 51, 32, 40, 24]
C = 103"
722,mul,2,1040,1040,1,1040,1,"{'ok': True, 'value': 1040, 'stdout': '1040\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07506799697875977}",1,Compute: 20 * 52
723,mul,2,1748,1748,1,1748,1,"{'ok': True, 'value': 1748, 'stdout': '1748\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0754079818725586}",1,Compute: 19 * 92
724,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08683133125305176}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdbadabb""
T = ""dabbabdd"""
725,ilp_partition,32,1,100,0,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08284807205200195}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [87, 94, 95, 76, 51, 3, 44, 38, 36, 62, 33, 69, 80, 36, 47, 87, 81, 6, 38, 90, 89, 71, 12, 24]"
726,add,8,89241069,1299111,0,89241069,1,"{'ok': True, 'value': 89241069, 'stdout': '89241069\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07114195823669434}",1,Compute: 61962264 + 27278805
727,rod,2,12,6,0,12,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_nxx1a3iy/main.py"", line 19, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_nxx1a3iy/main.py"", line 14, in rod_cutting\n    max_revenue[i] = max(max_revenue[i], P[j] + max_revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.06975769996643066}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 6]"
728,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 405, 'stdout': '405\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1899704933166504}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 25, 26, 47, 13, 8, 2, 48, 39, 46, 11, 7, 33, 45, 5, 32]"
729,add,2,127,127,1,127,1,"{'ok': True, 'value': 127, 'stdout': '127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0964043140411377}",1,Compute: 91 + 36
730,rod,4,48,14,0,31,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_7ierkfa5/main.py"", line 28, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_7ierkfa5/main.py"", line 16, in rod_cutting\n    rev = P[j] + revenue[i - j]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07188224792480469}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 2, 9, 8]"
731,mul,4,19994819,284334,0,19969599,0,"{'ok': True, 'value': 19994819, 'stdout': '19994819\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08351349830627441}",1,Compute: 2843 * 7033
732,sub,8,9805624,1030334,0,9805624,1,"{'ok': True, 'value': 9805624, 'stdout': '9805624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07274699211120605}",1,Compute: 45736447 - 35930823
733,lcs,8,4,5,0,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0759592056274414}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cacdcccb""
T = ""bdadcab"""
734,rod,8,152,30,0,6,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07487249374389648}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 15, 7, 15, 14, 19, 24, 19]"
735,ilp_prod,4,36,36,1,42,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d9fc335c8e3e468ba9ed22df705c2fb5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d9fc335c8e3e468ba9ed22df705c2fb5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1802213191986084}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 10, 6]
consumption (rows=resources) = [[2, 1, 2], [2, 4, 4], [1, 3, 3]]
capacity = [14, 13, 12]
upper_bounds = [6, 3, 3]"
736,ilp_prod,2,36,13,0,18,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/89599172fd204749b486af9d1492ad38-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/89599172fd204749b486af9d1492ad38-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16388559341430664}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7]
consumption (rows=resources) = [[1, 2], [1, 2]]
capacity = [10, 6]
upper_bounds = [6, 3]"
737,mul,32,1453715891273644821121459397264073739382321788685798814255815236,14307605852623249686440866000000,0,"The result of the multiplication is a very large number, which is beyond the range of standard integer types in Python. The result will be printed in scientific notation.",0,"{'ok': True, 'value': 1453715891273644821121459397264073739382321788685798814255815236, 'stdout': '1453715891273644821121459397264073739382321788685798814255815236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.072509765625}",1,Compute: 76627866097959795402377410971418 * 18971112798772687899181002741802
738,knap,8,85,103,0,66,0,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08113980293273926}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 1, 16, 9, 4, 5, 3, 12]
V = [21, 13, 14, 20, 16, 11, 12, 23]
C = 29"
739,rod,8,96,22,0,30,0,"{'ok': True, 'value': 96, 'stdout': '96\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08177495002746582}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 8, 20, 16, 21, 2, 14, 20]"
740,ilp_assign,2,6,7,0,7,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37443113327026367}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [3, 4]]"
741,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1920175552368164}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [42, 48, 43, 21, 26, 32, 19, 47, 36, 39, 34, 31, 41, 13, 28, 19]"
742,add,32,82194600264935978868797953449675,4,0,82194599964935978868807953450675,0,"{'ok': True, 'value': 82194600264935978868797953449675, 'stdout': '82194600264935978868797953449675\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08305573463439941}",1,Compute: 30034445491668798176580844460915 + 52160154773267180692217108988760
743,add,32,34225170211551912107928411462692,34225170211551912147928411462696,0,34225170211551912077928411462692,0,"{'ok': True, 'value': 34225170211551912107928411462692, 'stdout': '34225170211551912107928411462692\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07996869087219238}",1,Compute: 22828628755530805777653875225783 + 11396541456021106330274536236909
744,rod,8,184,24,0,1,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08154797554016113}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 6, 15, 2, 4, 17, 12, 11]"
745,ilp_prod,32,450,400,0,118,0,"{'ok': True, 'value': 450, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/267f7e6664d3473397d7e08e80ee047e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/267f7e6664d3473397d7e08e80ee047e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 484.503 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -418 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -450 found by DiveCoefficient after 5 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 2\nCbc0013I At root node, 2 cuts changed objective from -484.50323 to -450 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 5 row cuts average 2.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 5 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 3 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -450, took 5 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -484.503 to -450\nProbing was tried 4 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 4 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                450.00000000\nEnumerated nodes:               0\nTotal iterations:               5\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n450.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16177082061767578}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 32, 40, 86, 33, 9]
consumption (rows=resources) = [[7, 15, 26, 1, 30, 8], [15, 5, 2, 13, 25, 13], [27, 9, 26, 14, 31, 29], [3, 5, 10, 25, 19, 15]]
capacity = [110, 126, 99, 118]
upper_bounds = [3, 7, 3, 4, 3, 3]"
746,ilp_assign,4,11,0,0,9,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37005090713500977}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5, 3, 9], [3, 3, 2, 6], [4, 1, 1, 8], [8, 2, 10, 9]]"
747,lcs,16,11,6,0,10,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08046245574951172}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dadcdabbcdbccddc""
T = ""adacddbbabdbcdbc"""
748,ilp_partition,4,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20729970932006836}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 8, 7, 4]"
749,sub,8,2479590,2479590,1,2479590,1,"{'ok': True, 'value': 2479590, 'stdout': '2479590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07961392402648926}",1,Compute: 95582958 - 93103368
750,mul,8,1171651310016078,826406106101018,0,1168467264049458,0,"{'ok': True, 'value': 1171651310016078, 'stdout': '1171651310016078\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08221268653869629}",1,Compute: 82637953 * 14178126
751,ilp_prod,16,177,-1,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_9dsar9qv/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2585306167602539}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 29, 45, 40, 6, 42]
consumption (rows=resources) = [[7, 11, 8, 11, 9, 3], [3, 5, 11, 6, 12, 5], [1, 9, 11, 11, 5, 3], [11, 4, 10, 2, 3, 16]]
capacity = [33, 55, 38, 49]
upper_bounds = [4, 3, 3, 3, 3, 3]"
752,sub,2,73,73,1,73,1,"{'ok': True, 'value': 73, 'stdout': '73\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08816337585449219}",1,Compute: 87 - 14
753,rod,16,256,46,0,94,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_il3pnb5q/main.py"", line 13, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_il3pnb5q/main.py"", line 9, in rod_cutting\n    max_revenue = max(max_revenue, P[j] + revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07430744171142578}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [16, 1, 32, 4, 22, 43, 29, 10, 8, 7, 12, 41, 27, 9, 4, 27]"
754,mul,8,2137644121755150,2136649675883350,0,204545455115850,0,"{'ok': True, 'value': 2137644121755150, 'stdout': '2137644121755150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08812236785888672}",1,Compute: 49522950 * 43164717
755,ilp_partition,8,6,1,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19680452346801758}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 4, 18, 18, 2, 20, 21, 2]"
756,add,8,109312450,109312450,1,109312450,1,"{'ok': True, 'value': 109312450, 'stdout': '109312450\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07836270332336426}",1,Compute: 67978162 + 41334288
757,mul,2,5084,5012,0,5064,0,"{'ok': True, 'value': 5084, 'stdout': '5084\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.087371826171875}",1,Compute: 62 * 82
758,add,8,179978132,721191,0,179978132,1,"{'ok': True, 'value': 179978132, 'stdout': '179978132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08224201202392578}",1,Compute: 85174678 + 94803454
759,ilp_partition,16,1,1,1,3,0,"{'ok': True, 'value': 333, 'stdout': '333\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19794845581054688}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [42, 33, 32, 11, 33, 14, 1, 1, 2, 43, 36, 16, 4, 16, 30, 19]"
760,rod,16,496,46,0,22,0,"{'ok': True, 'value': 496, 'stdout': '496\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10147356986999512}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [31, 23, 16, 6, 40, 21, 31, 9, 22, 35, 43, 37, 13, 32, 9, 22]"
761,ilp_prod,2,29,35,0,16,0,"{'ok': True, 'value': 4, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d2b329b03d254bc88a25bebbed786fbe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d2b329b03d254bc88a25bebbed786fbe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 4 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -4 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                4.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n4.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17033863067626953}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 7]
consumption (rows=resources) = [[2, 1], [1, 2]]
capacity = [9, 8]
upper_bounds = [4, 4]"
762,ilp_prod,16,235,207,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_g0jpo_ha/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22602438926696777}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 47, 24, 10, 46, 35]
consumption (rows=resources) = [[4, 14, 3, 8, 4, 10], [3, 9, 9, 7, 15, 5], [9, 1, 16, 10, 4, 4], [10, 3, 7, 9, 8, 11]]
capacity = [50, 45, 38, 60]
upper_bounds = [4, 3, 3, 3, 3, 5]"
763,mul,2,4416,4416,1,4416,1,"{'ok': True, 'value': 4416, 'stdout': '4416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0836482048034668}",1,Compute: 46 * 96
764,ilp_prod,32,255,256,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_pu5e775i/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_pu5e775i/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15305233001708984}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [95, 3, 16, 66, 66, 65]
consumption (rows=resources) = [[26, 10, 9, 32, 32, 14], [20, 18, 29, 15, 2, 5], [12, 31, 25, 32, 7, 23], [21, 22, 28, 10, 22, 7]]
capacity = [73, 105, 69, 100]
upper_bounds = [3, 3, 3, 3, 3, 3]"
765,add,16,16050563752933689,1143939743321,0,16050563752933689,1,"{'ok': True, 'value': 16050563752933689, 'stdout': '16050563752933689\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08934783935546875}",1,Compute: 9296279397433216 + 6754284355500473
766,knap,32,1784,1004,0,1000,0,"{'ok': True, 'value': 2359, 'stdout': '2359.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3968658447265625}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [50, 6, 21, 10, 6, 11, 40, 24, 31, 34, 9, 1, 51, 10, 25, 20, 38, 42, 36, 42, 39, 32, 8, 34, 7, 10, 35, 13, 30, 35, 11, 24]
V = [85, 126, 86, 70, 71, 104, 115, 25, 108, 119, 46, 29, 92, 5, 65, 18, 39, 113, 56, 72, 63, 9, 117, 70, 49, 27, 108, 82, 113, 48, 103, 126]
C = 392"
767,add,32,180078631563147751817096724439791,180078631563147751816756724439791,0,179978631563147751817096724440041,0,"{'ok': True, 'value': 180078631563147751817096724439791, 'stdout': '180078631563147751817096724439791\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10101032257080078}",1,Compute: 93579238432098506950528074119520 + 86499393131049244866568650320271
768,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08758997917175293}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""aa"""
769,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08358407020568848}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""a"""
770,knap,16,498,1047,0,130,0,"{'ok': True, 'value': 668, 'stdout': '668.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3892974853515625}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 4, 30, 27, 16, 6, 23, 21, 16, 13, 30, 6, 7, 4, 11, 21]
V = [62, 56, 60, 19, 9, 39, 36, 57, 20, 18, 44, 37, 50, 62, 41, 58]
C = 130"
771,lcs,4,1,2,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07690072059631348}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcd""
T = ""daa"""
772,ilp_assign,2,6,3,0,3,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3733198642730713}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 5], [1, 5]]"
773,rod,16,592,46,0,65,0,"{'ok': True, 'value': 592, 'stdout': '592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11231279373168945}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [37, 32, 31, 2, 6, 33, 19, 35, 40, 38, 4, 18, 32, 29, 11, 46]"
774,add,32,150582295770017777908576768088721,1,0,150582295770017777908576768088721,1,"{'ok': True, 'value': 150582295770017777908576768088721, 'stdout': '150582295770017777908576768088721\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08303713798522949}",1,Compute: 63789758618580922576092270377352 + 86792537151436855332484497711369
775,ilp_prod,2,35,35,1,7,0,"{'ok': True, 'value': 20, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7485c3792ffb432ba76a8bf0207ed76c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7485c3792ffb432ba76a8bf0207ed76c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -20 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                20.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n20.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16064810752868652}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 5]
consumption (rows=resources) = [[2, 1], [1, 1]]
capacity = [8, 7]
upper_bounds = [4, 7]"
776,ilp_assign,8,31,76,0,4,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4021162986755371}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 22, 23, 14, 22, 16, 16], [11, 24, 19, 6, 8, 12, 11], [20, 6, 19, 14, 24, 13, 11], [11, 24, 18, 14, 5, 15, 3], [21, 23, 10, 13, 7, 1, 23], [17, 15, 8, 10, 1, 22, 1], [10, 20, 1, 2, 20, 8, 17]]"
777,rod,16,560,46,0,64,0,"{'ok': True, 'value': 560, 'stdout': '560\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11240339279174805}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [35, 29, 48, 47, 10, 34, 46, 24, 33, 34, 21, 37, 36, 25, 8, 9]"
778,mul,8,810368305546356,573386570,0,8074118333256,0,"{'ok': True, 'value': 810368305546356, 'stdout': '810368305546356\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0750875473022461}",1,Compute: 32069636 * 25269021
779,ilp_assign,8,49,34,0,56,0,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36845993995666504}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 6, 12, 18, 18, 9, 14], [4, 23, 16, 23, 5, 14, 20], [1, 12, 6, 19, 16, 11, 1], [1, 9, 7, 17, 19, 18, 6], [23, 13, 20, 16, 19, 16, 7], [8, 12, 16, 19, 12, 18, 14], [17, 10, 14, 9, 10, 16, 20]]"
780,sub,32,21848626917807993689450046030204,218516778212880447394604563033154,0,21848626917807993689450036030204,0,"{'ok': True, 'value': 21848626917807993689450046030204, 'stdout': '21848626917807993689450046030204\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08412933349609375}",1,Compute: 86084383599461364759712731851463 - 64235756681653371070262685821259
781,lcs,32,19,10,0,20,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08465027809143066}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcbccacdbadbdbdabdbccbdbbcaaaad""
T = ""cacabccbadbccdaddbbcabaabcacacbc"""
782,add,32,121803940891892801056088381861281,8111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,0,121803940891892801056088381861281,1,"{'ok': True, 'value': 121803940891892801056088381861281, 'stdout': '121803940891892801056088381861281\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07918524742126465}",1,Compute: 79183310565018927258208441290238 + 42620630326873873797879940571043
783,mul,8,2926791014411100,1957,0,2939626553660,0,"{'ok': True, 'value': 2926791014411100, 'stdout': '2926791014411100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09202980995178223}",1,Compute: 43045428 * 67993075
784,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08385062217712402}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdccbbdbdaadbbb""
T = ""ddbdaacccbdcbada"""
785,lcs,32,17,10,0,20,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0723576545715332}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbadcdaddbbabdbddadddccadbdaacc""
T = ""ccabacbbddcbcbdcbaadbaabcabcbadaa"""
786,ilp_assign,2,9,9,1,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3904874324798584}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 6], [3, 6]]"
787,sub,16,104286919567464,1042869205677464,0,104286929567746,0,"{'ok': True, 'value': 104286919567464, 'stdout': '104286919567464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07461953163146973}",1,Compute: 3090174088286413 - 2985887168718949
788,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07323956489562988}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccb""
T = ""dcc"""
789,ilp_assign,8,28,56,0,36,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3940608501434326}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 1, 10, 2, 1, 13, 18], [20, 18, 5, 16, 4, 3, 19], [2, 14, 7, 8, 8, 1, 3], [4, 22, 24, 7, 21, 7, 15], [12, 18, 11, 23, 12, 24, 22], [23, 20, 1, 14, 13, 13, 19], [16, 14, 11, 5, 1, 7, 7]]"
790,mul,4,9686151,127199,0,9993311,0,"{'ok': True, 'value': 9686151, 'stdout': '9686151\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0755772590637207}",1,Compute: 1679 * 5769
791,ilp_assign,32,57,116,0,119,0,"{'ok': True, 'value': 57, 'stdout': '57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.378650426864624}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 6, 90, 65, 93, 73, 12], [48, 7, 40, 24, 1, 57, 9], [14, 91, 5, 27, 5, 95, 54], [6, 23, 77, 45, 3, 13, 82], [58, 6, 86, 21, 72, 3, 93], [61, 47, 42, 68, 46, 73, 1], [41, 59, 89, 42, 41, 17, 72]]"
792,mul{'ok': True, 'value': 7559760173179580297838838065225, 'stdout': '7559760173179580297838838065225\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07465958595275879}",1,Compute: 1462954294693957 * 5167461622415925
793,mul,4,12169594,121224,0,12169194,0,"{'ok': True, 'value': 12169594, 'stdout': '12169594\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07537651062011719}",1,Compute: 1511 * 8054
794,mul,32,1226447861250472557191755503492001582470059452494187529700461051,118344200948854324718495394490336,0,1212345678901234567890123456789012345678901234567890123456789012345678901234567890,0,"{'ok': True, 'value': 1226447861250472557191755503492001582470059452494187529700461051, 'stdout': '1226447861250472557191755503492001582470059452494187529700461051\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07209491729736328}",1,Compute: 15716000049437716235924769724517 * 78038168579310493980436680737503
795,add,4,11516,11516,1,11516,1,"{'ok': True, 'value': 11516, 'stdout': '11516\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07227277755737305}",1,Compute: 3901 + 7615
796,ilp_prod,2,35,15,0,7,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0b2a9d5110f047faa933e727ad35d508-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0b2a9d5110f047faa933e727ad35d508-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.148543119430542}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[1, 2], [1, 3]]
capacity = [9, 7]
upper_bounds = [7, 3]"
797,ilp_assign,8,40,76,0,76,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38678574562072754}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 6, 3, 23, 11, 13, 16], [13, 20, 17, 13, 2, 19, 11], [5, 6, 9, 21, 23, 6, 19], [6, 15, 4, 20, 24, 12, 20], [20, 8, 18, 21, 20, 13, 11], [5, 19, 17, 20, 15, 17, 4], [13, 13, 10, 11, 15, 19, 22]]"
798,ilp_partition,32,1,10,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ssrakebo/main.py"", line 13, in <module>\n    sum_can = np.where(dp)[0][-1]\nIndexError: index -1 is out of bounds for axis 0 with size 0\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19965696334838867}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [96, 80, 96, 31, 5, 40, 62, 47, 96, 25, 26, 18, 55, 19, 52, 50, 81, 14, 89, 57, 68, 30, 30, 52]"
799,ilp_prod,2,20,18,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_a96bezl3/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 5*x[1]], ""Total Profit"")\nTypeError: lpSum() takes 1 positional argument but 2 were given\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1446380615234375}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5]
consumption (rows=resources) = [[3, 2], [1, 1]]
capacity = [9, 9]
upper_bounds = [3, 4]"
800,ilp_assign,16,72,105,0,110,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4041283130645752}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 16, 31, 1, 18, 21, 15], [12, 42, 21, 10, 42, 27, 21], [13, 5, 29, 32, 47, 27, 31], [4, 45, 18, 36, 42, 36, 14], [1, 3, 20, 11, 20, 47, 9], [46, 43, 34, 10, 36, 31, 33], [23, 14, 38, 33, 2, 9, 31]]"
801,ilp_partition,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21210598945617676}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 1, 7, 6]"
802,rod,4,16,11,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_75nj2jm1/main.py"", line 2, in <module>\n    dp = [0] * (N + 1)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07424569129943848}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 5, 7, 5]"
803,ilp_partition,16,1,10,0,40,0,"{'ok': True, 'value': 421, 'stdout': '421\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20112371444702148}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 20, 19, 40, 39, 8, 36, 25, 1, 42, 41, 7, 23, 47, 37, 14]"
804,ilp_partition,8,3,1,0,6,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18914461135864258}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 23, 1, 24, 24, 6, 14, 18]"
805,add,4,7731,8731,0,7731,1,"{'ok': True, 'value': 7731, 'stdout': '7731\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07588672637939453}",1,Compute: 1553 + 6178
806,rod,16,400,46,0,14,0,"{'ok': True, 'value': 400, 'stdout': '400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09170174598693848}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [25, 4, 11, 11, 37, 25, 3, 19, 4, 27, 22, 14, 28, 17, 41, 14]"
807,mul,16,54860832696402772969777591751332,7539010170063278,0,54748987806125588676845596,0,"{'ok': True, 'value': 54860832696402772969777591751332, 'stdout': '54860832696402772969777591751332\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.06937122344970703}",1,Compute: 7276927800714494 * 7539010170063278
808,sub,2,8,8,1,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08268046379089355}",1,Compute: 33 - 25
809,lcs,16,8,8,1,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08397221565246582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacabdbccddcaaac""
T = ""cdbdddccaccbccdcd"""
810,knap,32,1712,1063,0,1,0,"{'ok': True, 'value': 1712, 'stdout': '1712\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07822227478027344}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 23, 1, 61, 12, 49, 50, 22, 30, 4, 52, 13, 57, 24, 44, 1, 8, 59, 38, 50, 18, 43, 31, 39, 13, 46, 13, 44, 64, 17, 26, 61]
V = [102, 103, 100, 59, 28, 90, 101, 8, 20, 58, 88, 53, 77, 83, 28, 117, 77, 29, 87, 3, 32, 102, 10, 103, 68, 127, 100, 44, 121, 2, 40, 35]
C = 510"
811,mul,4,57695638,541688,0,57784338,0,"{'ok': True, 'value': 57695638, 'stdout': '57695638\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07266879081726074}",1,Compute: 6578 * 8771
812,add,32,65120168149278583473232376982216,,0,65119968149278583473232376982216,0,"{'ok': True, 'value': 65120168149278583473232376982216, 'stdout': '65120168149278583473232376982216\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08306527137756348}",1,Compute: 44893303088939680280589027667528 + 20226865060338903192643349314688
813,sub,16,2553836508226483,2553946508224503,0,2553836508226483,1,"{'ok': True, 'value': 2553836508226483, 'stdout': '2553836508226483\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08253359794616699}",1,Compute: 5034907449115511 - 2481070940889028
814,ilp_partition,2,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2071530818939209}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 5, 6, 3]"
815,ilp_partition,32,0,1,0,0,1,"{'ok': True, 'value': 1208, 'stdout': '1208\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19961905479431152}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 75, 61, 34, 44, 5, 57, 31, 38, 32, 93, 61, 62, 35, 91, 26, 74, 16, 94, 36, 89, 36, 2, 71]"
816,ilp_partition,4,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20333003997802734}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 6, 3, 7]"
817,knap,8,93,200,0,103,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08116364479064941}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 15, 5, 1, 14, 9, 16, 9]
V = [15, 19, 11, 16, 13, 32, 16, 16]
C = 35"
818,knap,8,120,110,0,110,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1044619083404541}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 7, 1, 2, 12, 3, 15, 10]
V = [20, 32, 25, 18, 15, 24, 7, 21]
C = 30"
819,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19752168655395508}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 21, 8, 15, 14, 4, 1, 17]"
820,knap,32,1494,1004,0,1,0,"{'ok': True, 'value': 1494, 'stdout': '1494\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08881521224975586}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [43, 7, 53, 41, 48, 28, 40, 52, 27, 46, 24, 54, 17, 43, 59, 3, 25, 22, 12, 45, 39, 23, 25, 15, 63, 3, 14, 40, 20, 62, 57, 53]
V = [4, 3, 16, 61, 64, 84, 62, 106, 50, 101, 95, 12, 45, 29, 62, 86, 5, 122, 11, 55, 19, 125, 83, 117, 38, 35, 27, 69, 60, 59, 102, 33]
C = 551"
821,mul,2,7938,7938,1,7938,1,"{'ok': True, 'value': 7938, 'stdout': '7938\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07928037643432617}",1,Compute: 81 * 98
822,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2025463581085205}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 23, 12, 22, 2, 22, 5, 13]"
823,ilp_partition,16,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18917131423950195}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 34, 48, 9, 29, 19, 34, 18, 48, 21, 42, 8, 31, 35, 30, 31]"
824,rod,32,1568,1055,0,132,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.034567356109619}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [49, 22, 31, 66, 68, 23, 59, 40, 91, 77, 70, 23, 95, 95, 88, 69, 58, 37, 5, 45, 60, 8, 55, 74, 43, 56, 37, 3, 45, 6, 15, 71]"
825,mul,8,3170866789639444,3170000000000,0,3173126059969644,0,"{'ok': True, 'value': 3170866789639444, 'stdout': '3170866789639444\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07430648803710938}",1,Compute: 90374732 * 35085767
826,ilp_prod,2,24,20,0,24,1,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/77b8fae523434abcb7b2be94df8b9710-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/77b8fae523434abcb7b2be94df8b9710-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1528182029724121}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 4]
consumption (rows=resources) = [[1, 3], [2, 3]]
capacity = [8, 7]
upper_bounds = [3, 3]"
827,ilp_assign,32,133,185,0,185,0,"{'ok': True, 'value': 133, 'stdout': '133\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4083130359649658}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[81, 15, 62, 20, 39, 55, 43], [12, 2, 53, 37, 13, 18, 60], [15, 17, 67, 96, 83, 15, 87], [21, 6, 17, 67, 36, 37, 83], [29, 68, 34, 95, 93, 85, 43], [47, 49, 36, 10, 75, 20, 84], [20, 10, 64, 36, 50, 42, 59]]"
828,sub,16,1622562821764032,1622562821764612,0,1622562821764032,1,"{'ok': True, 'value': 1622562821764032, 'stdout': '1622562821764032\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07051277160644531}",1,Compute: 9666410333265853 - 8043847511501821
829,ilp_prod,2,18,24,0,7,0,"{'ok': True, 'value': 18, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/71d31872dff548449850545dfd1d3cfe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/71d31872dff548449850545dfd1d3cfe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n18.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15063261985778809}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 6]
consumption (rows=resources) = [[2, 2], [1, 1]]
capacity = [6, 7]
upper_bounds = [3, 3]"
830,add,32,44587243210467403323812567657822,44593619330467403323812567667822,0,44587243210467403323812567657822,1,"{'ok': True, 'value': 44587243210467403323812567657822, 'stdout': '44587243210467403323812567657822\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.084930419921875}",1,Compute: 19990433547153397162133679434847 + 24596809663314006161678888222975
831,sub,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07332468032836914}",1,Compute: 28 - 22
832,knap,2,16,16,1,1,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08254528045654297}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 5]
V = [9, 7, 9]
C = 4"
833,rod,8,176,24,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_n3su69yd/main.py"", line 9, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08273863792419434}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [22, 15, 2, 18, 11, 7, 11, 6]"
834,ilp_assign,4,20,28,0,18,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42199015617370605}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 10, 9, 4], [1, 11, 9, 4], [8, 9, 11, 8], [10, 10, 6, 6]]"
835,lcs,32,18,10,0,26,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0864715576171875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdacabdaddcabcbddcbcabbdcbdadbab""
T = ""acdcccdbcabccdbcdcddcccbaaccccdb"""
836,ilp_partition,16,0,1,0,2,0,"{'ok': True, 'value': 332, 'stdout': '332\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19089579582214355}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 38, 19, 42, 37, 19, 40, 16, 10, 34, 21, 14, 2, 9, 15, 15]"
837,rod,16,528,500,0,-1,0,"{'ok': True, 'value': 528, 'stdout': '528\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09683084487915039}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [33, 7, 40, 23, 3, 22, 39, 6, 2, 22, 19, 17, 31, 12, 12, 33]"
838,ilp_assign,32,87,109,0,130,0,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37693309783935547}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[80, 61, 78, 63, 20, 75, 75], [96, 50, 59, 49, 2, 16, 65], [96, 15, 35, 38, 32, 17, 44], [51, 11, 88, 73, 73, 32, 27], [1, 17, 82, 1, 37, 34, 34], [34, 29, 91, 86, 82, 87, 1], [3, 23, 89, 52, 24, 8, 43]]"
839,knap,2,6,10,0,11,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07702398300170898}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 5]
V = [2, 3, 6]
C = 5"
840,ilp_prod,16,90,167,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_zpt19ln0/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24127602577209473}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [20, 25, 8, 5, 28, 35]
consumption (rows=resources) = [[16, 15, 7, 3, 16, 4], [9, 15, 8, 14, 12, 13], [9, 2, 4, 11, 5, 6], [2, 3, 8, 8, 16, 16]]
capacity = [64, 38, 54, 38]
upper_bounds = [4, 3, 4, 3, 3, 3]"
841,ilp_assign,16,38,105,0,105,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4040341377258301}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 41, 33, 8, 29, 3, 39], [35, 39, 24, 43, 47, 15, 20], [11, 32, 10, 1, 13, 15, 14], [27, 9, 23, 36, 2, 7, 13], [40, 38, 3, 21, 36, 25, 19], [46, 1, 45, 40, 28, 30, 5], [8, 37, 8, 2, 37, 3, 29]]"
842,lcs,16,9,7,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07475805282592773}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaaabdbcaaccddbd""
T = ""aaadcacaabbbada"""
843,ilp_prod,8,76,154,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_8o27avy4/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_8o27avy4/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1523580551147461}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 22, 6, 10]
consumption (rows=resources) = [[5, 8, 3, 5], [3, 5, 1, 1], [4, 6, 6, 2], [8, 1, 5, 3]]
capacity = [31, 22, 23, 26]
upper_bounds = [3, 3, 3, 6]"
844,sub,16,1549603517976489,1549556080000000,0,1549596085976493,0,"{'ok': True, 'value': 1549603517976489, 'stdout': '1549603517976489\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834803581237793}",1,Compute: 2584856138042603 - 1035252620066114
845,rod,16,344,46,0,64,0,"{'ok': True, 'value': 344, 'stdout': '344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10668349266052246}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [21, 43, 15, 13, 41, 29, 19, 31, 33, 27, 16, 20, 16, 25, 6, 11]"
846,ilp_partition,16,0,1,0,12,0,"{'ok': True, 'value': 296, 'stdout': '296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20138072967529297}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [18, 33, 3, 37, 1, 1, 4, 21, 2, 2, 28, 25, 29, 28, 26, 38]"
847,knap,8,110,110,1,103,0,"{'ok': True, 'value': 110, 'stdout': '110\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08290958404541016}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 12, 1, 3, 15, 16, 1, 8]
V = [4, 7, 25, 7, 27, 9, 31, 20]
C = 28"
848,sub,8,21086707,21086707,1,21086707,1,"{'ok': True, 'value': 21086707, 'stdout': '21086707\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08173799514770508}",1,Compute: 45549276 - 24462569
849,rod,2,2,1,0,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_h17yzs8u/main.py"", line 11, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_h17yzs8u/main.py"", line 8, in rod_cutting\n    max_revenue[i] = max(max_revenue[i], P[j] + max_revenue[i-j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08943843841552734}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
850,ilp_prod,4,54,41,0,39,0,"{'ok': True, 'value': 27, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6b43ce92770f4e4388a839520dee5ad8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6b43ce92770f4e4388a839520dee5ad8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 31.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -27 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                27.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n27.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15400910377502441}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 5, 12]
consumption (rows=resources) = [[4, 3, 2], [1, 2, 3], [3, 1, 1]]
capacity = [14, 12, 13]
upper_bounds = [3, 4, 4]"
851,ilp_prod,2,49,14,0,21,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9a0720f3628049b48224454c7bcc12bb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9a0720f3628049b48224454c7bcc12bb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16421890258789062}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[1, 1], [2, 1]]
capacity = [7, 10]
upper_bounds = [5, 7]"
852,lcs,4,1,3,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08441281318664551}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dccd""
T = ""babca"""
853,knap,4,16,13,0,20,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08183693885803223}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 7, 5, 5]
V = [4, 12, 3, 1]
C = 9"
854,add,8,80954009,9118151111,0,80953989,0,"{'ok': True, 'value': 80954009, 'stdout': '80954009\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0826566219329834}",1,Compute: 47981377 + 32972632
855,ilp_assign,16,39,105,0,110,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lvzgzr63/main.py"", line 4, in <module>\n    C = np.array([[37, 4, 3, 22, 5, 34, 37], ...])\nValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3710787296295166}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 4, 3, 22, 5, 34, 37], [16, 8, 44, 22, 25, 47, 43], [16, 37, 26, 4, 1, 1, 23], [1, 25, 35, 3, 28, 11, 16], [47, 2, 14, 8, 8, 3, 21], [22, 38, 20, 6, 25, 12, 2], [42, 46, 16, 27, 22, 21, 19]]"
856,mul,2,2592,2592,1,2592,1,"{'ok': True, 'value': 2592, 'stdout': '2592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08311676979064941}",1,Compute: 48 * 54
857,mul,16,4792510611791485087871325097320,4842265202257305886526884,0,4833344403978438646666668,0,"{'ok': True, 'value': 4792510611791485087871325097320, 'stdout': '4792510611791485087871325097320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08876371383666992}",1,Compute: 2014909716426477 * 2378523748593160
858,sub,16,5975536867847814,-2114800480741006,0,5975536867847814,1,"{'ok': True, 'value': 5975536867847814, 'stdout': '5975536867847814\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08147311210632324}",1,Compute: 8090337348588820 - 2114800480741006
859,mul,2,1258,1258,1,1258,1,"{'ok': True, 'value': 1258, 'stdout': '1258\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07705235481262207}",1,Compute: 17 * 74
860,ilp_assign,8,30,56,0,41,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_2tlddxs0/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3736155033111572}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 10, 1, 24, 1, 12, 23], [4, 13, 12, 20, 16, 16, 23], [12, 18, 5, 6, 1, 13, 19], [8, 4, 5, 7, 10, 9, 15], [20, 24, 9, 8, 10, 2, 17], [5, 8, 20, 12, 11, 22, 19], [7, 16, 4, 21, 16, 9, 7]]"
861,mul,16,72772143750944783310051934794390,7,0,7188628238579575579735546636656361617,0,"{'ok': True, 'value': 72772143750944783310051934794390, 'stdout': '72772143750944783310051934794390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08561396598815918}",1,Compute: 9172777658151730 * 7933490428199043
862,add,2,101,101,1,101,1,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08153748512268066}",1,Compute: 74 + 27
863,ilp_partition,32,0,104,0,1,0,"{'ok': True, 'value': 1144, 'stdout': '1144\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20065593719482422}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [47, 58, 56, 41, 14, 55, 60, 50, 90, 45, 62, 39, 10, 87, 6, 84, 46, 48, 53, 20, 41, 79, 33, 20]"
864,ilp_assign,2,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3692951202392578}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3], [2, 2]]"
865,knap,16,345,1043,0,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3785386085510254}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 24, 27, 22, 5, 20, 9, 24, 16, 32, 9, 18, 6, 10, 21, 6]
V = [36, 6, 2, 60, 10, 8, 45, 5, 53, 35, 4, 61, 30, 11, 2, 25]
C = 135"
866,ilp_prod,8,52,105,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_2n1dho0n/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_2n1dho0n/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14637494087219238}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 21, 5, 19]
consumption (rows=resources) = [[4, 8, 3, 8], [6, 4, 3, 2], [5, 8, 1, 7], [4, 7, 8, 3]]
capacity = [28, 17, 16, 32]
upper_bounds = [3, 3, 4, 3]"
867,lcs,8,4,5,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09979510307312012}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcbadbdb""
T = ""cddddcb"""
868,sub,2,18,18,1,18,1,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07549047470092773}",1,Compute: 52 - 34
869,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08340859413146973}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""aa"""
870,knap,8,86,155,0,66,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08434510231018066}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 1, 16, 14, 8, 2, 10, 7]
V = [14, 8, 26, 8, 4, 17, 21, 22]
C = 35"
871,rod,32,1072,86,0,94,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ooco4gyj/main.py"", line 9, in <module>\n    res = cut_rod(P, N)\nNameError: name \'P\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07508015632629395}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [18, 67, 57, 76, 78, 71, 34, 43, 16, 21, 12, 50, 30, 56, 22, 62, 82, 93, 20, 14, 47, 17, 3, 86, 94, 85, 9, 74, 74, 43, 58, 18]"
872,ilp_prod,2,12,20,0,18,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d8c5cdd0a97546da9b7b3bd58fbb4531-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d8c5cdd0a97546da9b7b3bd58fbb4531-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 14 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15421581268310547}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[2, 2], [3, 3]]
capacity = [9, 7]
upper_bounds = [3, 3]"
873,ilp_prod,32,276,1008,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_u3p_0flg/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.25825071334838867}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 48, 24, 22, 74, 40]
consumption (rows=resources) = [[25, 5, 20, 19, 22, 6], [4, 4, 28, 17, 8, 21], [9, 24, 2, 2, 22, 15], [8, 23, 14, 24, 12, 13]]
capacity = [76, 95, 104, 74]
upper_bounds = [3, 3, 3, 3, 3, 4]"
874,lcs,4,1,3,0,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07488059997558594}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cdda""
T = ""bbaab"""
875,ilp_assign,16,88,100,0,114,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3847804069519043}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 22, 6, 40, 9, 10, 45], [18, 21, 9, 27, 21, 7, 48], [30, 25, 10, 34, 24, 33, 13], [47, 32, 26, 14, 44, 11, 22], [39, 48, 47, 36, 32, 37, 20], [6, 12, 16, 43, 21, 15, 1], [16, 34, 8, 46, 47, 37, 33]]"
876,rod,2,6,6,1,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_m_dt_l4d/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0785527229309082}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 6]"
877,ilp_assign,32,143,89,0,114,0,"{'ok': True, 'value': 143, 'stdout': '143\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3887662887573242}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[81, 60, 61, 7, 45, 90, 2], [18, 15, 94, 1, 62, 8, 64], [51, 74, 70, 59, 87, 66, 53], [46, 9, 86, 75, 90, 48, 34], [45, 63, 41, 49, 22, 58, 63], [18, 51, 64, 85, 84, 18, 30], [67, 90, 91, 82, 21, 81, 36]]"
878,knap,4,20,14,0,0,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07432889938354492}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 8, 1, 3]
V = [12, 7, 8, 5]
C = 9"
879,ilp_prod,32,336,1440,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__evmj8kc/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22386932373046875}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 48, 48, 48, 44, 37]
consumption (rows=resources) = [[24, 9, 18, 10, 11, 8], [21, 24, 5, 26, 10, 29], [20, 5, 12, 21, 22, 26], [17, 31, 3, 8, 25, 22]]
capacity = [120, 80, 120, 95]
upper_bounds = [3, 3, 6, 3, 3, 3]"
880,ilp_assign,2,7,2,0,3,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3799741268157959}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [6, 6]]"
881,knap,4,15,16,0,16,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08353066444396973}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5, 2]
V = [6, 5, 15, 1]
C = 6"
882,add,2,168,168,1,168,1,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08256864547729492}",1,Compute: 73 + 95
883,ilp_prod,16,115,155,0,The answer will be printed after running the code.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6prn7m9i/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_6prn7m9i/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15166878700256348}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 23, 17, 16, 19, 40]
consumption (rows=resources) = [[13, 12, 8, 8, 4, 5], [10, 15, 12, 12, 15, 8], [12, 11, 13, 1, 5, 13], [15, 12, 16, 10, 3, 4]]
capacity = [54, 43, 35, 54]
upper_bounds = [3, 3, 3, 3, 3, 3]"
884,lcs,32,19,10,0,20,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09975385665893555}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcdcdbcabacbddbadbbadbdccbbcdab""
T = ""cdddcddddddcdddbaccbbdabacbdbbcca"""
885,add,8,62843825,9,0,62843825,1,"{'ok': True, 'value': 62843825, 'stdout': '62843825\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08303546905517578}",1,Compute: 36847500 + 25996325
886,ilp_prod,8,109,105,0,The answer will be the maximum profit that can be achieved given the constraints.,0,"{'ok': True, 'value': 109, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ded1a6c9e57a4519baa6f79b6433631b-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ded1a6c9e57a4519baa6f79b6433631b-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 110.167 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -106 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -109 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 3\nCbc0013I At root node, 1 cuts changed objective from -110.02941 to -109 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -109, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -110.029 to -109\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                109.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n109.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16306281089782715}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 20, 19, 8]
consumption (rows=resources) = [[1, 2, 1, 8], [3, 4, 6, 1], [2, 5, 3, 5], [6, 7, 2, 7]]
capacity = [16, 25, 25, 29]
upper_bounds = [4, 4, 4, 3]"
887,lcs,4,2,2,1,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09280014038085938}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcd""
T = ""adad"""
888,knap,4,26,26,1,4,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09092593193054199}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 4, 1, 7]
V = [6, 13, 13, 7]
C = 10"
889,lcs,8,2,5,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08245253562927246}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaaccac""
T = ""bcaaddb"""
890,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0835261344909668}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""ca"""
891,ilp_partition,8,0,1,0,-1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18744850158691406}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 4, 9, 20, 14, 5, 23, 10]"
892,ilp_partition,32,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20171713829040527}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [68, 11, 32, 30, 71, 29, 42, 34, 9, 16, 7, 71, 41, 28, 14, 23, 70, 51, 8, 70, 60, 4, 84, 14]"
893,lcs,2,1,1,1,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08007240295410156}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""bca"""
894,mul,2,1590,3,0,1590,1,"{'ok': True, 'value': 1590, 'stdout': '1590\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07439923286437988}",1,Compute: 30 * 53
895,knap,4,29,22,0,25,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08720755577087402}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 5, 4]
V = [12, 15, 3, 14]
C = 7"
896,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08267784118652344}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dd""
T = ""ba"""
897,mul{'ok': True, 'value': 16468751300479775440899397295862, 'stdout': '16468751300479775440899397295862\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07761192321777344}",1,Compute: 4286363767133838 * 3842126379183149
898,ilp_partition,4,2,1,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19721031188964844}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 9, 1, 8]"
899,ilp_assign,32,170,205,0,205,0,"{'ok': True, 'value': 170, 'stdout': '170\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3612942695617676}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[87, 33, 84, 29, 6, 19, 54], [12, 55, 72, 84, 13, 44, 94], [50, 46, 91, 35, 91, 16, 66], [80, 48, 91, 79, 86, 33, 68], [35, 94, 65, 93, 20, 5, 80], [58, 59, 58, 75, 1, 46, 55], [52, 45, 89, 29, 89, 3, 6]]"
900,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09224796295166016}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacbdaabbdbbadbb""
T = ""badaaadbdabcdcbc"""
901,sub,2,31,31,1,31,1,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08652687072753906}",1,Compute: 76 - 45
902,ilp_partition,16,1,1,1,127,0,"{'ok': True, 'value': 329, 'stdout': '329\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2187025547027588}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 47, 15, 41, 3, 7, 45, 21, 4, 26, 19, 20, 29, 19, 16, 2]"
903,sub,8,3421717,3421717,1,3421717,1,"{'ok': True, 'value': 3421717, 'stdout': '3421717\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08615469932556152}",1,Compute: 29784117 - 26362400
904,add,4,14506,14506,1,14506,1,"{'ok': True, 'value': 14506, 'stdout': '14506\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08336377143859863}",1,Compute: 6074 + 8432
905,add,2,87,87,1,87,1,"{'ok': True, 'value': 87, 'stdout': '87\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08324313163757324}",1,Compute: 40 + 47
906,rod,16,464,46,0,3,0,"{'ok': True, 'value': 464, 'stdout': '464\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10290312767028809}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [29, 34, 14, 45, 8, 23, 19, 13, 16, 11, 7, 27, 23, 38, 30, 20]"
907,rod,4,40,15,0,19,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_kjp1295r/main.py"", line 28, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_kjp1295r/main.py"", line 16, in rod_cutting\n    rev = P[j] + revenue[i - j]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09472036361694336}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 11, 3, 9]"
908,sub,16,4788391908520852,4788391908520852,1,4788391908520852,1,"{'ok': True, 'value': 4788391908520852, 'stdout': '4788391908520852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08138847351074219}",1,Compute: 9952976089586792 - 5164584181065940
909,add,4,5363,5363,1,5363,1,"{'ok': True, 'value': 5363, 'stdout': '5363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07381105422973633}",1,Compute: 1372 + 3991
910,knap,4,21,23,0,0,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07219290733337402}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 2, 7]
V = [8, 2, 7, 14]
C = 9"
911,mul,32,1926274467624756388558289110224481937945739740996372607872478856,2,0,1960852849648608495743494884977866698705067536780681894762782936,0,"{'ok': True, 'value': 1926274467624756388558289110224481937945739740996372607872478856, 'stdout': '1926274467624756388558289110224481937945739740996372607872478856\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08091211318969727}",1,Compute: 66698705067536780681894762782936 * 28880237864802294105143179043971
912,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08936429023742676}",1,Compute: 84 - 63
913,ilp_assign,2,5,5,1,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37509894371032715}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 3], [2, 6]]"
914,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08374834060668945}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""b"""
915,add,8,132999785,4825011,0,133000000,0,"{'ok': True, 'value': 132999785, 'stdout': '132999785\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08047080039978027}",1,Compute: 89973983 + 43025802
916,mul,4,59975096,5368594,0,59689216,0,"{'ok': True, 'value': 59975096, 'stdout': '59975096\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08164358139038086}",1,Compute: 6859 * 8744
917,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07730770111083984}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""d"""
918,mul,2,1185,1185,1,1185,1,"{'ok': True, 'value': 1185, 'stdout': '1185\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07956695556640625}",1,Compute: 15 * 79
919,add,2,131,131,1,131,1,"{'ok': True, 'value': 131, 'stdout': '131\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0746762752532959}",1,Compute: 85 + 46
920,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0731348991394043}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbabcaaaaccddcb""
T = ""abbbbcbbcabbbdcc"""
921,add,4,11125,11125,1,11125,1,"{'ok': True, 'value': 11125, 'stdout': '11125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0747983455657959}",1,Compute: 8807 + 2318
922,ilp_assign,2,7,3,0,5,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43536853790283203}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 1], [6, 4]]"
923,ilp_partition,8,2,1,0,12,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_swf77h0h/main.py"", line 11, in <module>\n    subset_sum[weight:] = subset_sum[weight:] | (subset_sum[weight-1:])\nValueError: operands could not be broadcast together with shapes (30,) (31,) \n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2721073627471924}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 16, 21, 11, 6, 1, 9, 5]"
924,add,8,106136218,78774009,0,106136218,1,"{'ok': True, 'value': 106136218, 'stdout': '106136218\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09105849266052246}",1,Compute: 71434687 + 34701531
925,knap,32,1454,1049,0,2,0,"{'ok': True, 'value': 1454, 'stdout': '1454\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08930802345275879}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 55, 29, 23, 61, 21, 21, 2, 38, 53, 56, 53, 20, 3, 1, 7, 59, 34, 15, 14, 12, 61, 17, 21, 55, 11, 59, 22, 42, 60, 4, 19]
V = [59, 29, 76, 47, 49, 72, 11, 45, 68, 45, 68, 126, 52, 57, 47, 20, 48, 117, 86, 26, 60, 66, 112, 2, 13, 67, 88, 39, 63, 79, 71, 40]
C = 480"
926,sub,4,1986,2086,0,1986,1,"{'ok': True, 'value': 1986, 'stdout': '1986\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07556629180908203}",1,Compute: 3527 - 1541
927,sub,8,46643336,46643336,1,46643336,1,"{'ok': True, 'value': 46643336, 'stdout': '46643336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07747197151184082}",1,Compute: 86741182 - 40097846
928,knap,4,24,24,1,27,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08387875556945801}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 7, 7, 7]
V = [10, 8, 7, 14]
C = 13"
929,knap,2,8,9,0,-1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08548545837402344}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 1]
V = [1, 5, 7]
C = 2"
930,mul,4,21988681,2759,0,22068991,0,"{'ok': True, 'value': 21988681, 'stdout': '21988681\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07968020439147949}",1,Compute: 8093 * 2717
931,knap,2,4,4,1,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08591365814208984}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 4]
V = [3, 1, 1]
C = 3"
932,rod,2,10,5,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_irmky5u2/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07406187057495117}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
933,ilp_partition,2,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.24792027473449707}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 3, 2, 3]"
934,knap,2,8,5,0,4,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07231974601745605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 4]
V = [8, 2, 1]
C = 4"
935,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 435, 'stdout': '435\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20778656005859375}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [48, 30, 13, 39, 47, 14, 24, 20, 25, 48, 29, 1, 1, 33, 48, 15]"
936,mul,16,37391813832013674360503008869168,37036387186875444556805654444665555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555,0,37386253528853955584444444444,0,"{'ok': True, 'value': 37391813832013674360503008869168, 'stdout': '37391813832013674360503008869168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07641243934631348}",1,Compute: 5868733769086232 * 6371359700959074
937,sub,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0762166976928711}",1,Compute: 90 - 85
938,lcs,8,3,4,0,5,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09981036186218262}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abacbbdd""
T = ""bdcbaccc"""
939,add,32,143325506953214159637991430898380,143335512211283158634891410897390,0,143325506953214159638091430908380,0,"{'ok': True, 'value': 143325506953214159637991430898380, 'stdout': '143325506953214159637991430898380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07341289520263672}",1,Compute: 45806823801097554406100373374490 + 97518683152116605231891057523890
940,add,4,10702,17327,0,10702,1,"{'ok': True, 'value': 10702, 'stdout': '10702\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07605242729187012}",1,Compute: 6535 + 4167
941,ilp_prod,2,16,40,0,The answer will be printed when the code is executed.,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a8a17c8d0d2f471cb38f1b68dc330939-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a8a17c8d0d2f471cb38f1b68dc330939-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14890408515930176}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 8]
consumption (rows=resources) = [[1, 3], [3, 3]]
capacity = [9, 6]
upper_bounds = [3, 3]"
942,knap,16,322,153,0,100,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38741135597229004}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 17, 25, 27, 26, 14, 20, 2, 15, 11, 30, 23, 31, 14, 26, 22]
V = [13, 27, 8, 8, 58, 30, 13, 43, 22, 19, 63, 33, 47, 2, 15, 31]
C = 153"
943,ilp_assign,16,44,105,0,110,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39426255226135254}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[32, 12, 6, 35, 3, 44, 20], [46, 33, 37, 14, 30, 29, 36], [36, 9, 2, 34, 48, 20, 12], [8, 27, 29, 28, 5, 8, 20], [9, 5, 47, 41, 13, 40, 19], [11, 3, 40, 46, 17, 9, 29], [13, 46, 16, 41, 46, 39, 5]]"
944,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22335290908813477}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 40, 11, 13, 18, 18, 48, 11, 18, 18, 15, 22, 48, 43, 40, 33]"
945,ilp_prod,32,365,The solution to this problem would be the values of x_j that maximize the total profit while satisfying all the constraints. This would be found by using a linear programming solver.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0pe8vsxl/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_0pe8vsxl/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1670083999633789}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 56, 29, 79, 24, 49]
consumption (rows=resources) = [[6, 3, 28, 1, 15, 31], [26, 2, 18, 14, 6, 21], [11, 27, 3, 20, 9, 26], [12, 14, 20, 16, 25, 8]]
capacity = [118, 101, 128, 73]
upper_bounds = [3, 4, 3, 4, 3, 3]"
946,ilp_partition,4,5,1,0,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2589406967163086}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 12, 10, 2]"
947,knap,2,7,11,0,9,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08725237846374512}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 5]
V = [1, 7, 7]
C = 6"
948,rod,8,184,27,0,23,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08609652519226074}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 22, 3, 23, 12, 16, 14, 11]"
949,ilp_prod,8,92,100,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xwnwbhy1/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_xwnwbhy1/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16263914108276367}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 10, 18, 15]
consumption (rows=resources) = [[3, 2, 6, 3], [8, 2, 3, 6], [1, 2, 5, 5], [5, 3, 4, 7]]
capacity = [31, 16, 24, 28]
upper_bounds = [3, 8, 4, 3]"
950,ilp_partition,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20214009284973145}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 5, 1]"
951,ilp_prod,16,210,300,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_p08wegsh/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2509336471557617}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [47, 33, 44, 23, 46, 37]
consumption (rows=resources) = [[15, 8, 12, 3, 10, 4], [10, 4, 5, 1, 16, 6], [16, 15, 8, 6, 8, 6], [13, 1, 5, 8, 15, 13]]
capacity = [55, 63, 36, 64]
upper_bounds = [3, 3, 4, 6, 3, 4]"
952,sub,32,21457702744977114556438602050520,21457692544576913556534602050720,0,21457702744977114556438602050520,1,"{'ok': True, 'value': 21457702744977114556438602050520, 'stdout': '21457702744977114556438602050520\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07275891304016113}",1,Compute: 65277154740604591052206394651879 - 43819451995627476495767792601359
953,mul,8,2693032383606507,154,0,26834365553517,0,"{'ok': True, 'value': 2693032383606507, 'stdout': '2693032383606507\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07800030708312988}",1,Compute: 91235763 * 29517289
954,ilp_partition,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2107069492340088}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 1, 3, 4]"
955,sub,16,5481893278376257,7,0,5481893278376257,1,"{'ok': True, 'value': 5481893278376257, 'stdout': '5481893278376257\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08397412300109863}",1,Compute: 9830885566877168 - 4348992288500911
956,add,4,10077,7,0,10077,1,"{'ok': True, 'value': 10077, 'stdout': '10077\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07205843925476074}",1,Compute: 3611 + 6466
957,sub,8,34463582,34463582,1,34463582,1,"{'ok': True, 'value': 34463582, 'stdout': '34463582\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07798361778259277}",1,Compute: 60795078 - 26331496
958,add,8,153072523,153072523,1,153072523,1,"{'ok': True, 'value': 153072523, 'stdout': '153072523\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07851338386535645}",1,Compute: 87360653 + 65711870
959,sub,2,33,33,1,33,1,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07248830795288086}",1,Compute: 57 - 24
960,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09542226791381836}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbdccbbbadbdbbc""
T = ""dbbabbaaccdbadbdd"""
961,rod,16,480,46,0,7,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0950307846069336}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 44, 4, 27, 19, 26, 11, 13, 29, 3, 7, 45, 9, 41, 36, 19]"
962,rod,32,1344,715,0,1,0,"{'ok': True, 'value': 1344, 'stdout': '1344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07274007797241211}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [42, 1, 56, 60, 73, 64, 26, 15, 26, 79, 76, 42, 47, 23, 65, 45, 75, 84, 78, 39, 40, 80, 18, 75, 63, 5, 3, 87, 73, 47, 31, 59]"
963,add,32,174856657631662104211098485630772,74856477703662094910462485636572,0,174856657631662104211108485630772,0,"{'ok': True, 'value': 174856657631662104211098485630772, 'stdout': '174856657631662104211098485630772\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07175707817077637}",1,Compute: 82366457716862626951231199051346 + 92490199914799477259867286579426
964,sub,16,1854955058274707,,0,1854955058274707,1,"{'ok': True, 'value': 1854955058274707, 'stdout': '1854955058274707\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0934591293334961}",1,Compute: 4323874528680656 - 2468919470405949
965,ilp_partition,32,0,10,0,1,0,"{'ok': True, 'value': 932, 'stdout': '932\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1912984848022461}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [70, 36, 63, 91, 14, 13, 20, 83, 26, 59, 26, 19, 8, 2, 35, 46, 9, 4, 59, 55, 40, 39, 80, 35]"
966,rod,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07523274421691895}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 5]"
967,mul,4,14274516,88956,0,14258136,0,"{'ok': True, 'value': 14274516, 'stdout': '14274516\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07583355903625488}",1,Compute: 1486 * 9606
968,mul,32,951599142558906003371122729853902582423615150692314675481174239,966993890693766989534444664684645635533,0,9656464689299399769166619344630466666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 951599142558906003371122729853902582423615150692314675481174239, 'stdout': '951599142558906003371122729853902582423615150692314675481174239\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07440328598022461}",1,Compute: 72253152883755897815536592935097 * 13170347653754033984357949606487
969,add,32,137803799194903021519560076460054,143807801194867421529559270459654,0,137793799194892921529559976460054,0,"{'ok': True, 'value': 137803799194903021519560076460054, 'stdout': '137803799194903021519560076460054\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07638859748840332}",1,Compute: 40845338692340415040223642790322 + 96958460502562606479336433669732
970,sub,32,54711882689517359747113055102457,54711882689517360747113055102457,0,54711882689517359747112955102457,0,"{'ok': True, 'value': 54711882689517359747113055102457, 'stdout': '54711882689517359747113055102457\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08742809295654297}",1,Compute: 77835467917321665717189093356403 - 23123585227804305970076038253946
971,ilp_assign,4,13,1,0,17,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3771212100982666}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 11, 12, 4], [5, 2, 12, 3], [10, 1, 5, 12], [3, 2, 3, 5]]"
972,sub,16,863907890011297,862900789001120,0,864390799001129,0,"{'ok': True, 'value': 863907890011297, 'stdout': '863907890011297\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08545279502868652}",1,Compute: 8501761502599307 - 7637853612588010
973,mul,8,4199459281674980,420325225387300,0,420365964538680,0,"{'ok': True, 'value': 4199459281674980, 'stdout': '4199459281674980\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08365058898925781}",1,Compute: 64259740 * 65351327
974,knap,8,99,140,0,143,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08389019966125488}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 10, 3, 7, 6, 8, 14, 11]
V = [19, 11, 16, 32, 1, 9, 32, 5]
C = 33"
975,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1055, 'stdout': '1055\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20217108726501465}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 36, 41, 56, 7, 16, 68, 70, 71, 5, 39, 45, 52, 78, 76, 26, 55, 34, 73, 17, 51, 91, 41]"
976,ilp_prod,32,329,366,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xm345s1i/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22999787330627441}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [79, 92, 63, 4, 25, 25]
consumption (rows=resources) = [[9, 25, 4, 24, 21, 19], [8, 7, 7, 18, 1, 28], [26, 8, 6, 20, 24, 8], [24, 29, 26, 14, 27, 11]]
capacity = [115, 82, 114, 101]
upper_bounds = [4, 3, 3, 4, 3, 3]"
977,sub,2,20,20,1,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07885527610778809}",1,Compute: 44 - 24
978,lcs,4,3,3,1,-1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07474136352539062}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badd""
T = ""babdc"""
979,ilp_assign,16,46,17,0,4,0,"{'ok': True, 'value': 46, 'stdout': '46\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4165077209472656}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[45, 3, 12, 30, 36, 34, 34], [26, 1, 6, 12, 42, 47, 45], [15, 10, 18, 21, 9, 5, 44], [38, 11, 7, 43, 1, 15, 18], [42, 16, 18, 44, 27, 44, 11], [18, 19, 17, 17, 14, 3, 38], [33, 46, 32, 7, 2, 38, 44]]"
980,ilp_partition,2,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3595612049102783}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 1, 2]"
981,ilp_prod,16,99,120,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0ugtv90n/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2536027431488037}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 28, 15, 18, 19, 8]
consumption (rows=resources) = [[9, 14, 6, 5, 6, 6], [9, 9, 11, 13, 10, 6], [4, 11, 15, 7, 5, 15], [16, 8, 10, 3, 2, 11]]
capacity = [52, 46, 33, 43]
upper_bounds = [3, 3, 3, 3, 4, 3]"
982,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08278870582580566}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""a"""
983,rod,2,10,10,1,10,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_z24zcj21/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07340240478515625}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 5]"
984,ilp_partition,2,1,1,1,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18828558921813965}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 2, 3]"
985,lcs,4,2,2,1,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0730137825012207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdb""
T = ""cbc"""
986,ilp_partition,2,0,The answer will be the minimum difference between the two subsets.,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18713927268981934}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 4, 2]"
987,mul,8,6316089346014188,6382433586964688,0,6255655563999198,0,"{'ok': True, 'value': 6316089346014188, 'stdout': '6316089346014188\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07378053665161133}",1,Compute: 67087267 * 94147364
988,lcs,4,2,3,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07459068298339844}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcad""
T = ""adbc"""
989,ilp_partition,32,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19209766387939453}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [49, 15, 36, 77, 14, 19, 33, 57, 66, 48, 41, 26, 26, 5, 5, 50, 80, 58, 54, 77, 12, 67, 20, 90]"
990,add,4,7665,7665,1,7665,1,"{'ok': True, 'value': 7665, 'stdout': '7665\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07857298851013184}",1,Compute: 6625 + 1040
991,rod,8,152,22,0,14,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07395267486572266}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 6, 20, 1, 10, 4, 2, 14]"
992,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6545629501342773}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 2], [1, 2]]"
993,rod,4,40,10,0,20,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_y407bubg/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_y407bubg/main.py"", line 9, in rod_cutting\n    rev = P[j] + revenue[i - j]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07535099983215332}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 6, 1, 6]"
994,ilp_assign,16,44,105,0,105,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4052908420562744}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 23, 15, 28, 48, 40, 47], [18, 33, 39, 3, 2, 9, 25], [40, 14, 44, 29, 10, 41, 41], [37, 21, 19, 20, 45, 3, 2], [5, 15, 38, 33, 7, 28, 4], [22, 7, 22, 18, 22, 30, 44], [2, 36, 17, 47, 38, 22, 33]]"
995,knap,2,9,7,0,4,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07414364814758301}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 5, 1]
V = [7, 2, 2]
C = 4"
996,rod,4,28,16,0,27,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07784461975097656}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 12, 5, 11]"
997,mul,16,68264088692451724142409184452720,6780248436849696664444440,0,674618586842558564986868880,0,"{'ok': True, 'value': 68264088692451724142409184452720, 'stdout': '68264088692451724142409184452720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0771634578704834}",1,Compute: 8623545545308880 * 7916011846146819
998,add,4,14899,14899,1,14899,1,"{'ok': True, 'value': 14899, 'stdout': '14899\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0723567008972168}",1,Compute: 8398 + 6501
999,mul,4,5111925,5035666174,0,5134925,0,"{'ok': True, 'value': 5111925, 'stdout': '5111925\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08079719543457031}",1,Compute: 2247 * 2275
1000,knap,32,1740,1045,0,1000,0,"{'ok': True, 'value': 1740, 'stdout': '1740\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0794837474822998}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 47, 43, 64, 17, 36, 48, 22, 7, 45, 46, 36, 20, 20, 29, 32, 19, 4, 29, 38, 32, 40, 64, 9, 14, 47, 53, 9, 35, 8, 33, 11]
V = [35, 108, 14, 50, 126, 28, 68, 4, 122, 77, 65, 56, 108, 121, 107, 42, 55, 25, 31, 71, 87, 100, 78, 107, 117, 40, 9, 45, 94, 127, 52, 4]
C = 493"
1001,sub,2,22,22,1,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08641767501831055}",1,Compute: 67 - 45
1002,ilp_assign,32,136,0,0,114,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4149894714355469}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[22, 49, 86, 77, 73, 96, 31], [56, 63, 48, 86, 93, 74, 3], [11, 90, 62, 57, 86, 8, 60], [71, 88, 50, 53, 59, 13, 65], [10, 81, 25, 4, 41, 25, 6], [2, 85, 86, 16, 57, 76, 79], [62, 28, 59, 58, 20, 40, 74]]"
1003,mul,8,1739454802843424,343434343434343434,0,173848878345424,0,"{'ok': True, 'value': 1739454802843424, 'stdout': '1739454802843424\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07457804679870605}",1,Compute: 40511888 * 42936898
1004,ilp_prod,4,46,100,0,The maximum profit will be printed by the program.,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/14e017acd4da4d979896ee950b96a1ab-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/14e017acd4da4d979896ee950b96a1ab-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.19144535064697266}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 9, 8]
consumption (rows=resources) = [[4, 1, 1], [1, 3, 2], [3, 4, 3]]
capacity = [16, 14, 15]
upper_bounds = [4, 3, 5]"
1005,ilp_prod,2,21,24,0,6,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5c10792ab93748aba4877250653e8711-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5c10792ab93748aba4877250653e8711-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8.4 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -7 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                7.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 7.0\nProduct_0: 1.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17781782150268555}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[2, 2], [2, 3]]
capacity = [7, 6]
upper_bounds = [3, 3]"
1006,ilp_prod,32,181,185,0,The answer will be the maximum profit that can be obtained subject to the resource constraints.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_amhfqwz2/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_amhfqwz2/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1465623378753662}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [31, 54, 4, 14, 73, 24]
consumption (rows=resources) = [[9, 3, 18, 10, 14, 32], [7, 22, 19, 18, 28, 23], [32, 21, 15, 22, 30, 26], [27, 17, 24, 12, 7, 11]]
capacity = [126, 118, 73, 80]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1007,rod,8,30,22,0,7,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07567024230957031}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [1, 6, 9, 15, 19, 17, 5, 10]"
1008,knap,16,444,132,0,1034,0,"{'ok': True, 'value': 444, 'stdout': '444\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15060830116271973}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [28, 8, 5, 20, 11, 25, 10, 27, 15, 19, 12, 8, 20, 3, 26, 28]
V = [15, 30, 21, 45, 11, 19, 31, 64, 43, 57, 37, 58, 37, 58, 3, 2]
C = 132"
1009,ilp_assign,32,129,185,0,110,0,"{'ok': True, 'value': 129, 'stdout': '129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3969614505767822}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 26, 12, 81, 10, 83, 96], [37, 10, 92, 32, 56, 44, 91], [28, 33, 76, 59, 26, 22, 56], [87, 66, 82, 25, 90, 9, 22], [7, 86, 20, 39, 91, 31, 89], [10, 19, 33, 67, 62, 80, 75], [43, 70, 83, 35, 48, 58, 74]]"
1010,ilp_assign,8,43,65,0,76,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_p2xeo_vm/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.39591050148010254}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[19, 15, 10, 9, 5, 22, 9], [8, 18, 23, 14, 7, 8, 22], [2, 17, 5, 9, 19, 12, 8], [9, 8, 24, 1, 17, 20, 23], [3, 16, 9, 18, 7, 1, 12], [13, 14, 15, 18, 12, 14, 23], [24, 9, 9, 18, 10, 22, 11]]"
1011,ilp_assign,32,138,148,0,209,0,"{'ok': True, 'value': 138, 'stdout': '138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3972892761230469}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[70, 95, 31, 44, 67, 8, 50], [25, 96, 74, 87, 31, 32, 25], [18, 29, 8, 78, 23, 29, 96], [8, 56, 51, 46, 64, 51, 96], [22, 15, 81, 13, 67, 62, 3], [22, 83, 34, 85, 91, 92, 27], [23, 65, 81, 91, 21, 53, 86]]"
1012,add,2,167,167,1,167,1,"{'ok': True, 'value': 167, 'stdout': '167\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08408641815185547}",1,Compute: 87 + 80
1013,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09127998352050781}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caab""
T = ""acbdc"""
1014,ilp_prod,32,280,160,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_tpejzrap/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23990082740783691}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 56, 20, 46, 21, 16]
consumption (rows=resources) = [[31, 4, 28, 8, 17, 20], [30, 20, 15, 30, 12, 29], [21, 10, 9, 5, 23, 7], [8, 2, 18, 1, 3, 22]]
capacity = [81, 109, 70, 66]
upper_bounds = [3, 5, 3, 3, 3, 3]"
1015,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07835698127746582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""c"""
1016,ilp_partition,32,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18845319747924805}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [54, 48, 74, 40, 70, 35, 63, 16, 2, 95, 65, 59, 88, 54, 70, 95, 45, 79, 10, 58, 11, 64, 50, 16]"
1017,add,4,5013,18,0,5013,1,"{'ok': True, 'value': 5013, 'stdout': '5013\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07448768615722656}",1,Compute: 2310 + 2703
1018,knap,16,439,103,0,137,0,"{'ok': True, 'value': -7776, 'stdout': '-7776.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41349005699157715}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 22, 14, 25, 23, 28, 24, 24, 22, 1, 1, 3, 25, 25, 11, 16]
V = [31, 38, 27, 16, 2, 61, 60, 34, 51, 34, 53, 56, 55, 45, 12, 6]
C = 137"
1019,knap,32,1647,1086,0,34,0,"{'ok': True, 'value': 1647, 'stdout': '1647\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08896040916442871}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 17, 34, 38, 45, 10, 21, 27, 26, 31, 36, 4, 52, 2, 51, 29, 11, 59, 47, 12, 62, 51, 57, 34, 2, 43, 28, 31, 63, 46, 37, 3]
V = [79, 76, 120, 36, 28, 10, 24, 54, 127, 45, 7, 101, 48, 48, 103, 57, 56, 77, 7, 69, 79, 94, 63, 22, 18, 107, 96, 120, 20, 15, 113, 87]
C = 510"
1020,knap,32,1626,1004,0,-1,0,"{'ok': True, 'value': 1626, 'stdout': '1626\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08060598373413086}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [34, 28, 1, 31, 58, 13, 31, 57, 12, 30, 3, 36, 39, 4, 20, 5, 49, 39, 46, 10, 2, 20, 21, 60, 20, 60, 48, 36, 50, 31, 21, 32]
V = [113, 104, 60, 21, 6, 62, 99, 32, 46, 37, 13, 60, 53, 25, 72, 21, 128, 13, 19, 114, 73, 116, 37, 7, 9, 95, 1, 100, 45, 127, 92, 69]
C = 473"
1021,ilp_prod,16,241,The solution to this problem involves using a linear programming solver to find the optimal values of x_j that maximize the total profit while satisfying the constraints. The actual numerical answer would be the maximum profit that can be obtained.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_p0i7i0qe/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23067212104797363}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [29, 25, 11, 48, 18, 48]
consumption (rows=resources) = [[1, 16, 5, 14, 8, 9], [5, 2, 16, 16, 2, 13], [5, 14, 4, 2, 1, 3], [7, 5, 11, 9, 15, 5]]
capacity = [50, 53, 53, 45]
upper_bounds = [6, 3, 3, 3, 3, 4]"
1022,add,16,6343823936500485,6343823936429487,0,6343823936499485,0,"{'ok': True, 'value': 6343823936500485, 'stdout': '6343823936500485\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0742330551147461}",1,Compute: 1620641530310866 + 4723182406189619
1023,ilp_assign,8,39,56,0,46,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41265320777893066}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 18, 16, 16, 19, 17, 11], [21, 22, 16, 14, 18, 9, 20], [2, 3, 3, 8, 7, 7, 9], [21, 21, 11, 21, 18, 6, 18], [13, 8, 8, 17, 3, 1, 12], [1, 6, 10, 13, 16, 2, 5], [22, 23, 12, 20, 4, 10, 5]]"
1024,rod,16,240,45,0,7,0,"{'ok': True, 'value': 240, 'stdout': '240\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09255242347717285}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [10, 4, 46, 24, 4, 22, 7, 14, 40, 2, 10, 20, 45, 4, 16, 34]"
1025,add,16,14462917131968061,14462917132968061,0,14462917132968061,0,"{'ok': True, 'value': 14462917131968061, 'stdout': '14462917131968061\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0776512622833252}",1,Compute: 7022925627899221 + 7439991504068840
1026,ilp_prod,8,74,100,0,27,0,"{'ok': True, 'value': 74, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/435483753a564ce1bd1085679d84d9e6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/435483753a564ce1bd1085679d84d9e6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 81.8465 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -61 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -74 found by DiveCoefficient after 11 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 4\nCbc0013I At root node, 3 cuts changed objective from -81.846535 to -74.000007 in 6 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 12 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -74, took 11 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -81.8465 to -74\nProbing was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 6 times and created 12 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                74.00000000\nEnumerated nodes:               0\nTotal iterations:               11\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n74.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16177988052368164}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 13, 8, 24]
consumption (rows=resources) = [[1, 5, 3, 1], [8, 8, 2, 7], [8, 2, 1, 8], [7, 4, 5, 3]]
capacity = [31, 30, 18, 27]
upper_bounds = [3, 3, 5, 3]"
1027,mul,16,55421394461289093529077204539952,500,0,56090515654953844014832376872960,0,"{'ok': True, 'value': 55421394461289093529077204539952, 'stdout': '55421394461289093529077204539952\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0735170841217041}",1,Compute: 6988945840667856 * 7929864635493167
1028,ilp_assign,16,61,105,0,110,0,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4059317111968994}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[28, 34, 1, 47, 22, 1, 35], [18, 21, 13, 45, 32, 20, 46], [26, 25, 42, 29, 6, 44, 4], [48, 39, 17, 45, 47, 1, 38], [29, 16, 46, 44, 40, 30, 43], [16, 43, 24, 20, 32, 48, 15], [47, 39, 6, 4, 3, 22, 14]]"
1029,ilp_partition,2,0,0,1,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2192370891571045}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 2, 6]"
1030,ilp_assign,2,7,7,1,8,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36650609970092773}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [2, 6]]"
1031,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08025312423706055}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbccadbccdbbaada""
T = ""caadddbdcbdcccac"""
1032,knap,8,103,103,1,60,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08060622215270996}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 14, 16, 4, 9, 14, 12, 12]
V = [26, 23, 27, 17, 1, 14, 30, 24]
C = 43"
1033,mul,4,81811701,113373,0,81945921,0,"{'ok': True, 'value': 81811701, 'stdout': '81811701\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0793156623840332}",1,Compute: 8721 * 9381
1034,mul,16,17092255781896721289722337947850,1710272927,0,1717922274860886466888668680,0,"{'ok': True, 'value': 17092255781896721289722337947850, 'stdout': '17092255781896721289722337947850\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08670735359191895}",1,Compute: 5562995263877570 * 3072491521408005
1035,rod,4,40,15,0,17,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07322335243225098}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 6, 12, 11]"
1036,ilp_prod,4,53,45,0,3,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_z4vhi1ex/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\n  File ""/tmp/cot_exec_z4vhi1ex/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(3)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14284443855285645}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 12, 5]
consumption (rows=resources) = [[3, 3, 1], [3, 1, 2], [1, 1, 3]]
capacity = [13, 15, 11]
upper_bounds = [4, 4, 3]"
1037,knap,32,1662,466,0,177,0,"{'ok': True, 'value': 1662, 'stdout': '1662\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09136557579040527}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [62, 17, 61, 10, 1, 31, 56, 51, 41, 2, 28, 46, 6, 19, 39, 23, 1, 13, 54, 45, 8, 33, 21, 6, 43, 34, 29, 41, 14, 44, 37, 16]
V = [49, 112, 8, 55, 66, 110, 90, 9, 24, 29, 111, 14, 128, 41, 59, 9, 31, 33, 107, 33, 51, 38, 81, 9, 112, 75, 27, 120, 81, 101, 85, 106]
C = 466"
1038,ilp_prod,4,84,66,0,The answer will be printed after running the code.,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/65f12f595574422b9d936bca9220b037-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/65f12f595574422b9d936bca9220b037-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 48 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -48 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1584758758544922}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 12, 11]
consumption (rows=resources) = [[2, 2, 1], [3, 1, 4], [3, 2, 4]]
capacity = [15, 12, 16]
upper_bounds = [4, 7, 3]"
1039,lcs,16,7,7,1,10,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07415413856506348}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbcbbbbabccaadc""
T = ""caadabadbbddcddda"""
1040,knap,32,1614,2244,0,1,0,"{'ok': True, 'value': 1614, 'stdout': '1614\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07627534866333008}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 15, 64, 58, 30, 18, 39, 23, 24, 31, 39, 40, 5, 46, 30, 18, 2, 18, 17, 8, 38, 46, 55, 47, 51, 48, 29, 60, 47, 40, 19, 7]
V = [95, 127, 47, 4, 51, 127, 25, 42, 97, 115, 84, 17, 24, 18, 74, 121, 41, 26, 74, 15, 33, 31, 1, 65, 30, 85, 24, 40, 92, 49, 103, 107]
C = 520"
1041,lcs,8,2,4,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07975411415100098}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbbabaa""
T = ""addddacbb"""
1042,mul{'ok': True, 'value': 1340424867658880691130241065480722011267926182985638529577630277, 'stdout': '1340424867658880691130241065480722011267926182985638529577630277\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08217620849609375}",1,Compute: 37168643354813877962776961518137 * 36063325068475393932252450906221
1043,lcs,4,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08118224143981934}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbd""
T = ""aaa"""
1044,knap,4,28,18,0,6,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08402323722839355}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 2, 7]
V = [10, 11, 7, 2]
C = 6"
1045,ilp_assign,2,10,10,1,9,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3873300552368164}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [5, 4]]"
1046,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08415961265563965}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cc""
T = ""bad"""
1047,knap,8,100,165,0,103,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07993960380554199}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 16, 13, 16, 6, 5, 1, 15]
V = [5, 27, 21, 12, 6, 22, 30, 13]
C = 39"
1048,sub,16,4915061327878476,4914938672021526,0,4915061327878476,1,"{'ok': True, 'value': 4915061327878476, 'stdout': '4915061327878476\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07986330986022949}",1,Compute: 8552471111557062 - 3637409783678586
1049,sub,8,41633100,41633100,1,41633100,1,"{'ok': True, 'value': 41633100, 'stdout': '41633100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07981419563293457}",1,Compute: 78609977 - 36976877
1050,rod,2,8,8,1,8,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_hcwoz6u3/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07180404663085938}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
1051,add,4,13391,9,0,13391,1,"{'ok': True, 'value': 13391, 'stdout': '13391\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08228564262390137}",1,Compute: 8480 + 4911
1052,ilp_partition,8,0,1,0,560,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08573532104492188}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 2, 11, 17, 5, 10, 10, 19]"
1053,ilp_prod,8,105,100,0,24,0,"{'ok': True, 'value': 88, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5264be54f33a4064893e3e530ca03bb9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5264be54f33a4064893e3e530ca03bb9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 100.571 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -88 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                88.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n88.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15061330795288086}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 8, 17, 22]
consumption (rows=resources) = [[3, 4, 6, 5], [7, 2, 8, 4], [5, 5, 1, 6], [5, 5, 4, 5]]
capacity = [26, 32, 25, 24]
upper_bounds = [4, 4, 4, 4]"
1054,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07994747161865234}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbbbdcaadadcccab""
T = ""acabdaaacadaddac"""
1055,lcs,32,20,10,0,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07914590835571289}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbdadcbadddabdadaaabacbcadabcdd""
T = ""cbdcbdbacbbddbbdcbbbdddbccdaabc"""
1056,mul,4,46395736,45249376,0,457033288,0,"{'ok': True, 'value': 46395736, 'stdout': '46395736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07973051071166992}",1,Compute: 6268 * 7402
1057,sub,4,3060,3060,1,3060,1,"{'ok': True, 'value': 3060, 'stdout': '3060\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0715937614440918}",1,Compute: 9357 - 6297
1058,rod,8,96,46,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0741581916809082}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 24, 21, 16, 6, 11, 22, 7]"
1059,ilp_assign,4,12,12,1,3,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4029521942138672}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 5, 7, 2], [4, 2, 3, 10], [8, 11, 3, 8], [6, 8, 12, 3]]"
1060,add,2,121,121,1,121,1,"{'ok': True, 'value': 121, 'stdout': '121\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07363700866699219}",1,Compute: 84 + 37
1061,knap,8,88,110,0,103,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08776378631591797}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 13, 13, 14, 1, 5, 10, 10]
V = [3, 14, 20, 32, 25, 8, 23, 6]
C = 37"
1062,knap,16,408,1043,0,1008,0,"{'ok': True, 'value': 538, 'stdout': '538.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4008450508117676}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 3, 30, 24, 19, 9, 19, 8, 27, 7, 6, 12, 7, 13, 12, 16]
V = [53, 39, 40, 1, 59, 8, 26, 59, 60, 4, 12, 18, 48, 54, 36, 21]
C = 117"
1063,add,32,88561369707769590789349122839143,90000000000000000000000000000000,0,191779458785531052885698275618753,0,"{'ok': True, 'value': 88561369707769590789349122839143, 'stdout': '88561369707769590789349122839143\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08344817161560059}",1,Compute: 11468676564195718010705461419956 + 77092693143573872778643661419187
1064,knap,32,1940,1045,0,87,0,"{'ok': True, 'value': 1940, 'stdout': '1940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08600068092346191}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 59, 33, 4, 24, 4, 44, 50, 8, 59, 39, 15, 52, 22, 40, 10, 42, 61, 14, 9, 52, 46, 23, 64, 5, 45, 47, 14, 24, 1, 1, 2]
V = [87, 84, 56, 34, 127, 115, 96, 7, 113, 74, 107, 120, 5, 126, 3, 117, 46, 18, 107, 65, 97, 20, 40, 48, 56, 66, 46, 70, 23, 94, 72, 83]
C = 467"
1065,ilp_partition,32,0,100,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19910717010498047}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [80, 17, 52, 33, 62, 40, 43, 78, 51, 65, 33, 5, 31, 15, 31, 3, 40, 91, 31, 40, 64, 4, 92, 89]"
1066,rod,4,28,11,0,16,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07674574851989746}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 5, 4, 4]"
1067,knap,8,101,110,0,142,0,"{'ok': True, 'value': 101, 'stdout': '101\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08245158195495605}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 13, 11, 9, 8, 2, 11, 9]
V = [6, 12, 7, 30, 2, 31, 23, 17]
C = 35"
1068,ilp_partition,16,0,1,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_hnrpqc7h/main.py"", line 13, in <module>\n    sum_can_form = np.where(dp)[0][-1]\nIndexError: index -1 is out of bounds for axis 0 with size 0\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1955404281616211}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [25, 37, 10, 33, 1, 30, 23, 48, 36, 38, 9, 26, 5, 11, 6, 22]"
1069,ilp_assign,8,32,46,0,46,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36024951934814453}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 18, 20, 1, 6, 14, 21], [13, 12, 2, 2, 24, 20, 6], [12, 6, 15, 10, 20, 16, 21], [23, 11, 10, 21, 4, 12, 6], [16, 2, 23, 15, 14, 9, 12], [7, 1, 12, 8, 20, 17, 4], [7, 13, 10, 6, 1, 14, 20]]"
1070,add,16,10739858016949205,25839857984527005,0,10740000016949205,0,"{'ok': True, 'value': 10739858016949205, 'stdout': '10739858016949205\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07303261756896973}",1,Compute: 7257737980924471 + 3482120036024734
1071,sub,2,19,19,1,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07264590263366699}",1,Compute: 57 - 38
1072,mul,4,15422894,73,0,15483834,0,"{'ok': True, 'value': 15422894, 'stdout': '15422894\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0738058090209961}",1,Compute: 3506 * 4399
1073,sub,32,31030053411401550406577136266975,31030053411401550406577136267075,0,31030053411401550406577136267005,0,"{'ok': True, 'value': 31030053411401550406577136266975, 'stdout': '31030053411401550406577136266975\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0727090835571289}",1,Compute: 84098828641961178876123779138725 - 53068775230559628469546642871750
1074,add,8,123751306,12406414,0,123751306,1,"{'ok': True, 'value': 123751306, 'stdout': '123751306\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08295083045959473}",1,Compute: 90228850 + 33522456
1075,lcs,16,9,10,0,13,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08381772041320801}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbdbbbbbbbabbdac""
T = ""cbbbccccbbbaadbd"""
1076,add,16,14440573340577971,117040573330577971,0,14440573340577971,1,"{'ok': True, 'value': 14440573340577971, 'stdout': '14440573340577971\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07038474082946777}",1,Compute: 9632632948782202 + 4807940391795769
1077,ilp_assign,16,48,105,0,115,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_vzqk_4a2/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.40287160873413086}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[40, 19, 44, 16, 24, 40, 6], [23, 7, 31, 30, 38, 27, 9], [23, 15, 37, 43, 12, 26, 14], [10, 6, 5, 39, 12, 23, 1], [33, 32, 8, 47, 3, 6, 41], [1, 22, 5, 36, 46, 9, 39], [36, 47, 15, 41, 27, 25, 1]]"
1078,sub,32,78778647698629140064461722273478,78878647608585140064463732273478,0,78778647708629139964461722273478,0,"{'ok': True, 'value': 78778647698629140064461722273478, 'stdout': '78778647698629140064461722273478\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08671832084655762}",1,Compute: 96969597577474200153831962904951 - 18190949878845060089370240631473
1079,add,4,12015,12015,1,12015,1,"{'ok': True, 'value': 12015, 'stdout': '12015\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08473539352416992}",1,Compute: 3209 + 8806
1080,lcs,32,22,10,0,24,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08169007301330566}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacbaadcdccadacdbcdacdbccbbcbcad""
T = ""addadbaadbdcdaadabcbadbbcbcbbcbab"""
1081,ilp_prod,16,209,"The actual solution would require a linear programming solver, which is not possible to provide without using code.",0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_q9iu3p_6/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23042893409729004}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 7, 8, 9, 47, 18]
consumption (rows=resources) = [[4, 8, 14, 7, 7, 15], [7, 1, 8, 6, 1, 13], [6, 2, 12, 14, 3, 12], [14, 1, 14, 14, 12, 11]]
capacity = [53, 59, 55, 54]
upper_bounds = [3, 6, 3, 3, 4, 3]"
1082,rod,8,104,22,0,30,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08384037017822266}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 11, 21, 23, 18, 1, 12, 11]"
1083,add,8,127358947,7,0,127358947,1,"{'ok': True, 'value': 127358947, 'stdout': '127358947\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07999253273010254}",1,Compute: 62949966 + 64408981
1084,sub,16,1895258889275113,15652000000000000,0,1895258890275113,0,"{'ok': True, 'value': 1895258889275113, 'stdout': '1895258889275113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08281660079956055}",1,Compute: 5838006138165673 - 3942747248890560
1085,lcs,4,2,2,1,10,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0825657844543457}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabd""
T = ""dad"""
1086,sub,16,293411489724923,,0,-293411489724923,0,"{'ok': True, 'value': 293411489724923, 'stdout': '293411489724923\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0838615894317627}",1,Compute: 8740915331313838 - 8447503841588915
1087,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08010625839233398}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbbbaad""
T = ""caddbaba"""
1088,knap,4,18,16,0,0,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08423209190368652}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 8, 1, 4]
V = [9, 15, 3, 1]
C = 9"
1089,ilp_assign,32,212,28,0,110,0,"{'ok': True, 'value': 212, 'stdout': '212\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4085397720336914}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 73, 58, 6, 9, 28, 39], [67, 57, 37, 66, 85, 12, 69], [52, 75, 95, 44, 55, 25, 95], [85, 13, 37, 96, 25, 23, 86], [65, 62, 66, 86, 85, 39, 95], [62, 67, 75, 70, 62, 59, 65], [5, 59, 71, 56, 35, 89, 44]]"
1090,ilp_partition,8,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20625805854797363}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 13, 4, 13, 10, 2, 9, 8]"
1091,sub,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08157920837402344}",1,Compute: 21 - 18
1092,rod,8,120,22,0,22,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08387875556945801}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 10, 1, 11, 18, 16, 4, 22]"
1093,ilp_prod,8,32,61,0,30,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/62e154c700f04f99b4a43a66c87478c9-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/62e154c700f04f99b4a43a66c87478c9-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 17 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16476225852966309}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 13, 6, 3]
consumption (rows=resources) = [[4, 2, 6, 1], [5, 8, 7, 2], [3, 5, 4, 4], [6, 3, 1, 1]]
capacity = [16, 22, 19, 17]
upper_bounds = [3, 3, 3, 4]"
1094,lcs,16,9,6,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10951828956604004}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaadbacbcaddcaa""
T = ""caacbbbbcaabdaa"""
1095,mul,2,3234,3394,0,3174,0,"{'ok': True, 'value': 3234, 'stdout': '3234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08158516883850098}",1,Compute: 77 * 42
1096,sub,32,49682494703335744016902152234127,,0,49682494699335744016902152234127,0,"{'ok': True, 'value': 49682494703335744016902152234127, 'stdout': '49682494703335744016902152234127\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0805516242980957}",1,Compute: 86549997776641348660940961063432 - 36867503073305604644038808829305
1097,add,16,14323479241958448,14313531241958248,0,14323479241958448,1,"{'ok': True, 'value': 14323479241958448, 'stdout': '14323479241958448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08330059051513672}",1,Compute: 7718758737633831 + 6604720504324617
1098,ilp_prod,2,10,28,0,15,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/2bd23a0b8ce7465a83943785055cefff-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/2bd23a0b8ce7465a83943785055cefff-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 13.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15541625022888184}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 4]
consumption (rows=resources) = [[1, 2], [3, 3]]
capacity = [8, 8]
upper_bounds = [3, 3]"
1099,ilp_assign,4,13,15,0,11,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3689734935760498}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 7, 1, 7], [9, 5, 3, 5], [1, 12, 5, 12], [2, 6, 11, 7]]"
1100,ilp_prod,32,266,1052,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_g6zu7vmp/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24748563766479492}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [52, 53, 24, 66, 34, 54]
consumption (rows=resources) = [[21, 25, 9, 8, 31, 28], [21, 30, 6, 30, 2, 28], [30, 21, 4, 6, 8, 1], [32, 21, 9, 13, 10, 31]]
capacity = [96, 99, 66, 75]
upper_bounds = [3, 3, 8, 3, 3, 3]"
1101,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08304643630981445}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""a"""
1102,rod,4,40,16,0,36,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_p8kkv70f/main.py"", line 28, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_p8kkv70f/main.py"", line 16, in rod_cutting\n    rev = P[j] + revenue[i - j - 1]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0909276008605957}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 6, 10, 4]"
1103,mul{'ok': True, 'value': 20971178930952419878061711825481, 'stdout': '20971178930952419878061711825481\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08093905448913574}",1,Compute: 3953385247315329 * 5304613038962889
1104,add,32,126091781328030909983541737372301,18,0,126091781328030909983541737372301,1,"{'ok': True, 'value': 126091781328030909983541737372301, 'stdout': '126091781328030909983541737372301\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08235692977905273}",1,Compute: 68338096916715457035995054021992 + 57753684411315452947546683350309
1105,sub,4,7522,7522,1,7522,1,"{'ok': True, 'value': 7522, 'stdout': '7522\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09238171577453613}",1,Compute: 8912 - 1390
1106,ilp_partition,4,4,1,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18885064125061035}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 12, 1]"
1107,sub,8,2337220,2337220,1,2337220,1,"{'ok': True, 'value': 2337220, 'stdout': '2337220\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09432601928710938}",1,Compute: 27609819 - 25272599
1108,mul,16,14557030619772065308819006531180,1540105462047857,0,145363823289988644444666766,0,"{'ok': True, 'value': 14557030619772065308819006531180, 'stdout': '14557030619772065308819006531180\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08469176292419434}",1,Compute: 9451969997181740 * 1540105462047857
1109,ilp_prod,32,288,100,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__kan3m3w/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.26236629486083984}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [88, 96, 47, 43, 3, 73]
consumption (rows=resources) = [[2, 11, 7, 20, 18, 14], [20, 13, 16, 4, 10, 10], [27, 8, 12, 30, 23, 17], [25, 22, 20, 14, 23, 26]]
capacity = [95, 92, 122, 72]
upper_bounds = [3, 3, 3, 4, 3, 3]"
1110,sub,2,7,92,0,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07783699035644531}",1,Compute: 99 - 92
1111,add,8,92786297,34789942,0,92786297,1,"{'ok': True, 'value': 92786297, 'stdout': '92786297\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08386468887329102}",1,Compute: 31784489 + 61001808
1112,ilp_assign,4,13,0,0,15,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40210747718811035}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 12, 2, 2], [7, 6, 6, 5], [6, 1, 4, 11], [11, 5, 11, 3]]"
1113,ilp_prod,4,32,52,0,36,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/899c0048fdae470d9d500a3badf71142-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/899c0048fdae470d9d500a3badf71142-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6.4 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14649128913879395}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 12, 4]
consumption (rows=resources) = [[1, 4, 2], [1, 1, 4], [4, 2, 4]]
capacity = [9, 14, 8]
upper_bounds = [3, 3, 3]"
1114,mul,2,860,860,1,860,1,"{'ok': True, 'value': 860, 'stdout': '860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07481026649475098}",1,Compute: 10 * 86
1115,rod,8,48,24,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_iwez5nle/main.py"", line 19, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07468247413635254}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [5, 6, 19, 3, 22, 8, 17, 22]"
1116,sub,32,19578040809017367107519412950138,-4,0,19578040809017367107519412948138,0,"{'ok': True, 'value': 19578040809017367107519412950138, 'stdout': '19578040809017367107519412950138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07938194274902344}",1,Compute: 64348234021129176259538934614276 - 44770193212111809152019521664138
1117,rod,4,40,10,0,1,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07754778861999512}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 8, 4, 1]"
1118,knap,32,1574,1055,0,2455,0,"{'ok': True, 'value': 2122, 'stdout': '2122.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40494298934936523}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [41, 18, 5, 6, 57, 18, 30, 8, 38, 59, 58, 20, 29, 39, 15, 60, 41, 28, 8, 32, 47, 59, 8, 14, 14, 23, 38, 37, 31, 52, 36, 52]
V = [55, 80, 124, 58, 119, 18, 82, 21, 51, 45, 41, 51, 3, 95, 101, 78, 46, 119, 32, 22, 49, 104, 84, 27, 44, 71, 60, 53, 108, 104, 78, 99]
C = 510"
1119,lcs,8,5,5,1,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09115123748779297}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdadbdc""
T = ""cacccddac"""
1120,mul,2,5940,5940,1,5940,1,"{'ok': True, 'value': 5940, 'stdout': '5940\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07790565490722656}",1,Compute: 99 * 60
1121,add,8,44122412,44112188,0,44122412,1,"{'ok': True, 'value': 44122412, 'stdout': '44122412\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08469414710998535}",1,Compute: 10566571 + 33555841
1122,knap,16,455,104,0,106,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40708065032958984}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 32, 18, 19, 28, 6, 24, 16, 15, 26, 19, 28, 23, 22, 4, 29]
V = [57, 24, 42, 32, 34, 42, 51, 46, 33, 34, 61, 62, 44, 54, 14, 3]
C = 157"
1123,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20694708824157715}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 21, 7, 24, 21, 3, 3, 12]"
1124,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0837709903717041}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcdb""
T = ""ccdcc"""
1125,add,8,29489842,29489842,1,29499842,0,"{'ok': True, 'value': 29489842, 'stdout': '29489842\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08166384696960449}",1,Compute: 14001405 + 15488437
1126,sub,2,61,61,1,61,1,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09189629554748535}",1,Compute: 99 - 38
1127,rod,2,6,6,1,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_rsf0isf6/main.py"", line 16, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_rsf0isf6/main.py"", line 12, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08843374252319336}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
1128,mul,8,1878316762762224,31,0,1852365606984244,0,"{'ok': True, 'value': 1878316762762224, 'stdout': '1878316762762224\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08042144775390625}",1,Compute: 23804901 * 78904624
1129,knap,4,31,26,0,2,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08846664428710938}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 1, 1, 1]
V = [6, 10, 8, 13]
C = 4"
1130,mul,2,9504,9504,1,9408,0,"{'ok': True, 'value': 9504, 'stdout': '9504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08192873001098633}",1,Compute: 99 * 96
1131,ilp_assign,2,8,7,0,7,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39510560035705566}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 4], [4, 5]]"
1132,lcs,32,20,10,0,26,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07670831680297852}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccccdbbaadbbcababcdacaaacdababdc""
T = ""cbcdabdbaaacccbdabbabbcddcccdcab"""
1133,ilp_prod,32,211,324,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_awymt5pc/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22876620292663574}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [58, 41, 24, 42, 95, 66]
consumption (rows=resources) = [[32, 32, 26, 10, 4, 21], [21, 28, 32, 3, 22, 22], [1, 7, 17, 10, 6, 26], [18, 12, 28, 18, 28, 30]]
capacity = [94, 90, 87, 67]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1134,add,16,16186962774643389,963223436241561,0,16187062774643389,0,"{'ok': True, 'value': 16186962774643389, 'stdout': '16186962774643389\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09075188636779785}",1,Compute: 7015018517142468 + 9171944257500921
1135,add,16,8088972659884796,8088973659884896,0,8088972659884896,0,"{'ok': True, 'value': 8088972659884796, 'stdout': '8088972659884796\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0758514404296875}",1,Compute: 3494790592750492 + 4594182067134304
1136,ilp_prod,8,110,65,0,96,0,"{'ok': True, 'value': 96, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7c30623a0ab94592969257833d7b091f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7c30623a0ab94592969257833d7b091f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 114 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -96 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                96.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n96.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15767621994018555}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 3, 9, 14]
consumption (rows=resources) = [[3, 5, 4, 1], [7, 7, 6, 4], [3, 5, 2, 3], [1, 6, 1, 3]]
capacity = [18, 32, 19, 19]
upper_bounds = [4, 3, 4, 6]"
1137,ilp_assign,2,5,5,1,3,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3698604106903076}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 1], [4, 2]]"
1138,lcs,4,1,2,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08415102958679199}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddc""
T = ""bcb"""
1139,ilp_assign,16,62,105,0,110,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40855979919433594}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 23, 28, 4, 45, 40, 25], [1, 40, 6, 38, 11, 27, 28], [12, 29, 14, 11, 44, 38, 7], [10, 28, 37, 18, 8, 7, 42], [32, 31, 41, 41, 33, 7, 2], [46, 28, 10, 12, 16, 26, 29], [46, 38, 45, 15, 9, 39, 38]]"
1140,sub,2,79,79,1,79,1,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08587956428527832}",1,Compute: 96 - 17
1141,ilp_partition,16,1,1,1,0,0,"{'ok': True, 'value': 359, 'stdout': '359\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18866562843322754}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 16, 26, 19, 34, 45, 5, 2, 2, 8, 46, 2, 26, 35, 35, 34]"
1142,ilp_assign,16,62,105,0,4,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40240049362182617}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 6, 45, 40, 8, 27, 5], [11, 45, 11, 33, 38, 36, 5], [45, 16, 10, 12, 19, 35, 23], [41, 39, 38, 13, 47, 45, 2], [21, 46, 28, 18, 19, 32, 30], [29, 25, 5, 6, 9, 36, 8], [16, 4, 34, 45, 39, 8, 6]]"
1143,knap,2,9,13,0,19,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08092594146728516}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 3]
V = [9, 7, 3]
C = 4"
1144,add,4,11839,11,0,11839,1,"{'ok': True, 'value': 11839, 'stdout': '11839\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07267236709594727}",1,Compute: 1936 + 9903
1145,knap,4,23,14,0,2,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08386373519897461}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 5, 1, 1]
V = [1, 9, 3, 11]
C = 7"
1146,ilp_prod,8,48,63,0,The answer will be printed after running the code.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_fjo7pbkg/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_fjo7pbkg/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16499781608581543}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 6, 15, 13]
consumption (rows=resources) = [[7, 6, 3, 7], [8, 3, 7, 3], [4, 1, 6, 8], [8, 2, 6, 5]]
capacity = [20, 25, 17, 22]
upper_bounds = [3, 3, 3, 3]"
1147,ilp_assign,8,39,56,0,65,0,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4325571060180664}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 21, 6, 8, 12, 21, 2], [2, 21, 15, 11, 18, 13, 2], [2, 17, 1, 6, 18, 3, 8], [16, 22, 18, 18, 17, 8, 2], [8, 15, 1, 5, 2, 6, 15], [8, 16, 4, 22, 23, 24, 11], [22, 18, 14, 21, 19, 15, 19]]"
1148,ilp_partition,8,0,1,0,20,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18997788429260254}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 9, 9, 9, 20, 14, 7, 3]"
1149,sub,4,3120,3120,1,3120,1,"{'ok': True, 'value': 3120, 'stdout': '3120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08130455017089844}",1,Compute: 8144 - 5024
1150,add,32,93107248183113832146509491190758,93007248183113832146510091190758,0,93107248183113832146509491190758,1,"{'ok': True, 'value': 93107248183113832146509491190758, 'stdout': '93107248183113832146509491190758\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0836799144744873}",1,Compute: 61027632477399114689382089127992 + 32079615705714717457127402062766
1151,add,16,9025049615614370,2154865014865542,0,9025049615594368,0,"{'ok': True, 'value': 9025049615614370, 'stdout': '9025049615614370\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08109259605407715}",1,Compute: 4176299863947556 + 4848749751666814
1152,ilp_assign,8,34,66,0,67,0,"{'ok': True, 'value': 34, 'stdout': '34\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3717226982116699}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 13, 16, 11, 12, 21, 2], [5, 15, 3, 18, 11, 5, 14], [11, 2, 15, 14, 20, 6, 12], [15, 15, 8, 12, 19, 20, 1], [22, 19, 8, 18, 3, 8, 3], [20, 6, 14, 15, 8, 22, 10], [20, 22, 20, 4, 1, 16, 21]]"
1153,ilp_partition,16,0,1,0,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19663739204406738}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [13, 12, 26, 20, 48, 23, 3, 33, 33, 10, 1, 37, 30, 11, 9, 9]"
1154,lcs,32,18,10,0,26,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07453799247741699}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcbcadaacdbccbacddbcacadbbccaac""
T = ""aabdbabcbdbbacaadccdccbbccddbddb"""
1155,knap,8,99,105,0,103,0,"{'ok': True, 'value': 99, 'stdout': '99\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08664298057556152}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 13, 12, 4, 16, 1, 7, 14]
V = [2, 27, 28, 16, 7, 6, 22, 27]
C = 39"
1156,lcs,8,7,6,0,6,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0980064868927002}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdabccac""
T = ""bdbccaca"""
1157,knap,16,395,1043,0,106,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40984487533569336}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 1, 8, 24, 8, 9, 22, 15, 3, 2, 20, 32, 31, 4, 3, 28]
V = [47, 53, 23, 11, 26, 28, 64, 23, 15, 13, 57, 19, 3, 20, 26, 33]
C = 110"
1158,ilp_partition,32,0,10,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19503140449523926}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [77, 88, 54, 64, 83, 56, 24, 6, 41, 85, 89, 29, 63, 73, 71, 31, 93, 19, 29, 52, 61, 74, 7, 5]"
1159,lcs,32,18,10,0,18,1,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0848691463470459}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdbdccdddabbbcbbdcaabdbabddcdaa""
T = ""ababcdacadbbcaabccdaccabcbaaccb"""
1160,mul,4,52244000,5300060,0,51845600,0,"{'ok': True, 'value': 52244000, 'stdout': '52244000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07450509071350098}",1,Compute: 5648 * 9250
1161,sub,16,6685565911475701,1495577987719361,0,6685565911475699,0,"{'ok': True, 'value': 6685565911475701, 'stdout': '6685565911475701\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08083891868591309}",1,Compute: 8181143899195062 - 1495577987719361
1162,ilp_partition,8,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1896507740020752}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 4, 6, 13, 18, 18, 22]"
1163,sub,2,29,29,1,29,1,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07679057121276855}",1,Compute: 41 - 12
1164,knap,32,1478,1284,0,1000,0,"{'ok': True, 'value': 1478, 'stdout': '1478\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07697153091430664}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [11, 63, 48, 11, 54, 27, 40, 40, 31, 23, 44, 9, 62, 42, 16, 39, 25, 22, 59, 8, 45, 49, 53, 32, 12, 46, 59, 26, 36, 35, 60, 5]
V = [41, 95, 72, 92, 114, 73, 96, 48, 71, 15, 111, 8, 6, 10, 4, 100, 50, 15, 33, 71, 81, 97, 122, 126, 60, 27, 86, 60, 4, 32, 60, 41]
C = 566"
1165,rod,4,44,10,0,13,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0712733268737793}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 7, 9, 6]"
1166,ilp_prod,32,339,239,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tmeea9j0/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22633647918701172}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [53, 9, 95, 7, 33, 54]
consumption (rows=resources) = [[19, 21, 19, 19, 14, 27], [22, 17, 26, 27, 19, 23], [26, 29, 20, 20, 13, 17], [32, 6, 30, 9, 12, 9]]
capacity = [99, 119, 84, 109]
upper_bounds = [3, 3, 3, 4, 6, 3]"
1167,knap,32,1765,1004,0,0,0,"{'ok': True, 'value': 2220, 'stdout': '2220\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3774993419647217}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [46, 48, 51, 28, 17, 25, 64, 27, 11, 33, 7, 53, 19, 57, 13, 56, 56, 21, 45, 47, 38, 41, 52, 59, 35, 26, 12, 23, 33, 21, 3, 49]
V = [23, 78, 126, 79, 100, 103, 22, 94, 86, 104, 77, 86, 20, 11, 72, 38, 116, 110, 12, 55, 115, 45, 101, 88, 115, 79, 15, 86, 45, 67, 32, 20]
C = 558"
1168,ilp_assign,2,4,3,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3652925491333008}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 5], [2, 3]]"
1169,add,32,151253315314669664007675509761280,0,0,151253315314669664007675510761280,0,"{'ok': True, 'value': 151253315314669664007675509761280, 'stdout': '151253315314669664007675509761280\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07425355911254883}",1,Compute: 58210504901439573763135213770749 + 93042810413230090244540295990531
1170,rod,16,720,46,0,96,0,"{'ok': True, 'value': 720, 'stdout': '720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10441231727600098}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [45, 17, 29, 48, 7, 5, 30, 23, 19, 9, 20, 22, 6, 20, 23, 22]"
1171,knap,2,8,11,0,13,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08040976524353027}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 4]
V = [3, 4, 8]
C = 5"
1172,knap,8,98,110,0,100,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3897087574005127}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 12, 7, 11, 5, 3, 13, 7]
V = [14, 14, 25, 11, 32, 20, 6, 7]
C = 33"
1173,sub,32,28948848057018050056971199423875,28948848057018050056971200003875,0,29048848056958049946971200423875,0,"{'ok': True, 'value': 28948848057018050056971199423875, 'stdout': '28948848057018050056971199423875\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08468890190124512}",1,Compute: 97032130441349706167995761057991 - 68083282384331656111024561634116
1174,add,8,64422585,64422585,1,64422585,1,"{'ok': True, 'value': 64422585, 'stdout': '64422585\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08265185356140137}",1,Compute: 47005065 + 17417520
1175,ilp_assign,8,44,56,0,46,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ppb94_0h/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3707852363586426}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 20, 20, 6, 9, 22, 15], [15, 5, 7, 9, 6, 23, 4], [22, 8, 5, 3, 9, 15, 16], [12, 21, 1, 5, 7, 12, 23], [8, 2, 1, 9, 6, 19, 2], [15, 9, 12, 19, 4, 21, 21], [13, 9, 11, 13, 11, 13, 12]]"
1176,sub,32,46997286547576025878809663089123,47000000000000000000000000000000,0,47000000000000000000000000000000,0,"{'ok': True, 'value': 46997286547576025878809663089123, 'stdout': '46997286547576025878809663089123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07337546348571777}",1,Compute: 66539404806308770320825985700744 - 19542118258732744442016322611621
1177,ilp_assign,8,49,59,0,76,0,"{'ok': True, 'value': 49, 'stdout': '49\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3980860710144043}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 7, 17, 10, 22, 23, 16], [24, 7, 2, 2, 9, 12, 6], [20, 24, 19, 16, 10, 13, 8], [1, 5, 18, 9, 6, 13, 10], [20, 22, 9, 1, 24, 12, 4], [19, 12, 22, 11, 17, 23, 11], [23, 20, 8, 24, 24, 17, 8]]"
1178,ilp_prod,16,198,168,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ls_f53j_/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22535037994384766}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 48, 22, 12, 20, 34]
consumption (rows=resources) = [[11, 7, 8, 2, 1, 12], [5, 15, 14, 7, 5, 13], [14, 1, 8, 14, 1, 8], [8, 11, 16, 4, 6, 9]]
capacity = [62, 63, 52, 50]
upper_bounds = [3, 4, 3, 3, 8, 4]"
1179,mul{'ok': True, 'value': 27989701813736914526145823579737, 'stdout': '27989701813736914526145823579737\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07673311233520508}",1,Compute: 6777703770895299 * 4129673228554163
1180,ilp_partition,4,1,The minimum difference between the two groups is calculated using dynamic programming and is returned as an integer.,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19661307334899902}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 5, 5, 12]"
1181,add,32,158262340438364810342397389903860,1582623394383648103423973998038608,0,158262340438364810342397389903860,1,"{'ok': True, 'value': 158262340438364810342397389903860, 'stdout': '158262340438364810342397389903860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07906270027160645}",1,Compute: 69723444761360807578712880488232 + 88538895677004002763684509415628
1182,rod,32,1952,1055,0,61,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.03617262840271}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [61, 46, 8, 22, 2, 55, 47, 28, 86, 93, 3, 8, 54, 3, 78, 74, 30, 34, 8, 78, 63, 56, 94, 13, 8, 65, 57, 36, 77, 86, 5, 94]"
1183,add,8,160935871,2121101015,0,160935871,1,"{'ok': True, 'value': 160935871, 'stdout': '160935871\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09031057357788086}",1,Compute: 94568963 + 66366908
1184,rod,16,704,65,0,65,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11159777641296387}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 20, 40, 43, 20, 9, 14, 8, 26, 13, 5, 28, 41, 18, 48, 15]"
1185,knap,32,1372,462,0,1000,0,"{'ok': True, 'value': 1658, 'stdout': '1658.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3721354007720947}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [51, 22, 14, 56, 26, 10, 43, 55, 38, 42, 34, 60, 1, 1, 46, 11, 13, 5, 17, 22, 39, 27, 34, 12, 38, 41, 32, 59, 14, 15, 31, 15]
V = [95, 48, 72, 99, 8, 17, 21, 38, 92, 14, 116, 11, 5, 27, 92, 78, 6, 90, 55, 19, 103, 112, 87, 33, 27, 103, 61, 6, 21, 67, 3, 32]
C = 462"
1186,lcs,8,5,4,0,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09461402893066406}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baccaddb""
T = ""baddcdd"""
1187,ilp_prod,16,172,155,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_5sdno85q/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.24859881401062012}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 23, 14, 9, 19, 10]
consumption (rows=resources) = [[2, 5, 9, 5, 2, 1], [6, 2, 4, 2, 15, 12], [2, 1, 9, 9, 13, 2], [6, 13, 9, 3, 9, 3]]
capacity = [61, 42, 47, 62]
upper_bounds = [7, 4, 5, 5, 3, 3]"
1188,rod,8,60,22,0,27,0,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08440423011779785}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 15, 6, 16, 21, 10, 21, 17]"
1189,knap,8,88,110,0,103,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08300209045410156}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 12, 2, 4, 15, 8, 1, 15]
V = [31, 5, 16, 5, 14, 14, 13, 23]
C = 33"
1190,ilp_prod,4,48,60,0,The answer will be printed after running the code.,0,"{'ok': True, 'value': 30, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ce5c04e0865f4055b1f4ccc3734d51b0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ce5c04e0865f4055b1f4ccc3734d51b0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 30 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -30 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                30.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n30.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1726360321044922}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 12]
consumption (rows=resources) = [[2, 3, 3], [2, 2, 2], [2, 2, 2]]
capacity = [12, 15, 12]
upper_bounds = [6, 4, 4]"
1191,sub,8,28828090,29828190,0,28828090,1,"{'ok': True, 'value': 28828090, 'stdout': '28828090\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08294916152954102}",1,Compute: 50346387 - 21518297
1192,rod,2,8,4,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_pu11f0kc/main.py"", line 17, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_pu11f0kc/main.py"", line 13, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09316325187683105}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 3]"
1193,knap,16,355,1045,0,1034,0,"{'ok': True, 'value': 355, 'stdout': '355\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.14574694633483887}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 18, 15, 32, 21, 20, 21, 12, 1, 1, 17, 11, 3, 8, 25, 12]
V = [22, 63, 15, 37, 25, 35, 18, 46, 27, 17, 30, 8, 29, 49, 8, 34]
C = 119"
1194,rod,2,12,6,0,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_mzwkqx1v/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0879058837890625}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 3]"
1195,mul,2,1035,1035,1,1035,1,"{'ok': True, 'value': 1035, 'stdout': '1035\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07110023498535156}",1,Compute: 69 * 15
1196,rod,8,88,22,0,25,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07329821586608887}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [11, 14, 14, 16, 7, 6, 16, 2]"
1197,ilp_prod,4,32,31,0,14,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_8t3tey6e/main.py"", line 10, in <module>\n    prob += lpSum([4*x[0] + 5*x[1] + 8*x[2] for x in x.values()])\n  File ""/tmp/cot_exec_8t3tey6e/main.py"", line 10, in <listcomp>\n    prob += lpSum([4*x[0] + 5*x[1] + 8*x[2] for x in x.values()])\nTypeError: \'LpVariable\' object is not subscriptable\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1444242000579834}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5, 8]
consumption (rows=resources) = [[4, 2, 1], [1, 2, 1], [4, 3, 3]]
capacity = [16, 16, 14]
upper_bounds = [3, 4, 4]"
1198,knap,4,19,13,0,-1,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09353113174438477}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 2, 5, 1]
V = [7, 6, 6, 12]
C = 6"
1199,knap,32,1598,1059,0,-1,0,"{'ok': True, 'value': 1598, 'stdout': '1598\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0880281925201416}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [34, 2, 36, 64, 53, 32, 52, 19, 17, 19, 15, 57, 43, 22, 49, 5, 54, 40, 42, 60, 37, 5, 33, 57, 64, 1, 10, 31, 51, 33, 23, 12]
V = [27, 41, 111, 19, 39, 101, 125, 32, 45, 8, 31, 51, 41, 96, 34, 99, 74, 79, 72, 29, 70, 25, 5, 19, 13, 35, 97, 123, 118, 102, 45, 102]
C = 536"
1200,knap,32,1417,1045,0,-1,0,"{'ok': True, 'value': 1417, 'stdout': '1417\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0762786865234375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 60, 15, 45, 64, 31, 47, 1, 58, 10, 35, 35, 13, 7, 52, 45, 39, 48, 13, 12, 44, 5, 28, 37, 34, 7, 34, 5, 1, 12, 15, 20]
V = [26, 105, 11, 77, 124, 16, 93, 68, 110, 92, 125, 44, 34, 8, 38, 89, 48, 121, 78, 4, 74, 102, 25, 88, 118, 20, 54, 14, 11, 36, 6, 114]
C = 448"
1201,lcs,8,4,4,1,6,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07489371299743652}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbaadcc""
T = ""daccbccc"""
1202,add,8,136875394,334483454,0,136875394,1,"{'ok': True, 'value': 136875394, 'stdout': '136875394\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07298088073730469}",1,Compute: 39512006 + 97363388
1203,mul,4,39163712,162,0,3933952,0,"{'ok': True, 'value': 39163712, 'stdout': '39163712\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07386970520019531}",1,Compute: 6848 * 5719
1204,rod,4,20,14,0,16,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07544350624084473}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 10, 5, 6]"
1205,rod,8,104,30,0,31,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0830225944519043}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [13, 12, 24, 17, 18, 7, 23, 7]"
1206,rod,32,1328,1055,0,81,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0547051429748535}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [18, 83, 59, 49, 58, 92, 26, 95, 91, 5, 68, 29, 12, 63, 41, 76, 20, 45, 36, 24, 72, 57, 31, 26, 54, 61, 60, 29, 2, 61, 28, 81]"
1207,knap,8,117,105,0,145,0,"{'ok': True, 'value': 117, 'stdout': '117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0901176929473877}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 14, 2, 6, 9, 10, 10, 14]
V = [1, 32, 5, 31, 19, 30, 24, 31]
C = 40"
1208,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08476591110229492}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babdbcaacacbacdd""
T = ""caadcbaadbcddccdd"""
1209,rod,16,296,500,0,7,0,"{'ok': True, 'value': 296, 'stdout': '296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09481096267700195}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [17, 37, 20, 25, 20, 10, 8, 36, 45, 41, 28, 2, 26, 20, 33, 7]"
1210,sub,16,1571744048857065,1571744038807126,0,1571724038837165,0,"{'ok': True, 'value': 1571744048857065, 'stdout': '1571744048857065\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08565831184387207}",1,Compute: 9421282990469243 - 7849538941612178
1211,add,16,13931166778480117,111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,0,13931166778479117,0,"{'ok': True, 'value': 13931166778480117, 'stdout': '13931166778480117\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08239054679870605}",1,Compute: 6194903765834171 + 7736263012645946
1212,sub,8,83928413,83928413,1,83928413,1,"{'ok': True, 'value': 83928413, 'stdout': '83928413\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834357738494873}",1,Compute: 99798015 - 15869602
1213,ilp_prod,32,315,105,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_8cbi0hq3/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22785711288452148}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [61, 44, 35, 44, 36, 73]
consumption (rows=resources) = [[7, 12, 25, 27, 28, 15], [14, 23, 16, 13, 27, 2], [13, 19, 32, 14, 13, 22], [22, 27, 1, 1, 31, 24]]
capacity = [78, 117, 114, 107]
upper_bounds = [4, 3, 3, 3, 3, 4]"
1214,add,4,12006,6,0,12006,1,"{'ok': True, 'value': 12006, 'stdout': '12006\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07437753677368164}",1,Compute: 6815 + 5191
1215,lcs,32,21,10,0,26,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08630728721618652}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acaccadcadddccbdacbdadcaacaaadcc""
T = ""cbccaaccdaccdbcdcacdccabccaddbadc"""
1216,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_5z59e7qf/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07389521598815918}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
1217,add,16,14262311179187505,140649751214977268,0,14262311179187505,1,"{'ok': True, 'value': 14262311179187505, 'stdout': '14262311179187505\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07327938079833984}",1,Compute: 6654161406497512 + 7608149772689993
1218,mul,2,5696,5536,0,5636,0,"{'ok': True, 'value': 5696, 'stdout': '5696\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08536171913146973}",1,Compute: 64 * 89
1219,ilp_prod,16,199,140,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_rbjzjo5n/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2450573444366455}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [14, 25, 40, 36, 25, 29]
consumption (rows=resources) = [[12, 1, 6, 15, 7, 2], [10, 6, 6, 5, 1, 8], [7, 3, 3, 15, 16, 4], [3, 13, 14, 6, 5, 7]]
capacity = [56, 45, 32, 61]
upper_bounds = [4, 4, 4, 3, 3, 5]"
1220,ilp_partition,8,1,1,1,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19664788246154785}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 17, 2, 6, 1, 2, 20, 23]"
1221,sub,32,62120171106341491069622296415672,62118261106341491070054696416672,0,62120171106341491070022296414672,0,"{'ok': True, 'value': 62120171106341491069622296415672, 'stdout': '62120171106341491069622296415672\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08424544334411621}",1,Compute: 92173607440075579025102774185424 - 30053436333734087955480477769752
1222,lcs,8,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08137774467468262}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddcacbcb""
T = ""daccccbd"""
1223,knap,32,1644,124,0,-1,0,"{'ok': True, 'value': 1644, 'stdout': '1644\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08480668067932129}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [60, 56, 47, 2, 48, 15, 49, 26, 38, 36, 58, 58, 7, 63, 2, 37, 19, 60, 40, 29, 40, 23, 8, 4, 54, 53, 23, 60, 18, 5, 62, 1]
V = [84, 17, 87, 51, 15, 92, 76, 24, 61, 62, 3, 82, 9, 73, 21, 71, 82, 24, 11, 29, 106, 115, 56, 36, 124, 56, 76, 53, 109, 120, 35, 124]
C = 550"
1224,ilp_prod,4,21,27,0,The answer will be printed when the code is executed.,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6fb41092a9d5430a867315e9fd591b0c-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6fb41092a9d5430a867315e9fd591b0c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 20 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15496253967285156}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 5, 4]
consumption (rows=resources) = [[3, 3, 1], [3, 2, 2], [3, 4, 4]]
capacity = [14, 8, 10]
upper_bounds = [3, 3, 3]"
1225,ilp_partition,4,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18754124641418457}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 12, 5, 4]"
1226,rod,2,12,5,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dnejb0nt/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07589459419250488}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
1227,mul,32,3961298229560579540631212561108903877560746451375652967831935168,2,0,393863446888958458538484084883364664648864646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464,0,"{'ok': True, 'value': 3961298229560579540631212561108903877560746451375652967831935168, 'stdout': '3961298229560579540631212561108903877560746451375652967831935168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.205427885055542}",1,Compute: 53595675385116018877425149182772 * 73910781067620732153259556028144
1228,mul,8,4457171281038308,4405987574846708,0,4451395544514588,0,"{'ok': True, 'value': 4457171281038308, 'stdout': '4457171281038308\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0838022232055664}",1,Compute: 57142708 * 78000701
1229,sub,32,17390746012109090425277348809947,163910752412145090333277382815947,0,173907456012089090425277348809947,0,"{'ok': True, 'value': 17390746012109090425277348809947, 'stdout': '17390746012109090425277348809947\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08145022392272949}",1,Compute: 95792249593648368929646741799551 - 78401503581539278504369392989604
1230,knap,2,7,10,0,3,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0926823616027832}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 5]
V = [5, 3, 7]
C = 5"
1231,mul,8,4586791604528000,7642,0,453936873456000,0,"{'ok': True, 'value': 4586791604528000, 'stdout': '4586791604528000\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07210159301757812}",1,Compute: 71861888 * 63827875
1232,ilp_partition,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18656134605407715}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 2, 2, 11]"
1233,ilp_partition,2,0,1,0,6,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1891474723815918}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 4, 6, 3]"
1234,add,8,154341975,76833335,0,154342075,0,"{'ok': True, 'value': 154341975, 'stdout': '154341975\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08880472183227539}",1,Compute: 67801111 + 86540864
1235,mul,4,10690331,109,0,10678921,0,"{'ok': True, 'value': 10690331, 'stdout': '10690331\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07697224617004395}",1,Compute: 7429 * 1439
1236,mul,4,34872084,5590804,0,34754844,0,"{'ok': True, 'value': 34872084, 'stdout': '34872084\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08321952819824219}",1,Compute: 4842 * 7202
1237,knap,2,15,15,1,1,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08712005615234375}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 1, 5]
V = [8, 7, 8]
C = 5"
1238,rod,32,1184,1055,0,74,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0370686054229736}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [37, 71, 72, 93, 49, 4, 79, 6, 67, 45, 49, 82, 82, 85, 80, 62, 4, 78, 78, 16, 34, 6, 47, 31, 25, 25, 63, 74, 84, 78, 63, 33]"
1239,knap,8,75,103,0,103,0,"{'ok': True, 'value': 75, 'stdout': '75\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10016465187072754}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 6, 15, 5, 15, 5, 14, 12]
V = [21, 8, 2, 10, 23, 21, 14, 8]
C = 43"
1240,add,16,10877262762390199,9658523016506134,0,21845922775346799,0,"{'ok': True, 'value': 10877262762390199, 'stdout': '10877262762390199\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0933840274810791}",1,Compute: 1218739745884065 + 9658523016506134
1241,knap,8,81,114,0,143,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3610422611236572}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 11, 4, 6, 2, 15, 16, 16]
V = [18, 28, 15, 3, 3, 21, 25, 32]
C = 42"
1242,ilp_prod,4,42,35,0,3,0,"{'ok': True, 'value': 4, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ba0ccc38e9c7465dbce47dae0ee983ab-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/ba0ccc38e9c7465dbce47dae0ee983ab-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 28 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 24.0\nx_0 = 0.0\nx_1 = 0.0\nx_2 = 4.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15003037452697754}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 7, 7]
consumption (rows=resources) = [[1, 3, 2], [4, 1, 4], [4, 1, 3]]
capacity = [16, 14, 15]
upper_bounds = [3, 5, 3]"
1243,knap,2,8,12,0,-1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0745387077331543}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 2]
V = [7, 8, 2]
C = 6"
1244,add,8,110993114,110993114,1,110993114,1,"{'ok': True, 'value': 110993114, 'stdout': '110993114\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07329034805297852}",1,Compute: 94591801 + 16401313
1245,ilp_prod,16,227,The actual solution would require a linear programming solver or an optimization library to handle the constraints and variables.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_pmrg6tk2/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2270677089691162}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [43, 23, 18, 33, 6, 45]
consumption (rows=resources) = [[11, 2, 1, 11, 1, 16], [14, 10, 1, 3, 3, 14], [1, 9, 1, 1, 8, 2], [11, 1, 9, 16, 14, 9]]
capacity = [33, 63, 49, 59]
upper_bounds = [3, 5, 6, 3, 4, 3]"
1246,rod,16,368,46,0,65,0,"{'ok': True, 'value': 368, 'stdout': '368\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09384560585021973}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [23, 41, 10, 28, 18, 27, 36, 11, 12, 27, 40, 44, 4, 30, 44, 15]"
1247,lcs,8,5,4,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07449054718017578}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadcaaca""
T = ""baaacdaad"""
1248,knap,8,109,110,0,103,0,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07445573806762695}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 11, 12, 5, 3, 15, 4, 4]
V = [10, 11, 22, 27, 14, 17, 23, 23]
C = 31"
1249,mul,32,2645499741768251367050716392517510347837213158801401821797143392,26574535363935105907575783451555566666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,26482534158935504557698356844486666446644884229776,0,"{'ok': True, 'value': 2645499741768251367050716392517510347837213158801401821797143392, 'stdout': '2645499741768251367050716392517510347837213158801401821797143392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08348727226257324}",1,Compute: 35387607415539549415399910310342 * 74757801811900648914964884229776
1250,ilp_partition,4,1,2,0,6,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.33685803413391113}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 3, 7, 1]"
1251,knap,4,26,26,1,2,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07218599319458008}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 6, 2, 5]
V = [16, 10, 4, 10]
C = 7"
1252,ilp_assign,4,8,64,0,11,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40814805030822754}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3, 11, 8], [10, 3, 10, 5], [2, 5, 6, 3], [8, 6, 1, 6]]"
1253,rod,4,24,14,0,14,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07566165924072266}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 8, 4, 10]"
1254,rod,2,3,3,1,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_16ffaq_2/main.py"", line 17, in <module>\n    print(rod_cutting(N, P))\n  File ""/tmp/cot_exec_16ffaq_2/main.py"", line 10, in rod_cutting\n    max_revenue[i] = max(max_revenue[i], P[j] + max_revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07977795600891113}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 3]"
1255,ilp_partition,8,1,1,1,15,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19695711135864258}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 11, 23, 17, 3, 18, 11, 8]"
1256,add,16,15025825149936113,19026817467975277,0,15025825149936113,1,"{'ok': True, 'value': 15025825149936113, 'stdout': '15025825149936113\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0830545425415039}",1,Compute: 5151232547987352 + 9874592601948761
1257,add,2,95,95,1,95,1,"{'ok': True, 'value': 95, 'stdout': '95\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08437085151672363}",1,Compute: 72 + 23
1258,knap,4,17,14,0,14,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0810396671295166}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 3, 3]
V = [9, 1, 6, 8]
C = 7"
1259,ilp_assign,32,79,187,0,110,0,"{'ok': True, 'value': 79, 'stdout': '79\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38497495651245117}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[26, 31, 9, 14, 47, 60, 10], [7, 43, 73, 87, 10, 4, 84], [10, 42, 55, 95, 11, 18, 7], [6, 17, 8, 13, 31, 31, 94], [38, 3, 25, 10, 69, 89, 44], [39, 35, 71, 51, 76, 16, 59], [26, 33, 78, 30, 55, 31, 20]]"
1260,mul{'ok': True, 'value': 14581320562289096416013341064760, 'stdout': '14581320562289096416013341064760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08542275428771973}",1,Compute: 8554033082169720 * 1704613534016233
1261,mul,8,4766734483165788,4734545531865916,0,4754858531993998,0,"{'ok': True, 'value': 4766734483165788, 'stdout': '4766734483165788\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08178162574768066}",1,Compute: 80298987 * 59362324
1262,mul,8,3944701521598176,10,0,3881343963348912,0,"{'ok': True, 'value': 3944701521598176, 'stdout': '3944701521598176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07209253311157227}",1,Compute: 74708694 * 52801104
1263,lcs,32,19,10,0,18,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0736689567565918}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babcbabdadbdacabbcdddddbbbcabdcb""
T = ""cbacddcadcdcadddbcaababddbaabdba"""
1264,ilp_assign,2,2,2,1,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6382472515106201}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [1, 3]]"
1265,rod,8,27,24,0,22,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_zsjlhhsj/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08409762382507324}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [2, 5, 7, 10, 3, 22, 7, 1]"
1266,ilp_partition,16,1,1,1,2,0,"{'ok': True, 'value': 369, 'stdout': '369\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1992177963256836}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 45, 40, 16, 4, 28, 41, 40, 25, 37, 15, 13, 2, 9, 44, 8]"
1267,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3775002956390381}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [3, 5]]"
1268,ilp_prod,16,275,209,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_pc50h19q/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_pc50h19q/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16708135604858398}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 42, 48, 33, 17, 28]
consumption (rows=resources) = [[12, 9, 10, 2, 15, 6], [12, 3, 7, 6, 12, 4], [16, 16, 4, 3, 12, 9], [4, 6, 6, 10, 8, 2]]
capacity = [57, 39, 55, 41]
upper_bounds = [3, 3, 5, 4, 3, 6]"
1269,ilp_prod,8,27,105,0,The answer will be printed after running the code.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_au6z_buv/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_au6z_buv/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15285801887512207}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6, 7, 7]
consumption (rows=resources) = [[5, 5, 3, 4], [3, 6, 6, 4], [4, 1, 4, 8], [6, 3, 7, 8]]
capacity = [31, 22, 30, 28]
upper_bounds = [4, 3, 3, 3]"
1270,add,2,98,98,1,98,1,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08499574661254883}",1,Compute: 10 + 88
1271,add,32,133963268034918098089831886667393,0,0,133963268034918108090831886667493,0,"{'ok': True, 'value': 133963268034918098089831886667393, 'stdout': '133963268034918098089831886667393\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07484841346740723}",1,Compute: 92993242020061286979453224078191 + 40970026014856811110378662589202
1272,knap,32,1773,1045,0,583,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_i2vxaqze/main.py"", line 1, in <module>\n    from scipy.optimize import linear_sum_bound\nImportError: cannot import name \'linear_sum_bound\' from \'scipy.optimize\' (/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/scipy/optimize/__init__.py)\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3795170783996582}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 32, 37, 26, 48, 46, 4, 51, 58, 8, 28, 18, 59, 47, 26, 39, 38, 56, 44, 64, 47, 14, 10, 28, 22, 41, 37, 64, 57, 36, 1, 59]
V = [121, 24, 43, 127, 36, 97, 72, 118, 26, 62, 44, 110, 113, 21, 15, 13, 94, 83, 84, 15, 56, 118, 62, 85, 70, 113, 100, 10, 123, 82, 19, 14]
C = 583"
1273,rod,16,480,47,0,64,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11450481414794922}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 1, 37, 35, 19, 24, 23, 36, 16, 4, 27, 45, 47, 43, 37, 4]"
1274,ilp_assign,4,20,,0,26,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3708031177520752}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 9, 8, 9], [8, 9, 12, 12], [12, 8, 10, 3], [10, 1, 10, 6]]"
1275,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08269143104553223}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ca""
T = ""cb"""
1276,mul,2,612,612,1,612,1,"{'ok': True, 'value': 612, 'stdout': '612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08118653297424316}",1,Compute: 36 * 17
1277,lcs,16,8,8,1,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08084249496459961}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdabdbabcbdbaadb""
T = ""aaddcdaabaabccba"""
1278,sub,2,47,47,1,47,1,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08027267456054688}",1,Compute: 64 - 17
1279,ilp_partition,16,0,10,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22698235511779785}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 29, 11, 26, 25, 13, 30, 22, 25, 39, 45, 14, 37, 34, 4, 25]"
1280,mul,2,2145,2115,0,2115,0,"{'ok': True, 'value': 2145, 'stdout': '2145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10291838645935059}",1,Compute: 65 * 33
1281,ilp_prod,8,92,100,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_lnumm8lt/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_lnumm8lt/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18226361274719238}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 20, 12, 18]
consumption (rows=resources) = [[8, 8, 6, 5], [2, 2, 2, 2], [4, 7, 8, 2], [8, 1, 3, 3]]
capacity = [29, 26, 21, 26]
upper_bounds = [3, 3, 3, 5]"
1282,ilp_prod,4,24,53,0,16,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/17bca0c7fc7f4a0aac2e9ad4a88020a3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/17bca0c7fc7f4a0aac2e9ad4a88020a3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.146315336227417}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6, 5]
consumption (rows=resources) = [[4, 3, 4], [2, 3, 2], [1, 3, 4]]
capacity = [12, 13, 16]
upper_bounds = [3, 4, 3]"
1283,knap,32,1543,1049,0,2055,0,"{'ok': True, 'value': 1543, 'stdout': '1543\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09113407135009766}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [38, 57, 1, 49, 62, 32, 6, 29, 54, 5, 36, 28, 36, 53, 64, 35, 31, 19, 61, 30, 15, 34, 2, 27, 28, 32, 62, 20, 17, 6, 62, 36]
V = [90, 55, 108, 52, 52, 30, 29, 81, 94, 16, 128, 58, 16, 51, 44, 98, 42, 15, 56, 67, 22, 95, 18, 109, 91, 54, 68, 61, 77, 119, 65, 71]
C = 533"
1284,ilp_assign,32,168,187,0,115,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_bde_hez4/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.4023702144622803}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[78, 82, 30, 58, 83, 47, 16], [19, 45, 25, 73, 57, 59, 26], [34, 89, 38, 38, 65, 68, 68], [5, 30, 72, 10, 81, 30, 96], [13, 46, 53, 31, 75, 44, 12], [23, 66, 18, 82, 7, 19, 55], [12, 84, 68, 92, 90, 80, 8]]"
1285,knap,32,1677,1045,0,0,0,"{'ok': True, 'value': 2237, 'stdout': '2237.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3701968193054199}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 15, 12, 8, 24, 17, 55, 38, 61, 21, 53, 23, 38, 27, 54, 24, 8, 53, 42, 22, 55, 6, 61, 16, 12, 25, 47, 49, 55, 4, 22, 21]
V = [118, 103, 29, 20, 75, 68, 75, 90, 46, 109, 78, 10, 75, 89, 92, 60, 21, 94, 112, 92, 49, 39, 22, 56, 31, 124, 121, 37, 124, 60, 81, 37]
C = 491"
1286,knap,4,31,37,0,2,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08443140983581543}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 5, 4, 5]
V = [11, 16, 15, 4]
C = 10"
1287,ilp_partition,2,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19105005264282227}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 4, 1, 4]"
1288,ilp_prod,2,56,13,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/37e7f381b16741f5ae0c275bada715fe-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/37e7f381b16741f5ae0c275bada715fe-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16129803657531738}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[1, 1], [3, 1]]
capacity = [7, 9]
upper_bounds = [3, 7]"
1289,rod,4,48,16,0,14,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07459282875061035}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [12, 8, 10, 10]"
1290,mul,2,1215,1215,1,1215,1,"{'ok': True, 'value': 1215, 'stdout': '1215\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07163047790527344}",1,Compute: 45 * 27
1291,rod,2,5,5,1,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_m5dpzxbc/main.py"", line 17, in <module>\n    print(rod_cutting(N, P))\n  File ""/tmp/cot_exec_m5dpzxbc/main.py"", line 10, in rod_cutting\n    max_revenue[i] = max(max_revenue[i], P[j] + max_revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07368135452270508}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 5]"
1292,ilp_partition,16,1,1,1,1,1,"{'ok': True, 'value': 363, 'stdout': '363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18898391723632812}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 7, 39, 29, 10, 18, 12, 14, 28, 33, 45, 36, 5, 19, 18, 48]"
1293,ilp_prod,4,42,43,0,12,0,"{'ok': True, 'value': 36, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/deccf435744e4ecb973aa15abf692499-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/deccf435744e4ecb973aa15abf692499-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 40 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -36 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                36.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n36.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15077853202819824}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 6]
consumption (rows=resources) = [[3, 4, 1], [2, 4, 1], [1, 2, 4]]
capacity = [10, 14, 12]
upper_bounds = [3, 3, 3]"
1294,ilp_partition,32,0,10,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07889223098754883}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 33, 27, 63, 47, 41, 49, 7, 36, 70, 57, 63, 30, 27, 70, 59, 7, 4, 20, 13, 50, 61, 36, 67]"
1295,mul,32,2928223554525165497050529059070011195442675297020248215456954309,2912642465290887747658173877457457457,0,"The result of the multiplication is a very large number, so it's not feasible to print the exact number here.",0,"{'ok': True, 'value': 2928223554525165497050529059070011195442675297020248215456954309, 'stdout': '2928223554525165497050529059070011195442675297020248215456954309\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08379077911376953}",1,Compute: 36736964255350508054372867457457 * 79707825997045690351422683441237
1296,ilp_prod,4,67,33,0,12,0,"{'ok': True, 'value': 33, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/60f54d98a69c4a2bb9712011752e81f2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/60f54d98a69c4a2bb9712011752e81f2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 33 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -33 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                33.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n33.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16068315505981445}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 6, 8]
consumption (rows=resources) = [[4, 3, 1], [1, 2, 2], [2, 4, 1]]
capacity = [12, 16, 12]
upper_bounds = [3, 3, 8]"
1297,sub,4,930,930,1,930,1,"{'ok': True, 'value': 930, 'stdout': '930\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07656264305114746}",1,Compute: 3126 - 2196
1298,sub,32,47566599248902870101767333639948,7,0,47566600248892869901767333639948,0,"{'ok': True, 'value': 47566599248902870101767333639948, 'stdout': '47566599248902870101767333639948\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08452987670898438}",1,Compute: 73802527636915941729453116854539 - 26235928388013071627685783214591
1299,sub,4,4213,4123,0,4213,1,"{'ok': True, 'value': 4213, 'stdout': '4213\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08212447166442871}",1,Compute: 7893 - 3680
1300,lcs,16,7,6,0,10,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0790560245513916}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abbbdccabcabcbdc""
T = ""cccacacddaddaab"""
1301,ilp_assign,2,6,4,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4116363525390625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [4, 2]]"
1302,ilp_prod,8,51,81,0,96,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e6ce81274618415eaaa2da729698b5e0-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e6ce81274618415eaaa2da729698b5e0-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15163731575012207}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 17, 12, 7]
consumption (rows=resources) = [[7, 5, 6, 5], [7, 7, 5, 8], [7, 4, 3, 8], [5, 3, 2, 3]]
capacity = [20, 24, 25, 24]
upper_bounds = [3, 3, 3, 3]"
1303,knap,8,92,155,0,103,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08446693420410156}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 3, 11, 1, 13, 14, 7, 14]
V = [16, 27, 21, 8, 2, 14, 20, 5]
C = 35"
1304,ilp_prod,16,130,168,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_gynbr_wp/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23048615455627441}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 20, 26, 12, 40, 9]
consumption (rows=resources) = [[1, 15, 2, 11, 4, 7], [5, 6, 4, 4, 12, 10], [5, 9, 9, 2, 12, 13], [15, 11, 5, 6, 5, 14]]
capacity = [44, 47, 37, 40]
upper_bounds = [3, 3, 4, 4, 3, 3]"
1305,lcs,16,9,7,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07581090927124023}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcacbbddddbaadcc""
T = ""ddcdddbaaccacccd"""
1306,ilp_prod,4,24,39,0,9,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/8ece89c0f24a4b66bff5d8737317e333-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/8ece89c0f24a4b66bff5d8737317e333-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14898443222045898}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 5]
consumption (rows=resources) = [[2, 2, 1], [1, 3, 1], [3, 4, 3]]
capacity = [14, 8, 9]
upper_bounds = [3, 3, 3]"
1307,lcs,8,5,5,1,-1,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08295583724975586}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbbcadc""
T = ""cbcadbcb"""
1308,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07991385459899902}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcddbbdbbbcaadd""
T = ""cacbbbacaaabcda"""
1309,ilp_assign,16,62,105,0,110,0,"{'ok': True, 'value': 62, 'stdout': '62\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40634894371032715}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[28, 21, 4, 9, 12, 7, 26], [31, 16, 1, 46, 40, 27, 47], [46, 5, 40, 32, 20, 12, 45], [42, 6, 30, 23, 27, 43, 23], [41, 22, 7, 41, 2, 34, 34], [33, 29, 29, 3, 6, 1, 9], [44, 38, 5, 25, 18, 19, 10]]"
1310,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38642168045043945}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [3, 3]]"
1311,ilp_prod,2,21,35,0,15,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e8ab5519fb2b4daaae1a61e68b51e491-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e8ab5519fb2b4daaae1a61e68b51e491-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1574103832244873}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7]
consumption (rows=resources) = [[1, 1], [2, 2]]
capacity = [9, 6]
upper_bounds = [3, 3]"
1312,ilp_assign,4,16,1,0,11,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3745732307434082}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2, 11, 3], [1, 8, 7, 10], [4, 10, 7, 9], [11, 9, 10, 6]]"
1313,ilp_partition,4,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22245001792907715}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 3, 10, 10]"
1314,knap,4,22,15,0,4,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07478094100952148}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 3, 3, 3]
V = [4, 11, 1, 11]
C = 7"
1315,ilp_partition,32,1,10,0,60,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09339761734008789}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [87, 19, 51, 58, 76, 11, 47, 11, 32, 38, 50, 79, 11, 2, 39, 70, 60, 91, 21, 53, 59, 39, 46, 21]"
1316,ilp_prod,4,72,36,0,30,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9b92de9353784ac0966df3c3bea88797-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9b92de9353784ac0966df3c3bea88797-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 35 RHS\nAt line 41 BOUNDS\nAt line 45 ENDATA\nProblem MODEL has 5 rows, 3 columns and 15 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 4.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15301799774169922}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8, 12]
consumption (rows=resources) = [[4, 3, 2], [4, 4, 1], [1, 1, 1]]
capacity = [13, 11, 12]
upper_bounds = [3, 3, 6]"
1317,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08632683753967285}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbbddbac""
T = ""addaadc"""
1318,ilp_prod,8,72,50,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_3y_ommbf/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_3y_ommbf/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15337848663330078}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 6, 11, 18]
consumption (rows=resources) = [[8, 5, 7, 6], [3, 2, 2, 3], [7, 5, 2, 5], [3, 8, 7, 4]]
capacity = [27, 24, 24, 26]
upper_bounds = [3, 3, 3, 4]"
1319,rod,2,6,4,0,4,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08378982543945312}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 4]"
1320,ilp_assign,4,16,11,0,18,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42831921577453613}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 4, 2, 7], [5, 8, 7, 11], [8, 7, 3, 7], [4, 7, 11, 4]]"
1321,rod,2,6,5,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08212399482727051}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 5]"
1322,mul,32,2946145585441695065159316959752629356192731756085203458431459995,295161666844286688646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464,0,"The result of the multiplication is a very large number, which is beyond the range of standard integer types in Python. Python's built-in multiplication operator will handle this correctly, but the result will be printed in scientific notation.",0,"{'ok': True, 'value': 2946145585441695065159316959752629356192731756085203458431459995, 'stdout': '2946145585441695065159316959752629356192731756085203458431459995\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0830543041229248}",1,Compute: 29942095105009438986150516134555 * 98394770810436456873993822711809
1323,ilp_partition,4,0,1,0,5,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19883942604064941}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 10, 12, 7]"
1324,add,4,9956,9,0,9956,1,"{'ok': True, 'value': 9956, 'stdout': '9956\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09730696678161621}",1,Compute: 2268 + 7688
1325,sub,4,5790,6670,0,5790,1,"{'ok': True, 'value': 5790, 'stdout': '5790\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08224296569824219}",1,Compute: 7223 - 1433
1326,rod,4,24,10,0,6,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07718992233276367}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 4, 3, 5]"
1327,ilp_assign,32,123,200,0,209,0,"{'ok': True, 'value': 123, 'stdout': '123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3617522716522217}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[56, 72, 23, 58, 50, 24, 73], [29, 53, 54, 45, 92, 36, 80], [92, 15, 79, 79, 47, 25, 30], [96, 16, 14, 17, 81, 73, 17], [39, 79, 89, 75, 5, 77, 49], [15, 83, 13, 50, 59, 80, 34], [86, 33, 78, 56, 81, 34, 20]]"
1328,mul,2,2150,2125,0,2150,1,"{'ok': True, 'value': 2150, 'stdout': '2150\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07397031784057617}",1,Compute: 25 * 86
1329,mul,4,64687038,4495284,0,64844938,0,"{'ok': True, 'value': 64687038, 'stdout': '64687038\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07345747947692871}",1,Compute: 7527 * 8594
1330,mul,32,2329491854589921029042216405010913777610884881622359445491348900,The answer is the sum of the products of the smaller parts of the numbers{'ok': True, 'value': 2329491854589921029042216405010913777610884881622359445491348900, 'stdout': '2329491854589921029042216405010913777610884881622359445491348900\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0825948715209961}",1,Compute: 39448317520693116255716827588020 * 59051741645710402580920621134445
1331,knap,4,12,11,0,1,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08263850212097168}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 6, 5, 6]
V = [2, 3, 1, 10]
C = 9"
1332,ilp_assign,16,27,105,0,110,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37152814865112305}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 13, 27, 32, 4, 6, 45], [1, 20, 10, 9, 24, 45, 44], [40, 41, 6, 7, 22, 42, 47], [37, 23, 44, 47, 5, 5, 35], [42, 14, 44, 16, 28, 10, 3], [19, 1, 29, 6, 28, 46, 38], [33, 2, 27, 42, 12, 15, 21]]"
1333,sub,8,23280575,2368057,0,23280575,1,"{'ok': True, 'value': 23280575, 'stdout': '23280575\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08260560035705566}",1,Compute: 57368366 - 34087791
1334,ilp_prod,8,92,100,0,17,0,"{'ok': True, 'value': 92, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0279f831f84b476ea0ec48472af8b68e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0279f831f84b476ea0ec48472af8b68e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 99.2632 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 1.9999\nCbc0012I Integer solution of -72 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -92 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -92, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 1 variables fixed on reduced cost\nCuts at root node changed objective from -95.7241 to -92\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                92.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n92.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17140555381774902}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 10, 20, 16]
consumption (rows=resources) = [[6, 2, 2, 8], [5, 8, 8, 1], [5, 8, 6, 8], [3, 4, 1, 8]]
capacity = [23, 23, 23, 17]
upper_bounds = [3, 3, 3, 3]"
1335,rod,4,28,13,0,18,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08439755439758301}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 6, 6, 9]"
1336,ilp_prod,32,266,300,0,255,0,"{'ok': True, 'value': 266, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/275cb0d8eac44add87ed992ce58beb47-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/275cb0d8eac44add87ed992ce58beb47-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 304.357 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -179 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 4 columns\nCbc0012I Integer solution of -266 found by DiveCoefficient after 11 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 5.6666667\nCbc0013I At root node, 3 cuts changed objective from -304.35677 to -266 in 5 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 11 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 15 row cuts average 5.1 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 2 row cuts average 5.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -266, took 11 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -304.357 to -266\nProbing was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 5 times and created 11 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 5 times and created 15 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 5 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                266.00000000\nEnumerated nodes:               0\nTotal iterations:               11\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n266.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15079188346862793}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [51, 87, 55, 69, 4, 28]
consumption (rows=resources) = [[20, 31, 6, 25, 21, 12], [27, 32, 14, 16, 1, 12], [5, 19, 24, 18, 10, 27], [26, 12, 18, 18, 3, 23]]
capacity = [70, 77, 106, 92]
upper_bounds = [3, 3, 4, 3, 3, 3]"
1337,rod,8,152,22,0,36,0,"{'ok': True, 'value': 152, 'stdout': '152\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07276248931884766}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [19, 6, 10, 22, 6, 11, 16, 8]"
1338,sub,8,5950393,11111,0,5950039,0,"{'ok': True, 'value': 5950393, 'stdout': '5950393\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07324743270874023}",1,Compute: 62435319 - 56484926
1339,sub,32,2624307936262550419734996137999,,0,-2624298136262549380734999613800,0,"{'ok': True, 'value': 2624307936262550419734996137999, 'stdout': '2624307936262550419734996137999\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07435989379882812}",1,Compute: 38699059795962203445903357162772 - 36074751859699653026168361024773
1340,mul,32,5015974143293776619623118517561362842298210794475875695801666099,523285169350494086881645,0,843413090,0,"{'ok': True, 'value': 10704242, 'stdout': '10704242\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07676458358764648}",0,Compute: 52328516935049408688164502909373 * 95855461554923208087175398937263
1341,mul,16,19993864561209211030762473735754,4086923448371126,0,1986444432349684584466444658646556,0,"{'ok': True, 'value': 19993864561209211030762473735754, 'stdout': '19993864561209211030762473735754\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07297873497009277}",1,Compute: 4892155386266879 * 4086923448371126
1342,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07311773300170898}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""cca"""
1343,mul,16,23807844692894708685887113355890,173,0,236486325883719555746583510,0,"{'ok': True, 'value': 23807844692894708685887113355890, 'stdout': '23807844692894708685887113355890\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07217240333557129}",1,Compute: 4346493012967910 * 5477483714310179
1344,add,2,111,111,1,111,1,"{'ok': True, 'value': 111, 'stdout': '111\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08435297012329102}",1,Compute: 22 + 89
1345,ilp_partition,2,2,1,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1990053653717041}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 3, 3]"
1346,ilp_assign,8,43,55,0,46,0,"{'ok': True, 'value': 43, 'stdout': '43\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37085938453674316}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 6, 7, 7, 18, 12, 3], [17, 8, 22, 22, 9, 23, 7], [17, 7, 9, 3, 7, 20, 23], [23, 16, 8, 3, 19, 12, 1], [19, 10, 22, 6, 7, 1, 18], [21, 23, 15, 24, 23, 20, 21], [17, 12, 20, 8, 13, 24, 5]]"
1347,add,16,8015073617684529,6329791326923287,0,8015073617684529,1,"{'ok': True, 'value': 8015073617684529, 'stdout': '8015073617684529\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08417010307312012}",1,Compute: 1685282290761242 + 6329791326923287
1348,ilp_assign,4,12,10,0,2,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41967344284057617}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 7, 5, 8], [1, 3, 6, 3], [8, 4, 4, 2], [3, 8, 7, 2]]"
1349,rod,2,12,6,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_p_mxepxm/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0777597427368164}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 1]"
1350,lcs,2,1,0,0,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08177065849304199}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""ba"""
1351,sub,2,37,37,1,37,1,"{'ok': True, 'value': 37, 'stdout': '37\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08260703086853027}",1,Compute: 88 - 51
1352,ilp_assign,4,19,0,0,28,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42865586280822754}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 9, 10, 11], [6, 7, 4, 7], [12, 1, 10, 12], [4, 10, 1, 8]]"
1353,ilp_partition,2,0,4,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18979549407958984}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 4, 6, 6]"
1354,sub,8,45656790,4677062,0,45656790,1,"{'ok': True, 'value': 45656790, 'stdout': '45656790\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07508087158203125}",1,Compute: 89100512 - 43443722
1355,mul,4,59320612,59844952,0,59544332,0,"{'ok': True, 'value': 59320612, 'stdout': '59320612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09606313705444336}",1,Compute: 9217 * 6436
1356,rod,16,480,46,0,7,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1072092056274414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 45, 11, 27, 41, 17, 6, 39, 37, 19, 9, 9, 11, 25, 3, 27]"
1357,knap,8,108,103,0,100,0,"{'ok': True, 'value': 147, 'stdout': '147.28571428571428\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39032959938049316}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 6, 15, 7, 9, 14, 14, 16]
V = [4, 22, 32, 22, 4, 21, 32, 24]
C = 47"
1358,lcs,32,19,10,0,26,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0881204605102539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adddadcacadccaadbcdcbddabcbcdabd""
T = ""bdbbadcdbdadcdbcbbdabdcbaccdbbc"""
1359,mul,16,71448496595636471954743332298752,7263434736,0,710434324663797000000000000000000,0,"{'ok': True, 'value': 71448496595636471954743332298752, 'stdout': '71448496595636471954743332298752\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07433724403381348}",1,Compute: 8404776456337408 * 8500939551076644
1360,mul,2,2542,2532,0,2542,1,"{'ok': True, 'value': 2542, 'stdout': '2542\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0749366283416748}",1,Compute: 82 * 31
1361,add,8,154935579,1138186,0,154935579,1,"{'ok': True, 'value': 154935579, 'stdout': '154935579\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07477831840515137}",1,Compute: 76095061 + 78840518
1362,knap,4,24,22,0,6,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08073616027832031}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 6, 4]
V = [13, 7, 11, 6]
C = 8"
1363,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08770012855529785}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dacb""
T = ""cbabc"""
1364,ilp_prod,4,30,59,0,15,0,"{'ok': True, 'value': 24, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5ce643f847aa489ebeea388048823967-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5ce643f847aa489ebeea388048823967-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 24 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -24 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                24.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n24.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16926026344299316}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7, 5]
consumption (rows=resources) = [[2, 2, 4], [3, 1, 3], [4, 3, 2]]
capacity = [8, 9, 15]
upper_bounds = [3, 4, 3]"
1365,rod,4,40,13,0,1,0,"{'ok': True, 'value': 40, 'stdout': '40\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0838785171508789}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [10, 4, 9, 1]"
1366,ilp_prod,2,18,24,0,24,0,"{'ok': True, 'value': 9, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/5f9ad3ab7f3248b4a98fb981f18ab6fb-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/5f9ad3ab7f3248b4a98fb981f18ab6fb-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n9.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1595618724822998}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[3, 2], [1, 3]]
capacity = [10, 8]
upper_bounds = [3, 3]"
1367,ilp_assign,8,29,56,0,4,0,"{'ok': True, 'value': 29, 'stdout': '29\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42981839179992676}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 12, 21, 20, 9, 9, 14], [15, 15, 14, 14, 23, 14, 9], [4, 5, 18, 17, 18, 20, 19], [14, 23, 1, 11, 6, 13, 24], [23, 17, 23, 10, 2, 23, 11], [22, 24, 1, 1, 1, 8, 12], [7, 3, 7, 2, 7, 21, 20]]"
1368,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07700634002685547}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ba""
T = ""dc"""
1369,ilp_partition,16,0,10,0,1,0,"{'ok': True, 'value': -436, 'stdout': '-436\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20400381088256836}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 42, 31, 16, 9, 48, 40, 23, 2, 22, 29, 48, 15, 32, 16, 47]"
1370,add,32,158482230127901008769253222363170,1610512808866294659234218992934554,0,158482230127901008769253222363170,1,"{'ok': True, 'value': 158482230127901008769253222363170, 'stdout': '158482230127901008769253222363170\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0745537281036377}",1,Compute: 61051280886629465923421899293455 + 97430949241271542845831323069715
1371,ilp_partition,32,0,100,0,0,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_q3dn3qtj/main.py"", line 13, in <module>\n    sum_can = np.where(dp)[0][-1]\nIndexError: index -1 is out of bounds for axis 0 with size 0\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.19544386863708496}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [56, 71, 24, 71, 85, 23, 90, 85, 36, 54, 96, 23, 83, 79, 50, 11, 55, 67, 94, 96, 6, 59, 91, 91]"
1372,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18800997734069824}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 14, 22, 19, 7, 16, 19, 3]"
1373,lcs,32,17,16,0,26,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07485795021057129}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbaddbbdabaabaadddababbdcbbdddbc""
T = ""ccddccbdcbbcaadadbdacddadadacdb"""
1374,rod,32,672,84,0,87,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.029853105545044}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [8, 22, 25, 84, 19, 6, 26, 80, 76, 46, 75, 67, 41, 25, 91, 10, 13, 2, 17, 15, 69, 87, 13, 16, 55, 62, 25, 69, 89, 68, 16, 19]"
1375,lcs,4,2,3,0,-1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0792396068572998}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badc""
T = ""cdbbc"""
1376,knap,2,9,11,0,-1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0780649185180664}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 2]
V = [6, 2, 9]
C = 6"
1377,lcs,8,4,4,1,26,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07632708549499512}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdcaccd""
T = ""aabbcdbaa"""
1378,ilp_assign,32,159,208,0,210,0,"{'ok': True, 'value': 159, 'stdout': '159\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4115283489227295}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[75, 45, 27, 57, 94, 53, 89], [90, 2, 74, 36, 57, 3, 33], [88, 17, 57, 38, 90, 50, 71], [58, 90, 85, 66, 14, 85, 50], [33, 52, 45, 60, 47, 48, 62], [46, 67, 17, 74, 45, 47, 94], [42, 15, 75, 34, 19, 20, 18]]"
1379,ilp_prod,32,252,330,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_t0pov17p/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22500014305114746}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 84, 17, 18, 84, 19]
consumption (rows=resources) = [[16, 19, 19, 17, 29, 22], [24, 15, 6, 17, 21, 20], [22, 1, 4, 21, 15, 30], [30, 19, 19, 7, 21, 30]]
capacity = [69, 104, 90, 67]
upper_bounds = [3, 3, 3, 4, 3, 3]"
1380,ilp_prod,8,42,60,0,The answer will be printed after running the code.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6yorvukq/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_6yorvukq/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1634058952331543}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 6, 12, 14]
consumption (rows=resources) = [[7, 5, 5, 2], [8, 4, 5, 8], [1, 4, 1, 2], [1, 6, 7, 3]]
capacity = [25, 17, 19, 19]
upper_bounds = [3, 3, 3, 3]"
1381,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1905503273010254}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 13, 23, 13, 23, 14, 7, 11]"
1382,add,32,121193135343713580394646271269987,10,0,121193135343713580394646271269987,1,"{'ok': True, 'value': 121193135343713580394646271269987, 'stdout': '121193135343713580394646271269987\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0747838020324707}",1,Compute: 91216472677439967225019626174205 + 29976662666273613169626645095782
1383,sub,2,21,21,1,21,1,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07350492477416992}",1,Compute: 52 - 31
1384,ilp_assign,32,140,105,0,186,0,"{'ok': True, 'value': 140, 'stdout': '140\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4060800075531006}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 83, 56, 12, 89, 4, 12], [95, 53, 28, 29, 29, 89, 64], [61, 12, 59, 82, 34, 86, 53], [71, 49, 53, 29, 77, 19, 80], [75, 36, 79, 31, 25, 45, 46], [57, 83, 31, 85, 21, 27, 96], [27, 10, 1, 36, 27, 4, 72]]"
1385,lcs,32,16,10,0,20,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0850825309753418}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abadabababbcbcbcbbabaccbadddcabc""
T = ""ccccbbbbddabacdacacddacabddbabdbb"""
1386,lcs,8,2,4,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08301210403442383}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babaacab""
T = ""dccccda"""
1387,ilp_prod,32,260,The actual answer would be the maximum profit obtained after solving the linear programming problem.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0gd1ebh0/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_0gd1ebh0/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17884063720703125}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 25, 66, 26, 56, 36]
consumption (rows=resources) = [[15, 26, 8, 24, 17, 31], [19, 30, 8, 5, 26, 14], [17, 29, 30, 18, 25, 5], [13, 20, 27, 4, 26, 12]]
capacity = [91, 77, 114, 98]
upper_bounds = [4, 3, 3, 3, 3, 3]"
1388,lcs,8,4,5,0,6,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07733035087585449}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cadcbcda""
T = ""ccccacadb"""
1389,add,32,162662784532163100738762565240173,167662784532152440738763065240493,0,162662784532163100738762565240173,1,"{'ok': True, 'value': 162662784532163100738762565240173, 'stdout': '162662784532163100738762565240173\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07433485984802246}",1,Compute: 87963353408913213698691288984590 + 74699431123249887040071276255583
1390,mul,2,5546,4536,0,5586,0,"{'ok': True, 'value': 5546, 'stdout': '5546\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0732729434967041}",1,Compute: 59 * 94
1391,add,2,138,138,1,138,1,"{'ok': True, 'value': 138, 'stdout': '138\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08077454566955566}",1,Compute: 50 + 88
1392,mul,32,8775367645159267182006903980682984812293450320158732656096136947,,0,8830159999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,"{'ok': True, 'value': 8775367645159267182006903980682984812293450320158732656096136947, 'stdout': '8775367645159267182006903980682984812293450320158732656096136947\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07407283782958984}",1,Compute: 93280356235180699770391606668553 * 94075194385349442013544702793499
1393,ilp_partition,2,2,0,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19933223724365234}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 4, 1]"
1394,knap,16,314,104,0,106,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3933291435241699}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 13, 26, 1, 7, 18, 31, 27, 19, 16, 11, 10, 3, 24, 24, 20]
V = [33, 9, 2, 41, 15, 5, 8, 28, 17, 29, 52, 11, 35, 19, 53, 5]
C = 130"
1395,ilp_prod,4,47,54,0,12,0,"{'ok': True, 'value': 30, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/256f19efa0bc48abb08c2b72e57b53a8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/256f19efa0bc48abb08c2b72e57b53a8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 30 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -30 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                30.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n30.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1788928508758545}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 12, 11]
consumption (rows=resources) = [[3, 2, 4], [1, 4, 2], [3, 3, 3]]
capacity = [15, 15, 12]
upper_bounds = [4, 3, 3]"
1396,sub,8,53089009,53089010,0,53088999,0,"{'ok': True, 'value': 53089009, 'stdout': '53089009\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08359003067016602}",1,Compute: 77125522 - 24036513
1397,mul,32,4307169759971018609187612092362744673028108772851350002459017480,0,0,4289349929644968455644558864964344444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444,0,"{'ok': True, 'value': 4307169759971018609187612092362744673028108772851350002459017480, 'stdout': '4307169759971018609187612092362744673028108772851350002459017480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08266258239746094}",1,Compute: 88479536460107374852321446327331 * 48679840924720319431669960501080
1398,knap,32,1683,1043,0,1056,0,"{'ok': True, 'value': 1683, 'stdout': '1683\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08646845817565918}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [25, 46, 11, 21, 23, 50, 14, 53, 59, 19, 1, 23, 8, 55, 29, 61, 12, 35, 47, 6, 14, 30, 14, 27, 41, 33, 18, 62, 6, 9, 17, 17]
V = [101, 16, 42, 125, 117, 36, 121, 79, 55, 114, 18, 45, 59, 111, 14, 72, 40, 55, 57, 66, 64, 105, 22, 41, 35, 68, 48, 96, 49, 74, 118, 78]
C = 443"
1399,ilp_assign,16,65,105,0,105,0,"{'ok': True, 'value': 65, 'stdout': '65\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40227317810058594}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 37, 42, 46, 3, 9, 24], [5, 23, 13, 33, 20, 12, 42], [44, 7, 47, 21, 11, 38, 10], [32, 39, 38, 41, 48, 10, 17], [30, 19, 39, 30, 27, 46, 12], [27, 39, 26, 13, 6, 6, 35], [40, 12, 44, 2, 25, 17, 16]]"
1400,ilp_partition,16,1,1,1,12,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21370315551757812}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [34, 23, 32, 7, 42, 14, 43, 20, 40, 20, 13, 29, 33, 3, 3, 23]"
1401,ilp_partition,32,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08733153343200684}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [34, 22, 41, 59, 76, 47, 14, 94, 60, 47, 81, 21, 65, 17, 41, 59, 32, 49, 39, 72, 29, 6, 89, 56]"
1402,add,2,132,132,1,132,1,"{'ok': True, 'value': 132, 'stdout': '132\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08953523635864258}",1,Compute: 80 + 52
1403,add,4,17604,17604,1,17604,1,"{'ok': True, 'value': 17604, 'stdout': '17604\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08381271362304688}",1,Compute: 8478 + 9126
1404,add,32,82735976987565689095689496002239,80755977007565689095689496004209,0,82735976987565689095690496002239,0,"{'ok': True, 'value': 82735976987565689095689496002239, 'stdout': '82735976987565689095689496002239\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0802605152130127}",1,Compute: 47023222752242752945728668760362 + 35712754235322936149960827241877
1405,ilp_assign,16,67,105,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_in3bk2wn/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.4036266803741455}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 45, 25, 10, 24, 34, 36], [45, 47, 47, 35, 4, 18, 45], [43, 5, 23, 29, 34, 5, 46], [39, 30, 16, 22, 48, 16, 27], [48, 26, 18, 8, 21, 38, 30], [24, 41, 29, 36, 39, 42, 16], [40, 2, 28, 17, 30, 24, 26]]"
1406,ilp_assign,32,128,187,0,110,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3792409896850586}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[36, 80, 34, 54, 24, 62, 15], [13, 4, 10, 29, 34, 16, 39], [80, 5, 28, 11, 25, 89, 70], [72, 6, 81, 14, 41, 72, 60], [18, 32, 72, 34, 66, 77, 50], [79, 19, 60, 64, 44, 75, 51], [58, 63, 62, 27, 33, 27, 94]]"
1407,ilp_prod,32,393,258,0,255,0,"{'ok': True, 'value': 393, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/62842aeb8e29400faa02d4ad0fda0756-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/62842aeb8e29400faa02d4ad0fda0756-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 428.3 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -309 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 6 columns, reduced to 4 rows 3 columns\nCbc0012I Integer solution of -377 found by DiveCoefficient after 314 iterations and 0 nodes (0.01 seconds)\nCbc0031I 4 added rows had average density of 6\nCbc0013I At root node, 4 cuts changed objective from -428.29983 to -414.75564 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 205 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 39 row cuts average 5.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -377 best solution, best possible -414.75564 (0.01 seconds)\nCbc0012I Integer solution of -388 found by rounding after 337 iterations and 1 nodes (0.02 seconds)\nCbc0004I Integer solution of -393 found after 458 iterations and 8 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -393, took 458 iterations and 8 nodes (0.02 seconds)\nCbc0032I Strong branching done 28 times (50 iterations), fathomed 1 nodes and fixed 1 variables\nCbc0035I Maximum depth 2, 3 variables fixed on reduced cost\nCuts at root node changed objective from -428.3 to -414.756\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 152 times and created 284 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 152 times and created 114 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                393.00000000\nEnumerated nodes:               8\nTotal iterations:               458\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n393.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17110347747802734}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [58, 47, 84, 36, 68, 3]
consumption (rows=resources) = [[29, 11, 16, 19, 8, 14], [23, 20, 8, 28, 1, 25], [12, 8, 22, 4, 20, 25], [29, 22, 2, 27, 8, 8]]
capacity = [100, 113, 93, 103]
upper_bounds = [3, 4, 4, 3, 4, 3]"
1408,ilp_partition,16,1,1,1,40,0,"{'ok': True, 'value': 361, 'stdout': '361\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19105291366577148}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [21, 46, 18, 46, 11, 19, 18, 34, 14, 19, 36, 13, 32, 18, 8, 8]"
1409,add,32,85076451935090143315896430888109,85076452935295143315896430888109,0,85076451935090143315896430288109,0,"{'ok': True, 'value': 85076451935090143315896430888109, 'stdout': '85076451935090143315896430888109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0835263729095459}",1,Compute: 20931334547547834595864497706299 + 64145117387542308720031933181810
1410,ilp_partition,2,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19650983810424805}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 2, 1, 5]"
1411,ilp_prod,4,26,33,0,21,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f4708864f41e40608f5a6bafe3be7726-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f4708864f41e40608f5a6bafe3be7726-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1564466953277588}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6, 12]
consumption (rows=resources) = [[1, 2, 4], [3, 3, 3], [3, 1, 1]]
capacity = [8, 10, 12]
upper_bounds = [3, 3, 3]"
1412,sub,16,4761878871871765,4761879871871765,0,4761878871871765,1,"{'ok': True, 'value': 4761878871871765, 'stdout': '4761878871871765\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08475828170776367}",1,Compute: 9400046184431083 - 4638167312559318
1413,mul{'ok': True, 'value': 12990889890204926789645503038314, 'stdout': '12990889890204926789645503038314\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08305573463439941}",1,Compute: 6114415828621483 * 2124633040068158
1414,sub,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09738016128540039}",1,Compute: 94 - 88
1415,add,2,116,116,1,116,1,"{'ok': True, 'value': 116, 'stdout': '116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09314298629760742}",1,Compute: 19 + 97
1416,knap,32,1624,1004,0,20,0,"{'ok': True, 'value': 1624, 'stdout': '1624\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09804368019104004}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [46, 48, 19, 34, 17, 52, 42, 57, 59, 56, 34, 6, 58, 45, 7, 38, 59, 55, 14, 6, 15, 62, 45, 46, 37, 49, 49, 38, 50, 31, 59, 62]
V = [18, 61, 121, 6, 110, 89, 73, 84, 34, 57, 72, 84, 42, 8, 65, 4, 101, 112, 91, 16, 74, 89, 128, 74, 29, 39, 123, 12, 52, 25, 118, 5]
C = 647"
1417,rod,4,18,15,0,12,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08349156379699707}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 9, 1, 12]"
1418,add,2,72,72,1,72,1,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07413578033447266}",1,Compute: 47 + 25
1419,sub,2,17,17,1,17,1,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07382345199584961}",1,Compute: 77 - 60
1420,mul,4,19090031,98896,0,19134841,0,"{'ok': True, 'value': 19090031, 'stdout': '19090031\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07391595840454102}",1,Compute: 6491 * 2941
1421,ilp_partition,2,2,1,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18709111213684082}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 4, 1]"
1422,ilp_partition,8,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19670796394348145}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 23, 13, 22, 1, 16, 18, 10]"
1423,mul,16,39192352466424892213787842193046,3918379376217856000000000000000000,0,3913933290084876454448158598785556,0,"{'ok': True, 'value': 39192352466424892213787842193046, 'stdout': '39192352466424892213787842193046\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07855677604675293}",1,Compute: 6486128671395519 * 6042487661286634
1424,knap,4,15,22,0,0,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07353925704956055}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 5, 1, 4]
V = [5, 9, 2, 13]
C = 8"
1425,knap,2,9,14,0,11,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0855262279510498}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 2, 4]
V = [5, 2, 9]
C = 4"
1426,knap,16,370,145,0,1063,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41674113273620605}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 30, 4, 24, 20, 30, 16, 23, 25, 21, 31, 5, 16, 5, 30, 3]
V = [25, 34, 13, 51, 45, 52, 38, 48, 14, 5, 12, 29, 64, 1, 54, 27]
C = 146"
1427,sub,32,30249032024847387653422850026858,30248842024847387653422850026858,0,30248741024847387653422850026858,0,"{'ok': True, 'value': 30249032024847387653422850026858, 'stdout': '30249032024847387653422850026858\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07297062873840332}",1,Compute: 58574264901910229278241079952372 - 28325232877062841624818229925514
1428,mul,2,2880,2880,1,2880,1,"{'ok': True, 'value': 2880, 'stdout': '2880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0756990909576416}",1,Compute: 96 * 30
1429,knap,2,19,14,0,10,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0721578598022461}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 3]
V = [9, 10, 5]
C = 3"
1430,mul,2,3717,3717,1,3717,1,"{'ok': True, 'value': 3717, 'stdout': '3717\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07221794128417969}",1,Compute: 59 * 63
1431,rod,32,2688,1055,0,848,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_vluiue9m/main.py"", line 9, in <module>\n    res = cut_rod(P, N)\nNameError: name \'P\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07140660285949707}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [84, 68, 72, 89, 75, 31, 71, 26, 67, 82, 79, 85, 85, 8, 31, 1, 77, 14, 37, 66, 24, 86, 16, 91, 9, 11, 25, 32, 35, 61, 89, 51]"
1432,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0741424560546875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbd""
T = ""cdbca"""
1433,knap,4,30,27,0,13,0,"{'ok': True, 'value': 30, 'stdout': '30\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07483696937561035}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 5, 3, 3]
V = [16, 11, 9, 14]
C = 7"
1434,knap,2,14,12,0,14,1,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08285737037658691}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 4]
V = [8, 6, 4]
C = 3"
1435,knap,2,10,11,0,12,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07174158096313477}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 5]
V = [6, 2, 10]
C = 7"
1436,rod,16,320,46,0,7,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10204720497131348}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [7, 40, 11, 36, 32, 18, 14, 42, 24, 40, 48, 8, 37, 28, 3, 8]"
1437,mul,2,1274,1274,1,1274,1,"{'ok': True, 'value': 1274, 'stdout': '1274\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08080291748046875}",1,Compute: 26 * 49
1438,ilp_prod,2,16,24,0,12,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/af957ff9926444138baea7c2e8d68ed5-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/af957ff9926444138baea7c2e8d68ed5-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9.33333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16424775123596191}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 8]
consumption (rows=resources) = [[3, 3], [3, 3]]
capacity = [8, 7]
upper_bounds = [3, 3]"
1439,knap,2,8,8,1,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08153653144836426}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 1]
V = [3, 2, 5]
C = 4"
1440,ilp_partition,16,1,1,1,0,0,"{'ok': True, 'value': 353, 'stdout': '353\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.24951815605163574}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 18, 33, 24, 2, 46, 45, 9, 14, 19, 4, 17, 23, 23, 19, 46]"
1441,add,16,14506580772539175,,0,14506580772539175,1,"{'ok': True, 'value': 14506580772539175, 'stdout': '14506580772539175\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08537411689758301}",1,Compute: 6994186828995460 + 7512393943543715
1442,knap,16,388,138,0,106,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4122457504272461}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 3, 18, 7, 5, 15, 29, 9, 25, 13, 24, 30, 17, 23, 9, 32]
V = [22, 37, 20, 3, 36, 49, 17, 5, 50, 51, 3, 25, 43, 45, 50, 50]
C = 138"
1443,mul,16,33854429399834604170166077758536,,0,337893345369783786844444968,0,"{'ok': True, 'value': 33854429399834604170166077758536, 'stdout': '33854429399834604170166077758536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08418822288513184}",1,Compute: 3590897846645154 * 9427845303776484
1444,add,32,74383048443898639631714597201076,74383048443898639631714577201076,0,74383048443898639631714627201076,0,"{'ok': True, 'value': 74383048443898639631714597201076, 'stdout': '74383048443898639631714597201076\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09046483039855957}",1,Compute: 62130604801112917426229021409368 + 12252443642785722205485575791708
1445,rod,32,2784,1050,0,87,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0378336906433105}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [87, 64, 24, 40, 46, 13, 6, 38, 87, 27, 8, 39, 1, 56, 58, 77, 6, 2, 88, 70, 32, 23, 45, 60, 44, 85, 22, 50, 21, 58, 11, 6]"
1446,rod,32,1248,545,0,659,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.041250467300415}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [39, 69, 37, 34, 20, 9, 90, 25, 73, 94, 22, 93, 36, 29, 44, 28, 23, 24, 95, 5, 33, 95, 84, 47, 21, 22, 33, 35, 23, 72, 38, 4]"
1447,knap,4,6,5,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08555150032043457}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 8, 2, 3]
V = [3, 1, 3, 1]
C = 10"
1448,mul,4,25440320,62312,0,25686880,0,"{'ok': True, 'value': 25440320, 'stdout': '25440320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0779116153717041}",1,Compute: 6848 * 3715
1449,rod,4,11,10,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_l87nmh6f/main.py"", line 12, in <module>\n    dp[i] = max(dp[i], P[j] + dp[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0830531120300293}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 4, 10, 2]"
1450,ilp_assign,4,8,0,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42095518112182617}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 12, 12, 2], [12, 12, 2, 10], [3, 3, 10, 4], [11, 6, 6, 2]]"
1451,lcs,16,9,6,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07814908027648926}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daaadcbaadddccbb""
T = ""abbcacddbabdacdcb"""
1452,add,16,5634506988167863,5634507088167863,0,5634507008167863,0,"{'ok': True, 'value': 5634506988167863, 'stdout': '5634506988167863\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15045380592346191}",1,Compute: 1608732040851368 + 4025774947316495
1453,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07236671447753906}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""cb"""
1454,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07316851615905762}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abab""
T = ""baadd"""
1455,add,16,14222444067135404,1,0,14222444067135394,0,"{'ok': True, 'value': 14222444067135404, 'stdout': '14222444067135404\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07189393043518066}",1,Compute: 4852487637759166 + 9369956429376238
1456,add,4,9401,9401,1,9401,1,"{'ok': True, 'value': 9401, 'stdout': '9401\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08223581314086914}",1,Compute: 7351 + 2050
1457,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08137297630310059}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcacccdddadaabd""
T = ""dcdccadcbdcdbba"""
1458,knap,16,391,156,0,156,0,"{'ok': False, 'value': None, 'stdout': 'The total weight exceeds the capacity.\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3851191997528076}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 20, 15, 14, 10, 12, 7, 32, 22, 27, 24, 23, 24, 31, 30, 20]
V = [48, 5, 54, 4, 6, 42, 28, 17, 53, 51, 20, 51, 39, 20, 18, 25]
C = 156"
1459,sub,4,5799,5799,1,5799,1,"{'ok': True, 'value': 5799, 'stdout': '5799\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08921933174133301}",1,Compute: 7522 - 1723
1460,knap,2,9,9,1,6,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0743715763092041}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 3, 1]
V = [6, 6, 3]
C = 2"
1461,ilp_prod,2,20,23,0,8,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b322a6d770d74cfb9a126c2e2a9c9916-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b322a6d770d74cfb9a126c2e2a9c9916-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18048572540283203}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 6]
consumption (rows=resources) = [[2, 2], [3, 2]]
capacity = [7, 8]
upper_bounds = [3, 3]"
1462,knap,32,1646,1004,0,1,0,"{'ok': True, 'value': 1646, 'stdout': '1646\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08846592903137207}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [39, 41, 51, 11, 43, 50, 30, 20, 16, 63, 42, 15, 21, 24, 32, 11, 29, 45, 24, 11, 45, 33, 43, 44, 6, 24, 10, 59, 1, 4, 33, 44]
V = [21, 41, 12, 105, 123, 45, 59, 14, 125, 54, 96, 58, 108, 67, 4, 64, 39, 40, 21, 2, 78, 49, 65, 67, 85, 96, 100, 81, 72, 70, 111, 83]
C = 482"
1463,lcs,16,9,6,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08429670333862305}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccdbccbddabcbcdc""
T = ""addacbabcbbcacb"""
1464,rod,4,24,15,0,16,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08214783668518066}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 10, 11, 3]"
1465,ilp_partition,8,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371210098266602}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 6, 22, 10, 8, 18, 4, 22]"
1466,ilp_prod,16,170,The solution will be the maximum total profit that can be achieved given the resource constraints.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_67be6rsp/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23827862739562988}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [30, 46, 45, 25, 11, 47]
consumption (rows=resources) = [[15, 11, 11, 4, 16, 5], [5, 10, 10, 13, 6, 7], [7, 14, 11, 5, 2, 1], [1, 1, 13, 14, 8, 15]]
capacity = [37, 33, 58, 42]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1467,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 416, 'stdout': '416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19083166122436523}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [26, 34, 27, 39, 37, 41, 27, 12, 41, 9, 21, 27, 5, 14, 45, 11]"
1468,rod,4,44,14,0,35,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_uuw5apl4/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_uuw5apl4/main.py"", line 9, in rod_cutting\n    rev = P[j] + revenue[i - j]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08255410194396973}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 3, 10, 8]"
1469,mul,8,4758587592573696,4510064300830468,0,4752454333854816,0,"{'ok': True, 'value': 4758587592573696, 'stdout': '4758587592573696\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08419013023376465}",1,Compute: 91831488 * 51818692
1470,add,4,4363,4363,1,4363,1,"{'ok': True, 'value': 4363, 'stdout': '4363\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0830082893371582}",1,Compute: 3049 + 1314
1471,ilp_partition,4,7,0,0,0,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1975994110107422}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 11, 1]"
1472,ilp_partition,4,4,1,0,1,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20011687278747559}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 9, 12, 1]"
1473,rod,8,88,22,0,56,0,"{'ok': True, 'value': 88, 'stdout': '88\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08246469497680664}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 22, 24, 4, 22, 4, 14, 7]"
1474,mul,8,3115289528428176,2844553074334339872,0,312684943398464,0,"{'ok': True, 'value': 3115289528428176, 'stdout': '3115289528428176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08124828338623047}",1,Compute: 31884848 * 97704387
1475,ilp_assign,32,125,119,0,70,0,"{'ok': True, 'value': 125, 'stdout': '125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3694431781768799}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 33, 94, 29, 59, 78, 57], [83, 93, 90, 28, 5, 1, 32], [41, 37, 33, 8, 37, 33, 19], [94, 81, 6, 38, 4, 82, 37], [85, 65, 70, 57, 53, 16, 54], [28, 47, 25, 39, 75, 9, 67], [21, 48, 23, 51, 14, 91, 70]]"
1476,ilp_partition,16,0,1,0,120,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08660602569580078}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [37, 13, 11, 35, 1, 37, 28, 11, 32, 34, 21, 25, 44, 25, 2, 46]"
1477,rod,32,1376,2135,0,1040,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_d6b960j1/main.py"", line 9, in <module>\n    res = cut_rod(P, N)\nNameError: name \'P\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08702611923217773}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [43, 48, 72, 41, 96, 65, 9, 75, 64, 69, 79, 47, 67, 58, 6, 69, 88, 41, 90, 59, 59, 81, 31, 69, 4, 29, 30, 61, 68, 46, 28, 87]"
1478,knap,32,1636,1045,0,-1,0,"{'ok': True, 'value': 1636, 'stdout': '1636\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08626890182495117}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [46, 13, 37, 44, 30, 24, 40, 16, 36, 8, 38, 49, 25, 25, 43, 47, 16, 45, 28, 28, 37, 19, 51, 47, 25, 24, 33, 4, 32, 43, 19, 14]
V = [39, 74, 7, 69, 57, 88, 92, 42, 89, 29, 91, 15, 91, 62, 107, 10, 26, 55, 115, 120, 76, 128, 24, 1, 49, 23, 14, 114, 100, 102, 83, 33]
C = 493"
1479,ilp_assign,32,118,10,0,110,0,"{'ok': True, 'value': 118, 'stdout': '118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3904225826263428}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[49, 82, 24, 27, 72, 65, 62], [82, 72, 62, 41, 54, 13, 53], [51, 88, 73, 7, 42, 42, 41], [70, 53, 23, 75, 37, 39, 2], [79, 63, 89, 40, 42, 22, 44], [3, 23, 8, 3, 5, 53, 18], [7, 58, 3, 59, 7, 18, 53]]"
1480,add,8,108796023,108796023,1,108796023,1,"{'ok': True, 'value': 108796023, 'stdout': '108796023\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07718968391418457}",1,Compute: 96958350 + 11837673
1481,knap,8,86,103,0,103,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0836191177368164}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 7, 11, 7, 5, 10, 6]
V = [28, 7, 17, 25, 14, 5, 24, 26]
C = 27"
1482,knap,16,396,141,0,141,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41318821907043457}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 21, 30, 2, 30, 20, 7, 1, 29, 26, 21, 18, 2, 26, 8, 26]
V = [46, 1, 57, 43, 11, 1, 35, 11, 63, 4, 29, 30, 47, 57, 7, 2]
C = 141"
1483,ilp_partition,4,7,0,0,35,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2011737823486328}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 12, 8, 1]"
1484,ilp_partition,2,2,1,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1887669563293457}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 2, 6, 1]"
1485,ilp_partition,32,0,10,0,-1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22496914863586426}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [43, 84, 62, 69, 60, 25, 71, 61, 7, 40, 4, 66, 57, 70, 20, 10, 9, 13, 89, 16, 19, 11, 42, 14]"
1486,add,32,147286097221315766592009711959710,147286097221315766592009711959710,1,147286097221315766652009712009710,0,"{'ok': True, 'value': 147286097221315766592009711959710, 'stdout': '147286097221315766592009711959710\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07339286804199219}",1,Compute: 55354572197084434114306027454289 + 91931525024231332477703684505421
1487,sub,4,1060,1060,1,1060,1,"{'ok': True, 'value': 1060, 'stdout': '1060\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08134174346923828}",1,Compute: 2833 - 1773
1488,rod,4,22,12,0,17,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08097553253173828}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [2, 11, 2, 9]"
1489,mul,4,12668544,12686664,0,12584064,0,"{'ok': True, 'value': 12668544, 'stdout': '12668544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08585333824157715}",1,Compute: 8064 * 1571
1490,sub,4,770,870,0,770,1,"{'ok': True, 'value': 770, 'stdout': '770\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08241939544677734}",1,Compute: 6383 - 5613
1491,knap,2,6,6,1,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__p9ny3ga/main.py"", line 10, in <module>\n    prob += lpSum([V[i]*x[i] for i in range(3)])\n  File ""/tmp/cot_exec__p9ny3ga/main.py"", line 10, in <listcomp>\n    prob += lpSum([V[i]*x[i] for i in range(3)])\nNameError: name \'V\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1548442840576172}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 3]
V = [2, 6, 2]
C = 5"
1492,knap,16,389,136,0,1060,0,"{'ok': True, 'value': 501, 'stdout': '501\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40844249725341797}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 21, 21, 20, 10, 19, 11, 23, 11, 15, 32, 2, 29, 11, 17, 26]
V = [4, 53, 10, 22, 51, 12, 15, 26, 54, 34, 19, 36, 64, 23, 52, 26]
C = 136"
1493,sub,32,2082951222018621069542640118783,22082951222018621069542639918783,0,20829512220187420880132640118783,0,"{'ok': True, 'value': 2082951222018621069542640118783, 'stdout': '2082951222018621069542640118783\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0850365161895752}",1,Compute: 17336853665349185367367308868195 - 15253902443330564297824668749412
1494,add,16,10294940866690565,0,0,10294940866690565,1,"{'ok': True, 'value': 10294940866690565, 'stdout': '10294940866690565\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09160065650939941}",1,Compute: 6140491031977465 + 4154449834713100
1495,knap,8,104,110,0,100,0,"{'ok': True, 'value': 104, 'stdout': '104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08508944511413574}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 16, 11, 2, 5, 6, 12, 7]
V = [32, 25, 30, 15, 26, 16, 22, 15]
C = 35"
1496,add,2,103,103,1,103,1,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0818779468536377}",1,Compute: 81 + 22
1497,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1959247589111328}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 14, 15, 15, 14, 22, 14, 3]"
1498,ilp_partition,2,3,0,0,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1968553066253662}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 6, 5]"
1499,ilp_assign,8,24,46,0,46,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43193769454956055}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 16, 4, 20, 8, 13, 22], [8, 9, 2, 1, 20, 12, 18], [19, 22, 9, 11, 1, 17, 20], [1, 19, 13, 8, 15, 22, 22], [16, 10, 5, 13, 1, 7, 8], [14, 22, 3, 3, 22, 10, 3], [11, 23, 5, 14, 4, 4, 7]]"
1500,ilp_partition,2,0,"The answer will be the minimum difference, which is the value in the bottom-right cell of the dynamic programming table.",0,9,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21896123886108398}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 4, 6, 5]"
1501,ilp_prod,8,182,85,0,19,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6b55b5780c0046248371d1024cc564a8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6b55b5780c0046248371d1024cc564a8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 50 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -48 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14989781379699707}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 15, 17, 16]
consumption (rows=resources) = [[4, 1, 5, 1], [8, 1, 7, 3], [1, 1, 5, 3], [2, 1, 5, 6]]
capacity = [16, 25, 28, 19]
upper_bounds = [3, 10, 3, 3]"
1502,lcs,32,19,10,0,20,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1383373737335205}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcdddcdcbcaadabadccbbcacdcbabad""
T = ""dbdbacaacabadddcbadcbbdcddbbbdab"""
1503,ilp_partition,16,1,1,1,20,0,"{'ok': True, 'value': 347, 'stdout': '347\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20151972770690918}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [44, 25, 37, 28, 21, 36, 42, 7, 25, 33, 1, 1, 26, 10, 6, 5]"
1504,rod,4,36,10,0,1,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0742950439453125}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 2, 4, 3]"
1505,knap,32,1617,1085,0,-1,0,"{'ok': True, 'value': 1617, 'stdout': '1617\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08288216590881348}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [30, 1, 57, 33, 26, 28, 28, 28, 25, 53, 5, 34, 57, 39, 40, 32, 21, 7, 22, 36, 49, 61, 38, 44, 44, 36, 27, 5, 20, 42, 13, 55]
V = [43, 96, 5, 114, 44, 5, 99, 30, 89, 43, 89, 19, 76, 84, 32, 21, 105, 27, 126, 45, 36, 94, 23, 41, 94, 58, 17, 45, 106, 111, 79, 114]
C = 518"
1506,mul,32,3425822144497284388400245522926015064077687847610724288037216662,0,0,3433659426306938985889654229358656466666464666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 3425822144497284388400245522926015064077687847610724288037216662, 'stdout': '3425822144497284388400245522926015064077687847610724288037216662\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0731651782989502}",1,Compute: 69196708062612605374911956809606 * 49508455538050032655815713279577
1507,rod,2,8,6,0,10,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_tzrs78at/main.py"", line 16, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_tzrs78at/main.py"", line 12, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07448887825012207}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 6]"
1508,ilp_partition,16,0,1,0,2,0,"{'ok': True, 'value': 434, 'stdout': '434\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2022097110748291}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [28, 3, 43, 36, 14, 35, 9, 45, 13, 23, 46, 30, 30, 25, 32, 22]"
1509,ilp_partition,4,0,2,0,10,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3510737419128418}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 4, 10, 5]"
1510,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08467626571655273}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dc""
T = ""db"""
1511,lcs,4,3,2,0,11,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08433890342712402}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbdb""
T = ""ddbb"""
1512,rod,16,328,46,0,40,0,"{'ok': True, 'value': 328, 'stdout': '328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09614109992980957}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [14, 41, 8, 14, 25, 30, 10, 31, 17, 45, 1, 2, 14, 10, 16, 40]"
1513,ilp_assign,2,9,5,0,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3752148151397705}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5], [6, 3]]"
1514,lcs,4,1,2,0,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09669137001037598}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbaa""
T = ""bbd"""
1515,knap,2,12,13,0,-1,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07407355308532715}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 2, 3]
V = [2, 10, 3]
C = 3"
1516,lcs,32,20,10,0,26,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0777130126953125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abcbbccccbbabbabaccadcddbdaabcac""
T = ""bcbcacbddacdbbcdbbabbaaabbbdcacbb"""
1517,lcs,4,3,3,1,2,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08021736145019531}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adcb""
T = ""dadac"""
1518,mul,8,2405108989856596,23633445066674876,0,2403335555444,0,"{'ok': True, 'value': 2405108989856596, 'stdout': '2405108989856596\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07326173782348633}",1,Compute: 48535876 * 49553221
1519,knap,16,437,1048,0,1,0,"{'ok': True, 'value': 437, 'stdout': '437\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1558384895324707}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 18, 32, 3, 32, 28, 20, 2, 17, 16, 24, 12, 25, 12, 29, 22]
V = [47, 47, 47, 47, 42, 20, 9, 1, 51, 4, 57, 30, 56, 50, 38, 51]
C = 152"
1520,ilp_partition,16,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19945812225341797}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 33, 3, 18, 27, 1, 14, 10, 45, 3, 23, 19, 37, 33, 18, 15]"
1521,mul,4,41782208,62208,0,41848768,0,"{'ok': True, 'value': 41782208, 'stdout': '41782208\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08410191535949707}",1,Compute: 7726 * 5408
1522,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19846105575561523}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [14, 20, 3, 13, 17, 18, 18, 2]"
1523,sub,2,48,48,1,48,1,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08357405662536621}",1,Compute: 72 - 24
1524,mul,4,22221083,181835,0,22245983,0,"{'ok': True, 'value': 22221083, 'stdout': '22221083\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07252264022827148}",1,Compute: 6659 * 3337
1525,mul,8,7236360356827536,7104570433821120,0,7158694564197136,0,"{'ok': True, 'value': 7236360356827536, 'stdout': '7236360356827536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0799863338470459}",1,Compute: 82342056 * 87881706
1526,knap,8,85,110,0,103,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09190583229064941}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 10, 7, 14, 15, 12, 15, 5]
V = [31, 24, 5, 17, 14, 9, 19, 6]
C = 40"
1527,ilp_prod,8,75,105,0,4,0,"{'ok': True, 'value': 75, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3ca4279ed30a4bdba039c158b40aebf1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3ca4279ed30a4bdba039c158b40aebf1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 76 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -66 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 3 rows 2 columns\nCbc0012I Integer solution of -75 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 3.5\nCbc0013I At root node, 2 cuts changed objective from -76 to -75 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0001I Search completed - best objective -75, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -76 to -75\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                75.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n75.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16220450401306152}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [18, 5, 12, 9]
consumption (rows=resources) = [[6, 7, 3, 4], [3, 8, 7, 4], [1, 7, 8, 3], [7, 2, 3, 3]]
capacity = [26, 21, 29, 27]
upper_bounds = [3, 3, 3, 5]"
1528,ilp_assign,2,5,6,0,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6348922252655029}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 4], [2, 1]]"
1529,rod,4,36,12,0,13,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dobkjfwv/main.py"", line 20, in <module>\n    res = max_revenue(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09383535385131836}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 9, 2, 2]"
1530,add,8,121861278,956958559,0,121861278,1,"{'ok': True, 'value': 121861278, 'stdout': '121861278\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08342981338500977}",1,Compute: 72414533 + 49446745
1531,add,4,10618,9151,0,10618,1,"{'ok': True, 'value': 10618, 'stdout': '10618\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07509875297546387}",1,Compute: 3755 + 6863
1532,mul{'ok': True, 'value': 2913856993657826256080324998477626694793655522080264919356011890, 'stdout': '2913856993657826256080324998477626694793655522080264919356011890\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08815765380859375}",1,Compute: 41401494473747929031236361800533 * 70380478547832604780331621692330
1533,add,4,6333,6333,1,6333,1,"{'ok': True, 'value': 6333, 'stdout': '6333\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07475519180297852}",1,Compute: 2173 + 4160
1534,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0852656364440918}",1,Compute: 52 + 70
1535,ilp_assign,4,19,-4,0,4,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3793361186981201}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 6, 5, 9], [5, 8, 9, 6], [7, 11, 6, 7], [5, 12, 1, 4]]"
1536,rod,8,184,40,0,23,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.090850830078125}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 23, 7, 15, 10, 19, 10, 10]"
1537,rod,8,96,22,0,28,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9lth8wj6/main.py"", line 11, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_9lth8wj6/main.py"", line 8, in rod_cutting\n    max_revenue[i] = max(max_revenue[i], P[j] + max_revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08215999603271484}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [12, 23, 7, 8, 7, 11, 1, 20]"
1538,rod,16,200,57,0,50,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_00yjx_kd/main.py"", line 10, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0871584415435791}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [5, 25, 22, 6, 1, 45, 2, 9, 25, 19, 27, 13, 33, 29, 7, 6]"
1539,ilp_assign,4,17,0,0,18,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36804986000061035}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 6, 4, 6], [8, 3, 9, 12], [12, 1, 12, 8], [3, 1, 2, 9]]"
1540,ilp_partition,2,1,The answer will be the minimum difference between the two subsets.,0,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21541571617126465}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 5, 3]"
1541,rod,32,2912,1055,0,91,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.033618688583374}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [91, 78, 84, 89, 48, 11, 22, 70, 10, 36, 55, 51, 69, 33, 7, 92, 53, 79, 70, 41, 81, 40, 58, 93, 74, 81, 57, 18, 48, 88, 31, 42]"
1542,mul{'ok': True, 'value': 2145727750735745444296327298628801686497422781752425195839451898, 'stdout': '2145727750735745444296327298628801686497422781752425195839451898\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09055137634277344}",1,Compute: 47915944960241726179584165934223 * 44781079711903080977658652122726
1543,rod,2,10,5,0,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_omu4wthu/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08183646202087402}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 2]"
1544,ilp_assign,4,12,17,0,11,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4667985439300537}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2, 10, 11], [2, 5, 11, 5], [10, 6, 3, 1], [11, 8, 7, 7]]"
1545,ilp_partition,8,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2082996368408203}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 24, 22, 15, 16, 3, 9, 3]"
1546,knap,4,26,24,0,10,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07407021522521973}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 7, 3]
V = [10, 14, 13, 2]
C = 6"
1547,rod,4,22,15,0,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08303308486938477}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [4, 11, 11, 8]"
1548,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0744469165802002}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""a"""
1549,sub,2,22,22,1,22,1,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08438324928283691}",1,Compute: 34 - 12
1550,mul,32,2703470219007469110529415434771528640502384525778347848994771390,27333334351118526404666363552868333333435111852640466636355286833333343511185264046663635528683333334351118526404666363552868333333435111852640466636355286833333343511185264046663635528683333334351118526404666363552868333333435111852640466636355286833333343511185264046663635528683333334351118526404666363552868333,0,2718532634856844833333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec__mtbffp3/main.py"", line 3, in <module>\n    num1 = np.int64(87777781170695005401559111676094)\nOverflowError: Python int too large to convert to C long\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.20739173889160156}",0,Compute: 87777781170695005401559111676094 * 30799026620987708667380821901185
1551,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07706737518310547}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""da""
T = ""bc"""
1552,ilp_partition,32,1,100,0,368,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_s38l3hbv/main.py"", line 15, in <module>\n    print(partition(weights))\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07653403282165527}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 65, 10, 28, 80, 28, 37, 32, 55, 54, 17, 81, 50, 75, 29, 67, 63, 79, 5, 74, 11, 7, 48, 84]"
1553,add,16,5837844157869609,,0,5837844157869609,1,"{'ok': True, 'value': 5837844157869609, 'stdout': '5837844157869609\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07383847236633301}",1,Compute: 4271038611517061 + 1566805546352548
1554,ilp_assign,16,31,0,0,110,0,"{'ok': True, 'value': 31, 'stdout': '31\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3985416889190674}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 31, 47, 11, 1, 21, 22], [14, 2, 36, 27, 36, 36, 2], [2, 37, 34, 14, 14, 47, 4], [34, 25, 31, 47, 19, 4, 8], [32, 37, 3, 11, 8, 34, 34], [47, 30, 20, 3, 43, 25, 47], [23, 23, 25, 18, 25, 30, 16]]"
1555,sub,8,21886347,21886347,1,21886347,1,"{'ok': True, 'value': 21886347, 'stdout': '21886347\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08524322509765625}",1,Compute: 45983014 - 24096667
1556,ilp_assign,4,11,6,0,6,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3596007823944092}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 9, 2, 2], [7, 1, 1, 4], [6, 7, 4, 6], [7, 10, 2, 6]]"
1557,rod,32,2752,1054,0,1094,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gqobfssv/main.py"", line 9, in <module>\n    res = cut_rod(P, N)\nNameError: name \'P\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08458137512207031}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [86, 57, 69, 67, 93, 66, 2, 82, 26, 68, 11, 6, 66, 28, 32, 77, 94, 26, 2, 43, 27, 32, 51, 44, 80, 43, 46, 12, 83, 42, 24, 42]"
1558,knap,4,26,16,0,30,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08049893379211426}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 7, 3, 2]
V = [4, 6, 16, 10]
C = 7"
1559,ilp_assign,8,33,46,0,46,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39777684211730957}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 3, 15, 5, 9, 4, 6], [12, 17, 23, 16, 19, 2, 18], [20, 6, 22, 23, 14, 21, 7], [9, 1, 21, 19, 12, 1, 22], [21, 11, 11, 4, 21, 7, 3], [18, 13, 2, 13, 23, 19, 10], [8, 5, 18, 4, 12, 18, 7]]"
1560,rod,32,1984,474,0,1024,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.025164842605591}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [62, 29, 43, 29, 47, 26, 52, 49, 19, 76, 49, 14, 53, 74, 15, 74, 90, 13, 20, 95, 5, 23, 61, 79, 67, 63, 46, 12, 81, 35, 47, 54]"
1561,sub,2,13,13,1,13,1,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07756805419921875}",1,Compute: 91 - 78
1562,mul,32,3687336658768170371164098600746479056608710608726011277401755452,36893441683877779511689995666751758353557,0,37088488588624588886957764099774666646446666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 3687336658768170371164098600746479056608710608726011277401755452, 'stdout': '3687336658768170371164098600746479056608710608726011277401755452\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08310270309448242}",1,Compute: 46989683560753076513971360468557 * 78471195789194958277178224968236
1563,mul,4,58761120,403298,0,58459920,0,"{'ok': True, 'value': 58761120, 'stdout': '58761120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07227063179016113}",1,Compute: 7898 * 7440
1564,ilp_prod,16,103,156,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_gfqs0gy9/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.29073429107666016}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [39, 35, 24, 9, 16, 32]
consumption (rows=resources) = [[4, 1, 15, 1, 5, 16], [7, 3, 5, 14, 1, 6], [14, 12, 12, 11, 2, 8], [9, 5, 10, 6, 10, 10]]
capacity = [60, 64, 33, 33]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1565,ilp_assign,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3727130889892578}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 1], [2, 6]]"
1566,ilp_prod,8,48,108,0,17,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f72818c44af743b8831e9f682b7200ec-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f72818c44af743b8831e9f682b7200ec-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 65.1667 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -46 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -48 found by DiveCoefficient after 2 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 4\nCbc0013I At root node, 1 cuts changed objective from -64.333333 to -48 in 3 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -48, took 2 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -64.3333 to -48\nProbing was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 3 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 3 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               2\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16829609870910645}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 22, 16, 24]
consumption (rows=resources) = [[7, 5, 4, 7], [7, 7, 4, 8], [2, 1, 8, 1], [6, 6, 6, 8]]
capacity = [25, 32, 18, 17]
upper_bounds = [3, 3, 3, 3]"
1567,mul,4,21372234,92354,0,21105694,0,"{'ok': True, 'value': 21372234, 'stdout': '21372234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08068203926086426}",1,Compute: 6683 * 3198
1568,ilp_assign,4,19,15,0,8,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40891551971435547}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 4, 2, 6], [3, 4, 4, 10], [9, 6, 11, 8], [6, 10, 11, 8]]"
1569,knap,2,8,10,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08534669876098633}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 5, 5]
V = [3, 8, 7]
C = 5"
1570,ilp_prod,32,300,"The solution to the problem is the maximum profit that can be achieved, given the constraints.",0,6,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3fa661fff7e64f4db633f49740f967ac-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3fa661fff7e64f4db633f49740f967ac-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 21 COLUMNS\nAt line 136 RHS\nAt line 153 BOUNDS\nAt line 160 ENDATA\nProblem MODEL has 16 rows, 6 columns and 96 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 13.7931 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16498851776123047}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 93, 28, 60, 50, 54]
consumption (rows=resources) = [[29, 29, 25, 23, 17, 13], [29, 27, 23, 18, 20, 24], [16, 24, 10, 20, 26, 24], [26, 17, 9, 5, 22, 32]]
capacity = [100, 115, 94, 115]
upper_bounds = [3, 3, 4, 4, 3, 3]"
1571,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0842735767364502}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbaabddacdbdabdc""
T = ""ddaddaacbccdcbd"""
1572,sub,4,8530,8530,1,8530,1,"{'ok': True, 'value': 8530, 'stdout': '8530\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07631468772888184}",1,Compute: 9885 - 1355
1573,add,32,128042190610981713380542289417967,127042190610981713380542289417967,0,128042190610981713380542289418467,0,"{'ok': True, 'value': 128042190610981713380542289417967, 'stdout': '128042190610981713380542289417967\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07960867881774902}",1,Compute: 41826329144494836333367633042207 + 86215861466486877047174656375760
1574,sub,16,2112330086458408,0,0,2112330086456408,0,"{'ok': True, 'value': 2112330086458408, 'stdout': '2112330086458408\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07458662986755371}",1,Compute: 8976421155884260 - 6864091069425852
1575,lcs,32,19,10,0,16,0,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07689476013183594}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbcbbdcacdabbbbcaabaaadccabdbbc""
T = ""cacbababbbcbabdcbcbbcdbcabbccda"""
1576,ilp_prod,4,88,32,0,The answer will be printed when the code is executed.,0,"{'ok': True, 'value': 40, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/735f9d0205d944f49375504f607b2e41-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/735f9d0205d944f49375504f607b2e41-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 40 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -40 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                40.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n40.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1721019744873047}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 11, 9]
consumption (rows=resources) = [[2, 1, 3], [4, 1, 3], [1, 1, 4]]
capacity = [11, 16, 8]
upper_bounds = [4, 8, 3]"
1577,ilp_prod,16,225,The solution to this problem would be the maximum profit that can be obtained.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_6bu09qz6/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23491263389587402}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 47, 3, 13, 9, 41]
consumption (rows=resources) = [[3, 10, 15, 13, 1, 5], [8, 7, 16, 14, 14, 9], [8, 1, 13, 13, 5, 11], [4, 8, 3, 7, 12, 14]]
capacity = [40, 43, 39, 37]
upper_bounds = [4, 4, 3, 3, 3, 3]"
1578,sub,8,39874597,39874597,1,39874597,1,"{'ok': True, 'value': 39874597, 'stdout': '39874597\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08251452445983887}",1,Compute: 80438522 - 40563925
1579,add,16,14610996389914697,14311809090014697,0,14610996389914697,1,"{'ok': True, 'value': 14610996389914697, 'stdout': '14610996389914697\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08514666557312012}",1,Compute: 7731256286640542 + 6879740103274155
1580,add,16,17966420061024012,12266622469648922,0,17966420058024012,0,"{'ok': True, 'value': 17966420061024012, 'stdout': '17966420061024012\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08596372604370117}",1,Compute: 8596927774307685 + 9369492286716327
1581,ilp_prod,8,60,65,0,The answer will be printed when the code is executed.,0,"{'ok': True, 'value': 60, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a89853090537408babd6baf829e46ad8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a89853090537408babd6baf829e46ad8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 62.5 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -55 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -60 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 3\nCbc0013I At root node, 1 cuts changed objective from -61.666667 to -60 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -60, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -61.6667 to -60\nProbing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                60.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n\n60.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17011642456054688}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 15, 14, 10]
consumption (rows=resources) = [[4, 4, 7, 3], [7, 5, 4, 3], [1, 6, 6, 1], [5, 4, 8, 3]]
capacity = [17, 21, 22, 27]
upper_bounds = [3, 3, 3, 5]"
1582,sub,4,5375,5375,1,5375,1,"{'ok': True, 'value': 5375, 'stdout': '5375\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09483194351196289}",1,Compute: 7505 - 2130
1583,knap,16,375,1064,0,100,0,"{'ok': True, 'value': -5776, 'stdout': '-5776.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3713679313659668}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 30, 13, 16, 27, 2, 12, 11, 17, 8, 2, 18, 25, 2, 1, 3]
V = [24, 29, 26, 8, 33, 63, 53, 3, 15, 46, 32, 21, 31, 10, 9, 58]
C = 98"
1584,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08733391761779785}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bddabdbadcdacdac""
T = ""cabcbcdddcadabbaa"""
1585,lcs,4,4,3,0,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07346725463867188}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdbd""
T = ""bdabd"""
1586,knap,2,4,7,0,7,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07361817359924316}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 4]
V = [2, 2, 7]
C = 3"
1587,lcs,4,3,3,1,-1,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07292890548706055}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bacc""
T = ""accc"""
1588,mul,32,3070361202264574901292581343370697554017876817938031838415056586,8,0,31036644285626484000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 3070361202264574901292581343370697554017876817938031838415056586, 'stdout': '3070361202264574901292581343370697554017876817938031838415056586\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18939208984375}",1,Compute: 33546986771639333644462379333434 * 91524202252950547106819633255529
1589,knap,16,381,144,0,1064,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.45850658416748047}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 11, 31, 1, 10, 22, 22, 28, 22, 30, 21, 22, 1, 13, 16, 25]
V = [22, 17, 51, 5, 7, 52, 33, 60, 31, 7, 53, 53, 57, 8, 50, 28]
C = 144"
1590,rod,32,1328,1050,0,840,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.02983021736145}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [6, 83, 30, 60, 70, 10, 16, 76, 89, 91, 79, 91, 50, 36, 69, 12, 69, 75, 95, 27, 4, 83, 92, 48, 38, 73, 59, 79, 80, 19, 76, 45]"
1591,lcs,32,21,10,0,20,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09208059310913086}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""caadbcdcadbadadcaacbdbadbccabbba""
T = ""acdbdcaccbcbdadadabbbdbcddcbdbb"""
1592,rod,2,8,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lalijl6v/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08353066444396973}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 1]"
1593,add,2,133,133,1,133,1,"{'ok': True, 'value': 133, 'stdout': '133\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0746147632598877}",1,Compute: 50 + 83
1594,sub,8,19383653,19383653,1,19383653,1,"{'ok': True, 'value': 19383653, 'stdout': '19383653\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07636642456054688}",1,Compute: 44083250 - 24699597
1595,sub,2,39,39,1,39,1,"{'ok': True, 'value': 39, 'stdout': '39\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07210421562194824}",1,Compute: 60 - 21
1596,add,4,9236,8236,0,9236,1,"{'ok': True, 'value': 9236, 'stdout': '9236\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08421206474304199}",1,Compute: 7381 + 1855
1597,sub,4,1392,1392,1,1392,1,"{'ok': True, 'value': 1392, 'stdout': '1392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07363724708557129}",1,Compute: 6454 - 5062
1598,knap,2,7,7,1,4,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08930397033691406}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 5]
V = [4, 3, 3]
C = 4"
1599,ilp_assign,2,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41432857513427734}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 5], [4, 1]]"
1600,ilp_prod,8,168,100,0,19,0,"{'ok': True, 'value': 16, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/82368a8ef7fd4266aea4642141559054-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/82368a8ef7fd4266aea4642141559054-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21.7143 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -16 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                16.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n16.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15348386764526367}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7, 24, 4]
consumption (rows=resources) = [[4, 2, 1, 4], [2, 2, 1, 4], [4, 3, 4, 6], [7, 7, 2, 6]]
capacity = [18, 26, 28, 19]
upper_bounds = [3, 3, 7, 3]"
1601,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1999680995941162}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [40, 18, 38, 13, 1, 38, 39, 42, 33, 5, 26, 26, 43, 35, 41, 32]"
1602,ilp_partition,8,1,1,1,1,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ovdmhtg3/main.py"", line 20, in <module>\n    print(partition(weights))\nNameError: name \'weights\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07379436492919922}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [23, 21, 19, 15, 19, 19, 15, 8]"
1603,sub,16,16315864228070,4,0,163158643324070,0,"{'ok': True, 'value': 16315864228070, 'stdout': '16315864228070\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0846254825592041}",1,Compute: 4012796114415253 - 3996480250187183
1604,ilp_partition,32,1,1,1,12,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20172953605651855}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [38, 14, 40, 72, 83, 42, 16, 20, 34, 54, 41, 17, 59, 31, 63, 7, 32, 1, 43, 63, 35, 42, 13, 15]"
1605,lcs,4,2,2,1,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07348847389221191}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddda""
T = ""bdac"""
1606,rod,8,44,22,0,30,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08356428146362305}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [1, 11, 16, 3, 18, 20, 13, 10]"
1607,rod,16,176,46,0,7,0,"{'ok': True, 'value': 176, 'stdout': '176\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09258127212524414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [11, 2, 23, 25, 36, 10, 42, 14, 35, 41, 26, 13, 1, 7, 7, 46]"
1608,sub,32,43610326862778966619619875136858,43609066862778966619619875136858,0,43610226862778966619620100000000,0,"{'ok': True, 'value': 43610326862778966619619875136858, 'stdout': '43610326862778966619619875136858\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07404923439025879}",1,Compute: 64692258021903379547051125370063 - 21081931159124412927431250233205
1609,ilp_assign,16,44,105,0,4,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36634302139282227}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[41, 34, 3, 24, 6, 38, 39], [11, 6, 19, 39, 36, 29, 1], [34, 39, 7, 11, 42, 1, 14], [20, 7, 43, 21, 11, 23, 16], [3, 37, 48, 26, 43, 48, 45], [25, 7, 8, 25, 38, 34, 34], [7, 4, 34, 39, 34, 30, 45]]"
1610,ilp_assign,4,14,6,0,15,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4048454761505127}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 7, 12, 1], [1, 7, 9, 2], [5, 12, 1, 1], [8, 11, 7, 9]]"
1611,rod,8,136,22,0,84,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_3par9d05/main.py"", line 9, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0752096176147461}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 4, 4, 18, 23, 3, 20, 3]"
1612,ilp_prod,16,144,160,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ia6jqwhj/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22397899627685547}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [25, 28, 29, 4, 40, 10]
consumption (rows=resources) = [[3, 9, 9, 1, 5, 15], [10, 15, 1, 4, 5, 3], [7, 3, 2, 2, 4, 2], [8, 2, 15, 3, 15, 9]]
capacity = [38, 49, 42, 40]
upper_bounds = [4, 3, 3, 10, 3, 3]"
1613,ilp_assign,32,110,236,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_henmwuxp/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.36293959617614746}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[89, 93, 86, 64, 75, 1, 95], [95, 29, 61, 62, 61, 89, 87], [8, 96, 18, 54, 9, 93, 87], [16, 39, 92, 78, 49, 8, 83], [72, 29, 8, 22, 40, 30, 36], [5, 38, 21, 54, 80, 28, 23], [15, 42, 85, 24, 42, 58, 63]]"
1614,ilp_assign,4,21,6,0,18,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3668665885925293}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 3, 2, 9], [10, 10, 8, 12], [6, 3, 2, 11], [6, 3, 5, 6]]"
1615,ilp_prod,2,24,13,0,21,0,"{'ok': True, 'value': 21, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0708b3ae96d74e16a435930267e3f6ac-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0708b3ae96d74e16a435930267e3f6ac-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -21 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                21.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n21.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.14851832389831543}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 8]
consumption (rows=resources) = [[2, 2], [1, 1]]
capacity = [6, 10]
upper_bounds = [3, 3]"
1616,sub,4,6413,6413,1,6413,1,"{'ok': True, 'value': 6413, 'stdout': '6413\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07463312149047852}",1,Compute: 9983 - 3570
1617,rod,8,160,23,0,31,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07447934150695801}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 19, 17, 3, 19, 20, 23, 19]"
1618,ilp_partition,8,1,1,1,7,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20848441123962402}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 14, 20, 14, 16, 7, 1, 11]"
1619,rod,8,128,22,0,1,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0901036262512207}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 4, 12, 14, 18, 6, 1, 14]"
1620,lcs,32,18,10,0,20,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08562254905700684}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acdbddabcabdaadbcccaaacaddacbbad""
T = ""bdcddacacbadddbcbddddbbdadcbbca"""
1621,mul,16,22136748662594955413156597580812,225,0,2228407640790894900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 22136748662594955413156597580812, 'stdout': '22136748662594955413156597580812\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07222580909729004}",1,Compute: 9364076407908949 * 2364007692621788
1622,rod,32,768,1050,0,1,0,"{'ok': True, 'value': 768, 'stdout': '768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08357429504394531}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [7, 48, 4, 39, 48, 4, 44, 87, 21, 57, 89, 89, 51, 55, 92, 10, 67, 82, 26, 87, 82, 88, 33, 70, 57, 22, 7, 59, 42, 20, 90, 85]"
1623,knap,4,27,24,0,30,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08303284645080566}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 7, 4]
V = [15, 12, 6, 9]
C = 9"
1624,ilp_assign,4,25,26,0,18,0,"{'ok': True, 'value': 25, 'stdout': '25\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4063987731933594}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 3, 2, 1], [8, 9, 9, 9], [10, 10, 9, 12], [11, 7, 7, 6]]"
1625,ilp_prod,16,98,160,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_b0abpk6l/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_b0abpk6l/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1510322093963623}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 30, 9, 36, 38, 26]
consumption (rows=resources) = [[12, 11, 12, 13, 7, 5], [14, 15, 16, 15, 16, 11], [2, 6, 5, 5, 2, 15], [12, 14, 7, 8, 10, 11]]
capacity = [51, 41, 63, 64]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1626,sub,16,2711833891482135,2711834091482135,0,2711833891482135,1,"{'ok': True, 'value': 2711833891482135, 'stdout': '2711833891482135\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09599637985229492}",1,Compute: 6200584253140738 - 3488750361658603
1627,ilp_prod,2,35,24,0,5,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/0aef4b391ebc4b599fa1fef8bcfbb158-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/0aef4b391ebc4b599fa1fef8bcfbb158-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17087292671203613}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 7]
consumption (rows=resources) = [[3, 1], [3, 2]]
capacity = [6, 10]
upper_bounds = [3, 5]"
1628,lcs,32,21,10,0,26,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07784223556518555}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbcdcdbcbcbcddaabdbbabdbbcbccacd""
T = ""abddcdacbcddbcccdbccabdbdcbbdcbad"""
1629,ilp_prod,2,12,15,0,9,0,"{'ok': True, 'value': 9, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e86b618d44c3465aa93a0c46a8c0bae2-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e86b618d44c3465aa93a0c46a8c0bae2-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 9 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -9 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                9.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n9.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.18355178833007812}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 4]
consumption (rows=resources) = [[2, 1], [2, 3]]
capacity = [6, 9]
upper_bounds = [3, 3]"
1630,rod,32,778,1035,0,96,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_lg62gwg4/main.py"", line 9, in <module>\n    res = cut_rod(P, N)\nNameError: name \'P\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07543230056762695}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [24, 45, 73, 73, 46, 35, 72, 29, 62, 95, 14, 62, 10, 61, 4, 96, 42, 93, 85, 41, 47, 59, 27, 84, 57, 91, 24, 4, 85, 62, 91, 6]"
1631,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08413100242614746}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acacdabaddaddbda""
T = ""cdbcbddbabcadddd"""
1632,sub,16,3574524263548020,5204433798648040,0,3574524263548020,1,"{'ok': True, 'value': 3574524263548020, 'stdout': '3574524263548020\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07334613800048828}",1,Compute: 8778958062196060 - 5204433798648040
1633,ilp_partition,2,3,1,0,0,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21058917045593262}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 4, 6, 1]"
1634,ilp_prod,2,26,22,0,20,0,"{'ok': True, 'value': 26, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c24c1befa7c64f76b0902143493c46a4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c24c1befa7c64f76b0902143493c46a4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 28 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 1.9999\nCbc0012I Integer solution of -20 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -26 found by DiveCoefficient after 1 iterations and 0 nodes (0.00 seconds)\nCbc0031I 1 added rows had average density of 2\nCbc0013I At root node, 1 cuts changed objective from -28 to -26 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 2 row cuts average 2.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -26, took 1 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -28 to -26\nProbing was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                26.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nThe maximum profit is: 26.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17387843132019043}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 8]
consumption (rows=resources) = [[1, 3], [2, 1]]
capacity = [7, 7]
upper_bounds = [3, 3]"
1635,sub,32,40108441981242349461184163203808,40108432037242349461184163203724,0,40108441981242349461184163203808,1,"{'ok': True, 'value': 40108441981242349461184163203808, 'stdout': '40108441981242349461184163203808\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07527899742126465}",1,Compute: 88022492154496190245588804945072 - 47914050173253840784404641741264
1636,rod,4,24,15,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08351492881774902}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [6, 11, 8, 8]"
1637,ilp_partition,4,2,0,0,12,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19659018516540527}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 6, 12, 8]"
1638,ilp_partition,32,1,10,0,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08302664756774902}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 38, 65, 54, 92, 85, 77, 18, 55, 21, 87, 53, 38, 60, 70, 44, 70, 96, 83, 11, 68, 8, 1, 35]"
1639,mul,32,1855946568689099721823775310979084757825781067457284803941254554,18843499999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,19238406374788880867646864655504466466666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 1855946568689099721823775310979084757825781067457284803941254554, 'stdout': '1855946568689099721823775310979084757825781067457284803941254554\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20002079010009766}",1,Compute: 29630321356653545779413110372133 * 62636734389394104296172344459538
1640,ilp_prod,16,126,134,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec__d4n7dtz/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23463797569274902}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 4, 10, 6, 19, 25]
consumption (rows=resources) = [[12, 9, 4, 3, 8, 10], [9, 2, 13, 5, 4, 10], [2, 4, 8, 5, 2, 15], [3, 11, 4, 12, 11, 2]]
capacity = [58, 36, 49, 56]
upper_bounds = [4, 5, 3, 4, 5, 3]"
1641,add,4,9436,9,0,9436,1,"{'ok': True, 'value': 9436, 'stdout': '9436\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08189892768859863}",1,Compute: 6859 + 2577
1642,ilp_partition,32,1,1,1,65,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08401942253112793}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [36, 39, 80, 73, 25, 67, 15, 34, 18, 89, 36, 19, 50, 44, 58, 39, 81, 37, 3, 34, 19, 36, 8, 65]"
1643,add,8,74571874,9,0,74571874,1,"{'ok': True, 'value': 74571874, 'stdout': '74571874\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08130693435668945}",1,Compute: 61041890 + 13529984
1644,knap,8,102,103,0,103,0,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07944130897521973}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [9, 1, 3, 14, 4, 14, 15, 3]
V = [7, 30, 10, 25, 12, 27, 3, 23]
C = 31"
1645,ilp_prod,32,350,1002,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ecoin8xc/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23706507682800293}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [71, 78, 20, 12, 76, 66]
consumption (rows=resources) = [[16, 1, 9, 17, 1, 23], [2, 6, 7, 2, 10, 32], [21, 25, 13, 24, 28, 18], [3, 32, 22, 22, 30, 31]]
capacity = [104, 68, 102, 114]
upper_bounds = [4, 3, 5, 4, 3, 3]"
1646,sub,4,227,227,1,227,1,"{'ok': True, 'value': 227, 'stdout': '227\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08455538749694824}",1,Compute: 4936 - 4709
1647,mul,32,2118096720174507874127920715962469778895516661773595364885358852,1,0,2123087845999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,"{'ok': True, 'value': 2118096720174507874127920715962469778895516661773595364885358852, 'stdout': '2118096720174507874127920715962469778895516661773595364885358852\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08365440368652344}",1,Compute: 85022085540903428176789186036756 * 24912311979873851839842082101517
1648,ilp_prod,32,975,,0,495,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/90cbc97eb1354849a0391a6f3b776117-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/90cbc97eb1354849a0391a6f3b776117-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 54 RHS\nAt line 61 BOUNDS\nAt line 68 ENDATA\nProblem MODEL has 6 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nProblem is unbounded - 0.00 seconds\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15915846824645996}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [35, 88, 36, 8, 95, 54]
consumption (rows=resources) = [[16, 4, 25, 12, 25, 25], [15, 7, 14, 2, 18, 32], [13, 8, 10, 21, 3, 17], [3, 7, 20, 2, 11, 14]]
capacity = [105, 93, 89, 105]
upper_bounds = [6, 10, 4, 4, 4, 3]"
1649,sub,32,55274569464630688057526305125605,,0,55274569464630688057526295125605,0,"{'ok': True, 'value': 55274569464630688057526305125605, 'stdout': '55274569464630688057526305125605\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08336949348449707}",1,Compute: 89543909666775588339105985539557 - 34269340202144900281579680413952
1650,ilp_partition,4,0,1,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20026445388793945}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 6, 11, 5]"
1651,mul,8,774550275702093,7724484644959683,0,7708326454443,0,"{'ok': True, 'value': 774550275702093, 'stdout': '774550275702093\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0825643539428711}",1,Compute: 48038353 * 16123581
1652,add,4,9935,9435,0,9935,1,"{'ok': True, 'value': 9935, 'stdout': '9935\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07367753982543945}",1,Compute: 1502 + 8433
1653,add{'ok': True, 'value': 168580097692525680523320424108666, 'stdout': '168580097692525680523320424108666\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07269716262817383}",1,Compute: 88249525219061086582816088047629 + 80330572473464593940504336061037
1654,sub,16,6165258931603640,12,0,6165258931603640,1,"{'ok': True, 'value': 6165258931603640, 'stdout': '6165258931603640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08496904373168945}",1,Compute: 8877800856019416 - 2712541924415776
1655,sub,32,82080087719341791008840094080880,,0,82080087720341791008840094080880,0,"{'ok': True, 'value': 82080087719341791008840094080880, 'stdout': '82080087719341791008840094080880\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07448601722717285}",1,Compute: 96696956566271294075040626447197 - 14616868846929503066200532366317
1656,mul,32,1296339257218745044857682825709117890010620677292342034636095080,1309223393172209984994999111822280,0,13099383333136639550371566676458556666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"{'ok': True, 'value': 1296339257218745044857682825709117890010620677292342034636095080, 'stdout': '1296339257218745044857682825709117890010620677292342034636095080\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10022759437561035}",1,Compute: 53859474539078749495722466477173 * 24068917647500661029988898133960
1657,mul,4,32784112,197,0,32049664,0,"{'ok': True, 'value': 32784112, 'stdout': '32784112\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09611725807189941}",1,Compute: 9734 * 3368
1658,mul,32,1256167314349790749029939499682109895185282142908946013118393154,124867926255562281388582036793201,0,"The result of the multiplication is a very large number, which is beyond the range of standard integer types in Python. The result will be printed in scientific notation.",0,"{'ok': True, 'value': 1256167314349790749029939499682109895185282142908946013118393154, 'stdout': '1256167314349790749029939499682109895185282142908946013118393154\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08173632621765137}",1,Compute: 45863962085187427135854012264407 * 27388983795525421192864485076622
1659,ilp_assign,8,42,56,0,56,0,"{'ok': True, 'value': 42, 'stdout': '42\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4001278877258301}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[24, 19, 11, 8, 6, 16, 14], [4, 12, 2, 3, 5, 4, 4], [13, 16, 13, 6, 11, 16, 1], [18, 23, 7, 10, 11, 22, 19], [21, 8, 6, 13, 17, 19, 10], [9, 4, 13, 17, 21, 12, 3], [24, 9, 12, 7, 19, 22, 14]]"
1660,add,2,91,91,1,91,1,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08101558685302734}",1,Compute: 80 + 11
1661,ilp_partition,8,0,1,0,60,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371400833129883}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 13, 20, 9, 13, 23, 8, 7]"
1662,ilp_prod,2,18,20,0,9,0,"{'ok': True, 'value': 3, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3a7497cc809e4d3fb2457cfbde2d3032-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3a7497cc809e4d3fb2457cfbde2d3032-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 3 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -3 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                3.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n3.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1536240577697754}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 4]
consumption (rows=resources) = [[1, 1], [1, 3]]
capacity = [8, 6]
upper_bounds = [6, 3]"
1663,add,16,10822558240143633,10822558240143633,1,10822558239943633,0,"{'ok': True, 'value': 10822558240143633, 'stdout': '10822558240143633\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07982087135314941}",1,Compute: 7214593071331522 + 3607965168812111
1664,rod,8,184,24,0,24,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07651352882385254}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 4, 2, 3, 8, 12, 20, 24]"
1665,ilp_prod,32,360,258,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ki2b2r8x/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.25928592681884766}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [21, 76, 91, 57, 53, 72]
consumption (rows=resources) = [[18, 6, 23, 30, 6, 31], [8, 12, 3, 22, 11, 9], [2, 4, 8, 16, 13, 28], [14, 29, 28, 1, 7, 14]]
capacity = [79, 70, 76, 71]
upper_bounds = [4, 3, 3, 3, 5, 3]"
1666,ilp_prod,4,56,28,0,10,0,"{'ok': True, 'value': 15, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/63dc45ea0e344190bf57a5186d898048-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/63dc45ea0e344190bf57a5186d898048-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 15 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -15 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                15.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n15.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1549391746520996}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7, 7]
consumption (rows=resources) = [[1, 1, 1], [1, 2, 2], [4, 1, 2]]
capacity = [8, 16, 10]
upper_bounds = [3, 8, 5]"
1667,ilp_partition,2,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19157052040100098}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 3, 3, 3]"
1668,rod,4,36,12,0,12,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07740545272827148}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 3, 9, 12]"
1669,lcs,8,4,4,1,26,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08080625534057617}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadcbbda""
T = ""dacabaacd"""
1670,ilp_assign,4,13,,0,18,0,"{'ok': True, 'value': 13, 'stdout': '13\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3980824947357178}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[9, 11, 5, 5], [1, 10, 11, 10], [3, 5, 4, 9], [9, 12, 2, 5]]"
1671,mul,8,863764924481004,8000080400405554,0,8643633333364,0,"{'ok': True, 'value': 863764924481004, 'stdout': '863764924481004\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08658099174499512}",1,Compute: 42285516 * 20426969
1672,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08416628837585449}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""bb"""
1673,rod,2,12,6,0,8,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_jyyevhen/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08083081245422363}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 2]"
1674,mul,2,1860,1860,1,1860,1,"{'ok': True, 'value': 1860, 'stdout': '1860\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08153915405273438}",1,Compute: 93 * 20
1675,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09640955924987793}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbcbaccdcddcaab""
T = ""aabcddadacadcbcd"""
1676,lcs,32,18,10,0,26,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08404779434204102}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acaacaabbdbddadabdccbbcccdccbaad""
T = ""cdddcacdccdcdbcacbcadcbcaacdaddb"""
1677,sub,8,62015259,62015259,1,62015259,1,"{'ok': True, 'value': 62015259, 'stdout': '62015259\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07968640327453613}",1,Compute: 82516631 - 20501372
1678,add,8,115639527,116560110,0,115639527,1,"{'ok': True, 'value': 115639527, 'stdout': '115639527\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07423782348632812}",1,Compute: 99770116 + 15869411
1679,add,32,39625564503187475922256129904078,39613344503187479421256102704078,0,39625564503187475922256129904078,1,"{'ok': True, 'value': 39625564503187475922256129904078, 'stdout': '39625564503187475922256129904078\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07411694526672363}",1,Compute: 26161679702568196185748051396133 + 13463884800619279736508078507945
1680,ilp_partition,2,0,0,1,3,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.25266242027282715}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 6, 3]"
1681,sub,32,28124233138609391737841230920565,28124233138609391737842240920566,0,28124233138609391737841230920565,1,"{'ok': True, 'value': 28124233138609391737841230920565, 'stdout': '28124233138609391737841230920565\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07721567153930664}",1,Compute: 51822211301324548742572929024492 - 23697978162715157004731698103927
1682,add,8,189135938,189134938,0,189135938,1,"{'ok': True, 'value': 189135938, 'stdout': '189135938\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07867622375488281}",1,Compute: 96345811 + 92790127
1683,sub,32,24855697457860163498228511468949,24855706457858503500050511368951,0,-15036302458159754502229881469051,0,"{'ok': True, 'value': 24855697457860163498228511468949, 'stdout': '24855697457860163498228511468949\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07538700103759766}",1,Compute: 67444483531602748072264899677685 - 42588786073742584574036388208736
1684,ilp_partition,4,2,1,0,7,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1877155303955078}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 10, 7, 6]"
1685,add,2,125,125,1,125,1,"{'ok': True, 'value': 125, 'stdout': '125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09318137168884277}",1,Compute: 50 + 75
1686,sub,2,35,35,1,35,1,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07428598403930664}",1,Compute: 55 - 20
1687,knap,32,1698,1004,0,15,0,"{'ok': True, 'value': 1698, 'stdout': '1698\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07831668853759766}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [37, 52, 33, 14, 15, 6, 39, 23, 34, 18, 46, 43, 23, 61, 16, 19, 29, 31, 14, 52, 50, 47, 51, 18, 54, 54, 6, 25, 7, 48, 37, 43]
V = [117, 5, 19, 33, 105, 51, 88, 111, 67, 84, 103, 4, 102, 73, 113, 50, 125, 54, 11, 85, 3, 49, 106, 84, 45, 17, 14, 15, 101, 85, 85, 101]
C = 522"
1688,lcs,8,2,4,0,5,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07418465614318848}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cccdadbb""
T = ""baadddac"""
1689,ilp_partition,8,2,1,0,4,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18810176849365234}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 23, 23, 8, 11, 3, 5, 22]"
1690,sub,4,3950,3950,1,3950,1,"{'ok': True, 'value': 3950, 'stdout': '3950\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07643413543701172}",1,Compute: 8883 - 4933
1691,ilp_partition,2,0,0,1,6,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18900442123413086}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 6, 6, 6]"
1692,rod,32,1088,1052,0,34,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_am0jtn4i/main.py"", line 9, in <module>\n    res = cut_rod(P, N)\nNameError: name \'P\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08567953109741211}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [34, 54, 51, 90, 93, 24, 50, 52, 75, 23, 56, 49, 94, 96, 52, 62, 31, 72, 69, 22, 63, 87, 4, 85, 20, 33, 40, 21, 27, 26, 26, 67]"
1693,ilp_prod,4,35,39,0,39,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/f0be5684f8ac474799fa6bd11ffba5b7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/f0be5684f8ac474799fa6bd11ffba5b7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.4286 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16565346717834473}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3, 9]
consumption (rows=resources) = [[4, 4, 3], [1, 2, 3], [2, 4, 1]]
capacity = [13, 10, 10]
upper_bounds = [3, 3, 3]"
1694,sub,4,639,4172,0,639,1,"{'ok': True, 'value': 639, 'stdout': '639\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07955360412597656}",1,Compute: 7171 - 6532
1695,add,16,10740030820237004,10739930820237004,0,10740030820237004,1,"{'ok': True, 'value': 10740030820237004, 'stdout': '10740030820237004\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07381272315979004}",1,Compute: 8547655782043153 + 2192375038193851
1696,lcs,32,20,10,0,26,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08201432228088379}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acbccbdcdadacdbdddaacacadaadbbbd""
T = ""cdcddbccccdcbbaadacdddabccbbbdac"""
1697,lcs,32,20,10,0,20,1,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07701659202575684}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abaaadadacdddcddbbbbaaadadcdbcdb""
T = ""dccadbcdbdcbbcbddaaaabdcabcaadb"""
1698,add,32,72853780755979204232647342238923,74333780756079204232547342238923,0,72853780755979154232647342238923,0,"{'ok': True, 'value': 72853780755979204232647342238923, 'stdout': '72853780755979204232647342238923\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0752568244934082}",1,Compute: 35618451876278674804891987438255 + 37235328879700529427755354800668
1699,ilp_assign,8,33,46,0,46,0,"{'ok': True, 'value': 33, 'stdout': '33\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4213409423828125}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[16, 20, 13, 13, 6, 1, 2], [3, 4, 16, 20, 4, 3, 7], [13, 11, 9, 2, 20, 21, 17], [19, 22, 16, 17, 18, 24, 22], [11, 21, 4, 22, 11, 9, 1], [9, 2, 22, 2, 13, 12, 1], [16, 19, 12, 6, 8, 24, 6]]"
1700,lcs,32,17,10,0,26,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07601666450500488}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abababaccabcbcccbabcabcccddbaabb""
T = ""cbabcbdddbdcaaadbdaabddbdabbbcbac"""
1701,knap,2,4,7,0,7,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08446002006530762}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 4, 1]
V = [3, 3, 4]
C = 4"
1702,ilp_assign,4,17,23,0,20,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4647691249847412}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 8, 5, 7], [7, 12, 12, 11], [3, 3, 8, 4], [3, 10, 4, 2]]"
1703,ilp_assign,2,10,9,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4605128765106201}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [4, 6]]"
1704,knap,2,9,15,0,9,1,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09158182144165039}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 2]
V = [6, 9, 4]
C = 3"
1705,knap,4,26,22,0,1,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07803702354431152}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 3, 3, 4]
V = [6, 3, 16, 10]
C = 9"
1706,rod,32,2496,1050,0,78,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.041881799697876}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [78, 50, 1, 43, 63, 51, 66, 56, 46, 33, 51, 66, 53, 15, 46, 3, 2, 16, 83, 27, 44, 67, 9, 6, 69, 16, 6, 52, 21, 8, 94, 65]"
1707,rod,16,704,65,0,7,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09768414497375488}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 15, 3, 47, 14, 42, 3, 18, 3, 36, 4, 24, 36, 13, 44, 47]"
1708,mul,16,18659719637020588292693676516825,9392188647,0,186136888881545966446664684555,0,"{'ok': True, 'value': 18659719637020588292693676516825, 'stdout': '18659719637020588292693676516825\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09050440788269043}",1,Compute: 9392188647088161 * 1986727517744825
1709,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08829784393310547}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cc""
T = ""bbd"""
1710,knap,2,8,11,0,14,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1101691722869873}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 2]
V = [6, 8, 2]
C = 5"
1711,ilp_partition,8,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2187943458557129}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 12, 13, 14, 1, 8, 3, 12]"
1712,rod,8,128,,0,64,0,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07553505897521973}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [16, 9, 23, 5, 3, 4, 7, 20]"
1713,mul,8,504657778739700,509653497157000,0,501555597367800,0,"{'ok': True, 'value': 504657778739700, 'stdout': '504657778739700\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08401989936828613}",1,Compute: 27404385 * 18415220
1714,sub,32,14981848750393653124687095288467,159821687150333653232897353288667,0,14981848750403653324687095288467,0,"{'ok': True, 'value': 14981848750393653124687095288467, 'stdout': '14981848750393653124687095288467\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1305537223815918}",1,Compute: 60348657372190026778445392066710 - 45366808621796373653758296778243
1715,lcs,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07229781150817871}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbda""
T = ""ddd"""
1716,rod,4,20,13,0,14,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0744330883026123}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 4, 9, 10]"
1717,mul,2,946,946,1,946,1,"{'ok': True, 'value': 946, 'stdout': '946\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09796380996704102}",1,Compute: 22 * 43
1718,rod,16,304,46,0,64,0,"{'ok': True, 'value': 304, 'stdout': '304\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0950021743774414}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [19, 10, 4, 48, 42, 47, 37, 41, 45, 42, 1, 35, 40, 5, 28, 24]"
1719,add{'ok': True, 'value': 150907343186739488569450206215720, 'stdout': '150907343186739488569450206215720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1329813003540039}",1,Compute: 96692383788400280568047766234203 + 54214959398339208001402439981517
1720,mul,8,688525929115392,224,0,68215843859456,0,"{'ok': True, 'value': 688525929115392, 'stdout': '688525929115392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07382965087890625}",1,Compute: 23864208 * 28851824
1721,ilp_partition,4,1,1,1,29,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1861104965209961}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 5, 3, 10]"
1722,ilp_assign,2,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42177844047546387}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 5], [3, 2]]"
1723,ilp_partition,2,1,1,1,6,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20821523666381836}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 6, 3, 4]"
1724,ilp_assign,32,129,187,0,113,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_44wuz_qk/main.py"", line 4, in <module>\n    C = np.array([[74, 92, 18, 17, 40, 86, 3], ...])\nValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3980522155761719}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[74, 92, 18, 17, 40, 86, 3], [73, 48, 59, 73, 18, 68, 39], [37, 55, 40, 33, 69, 69, 38], [81, 50, 72, 15, 71, 20, 17], [32, 10, 52, 65, 18, 34, 61], [26, 36, 76, 50, 56, 30, 15], [93, 35, 60, 12, 11, 76, 25]]"
1725,add,8,136790665,136791665,0,136790665,1,"{'ok': True, 'value': 136790665, 'stdout': '136790665\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08527302742004395}",1,Compute: 78972632 + 57818033
1726,add,32,88022812603478966025404386398891,,0,88022812603478965825404386398891,0,"{'ok': True, 'value': 88022812603478966025404386398891, 'stdout': '88022812603478966025404386398891\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07495927810668945}",1,Compute: 32281771310536039823012073737290 + 55741041292942926202392312661601
1727,rod,8,136,22,0,1,0,"{'ok': True, 'value': 136, 'stdout': '136\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08364009857177734}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [17, 8, 22, 15, 2, 4, 4, 7]"
1728,lcs,8,4,4,1,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08445453643798828}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcccbbdd""
T = ""daabaccc"""
1729,ilp_assign,4,23,-1,0,11,0,"{'ok': True, 'value': 23, 'stdout': '23\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41456174850463867}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2, 1, 7], [6, 3, 8, 4], [12, 11, 12, 11], [12, 12, 11, 7]]"
1730,add,8,105188243,,0,105188243,1,"{'ok': True, 'value': 105188243, 'stdout': '105188243\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07849478721618652}",1,Compute: 54285310 + 50902933
1731,ilp_partition,32,1,10,0,1,1,"{'ok': True, 'value': 1197, 'stdout': '1197\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20584535598754883}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [74, 58, 79, 94, 25, 23, 75, 9, 86, 53, 44, 2, 23, 64, 8, 91, 76, 11, 27, 28, 74, 84, 29, 60]"
1732,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0988776683807373}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daad""
T = ""bbaad"""
1733,sub,8,49229328,49229328,1,49229328,1,"{'ok': True, 'value': 49229328, 'stdout': '49229328\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08371233940124512}",1,Compute: 83348469 - 34119141
1734,knap,2,8,10,0,-1,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08507323265075684}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 4]
V = [8, 2, 5]
C = 7"
1735,ilp_assign,16,54,105,0,5,0,"{'ok': True, 'value': 54, 'stdout': '54\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.364917516708374}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 2, 5, 45, 24, 4, 32], [25, 2, 5, 45, 7, 22, 44], [34, 1, 44, 4, 26, 23, 18], [41, 15, 1, 31, 22, 1, 24], [46, 37, 4, 5, 27, 7, 41], [34, 12, 37, 39, 11, 29, 29], [13, 34, 45, 5, 31, 38, 23]]"
1736,sub,8,21434296,65843843,0,21434296,1,"{'ok': True, 'value': 21434296, 'stdout': '21434296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07547283172607422}",1,Compute: 65849472 - 44415176
1737,sub,32,48563904403751570104798499768327,,0,48563894403751569904798500000000,0,"{'ok': True, 'value': 48563904403751570104798499768327, 'stdout': '48563904403751570104798499768327\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07340502738952637}",1,Compute: 62798359377196656217554722308566 - 14234454973445086112756222540239
1738,rod,8,72,22,0,1,0,"{'ok': True, 'value': 72, 'stdout': '72\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07270359992980957}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [4, 18, 13, 9, 21, 7, 6, 15]"
1739,rod,16,320,64,0,1,0,"{'ok': True, 'value': 320, 'stdout': '320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11103534698486328}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [20, 35, 40, 33, 25, 12, 2, 31, 33, 37, 28, 6, 29, 11, 44, 35]"
1740,sub,4,565,565,1,565,1,"{'ok': True, 'value': 565, 'stdout': '565\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08716964721679688}",1,Compute: 1625 - 1060
1741,rod,16,256,46,0,60,0,"{'ok': True, 'value': 256, 'stdout': '256\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10022306442260742}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [16, 17, 23, 17, 11, 11, 41, 38, 15, 10, 19, 41, 43, 32, 27, 29]"
1742,mul,16,29516323937006462861601400823155,The final result of the multiplication is a very large number with many digits{'ok': True, 'value': 29516323937006462861601400823155, 'stdout': '29516323937006462861601400823155\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07349228858947754}",1,Compute: 3336460837462757 * 8846596850647415
1743,ilp_assign,32,116,105,0,105,0,"{'ok': True, 'value': 116, 'stdout': '116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36037731170654297}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[74, 3, 64, 54, 1, 22, 71], [85, 15, 48, 26, 45, 63, 64], [77, 95, 73, 17, 68, 8, 40], [7, 33, 31, 91, 24, 2, 1], [77, 9, 29, 67, 45, 78, 32], [68, 66, 46, 70, 82, 89, 70], [25, 66, 84, 94, 29, 34, 38]]"
1744,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41518187522888184}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [5, 5]]"
1745,lcs,16,9,7,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0880281925201416}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badbbacbdcbabcbb""
T = ""acaddcbaccacdadab"""
1746,knap,8,103,103,1,30,0,"{'ok': True, 'value': 103, 'stdout': '103\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08819961547851562}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 4, 10, 14, 14, 9, 5, 4]
V = [24, 26, 8, 12, 4, 27, 2, 18]
C = 31"
1747,knap,16,430,1084,0,-47,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37647008895874023}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 24, 11, 10, 25, 3, 29, 8, 30, 21, 4, 11, 19, 11, 13, 16]
V = [52, 19, 26, 44, 60, 6, 22, 48, 53, 15, 16, 54, 48, 60, 42, 13]
C = 128"
1748,add,8,124295175,69998956,0,124295175,1,"{'ok': True, 'value': 124295175, 'stdout': '124295175\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08710527420043945}",1,Compute: 62800495 + 61494680
1749,ilp_prod,16,219,160,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_t0j5srfz/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2272183895111084}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [17, 48, 36, 37, 8, 15]
consumption (rows=resources) = [[7, 5, 5, 5, 5, 7], [13, 14, 10, 8, 2, 16], [5, 12, 4, 14, 4, 3], [11, 8, 8, 4, 2, 2]]
capacity = [51, 58, 54, 38]
upper_bounds = [3, 4, 4, 3, 10, 3]"
1750,rod,8,168,22,0,21,0,"{'ok': True, 'value': 168, 'stdout': '168\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08734512329101562}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [21, 7, 10, 9, 2, 4, 5, 18]"
1751,knap,8,76,103,0,103,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08490729331970215}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 7, 16, 15, 6, 10, 16, 12]
V = [7, 1, 22, 23, 30, 10, 18, 4]
C = 46"
1752,add,2,151,151,1,151,1,"{'ok': True, 'value': 151, 'stdout': '151\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08353471755981445}",1,Compute: 80 + 71
1753,sub,8,39052684,6,0,39052684,1,"{'ok': True, 'value': 39052684, 'stdout': '39052684\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08356356620788574}",1,Compute: 52834103 - 13781419
1754,knap,4,5,4,0,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08411860466003418}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 4, 7]
V = [1, 2, 3, 1]
C = 10"
1755,knap,32,1589,2348,0,-1,0,"{'ok': True, 'value': 1589, 'stdout': '1589\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08648300170898438}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 18, 6, 45, 26, 35, 13, 51, 4, 50, 41, 14, 43, 57, 52, 10, 42, 12, 44, 42, 40, 41, 59, 33, 6, 48, 12, 54, 53, 43, 64, 40]
V = [48, 64, 109, 55, 44, 116, 99, 49, 71, 83, 36, 48, 34, 16, 27, 18, 90, 54, 112, 55, 125, 105, 67, 9, 86, 59, 67, 57, 20, 99, 65, 28]
C = 555"
1756,ilp_partition,16,0,1,0,10,0,"{'ok': True, 'value': 316, 'stdout': '316\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19568204879760742}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [11, 7, 29, 37, 8, 14, 12, 18, 7, 31, 24, 25, 34, 39, 3, 17]"
1757,lcs,32,17,10,0,20,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08621716499328613}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbbaaaacbdabbddabbbaccabacbbaacd""
T = ""acdbccddddacddadbdbaaaabacabdddbb"""
1758,knap,2,7,8,0,10,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07437849044799805}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 3]
V = [6, 7, 1]
C = 3"
1759,mul,32,4670993493054521043213751420304018621956068301942318632381072794,46951330928383518020654443552811,0,4663983894233839291894595966653446646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646646,0,"{'ok': True, 'value': 4670993493054521043213751420304018621956068301942318632381072794, 'stdout': '4670993493054521043213751420304018621956068301942318632381072794\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09967517852783203}",1,Compute: 99485859094800704974183955311054 * 46951330928383518020654443552811
1760,ilp_prod,2,14,20,0,8,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/03b13ae7d4c54b91bfce37ae81f0de9a-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/03b13ae7d4c54b91bfce37ae81f0de9a-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.160933256149292}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 5]
consumption (rows=resources) = [[3, 1], [3, 3]]
capacity = [8, 8]
upper_bounds = [3, 3]"
1761,ilp_prod,32,502,238,0,240,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ctz5pcc8/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_ctz5pcc8/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1771543025970459}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [26, 64, 71, 12, 4, 62]
consumption (rows=resources) = [[18, 20, 4, 4, 19, 1], [18, 2, 26, 27, 8, 9], [13, 18, 31, 8, 11, 10], [32, 8, 32, 6, 23, 16]]
capacity = [80, 109, 119, 108]
upper_bounds = [3, 4, 3, 4, 4, 6]"
1762,add,2,125,125,1,125,1,"{'ok': True, 'value': 125, 'stdout': '125\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0834202766418457}",1,Compute: 73 + 52
1763,ilp_assign,32,148,205,0,216,0,"{'ok': True, 'value': 148, 'stdout': '148\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.376054048538208}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[50, 65, 61, 40, 8, 90, 55], [7, 34, 7, 65, 59, 23, 17], [50, 17, 35, 80, 87, 73, 27], [35, 82, 94, 47, 90, 94, 32], [8, 88, 3, 68, 86, 88, 84], [90, 84, 64, 43, 42, 44, 87], [79, 91, 17, 73, 81, 92, 37]]"
1764,lcs,8,3,3,1,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09587240219116211}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""abdbcbdd""
T = ""ccdadda"""
1765,lcs,16,10,7,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09215545654296875}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdccdaaabcabdacc""
T = ""ccccdbdaccdabbddc"""
1766,ilp_prod,8,120,110,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_2f0480kf/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_2f0480kf/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15244388580322266}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 20, 21, 14]
consumption (rows=resources) = [[1, 3, 2, 2], [4, 3, 7, 6], [4, 2, 7, 4], [3, 4, 8, 7]]
capacity = [25, 27, 21, 24]
upper_bounds = [5, 6, 3, 3]"
1767,ilp_partition,8,1,1,1,0,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.35454225540161133}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 16, 23, 2, 9, 1, 10, 10]"
1768,sub,16,5657383298219082,5657383308218982,0,5657383298219082,1,"{'ok': True, 'value': 5657383298219082, 'stdout': '5657383298219082\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0887291431427002}",1,Compute: 6668874690382378 - 1011491392163296
1769,rod,32,704,1050,0,19,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.0333640575408936}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [19, 13, 57, 88, 10, 7, 90, 78, 82, 30, 46, 37, 18, 95, 78, 77, 1, 58, 9, 77, 66, 88, 44, 30, 53, 37, 1, 2, 90, 18, 47, 87]"
1770,sub,8,1509097,1509008,0,1509097,1,"{'ok': True, 'value': 1509097, 'stdout': '1509097\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07895135879516602}",1,Compute: 36744110 - 35235013
1771,knap,16,398,113,0,108,0,"{'ok': True, 'value': 504, 'stdout': '504\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39694666862487793}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 3, 9, 27, 9, 6, 20, 17, 31, 13, 6, 8, 25, 7, 18, 10]
V = [26, 53, 32, 27, 14, 60, 27, 27, 10, 51, 54, 12, 47, 9, 51, 4]
C = 113"
1772,sub,8,11631130,11931130,0,11631130,1,"{'ok': True, 'value': 11631130, 'stdout': '11631130\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0757589340209961}",1,Compute: 75261419 - 63630289
1773,ilp_partition,32,0,1,0,12,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18679285049438477}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 75, 20, 77, 81, 1, 79, 28, 8, 31, 17, 40, 18, 33, 78, 81, 78, 78, 56, 1, 15, 16, 39, 48]"
1774,ilp_assign,2,5,4,0,7,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36353111267089844}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 3], [2, 5]]"
1775,sub,8,9999768,999768,0,999768,0,"{'ok': True, 'value': 9999768, 'stdout': '9999768\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08481812477111816}",1,Compute: 58207285 - 48207517
1776,ilp_prod,32,728,"The solution to the problem is the maximum profit that can be achieved, given the constraints.",0,264,0,"{'ok': True, 'value': 180, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b49f4dd1902c44b18380a090b7c86094-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b49f4dd1902c44b18380a090b7c86094-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 19 COLUMNS\nAt line 122 RHS\nAt line 137 BOUNDS\nAt line 144 ENDATA\nProblem MODEL has 14 rows, 6 columns and 84 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 189.31 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -180 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                180.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n180.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1610698699951172}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [45, 57, 77, 29, 28, 91]
consumption (rows=resources) = [[13, 22, 18, 24, 13, 7], [26, 31, 14, 28, 27, 14], [23, 3, 5, 27, 25, 7], [29, 18, 11, 25, 13, 6]]
capacity = [81, 125, 126, 122]
upper_bounds = [4, 3, 4, 3, 4, 8]"
1777,knap,32,1727,1045,0,0,0,"{'ok': True, 'value': 2089, 'stdout': '2089.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.6078181266784668}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 36, 55, 24, 60, 51, 50, 41, 29, 17, 35, 58, 15, 61, 17, 64, 3, 41, 5, 46, 19, 24, 18, 2, 13, 48, 35, 24, 40, 2, 6, 21]
V = [90, 116, 69, 9, 13, 26, 128, 70, 16, 104, 52, 95, 67, 16, 119, 42, 42, 60, 113, 48, 84, 17, 115, 87, 45, 102, 82, 60, 118, 52, 21, 11]
C = 488"
1778,ilp_partition,32,0,10,0,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08162188529968262}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 96, 55, 52, 54, 64, 96, 80, 20, 9, 40, 83, 84, 18, 95, 37, 42, 91, 6, 67, 84, 35, 27, 36]"
1779,mul,8,2509070405103411,250000000000335000,0,2512330435971571,0,"{'ok': True, 'value': 2509070405103411, 'stdout': '2509070405103411\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09072589874267578}",1,Compute: 33349773 * 75235007
1780,mul,16,65061903220336934138297891341668,6789864254,0,6482496255561168888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888,0,"{'ok': True, 'value': 65061903220336934138297891341668, 'stdout': '65061903220336934138297891341668\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07541465759277344}",1,Compute: 7480355353038364 * 8697702201261087
1781,mul,16,8287832869502822717311786173840,821948888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888,0,818828199681118059685586866481560,0,"{'ok': True, 'value': 8287832869502822717311786173840, 'stdout': '8287832869502822717311786173840\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0841684341430664}",1,Compute: 1447917209869915 * 5723968755262896
1782,mul,32,2108795700942415041156488588893687240736762268692395798384146582,2,0,208279259119954999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,"{'ok': True, 'value': 2108795700942415041156488588893687240736762268692395798384146582, 'stdout': '2108795700942415041156488588893687240736762268692395798384146582\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08199310302734375}",1,Compute: 28432467655978750523146009186814 * 74168578206365412514737730937013
1783,ilp_assign,8,26,19,0,51,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4032909870147705}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[23, 7, 21, 24, 17, 14, 21], [6, 14, 21, 1, 9, 9, 3], [1, 15, 10, 9, 12, 2, 14], [2, 20, 2, 7, 20, 1, 5], [3, 7, 17, 21, 13, 14, 23], [11, 4, 4, 21, 8, 11, 3], [21, 6, 6, 18, 8, 23, 16]]"
1784,ilp_assign,2,6,4,0,7,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37166905403137207}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [3, 5]]"
1785,ilp_prod,32,276,1056,0,The answer will be printed after running the code.,0,"{'ok': True, 'value': 27, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/150d92ea87ab4745afa93478a1419b1e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/150d92ea87ab4745afa93478a1419b1e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 52 RHS\nAt line 57 BOUNDS\nAt line 64 ENDATA\nProblem MODEL has 4 rows, 6 columns and 24 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 29.0323 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -27 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                27.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n27.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17556118965148926}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 57, 38, 92, 49, 4]
consumption (rows=resources) = [[21, 18, 28, 25, 22, 10], [28, 32, 2, 12, 25, 1], [31, 28, 29, 15, 14, 30], [28, 30, 14, 21, 21, 15]]
capacity = [75, 113, 100, 95]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1786,rod,16,656,46,0,65,0,"{'ok': True, 'value': 656, 'stdout': '656\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10582375526428223}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [41, 46, 8, 21, 37, 23, 6, 13, 21, 37, 33, 16, 17, 18, 21, 46]"
1787,add,16,11998556271458695,119985562714587054,0,12008556271458705,0,"{'ok': True, 'value': 11998556271458695, 'stdout': '11998556271458695\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.082794189453125}",1,Compute: 7588917257185380 + 4409639014273315
1788,lcs,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0843803882598877}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""ca"""
1789,rod,16,736,46,0,64,0,"{'ok': True, 'value': 736, 'stdout': '736\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1023719310760498}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [46, 13, 8, 4, 27, 17, 39, 39, 9, 9, 9, 39, 15, 23, 31, 39]"
1790,ilp_prod,4,22,33,0,13,0,"{'ok': True, 'value': 22, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/fd5716aff1a748ce91247e2cc18f2a71-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/fd5716aff1a748ce91247e2cc18f2a71-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 22 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -22 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                22.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n22.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17002248764038086}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 3, 5]
consumption (rows=resources) = [[4, 2, 1], [1, 4, 3], [3, 3, 4]]
capacity = [8, 12, 13]
upper_bounds = [3, 3, 3]"
1791,lcs,16,9,8,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09321999549865723}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbadcaddbabdacba""
T = ""aaccadccdaabccda"""
1792,ilp_partition,16,0,10,0,20,0,"{'ok': True, 'value': 318, 'stdout': '318\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22762060165405273}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [17, 33, 39, 8, 12, 31, 3, 14, 28, 18, 18, 39, 22, 25, 6, 5]"
1793,ilp_assign,4,14,1,0,18,0,"{'ok': True, 'value': 14, 'stdout': '14\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.36509180068969727}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 11, 5, 4], [11, 12, 3, 5], [6, 9, 11, 2], [3, 8, 4, 10]]"
1794,lcs,2,2,2,1,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0743408203125}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ab""
T = ""bab"""
1795,sub,4,2783,2783,1,2783,1,"{'ok': True, 'value': 2783, 'stdout': '2783\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07789182662963867}",1,Compute: 7469 - 4686
1796,knap,32,1659,1655,0,-1,0,"{'ok': True, 'value': 1659, 'stdout': '1659\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09130382537841797}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [58, 7, 46, 41, 18, 5, 61, 15, 56, 29, 61, 50, 21, 64, 35, 12, 6, 58, 57, 54, 36, 38, 20, 19, 49, 13, 28, 1, 4, 17, 64, 42]
V = [79, 8, 122, 42, 45, 125, 27, 26, 77, 110, 107, 79, 49, 20, 54, 65, 128, 5, 41, 43, 20, 126, 71, 127, 52, 49, 74, 8, 103, 61, 33, 46]
C = 542"
1797,ilp_prod,4,23,33,0,33,0,"{'ok': True, 'value': 22, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/97b161f0224a472b98c37dddb77490af-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/97b161f0224a472b98c37dddb77490af-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 22 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -22 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                22.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n22.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15502119064331055}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 5, 6]
consumption (rows=resources) = [[4, 3, 2], [1, 4, 4], [4, 4, 3]]
capacity = [8, 11, 11]
upper_bounds = [3, 3, 3]"
1798,knap,4,24,22,0,4,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08033561706542969}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 8, 3, 5]
V = [1, 5, 12, 12]
C = 10"
1799,ilp_assign,8,38,56,0,46,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4547703266143799}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[13, 13, 5, 24, 16, 9, 22], [21, 18, 18, 2, 14, 11, 7], [1, 14, 11, 6, 4, 21, 8], [24, 11, 13, 22, 11, 11, 6], [7, 19, 8, 13, 4, 13, 19], [18, 21, 20, 8, 24, 10, 1], [6, 19, 10, 12, 11, 17, 11]]"
1800,ilp_partition,4,1,1,1,5,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20152831077575684}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 5, 3, 3]"
1801,add,2,92,92,1,92,1,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.13164544105529785}",1,Compute: 41 + 51
1802,sub,2,68,68,1,68,1,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07486176490783691}",1,Compute: 83 - 15
1803,add,4,4450,4450,1,4450,1,"{'ok': True, 'value': 4450, 'stdout': '4450\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0853421688079834}",1,Compute: 3021 + 1429
1804,ilp_assign,4,15,18,0,18,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3970808982849121}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 7, 8, 3], [6, 10, 9, 4], [10, 4, 10, 10], [8, 10, 5, 2]]"
1805,ilp_partition,32,1,10,0,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19846463203430176}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [52, 16, 8, 19, 33, 1, 73, 18, 96, 69, 40, 11, 66, 69, 33, 6, 77, 5, 47, 65, 53, 53, 92, 7]"
1806,ilp_prod,16,171,The solution to this problem would be the maximum profit that can be obtained while satisfying the resource constraints.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_1dhibie5/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23667597770690918}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 15, 4, 33, 38, 42]
consumption (rows=resources) = [[15, 12, 12, 16, 3, 14], [16, 15, 15, 13, 5, 13], [14, 2, 13, 9, 2, 10], [7, 2, 10, 10, 12, 11]]
capacity = [44, 47, 41, 49]
upper_bounds = [3, 3, 3, 3, 4, 3]"
1807,lcs,4,2,2,1,-1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07429838180541992}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""acab""
T = ""bdbcb"""
1808,add,32,130759694607538235156627650639164,120759794607538244958627350639210,0,130760694607538235156627650639164,0,"{'ok': True, 'value': 130759694607538235156627650639164, 'stdout': '130759694607538235156627650639164\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0737144947052002}",1,Compute: 57310214285477142745806944823559 + 73449480322061092410820705815605
1809,add,16,15215852800462811,15215852899465311,0,15215852799462811,0,"{'ok': True, 'value': 15215852800462811, 'stdout': '15215852800462811\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07300138473510742}",1,Compute: 5704666677600482 + 9511186122862329
1810,ilp_partition,32,1,10,0,5,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0863797664642334}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [53, 69, 14, 35, 80, 45, 69, 24, 15, 62, 12, 41, 55, 28, 55, 72, 90, 53, 25, 53, 54, 38, 52, 61]"
1811,ilp_partition,4,0,1,0,2,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18971943855285645}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [12, 6, 4, 10]"
1812,sub,8,17537022,17537022,1,17537022,1,"{'ok': True, 'value': 17537022, 'stdout': '17537022\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07594776153564453}",1,Compute: 84202559 - 66665537
1813,ilp_prod,4,24,40,0,30,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/adfbdbb51fa14b91b960ae815ffd86a4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/adfbdbb51fa14b91b960ae815ffd86a4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 35 RHS\nAt line 41 BOUNDS\nAt line 45 ENDATA\nProblem MODEL has 5 rows, 3 columns and 15 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 7.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.155242919921875}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 4, 3]
consumption (rows=resources) = [[3, 2, 4], [3, 2, 4], [1, 4, 1]]
capacity = [8, 9, 13]
upper_bounds = [3, 3, 3]"
1814,add,2,68,68,1,68,1,"{'ok': True, 'value': 68, 'stdout': '68\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08692049980163574}",1,Compute: 40 + 28
1815,ilp_prod,16,168,140,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_oje6nz67/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.2267906665802002}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [33, 26, 11, 29, 9, 27]
consumption (rows=resources) = [[14, 4, 2, 8, 15, 11], [10, 13, 16, 1, 1, 2], [8, 12, 11, 8, 5, 15], [16, 1, 9, 2, 1, 10]]
capacity = [40, 37, 59, 58]
upper_bounds = [3, 3, 3, 5, 3, 3]"
1816,sub,4,2179,8252,0,2179,1,"{'ok': True, 'value': 2179, 'stdout': '2179\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08274054527282715}",1,Compute: 9738 - 7559
1817,ilp_assign,2,5,1,0,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37181687355041504}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [5, 1]]"
1818,ilp_prod,2,17,23,0,4,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7dc9862660c947cb9ba07073133ebd64-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7dc9862660c947cb9ba07073133ebd64-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 18.6667 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1707758903503418}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 3]
consumption (rows=resources) = [[2, 2], [3, 2]]
capacity = [8, 8]
upper_bounds = [3, 4]"
1819,add,8,80055238,45337718,0,80055238,1,"{'ok': True, 'value': 80055238, 'stdout': '80055238\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07520675659179688}",1,Compute: 14328139 + 65727099
1820,ilp_prod,8,99,108,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ivriwc5l/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_ivriwc5l/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14952731132507324}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [24, 12, 16, 15]
consumption (rows=resources) = [[5, 6, 8, 1], [4, 5, 6, 7], [6, 1, 2, 2], [1, 6, 3, 1]]
capacity = [25, 24, 23, 32]
upper_bounds = [3, 4, 3, 3]"
1821,rod,4,36,12,0,1,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07401227951049805}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 9, 2, 1]"
1822,ilp_assign,32,86,10,0,165,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38546204566955566}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[56, 36, 14, 58, 94, 22, 76], [56, 13, 3, 1, 25, 20, 27], [37, 76, 42, 46, 95, 90, 17], [56, 22, 62, 72, 72, 53, 41], [87, 93, 71, 74, 8, 53, 75], [62, 19, 6, 78, 52, 72, 10], [10, 94, 71, 75, 1, 47, 73]]"
1823,ilp_prod,2,56,23,0,21,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/eb63048b44254d9a9b5badd12c18c1e8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/eb63048b44254d9a9b5badd12c18c1e8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 21 RHS\nAt line 25 BOUNDS\nAt line 28 ENDATA\nProblem MODEL has 3 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1512150764465332}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3]
consumption (rows=resources) = [[1, 2], [1, 3]]
capacity = [7, 7]
upper_bounds = [7, 3]"
1824,knap,32,1683,1045,0,1,0,"{'ok': True, 'value': 1683, 'stdout': '1683.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.46880269050598145}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [41, 10, 22, 32, 60, 44, 46, 24, 41, 49, 17, 16, 29, 56, 22, 42, 55, 6, 62, 64, 21, 44, 9, 4, 23, 57, 45, 63, 23, 31, 25, 28]
V = [84, 67, 67, 96, 13, 2, 114, 59, 16, 2, 57, 60, 31, 119, 2, 63, 126, 125, 16, 12, 111, 34, 25, 121, 26, 36, 36, 88, 123, 51, 116, 48]
C = 555"
1825,ilp_assign,4,16,,0,18,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40795278549194336}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 5, 3, 3], [12, 2, 4, 11], [9, 6, 11, 12], [8, 11, 2, 6]]"
1826,mul,2,1218,29,0,1238,0,"{'ok': True, 'value': 1218, 'stdout': '1218\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08469676971435547}",1,Compute: 42 * 29
1827,sub,4,936,936,1,936,1,"{'ok': True, 'value': 936, 'stdout': '936\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07425642013549805}",1,Compute: 7680 - 6744
1828,sub,16,401395578923928,8,0,401405579023928,0,"{'ok': True, 'value': 401395578923928, 'stdout': '401395578923928\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08223485946655273}",1,Compute: 4653674453694888 - 4252278874770960
1829,knap,4,32,27,0,0,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08366870880126953}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 3, 6, 5]
V = [16, 16, 11, 9]
C = 10"
1830,knap,8,52,110,0,103,0,"{'ok': True, 'value': 52, 'stdout': '52\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09092593193054199}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 12, 4, 5, 16, 13, 12, 9]
V = [10, 9, 5, 10, 6, 17, 3, 15]
C = 42"
1831,add,16,6118611825948326,6118611825948326,1,6118611825948326,1,"{'ok': True, 'value': 6118611825948326, 'stdout': '6118611825948326\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09447216987609863}",1,Compute: 3757195152759136 + 2361416673189190
1832,mul,32,2075305039408864835909570919213328044825259383771301338098606100,2032521789316743094789489459232666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666,0,"The result of the multiplication is a very large number, so it's not feasible to print the exact number here.",0,"{'ok': True, 'value': 2075305039408864835909570919213328044825259383771301338098606100, 'stdout': '2075305039408864835909570919213328044825259383771301338098606100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07963848114013672}",1,Compute: 29790030742380096287732801152950 * 69664414157736341509584567063358
1833,ilp_prod,2,14,21,0,21,0,"{'ok': True, 'value': 14, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/20d44fc213bf46ba8b4e8b3c360f8e05-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/20d44fc213bf46ba8b4e8b3c360f8e05-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 16.3333 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -14 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                14.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n14.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.20612788200378418}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 7]
consumption (rows=resources) = [[2, 2], [3, 3]]
capacity = [6, 7]
upper_bounds = [3, 3]"
1834,ilp_prod,4,51,39,0,3,0,"{'ok': True, 'value': 3, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/30160e701bfd464fa56b12d193258541-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/30160e701bfd464fa56b12d193258541-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 31.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -27 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                27.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 27.0\nx_0 = 0.0\nx_1 = 0.0\nx_2 = 3.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16944146156311035}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 10, 11]
consumption (rows=resources) = [[3, 1, 1], [1, 3, 4], [4, 4, 2]]
capacity = [12, 15, 14]
upper_bounds = [3, 3, 3]"
1835,add,16,13907075912463316,138070759124633166,0,13907075912463316,1,"{'ok': True, 'value': 13907075912463316, 'stdout': '13907075912463316\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0826268196105957}",1,Compute: 9335091321263522 + 4571984591199794
1836,sub,8,40118926,40118926,1,40118926,1,"{'ok': True, 'value': 40118926, 'stdout': '40118926\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08355212211608887}",1,Compute: 79132296 - 39013370
1837,ilp_partition,16,0,1,0,58,0,"{'ok': True, 'value': 392, 'stdout': '392\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19690489768981934}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [46, 45, 15, 2, 18, 4, 46, 16, 46, 3, 43, 35, 1, 48, 23, 1]"
1838,knap,8,126,147,0,60,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39888429641723633}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [12, 1, 10, 9, 1, 11, 2, 12]
V = [11, 27, 6, 28, 10, 30, 31, 21]
C = 29"
1839,add,16,10738444576925448,8866442379036037,0,10738445576925448,0,"{'ok': True, 'value': 10738444576925448, 'stdout': '10738444576925448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08482623100280762}",1,Compute: 1872002197889411 + 8866442379036037
1840,ilp_prod,2,18,35,0,42,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e500a98b83514ac7a4f7445006a98975-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/e500a98b83514ac7a4f7445006a98975-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 21 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -18 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                18.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal solution: 18.0\nProduct_0: 3.0\nProduct_1: 0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16084504127502441}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 5]
consumption (rows=resources) = [[2, 2], [2, 2]]
capacity = [7, 7]
upper_bounds = [3, 3]"
1841,ilp_partition,4,4,1,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21119928359985352}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 6, 10, 5]"
1842,knap,16,449,1043,0,1,0,"{'ok': False, 'value': None, 'stdout': 'The total weight exceeds the capacity.\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.400496244430542}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 18, 23, 3, 21, 8, 2, 23, 11, 14, 21, 20, 3, 16, 16, 32]
V = [15, 60, 36, 42, 33, 32, 5, 59, 43, 54, 60, 22, 63, 14, 31, 43]
C = 123"
1843,add,4,10104,10104,1,10104,1,"{'ok': True, 'value': 10104, 'stdout': '10104\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07735443115234375}",1,Compute: 1884 + 8220
1844,mul,4,12315580,67935,0,12103660,0,"{'ok': True, 'value': 12315580, 'stdout': '12315580\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0790565013885498}",1,Compute: 3265 * 3772
1845,ilp_partition,32,1,100,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07712244987487793}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 12, 58, 17, 69, 66, 22, 93, 79, 88, 79, 39, 15, 94, 65, 26, 14, 68, 58, 89, 28, 28, 46, 36]"
1846,add,16,7641028569319427,7641028569320427,0,7640928569319427,0,"{'ok': True, 'value': 7641028569319427, 'stdout': '7641028569319427\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07454085350036621}",1,Compute: 2728369900038231 + 4912658669281196
1847,sub,4,4810,4810,1,4810,1,"{'ok': True, 'value': 4810, 'stdout': '4810\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08298969268798828}",1,Compute: 9359 - 4549
1848,knap,32,1391,1085,0,-1,0,"{'ok': True, 'value': 1391, 'stdout': '1391\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08359742164611816}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 52, 50, 51, 13, 26, 36, 13, 33, 19, 31, 32, 33, 39, 19, 64, 54, 4, 30, 58, 30, 18, 25, 39, 56, 60, 33, 59, 20, 37, 49, 6]
V = [87, 35, 33, 18, 104, 3, 25, 96, 104, 114, 46, 53, 46, 123, 8, 113, 68, 61, 89, 26, 6, 5, 54, 58, 22, 12, 4, 52, 66, 6, 74, 27]
C = 552"
1849,rod,16,480,46,0,4,0,"{'ok': True, 'value': 480, 'stdout': '480\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09169411659240723}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [30, 47, 8, 43, 11, 30, 3, 15, 42, 35, 16, 33, 11, 47, 32, 24]"
1850,knap,4,17,14,0,6,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07441473007202148}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 3, 7, 7]
V = [3, 6, 11, 1]
C = 12"
1851,ilp_assign,32,98,185,0,240,0,"{'ok': True, 'value': 98, 'stdout': '98\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4342465400695801}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[44, 36, 93, 5, 55, 69, 28], [25, 13, 65, 85, 76, 51, 22], [18, 95, 5, 55, 19, 8, 34], [73, 16, 44, 43, 31, 11, 1], [84, 28, 96, 17, 41, 60, 40], [38, 23, 95, 6, 21, 52, 75], [91, 69, 50, 18, 26, 13, 50]]"
1852,knap,8,85,110,0,103,0,"{'ok': True, 'value': 85, 'stdout': '85\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08441853523254395}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 12, 7, 15, 7, 15, 4, 15]
V = [13, 23, 21, 22, 2, 28, 7, 21]
C = 38"
1853,add,4,18070,18070,1,18070,1,"{'ok': True, 'value': 18070, 'stdout': '18070\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08266139030456543}",1,Compute: 8514 + 9556
1854,ilp_assign,32,120,205,0,205,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4227447509765625}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[76, 76, 86, 90, 44, 93, 13], [19, 82, 89, 94, 17, 46, 26], [72, 40, 83, 77, 73, 90, 71], [47, 21, 3, 48, 57, 32, 17], [12, 77, 70, 53, 30, 22, 80], [69, 37, 52, 12, 59, 13, 83], [32, 22, 45, 42, 11, 40, 52]]"
1855,sub,2,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08766913414001465}",1,Compute: 40 - 37
1856,add,4,9448,9448,1,9448,1,"{'ok': True, 'value': 9448, 'stdout': '9448\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08499765396118164}",1,Compute: 5327 + 4121
1857,ilp_partition,2,2,1,0,0,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19389748573303223}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 1, 4, 4]"
1858,lcs,8,4,4,1,3,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07473301887512207}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baaddcca""
T = ""adccbcc"""
1859,lcs,2,0,0,1,-1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0870218276977539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ac""
T = ""bdd"""
1860,sub,8,39888052,40888052,0,40088052,0,"{'ok': True, 'value': 39888052, 'stdout': '39888052\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0746922492980957}",1,Compute: 78855554 - 38967502
1861,sub,2,6,6,1,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07455134391784668}",1,Compute: 19 - 13
1862,ilp_prod,4,36,33,0,15,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c80734fa579145648842aed924925a41-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c80734fa579145648842aed924925a41-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 11 COLUMNS\nAt line 39 RHS\nAt line 46 BOUNDS\nAt line 50 ENDATA\nProblem MODEL has 6 rows, 3 columns and 18 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 2.25 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from 0 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                0.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n0.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16053080558776855}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 12, 4]
consumption (rows=resources) = [[4, 3, 3], [4, 2, 2], [1, 2, 4]]
capacity = [11, 8, 11]
upper_bounds = [3, 3, 3]"
1863,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 344, 'stdout': '344\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19624066352844238}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 7, 44, 7, 23, 19, 31, 42, 25, 17, 25, 15, 25, 40, 13, 2]"
1864,lcs,32,18,10,0,26,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07970476150512695}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcaaaadcdbbdbbdccdcddcaaacaccac""
T = ""dcbccbacbdaadccdcccdcaabbdbaacddb"""
1865,ilp_assign,8,50,56,0,46,0,"{'ok': True, 'value': 50, 'stdout': '50\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4019279479980469}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[7, 3, 7, 15, 1, 11, 13], [4, 22, 13, 6, 13, 20, 24], [18, 24, 14, 10, 6, 14, 18], [9, 21, 17, 4, 14, 24, 24], [3, 12, 21, 1, 18, 16, 10], [24, 13, 19, 15, 21, 16, 12], [16, 17, 17, 8, 1, 12, 8]]"
1866,mul,4,21959526,1239,0,21855486,0,"{'ok': True, 'value': 21959526, 'stdout': '21959526\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07419013977050781}",1,Compute: 4206 * 5221
1867,ilp_assign,32,145,3,0,110,0,"{'ok': True, 'value': 145, 'stdout': '145\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3820993900299072}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 45, 58, 41, 87, 46, 77], [65, 79, 25, 29, 5, 64, 86], [4, 70, 4, 39, 95, 84, 30], [60, 47, 92, 50, 51, 85, 1], [92, 35, 42, 38, 25, 82, 60], [14, 65, 28, 41, 45, 51, 61], [44, 96, 61, 85, 89, 45, 3]]"
1868,sub,4,2536,2536,1,2536,1,"{'ok': True, 'value': 2536, 'stdout': '2536\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07684946060180664}",1,Compute: 9627 - 7091
1869,add,2,128,128,1,128,1,"{'ok': True, 'value': 128, 'stdout': '128\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07570147514343262}",1,Compute: 48 + 80
1870,ilp_assign,4,22,23,0,6,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3885467052459717}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 7, 5, 9], [11, 7, 6, 9], [12, 7, 8, 8], [2, 5, 10, 6]]"
1871,rod,2,6,6,1,7,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_dy4bads7/main.py"", line 16, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_dy4bads7/main.py"", line 12, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0852808952331543}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
1872,knap,8,94,100,0,60,0,"{'ok': True, 'value': 94, 'stdout': '94\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0841221809387207}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 9, 9, 4, 5, 4, 12, 12]
V = [18, 24, 4, 5, 27, 19, 24, 18]
C = 31"
1873,add,4,13291,13291,1,13291,1,"{'ok': True, 'value': 13291, 'stdout': '13291\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08381319046020508}",1,Compute: 3899 + 9392
1874,mul,8,2168292855971123,288,0,2163147532429773,0,"{'ok': True, 'value': 2168292855971123, 'stdout': '2168292855971123\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07760500907897949}",1,Compute: 74977319 * 28919317
1875,ilp_partition,8,1,1,1,4,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19913864135742188}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 13, 19, 22, 6, 11, 8, 17]"
1876,rod,8,184,24,0,30,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0835120677947998}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 14, 10, 7, 5, 4, 22, 8]"
1877,add,8,107980967,9,0,107981067,0,"{'ok': True, 'value': 107980967, 'stdout': '107980967\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08562827110290527}",1,Compute: 83550951 + 24430016
1878,knap,8,85,110,0,60,0,"{'ok': True, 'value': -965, 'stdout': '-965\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40380215644836426}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 9, 11, 7, 8, 2, 16, 8]
V = [14, 18, 11, 12, 29, 15, 3, 6]
C = 37"
1879,sub,16,2692504537512416,2752494538067314,0,2692504537512416,1,"{'ok': True, 'value': 2692504537512416, 'stdout': '2692504537512416\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08526015281677246}",1,Compute: 6670438448128969 - 3977933910616553
1880,sub,4,3760,3760,1,3760,1,"{'ok': True, 'value': 3760, 'stdout': '3760\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08488130569458008}",1,Compute: 9463 - 5703
1881,mul,4,8884155,180,0,8938695,0,"{'ok': True, 'value': 8884155, 'stdout': '8884155\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08404684066772461}",1,Compute: 3165 * 2807
1882,ilp_assign,32,118,208,0,39,0,"{'ok': True, 'value': 118, 'stdout': '118\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3771977424621582}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[86, 29, 62, 18, 94, 50, 39], [73, 32, 8, 66, 22, 70, 53], [26, 12, 84, 65, 41, 55, 55], [45, 58, 40, 41, 78, 12, 12], [63, 67, 14, 45, 9, 67, 81], [35, 80, 25, 95, 82, 90, 62], [52, 79, 25, 11, 46, 24, 71]]"
1883,ilp_partition,4,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2058272361755371}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 6, 9, 1]"
1884,sub,32,9390050099509190461023897880908,99999999999999999999999999999998,0,94900440098489190460923897881908,0,"{'ok': True, 'value': 9390050099509190461023897880908, 'stdout': '9390050099509190461023897880908\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08539557456970215}",1,Compute: 82094709072058003617715323971830 - 72704658972548813156691426090922
1885,mul,4,79118190,129853,0,79061190,0,"{'ok': True, 'value': 79118190, 'stdout': '79118190\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0801706314086914}",1,Compute: 7970 * 9927
1886,ilp_prod,8,55,70,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_jdwrylck/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_jdwrylck/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15274667739868164}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 7, 7, 11]
consumption (rows=resources) = [[8, 5, 8, 5], [4, 6, 4, 3], [8, 8, 3, 4], [7, 7, 5, 4]]
capacity = [27, 25, 30, 20]
upper_bounds = [3, 3, 3, 5]"
1887,mul,32,583524110667878504679304761503542838868715368787745970411537696,5981644322491242265319799977759735284538472368464,0,6014133333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333,0,"{'ok': True, 'value': 583524110667878504679304761503542838868715368787745970411537696, 'stdout': '583524110667878504679304761503542838868715368787745970411537696\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07494616508483887}",1,Compute: 25926595499964929062079199911079 * 22506777284686986321372325664224
1888,lcs,32,20,10,0,26,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08346080780029297}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccbbcbabcacbddbaadbabacaaadbccbb""
T = ""cbbabbaccbababbcccdcaabdcbddcbb"""
1889,sub,2,53,53,1,53,1,"{'ok': True, 'value': 53, 'stdout': '53\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08257603645324707}",1,Compute: 87 - 34
1890,sub,4,90,90,1,90,1,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09505248069763184}",1,Compute: 3509 - 3419
1891,sub,32,27896677811482987843734049539609,,0,27906677811483587843734049549609,0,"{'ok': True, 'value': 27896677811482987843734049539609, 'stdout': '27896677811482987843734049539609\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08781862258911133}",1,Compute: 99060287581476620129096065006142 - 71163609769993632285362015466533
1892,ilp_prod,8,88,100,0,The answer will be printed after running the code.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ho57taqf/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_ho57taqf/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1551063060760498}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [22, 13, 18, 12]
consumption (rows=resources) = [[1, 1, 8, 3], [2, 1, 4, 5], [4, 2, 4, 4], [5, 7, 5, 8]]
capacity = [31, 29, 22, 22]
upper_bounds = [4, 3, 3, 3]"
1893,knap,16,362,1043,0,1064,0,"{'ok': True, 'value': 453, 'stdout': '453\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.43646669387817383}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 17, 6, 28, 30, 23, 19, 28, 16, 5, 31, 6, 20, 32, 11, 11]
V = [41, 38, 43, 40, 25, 30, 52, 20, 30, 15, 1, 9, 11, 11, 23, 64]
C = 150"
1894,add,16,5691234157314390,5731234157304590,0,5691234157314390,1,"{'ok': True, 'value': 5691234157314390, 'stdout': '5691234157314390\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09301972389221191}",1,Compute: 2921294839704593 + 2769939317609797
1895,ilp_assign,32,152,0,0,110,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_b930qmoq/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3888711929321289}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[39, 24, 29, 76, 58, 66, 58], [70, 93, 1, 59, 11, 27, 88], [68, 39, 61, 26, 9, 18, 8], [67, 95, 43, 59, 49, 80, 74], [21, 87, 13, 59, 75, 32, 14], [21, 75, 37, 95, 70, 14, 12], [50, 24, 15, 88, 83, 72, 32]]"
1896,rod,32,2496,1084,0,78,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '', 'retcode': -9, 'timeout': False, 'duration_s': 2.029486894607544}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [78, 69, 88, 33, 57, 37, 34, 30, 75, 12, 34, 9, 28, 92, 94, 77, 55, 11, 58, 45, 81, 3, 18, 3, 7, 95, 35, 55, 53, 87, 54, 68]"
1897,sub,4,6296,6296,1,6296,1,"{'ok': True, 'value': 6296, 'stdout': '6296\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07651448249816895}",1,Compute: 7388 - 1092
1898,ilp_assign,16,57,105,0,4,0,"{'ok': True, 'value': 57, 'stdout': '57\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3690524101257324}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[37, 33, 14, 42, 36, 12, 21], [2, 39, 7, 45, 16, 6, 22], [26, 9, 34, 23, 28, 29, 19], [24, 1, 2, 45, 46, 3, 3], [5, 45, 36, 16, 7, 11, 11], [48, 9, 35, 46, 31, 25, 25], [10, 14, 20, 6, 6, 33, 8]]"
1899,rod,2,10,9,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1qkoilxu/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07382655143737793}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 4]"
1900,lcs,32,16,10,0,20,0,"{'ok': True, 'value': 16, 'stdout': '16\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07348752021789551}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dbcddadddbcddcbabadcbdbbbddcaabb""
T = ""cbccbbccbcdccccacabcacdabaabcab"""
1901,lcs,8,5,5,1,2,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07490921020507812}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""addbdcdb""
T = ""bbdcdcdb"""
1902,lcs,4,2,3,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07419157028198242}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cddd""
T = ""cdabb"""
1903,rod,16,576,46,0,31,0,"{'ok': True, 'value': 576, 'stdout': '576\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09659743309020996}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [36, 29, 23, 29, 24, 9, 43, 19, 16, 24, 33, 1, 42, 31, 14, 12]"
1904,ilp_prod,8,46,100,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ikbdak7l/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\n  File ""/tmp/cot_exec_ikbdak7l/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(4)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1457982063293457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 23, 21, 5]
consumption (rows=resources) = [[5, 7, 5, 7], [1, 8, 4, 5], [4, 1, 5, 2], [7, 6, 7, 6]]
capacity = [28, 22, 26, 16]
upper_bounds = [3, 3, 3, 3]"
1905,sub,8,66560357,66560357,1,66560357,1,"{'ok': True, 'value': 66560357, 'stdout': '66560357\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0738680362701416}",1,Compute: 99227799 - 32667442
1906,ilp_prod,4,33,33,1,33,1,"{'ok': True, 'value': 33, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/462d3388833d42189bb230a0fcf1b4d3-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/462d3388833d42189bb230a0fcf1b4d3-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 38.5 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -33 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                33.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n33.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15839123725891113}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [11, 3, 9]
consumption (rows=resources) = [[3, 4, 2], [4, 4, 4], [3, 4, 3]]
capacity = [12, 14, 10]
upper_bounds = [3, 3, 3]"
1907,ilp_partition,32,1,10,0,23,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08041143417358398}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [15, 89, 16, 80, 16, 84, 62, 95, 25, 18, 11, 67, 19, 21, 86, 73, 8, 9, 84, 81, 30, 26, 59, 23]"
1908,mul,16,50030264597818246097577714570420,2,0,4999999999999999899999999999999996,0,"{'ok': True, 'value': 50030264597818246097577714570420, 'stdout': '50030264597818246097577714570420\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08453726768493652}",1,Compute: 6614614544193935 * 7563594864606732
1909,sub,32,73569879392683689580419464442400,73569879392683689579439464442400,0,73570000000000000000000000000000,0,"{'ok': True, 'value': 73569879392683689580419464442400, 'stdout': '73569879392683689580419464442400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07490348815917969}",1,Compute: 96338430578159586665050219370486 - 22768551185475897084630754928086
1910,sub,16,2584838256326048,2584838256326048,1,2584838256326048,1,"{'ok': True, 'value': 2584838256326048, 'stdout': '2584838256326048\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08696532249450684}",1,Compute: 3937609817065604 - 1352771560739556
1911,mul{'ok': True, 'value': 2098827434536666301376938511041659828447607074270071280532166400, 'stdout': '2098827434536666301376938511041659828447607074270071280532166400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.18914508819580078}",1,Compute: 28541911131152360508733619197480 * 73534929910347862264392069731680
1912,rod,2,10,9,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_3zyliwa3/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0781409740447998}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [5, 4]"
1913,rod,4,12,6,0,9,0,"{'ok': True, 'value': 12, 'stdout': '12\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07331514358520508}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [3, 2, 3, 3]"
1914,mul{'ok': True, 'value': 8926676991929083532736756262092, 'stdout': '8926676991929083532736756262092\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08927798271179199}",1,Compute: 2543085925707909 * 3510175138672988
1915,rod,4,28,13,0,1,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07391119003295898}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [7, 7, 4, 6]"
1916,ilp_partition,2,0,0,1,0,1,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.2287299633026123}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 1, 5]"
1917,ilp_prod,32,323,409,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_21d42p8n/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23912739753723145}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 9, 79, 64, 4, 82]
consumption (rows=resources) = [[32, 8, 19, 5, 13, 31], [1, 28, 19, 32, 16, 26], [9, 13, 32, 12, 8, 5], [18, 19, 14, 20, 2, 26]]
capacity = [103, 102, 118, 108]
upper_bounds = [3, 3, 3, 3, 6, 3]"
1918,ilp_partition,16,1,10,0,1,1,"{'ok': True, 'value': 349, 'stdout': '349\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19089794158935547}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [16, 7, 7, 24, 37, 15, 13, 44, 36, 42, 13, 22, 10, 17, 5, 41]"
1919,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08201909065246582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bd""
T = ""da"""
1920,ilp_prod,32,486,345,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_aotwiwq9/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23629450798034668}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 67, 42, 95, 74, 23]
consumption (rows=resources) = [[1, 4, 5, 1, 17, 14], [29, 10, 11, 25, 1, 30], [17, 8, 24, 4, 8, 1], [17, 25, 15, 10, 17, 8]]
capacity = [109, 66, 82, 99]
upper_bounds = [3, 3, 3, 3, 5, 3]"
1921,ilp_prod,2,40,23,0,24,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d1bac2a2999446fbaf797ff4aee9b763-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d1bac2a2999446fbaf797ff4aee9b763-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 24 RHS\nAt line 29 BOUNDS\nAt line 32 ENDATA\nProblem MODEL has 4 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 8 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15100359916687012}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 3]
consumption (rows=resources) = [[1, 1], [2, 3]]
capacity = [7, 10]
upper_bounds = [5, 3]"
1922,sub,16,757690826344643,1848002535471518,0,757690826344643,1,"{'ok': True, 'value': 757690826344643, 'stdout': '757690826344643\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0775904655456543}",1,Compute: 2605693361816161 - 1848002535471518
1923,knap,4,27,23,0,14,0,"{'ok': True, 'value': 27, 'stdout': '27\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08226656913757324}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 3, 2]
V = [14, 13, 16, 1]
C = 3"
1924,ilp_assign,8,15,36,0,65,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4144740104675293}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[17, 20, 2, 11, 9, 10, 14], [23, 18, 16, 19, 1, 10, 14], [1, 7, 24, 23, 3, 8, 10], [21, 17, 21, 8, 1, 14, 3], [19, 17, 8, 3, 9, 22, 4], [19, 13, 22, 23, 13, 4, 15], [3, 1, 9, 6, 12, 16, 8]]"
1925,ilp_assign,4,18,,0,28,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3925652503967285}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[10, 1, 11, 4], [10, 12, 8, 7], [7, 3, 3, 11], [7, 7, 8, 12]]"
1926,add,2,60,60,1,60,1,"{'ok': True, 'value': 60, 'stdout': '60\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08591389656066895}",1,Compute: 43 + 17
1927,add,16,14996891354036689,6333451454056681,0,15036891354036689,0,"{'ok': True, 'value': 14996891354036689, 'stdout': '14996891354036689\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09200334548950195}",1,Compute: 7667179829087170 + 7329711524949519
1928,rod,2,12,6,0,9,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xyodyojl/main.py"", line 16, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_xyodyojl/main.py"", line 12, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07275509834289551}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 3]"
1929,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08627963066101074}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aa""
T = ""adb"""
1930,add,16,15364854430195578,8564284352565678,0,15364854430195578,1,"{'ok': True, 'value': 15364854430195578, 'stdout': '15364854430195578\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07245016098022461}",1,Compute: 9383960190611010 + 5980894239584568
1931,ilp_prod,2,24,16,0,6,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/23ff891279a94047801ef0c7c93afeae-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/23ff891279a94047801ef0c7c93afeae-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -10 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15730786323547363}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 8]
consumption (rows=resources) = [[2, 2], [3, 1]]
capacity = [7, 6]
upper_bounds = [3, 3]"
1932,add,32,131336228302928772598326174680733,135336128302435972432177118863735,0,131336228302928772608326174680733,0,"{'ok': True, 'value': 131336228302928772598326174680733, 'stdout': '131336228302928772598326174680733\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0745091438293457}",1,Compute: 79804440985685261739770046150677 + 51531787317243510858556128530056
1933,knap,16,466,1085,0,1080,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4212229251861572}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [29, 31, 21, 24, 31, 31, 7, 20, 7, 17, 3, 8, 4, 4, 5, 30]
V = [42, 62, 44, 61, 38, 57, 42, 3, 54, 51, 7, 18, 62, 27, 38, 33]
C = 136"
1934,ilp_assign,2,5,5,1,3,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.40148091316223145}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 1], [6, 1]]"
1935,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_9qmuwv6w/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08548927307128906}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 2]"
1936,ilp_prod,16,203,149,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_nm8ewthi/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.22715234756469727}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [28, 26, 40, 39, 47, 13]
consumption (rows=resources) = [[4, 5, 10, 9, 1, 12], [11, 16, 11, 6, 8, 15], [7, 12, 1, 3, 4, 3], [13, 8, 16, 3, 13, 16]]
capacity = [46, 32, 57, 43]
upper_bounds = [3, 3, 3, 5, 3, 3]"
1937,ilp_prod,8,110,102,0,29,0,"{'ok': True, 'value': 60, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/4398fe3b9a014096aa04b2d636befae7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/4398fe3b9a014096aa04b2d636befae7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 68.5714 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -60 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                60.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n60.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15232300758361816}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [15, 6, 18, 19]
consumption (rows=resources) = [[5, 7, 1, 4], [3, 7, 8, 3], [2, 7, 5, 3], [5, 4, 3, 3]]
capacity = [27, 32, 17, 29]
upper_bounds = [5, 3, 3, 5]"
1938,knap,8,108,103,0,103,0,"{'ok': True, 'value': 108, 'stdout': '108\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08452177047729492}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [15, 3, 3, 10, 10, 14, 11, 15]
V = [8, 23, 29, 27, 3, 26, 23, 1]
C = 40"
1939,rod,8,56,1,0,34,0,"{'ok': True, 'value': 56, 'stdout': '56\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08370590209960938}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [7, 2, 16, 1, 6, 4, 6, 17]"
1940,ilp_partition,16,0,1,0,120,0,"{'ok': True, 'value': 380, 'stdout': '380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21359539031982422}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [42, 36, 14, 3, 27, 46, 27, 3, 3, 26, 12, 7, 47, 26, 16, 45]"
1941,lcs,16,10,6,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07390141487121582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabbddcadaddaabd""
T = ""dcbdcbaadacbbdbba"""
1942,lcs,8,4,5,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08296513557434082}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bccbbbba""
T = ""abccdcdb"""
1943,ilp_assign,8,28,46,0,46,0,"{'ok': True, 'value': 28, 'stdout': '28\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4229862689971924}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[20, 12, 17, 17, 6, 16, 3], [7, 16, 12, 16, 24, 20, 14], [9, 6, 24, 1, 21, 16, 9], [2, 3, 20, 21, 24, 2, 12], [18, 16, 14, 19, 21, 16, 4], [7, 22, 2, 12, 13, 9, 12], [17, 20, 11, 5, 11, 5, 4]]"
1944,ilp_prod,4,26,35,0,22,0,"{'ok': True, 'value': 8, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/93190326ce834bbca9248d28663d1c3e-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/93190326ce834bbca9248d28663d1c3e-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 8 COLUMNS\nAt line 27 RHS\nAt line 31 BOUNDS\nAt line 35 ENDATA\nProblem MODEL has 3 rows, 3 columns and 9 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -8 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                8.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n8.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.15191936492919922}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 10, 5]
consumption (rows=resources) = [[1, 4, 3], [2, 1, 4], [1, 4, 3]]
capacity = [8, 11, 12]
upper_bounds = [5, 3, 3]"
1945,add,4,12881,8,0,12881,1,"{'ok': True, 'value': 12881, 'stdout': '12881\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08658075332641602}",1,Compute: 7585 + 5296
1946,ilp_prod,32,332,300,0,The answer will be the maximum profit that can be obtained subject to the resource constraints.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xy167oww/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_xy167oww/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14421725273132324}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [59, 3, 23, 47, 96, 91]
consumption (rows=resources) = [[22, 23, 21, 31, 30, 15], [1, 2, 31, 26, 5, 6], [13, 18, 13, 20, 5, 24], [23, 24, 25, 9, 22, 9]]
capacity = [74, 103, 88, 96]
upper_bounds = [3, 3, 3, 3, 3, 3]"
1947,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_um_un5ma/main.py"", line 18, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_um_un5ma/main.py"", line 14, in rod_cutting\n    revenue[i] = max(revenue[i], P[j] + revenue[i - j - 1])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07969021797180176}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [3, 3]"
1948,knap,8,92,110,0,103,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07942056655883789}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [14, 6, 2, 6, 6, 14, 7, 10]
V = [4, 4, 15, 2, 24, 17, 30, 19]
C = 32"
1949,sub,8,13546653,3546655,0,13546653,1,"{'ok': True, 'value': 13546653, 'stdout': '13546653\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07866144180297852}",1,Compute: 81759896 - 68213243
1950,lcs,8,4,5,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08300280570983887}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aaacddcb""
T = ""ddaccba"""
1951,lcs,2,1,1,1,-1,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07438468933105469}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""ddc"""
1952,ilp_prod,16,117,The actual numerical solution to this problem would require a linear programming solver and is beyond the scope of this platform.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_snssi9ju/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.23137736320495605}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [16, 21, 12, 13, 20, 25]
consumption (rows=resources) = [[4, 5, 12, 14, 4, 7], [12, 13, 6, 6, 13, 9], [5, 2, 12, 1, 9, 16], [11, 6, 7, 3, 2, 7]]
capacity = [33, 63, 54, 57]
upper_bounds = [5, 4, 3, 3, 4, 3]"
1953,sub,32,43139067253230616747178607113169,43810199463405970526744,0,43139067253230616747178607113169,1,"{'ok': True, 'value': 43139067253230616747178607113169, 'stdout': '43139067253230616747178607113169\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08008527755737305}",1,Compute: 65624929539810199463405970526744 - 22485862286579582716227363413575
1954,rod,2,8,8,1,8,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_m3ovpg3m/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0761725902557373}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
1955,ilp_prod,32,241,The solution to this problem involves using a linear programming solver to find the optimal values of x_j that maximize the total profit while satisfying the resource constraints.,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_mb8pzyap/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_mb8pzyap/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15307879447937012}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [54, 35, 26, 31, 60, 22]
consumption (rows=resources) = [[7, 1, 27, 3, 1, 23], [24, 16, 16, 23, 31, 10], [10, 18, 19, 17, 19, 14], [26, 9, 11, 23, 4, 6]]
capacity = [96, 108, 88, 123]
upper_bounds = [4, 4, 3, 4, 3, 4]"
1956,sub,2,11,11,1,11,1,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0751194953918457}",1,Compute: 96 - 85
1957,ilp_prod,16,420,320,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_x5p9dsil/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.25729942321777344}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [32, 27, 25, 45, 42, 27]
consumption (rows=resources) = [[3, 7, 2, 11, 3, 4], [11, 12, 9, 6, 3, 12], [2, 14, 8, 14, 6, 12], [9, 6, 6, 8, 1, 8]]
capacity = [46, 44, 60, 40]
upper_bounds = [4, 3, 4, 4, 10, 3]"
1958,knap,8,72,103,0,103,0,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37372398376464844}",0,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 14, 12, 8, 5, 12, 13, 13]
V = [19, 13, 14, 5, 25, 14, 12, 13]
C = 45"
1959,knap,32,1470,124,0,23,0,"{'ok': True, 'value': 1470, 'stdout': '1470\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08963227272033691}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [60, 47, 46, 35, 4, 26, 1, 24, 53, 51, 11, 62, 50, 7, 7, 2, 46, 19, 45, 57, 20, 34, 63, 16, 47, 15, 41, 22, 32, 17, 52, 6]
V = [79, 31, 94, 57, 62, 118, 35, 8, 11, 14, 55, 67, 59, 55, 34, 6, 20, 10, 54, 95, 6, 55, 115, 124, 40, 100, 94, 80, 73, 91, 5, 48]
C = 509"
1960,ilp_assign,32,129,205,0,216,0,"{'ok': True, 'value': 129, 'stdout': '129\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4121849536895752}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[93, 31, 18, 67, 49, 56, 41], [60, 64, 23, 35, 7, 67, 68], [95, 9, 25, 51, 23, 84, 85], [90, 32, 26, 95, 18, 43, 44], [54, 83, 54, 91, 50, 18, 53], [89, 3, 18, 17, 92, 93, 20], [16, 32, 83, 72, 15, 90, 75]]"
1961,knap,8,92,103,0,60,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0965275764465332}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [6, 1, 15, 16, 9, 6, 1, 14]
V = [23, 20, 28, 4, 3, 3, 16, 28]
C = 34"
1962,ilp_assign,16,84,105,0,110,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_u3cw8cdp/main.py"", line 6, in <module>\n    row_ind, col_ind = linear_sum_assignment(C)\nTypeError: Cannot cast scalar from dtype(\'O\') to dtype(\'float64\') according to the rule \'safe\'\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.41449594497680664}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[31, 16, 39, 19, 35, 48, 44], [46, 27, 25, 11, 8, 6, 41], [1, 4, 33, 44, 14, 40, 35], [20, 8, 38, 16, 45, 38, 12], [26, 5, 43, 19, 14, 8, 7], [27, 44, 33, 45, 46, 2, 12], [31, 18, 39, 22, 22, 26, 39]]"
1963,ilp_partition,8,0,1,0,390,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1926577091217041}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 20, 3, 4, 7, 3, 23, 14]"
1964,lcs,16,9,7,0,12,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08511018753051758}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adacacacaacddbac""
T = ""daadabbdbacabccb"""
1965,rod,2,8,8,1,8,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_geq65lba/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08690595626831055}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 4]"
1966,mul,32,3674809937610102374323329138489091810220226110465615043281719981,,0,3680897760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0,"{'ok': True, 'value': 3674809937610102374323329138489091810220226110465615043281719981, 'stdout': '3674809937610102374323329138489091810220226110465615043281719981\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08211684226989746}",1,Compute: 46204933882136973773786286525553 * 79532847011188987034340091770877
1967,lcs,8,3,3,1,6,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08151650428771973}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""baddccbc""
T = ""cdbdbbdd"""
1968,mul,4,49369738,65889349,0,49389938,0,"{'ok': True, 'value': 49369738, 'stdout': '49369738\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08415389060974121}",1,Compute: 6677 * 7394
1969,sub,4,378,378,1,378,1,"{'ok': True, 'value': 378, 'stdout': '378\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08293294906616211}",1,Compute: 3817 - 3439
1970,rod,4,32,12,0,23,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ktw_m2sc/main.py"", line 15, in <module>\n    res = rod_cutting(N, P)\n  File ""/tmp/cot_exec_ktw_m2sc/main.py"", line 9, in rod_cutting\n    rev = P[j] + revenue[i - j]\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08240485191345215}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 2, 6, 7]"
1971,mul,8,2018135941751350,20323855458585,0,2024334559857850,0,"{'ok': True, 'value': 2018135941751350, 'stdout': '2018135941751350\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08277225494384766}",1,Compute: 41039785 * 49175110
1972,rod,2,5,5,1,5,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_e__btvq1/main.py"", line 17, in <module>\n    print(rod_cutting(N, P))\n  File ""/tmp/cot_exec_e__btvq1/main.py"", line 10, in rod_cutting\n    max_revenue[i] = max(max_revenue[i], P[j] + max_revenue[i - j])\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08298206329345703}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 5]"
1973,ilp_partition,8,1,1,1,0,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19980955123901367}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 17, 14, 2, 10, 1, 3, 20]"
1974,mul{'ok': True, 'value': 16824522204581804210409883109974, 'stdout': '16824522204581804210409883109974\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08466172218322754}",1,Compute: 6978825765388817 * 2410795565068022
1975,rod,2,8,4,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_xuixz_54/main.py"", line 8, in <module>\n    res = rod_cutting(N, P)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08396697044372559}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 2]"
1976,ilp_assign,2,7,8,0,8,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4379284381866455}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [6, 2]]"
1977,ilp_partition,4,2,1,0,20,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20814752578735352}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [3, 8, 8, 1]"
1978,mul,4,40707024,4062944,0,40382664,0,"{'ok': True, 'value': 40707024, 'stdout': '40707024\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09983038902282715}",1,Compute: 7698 * 5288
1979,ilp_prod,2,48,26,0,24,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_0ve2lk7c/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 8*x[1]], ""Total Profit"")\nTypeError: lpSum() takes 1 positional argument but 2 were given\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1454484462738037}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 8]
consumption (rows=resources) = [[3, 1], [2, 1]]
capacity = [9, 6]
upper_bounds = [3, 6]"
1980,lcs,4,2,3,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09868168830871582}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabc""
T = ""daddc"""
1981,ilp_prod,8,74,85,0,The answer will be printed at the end of the code block.,0,"{'ok': True, 'value': 74, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/1410f6e239134052972c8f489823e22f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/1410f6e239134052972c8f489823e22f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 81.3846 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -55 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -74 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -74, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -77.7037 to -74\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                74.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n74.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16364097595214844}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 7, 18, 12]
consumption (rows=resources) = [[1, 8, 8, 3], [7, 2, 4, 8], [7, 6, 4, 1], [1, 5, 7, 3]]
capacity = [23, 23, 29, 32]
upper_bounds = [3, 3, 3, 3]"
1982,ilp_partition,32,0,10,0,1,0,"{'ok': True, 'value': 1116, 'stdout': '1116\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.23895931243896484}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [48, 29, 88, 12, 37, 55, 25, 70, 83, 4, 45, 30, 60, 65, 89, 67, 13, 15, 64, 85, 23, 38, 60, 11]"
1983,add,4,7511,32,0,7511,1,"{'ok': True, 'value': 7511, 'stdout': '7511\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08799076080322266}",1,Compute: 1223 + 6288
1984,add,32,123679108732816898923774646636016,,0,123679108732816898923774646636016,1,"{'ok': True, 'value': 123679108732816898923774646636016, 'stdout': '123679108732816898923774646636016\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08844828605651855}",1,Compute: 63734012748193020638057375234088 + 59945095984623878285717271401928
1985,ilp_prod,2,21,13,0,"The output will be the status of the problem (e.g., Optimal), the optimal value of the objective function, and the values of the variables at the optimal solution.",0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_afgy9bvn/main.py"", line 10, in <module>\n    prob += lpSum([3*x[0] + 7*x[1]], ""Total Profit"")\nTypeError: lpSum() takes 1 positional argument but 2 were given\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15812993049621582}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7]
consumption (rows=resources) = [[3, 2], [2, 2]]
capacity = [8, 6]
upper_bounds = [3, 3]"
1986,ilp_assign,2,5,5,1,5,1,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4008924961090088}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [4, 4]]"
1987,rod,32,1504,1055,0,840,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_gjar6s3y/main.py"", line 9, in <module>\n    res = cut_rod(P, N)\nNameError: name \'P\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08819127082824707}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 32
P = [47, 60, 64, 54, 41, 82, 11, 57, 76, 15, 52, 31, 20, 5, 10, 75, 44, 94, 15, 33, 75, 28, 29, 48, 50, 14, 92, 9, 68, 38, 72, 24]"
1988,ilp_assign,16,48,105,0,110,0,"{'ok': True, 'value': 48, 'stdout': '48\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4085259437561035}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[28, 19, 5, 30, 22, 10, 45], [35, 8, 18, 10, 37, 18, 11], [22, 16, 29, 29, 48, 17, 7], [19, 22, 2, 1, 38, 2, 48], [31, 22, 4, 41, 26, 1, 3], [4, 5, 6, 47, 19, 22, 4], [21, 45, 35, 4, 48, 46, 21]]"
1989,add,2,115,115,1,115,1,"{'ok': True, 'value': 115, 'stdout': '115\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08463335037231445}",1,Compute: 79 + 36
1990,lcs,32,21,10,0,24,0,"{'ok': True, 'value': 21, 'stdout': '21\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07301163673400879}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcddcbcbbbcbabdccdaaaddcbcccdbac""
T = ""bbdcbdcdbcbbcddbaddccaccbabccbad"""
1991,ilp_assign,2,6,3,0,6,1,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39472222328186035}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[3, 3], [6, 3]]"
1992,ilp_assign,16,90,30,0,117,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_bhxnpdi9/main.py"", line 4, in <module>\n    C = np.array([[11, 2, 39, 12, 46, 20, 17], ...])\nValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.3686215877532959}",0,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 2, 39, 12, 46, 20, 17], [11, 12, 27, 39, 30, 6, 26], [37, 12, 22, 29, 36, 15, 21], [25, 47, 34, 16, 4, 25, 19], [46, 46, 24, 30, 41, 8, 47], [42, 34, 20, 36, 42, 19, 30], [36, 22, 35, 44, 20, 17, 23]]"
1993,lcs,16,9,8,0,12,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08664751052856445}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aadbabddaadcbaac""
T = ""ddcbdcadadaaabc"""
1994,knap,2,9,4,0,1,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0831754207611084}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 3, 1]
V = [1, 1, 8]
C = 4"
1995,ilp_prod,8,66,66,1,3,0,"{'ok': True, 'value': 4, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/b5a97ddf195b41a994737083da081242-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/b5a97ddf195b41a994737083da081242-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 58 RHS\nAt line 67 BOUNDS\nAt line 72 ENDATA\nProblem MODEL has 8 rows, 4 columns and 32 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 4 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -4 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                4.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n4.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16778039932250977}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 6, 22, 19]
consumption (rows=resources) = [[7, 2, 7, 6], [4, 6, 6, 6], [6, 3, 6, 6], [2, 5, 6, 5]]
capacity = [25, 20, 29, 28]
upper_bounds = [3, 3, 3, 3]"
1996,sub,8,44146289,44146289,1,44146289,1,"{'ok': True, 'value': 44146289, 'stdout': '44146289\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0768125057220459}",1,Compute: 99408075 - 55261786
1997,ilp_prod,2,12,20,0,7,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/3e518e6ea7c4427286d7dfc421e97ab4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/3e518e6ea7c4427286d7dfc421e97ab4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1498703956604004}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 4]
consumption (rows=resources) = [[3, 3], [1, 2]]
capacity = [6, 7]
upper_bounds = [3, 3]"
1998,ilp_partition,4,1,1,1,3,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20786070823669434}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [10, 4, 3, 8]"
1999,ilp_prod,8,49,100,0,24,0,"{'ok': True, 'value': 46, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/9122a4b87f5947d6bacfcd6bdd458369-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/9122a4b87f5947d6bacfcd6bdd458369-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 60.375 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -46 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                46.00000000\nEnumerated nodes:               0\nTotal iterations:               1\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n46.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1524522304534912}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 7, 3, 5]
consumption (rows=resources) = [[3, 1, 6, 6], [8, 7, 4, 7], [1, 6, 7, 8], [7, 5, 2, 3]]
capacity = [25, 21, 28, 24]
upper_bounds = [3, 3, 4, 3]"
