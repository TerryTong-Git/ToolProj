idx,kind,digits,truth,answer_nl,correct_nl,answer_code,correct_code,answer_code_exec,correct_code_exec,problem
0,sub,2,36,36,1,36,1,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.141387939453125}",1,Compute: 78 - 42
1,rod,8,160,22,0,30,0,"{'ok': True, 'value': 160, 'stdout': '160\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09009552001953125}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [20, 5, 14, 23, 16, 3, 22, 16]"
2,lcs,2,1,0,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08125185966491699}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cd""
T = ""bd"""
3,ilp_partition,2,0,"The answer will be the minimum difference, which is the value in the bottom-right cell of the dynamic programming table.",0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07767963409423828}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 1, 6, 3]"
4,mul,4,41804802,109359,0,40153622,0,"{'ok': True, 'value': 41804802, 'stdout': '41804802\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09124588966369629}",1,Compute: 6102 * 6851
5,lcs,4,2,3,0,3,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08205795288085938}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bbdc""
T = ""ccbcd"""
6,rod,4,24,22,0,22,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07483077049255371}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [1, 12, 12, 10]"
7,ilp_assign,16,69,10,0,117,0,"{'ok': True, 'value': 69, 'stdout': '69\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 1.6507132053375244}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 3, 26, 36, 45, 39, 32], [46, 45, 7, 31, 36, 23, 22], [7, 44, 1, 16, 15, 32, 20], [18, 15, 1, 32, 23, 33, 22], [6, 5, 20, 37, 28, 15, 48], [24, 25, 10, 15, 19, 13, 48], [31, 43, 23, 19, 25, 40, 9]]"
8,ilp_partition,16,1,10,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20075678825378418}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 10, 22, 3, 22, 40, 11, 30, 25, 44, 13, 27, 32, 13, 11, 26]"
9,sub,8,3209608,3209608,1,3208608,0,"{'ok': True, 'value': 3209608, 'stdout': '3209608\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08178162574768066}",1,Compute: 64770653 - 61561045
10,rod,4,44,15,0,22,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08020424842834473}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [11, 8, 12, 11]"
11,sub,2,19,19,1,19,1,"{'ok': True, 'value': 19, 'stdout': '19\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09098315238952637}",1,Compute: 46 - 27
12,sub,8,8510592,84010592,0,85000592,0,"{'ok': True, 'value': 8510592, 'stdout': '8510592\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09163022041320801}",1,Compute: 86539892 - 78029300
13,mul,4,31862544,1080,0,31548264,0,"{'ok': True, 'value': 31862544, 'stdout': '31862544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08523797988891602}",1,Compute: 8246 * 3864
14,lcs,2,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.090911865234375}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bc""
T = ""abb"""
15,ilp_assign,2,2,0,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20035123825073242}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 1], [1, 1]]"
16,knap,16,407,107,0,184,0,"{'ok': True, 'value': 407, 'stdout': '407\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09484624862670898}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [23, 7, 31, 3, 10, 19, 3, 1, 25, 22, 11, 10, 11, 12, 11, 16]
V = [43, 4, 62, 51, 6, 29, 31, 37, 43, 22, 31, 46, 29, 21, 54, 60]
C = 107"
17,ilp_prod,2,10,17,0,21,0,"{'ok': True, 'value': 10, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/556f8db54f8e4062a81abe572b6d56a7-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/556f8db54f8e4062a81abe572b6d56a7-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 10.1429 - 0.00 seconds\nCgl0004I processed model has 1 rows, 2 columns (2 integer (0 of which binary)) and 2 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -10 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -10, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -10 to -10\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                10.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n10.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.21676373481750488}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 3]
consumption (rows=resources) = [[3, 2], [1, 3]]
capacity = [7, 8]
upper_bounds = [3, 3]"
18,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 92, 'stdout': '92\n', 'stderr': ""/tmp/cot_exec__hx_70jl/main.py:16: DeprecationWarning: Calling nonzero on 0d arrays is deprecated, as it behaves surprisingly. Use `atleast_1d(cond).nonzero()` if the old behavior was intended. If the context of this warning is of the form `arr[nonzero(cond)]`, just use `arr[cond]`.\n  subset_sum = np.sum(weights[np.where(np.binary_repr(i).zfill(len(weights)) == '1')])\n"", 'retcode': 0, 'timeout': False, 'duration_s': 0.20220470428466797}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 10, 1, 12, 19, 18, 2, 24]"
19,knap,4,11,11,1,12,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09425711631774902}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 3, 5, 1]
V = [2, 2, 7, 9]
C = 5"
20,ilp_assign,8,47,56,0,46,0,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.38664913177490234}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[21, 3, 6, 12, 2, 24, 21], [22, 6, 8, 20, 10, 20, 3], [23, 17, 10, 12, 14, 15, 2], [21, 23, 17, 22, 21, 18, 24], [14, 19, 15, 16, 9, 23, 16], [7, 11, 9, 2, 2, 2, 6], [12, 1, 10, 21, 1, 5, 3]]"
21,knap,8,93,147,0,60,0,"{'ok': True, 'value': 93, 'stdout': '93\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07479643821716309}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [4, 16, 12, 9, 5, 1, 7, 12]
V = [22, 31, 19, 19, 21, 12, 6, 7]
C = 33"
22,ilp_assign,4,11,14,0,18,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41674137115478516}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[4, 10, 3, 2], [4, 8, 7, 6], [9, 3, 2, 10], [8, 3, 10, 7]]"
23,sub,16,1969773049569501,1,0,1969773049569499,0,"{'ok': True, 'value': 1969773049569501, 'stdout': '1969773049569501\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10527920722961426}",1,Compute: 4920052939095502 - 2950279889526001
24,ilp_partition,2,0,"The answer will be the minimum difference, which is the value in the bottom-right cell of the dynamic programming table.",0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09942245483398438}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 1, 3, 1]"
25,add,8,54098399,55833299,0,54098409,0,"{'ok': True, 'value': 54098399, 'stdout': '54098399\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0963602066040039}",1,Compute: 41349381 + 12749018
26,rod,4,20,10,0,15,0,"{'ok': True, 'value': 20, 'stdout': '20\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08982992172241211}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [5, 4, 11, 7]"
27,ilp_prod,8,48,The maximum profit that can be achieved while satisfying all constraints.,0,105,0,"{'ok': True, 'value': 48, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/dcca275e509642358d2a1e00613433b6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/dcca275e509642358d2a1e00613433b6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 58.2857 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -48 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -57.857143 to -47 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -48, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -57.8571 to -47\nProbing was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                48.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n48.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1717081069946289}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [23, 24, 16, 7]
consumption (rows=resources) = [[8, 3, 6, 3], [4, 3, 8, 6], [7, 7, 8, 7], [4, 4, 8, 4]]
capacity = [17, 28, 17, 23]
upper_bounds = [3, 3, 3, 3]"
28,lcs,2,0,0,1,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09258890151977539}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dc""
T = ""a"""
29,add,16,7876243483070444,7876243483069444,0,7876243483069444,0,"{'ok': True, 'value': 7876243483070444, 'stdout': '7876243483070444\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08224701881408691}",1,Compute: 6654987979436494 + 1221255503633950
30,rod,2,2,2,1,2,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_0rsjedfv/main.py"", line 2, in <module>\n    dp = [0] * (N+1)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08247828483581543}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 1]"
31,mul,2,2436,2436,1,2436,1,"{'ok': True, 'value': 2436, 'stdout': '2436\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09607434272766113}",1,Compute: 87 * 28
32,ilp_prod,8,91,The maximum profit can be found by setting up the linear programming problem and solving it using a suitable software package.,0,105,0,"{'ok': True, 'value': 91, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/7f30ebce898f446ba86fee96d9d7e7dd-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/7f30ebce898f446ba86fee96d9d7e7dd-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 100 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -91 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 3.3333333\nCbc0013I At root node, 10 cuts changed objective from -100 to -91.769231 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 9 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 10 row cuts average 3.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -91, took 6 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -100 to -91.7692\nProbing was tried 4 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 9 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 4 times and created 10 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                91.00000000\nEnumerated nodes:               0\nTotal iterations:               6\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n91.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16386079788208008}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [19, 5, 24, 5]
consumption (rows=resources) = [[7, 1, 6, 1], [2, 1, 5, 5], [4, 3, 5, 4], [2, 7, 8, 6]]
capacity = [28, 21, 26, 29]
upper_bounds = [4, 4, 3, 4]"
33,add,2,126,126,1,126,1,"{'ok': True, 'value': 126, 'stdout': '126\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09736394882202148}",1,Compute: 71 + 55
34,rod,8,64,22,0,22,0,"{'ok': True, 'value': 64, 'stdout': '64\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0832366943359375}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [3, 16, 7, 10, 1, 23, 15, 20]"
35,knap,8,90,110,0,60,0,"{'ok': True, 'value': 90, 'stdout': '90\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08295202255249023}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 12, 4, 14, 3, 9, 4, 3]
V = [9, 32, 3, 15, 23, 7, 14, 12]
C = 27"
36,mul,16,12813393716245734847347139437816,6912413191771425,0,The result is too large to be represented as an integer.,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_4klmm7jz/main.py"", line 7, in <module>\n    res = math.pow(num1, num2)\nOverflowError: math range error\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.0880422592163086}",0,Compute: 1377754223867448 * 9300202818669417
37,ilp_prod,2,32,23,0,1,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/157408aa677946cd8eed88dd5966d7f1-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/157408aa677946cd8eed88dd5966d7f1-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 14 RHS\nAt line 17 BOUNDS\nAt line 20 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 2 (0) rows, 2 (0) columns and 4 (0) elements\n0  Obj -0 Dual inf 15 (2)\n1  Obj 32\nOptimal - objective value 32\nOptimal objective 32 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 32.0\nx_0 = 4.0\nx_1 = 0.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1691429615020752}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 7]
consumption (rows=resources) = [[2, 3], [2, 2]]
capacity = [9, 8]
upper_bounds = [4, 3]"
38,ilp_partition,8,0,1,0,1,0,"{'ok': True, 'value': 24, 'stdout': '24\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19723033905029297}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 19, 9, 3, 2, 5, 11, 21]"
39,knap,2,9,14,0,12,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09638714790344238}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 5, 4]
V = [2, 5, 9]
C = 6"
40,knap,4,18,14,0,28,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08165526390075684}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 1, 7, 4]
V = [3, 5, 1, 13]
C = 10"
41,add,4,17904,17904,1,17904,1,"{'ok': True, 'value': 17904, 'stdout': '17904\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09055423736572266}",1,Compute: 9251 + 8653
42,sub,16,1631202079515513,-1378212020464377,0,1631202079515513,1,"{'ok': True, 'value': 1631202079515513, 'stdout': '1631202079515513\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08721923828125}",1,Compute: 4224893984192202 - 2593691904676689
43,mul,2,1843,1843,1,1843,1,"{'ok': True, 'value': 1843, 'stdout': '1843\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11902308464050293}",1,Compute: 19 * 97
44,add,8,136874441,814461,0,136874441,1,"{'ok': True, 'value': 136874441, 'stdout': '136874441\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11618471145629883}",1,Compute: 74721608 + 62152833
45,sub,8,10499372,10507372,0,10499372,1,"{'ok': True, 'value': 10499372, 'stdout': '10499372\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11151790618896484}",1,Compute: 54652334 - 44152962
46,lcs,8,3,4,0,4,0,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09682655334472656}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbadbdd""
T = ""ddabaaa"""
47,ilp_prod,16,232,203,0,6,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_50iampfg/main.py"", line 10, in <module>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\n  File ""/tmp/cot_exec_50iampfg/main.py"", line 10, in <listcomp>\n    prob += lpSum([profit[j] * x[j] for j in range(6)])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.14457321166992188}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 46, 31, 26, 40, 47]
consumption (rows=resources) = [[9, 16, 8, 6, 3, 6], [1, 6, 14, 7, 15, 13], [9, 1, 5, 13, 6, 15], [2, 13, 3, 13, 11, 8]]
capacity = [64, 61, 34, 62]
upper_bounds = [3, 4, 4, 3, 4, 3]"
48,ilp_partition,8,5,1,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19997906684875488}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [22, 24, 22, 22, 8, 9, 12, 22]"
49,rod,4,32,15,0,15,0,"{'ok': True, 'value': 32, 'stdout': '32\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09522032737731934}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [8, 11, 7, 6]"
50,rod,16,336,46,0,64,0,"{'ok': True, 'value': 336, 'stdout': '336\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10430526733398438}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [21, 33, 1, 3, 4, 8, 37, 40, 10, 10, 44, 25, 2, 27, 28, 37]"
51,sub,16,3284393173733028,7,0,3284393173733028,1,"{'ok': True, 'value': 3284393173733028, 'stdout': '3284393173733028\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09781241416931152}",1,Compute: 7731162018403325 - 4446768844670297
52,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.21402597427368164}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [19, 44, 22, 32, 44, 13, 11, 24, 36, 23, 46, 29, 26, 29, 43, 21]"
53,sub,4,3066,3066,1,3066,1,"{'ok': True, 'value': 3066, 'stdout': '3066\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07299947738647461}",1,Compute: 9674 - 6608
54,ilp_assign,4,26,34,0,28,0,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39973998069763184}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[11, 11, 7, 9], [8, 11, 6, 8], [8, 11, 11, 4], [9, 10, 4, 1]]"
55,ilp_partition,2,1,"The answer will be the minimum difference, which is the value in the bottom-right cell of the dynamic programming table.",0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08885955810546875}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 2, 6, 1]"
56,ilp_prod,8,100,100,1,105,0,"{'ok': True, 'value': 100, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/131f92e85dea4a3fa03a6b55d43dcab8-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/131f92e85dea4a3fa03a6b55d43dcab8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 105.714 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -90 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 0 rows 0 columns\nCbc0012I Integer solution of -100 found by RINS after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -103.33333 to -90 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 5 row cuts average 2.8 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -100, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -103.333 to -90\nProbing was tried 1 times and created 8 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                100.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n100.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16463065147399902}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [10, 20, 15, 11]
consumption (rows=resources) = [[1, 2, 5, 1], [1, 5, 7, 7], [8, 2, 5, 6], [5, 4, 2, 1]]
capacity = [18, 24, 25, 26]
upper_bounds = [3, 4, 3, 3]"
57,ilp_assign,2,4,2,0,4,1,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08370232582092285}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 4], [1, 3]]"
58,lcs,16,8,6,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09414553642272949}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bdcbccbbdcbcaacc""
T = ""caaacabcbcdaddaad"""
59,lcs,8,7,6,0,6,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0903017520904541}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""aabcacbd""
T = ""aadcacbd"""
60,ilp_assign,4,6,1,0,11,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.42499852180480957}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2, 2, 12], [1, 9, 8, 11], [4, 2, 8, 7], [5, 4, 11, 1]]"
61,lcs,8,6,5,0,5,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09647774696350098}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cabaddcb""
T = ""caaadcab"""
62,mul,4,10612032,1082848,0,10649472,0,"{'ok': True, 'value': 10612032, 'stdout': '10612032\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09131431579589844}",1,Compute: 1216 * 8727
63,rod,2,12,5,0,5,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_1izo8xga/main.py"", line 2, in <module>\n    dp = [0] * (N+1)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.07750129699707031}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [6, 5]"
64,sub,4,2381,2381,1,2381,1,"{'ok': True, 'value': 2381, 'stdout': '2381\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09115934371948242}",1,Compute: 4332 - 1951
65,rod,16,224,42,0,65,0,"{'ok': True, 'value': 224, 'stdout': '224\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.1133887767791748}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [7, 28, 28, 16, 31, 25, 15, 26, 16, 42, 31, 26, 38, 5, 17, 18]"
66,ilp_partition,8,1,1,1,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20771288871765137}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 23, 8, 23, 17, 5, 9, 20]"
67,add,16,3560078081463234,3290087981463334,0,3560078081463234,1,"{'ok': True, 'value': 3560078081463234, 'stdout': '3560078081463234\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08438682556152344}",1,Compute: 2362035621519192 + 1198042459944042
68,mul,8,2661126893645976,25323360000000,0,270843393384596,0,"{'ok': True, 'value': 2661126893645976, 'stdout': '2661126893645976\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08554267883300781}",1,Compute: 48532344 * 54832029
69,mul,8,258700814332341,59,0,256843859941,0,"{'ok': True, 'value': 258700814332341, 'stdout': '258700814332341\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0901784896850586}",1,Compute: 17452713 * 14822957
70,knap,2,8,8,1,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08559989929199219}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [1, 1, 3]
V = [2, 6, 6]
C = 2"
71,knap,8,100,103,0,64,0,"{'ok': True, 'value': 100, 'stdout': '100\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0856776237487793}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 3, 3, 5, 14, 10, 14, 5]
V = [28, 20, 23, 6, 16, 29, 24, 4]
C = 33"
72,add,4,11676,30,0,11676,1,"{'ok': True, 'value': 11676, 'stdout': '11676\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0867927074432373}",1,Compute: 7410 + 4266
73,rod,2,6,6,1,6,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_eo13k_kt/main.py"", line 2, in <module>\n    dp = [0] * (N+1)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.09694552421569824}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [1, 6]"
74,ilp_partition,4,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09611988067626953}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 6, 9, 7]"
75,sub,8,5475727,5475727,1,5375727,0,"{'ok': True, 'value': 5475727, 'stdout': '5475727\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08633184432983398}",1,Compute: 50641782 - 45166055
76,knap,4,18,14,0,16,0,"{'ok': True, 'value': 18, 'stdout': '18\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0808570384979248}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 1, 5, 8]
V = [4, 9, 5, 12]
C = 8"
77,ilp_assign,16,82,0,0,118,0,"{'ok': True, 'value': 82, 'stdout': '82\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4148249626159668}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 26, 23, 33, 31, 15, 42], [46, 24, 41, 23, 28, 18, 23], [26, 46, 19, 7, 31, 19, 8], [29, 10, 23, 16, 48, 12, 22], [32, 15, 8, 44, 25, 25, 30], [33, 30, 37, 40, 15, 44, 26], [33, 20, 32, 15, 21, 34, 44]]"
78,mul,16,37124993202150766977759899631952,4,0,37388445512699999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,0,"{'ok': True, 'value': 37124993202150766977759899631952, 'stdout': '37124993202150766977759899631952\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07223057746887207}",1,Compute: 7184765707938448 * 5167182161713549
79,mul,16,15819608907828431777982900232386,154837512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123751237512375123,0,159244967699168666666666666666,0,"{'ok': True, 'value': 15819608907828431777982900232386, 'stdout': '15819608907828431777982900232386\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08050060272216797}",1,Compute: 4686503615517438 * 3375567417775647
80,add,4,15864,15864,1,15864,1,"{'ok': True, 'value': 15864, 'stdout': '15864\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09307670593261719}",1,Compute: 7485 + 8379
81,mul,2,1782,1782,1,1782,1,"{'ok': True, 'value': 1782, 'stdout': '1782\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08192682266235352}",1,Compute: 81 * 22
82,add,16,11317940851078756,11317940851078756,1,11317940851078756,1,"{'ok': True, 'value': 11317940851078756, 'stdout': '11317940851078756\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09969186782836914}",1,Compute: 1562103075879522 + 9755837775199234
83,ilp_assign,16,51,11,0,113,0,"{'ok': True, 'value': 51, 'stdout': '51\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3907768726348877}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 28, 14, 25, 3, 40, 18], [2, 38, 23, 46, 24, 22, 44], [30, 42, 9, 39, 34, 6, 17], [7, 46, 7, 18, 2, 45, 10], [40, 43, 9, 25, 14, 37, 43], [21, 13, 27, 33, 33, 8, 36], [7, 45, 31, 8, 33, 29, 31]]"
84,ilp_prod,4,28,28,1,28,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_ihnsnqjj/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15171527862548828}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 7, 7]
consumption (rows=resources) = [[4, 1, 3], [3, 3, 2], [1, 3, 1]]
capacity = [10, 15, 8]
upper_bounds = [3, 3, 3]"
85,add,4,14883,14883,1,14883,1,"{'ok': True, 'value': 14883, 'stdout': '14883\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08077001571655273}",1,Compute: 6739 + 8144
86,mul,8,1128845323553049,111771215666666666,0,11158365554499,0,"{'ok': True, 'value': 1128845323553049, 'stdout': '1128845323553049\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10020804405212402}",1,Compute: 61496581 * 18356229
87,ilp_assign,2,3,2,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20970821380615234}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[2, 2], [1, 2]]"
88,sub,4,1612,1612,1,1612,1,"{'ok': True, 'value': 1612, 'stdout': '1612\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09063410758972168}",1,Compute: 6874 - 5262
89,ilp_prod,2,16,30,0,1,0,"{'ok': True, 'value': 0, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/6732c94fc8d64b3fa6af2093fa2af260-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/6732c94fc8d64b3fa6af2093fa2af260-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 14 RHS\nAt line 17 BOUNDS\nAt line 20 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 2 (0) rows, 2 (0) columns and 4 (0) elements\n0  Obj -0 Dual inf 14 (2)\n1  Obj 18.666667\nOptimal - objective value 18.666667\nOptimal objective 18.66666667 - 1 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 18.6666664\nx_0 = 2.3333333\nx_1 = 0.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.15698981285095215}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [8, 6]
consumption (rows=resources) = [[3, 3], [2, 3]]
capacity = [7, 7]
upper_bounds = [3, 3]"
90,ilp_assign,2,2,0,0,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08473062515258789}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 1], [5, 1]]"
91,knap,2,15,14,0,13,0,"{'ok': True, 'value': 15, 'stdout': '15\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08354687690734863}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 1, 5]
V = [6, 9, 4]
C = 4"
92,ilp_assign,8,38,36,0,62,0,"{'ok': True, 'value': 38, 'stdout': '38\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.3976006507873535}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[15, 16, 24, 15, 2, 14, 16], [15, 15, 4, 3, 3, 8, 4], [5, 14, 7, 15, 20, 3, 14], [18, 13, 2, 6, 8, 16, 8], [5, 9, 12, 11, 14, 4, 18], [10, 20, 18, 7, 23, 10, 15], [17, 20, 15, 18, 21, 9, 9]]"
93,add,8,85016539,44424449,0,84946539,0,"{'ok': True, 'value': 85016539, 'stdout': '85016539\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09083962440490723}",1,Compute: 34423455 + 50593084
94,ilp_prod,16,292,160,0,1005,0,"{'ok': True, 'value': 292, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c30721ceb958487bbceb35ac0b5acb17-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c30721ceb958487bbceb35ac0b5acb17-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 15 COLUMNS\nAt line 64 RHS\nAt line 75 BOUNDS\nAt line 82 ENDATA\nProblem MODEL has 10 rows, 6 columns and 30 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 307.036 - 0.00 seconds\nCgl0004I processed model has 4 rows, 6 columns (6 integer (0 of which binary)) and 24 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -288 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0031I 2 added rows had average density of 5\nCbc0013I At root node, 2 cuts changed objective from -307.03636 to -293.32333 in 100 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 244 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 64 row cuts average 3.8 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1\nCbc0014I Cut generator 7 (ZeroHalf) - 6 row cuts average 5.5 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100\nCbc0010I After 0 nodes, 1 on tree, -288 best solution, best possible -293.32333 (0.02 seconds)\nCbc0012I Integer solution of -292 found by rounding after 347 iterations and 2 nodes (0.02 seconds)\nCbc0001I Search completed - best objective -292, took 347 iterations and 2 nodes (0.02 seconds)\nCbc0032I Strong branching done 14 times (30 iterations), fathomed 0 nodes and fixed 2 variables\nCbc0035I Maximum depth 1, 0 variables fixed on reduced cost\nCuts at root node changed objective from -307.036 to -293.323\nProbing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nGomory was tried 114 times and created 269 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)\nKnapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nFlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)\nTwoMirCuts was tried 114 times and created 108 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\nZeroHalf was tried 100 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)\n\nResult - Optimal solution found\n\nObjective value:                292.00000000\nEnumerated nodes:               2\nTotal iterations:               347\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.02   (Wallclock seconds):       0.02\n\n292.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.1888265609741211}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [48, 37, 16, 26, 48, 5]
consumption (rows=resources) = [[1, 13, 7, 3, 14, 14], [7, 1, 5, 16, 10, 13], [3, 3, 16, 1, 7, 14], [12, 10, 3, 1, 8, 1]]
capacity = [64, 55, 41, 61]
upper_bounds = [5, 4, 3, 3, 4, 3]"
95,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08900713920593262}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""badcabdd""
T = ""adaadba"""
96,knap,16,362,129,0,665,0,"{'ok': True, 'value': 362, 'stdout': '362\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11689305305480957}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [3, 25, 12, 23, 6, 6, 12, 17, 13, 17, 21, 17, 17, 30, 10, 29]
V = [20, 5, 23, 5, 41, 10, 25, 59, 31, 59, 21, 43, 18, 61, 8, 11]
C = 129"
97,add,2,58,58,1,58,1,"{'ok': True, 'value': 58, 'stdout': '58\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08809828758239746}",1,Compute: 15 + 43
98,rod,16,704,65,0,64,0,"{'ok': True, 'value': 704, 'stdout': '704\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10735273361206055}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [44, 22, 46, 16, 9, 24, 33, 14, 35, 26, 5, 9, 27, 37, 43, 23]"
99,ilp_prod,4,28,27,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_fp0rlgi2/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.16886448860168457}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [9, 3, 7]
consumption (rows=resources) = [[3, 2, 2], [4, 1, 1], [1, 2, 2]]
capacity = [8, 14, 8]
upper_bounds = [3, 4, 4]"
100,add,4,5954,5954,1,5954,1,"{'ok': True, 'value': 5954, 'stdout': '5954\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08818936347961426}",1,Compute: 3954 + 2000
101,mul{'ok': True, 'value': 21147671350532803657490627997378, 'stdout': '21147671350532803657490627997378\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08368897438049316}",1,Compute: 4683347299723927 * 4515503548451214
102,knap,2,8,15,0,15,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08552145957946777}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 5, 5]
V = [5, 8, 2]
C = 7"
103,ilp_prod,4,22,33,0,45,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_sdqdvog7/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15477204322814941}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 9, 11]
consumption (rows=resources) = [[3, 4, 4], [2, 4, 1], [3, 2, 3]]
capacity = [10, 14, 11]
upper_bounds = [3, 3, 3]"
104,knap,2,10,14,0,14,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09663677215576172}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 3]
V = [10, 4, 5]
C = 6"
105,rod,2,4,4,1,4,1,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_g00s4ud7/main.py"", line 21, in <module>\n    res = max_revenue(N, P)\n  File ""/tmp/cot_exec_g00s4ud7/main.py"", line 11, in max_revenue\n    rev = P[i] + max_revenue(N-i, P)\nIndexError: list index out of range\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08761787414550781}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [2, 2]"
106,mul,4,11668720,1164920,0,11480240,0,"{'ok': True, 'value': 11668720, 'stdout': '11668720\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09041523933410645}",1,Compute: 3110 * 3752
107,add,2,122,122,1,122,1,"{'ok': True, 'value': 122, 'stdout': '122\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07527971267700195}",1,Compute: 59 + 63
108,add,16,4438593326883251,4438593326883251,1,4438593326883251,1,"{'ok': True, 'value': 4438593326883251, 'stdout': '4438593326883251\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08168840408325195}",1,Compute: 1404990683301990 + 3033602643581261
109,rod,8,120,22,0,22,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08307504653930664}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 1, 7, 10, 4, 21, 10, 18]"
110,lcs,8,4,5,0,5,0,"{'ok': True, 'value': 4, 'stdout': '4\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08240365982055664}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dddadcca""
T = ""aacaccba"""
111,add,16,6560486473604907,,0,6560486473604907,1,"{'ok': True, 'value': 6560486473604907, 'stdout': '6560486473604907\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10054945945739746}",1,Compute: 3529905038924307 + 3030581434680600
112,sub,16,5926578466363324,5926578466363324,1,5926578466363324,1,"{'ok': True, 'value': 5926578466363324, 'stdout': '5926578466363324\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09026098251342773}",1,Compute: 9888266147392238 - 3961687681028914
113,rod,2,8,4,0,4,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_ka309w9o/main.py"", line 2, in <module>\n    dp = [0] * (N+1)\nNameError: name \'N\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.08774352073669434}",0,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 2
P = [4, 1]"
114,add,2,147,147,1,147,1,"{'ok': True, 'value': 147, 'stdout': '147\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08340787887573242}",1,Compute: 75 + 72
115,sub,2,67,67,1,67,1,"{'ok': True, 'value': 67, 'stdout': '67\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08466863632202148}",1,Compute: 89 - 22
116,lcs,4,3,2,0,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11961960792541504}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcbb""
T = ""cabbd"""
117,ilp_assign,8,37,0,0,36,0,"{'ok': True, 'value': 37, 'stdout': '37\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.41382670402526855}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[14, 22, 8, 20, 13, 18, 8], [15, 7, 11, 20, 4, 20, 3], [11, 11, 18, 15, 11, 9, 1], [17, 2, 7, 12, 3, 7, 17], [12, 7, 7, 9, 22, 24, 24], [10, 10, 17, 13, 9, 16, 12], [23, 8, 2, 10, 18, 3, 1]]"
118,ilp_prod,2,11,13,0,23,0,"{'ok': True, 'value': 11, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/d34c16f03a514f69bdea65135226296f-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/d34c16f03a514f69bdea65135226296f-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 11.6667 - 0.00 seconds\nCgl0004I processed model has 1 rows, 2 columns (2 integer (0 of which binary)) and 2 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -10 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0012I Integer solution of -11 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0013I At root node, 0 cuts changed objective from -11.5 to -11 in 2 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -11, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -11.5 to -11\nProbing was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                11.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n11.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16874432563781738}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 5]
consumption (rows=resources) = [[3, 1], [2, 3]]
capacity = [8, 7]
upper_bounds = [3, 3]"
119,knap,2,10,16,0,11,0,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09598898887634277}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 2, 2]
V = [1, 10, 5]
C = 3"
120,ilp_prod,16,164,168,0,239,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_r9jsmtwb/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.17499589920043945}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [13, 24, 43, 35, 24, 37]
consumption (rows=resources) = [[5, 13, 10, 8, 13, 12], [13, 16, 10, 14, 14, 4], [5, 5, 1, 4, 7, 4], [9, 6, 13, 3, 2, 1]]
capacity = [39, 55, 62, 52]
upper_bounds = [4, 3, 3, 3, 3, 3]"
121,mul,16,44123097730704121188130183049456,44584485376484869644644464,0,4416640396357858466664496464,0,"{'ok': True, 'value': 44123097730704121188130183049456, 'stdout': '44123097730704121188130183049456\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09971499443054199}",1,Compute: 5785854285409742 * 7626029891898568
122,sub,2,47,47,1,47,1,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09937262535095215}",1,Compute: 74 - 27
123,add,16,8488988083752320,8488987783752320,0,8488988083752320,1,"{'ok': True, 'value': 8488988083752320, 'stdout': '8488988083752320\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10028243064880371}",1,Compute: 6889602519731162 + 1599385564021158
124,ilp_assign,4,17,10,0,18,0,"{'ok': True, 'value': 17, 'stdout': '17\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4355049133300781}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 12, 12, 6], [6, 1, 9, 3], [5, 10, 3, 7], [10, 5, 12, 12]]"
125,rod,8,120,22,0,39,0,"{'ok': True, 'value': 120, 'stdout': '120\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08665323257446289}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [15, 11, 17, 5, 12, 15, 21, 21]"
126,mul,4,71996380,65,0,72064360,0,"{'ok': True, 'value': 71996380, 'stdout': '71996380\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10651254653930664}",1,Compute: 7715 * 9332
127,lcs,16,10,10,1,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08347129821777344}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""adbdabbdaddccdcc""
T = ""cadacbddddadcbc"""
128,sub,16,4231365152001630,4806920129007270,0,4231365152001630,1,"{'ok': True, 'value': 4231365152001630, 'stdout': '4231365152001630\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07522964477539062}",1,Compute: 9038285281008900 - 4806920129007270
129,knap,8,76,164,0,103,0,"{'ok': True, 'value': 76, 'stdout': '76\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08321499824523926}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [16, 15, 4, 14, 12, 6, 2, 8]
V = [31, 25, 2, 16, 6, 20, 7, 12]
C = 38"
130,ilp_partition,4,6,1,0,1,0,"{'ok': True, 'value': 6, 'stdout': '6\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08180904388427734}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 11, 9, 10]"
131,lcs,16,8,6,0,6,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08857393264770508}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ccddaccdacaddadc""
T = ""aacaccbcdcbacbcb"""
132,ilp_assign,8,26,11,0,26,1,"{'ok': True, 'value': 26, 'stdout': '26\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.37514424324035645}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 5, 1, 18, 17, 11, 12], [19, 21, 1, 5, 13, 5, 6], [17, 3, 5, 7, 16, 19, 23], [7, 8, 24, 5, 8, 13, 12], [20, 19, 5, 21, 16, 4, 20], [1, 17, 20, 12, 16, 15, 10], [1, 8, 18, 21, 6, 22, 16]]"
133,ilp_partition,8,2,1,0,1,0,"{'ok': True, 'value': 102, 'stdout': '102\n', 'stderr': ""/tmp/cot_exec_iv5pjbhk/main.py:16: DeprecationWarning: Calling nonzero on 0d arrays is deprecated, as it behaves surprisingly. Use `atleast_1d(cond).nonzero()` if the old behavior was intended. If the context of this warning is of the form `arr[nonzero(cond)]`, just use `arr[cond]`.\n  subset_sum = np.sum(weights[np.where(np.binary_repr(i).zfill(len(weights)) == '1')])\n"", 'retcode': 0, 'timeout': False, 'duration_s': 0.19257903099060059}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [7, 2, 11, 24, 24, 8, 11, 15]"
134,lcs,16,8,7,0,10,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08083176612854004}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bcaabcccccdddbab""
T = ""adbcadcbadcbbabad"""
135,ilp_assign,16,86,105,0,110,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4097707271575928}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[12, 30, 36, 22, 9, 27, 17], [25, 6, 37, 33, 22, 15, 30], [16, 23, 31, 27, 2, 29, 47], [1, 36, 26, 29, 15, 28, 16], [17, 31, 31, 10, 15, 29, 19], [24, 42, 32, 39, 10, 34, 44], [6, 13, 20, 34, 41, 44, 8]]"
136,ilp_partition,2,2,0,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08641767501831055}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [6, 1, 5, 4]"
137,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20094966888427734}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [20, 13, 23, 7, 11, 10, 13, 2]"
138,knap,4,22,26,0,23,0,"{'ok': True, 'value': 22, 'stdout': '22\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08858990669250488}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [2, 4, 5, 5]
V = [6, 4, 16, 13]
C = 8"
139,mul,4,14912440,138,0,14803400,0,"{'ok': True, 'value': 14912440, 'stdout': '14912440\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08752560615539551}",1,Compute: 5107 * 2920
140,knap,8,91,110,0,60,0,"{'ok': True, 'value': 91, 'stdout': '91\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08268451690673828}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [8, 12, 3, 5, 7, 1, 7, 4]
V = [1, 19, 24, 2, 15, 10, 12, 30]
C = 23"
141,add,4,4298,4298,1,4298,1,"{'ok': True, 'value': 4298, 'stdout': '4298\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10404419898986816}",1,Compute: 1645 + 2653
142,lcs,4,2,2,1,2,1,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08584094047546387}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcba""
T = ""acac"""
143,ilp_prod,16,173,160,0,100,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'Traceback (most recent call last):\n  File ""/tmp/cot_exec_m0pamjib/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15631723403930664}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 46, 29, 20, 27, 16]
consumption (rows=resources) = [[12, 5, 5, 4, 12, 6], [1, 14, 13, 15, 3, 3], [14, 5, 6, 5, 7, 6], [8, 1, 5, 16, 12, 10]]
capacity = [53, 39, 58, 48]
upper_bounds = [4, 3, 3, 3, 4, 4]"
144,ilp_prod,16,96,140,0,108,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_kvjrlq71/main.py"", line 8, in <module>\n    x = np.array([LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))])\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.247053861618042}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 12, 48, 28, 4, 29]
consumption (rows=resources) = [[13, 14, 4, 15, 15, 6], [6, 11, 16, 14, 6, 10], [4, 12, 12, 5, 12, 16], [2, 7, 9, 6, 11, 10]]
capacity = [56, 34, 50, 59]
upper_bounds = [4, 3, 3, 3, 3, 3]"
145,mul,8,1139664125555340,1120723140640000,0,113048459339100,0,"{'ok': True, 'value': 1139664125555340, 'stdout': '1139664125555340\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0891420841217041}",1,Compute: 27088710 * 42071554
146,knap,16,391,124,0,103,0,"{'ok': True, 'value': 391, 'stdout': '391\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0830240249633789}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [22, 1, 6, 7, 28, 23, 29, 22, 25, 24, 8, 9, 21, 2, 12, 9]
V = [3, 44, 25, 6, 53, 8, 40, 50, 7, 22, 46, 10, 53, 7, 57, 46]
C = 124"
147,sub,8,57430313,57430313,1,57430313,1,"{'ok': True, 'value': 57430313, 'stdout': '57430313\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09096884727478027}",1,Compute: 76237793 - 18807480
148,ilp_partition,16,0,10,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09265017509460449}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [1, 3, 4, 9, 16, 29, 44, 40, 15, 43, 44, 7, 34, 28, 42, 41]"
149,ilp_assign,4,9,10,0,11,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4042026996612549}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 2, 2, 9], [1, 2, 4, 3], [1, 5, 1, 8], [6, 3, 3, 11]]"
150,ilp_prod,4,48,2,0,33,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_8lnyhsna/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15293407440185547}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [12, 7, 3]
consumption (rows=resources) = [[2, 2, 3], [3, 3, 3], [1, 3, 1]]
capacity = [8, 12, 10]
upper_bounds = [4, 3, 3]"
151,knap,16,397,1043,0,643,0,"{'ok': True, 'value': 397, 'stdout': '397\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0832509994506836}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [17, 20, 30, 27, 12, 2, 30, 17, 13, 25, 5, 23, 7, 8, 2, 23]
V = [3, 23, 52, 2, 42, 59, 64, 61, 11, 7, 52, 34, 4, 13, 11, 43]
C = 130"
152,ilp_assign,2,10,4,0,10,1,"{'ok': True, 'value': 10, 'stdout': '10\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20903730392456055}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 6], [5, 5]]"
153,knap,8,86,60,0,60,0,"{'ok': True, 'value': 86, 'stdout': '86\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08981752395629883}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [10, 6, 13, 5, 5, 8, 11, 8]
V = [16, 12, 19, 24, 27, 3, 9, 2]
C = 33"
154,ilp_prod,4,36,34,0,63,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_xvua5xtl/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.1463181972503662}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 9, 8]
consumption (rows=resources) = [[3, 4, 1], [1, 4, 4], [3, 3, 1]]
capacity = [15, 9, 15]
upper_bounds = [5, 3, 3]"
155,ilp_prod,8,50,The maximum profit that can be obtained.,0,100,0,"{'ok': True, 'value': 50, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/a262bb38549e4ca3b75375437917fa23-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/a262bb38549e4ca3b75375437917fa23-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 13 COLUMNS\nAt line 46 RHS\nAt line 55 BOUNDS\nAt line 60 ENDATA\nProblem MODEL has 8 rows, 4 columns and 20 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 53.0513 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -31 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0038I Full problem 4 rows 4 columns, reduced to 2 rows 2 columns\nCbc0012I Integer solution of -50 found by DiveCoefficient after 5 iterations and 0 nodes (0.00 seconds)\nCbc0031I 3 added rows had average density of 4\nCbc0013I At root node, 3 cuts changed objective from -53.051282 to -50 in 4 passes\nCbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 1 (Gomory) - 6 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -50, took 5 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -53.0513 to -50\nProbing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 4 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                50.00000000\nEnumerated nodes:               0\nTotal iterations:               5\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n50.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17216968536376953}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [6, 19, 10, 8]
consumption (rows=resources) = [[2, 7, 5, 5], [3, 4, 2, 7], [7, 5, 5, 8], [6, 3, 3, 2]]
capacity = [19, 28, 28, 30]
upper_bounds = [4, 3, 3, 3]"
156,ilp_partition,4,7,1,0,1,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [9, 9, 1, 10]"
157,mul,16,38564467400811284293612594373628,36632631522811276,0,3802639955527955554948446666,0,"{'ok': True, 'value': 38564467400811284293612594373628, 'stdout': '38564467400811284293612594373628\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0723261833190918}",1,Compute: 9048077288227419 * 4262172633183412
158,knap,16,400,113,0,113,0,"{'ok': True, 'value': 400, 'stdout': '400\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08140110969543457}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [21, 2, 26, 31, 9, 3, 6, 23, 24, 1, 5, 13, 8, 31, 3, 21]
V = [4, 41, 51, 17, 36, 53, 19, 19, 52, 40, 8, 21, 17, 18, 62, 6]
C = 113"
159,sub,4,4929,4929,1,4929,1,"{'ok': True, 'value': 4929, 'stdout': '4929\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0965414047241211}",1,Compute: 8704 - 3775
160,ilp_prod,8,84,60,0,105,0,"{'ok': True, 'value': 84, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/96de52c32b2c405ca048d68cee91f214-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/96de52c32b2c405ca048d68cee91f214-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 38 RHS\nAt line 43 BOUNDS\nAt line 48 ENDATA\nProblem MODEL has 4 rows, 4 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 92.5714 - 0.00 seconds\nCgl0004I processed model has 4 rows, 4 columns (4 integer (0 of which binary)) and 16 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of -84 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0006I The LP relaxation is infeasible or too expensive\nCbc0013I At root node, 0 cuts changed objective from -90 to -90 in 1 passes\nCbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 1 column cuts (1 active)  in 0.000 seconds - new frequency is 1\nCbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\nCbc0001I Search completed - best objective -84, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -90 to -90\nProbing was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                84.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n84.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.16342926025390625}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [7, 20, 24, 12]
consumption (rows=resources) = [[6, 8, 7, 4], [8, 8, 6, 8], [1, 8, 5, 3], [8, 1, 4, 1]]
capacity = [27, 31, 28, 16]
upper_bounds = [3, 3, 3, 3]"
161,sub,2,47,47,1,47,1,"{'ok': True, 'value': 47, 'stdout': '47\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09148335456848145}",1,Compute: 84 - 37
162,knap,2,7,13,0,13,0,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0920565128326416}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [5, 4, 3]
V = [4, 7, 7]
C = 6"
163,lcs,4,1,3,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08137774467468262}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""cbdd""
T = ""aadcc"""
164,rod,16,544,46,0,65,0,"{'ok': True, 'value': 544, 'stdout': '544\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11797952651977539}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [34, 24, 35, 2, 39, 40, 31, 16, 18, 3, 40, 21, 26, 41, 7, 35]"
165,ilp_assign,8,44,18,0,46,0,"{'ok': True, 'value': 44, 'stdout': '44\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.39739179611206055}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[8, 1, 4, 20, 23, 4, 6], [24, 14, 8, 7, 10, 24, 22], [1, 24, 18, 17, 14, 2, 4], [13, 21, 9, 4, 24, 19, 12], [8, 22, 23, 23, 18, 22, 10], [8, 24, 8, 3, 17, 10, 22], [11, 8, 12, 21, 16, 10, 19]]"
166,ilp_prod,4,31,39,0,39,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_52mkp4ka/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.15932083129882812}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [5, 12, 7]
consumption (rows=resources) = [[3, 4, 2], [3, 1, 4], [2, 1, 3]]
capacity = [10, 16, 9]
upper_bounds = [3, 3, 3]"
167,add,8,108211278,108211278,1,108211278,1,"{'ok': True, 'value': 108211278, 'stdout': '108211278\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08225226402282715}",1,Compute: 98178973 + 10032305
168,add,8,180231588,8870372691527862,0,180231588,1,"{'ok': True, 'value': 180231588, 'stdout': '180231588\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09557032585144043}",1,Compute: 91527862 + 88703726
169,ilp_partition,4,1,1,1,2,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [5, 9, 10, 7]"
170,ilp_assign,2,7,7,1,7,1,"{'ok': True, 'value': 7, 'stdout': '7\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22843384742736816}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[6, 2], [5, 5]]"
171,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.19739437103271484}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [4, 22, 44, 34, 13, 47, 21, 12, 34, 35, 46, 39, 38, 28, 10, 41]"
172,add,2,109,109,1,109,1,"{'ok': True, 'value': 109, 'stdout': '109\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08438348770141602}",1,Compute: 61 + 48
173,rod,4,36,10,0,10,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08134770393371582}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 3, 4, 7]"
174,ilp_assign,2,8,0,0,7,0,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.22695088386535645}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[5, 4], [4, 3]]"
175,rod,16,384,60,0,65,0,"{'ok': True, 'value': 384, 'stdout': '384\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11262702941894531}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 16
P = [24, 37, 9, 25, 37, 1, 11, 38, 1, 44, 25, 46, 12, 10, 2, 2]"
176,lcs,16,9,10,0,10,0,"{'ok': True, 'value': 9, 'stdout': '9\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0837092399597168}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""dcccadccccbdbabd""
T = ""dadbacbbcdabbcbd"""
177,ilp_prod,2,30,23,0,1,0,"{'ok': True, 'value': 6, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/712e88e6c1af430db114cdb7456ddec4-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/712e88e6c1af430db114cdb7456ddec4-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 14 RHS\nAt line 17 BOUNDS\nAt line 20 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nPresolve 2 (0) rows, 2 (0) columns and 4 (0) elements\n0  Obj -0 Dual inf 8.9999998 (2)\n2  Obj 30\nOptimal - objective value 30\nOptimal objective 30 - 2 iterations time 0.002\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: Optimal\nOptimal value: 30.0\nx_0 = 0.0\nx_1 = 6.0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.16568636894226074}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [4, 5]
consumption (rows=resources) = [[2, 1], [1, 1]]
capacity = [7, 6]
upper_bounds = [3, 6]"
178,ilp_partition,16,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20113301277160645}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [8, 34, 16, 32, 19, 18, 26, 28, 31, 45, 4, 11, 46, 34, 23, 13]"
179,rod,8,184,24,0,30,0,"{'ok': True, 'value': 184, 'stdout': '184\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08819031715393066}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 8
P = [23, 15, 13, 6, 14, 14, 6, 8]"
180,lcs,4,3,3,1,3,1,"{'ok': True, 'value': 3, 'stdout': '3\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08247566223144531}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddad""
T = ""dabda"""
181,knap,8,74,103,0,66,0,"{'ok': True, 'value': 74, 'stdout': '74\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09679222106933594}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [13, 14, 1, 14, 11, 15, 7, 12]
V = [19, 31, 6, 12, 7, 18, 8, 10]
C = 43"
182,ilp_partition,16,0,1,0,4,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.20467329025268555}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [45, 40, 32, 43, 37, 14, 39, 29, 3, 16, 32, 39, 21, 36, 47, 13]"
183,lcs,2,2,1,0,1,0,"{'ok': True, 'value': 2, 'stdout': '2\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10286402702331543}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ad""
T = ""adc"""
184,ilp_partition,8,1,1,1,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10448837280273438}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [24, 16, 18, 11, 23, 3, 9, 5]"
185,mul,2,3640,3640,1,3640,1,"{'ok': True, 'value': 3640, 'stdout': '3640\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08624911308288574}",1,Compute: 52 * 70
186,mul,2,1078,2178,0,1098,0,"{'ok': True, 'value': 1078, 'stdout': '1078\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08998799324035645}",1,Compute: 49 * 22
187,sub,4,61,61,1,61,1,"{'ok': True, 'value': 61, 'stdout': '61\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08234524726867676}",1,Compute: 3653 - 3592
188,lcs,4,1,3,0,2,0,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.07506060600280762}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""daab""
T = ""cbbbd"""
189,lcs,16,8,7,0,8,1,"{'ok': True, 'value': 8, 'stdout': '8\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09380698204040527}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""babbacbbbabbadad""
T = ""baccdaadaccbdbcbd"""
190,ilp_partition,2,1,The answer will be the minimum difference between the two groups of weights.,0,0,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': 'no_fenced_code', 'retcode': None, 'timeout': False, 'duration_s': 0.0}",0,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 2, 6, 1]"
191,lcs,2,0,1,0,1,0,"{'ok': True, 'value': 0, 'stdout': '0\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09220433235168457}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""bb""
T = ""daa"""
192,ilp_prod,2,12,9,0,18,0,"{'ok': True, 'value': 12, 'stdout': 'Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/c12b672e4335449bb755532086ab72a6-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/c12b672e4335449bb755532086ab72a6-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 7 COLUMNS\nAt line 18 RHS\nAt line 21 BOUNDS\nAt line 24 ENDATA\nProblem MODEL has 2 rows, 2 columns and 4 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 12 - 0.00 seconds\nCgl0004I processed model has 0 rows, 0 columns (0 integer (0 of which binary)) and 0 elements\nCbc3007W No integer variables - nothing to do\nCuts at root node changed objective from -12 to -1.79769e+308\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                12.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\n12.0\n', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\n', 'retcode': 0, 'timeout': False, 'duration_s': 0.17220759391784668}",1,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [3, 6]
consumption (rows=resources) = [[3, 3], [1, 1]]
capacity = [6, 6]
upper_bounds = [3, 3]"
193,knap,4,11,11,1,10,0,"{'ok': True, 'value': 11, 'stdout': '11\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.10823345184326172}",1,"0/1 Knapsack: Given item weights W and values V and capacity C, compute the maximum total value.
W = [7, 6, 1, 4]
V = [1, 1, 4, 7]
C = 9"
194,mul,8,3071496399355219,3089255844344677,0,309525135584649,0,"{'ok': True, 'value': 3071496399355219, 'stdout': '3071496399355219\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.11616277694702148}",1,Compute: 31984249 * 96031531
195,ilp_prod,16,145,159,0,105,0,"{'ok': False, 'value': None, 'stdout': '', 'stderr': '/mnt/nlpgpu-io1/data/terry/ToolProj/.pixi/envs/default/lib/python3.10/site-packages/pulp/pulp.py:1489: UserWarning: Spaces are not permitted in the name. Converted to \'_\'\n  warnings.warn(""Spaces are not permitted in the name. Converted to \'_\'"")\nTraceback (most recent call last):\n  File ""/tmp/cot_exec_h8767p9i/main.py"", line 7, in <module>\n    x = [LpVariable(""x_%s"" % j, 0, None, LpInteger) for j in range(len(profit))]\nNameError: name \'profit\' is not defined\n', 'retcode': 1, 'timeout': False, 'duration_s': 0.18193411827087402}",0,"Production planning: Choose integer quantities x_j ≥ 0 to maximize total profit sum_j profit[j]*x_j, subject to resource constraints sum_j consumption[i][j]*x_j ≤ capacity[i]. Return the max profit.
profit = [42, 9, 20, 35, 34, 38]
consumption (rows=resources) = [[13, 16, 9, 6, 8, 12], [6, 10, 5, 15, 3, 3], [16, 13, 14, 3, 9, 16], [8, 4, 10, 5, 12, 4]]
capacity = [40, 35, 40, 44]
upper_bounds = [3, 3, 3, 3, 3, 3]"
196,ilp_partition,4,1,The answer will be the minimum difference between the two subsets.,0,1,1,"{'ok': True, 'value': 1, 'stdout': '1\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.09249544143676758}",1,"Partition: Split the items into two groups to minimize the absolute difference between the sums. Return the minimum difference as an integer.
weights = [2, 12, 7, 4]"
197,lcs,8,5,5,1,4,0,"{'ok': True, 'value': 5, 'stdout': '5\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.0871744155883789}",1,"Compute the length of the Longest Common Subsequence (LCS) between strings:
S = ""ddbdabcd""
T = ""dddaadb"""
198,rod,4,36,14,0,16,0,"{'ok': True, 'value': 36, 'stdout': '36\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.08670330047607422}",1,"Rod cutting: Given a rod of length N and price list P[1..N], compute the maximum obtainable revenue.
N = 4
P = [9, 6, 6, 10]"
199,ilp_assign,16,35,105,0,76,0,"{'ok': True, 'value': 35, 'stdout': '35\n', 'stderr': '', 'retcode': 0, 'timeout': False, 'duration_s': 0.4123859405517578}",1,"Assignment problem: Given an n×n cost matrix C, assign each worker to one task minimizing the total cost. Return the minimum total cost as an integer. 
C = [[1, 6, 31, 21, 26, 15, 28], [4, 37, 3, 27, 6, 17, 13], [47, 21, 12, 8, 12, 45, 24], [2, 15, 3, 1, 25, 35, 1], [9, 8, 39, 39, 13, 6, 48], [30, 13, 1, 34, 40, 27, 5], [35, 12, 15, 15, 27, 25, 31]]"
